{"content":"---\n# required metadata\n\ntitle: F Classes - FormDataObject to FormFastTabHeaderControl\ndescription: API reference for classes from FormDataObject to FormFastTabHeaderControl.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 63703\nms.assetid: 7c23d29c-9408-49ca-82e7-ddb940dc8526\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# F Classes - FormDataObject to FormFastTabHeaderControl\n\n[!include[banner](../includes/banner.md)]\n\n\nAPI reference for classes from FormDataObject to FormFastTabHeaderControl.\n\nClass FormDataObject\n--------------------\n\n    class FormDataObject extends FormObject\n\nThe FormDataObject class represents the fields, affects how controls that refer to a field are displayed on form data sources, and modifies lookup and validation behavior.\n\n### Remarks\n\nBy changing the properties, you affect how controls that refer to the field are displayed. Furthermore, if you override the methods on this class, the behavior on lookup and validation can be modified. By using the properties on the FormDataObject class instead of properties on the individual controls, you make sure that the various representations of the same field are handled consistently. This also makes upgrades easier.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public Common lookupReference(\\[FormReferenceControl formReferenceControl\\])                                |                                                                                                                                                                         |\n| public Common resolveReference(\\[FormReferenceControl formReferenceControl\\])                               |                                                                                                                                                                         |\n| public str resolveAmbiguousReference(\\[FormControl formControl\\])                                           |                                                                                                                                                                         |\n| public int allowAdd(\\[int value\\])                                                                          | Sets or returns the value of the allowAdd property for the form data object.                                                                                            |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can modify the contents of the control.                                                                                                     |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                                                         |\n| public FormDataSource datasource()                                                                          |                                                                                                                                                                         |\n| public boolean editAutoPostback(\\[boolean value\\])                                                          |                                                                                                                                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether the object is enabled or disabled.                                                                                                                   |\n| public FieldId fieldId()                                                                                    |                                                                                                                                                                         |\n| public str helpField()                                                                                      | Returns the Help text for the control.                                                                                                                                  |\n| public str labelText()                                                                                      | Returns the label text for the control.                                                                                                                                 |\n| public boolean mandatory(\\[boolean value\\])                                                                 | Sets or returns a value that indicates whether the data field is mandatory.                                                                                             |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control that is associated with the data source. |\n| public str toolTip()                                                                                        |                                                                                                                                                                         |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| private void OnModified(\\[FormDataObject sender\\], \\[FormDataFieldEventArgs e\\])                            |                                                                                                                                                                         |\n| private void OnValidated(\\[FormDataObject sender\\], \\[FormDataFieldEventArgs e\\])                           |                                                                                                                                                                         |\n| public void modified()                                                                                      | Indicates that the field has been successfully validated and modified in the current record.                                                                            |\n| private void OnValidating(\\[FormDataObject sender\\], \\[FormDataFieldEventArgs e\\])                          |                                                                                                                                                                         |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void restore()                                                                                       |                                                                                                                                                                         |\n| public void lookup(FormControl formControl, str filterStr)                                                  |                                                                                                                                                                         |\n| public void dataChanged()                                                                                   |                                                                                                                                                                         |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| public void context()                                                                                       |                                                                                                                                                                         |\n| public void find()                                                                                          |                                                                                                                                                                         |\n| public void filter(\\[str filterStr\\], \\[NoYes clearPrev\\])                                                  |                                                                                                                                                                         |\n| public void performFormLookup(xFormRun form, FormControl formControl)                                       |                                                                                                                                                                         |\n\n### Method lookupReference\n\n    public Common lookupReference([FormReferenceControl formReferenceControl])\n\n#### Parameters\n\nformReferenceControl  \n\n#### Return Value\n\n### Method resolveReference\n\n    public Common resolveReference([FormReferenceControl formReferenceControl])\n\n#### Parameters\n\nformReferenceControl  \n\n#### Return Value\n\n### Method resolveAmbiguousReference\n\n    public str resolveAmbiguousReference([FormControl formControl])\n\n#### Parameters\n\nformControl  \n\n#### Return Value\n\n### Method allowAdd\n\nSets or returns the value of the allowAdd property for the form data object.\n\n    public int allowAdd([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\nA FormAllowAdd enumeration value that indicates whether the allowAdd property is set to No, Restricted, or Yes.\n\n#### Examples\n\nThe following example shows how to retrieve and set the allowAdd property.\n\n    // fdo previously assigned to a FormDataObject object. \n    // Retrieve the allowAdd property. \n    nAllowAdd = fdo.allowAdd(); \n    // Set the allowAdd property. \n    fdo.allowAdd(FormAllowAdd::Restricted);\n\n### Method allowEdit\n\nDetermines whether the user can modify the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be modified; otherwise, false.\n\n#### Remarks\n\nIf this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n#### Examples\n\nThe following example shows how to retrieve and set the value of the allowEdit property.\n\n    // Return the value. \n    info (strfmt(\"allowEdit: %1\", this.allowEdit())); \n    // Set the value. \n    this.allowEdit(false);\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method datasource\n\n    public FormDataSource datasource()\n\n#### Return Value\n\n### Method editAutoPostback\n\n    public boolean editAutoPostback([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method enabled\n\nDetermines whether the object is enabled or disabled.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property lets you enable or disable a control at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message that provides read-only information.\n\n#### Examples\n\nThe following example shows how to retrieve and set the enabled property for a control.\n\n    // Return the value of the enabled property. \n    info(strfmt(\"enabled: %1\", this.enabled())); \n    // Set the enabled property. \n    this.enabled(false);\n\n### Method fieldId\n\n    public FieldId fieldId()\n\n#### Return Value\n\n### Method helpField\n\nReturns the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Examples\n\nThe following example shows how to use the helpField method.\n\n    str strHelp; \n    strHelp = this.helpField();\n\n### Method labelText\n\nReturns the label text for the control.\n\n    public str labelText()\n\n#### Return Value\n\nThe label text for the control; an empty string if there is no label text for the control.\n\n### Method mandatory\n\nSets or returns a value that indicates whether the data field is mandatory.\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the mandatory property of the field.\n\n#### Return Value\n\ntrue if the field is mandatory; otherwise, false.\n\n#### Examples\n\nThe following example shows how to retrieve and set the mandatory property for the field.\n\n    // Return the value of the mandatory property. \n    info (strfmt(\"mandatory: %1\", fdo.mandatory())); \n    // Set the value of the mandatory property. \n    fdo.mandatory(false);\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control that is associated with the data source.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the data source that is associated with the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control that is associated with the data source; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control. Controls are skipped if either the control's skip value is true or the data source's skip value is true.\n\n#### Examples\n\nThe following shows how to retrieve and set the skip property of a data source for a control.\n\n    // Return the value of the skip property. \n    info(strfmt(\"skip: %1\", this.skip())); \n    // Set the value of the skip property. \n    this.skip(true);\n\n### Method toolTip\n\n    public str toolTip()\n\n#### Return Value\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned to the visibility setting for the control.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false. The default is true.\n\n#### Remarks\n\nControls that refer to a data source field are visible only when the visible property is set to true on both the control and the underlying data source field. If you set the property on the data source field instead of on the control, you guarantee that the field is handled consistently throughout the form. This makes upgrades easier.\n\n### Method OnModified\n\n    private void OnModified([FormDataObject sender], [FormDataFieldEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnValidated\n\n    private void OnValidated([FormDataObject sender], [FormDataFieldEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method modified\n\nIndicates that the field has been successfully validated and modified in the current record.\n\n    public void modified()\n\n#### Remarks\n\nThis method is called from the modified method on controls if the validation methods returned true. You can overriding this method to allow for recalculation of other values that are based on the modified values. The call to the super() method guarantees that the modifiedField method on the table is called. Modified means that the value of the field on the current record has changed, but the value is not written to the database before the record is saved.\n\n### Method OnValidating\n\n    private void OnValidating([FormDataObject sender], [FormDataFieldEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method restore\n\n    public void restore()\n\n### Method lookup\n\n    public void lookup(FormControl formControl, str filterStr)\n\n#### Parameters\n\nformControl  \n\n<!-- -->\n\nfilterStr  \n\n### Method dataChanged\n\n    public void dataChanged()\n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method context\n\n    public void context()\n\n### Method find\n\n    public void find()\n\n### Method filter\n\n    public void filter([str filterStr], [NoYes clearPrev])\n\n#### Parameters\n\nfilterStr  \n\n<!-- -->\n\nclearPrev  \n\n### Method performFormLookup\n\n    public void performFormLookup(xFormRun form, FormControl formControl)\n\n#### Parameters\n\nform  \n\n<!-- -->\n\nformControl  \n\n## Class FormDataRow\n    class FormDataRow extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                       | Description                                          |\n|------------------------------------------------------------------------------|------------------------------------------------------|\n| public Object associatedObject(\\[Object value\\], \\[boolean notifyDetached\\]) |                                                      |\n| public boolean isDetached()                                                  |                                                      |\n| public int rowIndex()                                                        |                                                      |\n| private void new()                                                           | Initializes a new instance of the FormDataRow class. |\n| public void clearAssociatedObject()                                          |                                                      |\n\n### Method associatedObject\n\n    public Object associatedObject([Object value], [boolean notifyDetached])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nnotifyDetached  \n\n#### Return Value\n\n### Method isDetached\n\n    public boolean isDetached()\n\n#### Return Value\n\n### Method rowIndex\n\n    public int rowIndex()\n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the FormDataRow class.\n\n    private void new()\n\n### Method clearAssociatedObject\n\n    public void clearAssociatedObject()\n\n## Class FormDataSource\n    class FormDataSource extends FormObjectSet\n\nThe FormDataSource class contains properties that define the behavior of data sources in forms.\n\n### Remarks\n\nBy overriding the methods on the class, you can customize the behavior for the method actions, such as insertion or validation, for a specific form. The FormDataSource class is also used to determine how the data source table is related to other data sources (tables) that are displayed in the form. To override some of the methods in the FormDataSource class, right-click the Methods node for a form data source, and then click Override Method. When you create methods on a form, you should use a \\_ds identifier to reference the FormDataSource object for a particular class. For example, CustTrans\\_ds references the FormDataSource object for the CustTrans data source on the form, and CustTrans\\_ds.executeQuery() executes the FormDataSource.executeQuery method on the CustTrans data source. Several FormDataSource methods return a FormObjectSet object. To use the methods that are defined on the FormDataSource method on this object, you must typecast it to a FormDataSource object.\n\n### Examples\n\nThe following example supplies a custom query for a field instead of the automatically generated query. It overrides the performFormLookup method on the field.\n\n    public void performFormLookup(FormRun _p1, FormControl _formControl)  \n    { \n        FormDataSource formDataSource; \n        QueryRun queryRunGenerated; \n        // The FormDataSource object retrieved from the FormRun parameter. \n        formDataSource = _p1.dataSource(1); \n        // Get the generated query. \n        queryRunGenerated = formDataSource.queryRun(); \n        // Modify the query. \n        // ... \n        // Call the standard implementation of performFormLookup \n        // with the parameters supplied in this method. \n        super(_p1, _formControl); \n    }\n\n### Methods\n\n| Method                                                                                                                         | Description                                                                                                                                              |\n|--------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public int active()                                                                                                            | Retrieves data from joined data sources when a user navigates to a new record and then sets the new record as the current record.                        |\n| public boolean allowCheck(\\[boolean value\\])                                                                                   |                                                                                                                                                          |\n| public boolean allowCreate(\\[boolean value\\])                                                                                  |                                                                                                                                                          |\n| public boolean allowDeferredLoad(\\[boolean value\\])                                                                            |                                                                                                                                                          |\n| public boolean allowDelete(\\[boolean value\\])                                                                                  |                                                                                                                                                          |\n| public boolean allowEdit(\\[boolean value\\])                                                                                    | Determines whether the user can change the contents of the control.                                                                                      |\n| public boolean allRowsLoaded()                                                                                                 |                                                                                                                                                          |\n| public boolean anyMarked()                                                                                                     | Checks whether any records in the underlying cache are marked.                                                                                           |\n| public boolean autoNotify(\\[boolean value\\])                                                                                   |                                                                                                                                                          |\n| public boolean autoQuery(\\[boolean value\\])                                                                                    |                                                                                                                                                          |\n| public boolean autoSearch(\\[boolean value\\])                                                                                   |                                                                                                                                                          |\n| public str bindField(FieldId fieldId)                                                                                          |                                                                                                                                                          |\n| public str bindDataMethod(str dataMethodName)                                                                                  |                                                                                                                                                          |\n| public boolean cacheAddMethod(str methodName, \\[boolean updateOnWrite\\])                                                       | Registers the specified display or edit method for caching.                                                                                              |\n| public boolean cacheCalculateMethod(str methodName)                                                                            | Calls the specified cached method and updates the value in the cache for the current record.                                                             |\n| public boolean cacheOnlyMode(\\[boolean value\\])                                                                                |                                                                                                                                                          |\n| public boolean canCreate()                                                                                                     |                                                                                                                                                          |\n| public boolean canDelete()                                                                                                     |                                                                                                                                                          |\n| public boolean canEdit()                                                                                                       |                                                                                                                                                          |\n| public int clientPageSize(\\[int pageSize\\])                                                                                    |                                                                                                                                                          |\n| public str company(\\[str value\\])                                                                                              |                                                                                                                                                          |\n| public FieldId counterField(\\[FieldId value\\])                                                                                 |                                                                                                                                                          |\n| public boolean crossCompanyAutoQuery(\\[boolean value\\])                                                                        |                                                                                                                                                          |\n| public Common cursor(\\[int rowIndex\\])                                                                                         | Has no functionality in the FormObjectSet class.                                                                                                         |\n| public int defaultMark(\\[int value\\])                                                                                          | Sets the default mark value for records in a form, which determines whether records are marked when they have been selected in a grid.                   |\n| public boolean delayActive(\\[boolean value\\])                                                                                  |                                                                                                                                                          |\n| public int extends(\\[AnyType value\\])                                                                                          |                                                                                                                                                          |\n| public boolean findRecord(Common record)                                                                                       | Finds the specified record in the data source and makes it the current record.                                                                           |\n| public boolean findValue(FieldId field, str value)                                                                             | Finds the specified value in the data source and makes the record that has that value the current record that uses the FormDataSource.findRecord method. |\n| public boolean positionToRecord(Common record)                                                                                 |                                                                                                                                                          |\n| public boolean positionToRecordByValue(FieldId field, str value)                                                               |                                                                                                                                                          |\n| public int first()                                                                                                             | Moves focus to the first record in the data source.                                                                                                      |\n| public boolean forceWrite(\\[boolean value\\])                                                                                   |                                                                                                                                                          |\n| public FormObject functionObject(str name)                                                                                     |                                                                                                                                                          |\n| public FormDataRow getDataRow(\\[int rowIndex\\], \\[boolean allowFetchAhead\\])                                                   |                                                                                                                                                          |\n| public Common getFirst(\\[int mark\\], \\[boolean fetchAhead\\])                                                                   | Retrieves the first record in a data set.                                                                                                                |\n| public Common getNext()                                                                                                        | Returns the next record that meets the criteria that are set up in an earlier call to the FormDataSource.getFirst method.                                |\n| public int id()                                                                                                                | Retrieves the ID of the data source.                                                                                                                     |\n| public IndexId index(\\[IndexId value\\])                                                                                        |                                                                                                                                                          |\n| public boolean insertAtEnd(\\[boolean value\\])                                                                                  |                                                                                                                                                          |\n| public boolean insertIfEmpty(\\[boolean value\\])                                                                                |                                                                                                                                                          |\n| public boolean isBaseDataSource()                                                                                              |                                                                                                                                                          |\n| public boolean isInheritanceDataSource()                                                                                       |                                                                                                                                                          |\n| private boolean isOptionalRecordCreated(\\[boolean set\\], Common record, \\[boolean value\\])                                     |                                                                                                                                                          |\n| public boolean isReferenceDataSource()                                                                                         |                                                                                                                                                          |\n| public str joinRelation(\\[str value\\])                                                                                         |                                                                                                                                                          |\n| public DictRelation joinRelationAsDictRelation()                                                                               |                                                                                                                                                          |\n| public int joinSource(\\[AnyType value\\])                                                                                       |                                                                                                                                                          |\n| public FormDataSource joinSourceDataSource()                                                                                   |                                                                                                                                                          |\n| public int last()                                                                                                              | Moves the mouse pointer to the last record in the data source.                                                                                           |\n| public boolean leave()                                                                                                         | Provides notification when the mouse pointer is moved to the next record or to another data source.                                                      |\n| public boolean leaveRecord(\\[boolean forceUpdate\\])                                                                            | Provides notification when the focus moves to another record or item in the form.                                                                        |\n| public container resolvePartLinks(\\[str relationName\\], \\[int partTableId\\])                                                   |                                                                                                                                                          |\n| public int linkType(\\[int value\\])                                                                                             |                                                                                                                                                          |\n| public int mark(\\[int value\\])                                                                                                 |                                                                                                                                                          |\n| public boolean markAllLoadedRecords(\\[int value\\])                                                                             |                                                                                                                                                          |\n| public int markRecord(AnyType record, \\[int mark\\])                                                                            | Marks the specified record by using the specified mark value.                                                                                            |\n| public boolean markRecords(Array markedRecordIds)                                                                              |                                                                                                                                                          |\n| public FormDataSource masterInheritanceDataSource()                                                                            |                                                                                                                                                          |\n| public int maxAccessRight(\\[int value\\])                                                                                       |                                                                                                                                                          |\n| public int maxRecordsToLoad(\\[int value\\])                                                                                     |                                                                                                                                                          |\n| public Int64 maxPagingRowCountValue(\\[Int64 newValue\\])                                                                        |                                                                                                                                                          |\n| public str name(\\[str value\\])                                                                                                 | Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.                  |\n| public int next()                                                                                                              | Moves the focus to the next record in the data source.                                                                                                   |\n| public int nextPage(int pageSize)                                                                                              | Moves a specified number of records forward in the data source.                                                                                          |\n| public int numberOfRowsLoaded(\\[boolean redirectToMasterDS\\])                                                                  |                                                                                                                                                          |\n| public FormDataObject object(FieldId fieldId, \\[int arrayIndex\\])                                                              | Returns an instance of the FormDataObject class that has the specified ID.                                                                               |\n| public boolean onlyFetchActive(\\[boolean value\\])                                                                              |                                                                                                                                                          |\n| public int optionalRecordMode(\\[int value\\])                                                                                   |                                                                                                                                                          |\n| public int pageSize()                                                                                                          |                                                                                                                                                          |\n| public boolean pagingEnabled()                                                                                                 |                                                                                                                                                          |\n| public TitleFields parentTitleFields(Common record)                                                                            |                                                                                                                                                          |\n| public int prev()                                                                                                              | Moves the focus to the previous record in the data source.                                                                                               |\n| public int prevPage(int pageSize)                                                                                              | Moves the focus back by a specified number of records in the data source.                                                                                |\n| public Query query(\\[Query value\\])                                                                                            |                                                                                                                                                          |\n| public QueryBuildDataSource queryBuildDataSource()                                                                             |                                                                                                                                                          |\n| public QueryRun queryRun(\\[QueryRun value\\])                                                                                   |                                                                                                                                                          |\n| public QueryBuildDataSource queryRunQueryBuildDataSource()                                                                     |                                                                                                                                                          |\n| public Array recordsMarked()                                                                                                   |                                                                                                                                                          |\n| public int startPosition(\\[int value\\])                                                                                        |                                                                                                                                                          |\n| public int startRowIndex()                                                                                                     |                                                                                                                                                          |\n| public TableId table(\\[TableId value\\])                                                                                        | Gets or sets the table ID associated with the object.                                                                                                    |\n| public TitleFields titleFields(Common record)                                                                                  |                                                                                                                                                          |\n| public int totalNumberOfRows()                                                                                                 |                                                                                                                                                          |\n| public boolean validateDelete()                                                                                                | Requests that the user confirm the deletion of a record from the data source.                                                                            |\n| public boolean validateWrite()                                                                                                 | Determines whether data is valid and ready to be written.                                                                                                |\n| public int validTimeStateAutoQuery(\\[int value\\])                                                                              |                                                                                                                                                          |\n| public int validTimeStateUpdate(\\[int value\\])                                                                                 |                                                                                                                                                          |\n| public void delete()                                                                                                           | Deletes the current record from the data source.                                                                                                         |\n| public void addFieldToSelectionList(FieldId fieldId)                                                                           |                                                                                                                                                          |\n| public void cacheRemoveRecord(\\[Common record\\])                                                                               | Removes the specified record from the underlying cache of the data source.                                                                               |\n| private void OnValidatedWrite(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                        |                                                                                                                                                          |\n| public void reread()                                                                                                           | Rereads the current record from the database.                                                                                                            |\n| public void rereadJoinHierarchy()                                                                                              |                                                                                                                                                          |\n| private void OnRefreshed(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                             |                                                                                                                                                          |\n| private void OnValidatedDelete(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                       |                                                                                                                                                          |\n| public void markChanged()                                                                                                      |                                                                                                                                                          |\n| public void setPagingParameters(boolean pagingEnabled, int startRowIndex, int pageSize)                                        |                                                                                                                                                          |\n| public void deleted()                                                                                                          |                                                                                                                                                          |\n| public void print(PrintMedium target)                                                                                          | Prints the current record.                                                                                                                               |\n| private void OnReread(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                                |                                                                                                                                                          |\n| public void research(\\[boolean retainPosition\\])                                                                               | Is overridden by the FormDataSource.research method.                                                                                                     |\n| public void createTypes(Map concreteTypesToCreate, \\[boolean append\\], \\[boolean implicitCreate\\], \\[boolean explicitCreate\\]) |                                                                                                                                                          |\n| private void OnCreated(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                               |                                                                                                                                                          |\n| private void OnQueryExecuted(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                         |                                                                                                                                                          |\n| public void written()                                                                                                          |                                                                                                                                                          |\n| public void filter(FieldId field, str value)                                                                                   | Filters records in the data source.                                                                                                                      |\n| public void refresh()                                                                                                          | Updates the form by updating the view of all the records in the data source.                                                                             |\n| public void write()                                                                                                            | Calls the FormDataSource.validateWrite method and manages the database write operation.                                                                  |\n| public void executeQuery()                                                                                                     | Executes the data source query and displays the records that are retrieved.                                                                              |\n| public void setRecord(Common record)                                                                                           |                                                                                                                                                          |\n| public void refreshEx(\\[AnyType pos\\])                                                                                         | Updates the view of the specified records.                                                                                                               |\n| public void setCurrent()                                                                                                       |                                                                                                                                                          |\n| private void OnValidatingDelete(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                      |                                                                                                                                                          |\n| public void writing()                                                                                                          |                                                                                                                                                          |\n| private void OnWritten(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                               |                                                                                                                                                          |\n| public void clearDisplayOption(Common record)                                                                                  | Clears display options that were previously specified for a record and then redraws the record.                                                          |\n| private void OnMarkChanged(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                           |                                                                                                                                                          |\n| private void OnLeftRecord(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                            |                                                                                                                                                          |\n| private void OnDeleted(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                               |                                                                                                                                                          |\n| public void removeFilter()                                                                                                     | Resets the query for the data source.                                                                                                                    |\n| private void OnInitialized(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                           |                                                                                                                                                          |\n| private void OnPostLinkActive(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                        |                                                                                                                                                          |\n| private void OnSelectionChanged(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                      |                                                                                                                                                          |\n| public void deleting()                                                                                                         |                                                                                                                                                          |\n| public void observe()                                                                                                          |                                                                                                                                                          |\n| private void OnWriting(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                               |                                                                                                                                                          |\n| private void OnActivated(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                             |                                                                                                                                                          |\n| public void removeFieldFromSelectionList(FieldId fieldId)                                                                      |                                                                                                                                                          |\n| private void OnCreating(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                              |                                                                                                                                                          |\n| public void rereadReferenceDataSources()                                                                                       |                                                                                                                                                          |\n| private void OnValidatingWrite(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                       |                                                                                                                                                          |\n| public void prompt()                                                                                                           | Activates the standard form, SysQueryForm, that is used to limit a query range.                                                                          |\n| private void OnQueryExecuting(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                        |                                                                                                                                                          |\n| private void OnInitValue(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                             |                                                                                                                                                          |\n| public void clearReferenceData(FieldId fieldId)                                                                                |                                                                                                                                                          |\n| public void cursorNotify(int event)                                                                                            | Notifies the application about a cursor event.                                                                                                           |\n| public void displayOption(Common record, FormRowDisplayOption options)                                                         | Sets the text color and the background color for a record in the data source.                                                                            |\n| public void create(\\[boolean append\\])                                                                                         | Creates a new record in the data source.                                                                                                                 |\n| public void init()                                                                                                             | Creates a data source query that is based on the data source properties.                                                                                 |\n| public void linkActive()                                                                                                       | Calls the FormDataSource.exeuteQuery method on data sources that are linked to the current data source.                                                  |\n| public void selectionChanged()                                                                                                 |                                                                                                                                                          |\n| private void OnDeleting(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                              |                                                                                                                                                          |\n| public void addReferenceFieldToSelectionList(FieldId fieldId, str referenceFieldGroupName)                                     |                                                                                                                                                          |\n| public void initValue()                                                                                                        | Initializes field values in a new record.                                                                                                                |\n| public void deleteMarked()                                                                                                     | Deletes all marked (selected) records from a data source.                                                                                                |\n| private void OnLeavingRecord(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])                                         |                                                                                                                                                          |\n\n### Method active\n\nRetrieves data from joined data sources when a user navigates to a new record and then sets the new record as the current record.\n\n    public int active()\n\n#### Return Value\n\nAlways returns 1.\n\n#### Remarks\n\nThe active method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking active.\n\n### Method allowCheck\n\n    public boolean allowCheck([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowCreate\n\n    public boolean allowCreate([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowDeferredLoad\n\n    public boolean allowDeferredLoad([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowDelete\n\n    public boolean allowDelete([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allRowsLoaded\n\n    public boolean allRowsLoaded()\n\n#### Return Value\n\n### Method anyMarked\n\nChecks whether any records in the underlying cache are marked.\n\n    public boolean anyMarked()\n\n#### Return Value\n\ntrue if any records are marked; otherwise, false.\n\n#### Remarks\n\nRecords in a data source can be marked (selected) for actions such as deletion or copying by using the FormDataSource.markedRecord method.\n\n### Method autoNotify\n\n    public boolean autoNotify([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoQuery\n\n    public boolean autoQuery([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoSearch\n\n    public boolean autoSearch([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bindField\n\n    public str bindField(FieldId fieldId)\n\n#### Parameters\n\nfieldId  \n\n#### Return Value\n\n### Method bindDataMethod\n\n    public str bindDataMethod(str dataMethodName)\n\n#### Parameters\n\ndataMethodName  \n\n#### Return Value\n\n### Method cacheAddMethod\n\nRegisters the specified display or edit method for caching.\n\n    public boolean cacheAddMethod(str methodName, [boolean updateOnWrite])\n\n#### Parameters\n\nmethodName  \nA Boolean value that determines whether the cached value is updated automatically when the record is written; optional.\n\n<!-- -->\n\nupdateOnWrite  \nA Boolean value that determines whether the cached value is updated automatically when the record is written; optional.\n\n#### Return Value\n\ntrue if the method was registered successfully; otherwise, false.\n\n#### Remarks\n\nCached methods perform calculations on fetched data, and then the calculated values are passed to the client together with the data. The calculated values are updated on reread. By default, the values are also update on write and create. This method should be called after initialization of the data source, but before any data is fetched. Therefore, the call to this method should be put after the call to the super method in the init method. The updateOnWrite parameter also determines whether the display or edit method value should be calculated and cached when a new record is created. To manually update the cached value for the display or edit method, call the FormDataSource.cacheCalculateMethod method. Only table methods that have the display or edit keyword can be cached. Methods that are written on the form or the form data source cannot be cached. Do not register display or edit methods that are not used on the form. Those methods are calculated for each record, even though the values are never shown.\n\n#### Examples\n\nThe following example registers two methods for caching on the VendTransOpen table.\n\n    public void init() \n    { \n        super(); \n        this.cacheAddMethod(tablemethodstr(VendTransOpen, \n            nextCashDiscDate)); \n        this.cacheAddMethod(tablemethodstr(VendTransOpen, \n            nextCashDiscAmount)); \n    }\n\n### Method cacheCalculateMethod\n\nCalls the specified cached method and updates the value in the cache for the current record.\n\n    public boolean cacheCalculateMethod(str methodName)\n\n#### Parameters\n\nmethodName  \nThe name of the table method to call.\n\n#### Return Value\n\ntrue if the value has been updated; otherwise, false.\n\n#### Remarks\n\nThe cached value is updated only if the method name that was supplied was previously registered as a cached method by using the FormDataSource.cacheAddMethod method. The cacheCalculate method is particularly useful if you want to update cached values only when certain conditions are met. In this case, set the updateOnWrite parameter in the call to the FormDataSource.cacheAddMethod method to false, and then manually update the cache, such as by using the write method on the data source.\n\n#### Examples\n\nThe following example recalculates cached values by using the nextCashDiscDate method and the nextCashDiscAmount method, both of the VendTransOpen table.\n\n    public void write() \n    { \n        super(); \n        vendTransOpen_ds.cacheCalculateMethod(tablemethodstr( \n            VendTransOpen, nextCashDiscDate)); \n        vendTransOpen_ds.cacheCalculateMethod(tablemethodstr( \n            VendTransOpen, nextCashDiscAmount)); \n    }\n\n### Method cacheOnlyMode\n\n    public boolean cacheOnlyMode([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method canCreate\n\n    public boolean canCreate()\n\n#### Return Value\n\n### Method canDelete\n\n    public boolean canDelete()\n\n#### Return Value\n\n### Method canEdit\n\n    public boolean canEdit()\n\n#### Return Value\n\n### Method clientPageSize\n\n    public int clientPageSize([int pageSize])\n\n#### Parameters\n\npageSize  \n\n#### Return Value\n\n### Method company\n\n    public str company([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method counterField\n\n    public FieldId counterField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method crossCompanyAutoQuery\n\n    public boolean crossCompanyAutoQuery([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method cursor\n\nHas no functionality in the FormObjectSet class.\n\n    public Common cursor([int rowIndex])\n\n#### Parameters\n\nrowIndex  \n\n#### Return Value\n\n#### Remarks\n\nThis method is overridden by the FormDataSource.cursor method, which returns the currently active record in the table that is referenced by the data source.\n\n### Method defaultMark\n\nSets the default mark value for records in a form, which determines whether records are marked when they have been selected in a grid.\n\n    public int defaultMark([int value])\n\n#### Parameters\n\nvalue  \nThe default mark value for records in the form. The standard default mark value for records is 1, but this value can be overridden by setting the value parameter. A value other than 0 (zero) causes the record to be displayed as marked in grids in the form when they have been selected.\n\n#### Return Value\n\nThe default mark value for records in the form.\n\n#### Remarks\n\nThis method is executed when a user clicks the top-left corner in a grid control to select all the records in the grid. The defaultMark method can be overridden on a form data source. Right-click the Methods node under the data source, and then select Override Method &gt; defaultMark.\n\n### Method delayActive\n\n    public boolean delayActive([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extends\n\n    public int extends([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method findRecord\n\nFinds the specified record in the data source and makes it the current record.\n\n    public boolean findRecord(Common record)\n\n#### Parameters\n\nrecord  \nThe record to find.\n\n#### Return Value\n\ntrue if the record was found; otherwise, false.\n\n#### Remarks\n\nThis method is activated when the FormDataSource.findValue method is called. The findRecord method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking findRecord.\n\n### Method findValue\n\nFinds the specified value in the data source and makes the record that has that value the current record that uses the FormDataSource.findRecord method.\n\n    public boolean findValue(FieldId field, str value)\n\n#### Parameters\n\nfield  \nThe value to find.\n\n<!-- -->\n\nvalue  \nThe value to find.\n\n#### Return Value\n\ntrue if the value is found; otherwise, false.\n\n#### Remarks\n\nThis method is called when a user clicks FindValue in the shortcut menu on a form control. The findValue method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking findValue.\n\n#### Examples\n\nThe following example stores the ID of the current record before it tries to modify data. If the update fails, the data source is positioned on the original record.\n\n    void clicked() \n    { \n        DocuTypeId  docuTypeId; \n        RecId       activeRecId; \n        ; \n         // Store current RecID \n        activeRecId = docuRef.RecId;  \n        // Open the Document Type dialog. \n        docuTypeId = smmDocuments::getDocuTypeId(element.args().record()); \n        try \n        { \n            ttsbegin; \n            if (docuTypeId) \n            { \n                // Create a new document record \n                docuRef_ds.create(); \n                docuRef.RefTableId      = tableReference; \n                docuRef.RefRecId        = recReference; \n                docuRef_ds.write(); \n                super(); \n            } \n            ttscommit; \n        } \n        catch \n        { \n            // Focus moved back to original record if there is an error \n            docuRef_ds.executeQuery(); \n            docuRef_ds.findValue(fieldnum(DocuRef,RecId), \n                int642str(activeRecId)); \n        } \n    }\n\n### Method positionToRecord\n\n    public boolean positionToRecord(Common record)\n\n#### Parameters\n\nrecord  \n\n#### Return Value\n\n### Method positionToRecordByValue\n\n    public boolean positionToRecordByValue(FieldId field, str value)\n\n#### Parameters\n\nfield  \n\n<!-- -->\n\nvalue  \n\n#### Return Value\n\n### Method first\n\nMoves focus to the first record in the data source.\n\n    public int first()\n\n#### Return Value\n\nA non-zero value if focus is successfully moved to the first record.\n\n#### Remarks\n\nThis method is called when a user selects the first record in a form by pressing CTRL+HOME. The first method can be overridden on a form data source. Right-click the Methods node under the data source, point to Override Method, and then click first.\n\n#### Examples\n\nThe following example overrides the first method for the InventTransPostingFinancial data source on the InventTrans form and returns the last record in another data source that is used on the form.\n\n    int first() \n    { \n        return inventTrans_ds.first(); \n    }\n\n### Method forceWrite\n\n    public boolean forceWrite([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method functionObject\n\n    public FormObject functionObject(str name)\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method getDataRow\n\n    public FormDataRow getDataRow([int rowIndex], [boolean allowFetchAhead])\n\n#### Parameters\n\nrowIndex  \n\n<!-- -->\n\nallowFetchAhead  \n\n#### Return Value\n\n### Method getFirst\n\nRetrieves the first record in a data set.\n\n    public Common getFirst([int mark], [boolean fetchAhead])\n\n#### Parameters\n\nmark  \nA Boolean value; optional. The default value is true.\n\n<!-- -->\n\nfetchAhead  \nA Boolean value; optional. The default value is true.\n\n#### Return Value\n\nThe first record in the data set.\n\n#### Remarks\n\nIf the mark parameter is not 0 (zero), the first record that is marked with the specified value is returned, and subsequent calls to the FormDataSource.getNext method return marked records. If the fetchAhead parameter is set to false, only cached records are returned. If it is set to true, additional records are found and added to the cache, but the operation can become very time-consuming when it is performed on a large record set. When records in a grid are multiselected, the records are marked with the value 1. The following examples illustrate how to retrieve a marked or unmarked record: // Get first recordformDataSource.getFirst();// Get first record marked with 2formDataSource.getFirst(2); // Get first cached record marked with 1formDataSource.getFirst(1, false);\n\n#### Examples\n\nThe following example determines whether two records are selected in a form.\n\n    boolean twoMarked() \n    { \n        SysVersionControlTmpItem tmpitem  = this.getFirst(1); \n        if (!tmpitem) \n        { \n            return false; \n        } \n        tmpitem = this.getNext(); \n        if (!tmpitem) \n        { \n            return false; \n        } \n        tmpitem = this.getNext(); \n        if (!tmpitem) \n        { \n            return true; \n        } \n        return false; \n    }\n\n### Method getNext\n\nReturns the next record that meets the criteria that are set up in an earlier call to the FormDataSource.getFirst method.\n\n    public Common getNext()\n\n#### Return Value\n\nThe next record in the dataset.\n\n#### Remarks\n\nDepending on the initialization that is performed in the call to the FormDataSource.getFirst method, the getNext method might return only records that have a particular mark value, and it might return records from the cache.\n\n#### Examples\n\nThe following example determines whether two records are selected in a form.\n\n    boolean twoMarked() \n    { \n        SysVersionControlTmpItem tmpitem  = this.getFirst(1); \n        if (!tmpitem) \n        { \n            return false; \n        } \n        tmpitem = this.getNext(); \n        if (!tmpitem) \n        { \n            return false; \n        } \n        tmpitem = this.getNext(); \n        if (!tmpitem) \n        { \n            return true; \n        } \n        return false; \n    }\n\n### Method id\n\nRetrieves the ID of the data source.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the data source.\n\n#### Examples\n\nThe following example converts form data sources to their data source IDs.\n\n    static client DataSourceNumber fds2fdsNo(FormDataSource _fds) \n    { \n        Form  form = _fds.formRun().form(); \n        int   i; \n        for (i=1;i<=form.dataSourceCount();i++) \n        { \n            if (_fds.formRun().dataSource(i).id() == _fds.id()) \n            { \n                return i; \n            } \n        } \n        return 0; \n    }\n\n### Method index\n\n    public IndexId index([IndexId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method insertAtEnd\n\n    public boolean insertAtEnd([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method insertIfEmpty\n\n    public boolean insertIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isBaseDataSource\n\n    public boolean isBaseDataSource()\n\n#### Return Value\n\n### Method isInheritanceDataSource\n\n    public boolean isInheritanceDataSource()\n\n#### Return Value\n\n### Method isOptionalRecordCreated\n\n    private boolean isOptionalRecordCreated([boolean set], Common record, [boolean value])\n\n#### Parameters\n\nset  \n\n<!-- -->\n\nrecord  \n\n<!-- -->\n\nvalue  \n\n#### Return Value\n\n### Method isReferenceDataSource\n\n    public boolean isReferenceDataSource()\n\n#### Return Value\n\n### Method joinRelation\n\n    public str joinRelation([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method joinRelationAsDictRelation\n\n    public DictRelation joinRelationAsDictRelation()\n\n#### Return Value\n\n### Method joinSource\n\n    public int joinSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method joinSourceDataSource\n\n    public FormDataSource joinSourceDataSource()\n\n#### Return Value\n\n### Method last\n\nMoves the mouse pointer to the last record in the data source.\n\n    public int last()\n\n#### Return Value\n\nA non-zero value if the mouse pointer is successfully moved to the last record.\n\n#### Remarks\n\nThe last method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking last.\n\n#### Examples\n\nThe following example overrides the last method for the InventDim data source on the WMSOrderTransport form and returns the last record in the other data source that is used on the form.\n\n    int last() \n    { \n        return WMSOrder_ds.last(); \n    }\n\n### Method leave\n\nProvides notification when the mouse pointer is moved to the next record or to another data source.\n\n    public boolean leave()\n\n#### Return Value\n\nAlways returns true, unless the method is overridden.\n\n#### Remarks\n\nThis method is often overridden to implement record-level input validation. The leave method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking leave.\n\n#### Examples\n\nThe following example overrides the leave method to perform data validation before the current record is left. The method returns false if the data is invalid.\n\n    public boolean leave() \n    { \n        boolean ret; \n        ret = super(); \n        if(! salesLine.PBAItemLine::checkMandatory()) \n        { \n            return false; \n        } \n        return ret; \n    }\n\n### Method leaveRecord\n\nProvides notification when the focus moves to another record or item in the form.\n\n    public boolean leaveRecord([boolean forceUpdate])\n\n#### Parameters\n\nforceUpdate  \n\n#### Return Value\n\ntrue if the operation succeeds; otherwise, false.\n\n#### Remarks\n\nThe method might fail and return false if changes could not be validated or written. It is recommended that you not override this method. Instead, override the FormDataSource.leave method. If you do override the leaveRecord method, you must call the super method to make sure that the kernel implementation of the method is executed.\n\n### Method resolvePartLinks\n\n    public container resolvePartLinks([str relationName], [int partTableId])\n\n#### Parameters\n\nrelationName  \n\n<!-- -->\n\npartTableId  \n\n#### Return Value\n\n### Method linkType\n\n    public int linkType([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mark\n\n    public int mark([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAllLoadedRecords\n\n    public boolean markAllLoadedRecords([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markRecord\n\nMarks the specified record by using the specified mark value.\n\n    public int markRecord(AnyType record, [int mark])\n\n#### Parameters\n\nrecord  \nThe value that is associated with a marked record; optional. A value other than 0 (zero) causes the record to be displayed as marked in grids in the form.\n\n<!-- -->\n\nmark  \nThe value that is associated with a marked record; optional. A value other than 0 (zero) causes the record to be displayed as marked in grids in the form.\n\n#### Return Value\n\nA non-zero integer if the record has been marked.\n\n#### Remarks\n\nUse this method instead of the FormDataSource.mark method if the record has been found by using a select statement or a method call outside the form.\n\n### Method markRecords\n\n    public boolean markRecords(Array markedRecordIds)\n\n#### Parameters\n\nmarkedRecordIds  \n\n#### Return Value\n\n### Method masterInheritanceDataSource\n\n    public FormDataSource masterInheritanceDataSource()\n\n#### Return Value\n\n### Method maxAccessRight\n\n    public int maxAccessRight([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method maxRecordsToLoad\n\n    public int maxRecordsToLoad([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method maxPagingRowCountValue\n\n    public Int64 maxPagingRowCountValue([Int64 newValue])\n\n#### Parameters\n\nnewValue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name for the data source; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n#### Examples\n\nThe following example creates a QueryBuildDataSource object for a form data source. The FormDataSource.name method is used to specify the name of the QueryBuildDataSource object.\n\n    static client QueryBuildDataSource fds2Qbds(FormDataSource _fds) \n    { \n        Form     form = _fds.formRun().form(); \n        if (_fds.query()  \n            && _fds.name()  \n            && _fds.query().dataSourceName(_fds.name())) \n        { \n            return _fds.query().dataSourceName(_fds.name()); \n        } \n        // Use the first data source if not found by name. \n        if (_fds.query() && _fds.query().dataSourceNo(1)) \n        { \n            return _fds.query().dataSourceNo(1); \n        } \n        return null; \n    }\n\n### Method next\n\nMoves the focus to the next record in the data source.\n\n    public int next()\n\n#### Return Value\n\nA non-zero integer if the operation succeeds.\n\n#### Remarks\n\nThe next method can be overridden on a form data source. Right-click the Methods node under the data source, point to Override Method, and then click next.\n\n#### Examples\n\nThe following example overrides the next method on a data source to return the next record from a different data source.\n\n    int next() \n    { \n        return inventTrans_ds.next(); \n    }\n\n### Method nextPage\n\nMoves a specified number of records forward in the data source.\n\n    public int nextPage(int pageSize)\n\n#### Parameters\n\npageSize  \nThe number of records to skip.\n\n#### Return Value\n\nA non-zero integer if the operation succeeds.\n\n### Method numberOfRowsLoaded\n\n    public int numberOfRowsLoaded([boolean redirectToMasterDS])\n\n#### Parameters\n\nredirectToMasterDS  \n\n#### Return Value\n\n### Method object\n\nReturns an instance of the FormDataObject class that has the specified ID.\n\n    public FormDataObject object(FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\nAn instance of the FormDataObject class that has the ID that is specified in the objectId parameter.\n\n#### Examples\n\nThe following example creates a FormDataObject object for the RepositoryFolder field in the SysVersionControlParameters table, and then sets the AllowEdit property for the field to true.\n\n    public void initFormDatasource(FormDataSource _formDataSource) \n    { \n        FormDataObject dataObject = _formDataSource.object( \n            fieldnum(SysVersionControlParameters, RepositoryFolder)); \n        if (dataObject) \n        { \n            dataObject.allowEdit(true); \n        } \n    }\n\n### Method onlyFetchActive\n\n    public boolean onlyFetchActive([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method optionalRecordMode\n\n    public int optionalRecordMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method pageSize\n\n    public int pageSize()\n\n#### Return Value\n\n### Method pagingEnabled\n\n    public boolean pagingEnabled()\n\n#### Return Value\n\n### Method parentTitleFields\n\n    public TitleFields parentTitleFields(Common record)\n\n#### Parameters\n\nrecord  \n\n#### Return Value\n\n### Method prev\n\nMoves the focus to the previous record in the data source.\n\n    public int prev()\n\n#### Return Value\n\nA non-zero integer if the operation succeeds.\n\n#### Remarks\n\nThis method can be used to iterate through the records of a data source in reverse order. The prev method can be overridden on a form data source. Right-click the Methods node under the data source, point to Override Method, and then click prev.\n\n#### Examples\n\nThe following example overrides the prev method on a data source to return the previous record from a different data source.\n\n    int prev() \n    { \n        return inventTrans_ds.prev(); \n    }\n\n### Method prevPage\n\nMoves the focus back by a specified number of records in the data source.\n\n    public int prevPage(int pageSize)\n\n#### Parameters\n\npageSize  \nThe number of records to move back by.\n\n#### Return Value\n\nA non-zero integer if the operation succeeds.\n\n### Method query\n\n    public Query query([Query value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method queryBuildDataSource\n\n    public QueryBuildDataSource queryBuildDataSource()\n\n#### Return Value\n\n### Method queryRun\n\n    public QueryRun queryRun([QueryRun value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method queryRunQueryBuildDataSource\n\n    public QueryBuildDataSource queryRunQueryBuildDataSource()\n\n#### Return Value\n\n### Method recordsMarked\n\n    public Array recordsMarked()\n\n#### Return Value\n\n### Method startPosition\n\n    public int startPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method startRowIndex\n\n    public int startRowIndex()\n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public TableId table([TableId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method titleFields\n\n    public TitleFields titleFields(Common record)\n\n#### Parameters\n\nrecord  \n\n#### Return Value\n\n### Method totalNumberOfRows\n\n    public int totalNumberOfRows()\n\n#### Return Value\n\n### Method validateDelete\n\nRequests that the user confirm the deletion of a record from the data source.\n\n    public boolean validateDelete()\n\n#### Return Value\n\ntrue if the deletion is performed successfully; otherwise, false.\n\n#### Remarks\n\nThis method calls the validateDelete method on the data source table. The FormDataSource.validateDelete method is called by the FormDataSource.delete method. Use this method to add custom data validation checks whenever they are required. The validateDelete method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking validateDelete.\n\n#### Examples\n\nThe following example does not call the super() method and returns true. This supresses the display of the delete confirmation message box.\n\n    public boolean validateDelete() \n    { \n        // Do not display warning dialog. \n        return true; \n    }\n\n### Method validateWrite\n\nDetermines whether data is valid and ready to be written.\n\n    public boolean validateWrite()\n\n#### Return Value\n\nReturns true if data is valid; otherwise, false.\n\n#### Remarks\n\nThis method is called from the FormDataSource.write method. If false is returned, the write operation is aborted and an error message is displayed. Override this method to add custom validation routines to your data source. The validateWrite method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking validateWrite. The call to the super() method in this method calls the validateWrite method on the table that is used as a data source. Therefore, the return value of the super() method should be examined. If you override the method, it should return true only if the super() method also returns true.\n\n### Method validTimeStateAutoQuery\n\n    public int validTimeStateAutoQuery([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method validTimeStateUpdate\n\n    public int validTimeStateUpdate([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method delete\n\nDeletes the current record from the data source.\n\n    public void delete()\n\n#### Remarks\n\nThis method is called when a user deletes a record in a form. The delete method calls the FormDataSource.validateDelete method. If the validateDelete method returns true, the record is deleted. After the deletion, the cursor is positioned on the next record (if there is one). The delete method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking delete.\n\n#### Examples\n\nThe following example overrides the delete method on the Errors data source for the SysCompilerOutput form. The method updates the number of errors that are displayed in the Compiler output form after an error has been removed.\n\n    public void delete() \n    { \n        super(); \n        sysCompilerOutput.updateCounters(); \n    }\n\n### Method addFieldToSelectionList\n\n    public void addFieldToSelectionList(FieldId fieldId)\n\n#### Parameters\n\nfieldId  \n\n### Method cacheRemoveRecord\n\nRemoves the specified record from the underlying cache of the data source.\n\n    public void cacheRemoveRecord([Common record])\n\n#### Parameters\n\nrecord  \nThe record to remove from the cache; optional.\n\n#### Remarks\n\nYou must enclose data modification statements in a ttsbegin/ttscommit block.\n\n#### Examples\n\nThe following example deletes the inventTable record from the cache of the data source.\n\n    void updateCache(container _conItemId) \n    { \n        SetIterator itSetItemId; \n        InventTable inventTable; \n        Set setItemId = new Set(Types::String); \n        setItemId = Set::create(_conItemId); \n        itSetItemId = new SetIterator(setItemId); \n        ttsBegin; \n        while (itSetItemId.more()) \n        { \n            inventTable = InventTable::find(itSetItemId.value()); \n            if(inventTableWithOutReqItem_ds. \n                findRecord(inventTable)) \n                inventTableWithOutReqItem_ds. \n                    cacheRemoveRecord(inventTable); \n            itSetItemId.next(); \n        } \n        ttsCommit; \n    }\n\n### Method OnValidatedWrite\n\n    private void OnValidatedWrite([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method reread\n\nRereads the current record from the database.\n\n    public void reread()\n\n#### Remarks\n\nCall this method to update the record with the latest changes from the database. The reread method can be overridden on a form data source. Right-click the Methods node under the data source, point to Override Method, and then click reread.\n\n#### Examples\n\nThe following example uses the reread method as part of a method that is used to update a table.\n\n    void doRefresh() \n    { \n        salesTable_ds.reread(); \n        salesTable_ds.refresh(); \n        salesLine_ds.reread(); \n        salesLine_ds.refresh(); \n        interCompanyPurchSalesReference_ds.executeQuery(); \n    }\n\n### Method rereadJoinHierarchy\n\n    public void rereadJoinHierarchy()\n\n### Method OnRefreshed\n\n    private void OnRefreshed([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnValidatedDelete\n\n    private void OnValidatedDelete([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method markChanged\n\n    public void markChanged()\n\n### Method setPagingParameters\n\n    public void setPagingParameters(boolean pagingEnabled, int startRowIndex, int pageSize)\n\n#### Parameters\n\npagingEnabled  \n\n<!-- -->\n\nstartRowIndex  \n\n<!-- -->\n\npageSize  \n\n### Method deleted\n\n    public void deleted()\n\n### Method print\n\nPrints the current record.\n\n    public void print(PrintMedium target)\n\n#### Parameters\n\ntarget  \nThe print medium to use to print the record.\n\n#### Remarks\n\nThe current record is printed by using the system's auto report facilities (the SysTableReport report, which is located in the Reports node). The print method can be overridden on a form data source. Right-click the Methods node under the data source, point to Override Method, and then click print.\n\n### Method OnReread\n\n    private void OnReread([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method research\n\nIs overridden by the FormDataSource.research method.\n\n    public void research([boolean retainPosition])\n\n#### Parameters\n\nretainPosition  \nA Boolean value that indicates whether to maintain the position in the grid after the method is completed.\n\n#### Remarks\n\nThis method has no functionality in the FormObjectSet class. It is overridden by the FormDataSource.research method, which updates the database search that is defined by the filters and sorts that are currently applied to the form.\n\n### Method createTypes\n\n    public void createTypes(Map concreteTypesToCreate, [boolean append], [boolean implicitCreate], [boolean explicitCreate])\n\n#### Parameters\n\nconcreteTypesToCreate  \n\n<!-- -->\n\nappend  \n\n<!-- -->\n\nimplicitCreate  \n\n<!-- -->\n\nexplicitCreate  \n\n### Method OnCreated\n\n    private void OnCreated([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnQueryExecuted\n\n    private void OnQueryExecuted([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method written\n\n    public void written()\n\n### Method filter\n\nFilters records in the data source.\n\n    public void filter(FieldId field, str value)\n\n#### Parameters\n\nfield  \nThe filtering condition.\n\n<!-- -->\n\nvalue  \nThe filtering condition.\n\n#### Remarks\n\nThe filter method can be overridden on a form data source to extend the standard filtering functionality. Right-click the Methods node under the data source, point to Override Method, and then click filter.\n\n### Method refresh\n\nUpdates the form by updating the view of all the records in the data source.\n\n    public void refresh()\n\n#### Remarks\n\nThe contents of the records are redrawn without loading from disk. You can, for example, use refresh if you have to update while a lengthy operation is running. Use the FormDataSource.refreshEx method if you do not want to refresh all the records. The refresh method can be overridden on a form data source. Right-click the Methods node under the data source, point to Override Method, and then click refresh.\n\n#### Examples\n\nThe following example overrides the write method on a data source so that it updates records in a different data source after a write operation.\n\n    public void write() \n    { \n        super(); \n        EPParameters_ds.research(); \n        EPParameters_ds.refresh(); \n    }\n\n### Method write\n\nCalls the FormDataSource.validateWrite method and manages the database write operation.\n\n    public void write()\n\n#### Remarks\n\nThis method is invoked when a user inserts a new record or updates an existing one. The refreshEx method can be overridden on a form data source. Right-click the Methods node under the data source, point to Override Method, and then click refreshEx.\n\n### Method executeQuery\n\nExecutes the data source query and displays the records that are retrieved.\n\n    public void executeQuery()\n\n#### Remarks\n\nThis method is executed when a form is opened for data display. The executeQuery method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking executeQuery.\n\n#### Examples\n\nThe following example executes a data source query in response to a tab page activation event.\n\n    public void pageActivated() \n    { \n        monday_ds.executeQuery(); \n        super(); \n    }\n\n### Method setRecord\n\n    public void setRecord(Common record)\n\n#### Parameters\n\nrecord  \n\n### Method refreshEx\n\nUpdates the view of the specified records.\n\n    public void refreshEx([AnyType pos])\n\n#### Parameters\n\npos  \nThe number of the record to refresh; optional. If a value of -1 is specified, all records are updated. If a value of -2 is specified, all marked records and all records that have display options specified are updated. The default value is -2.\n\n#### Remarks\n\nThe refreshEx method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking refreshEx.\n\n### Method setCurrent\n\n    public void setCurrent()\n\n### Method OnValidatingDelete\n\n    private void OnValidatingDelete([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method writing\n\n    public void writing()\n\n### Method OnWritten\n\n    private void OnWritten([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method clearDisplayOption\n\nClears display options that were previously specified for a record and then redraws the record.\n\n    public void clearDisplayOption(Common record)\n\n#### Parameters\n\nrecord  \nThe record to redraw.\n\n#### Remarks\n\nDisplay options are set by using the FormDataSource.displayOption method.\n\n#### Examples\n\nThe following example redraws the first record in a data source.\n\n    public void run() \n    { \n        super(); \n        sysRecordTmpTemplate_ds.clearDisplayOption( \n            sysRecordTmpTemplate_ds.getFirst()); \n    }\n\n### Method OnMarkChanged\n\n    private void OnMarkChanged([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnLeftRecord\n\n    private void OnLeftRecord([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnDeleted\n\n    private void OnDeleted([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method removeFilter\n\nResets the query for the data source.\n\n    public void removeFilter()\n\n#### Remarks\n\nThis method is called when a user clicks the Cancel Filter command in the shortcut menu on a form control. The removeFilter method can be overridden on a form data source. Right-click the Methods node under the data source, point to Override Method, and then click removeFilter. For example, removeFilter removes all modifications to the original query that is generated by the FormDataSource.init method.\n\n### Method OnInitialized\n\n    private void OnInitialized([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnPostLinkActive\n\n    private void OnPostLinkActive([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnSelectionChanged\n\n    private void OnSelectionChanged([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method deleting\n\n    public void deleting()\n\n### Method observe\n\n    public void observe()\n\n### Method OnWriting\n\n    private void OnWriting([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnActivated\n\n    private void OnActivated([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method removeFieldFromSelectionList\n\n    public void removeFieldFromSelectionList(FieldId fieldId)\n\n#### Parameters\n\nfieldId  \n\n### Method OnCreating\n\n    private void OnCreating([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method rereadReferenceDataSources\n\n    public void rereadReferenceDataSources()\n\n### Method OnValidatingWrite\n\n    private void OnValidatingWrite([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method prompt\n\nActivates the standard form, SysQueryForm, that is used to limit a query range.\n\n    public void prompt()\n\n#### Remarks\n\nThis method is called when a user clicks the Filter records command on the Command menu or presses CTRL+F3. The prompt method can be overridden on a form data source. Right-click the Methods node under the data source, point to Override Method, and then click prompt.\n\n### Method OnQueryExecuting\n\n    private void OnQueryExecuting([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnInitValue\n\n    private void OnInitValue([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method clearReferenceData\n\n    public void clearReferenceData(FieldId fieldId)\n\n#### Parameters\n\nfieldId  \n\n### Method cursorNotify\n\nNotifies the application about a cursor event.\n\n    public void cursorNotify(int event)\n\n#### Parameters\n\nevent  \nThe cursor event identifier. The following table shows the available cursor events.\n\n#### Remarks\n\nThis method can be overridden to implement custom handling of cursor events. However, the super() method has to be called first to enable the kernel to handle the event as appropriate.\n\n### Method displayOption\n\nSets the text color and the background color for a record in the data source.\n\n    public void displayOption(Common record, FormRowDisplayOption options)\n\n#### Parameters\n\nrecord  \nThe FormRowDisplayOption object that encapsulates the desired record display properties.\n\n<!-- -->\n\noptions  \nThe FormRowDisplayOption object that encapsulates the desired record display properties.\n\n#### Remarks\n\nThis method is executed one time for each record before the record is displayed in a form. The displayOption method can be overridden on a form data source. Right-click the Methods node under the data source, point to Override Method, and then click displayOption.\n\n#### Examples\n\nThe following example overrides the displayOption method to set display options from a stored profile and to override the background color that is based on the settings for the particular record.\n\n    public void displayOption(Common _record, FormRowDisplayOption \n        _options) \n    { \n        JmgProfileTable profile; \n        profile = _record; \n        _options.backColor(profile.Color); \n        super(_record, _options); \n    }\n\n### Method create\n\nCreates a new record in the data source.\n\n    public void create([boolean append])\n\n#### Parameters\n\nappend  \nA Boolean value that indicates whether to insert the record after or before the current cursor position. If it is set to true, the new record is inserted after the current record.\n\n#### Remarks\n\nThis method is called when a user creates a new record in a data source, such as by using the default shortcut key for insertion (CTRL+N). The create method can be overridden on a form data source. Right-click the Methods node under the data source, and then select Override Method &gt; create.\n\n### Method init\n\nCreates a data source query that is based on the data source properties.\n\n    public void init()\n\n#### Remarks\n\nThis method is called when the form is opened. The query that is generated by the method is used to the load data so that it can be displayed in the form. The init method can be overridden on a form data source. Right-click the Methods node under the data source, point to Override Method, and then click init.\n\n#### Examples\n\nThe following example overrides the init method on a data source to specify the sorting order for the data source.\n\n    public void init() \n    { \n        super(); \n        this.query().dataSourceTable( \n            tablenum(SysVersionControlTmpItem)).addSortField( \n                fieldnum(SysVersionControlTmpItem, VCSDate), \n            SortOrder::Descending); \n        this.query().dataSourceTable( \n            tablenum(SysVersionControlTmpItem)).addSortField( \n                fieldnum(SysVersionControlTmpItem, VCSTime), \n            SortOrder::Descending); \n        this.query().dataSourceTable( \n            tablenum(SysVersionControlTmpItem)).addSortField( \n                fieldnum(SysVersionControlTmpItem, ChangeNumber), \n            SortOrder::Ascending); \n    }\n\n### Method linkActive\n\nCalls the FormDataSource.exeuteQuery method on data sources that are linked to the current data source.\n\n    public void linkActive()\n\n#### Remarks\n\nThis method is executed when a user moves to another record in the master data source. This causes an update to all linked data sources. The super() call in the FormDataSource.active method calls the FormDataSource.linkActive method on all linked child data sources if the LinkType property on the parent data source is set to Passive, Delayed, or Active. The linkActive method can be overridden on a form data source. Right-click the Methods node under the data source, point to Override Method, and then click linkActive.\n\n### Method selectionChanged\n\n    public void selectionChanged()\n\n### Method OnDeleting\n\n    private void OnDeleting([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method addReferenceFieldToSelectionList\n\n    public void addReferenceFieldToSelectionList(FieldId fieldId, str referenceFieldGroupName)\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\nreferenceFieldGroupName  \n\n### Method initValue\n\nInitializes field values in a new record.\n\n    public void initValue()\n\n#### Remarks\n\nThis method is called when a new record is created. It populates the record with initial values for the fields. The initValue method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking initValue.\n\n#### Examples\n\nThe following example overrides FormDataSource.initValue so that the TaxLimitBase field is initialized with a particular value.\n\n    public void initValue() \n    { \n        super(); \n        taxTable.TaxLimitBase = TaxLimitBase::InvoiceWithoutVAT; \n    }\n\n### Method deleteMarked\n\nDeletes all marked (selected) records from a data source.\n\n    public void deleteMarked()\n\n#### Remarks\n\nIf no records have been selected, the FormDataSource.delete method is executed. The operation can be interrupted by pressing CTRL+BREAK. The deleteMarked method can be overridden on a form data source. Right-click the Methods node under the data source, and then select Override Method &gt; deleteMarked.\n\n#### Examples\n\nThe following example overrides the deleteMarked method to let users confirm whether they want to delete the marked records.\n\n    public void deleteMarked() \n    { \n        if (Box::yesNo(\"@SYS79428\", DialogButton::Yes, \"@SYS79319\")) \n            super(); \n    }\n\n### Method OnLeavingRecord\n\n    private void OnLeavingRecord([FormDataSource sender], [FormDataSourceEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n## Class FormDateControl\n    class FormDateControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font used to output text in the control.                                                                                                     |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int charFromPos(int x, int y)                                                                        |                                                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                                                         |\n| public int dataFieldArrayIndex()                                                                            |                                                                                                                                                                         |\n| public FieldName dataFieldName()                                                                            |                                                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source to be used by the control or the form.                                                                                                       |\n| public int dateDay(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public int dateFormat(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int dateMonth(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int dateSeparator(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public Date dateValue(\\[Date value\\])                                                                       |                                                                                                                                                                         |\n| public int dateYear(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public int direction(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int displayHeight(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayHeightMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayHeightValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that id displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                                                         |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public container getCursorPos()                                                                             |                                                                                                                                                                         |\n| public int getFirstVisibleLine()                                                                            |                                                                                                                                                                         |\n| public str getLine(int lineNo)                                                                              |                                                                                                                                                                         |\n| public int getLineCount()                                                                                   |                                                                                                                                                                         |\n| public container getSelection()                                                                             |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public int iMEMode(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Returns a value that indicates whether the control allows for the specified level of customization.                                                                     |\n| public boolean isValid()                                                                                    |                                                                                                                                                                         |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                        |                                                                                                                                                                         |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                            |                                                                                                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                              |                                                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int limitText(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                                                         |\n| public AutoMode limitTextMode(\\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public int limitTextValue(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int lineFromChar(int charIndex)                                                                      |                                                                                                                                                                         |\n| public int lineIndex(int lineNo)                                                                            |                                                                                                                                                                         |\n| public int lineLength(int lineNo)                                                                           |                                                                                                                                                                         |\n| public int lookupButton(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public str maxDateLabel(\\[str value\\])                                                                      |                                                                                                                                                                         |\n| public str maxDateLabelText()                                                                               |                                                                                                                                                                         |\n| public boolean modified()                                                                                   |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public container posFromChar(int charIndex)                                                                 |                                                                                                                                                                         |\n| public str previewPartRef(\\[str value\\])                                                                    |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean replaceOnLookup(\\[boolean value\\])                                                           |                                                                                                                                                                         |\n| public int searchAfterInput(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public int searchMode(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                                                     |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userFastTabSummary(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels.                                                                                                                     |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void scrollCursor()                                                                                  |                                                                                                                                                                         |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                               |                                                                                                                                                                         |\n| public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])         |                                                                                                                                                                         |\n| public void lineScroll(int dx, int dy)                                                                      |                                                                                                                                                                         |\n| public void setSelection(int charIndexFrom, int charIndexTo)                                                |                                                                                                                                                                         |\n| public void textChange()                                                                                    |                                                                                                                                                                         |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void pasteText(str pasteStr, \\[boolean InsertSel\\])                                                  |                                                                                                                                                                         |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                   |                                                                                                                                                                         |\n| public void setCursorPos(int x, int y)                                                                      |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])       |                                                                                                                                                                         |\n| public void lookup()                                                                                        |                                                                                                                                                                         |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void undo()                                                                                          |                                                                                                                                                                         |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void performFormLookup(xFormRun form)                                                                |                                                                                                                                                                         |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method charFromPos\n\n    public int charFromPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataFieldArrayIndex\n\n    public int dataFieldArrayIndex()\n\n#### Return Value\n\n### Method dataFieldName\n\n    public FieldName dataFieldName()\n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method dateDay\n\n    public int dateDay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateFormat\n\n    public int dateFormat([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateMonth\n\n    public int dateMonth([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateSeparator\n\n    public int dateSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateValue\n\n    public Date dateValue([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateYear\n\n    public int dateYear([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method direction\n\n    public int direction([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayHeight\n\n    public int displayHeight([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayHeightMode\n\n    public AutoMode displayHeightMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayHeightValue\n\n    public int displayHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that id displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method getCursorPos\n\n    public container getCursorPos()\n\n#### Return Value\n\n### Method getFirstVisibleLine\n\n    public int getFirstVisibleLine()\n\n#### Return Value\n\n### Method getLine\n\n    public str getLine(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method getLineCount\n\n    public int getLineCount()\n\n#### Return Value\n\n### Method getSelection\n\n    public container getSelection()\n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method iMEMode\n\n    public int iMEMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control; optional.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method isValid\n\n    public boolean isValid()\n\n#### Return Value\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelMouseDblClick\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseDown\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseUp\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method limitText\n\n    public int limitText([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method limitTextMode\n\n    public AutoMode limitTextMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method limitTextValue\n\n    public int limitTextValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineFromChar\n\n    public int lineFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method lineIndex\n\n    public int lineIndex(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lineLength\n\n    public int lineLength(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lookupButton\n\n    public int lookupButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method maxDateLabel\n\n    public str maxDateLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method maxDateLabelText\n\n    public str maxDateLabelText()\n\n#### Return Value\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method posFromChar\n\n    public container posFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replaceOnLookup\n\n    public boolean replaceOnLookup([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchAfterInput\n\n    public int searchAfterInput([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchMode\n\n    public int searchMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userFastTabSummary\n\n    public int userFastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width for the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method scrollCursor\n\n    public void scrollCursor()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method performTypeLookup\n\n    public void performTypeLookup([int userType], [int arrayIndex], [SelectableDataArea company])\n\n#### Parameters\n\nuserType  \n\n<!-- -->\n\narrayIndex  \n\n<!-- -->\n\ncompany  \n\n### Method lineScroll\n\n    public void lineScroll(int dx, int dy)\n\n#### Parameters\n\ndx  \n\n<!-- -->\n\ndy  \n\n### Method setSelection\n\n    public void setSelection(int charIndexFrom, int charIndexTo)\n\n#### Parameters\n\ncharIndexFrom  \n\n<!-- -->\n\ncharIndexTo  \n\n### Method textChange\n\n    public void textChange()\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method pasteText\n\n    public void pasteText(str pasteStr, [boolean InsertSel])\n\n#### Parameters\n\npasteStr  \n\n<!-- -->\n\nInsertSel  \n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setCursorPos\n\n    public void setCursorPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method performDBLookup\n\n    public void performDBLookup([FieldId fieldId], [TableId tableId], [SelectableDataArea company])\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\ntableId  \n\n<!-- -->\n\ncompany  \n\n### Method lookup\n\n    public void lookup()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method undo\n\n    public void undo()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method enter\n\n    public void enter()\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method performFormLookup\n\n    public void performFormLookup(xFormRun form)\n\n#### Parameters\n\nform  \n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n## Class FormDateTimeControl\n    class FormDateTimeControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font used to output text in the control.                                                                                                     |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source to be used by the control or the form.                                                                                                       |\n| public int dateDay(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public int dateFormat(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int dateMonth(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int dateSeparator(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public DateTime dateTimeValue(\\[DateTime value\\])                                                           |                                                                                                                                                                         |\n| public int dateYear(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public int displayOption(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                                                         |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Returns a value that indicates whether the control allows for the specified level of customization.                                                                     |\n| public boolean isValid()                                                                                    |                                                                                                                                                                         |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                        |                                                                                                                                                                         |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                            |                                                                                                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                              |                                                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int limitText(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                                                         |\n| public AutoMode limitTextMode(\\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public int limitTextValue(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int lookupButton(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public str maxDateLabel(\\[str value\\])                                                                      |                                                                                                                                                                         |\n| public str maxDateLabelText()                                                                               |                                                                                                                                                                         |\n| public boolean modified()                                                                                   |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public str previewPartRef(\\[str value\\])                                                                    |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public int timeFormat(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int timeHours(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int timeMinute(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int timeSeconds(\\[int value\\])                                                                       |                                                                                                                                                                         |\n| public int timeSeparator(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public Timezone timeZone(\\[Timezone timeZone\\])                                                             |                                                                                                                                                                         |\n| public int timeZoneIndicator(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public int timezonePreference(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userFastTabSummary(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels.                                                                                                                     |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])         |                                                                                                                                                                         |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                               |                                                                                                                                                                         |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void timeTextChange()                                                                                |                                                                                                                                                                         |\n| public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])       |                                                                                                                                                                         |\n| public void dateTextChange()                                                                                |                                                                                                                                                                         |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void performFormLookup(xFormRun form)                                                                |                                                                                                                                                                         |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void lookup()                                                                                        |                                                                                                                                                                         |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                   |                                                                                                                                                                         |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void undo()                                                                                          |                                                                                                                                                                         |\n| public void setUTCString(str UTC\\_Formatted String)                                                         |                                                                                                                                                                         |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe property is set to this value; optional.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key being assigned to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method dateDay\n\n    public int dateDay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateFormat\n\n    public int dateFormat([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateMonth\n\n    public int dateMonth([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateSeparator\n\n    public int dateSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateTimeValue\n\n    public DateTime dateTimeValue([DateTime value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dateYear\n\n    public int dateYear([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayOption\n\n    public int displayOption([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the FormControl::dragLeave method, the FormControl::dragOver method, and the FormControl::dragOverEx method to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control; optional.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method isValid\n\n    public boolean isValid()\n\n#### Return Value\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelMouseDblClick\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseDown\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseUp\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method limitText\n\n    public int limitText([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method limitTextMode\n\n    public AutoMode limitTextMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method limitTextValue\n\n    public int limitTextValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lookupButton\n\n    public int lookupButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method maxDateLabel\n\n    public str maxDateLabel([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method maxDateLabelText\n\n    public str maxDateLabelText()\n\n#### Return Value\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method timeFormat\n\n    public int timeFormat([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeHours\n\n    public int timeHours([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeMinute\n\n    public int timeMinute([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeSeconds\n\n    public int timeSeconds([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeSeparator\n\n    public int timeSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeZone\n\n    public Timezone timeZone([Timezone timeZone])\n\n#### Parameters\n\ntimeZone  \n\n#### Return Value\n\n### Method timeZoneIndicator\n\n    public int timeZoneIndicator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timezonePreference\n\n    public int timezonePreference([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userFastTabSummary\n\n    public int userFastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width for the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method performTypeLookup\n\n    public void performTypeLookup([int userType], [int arrayIndex], [SelectableDataArea company])\n\n#### Parameters\n\nuserType  \n\n<!-- -->\n\narrayIndex  \n\n<!-- -->\n\ncompany  \n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method timeTextChange\n\n    public void timeTextChange()\n\n### Method performDBLookup\n\n    public void performDBLookup([FieldId fieldId], [TableId tableId], [SelectableDataArea company])\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\ntableId  \n\n<!-- -->\n\ncompany  \n\n### Method dateTextChange\n\n    public void dateTextChange()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method enter\n\n    public void enter()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method performFormLookup\n\n    public void performFormLookup(xFormRun form)\n\n#### Parameters\n\nform  \n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method lookup\n\n    public void lookup()\n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method undo\n\n    public void undo()\n\n### Method setUTCString\n\n    public void setUTCString(str UTC_Formatted String)\n\n#### Parameters\n\nUTC\\_Formatted String  \n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n## Class FormDesign\n    class FormDesign extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                              | Description                                                         |\n|---------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------|\n| public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])            |                                                                     |\n| public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])                     |                                                                     |\n| public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\]) |                                                                     |\n| public boolean alignChild(\\[boolean value\\])                                                                        |                                                                     |\n| public boolean alignChildren(\\[boolean value\\])                                                                     |                                                                     |\n| public boolean allowDocking(\\[boolean value\\])                                                                      |                                                                     |\n| public boolean allowFormCompanyChange(\\[boolean value\\])                                                            |                                                                     |\n| public boolean allowImplicitParent(\\[boolean value\\])                                                               |                                                                     |\n| public int allowUserSetup(\\[int value\\])                                                                            |                                                                     |\n| public boolean alwaysOnTop(\\[boolean value\\])                                                                       |                                                                     |\n| public int arrangeGuide(\\[int value\\])                                                                              |                                                                     |\n| public int arrangeMethod(\\[int value\\])                                                                             |                                                                     |\n| public int arrangeWhen(\\[int value\\])                                                                               |                                                                     |\n| public int backgroundColor(\\[int value\\])                                                                           | Gets or sets the background color of the control.                   |\n| public int bold(\\[int value\\])                                                                                      | Gets or sets the weight of font used to output text in the control. |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                           |                                                                     |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                                 |                                                                     |\n| public int bottomMarginValue(\\[int value\\])                                                                         |                                                                     |\n| public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                               |                                                                     |\n| public boolean canContain(FormControl control)                                                                      |                                                                     |\n| public str caption(\\[str value\\])                                                                                   | Gets or set the caption of the control.                             |\n| public int characterSet(\\[int value\\])                                                                              | Gets or sets the character set of the font.                         |\n| public int colorScheme(\\[int value\\])                                                                               | Gets or sets the color scheme of the control.                       |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                             |                                                                     |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                                |                                                                     |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                     |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                                  |                                                                     |\n| public int columnspaceValue(\\[int value\\])                                                                          |                                                                     |\n| public int columnsValue(\\[int value\\])                                                                              |                                                                     |\n| public boolean contains(FormControl control)                                                                        |                                                                     |\n| public FormControl control(int controlId)                                                                           |                                                                     |\n| public int controlCount()                                                                                           |                                                                     |\n| public FormControl controlName(str controlName)                                                                     |                                                                     |\n| public FormControl controlNum(int controlNo)                                                                        |                                                                     |\n| public str cssClass(\\[str value\\])                                                                                  |                                                                     |\n| public int dataSource(\\[AnyType value\\])                                                                            | Gets or sets a data source to be used by the control or the form.   |\n| public str defaultAction(\\[str value\\])                                                                             |                                                                     |\n| public str font(\\[str value\\])                                                                                      | Gets or sets the name of the font for the control to use.           |\n| public int fontSize(\\[int value\\])                                                                                  | Gets or sets the size of the font for the control to use.           |\n| public int frame(\\[int value\\])                                                                                     |                                                                     |\n| public boolean hasUserSetting()                                                                                     |                                                                     |\n| public int height(int value, \\[int mode\\])                                                                          | Gets or sets the height of the control.                             |\n| public int heightMode(\\[int value\\])                                                                                | Gets or sets a calculation mode for the height of the control.      |\n| public int heightValue(\\[int value\\])                                                                               | Gets or sets the height of the control.                             |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                                       |                                                                     |\n| public boolean hideToolbar(\\[boolean value\\])                                                                       |                                                                     |\n| public int imagemode(\\[int value\\])                                                                                 |                                                                     |\n| public str imageName(\\[str value\\])                                                                                 |                                                                     |\n| public int imageResource(\\[int value\\])                                                                             |                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                            |                                                                     |\n| public boolean italic(\\[boolean value\\])                                                                            |                                                                     |\n| public int labelBold(\\[int value\\])                                                                                 |                                                                     |\n| public int labelCharacterSet(\\[int value\\])                                                                         |                                                                     |\n| public str labelFont(\\[str value\\])                                                                                 |                                                                     |\n| public int labelFontSize(\\[int value\\])                                                                             |                                                                     |\n| public boolean labelItalic(\\[boolean value\\])                                                                       |                                                                     |\n| public boolean labelUnderline(\\[boolean value\\])                                                                    |                                                                     |\n| public int left(int value, \\[int mode\\])                                                                            |                                                                     |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                             |                                                                     |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                                   |                                                                     |\n| public int leftMarginValue(\\[int value\\])                                                                           |                                                                     |\n| public int leftMode(\\[int value\\])                                                                                  |                                                                     |\n| public int leftValue(\\[int value\\])                                                                                 |                                                                     |\n| public str localWebMenu(\\[str value\\])                                                                              |                                                                     |\n| public boolean maximizeBox(\\[boolean value\\])                                                                       |                                                                     |\n| public boolean minimizeBox(\\[boolean value\\])                                                                       |                                                                     |\n| public int mode(\\[int value\\])                                                                                      |                                                                     |\n| public int moveControl(int controlId, \\[int insertAfterControlId\\])                                                 |                                                                     |\n| public str newRecordAction(\\[str value\\])                                                                           |                                                                     |\n| public container SysObsoleteAttribute()                                                                             |                                                                     |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                     |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                                  |                                                                     |\n| public int rightMarginValue(\\[int value\\])                                                                          |                                                                     |\n| public boolean saveSize(\\[boolean value\\])                                                                          |                                                                     |\n| public int scrollbars(\\[int value\\])                                                                                |                                                                     |\n| public boolean setCompany(\\[boolean value\\])                                                                        |                                                                     |\n| public int showDeleteButton(\\[int value\\])                                                                          |                                                                     |\n| public int showNewButton(\\[int value\\])                                                                             |                                                                     |\n| public int showWebHelp(\\[int value\\])                                                                               |                                                                     |\n| public int statusBarStyle(\\[int value\\])                                                                            |                                                                     |\n| public int style(\\[int value\\])                                                                                     |                                                                     |\n| public int submitMethod(\\[int value\\])                                                                              |                                                                     |\n| public boolean supportReload(\\[boolean value\\])                                                                     |                                                                     |\n| public int titleDatasource(\\[AnyType value\\])                                                                       |                                                                     |\n| public int top(int value, \\[int mode\\])                                                                             |                                                                     |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                              |                                                                     |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                                    |                                                                     |\n| public int topMarginValue(\\[int value\\])                                                                            |                                                                     |\n| public int topMode(\\[int value\\])                                                                                   |                                                                     |\n| public int topValue(\\[int value\\])                                                                                  |                                                                     |\n| public boolean underline(\\[boolean value\\])                                                                         |                                                                     |\n| public boolean SysObsoleteAttribute(container data)                                                                 |                                                                     |\n| public int useCaptionFromMenuItem(\\[int value\\])                                                                    |                                                                     |\n| public boolean userSettingAllowSave()                                                                               |                                                                     |\n| public boolean useUserLayout(\\[boolean value\\])                                                                     |                                                                     |\n| public int viewEditMode(\\[int value\\])                                                                              |                                                                     |\n| public boolean visible(\\[boolean value\\])                                                                           |                                                                     |\n| public int width(int value, \\[int mode\\])                                                                           | Gets or sets the width of the control.                              |\n| public int widthMode(\\[int value\\])                                                                                 | Gets or sets the calculation mode of the width of the control.      |\n| public int widthValue(\\[int value\\])                                                                                | Gets or sets the width of the control.                              |\n| public int windowResize(\\[int value\\])                                                                              |                                                                     |\n| public int windowType(\\[int value\\])                                                                                |                                                                     |\n| public int workflowDatasource(\\[AnyType value\\])                                                                    |                                                                     |\n| public boolean workflowEnabled(\\[boolean value\\])                                                                   |                                                                     |\n| public str workflowType(\\[str value\\])                                                                              |                                                                     |\n| public int dialogSize(\\[int value\\])                                                                                |                                                                     |\n| public void resetUserSetting()                                                                                      |                                                                     |\n| public void removeControl(\\[int controlId\\])                                                                        |                                                                     |\n| public void finalize()                                                                                              |                                                                     |\n\n### Method addControl\n\n    public FormControl addControl(FormControlType controlType, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolType  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addControlEx\n\n    public FormControl addControlEx(str controlClass, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addDataField\n\n    public FormControl addDataField(int dataSourceId, FieldId fieldId, [FormControl insertAfter], [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowDocking\n\n    public boolean allowDocking([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowFormCompanyChange\n\n    public boolean allowFormCompanyChange([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowImplicitParent\n\n    public boolean allowImplicitParent([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alwaysOnTop\n\n    public boolean alwaysOnTop([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method canAddDataField\n\n    public boolean canAddDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method canContain\n\n    public boolean canContain(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of Microsoft Windows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Microsoft Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Microsoft Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method contains\n\n    public boolean contains(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method control\n\n    public FormControl control(int controlId)\n\n#### Parameters\n\ncontrolId  \n\n#### Return Value\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlName\n\n    public FormControl controlName(str controlName)\n\n#### Parameters\n\ncontrolName  \n\n#### Return Value\n\n### Method controlNum\n\n    public FormControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \n\n#### Return Value\n\n### Method cssClass\n\n    public str cssClass([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method defaultAction\n\n    public str defaultAction([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method frame\n\n    public int frame([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hasUserSetting\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hideToolbar\n\n    public boolean hideToolbar([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imagemode\n\n    public int imagemode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imageName\n\n    public str imageName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imageResource\n\n    public int imageResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isUserSetupEnabled\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \n\n#### Return Value\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method localWebMenu\n\n    public str localWebMenu([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method maximizeBox\n\n    public boolean maximizeBox([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method minimizeBox\n\n    public boolean minimizeBox([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mode\n\n    public int mode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method moveControl\n\n    public int moveControl(int controlId, [int insertAfterControlId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterControlId  \n\n#### Return Value\n\n### Method newRecordAction\n\n    public str newRecordAction([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method saveSize\n\n    public boolean saveSize([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method scrollbars\n\n    public int scrollbars([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setCompany\n\n    public boolean setCompany([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showDeleteButton\n\n    public int showDeleteButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showNewButton\n\n    public int showNewButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showWebHelp\n\n    public int showWebHelp([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method statusBarStyle\n\n    public int statusBarStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method submitMethod\n\n    public int submitMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method supportReload\n\n    public boolean supportReload([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method titleDatasource\n\n    public int titleDatasource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method useCaptionFromMenuItem\n\n    public int useCaptionFromMenuItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userSettingAllowSave\n\n    public boolean userSettingAllowSave()\n\n#### Return Value\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method windowResize\n\n    public int windowResize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method windowType\n\n    public int windowType([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method workflowDatasource\n\n    public int workflowDatasource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method workflowEnabled\n\n    public boolean workflowEnabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method workflowType\n\n    public str workflowType([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dialogSize\n\n    public int dialogSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method resetUserSetting\n\n    public void resetUserSetting()\n\n### Method removeControl\n\n    public void removeControl([int controlId])\n\n#### Parameters\n\ncontrolId  \n\n### Method finalize\n\n    public void finalize()\n\n## Class FormDesignView\n    class FormDesignView extends ObjectRun\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                 | Description                                     |\n|--------------------------------------------------------|-------------------------------------------------|\n| public FormBuildDesign design(\\[int value\\])           |                                                 |\n| public Form form(\\[Form value\\])                       |                                                 |\n| public str name()                                      |                                                 |\n| public FormBuildObjectSet objectPool(\\[AnyType pool\\]) |                                                 |\n| public void finalize()                                 |                                                 |\n| public void new(\\[str name\\], \\[Form form\\])           | Initializes a new instance of the Object class. |\n\n### Method design\n\n    public FormBuildDesign design([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method form\n\n    public Form form([Form value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\n    public str name()\n\n#### Return Value\n\n### Method objectPool\n\n    public FormBuildObjectSet objectPool([AnyType pool])\n\n#### Parameters\n\npool  \n\n#### Return Value\n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new([str name], [Form form])\n\n#### Parameters\n\nname  \n\n<!-- -->\n\nform  \n\n## Class FormDropDialogButtonControl\n    class FormDropDialogButtonControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                                                                           |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                                                              |\n| public int alignment(\\[int value\\])                                                                         | Changes the alignment of the text in the control. Values are Left, right, or center, to align the control appropriately.                                                                                              |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                                                                   |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                                                                   |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                                                                    |\n| public boolean autoRefreshData(\\[boolean value\\])                                                           | Specifies whether the data from the data source that is associated with the control will be refreshed when the button is clicked. The default value is No.                                                            |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                                                                     |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                                                                        |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                                                                |\n| public boolean big(\\[boolean value\\])                                                                       |                                                                                                                                                                                                                       |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font used to output text in the control.                                                                                                                                                   |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                                                              |\n| public int buttonDisplay(\\[int value\\])                                                                     | Gets or sets the appearance of the button control.                                                                                                                                                                    |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                                                                    |\n| public str caption(\\[str value\\])                                                                           | Gets or set the caption of the control.                                                                                                                                                                               |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                                                                           |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                                                                   |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                                                                      |\n| public int copyCallerQuery(\\[int value\\])                                                                   | Specifies whether to copy the query from the calling form to the target form. This enables the target form to display the same data that was being viewed in the original form. The default value is Auto.            |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                                                                        |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 | Specifies the field that will be used to identify the country context. See CountryRegionCodes.                                                                                                                        |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                                                                         |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source to be used by the control or the form.                                                                                                                                                     |\n| public boolean defaultButton(\\[boolean value\\])                                                             | Determines whether the button should be the default button in the form.                                                                                                                                               |\n| public str disabledImage(\\[str value\\])                                                                     | Gets or sets the disabled image of the button.                                                                                                                                                                        |\n| public int disabledImageLocation(\\[int value\\])                                                             |                                                                                                                                                                                                                       |\n| public int disabledResource(\\[int value\\])                                                                  | Gets or sets the resource ID of the image to use as the disabled button image.                                                                                                                                        |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both.                                               |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                                                                     |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                                                                        |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                                                                      |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                                                                |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                                                                   |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                                                                             |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                                                                             |\n| public boolean forcedToOverflow(\\[boolean value\\])                                                          |                                                                                                                                                                                                                       |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                                                                   |\n| public int formViewOption(\\[int value\\])                                                                    | Specifies the form mode to use. Options include Auto, Grid, and Details. The default is Auto.                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                                                              |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                                                               |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                                                               |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                                                                        |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                                                               |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                                                              |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                                                              |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                                                                       |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                                                                         |\n| public int imageLocation(\\[int value\\])                                                                     |                                                                                                                                                                                                                       |\n| public boolean isContainer()                                                                                |                                                                                                                                                                                                                       |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                                                                    |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                                                                   |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                                                                 |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                                                                       |\n| public str keyTip(\\[str value\\])                                                                            |                                                                                                                                                                                                                       |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                                                                      |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                                                                      |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                                                                 |\n| public xMenuFunction menufunction()                                                                         |                                                                                                                                                                                                                       |\n| public str menuItemName(\\[str value\\])                                                                      | Determines which menu item is run for a DropDialogButton control.                                                                                                                                                     |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                                                                             |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                                                                     |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                                                                     |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                                                              |\n| public int multiSelect(\\[int value\\])                                                                       |                                                                                                                                                                                                                       |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.                                                                               |\n| public int neededPermission(\\[int value\\])                                                                  | Specifies the minimum permission level that is required to be allowed access to the control.                                                                                                                          |\n| public int needsRecord(\\[int value\\])                                                                       | Specifies whether a button is enabled if no record is present. The default value is No.                                                                                                                               |\n| public str normalImage(\\[str value\\])                                                                       |                                                                                                                                                                                                                       |\n| public int normalResource(\\[int value\\])                                                                    |                                                                                                                                                                                                                       |\n| public int openMode(\\[int value\\])                                                                          | Specifies the view mode of the target form. The possible values include Auto, View, Edit, and New. The default is Auto. You may use this property to specify whether the target form opens in edit or read-only mode. |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                                                                       |\n| public str parameters(\\[str value\\])                                                                        | Gets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.                                                                                                                |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                                                                         |\n| public boolean primary(\\[boolean value\\])                                                                   |                                                                                                                                                                                                                       |\n| public boolean saveRecord(\\[boolean value\\])                                                                |                                                                                                                                                                                                                       |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                                                                           |\n| public boolean sendExternalContext(\\[boolean value\\])                                                       | Specifies whether the external record context of this form should be used as the menu item external record context. The default value is No.                                                                          |\n| public int shortkey(\\[int value\\])                                                                          |                                                                                                                                                                                                                       |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                                                              |\n| public boolean showShortCut(\\[boolean value\\])                                                              |                                                                                                                                                                                                                       |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                                                                       |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                                                                       |\n| public int style(\\[int value\\])                                                                             | Specifies the style of the form. This property controls the form design pattern being used with the form. The default is Auto.                                                                                        |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                                                                                                       |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                                                                           |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                                                                        |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                                                                           |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                                                                        |\n| public int type(\\[int value\\])                                                                              | Specifies the type of the control. Read-only.                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                                                                                                       |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                                                                       |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                                                                           |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                                                                      |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                                                                           |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                                                                   |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                                                                  |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                                                                    |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                                                              |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                                                                |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                                                                     |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                                                                 |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                                                                  |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels.                                                                                                                                                                   |\n| public boolean value(\\[boolean value\\])                                                                     |                                                                                                                                                                                                                       |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                                                                           |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                                                                |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                                                                |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                                                                        |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                                                                |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                                                                        |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                                                               |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                                                                       |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                                                                 |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                                                                    |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                                                                |\n| private void OnDialogClosed(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                             |                                                                                                                                                                                                                       |\n| public void clicked()                                                                                       |                                                                                                                                                                                                                       |\n| private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                                                                       |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                                                                            |\n| public void jumpRef()                                                                                       |                                                                                                                                                                                                                       |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                                                              |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                                                                 |\n| public void dialogClosed(xFormRun formRun)                                                                  |                                                                                                                                                                                                                       |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                                                                         |\n| public void dialogInitialized(xFormRun formRun)                                                             |                                                                                                                                                                                                                       |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                                                                       |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                                                                  |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                                                                       |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                                                                             |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                                                                |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                                                                        |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                                                                     |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                                                                      |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                                                                |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                                                                       |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\nChanges the alignment of the text in the control. Values are Left, right, or center, to align the control appropriately.\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value of the property; optional.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoRefreshData\n\nSpecifies whether the data from the data source that is associated with the control will be refreshed when the button is clicked. The default value is No.\n\n    public boolean autoRefreshData([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method big\n\n    public boolean big([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method buttonDisplay\n\nGets or sets the appearance of the button control.\n\n    public int buttonDisplay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and five, inclusive.\n\n#### Remarks\n\nThe value of the property defines whether the text, the image, or both should be displayed on the button. This property also controls relative positions of text and image if both are displayed.The integer value that is returned contains the appearace of the button control as follows:\n\n| Value. | Description.                                                     |\n|--------|------------------------------------------------------------------|\n| 0      | Text only.                                                       |\n| 1      | Image Only.                                                      |\n| 2      | Text and image; the image is displayed below the text.           |\n| 3      | Text and image; the image is displayed above the text.           |\n| 4      | Text and image; the image is displayed to the left of the text.  |\n| 5      | Text and image; the image is displayed to the right of the text. |\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key being assigned to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method copyCallerQuery\n\nSpecifies whether to copy the query from the calling form to the target form. This enables the target form to display the same data that was being viewed in the original form. The default value is Auto.\n\n    public int copyCallerQuery([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\nSpecifies the field that will be used to identify the country context. See CountryRegionCodes.\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method defaultButton\n\nDetermines whether the button should be the default button in the form.\n\n    public boolean defaultButton([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the button should be the default button; otherwise, false.\n\n### Method disabledImage\n\nGets or sets the disabled image of the button.\n\n    public str disabledImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe full name of an image file. The system supports all of the GDI-supported image formats.\n\n#### Remarks\n\nThis property has precedence over the disabledResource property. It is used if both of these properties are set.\n\n### Method disabledImageLocation\n\n    public int disabledImageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method disabledResource\n\nGets or sets the resource ID of the image to use as the disabled button image.\n\n    public int disabledResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe resource ID of the image to use as the disabled button image. Both icon and bitmap images are supported.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave , the dragOver, and the dragOverEx to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method forcedToOverflow\n\n    public boolean forcedToOverflow([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method formViewOption\n\nSpecifies the form mode to use. Options include Auto, Grid, and Details. The default is Auto.\n\n    public int formViewOption([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText mehod to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method imageLocation\n\n    public int imageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method keyTip\n\n    public str keyTip([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method menufunction\n\n    public xMenuFunction menufunction()\n\n#### Return Value\n\n### Method menuItemName\n\nDetermines which menu item is run for a DropDialogButton control.\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method multiSelect\n\n    public int multiSelect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must begin with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\nSpecifies the minimum permission level that is required to be allowed access to the control.\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n#### Remarks\n\nThe possible values are as follows:\n\n-   None\n-   Read\n-   Update\n-   Create\n-   Correct\n-   Delete\n-   Manual\n\nThe default value is None.\n\n### Method needsRecord\n\nSpecifies whether a button is enabled if no record is present. The default value is No.\n\n    public int needsRecord([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalImage\n\n    public str normalImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalResource\n\n    public int normalResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method openMode\n\nSpecifies the view mode of the target form. The possible values include Auto, View, Edit, and New. The default is Auto. You may use this property to specify whether the target form opens in edit or read-only mode.\n\n    public int openMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parameters\n\nGets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.\n\n    public str parameters([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe list of parameters that are passed to the object.\n\n#### Remarks\n\nThe parameters string format is Parameter1=Value1, Parameter2=Value2, and so on.cts ignore passed, unrecognized parameters.\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method primary\n\n    public boolean primary([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method saveRecord\n\n    public boolean saveRecord([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method sendExternalContext\n\nSpecifies whether the external record context of this form should be used as the menu item external record context. The default value is No.\n\n    public boolean sendExternalContext([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method shortkey\n\n    public int shortkey([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showShortCut\n\n    public boolean showShortCut([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\nSpecifies the style of the form. This property controls the form design pattern being used with the form. The default is Auto.\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\nSpecifies the type of the control. Read-only.\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method value\n\n    public boolean value([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method OnDialogClosed\n\n    private void OnDialogClosed([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method clicked\n\n    public void clicked()\n\n### Method OnClicked\n\n    private void OnClicked([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method dialogClosed\n\n    public void dialogClosed(xFormRun formRun)\n\n#### Parameters\n\nformRun  \n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method dialogInitialized\n\n    public void dialogInitialized(xFormRun formRun)\n\n#### Parameters\n\nformRun  \n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormEventArgs\n    class FormEventArgs\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method | Description |\n|--------|-------------|\n\n## Class FormFastTabHeaderControl\n    class FormFastTabHeaderControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                              | Description                                                                                                                                                             |\n|---------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])            |                                                                                                                                                                         |\n| public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])                     |                                                                                                                                                                         |\n| public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\]) |                                                                                                                                                                         |\n| public boolean alignChild(\\[boolean value\\])                                                                        |                                                                                                                                                                         |\n| public boolean alignChildren(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                                      | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                         | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                                      | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int allowUserSetup(\\[int value\\])                                                                            |                                                                                                                                                                         |\n| public int arrangeGuide(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public int arrangeMethod(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public int arrangeWhen(\\[int value\\])                                                                               |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                   | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                           | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                                 | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                                  | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                                      | Gets or sets the weight of font used to output text in the control.                                                                                                     |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                           |                                                                                                                                                                         |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                                 |                                                                                                                                                                         |\n| public int bottomMarginValue(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                              | Retrieves the size of the control.                                                                                                                                      |\n| public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                               |                                                                                                                                                                         |\n| public boolean canContain(FormControl control)                                                                      |                                                                                                                                                                         |\n| public str caption(\\[str value\\])                                                                                   | Gets or set the caption of the control.                                                                                                                                 |\n| public int characterSet(\\[int value\\])                                                                              | Gets or sets the character set of the font.                                                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                               | Gets or sets the color scheme of the control.                                                                                                                           |\n| public int columns(\\[int value\\], \\[AutoMode mode\\])                                                                |                                                                                                                                                                         |\n| public AutoMode columnsMode(\\[AutoMode mode\\])                                                                      |                                                                                                                                                                         |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                                  |                                                                                                                                                                         |\n| public int columnspaceValue(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public int columnsValue(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                            | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                                    | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public boolean contains(FormControl control)                                                                        |                                                                                                                                                                         |\n| public int controlCount()                                                                                           |                                                                                                                                                                         |\n| public FormControl controlNum(int controlNo)                                                                        |                                                                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                        | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                         |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                          | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                            | Gets or sets a data source to be used by the control or the form.                                                                                                       |\n| public int displayTarget(\\[int value\\])                                                                             | Gets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                                  | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                               | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                           | Determines whether to enable or disable the object.                                                                                                                     |\n| public str font(\\[str value\\])                                                                                      | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                                  | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public boolean hasChanged(\\[boolean val\\])                                                                          | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                                     | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                          | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                                | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                               | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                              | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                                  | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                                       |                                                                                                                                                                         |\n| public str hierarchyParent(\\[str value\\])                                                                           | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                                   | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isContainer()                                                                                        |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                        | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                                       | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                            | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public boolean italic(\\[boolean value\\])                                                                            |                                                                                                                                                                         |\n| public boolean leave()                                                                                              |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                            | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                             |                                                                                                                                                                         |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                                   |                                                                                                                                                                         |\n| public int leftMarginValue(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                                  | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                                 | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                     | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                     | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                           | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public int moveControl(int controlId, \\[int insertAfterId\\])                                                        |                                                                                                                                                                         |\n| public str name(\\[str value\\])                                                                                      | Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                             |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                                  | Retrieves the parent control for the control.                                                                                                                           |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                                  |                                                                                                                                                                         |\n| public int rightMarginValue(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                           | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                          | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean skip(\\[boolean value\\])                                                                              | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                        |                                                                                                                                                                         |\n| public str toolTip()                                                                                                | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                             | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                              |                                                                                                                                                                         |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                                    |                                                                                                                                                                         |\n| public int topMarginValue(\\[int value\\])                                                                            |                                                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                                   | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                                  | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                                      |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                         |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                                 |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                                  | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                              | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                             | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                               | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                                | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                                  | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                          | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                            | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                            | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                         | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                                  | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                                 | Sets or returns the width of the control in pixels.                                                                                                                     |\n| public boolean useUserLayout(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                        | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                              | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                                      | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                           | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                           | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                                 | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                                | Gets or sets the width of the control.                                                                                                                                  |\n| public void filter(\\[str filterStr\\])                                                                               |                                                                                                                                                                         |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                          |                                                                                                                                                                         |\n| public void jumpRef()                                                                                               |                                                                                                                                                                         |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])         |                                                                                                                                                                         |\n| public void gotFocus()                                                                                              | Indicates that the control has received focus.                                                                                                                          |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                         |                                                                                                                                                                         |\n| public void setFocus()                                                                                              | Sets the focus on the control.                                                                                                                                          |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                                       | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void arrange()                                                                                               |                                                                                                                                                                         |\n| public void endDrag()                                                                                               | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void paste()                                                                                                 | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                           | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void resetUserSetting()                                                                                      | Resets the user settings for the control.                                                                                                                               |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                        |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                            | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                               | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void prefColumnSize(int width, int height)                                                                   | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void copy()                                                                                                  | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void enter()                                                                                                 |                                                                                                                                                                         |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                            |                                                                                                                                                                         |\n| public void context()                                                                                               | Shows the shortcut menu for the control.                                                                                                                                |\n| public void displayControl()                                                                                        | Displays the control.                                                                                                                                                   |\n| public void cut()                                                                                                   | Cuts the contents of the control.                                                                                                                                       |\n| public void lostFocus()                                                                                             | Indicates that the control has lost focus.                                                                                                                              |\n| public void dragLeave()                                                                                             | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void inputSearch(str searchStr)                                                                              | Performs data filtering for the control, based on the specified string.                                                                                                 |\n\n### Method addControl\n\n    public FormControl addControl(FormControlType controlType, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolType  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addControlEx\n\n    public FormControl addControlEx(str controlClass, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addDataField\n\n    public FormControl addDataField(int dataSourceId, FieldId fieldId, [FormControl insertAfter], [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to which to set the property; optional.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method canAddDataField\n\n    public boolean canAddDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method canContain\n\n    public boolean canContain(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method columns\n\n    public int columns([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public AutoMode columnsMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key being assigned to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method contains\n\n    public boolean contains(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlNum\n\n    public FormControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \n\n#### Return Value\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave, dragOver, and dragOverEx methods to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer data type that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer data type that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer data type value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer data type that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method moveControl\n\n    public int moveControl(int controlId, [int insertAfterId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterId  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must begin with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer data type that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer data type that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer data type value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer data type that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method arrange\n\n    public void arrange()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method enter\n\n    public void enter()\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n\n\n\n\n","nodes":[{"pos":[4,684],"content":"# required metadata\n\ntitle: F Classes - FormDataObject to FormFastTabHeaderControl\ndescription: API reference for classes from FormDataObject to FormFastTabHeaderControl.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 63703\nms.assetid: 7c23d29c-9408-49ca-82e7-ddb940dc8526\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n","nodes":[{"content":"F Classes - FormDataObject to FormFastTabHeaderControl","nodes":[{"pos":[0,54],"content":"F Classes - FormDataObject to FormFastTabHeaderControl","nodes":[{"content":"F Classes - FormDataObject to FormFastTabHeaderControl","pos":[0,54]}]}],"path":["title"]},{"content":"API reference for classes from FormDataObject to FormFastTabHeaderControl.","nodes":[{"pos":[0,74],"content":"API reference for classes from FormDataObject to FormFastTabHeaderControl.","nodes":[{"content":"API reference for classes from FormDataObject to FormFastTabHeaderControl.","pos":[0,74]}]}],"path":["description"]}],"header":"# required metadata\n","yml":true},{"pos":[692,746],"content":"F Classes - FormDataObject to FormFastTabHeaderControl","linkify":"F Classes - FormDataObject to FormFastTabHeaderControl","nodes":[{"content":"F Classes - FormDataObject to FormFastTabHeaderControl","pos":[0,54]}]},{"content":"API reference for classes from FormDataObject to FormFastTabHeaderControl.","pos":[792,866]},{"pos":[868,888],"content":"Class FormDataObject","linkify":"Class FormDataObject","nodes":[{"content":"Class FormDataObject","pos":[0,20]}]},{"content":"The FormDataObject class represents the fields, affects how controls that refer to a field are displayed on form data sources, and modifies lookup and validation behavior.","pos":[956,1127]},{"pos":[1133,1140],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By changing the properties, you affect how controls that refer to the field are displayed.","pos":[1142,1232]},{"content":"Furthermore, if you override the methods on this class, the behavior on lookup and validation can be modified.","pos":[1233,1343]},{"content":"By using the properties on the FormDataObject class instead of properties on the individual controls, you make sure that the various representations of the same field are handled consistently.","pos":[1344,1536]},{"content":"This also makes upgrades easier.","pos":[1537,1569]},{"pos":[1575,1583],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[1589,1596],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[1600,1606]},{"content":"Description","pos":[1710,1721]},{"content":"public Common lookupReference(<ph id=\"ph1\">\\[</ph>FormReferenceControl formReferenceControl<ph id=\"ph2\">\\]</ph>)","pos":[2164,2240],"source":"public Common lookupReference(\\[FormReferenceControl formReferenceControl\\])"},{"content":"public Common resolveReference(<ph id=\"ph1\">\\[</ph>FormReferenceControl formReferenceControl<ph id=\"ph2\">\\]</ph>)","pos":[2446,2523],"source":"public Common resolveReference(\\[FormReferenceControl formReferenceControl\\])"},{"content":"public str resolveAmbiguousReference(<ph id=\"ph1\">\\[</ph>FormControl formControl<ph id=\"ph2\">\\]</ph>)","pos":[2728,2793],"source":"public str resolveAmbiguousReference(\\[FormControl formControl\\])"},{"content":"public int allowAdd(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3010,3044],"source":"public int allowAdd(\\[int value\\])"},{"content":"Sets or returns the value of the allowAdd property for the form data object.","pos":[3120,3196]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[3292,3335],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can modify the contents of the control.","pos":[3402,3469]},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[3574,3617],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public FormDataSource datasource()","pos":[3856,3890]},{"content":"public boolean editAutoPostback(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[4138,4188],"source":"public boolean editAutoPostback(\\[boolean value\\])"},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[4420,4461],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether the object is enabled or disabled.","pos":[4530,4583]},{"content":"public FieldId fieldId()","pos":[4702,4726]},{"content":"public str helpField()","pos":[4984,5006]},{"content":"Returns the Help text for the control.","pos":[5094,5132]},{"content":"public str labelText()","pos":[5266,5288]},{"content":"Returns the label text for the control.","pos":[5376,5415]},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[5548,5591],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the data field is mandatory.","pos":[5658,5733]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[5830,5868],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control that is associated with the data source.","pos":[5940,6107]},{"content":"public str toolTip()","pos":[6112,6132]},{"content":"public boolean validate()","pos":[6394,6419]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[6676,6717],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[6786,6856]},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormDataObject sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataFieldEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[6958,7038],"source":"private void OnModified(\\[FormDataObject sender\\], \\[FormDataFieldEventArgs e\\])"},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormDataObject sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataFieldEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[7240,7321],"source":"private void OnValidated(\\[FormDataObject sender\\], \\[FormDataFieldEventArgs e\\])"},{"content":"public void modified()","pos":[7522,7544]},{"content":"Indicates that the field has been successfully validated and modified in the current record.","pos":[7632,7724]},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormDataObject sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataFieldEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[7804,7886],"source":"private void OnValidating(\\[FormDataObject sender\\], \\[FormDataFieldEventArgs e\\])"},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[8086,8193],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void restore()","pos":[8368,8389]},{"content":"public void lookup(FormControl formControl, str filterStr)","pos":[8650,8708]},{"content":"public void dataChanged()","pos":[8932,8957]},{"content":"public void jumpRef()","pos":[9214,9235]},{"content":"public void context()","pos":[9496,9517]},{"content":"public void find()","pos":[9778,9796]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>NoYes clearPrev<ph id=\"ph4\">\\]</ph>)","pos":[10060,10118],"source":"public void filter(\\[str filterStr\\], \\[NoYes clearPrev\\])"},{"content":"public void performFormLookup(xFormRun form, FormControl formControl)","pos":[10342,10411]},{"pos":[10627,10649],"content":"Method lookupReference","linkify":"Method lookupReference","nodes":[{"content":"Method lookupReference","pos":[0,22]}]},{"pos":[10736,10746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formReferenceControl","pos":[10748,10768]},{"pos":[10777,10789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10795,10818],"content":"Method resolveReference","linkify":"Method resolveReference","nodes":[{"content":"Method resolveReference","pos":[0,23]}]},{"pos":[10906,10916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formReferenceControl","pos":[10918,10938]},{"pos":[10947,10959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10965,10997],"content":"Method resolveAmbiguousReference","linkify":"Method resolveAmbiguousReference","nodes":[{"content":"Method resolveAmbiguousReference","pos":[0,32]}]},{"pos":[11073,11083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formControl","pos":[11085,11096]},{"pos":[11105,11117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11123,11138],"content":"Method allowAdd","linkify":"Method allowAdd","nodes":[{"content":"Method allowAdd","pos":[0,15]}]},{"content":"Sets or returns the value of the allowAdd property for the form data object.","pos":[11140,11216]},{"pos":[11261,11271],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[11273,11278]},{"content":"The value to assign to the allowEdit property.","pos":[11281,11327]},{"pos":[11334,11346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormAllowAdd enumeration value that indicates whether the allowAdd property is set to No, Restricted, or Yes.","pos":[11348,11459]},{"pos":[11466,11474],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve and set the allowAdd property.","pos":[11476,11550]},{"pos":[11769,11785],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can modify the contents of the control.","pos":[11787,11854]},{"pos":[11908,11918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[11920,11925]},{"content":"The value to assign to the allowEdit property.","pos":[11928,11974]},{"pos":[11981,11993],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be modified; otherwise, false.","pos":[11995,12049]},{"pos":[12056,12063],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[12065,12185]},{"pos":[12192,12200],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve and set the value of the allowEdit property.","pos":[12202,12290]},{"pos":[12428,12444],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[12498,12508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[12510,12515]},{"pos":[12524,12536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12542,12559],"content":"Method datasource","linkify":"Method datasource","nodes":[{"content":"Method datasource","pos":[0,17]}]},{"pos":[12606,12618],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12624,12647],"content":"Method editAutoPostback","linkify":"Method editAutoPostback","nodes":[{"content":"Method editAutoPostback","pos":[0,23]}]},{"pos":[12708,12718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[12720,12725]},{"pos":[12734,12746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12752,12766],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether the object is enabled or disabled.","pos":[12768,12821]},{"pos":[12873,12883],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[12885,12890]},{"content":"A Boolean value that specifies whether the control is enabled.","pos":[12893,12955]},{"pos":[12962,12974],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[12976,13024]},{"pos":[13031,13038],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property lets you enable or disable a control at run time.","pos":[13040,13110]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[13111,13206]},{"content":"You can also disable a control that is used only for display purposes, such as an error message that provides read-only information.","pos":[13207,13339]},{"pos":[13346,13354],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve and set the enabled property for a control.","pos":[13356,13443]},{"pos":[13609,13623],"content":"Method fieldId","linkify":"Method fieldId","nodes":[{"content":"Method fieldId","pos":[0,14]}]},{"pos":[13660,13672],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13678,13694],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Returns the Help text for the control.","pos":[13696,13734]},{"pos":[13769,13781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[13783,13871]},{"pos":[13878,13886],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to use the helpField method.","pos":[13888,13948]},{"pos":[14005,14021],"content":"Method labelText","linkify":"Method labelText","nodes":[{"content":"Method labelText","pos":[0,16]}]},{"content":"Returns the label text for the control.","pos":[14023,14062]},{"pos":[14097,14109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The label text for the control; an empty string if there is no label text for the control.","pos":[14111,14201]},{"pos":[14207,14223],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"content":"Sets or returns a value that indicates whether the data field is mandatory.","pos":[14225,14300]},{"pos":[14354,14364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[14366,14371]},{"content":"The value to assign to the mandatory property of the field.","pos":[14374,14433]},{"pos":[14440,14452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the field is mandatory; otherwise, false.","pos":[14454,14503]},{"pos":[14510,14518],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve and set the mandatory property for the field.","pos":[14520,14609]},{"pos":[14797,14808],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control that is associated with the data source.","pos":[14810,14977]},{"pos":[15026,15036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[15038,15043]},{"content":"The value to assign to the skip property of the data source that is associated with the control; optional.","pos":[15046,15152]},{"pos":[15159,15171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control that is associated with the data source; otherwise, false.","pos":[15173,15319]},{"pos":[15326,15333],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[15335,15530]},{"content":"Controls are skipped if either the control's skip value is true or the data source's skip value is true.","pos":[15531,15635]},{"pos":[15642,15650],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following shows how to retrieve and set the skip property of a data source for a control.","pos":[15652,15745]},{"pos":[15908,15922],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"pos":[15955,15967],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15973,15988],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[16026,16038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16044,16058],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[16060,16130]},{"pos":[16182,16192],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[16194,16199]},{"content":"The value that is assigned to the visibility setting for the control.","pos":[16202,16271]},{"pos":[16278,16290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[16292,16341]},{"content":"The default is true.","pos":[16342,16362]},{"pos":[16369,16376],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls that refer to a data source field are visible only when the visible property is set to true on both the control and the underlying data source field.","pos":[16378,16536]},{"content":"If you set the property on the data source field instead of on the control, you guarantee that the field is handled consistently throughout the form.","pos":[16537,16686]},{"content":"This makes upgrades easier.","pos":[16687,16714]},{"pos":[16720,16737],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[16826,16836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[16838,16844]},{"content":"e","pos":[16858,16859]},{"pos":[16867,16885],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[16975,16985],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[16987,16993]},{"content":"e","pos":[17007,17008]},{"pos":[17016,17031],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"content":"Indicates that the field has been successfully validated and modified in the current record.","pos":[17033,17125]},{"pos":[17160,17167],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called from the modified method on controls if the validation methods returned true.","pos":[17169,17268]},{"content":"You can overriding this method to allow for recalculation of other values that are based on the modified values.","pos":[17269,17381]},{"content":"The call to the super() method guarantees that the modifiedField method on the table is called.","pos":[17382,17477]},{"content":"Modified means that the value of the field on the current record has changed, but the value is not written to the database before the record is saved.","pos":[17478,17628]},{"pos":[17634,17653],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[17744,17754],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[17756,17762]},{"content":"e","pos":[17776,17777]},{"pos":[17785,17814],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[17932,17942],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[17944,17960]},{"content":"objectMethodToCall","pos":[17974,17992]},{"content":"overrideObject","pos":[18006,18020]},{"pos":[18028,18042],"content":"Method restore","linkify":"Method restore","nodes":[{"content":"Method restore","pos":[0,14]}]},{"pos":[18075,18088],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[18159,18169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formControl","pos":[18171,18182]},{"content":"filterStr","pos":[18196,18205]},{"pos":[18213,18231],"content":"Method dataChanged","linkify":"Method dataChanged","nodes":[{"content":"Method dataChanged","pos":[0,18]}]},{"pos":[18268,18282],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[18315,18329],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"pos":[18362,18373],"content":"Method find","linkify":"Method find","nodes":[{"content":"Method find","pos":[0,11]}]},{"pos":[18403,18416],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[18483,18493],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[18495,18504]},{"content":"clearPrev","pos":[18518,18527]},{"pos":[18535,18559],"content":"Method performFormLookup","linkify":"Method performFormLookup","nodes":[{"content":"Method performFormLookup","pos":[0,24]}]},{"pos":[18641,18651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[18653,18657]},{"content":"formControl","pos":[18671,18682]},{"pos":[18689,18706],"content":"Class FormDataRow","linkify":"Class FormDataRow","nodes":[{"content":"Class FormDataRow","pos":[0,17]}]},{"pos":[18749,18756],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18762,18770],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[18776,18783],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[18787,18793]},{"content":"Description","pos":[18866,18877]},{"content":"public Object associatedObject(<ph id=\"ph1\">\\[</ph>Object value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean notifyDetached<ph id=\"ph4\">\\]</ph>)","pos":[19059,19135],"source":"public Object associatedObject(\\[Object value\\], \\[boolean notifyDetached\\])"},{"content":"public boolean isDetached()","pos":[19195,19222]},{"content":"public int rowIndex()","pos":[19331,19352]},{"content":"private void new()","pos":[19467,19485]},{"content":"Initializes a new instance of the FormDataRow class.","pos":[19546,19598]},{"content":"public void clearAssociatedObject()","pos":[19603,19638]},{"pos":[19742,19765],"content":"Method associatedObject","linkify":"Method associatedObject","nodes":[{"content":"Method associatedObject","pos":[0,23]}]},{"pos":[19850,19860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[19862,19867]},{"content":"notifyDetached","pos":[19881,19895]},{"pos":[19904,19916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19922,19939],"content":"Method isDetached","linkify":"Method isDetached","nodes":[{"content":"Method isDetached","pos":[0,17]}]},{"pos":[19979,19991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19997,20012],"content":"Method rowIndex","linkify":"Method rowIndex","nodes":[{"content":"Method rowIndex","pos":[0,15]}]},{"pos":[20046,20058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20064,20074],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the FormDataRow class.","pos":[20076,20128]},{"pos":[20158,20186],"content":"Method clearAssociatedObject","linkify":"Method clearAssociatedObject","nodes":[{"content":"Method clearAssociatedObject","pos":[0,28]}]},{"pos":[20232,20252],"content":"Class FormDataSource","linkify":"Class FormDataSource","nodes":[{"content":"Class FormDataSource","pos":[0,20]}]},{"content":"The FormDataSource class contains properties that define the behavior of data sources in forms.","pos":[20301,20396]},{"pos":[20402,20409],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By overriding the methods on the class, you can customize the behavior for the method actions, such as insertion or validation, for a specific form.","pos":[20411,20559]},{"content":"The FormDataSource class is also used to determine how the data source table is related to other data sources (tables) that are displayed in the form.","pos":[20560,20710]},{"content":"To override some of the methods in the FormDataSource class, right-click the Methods node for a form data source, and then click Override Method.","pos":[20711,20856]},{"content":"When you create methods on a form, you should use a <ph id=\"ph1\">\\_</ph>ds identifier to reference the FormDataSource object for a particular class.","pos":[20857,20987],"source":" When you create methods on a form, you should use a \\_ds identifier to reference the FormDataSource object for a particular class."},{"content":"For example, CustTrans<ph id=\"ph1\">\\_</ph>ds references the FormDataSource object for the CustTrans data source on the form, and CustTrans<ph id=\"ph2\">\\_</ph>ds.executeQuery() executes the FormDataSource.executeQuery method on the CustTrans data source.","pos":[20988,21205],"source":" For example, CustTrans\\_ds references the FormDataSource object for the CustTrans data source on the form, and CustTrans\\_ds.executeQuery() executes the FormDataSource.executeQuery method on the CustTrans data source."},{"content":"Several FormDataSource methods return a FormObjectSet object.","pos":[21206,21267]},{"content":"To use the methods that are defined on the FormDataSource method on this object, you must typecast it to a FormDataSource object.","pos":[21268,21397]},{"pos":[21403,21411],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example supplies a custom query for a field instead of the automatically generated query.","pos":[21413,21516]},{"content":"It overrides the performFormLookup method on the field.","pos":[21517,21572]},{"pos":[22162,22169],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[22173,22179]},{"content":"Description","pos":[22302,22313]},{"content":"public int active()","pos":[22745,22764]},{"content":"Retrieves data from joined data sources when a user navigates to a new record and then sets the new record as the current record.","pos":[22874,23003]},{"content":"public boolean allowCheck(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[23031,23075],"source":"public boolean allowCheck(\\[boolean value\\])"},{"content":"public boolean allowCreate(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[23317,23362],"source":"public boolean allowCreate(\\[boolean value\\])"},{"content":"public boolean allowDeferredLoad(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[23603,23654],"source":"public boolean allowDeferredLoad(\\[boolean value\\])"},{"content":"public boolean allowDelete(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[23889,23934],"source":"public boolean allowDelete(\\[boolean value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[24175,24218],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[24304,24371]},{"content":"public boolean allRowsLoaded()","pos":[24461,24491]},{"content":"public boolean anyMarked()","pos":[24747,24773]},{"content":"Checks whether any records in the underlying cache are marked.","pos":[24876,24938]},{"content":"public boolean autoNotify(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[25033,25077],"source":"public boolean autoNotify(\\[boolean value\\])"},{"content":"public boolean autoQuery(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[25319,25362],"source":"public boolean autoQuery(\\[boolean value\\])"},{"content":"public boolean autoSearch(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[25605,25649],"source":"public boolean autoSearch(\\[boolean value\\])"},{"content":"public str bindField(FieldId fieldId)","pos":[25891,25928]},{"content":"public str bindDataMethod(str dataMethodName)","pos":[26177,26222]},{"content":"public boolean cacheAddMethod(str methodName, <ph id=\"ph1\">\\[</ph>boolean updateOnWrite<ph id=\"ph2\">\\]</ph>)","pos":[26463,26535],"source":"public boolean cacheAddMethod(str methodName, \\[boolean updateOnWrite\\])"},{"content":"Registers the specified display or edit method for caching.","pos":[26592,26651]},{"content":"public boolean cacheCalculateMethod(str methodName)","pos":[26749,26800]},{"content":"Calls the specified cached method and updates the value in the cache for the current record.","pos":[26878,26970]},{"content":"public boolean cacheOnlyMode(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[27035,27082],"source":"public boolean cacheOnlyMode(\\[boolean value\\])"},{"content":"public boolean canCreate()","pos":[27321,27347]},{"content":"public boolean canDelete()","pos":[27607,27633]},{"content":"public boolean canEdit()","pos":[27893,27917]},{"content":"public int clientPageSize(<ph id=\"ph1\">\\[</ph>int pageSize<ph id=\"ph2\">\\]</ph>)","pos":[28179,28222],"source":"public int clientPageSize(\\[int pageSize\\])"},{"content":"public str company(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[28465,28498],"source":"public str company(\\[str value\\])"},{"content":"public FieldId counterField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[28751,28797],"source":"public FieldId counterField(\\[FieldId value\\])"},{"content":"public boolean crossCompanyAutoQuery(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[29037,29092],"source":"public boolean crossCompanyAutoQuery(\\[boolean value\\])"},{"content":"public Common cursor(<ph id=\"ph1\">\\[</ph>int rowIndex<ph id=\"ph2\">\\]</ph>)","pos":[29323,29361],"source":"public Common cursor(\\[int rowIndex\\])"},{"content":"Has no functionality in the FormObjectSet class.","pos":[29452,29500]},{"content":"public int defaultMark(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[29609,29646],"source":"public int defaultMark(\\[int value\\])"},{"content":"Sets the default mark value for records in a form, which determines whether records are marked when they have been selected in a grid.","pos":[29738,29872]},{"content":"public boolean delayActive(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[29895,29940],"source":"public boolean delayActive(\\[boolean value\\])"},{"content":"public int extends(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[30181,30218],"source":"public int extends(\\[AnyType value\\])"},{"content":"public boolean findRecord(Common record)","pos":[30467,30507]},{"content":"Finds the specified record in the data source and makes it the current record.","pos":[30596,30674]},{"content":"public boolean findValue(FieldId field, str value)","pos":[30753,30803]},{"content":"Finds the specified value in the data source and makes the record that has that value the current record that uses the FormDataSource.findRecord method.","pos":[30882,31034]},{"content":"public boolean positionToRecord(Common record)","pos":[31039,31085]},{"content":"public boolean positionToRecordByValue(FieldId field, str value)","pos":[31325,31389]},{"content":"public int first()","pos":[31611,31629]},{"content":"Moves focus to the first record in the data source.","pos":[31740,31791]},{"content":"public boolean forceWrite(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[31897,31941],"source":"public boolean forceWrite(\\[boolean value\\])"},{"content":"public FormObject functionObject(str name)","pos":[32183,32225]},{"content":"public FormDataRow getDataRow(<ph id=\"ph1\">\\[</ph>int rowIndex<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean allowFetchAhead<ph id=\"ph4\">\\]</ph>)","pos":[32469,32545],"source":"public FormDataRow getDataRow(\\[int rowIndex\\], \\[boolean allowFetchAhead\\])"},{"content":"public Common getFirst(<ph id=\"ph1\">\\[</ph>int mark<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean fetchAhead<ph id=\"ph4\">\\]</ph>)","pos":[32755,32815],"source":"public Common getFirst(\\[int mark\\], \\[boolean fetchAhead\\])"},{"content":"Retrieves the first record in a data set.","pos":[32884,32925]},{"content":"public Common getNext()","pos":[33041,33064]},{"content":"Returns the next record that meets the criteria that are set up in an earlier call to the FormDataSource.getFirst method.","pos":[33170,33291]},{"content":"public int id()","pos":[33327,33342]},{"content":"Retrieves the ID of the data source.","pos":[33456,33492]},{"content":"public IndexId index(<ph id=\"ph1\">\\[</ph>IndexId value<ph id=\"ph2\">\\]</ph>)","pos":[33613,33652],"source":"public IndexId index(\\[IndexId value\\])"},{"content":"public boolean insertAtEnd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[33899,33944],"source":"public boolean insertAtEnd(\\[boolean value\\])"},{"content":"public boolean insertIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[34185,34232],"source":"public boolean insertIfEmpty(\\[boolean value\\])"},{"content":"public boolean isBaseDataSource()","pos":[34471,34504]},{"content":"public boolean isInheritanceDataSource()","pos":[34757,34797]},{"content":"private boolean isOptionalRecordCreated(<ph id=\"ph1\">\\[</ph>boolean set<ph id=\"ph2\">\\]</ph>, Common record, <ph id=\"ph3\">\\[</ph>boolean value<ph id=\"ph4\">\\]</ph>)","pos":[35043,35133],"source":"private boolean isOptionalRecordCreated(\\[boolean set\\], Common record, \\[boolean value\\])"},{"content":"public boolean isReferenceDataSource()","pos":[35329,35367]},{"content":"public str joinRelation(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[35615,35653],"source":"public str joinRelation(\\[str value\\])"},{"content":"public DictRelation joinRelationAsDictRelation()","pos":[35901,35949]},{"content":"public int joinSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[36187,36227],"source":"public int joinSource(\\[AnyType value\\])"},{"content":"public FormDataSource joinSourceDataSource()","pos":[36473,36517]},{"content":"public int last()","pos":[36759,36776]},{"content":"Moves the mouse pointer to the last record in the data source.","pos":[36888,36950]},{"content":"public boolean leave()","pos":[37045,37067]},{"content":"Provides notification when the mouse pointer is moved to the next record or to another data source.","pos":[37174,37273]},{"content":"public boolean leaveRecord(<ph id=\"ph1\">\\[</ph>boolean forceUpdate<ph id=\"ph2\">\\]</ph>)","pos":[37331,37382],"source":"public boolean leaveRecord(\\[boolean forceUpdate\\])"},{"content":"Provides notification when the focus moves to another record or item in the form.","pos":[37460,37541]},{"content":"public container resolvePartLinks(<ph id=\"ph1\">\\[</ph>str relationName<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int partTableId<ph id=\"ph4\">\\]</ph>)","pos":[37617,37693],"source":"public container resolvePartLinks(\\[str relationName\\], \\[int partTableId\\])"},{"content":"public int linkType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[37903,37937],"source":"public int linkType(\\[int value\\])"},{"content":"public int mark(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[38189,38219],"source":"public int mark(\\[int value\\])"},{"content":"public boolean markAllLoadedRecords(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[38475,38525],"source":"public boolean markAllLoadedRecords(\\[int value\\])"},{"content":"public int markRecord(AnyType record, <ph id=\"ph1\">\\[</ph>int mark<ph id=\"ph2\">\\]</ph>)","pos":[38761,38812],"source":"public int markRecord(AnyType record, \\[int mark\\])"},{"content":"Marks the specified record by using the specified mark value.","pos":[38890,38951]},{"content":"public boolean markRecords(Array markedRecordIds)","pos":[39047,39096]},{"content":"public FormDataSource masterInheritanceDataSource()","pos":[39333,39384]},{"content":"public int maxAccessRight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[39619,39659],"source":"public int maxAccessRight(\\[int value\\])"},{"content":"public int maxRecordsToLoad(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[39905,39947],"source":"public int maxRecordsToLoad(\\[int value\\])"},{"content":"public Int64 maxPagingRowCountValue(<ph id=\"ph1\">\\[</ph>Int64 newValue<ph id=\"ph2\">\\]</ph>)","pos":[40191,40246],"source":"public Int64 maxPagingRowCountValue(\\[Int64 newValue\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[40477,40507],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.","pos":[40606,40742]},{"content":"public int next()","pos":[40764,40781]},{"content":"Moves the focus to the next record in the data source.","pos":[40893,40947]},{"content":"public int nextPage(int pageSize)","pos":[41050,41083]},{"content":"Moves a specified number of records forward in the data source.","pos":[41179,41242]},{"content":"public int numberOfRowsLoaded(<ph id=\"ph1\">\\[</ph>boolean redirectToMasterDS<ph id=\"ph2\">\\]</ph>)","pos":[41336,41397],"source":"public int numberOfRowsLoaded(\\[boolean redirectToMasterDS\\])"},{"content":"public FormDataObject object(FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[41622,41687],"source":"public FormDataObject object(FieldId fieldId, \\[int arrayIndex\\])"},{"content":"Returns an instance of the FormDataObject class that has the specified ID.","pos":[41751,41825]},{"content":"public boolean onlyFetchActive(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[41908,41957],"source":"public boolean onlyFetchActive(\\[boolean value\\])"},{"content":"public int optionalRecordMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[42194,42238],"source":"public int optionalRecordMode(\\[int value\\])"},{"content":"public int pageSize()","pos":[42480,42501]},{"content":"public boolean pagingEnabled()","pos":[42766,42796]},{"content":"public TitleFields parentTitleFields(Common record)","pos":[43052,43103]},{"content":"public int prev()","pos":[43338,43355]},{"content":"Moves the focus to the previous record in the data source.","pos":[43467,43525]},{"content":"public int prevPage(int pageSize)","pos":[43624,43657]},{"content":"Moves the focus back by a specified number of records in the data source.","pos":[43753,43826]},{"content":"public Query query(<ph id=\"ph1\">\\[</ph>Query value<ph id=\"ph2\">\\]</ph>)","pos":[43910,43945],"source":"public Query query(\\[Query value\\])"},{"content":"public QueryBuildDataSource queryBuildDataSource()","pos":[44196,44246]},{"content":"public QueryRun queryRun(<ph id=\"ph1\">\\[</ph>QueryRun value<ph id=\"ph2\">\\]</ph>)","pos":[44482,44526],"source":"public QueryRun queryRun(\\[QueryRun value\\])"},{"content":"public QueryBuildDataSource queryRunQueryBuildDataSource()","pos":[44768,44826]},{"content":"public Array recordsMarked()","pos":[45054,45082]},{"content":"public int startPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[45340,45379],"source":"public int startPosition(\\[int value\\])"},{"content":"public int startRowIndex()","pos":[45626,45652]},{"content":"public TableId table(<ph id=\"ph1\">\\[</ph>TableId value<ph id=\"ph2\">\\]</ph>)","pos":[45912,45951],"source":"public TableId table(\\[TableId value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[46041,46094]},{"content":"public TitleFields titleFields(Common record)","pos":[46198,46243]},{"content":"public int totalNumberOfRows()","pos":[46484,46514]},{"content":"public boolean validateDelete()","pos":[46770,46801]},{"content":"Requests that the user confirm the deletion of a record from the data source.","pos":[46899,46976]},{"content":"public boolean validateWrite()","pos":[47056,47086]},{"content":"Determines whether data is valid and ready to be written.","pos":[47185,47242]},{"content":"public int validTimeStateAutoQuery(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[47342,47391],"source":"public int validTimeStateAutoQuery(\\[int value\\])"},{"content":"public int validTimeStateUpdate(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[47628,47674],"source":"public int validTimeStateUpdate(\\[int value\\])"},{"content":"public void delete()","pos":[47914,47934]},{"content":"Deletes the current record from the data source.","pos":[48043,48091]},{"content":"public void addFieldToSelectionList(FieldId fieldId)","pos":[48200,48252]},{"content":"public void cacheRemoveRecord(<ph id=\"ph1\">\\[</ph>Common record<ph id=\"ph2\">\\]</ph>)","pos":[48486,48534],"source":"public void cacheRemoveRecord(\\[Common record\\])"},{"content":"Removes the specified record from the underlying cache of the data source.","pos":[48615,48689]},{"content":"private void OnValidatedWrite(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[48772,48859],"source":"private void OnValidatedWrite(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"public void reread()","pos":[49058,49078]},{"content":"Rereads the current record from the database.","pos":[49187,49232]},{"content":"public void rereadJoinHierarchy()","pos":[49344,49377]},{"content":"private void OnRefreshed(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[49630,49712],"source":"private void OnRefreshed(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"private void OnValidatedDelete(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[49916,50004],"source":"private void OnValidatedDelete(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"public void markChanged()","pos":[50202,50227]},{"content":"public void setPagingParameters(boolean pagingEnabled, int startRowIndex, int pageSize)","pos":[50488,50575]},{"content":"public void deleted()","pos":[50774,50795]},{"content":"public void print(PrintMedium target)","pos":[51060,51097]},{"content":"Prints the current record.","pos":[51189,51215]},{"content":"private void OnReread(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[51346,51425],"source":"private void OnReread(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"public void research(<ph id=\"ph1\">\\[</ph>boolean retainPosition<ph id=\"ph2\">\\]</ph>)","pos":[51632,51680],"source":"public void research(\\[boolean retainPosition\\])"},{"content":"Is overridden by the FormDataSource.research method.","pos":[51761,51813]},{"content":"public void createTypes(Map concreteTypesToCreate, <ph id=\"ph1\">\\[</ph>boolean append<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean implicitCreate<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>boolean explicitCreate<ph id=\"ph6\">\\]</ph>)","pos":[51918,52044],"source":"public void createTypes(Map concreteTypesToCreate, \\[boolean append\\], \\[boolean implicitCreate\\], \\[boolean explicitCreate\\])"},{"content":"private void OnCreated(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[52204,52284],"source":"private void OnCreated(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"private void OnQueryExecuted(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[52490,52576],"source":"private void OnQueryExecuted(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"public void written()","pos":[52776,52797]},{"content":"public void filter(FieldId field, str value)","pos":[53062,53106]},{"content":"Filters records in the data source.","pos":[53191,53226]},{"content":"public void refresh()","pos":[53348,53369]},{"content":"Updates the form by updating the view of all the records in the data source.","pos":[53477,53553]},{"content":"public void write()","pos":[53634,53653]},{"content":"Calls the FormDataSource.validateWrite method and manages the database write operation.","pos":[53763,53850]},{"content":"public void executeQuery()","pos":[53920,53946]},{"content":"Executes the data source query and displays the records that are retrieved.","pos":[54049,54124]},{"content":"public void setRecord(Common record)","pos":[54206,54242]},{"content":"public void refreshEx(<ph id=\"ph1\">\\[</ph>AnyType pos<ph id=\"ph2\">\\]</ph>)","pos":[54492,54530],"source":"public void refreshEx(\\[AnyType pos\\])"},{"content":"Updates the view of the specified records.","pos":[54621,54663]},{"content":"public void setCurrent()","pos":[54778,54802]},{"content":"private void OnValidatingDelete(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[55064,55153],"source":"private void OnValidatingDelete(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"public void writing()","pos":[55350,55371]},{"content":"private void OnWritten(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[55636,55716],"source":"private void OnWritten(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"public void clearDisplayOption(Common record)","pos":[55922,55967]},{"content":"Clears display options that were previously specified for a record and then redraws the record.","pos":[56051,56146]},{"content":"private void OnMarkChanged(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[56208,56292],"source":"private void OnMarkChanged(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"private void OnLeftRecord(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[56494,56577],"source":"private void OnLeftRecord(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"private void OnDeleted(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[56780,56860],"source":"private void OnDeleted(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"public void removeFilter()","pos":[57066,57092]},{"content":"Resets the query for the data source.","pos":[57195,57232]},{"content":"private void OnInitialized(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[57352,57436],"source":"private void OnInitialized(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"private void OnPostLinkActive(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[57638,57725],"source":"private void OnPostLinkActive(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"private void OnSelectionChanged(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[57924,58013],"source":"private void OnSelectionChanged(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"public void deleting()","pos":[58210,58232]},{"content":"public void observe()","pos":[58496,58517]},{"content":"private void OnWriting(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[58782,58862],"source":"private void OnWriting(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"private void OnActivated(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[59068,59150],"source":"private void OnActivated(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"public void removeFieldFromSelectionList(FieldId fieldId)","pos":[59354,59411]},{"content":"private void OnCreating(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[59640,59721],"source":"private void OnCreating(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"public void rereadReferenceDataSources()","pos":[59926,59966]},{"content":"private void OnValidatingWrite(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[60212,60300],"source":"private void OnValidatingWrite(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"public void prompt()","pos":[60498,60518]},{"content":"Activates the standard form, SysQueryForm, that is used to limit a query range.","pos":[60627,60706]},{"content":"private void OnQueryExecuting(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[60784,60871],"source":"private void OnQueryExecuting(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"private void OnInitValue(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[61070,61152],"source":"private void OnInitValue(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"public void clearReferenceData(FieldId fieldId)","pos":[61356,61403]},{"content":"public void cursorNotify(int event)","pos":[61642,61677]},{"content":"Notifies the application about a cursor event.","pos":[61771,61817]},{"content":"public void displayOption(Common record, FormRowDisplayOption options)","pos":[61928,61998]},{"content":"Sets the text color and the background color for a record in the data source.","pos":[62057,62134]},{"content":"public void create(<ph id=\"ph1\">\\[</ph>boolean append<ph id=\"ph2\">\\]</ph>)","pos":[62214,62252],"source":"public void create(\\[boolean append\\])"},{"content":"Creates a new record in the data source.","pos":[62343,62383]},{"content":"public void init()","pos":[62500,62518]},{"content":"Creates a data source query that is based on the data source properties.","pos":[62629,62701]},{"content":"public void linkActive()","pos":[62786,62810]},{"content":"Calls the FormDataSource.exeuteQuery method on data sources that are linked to the current data source.","pos":[62915,63018]},{"content":"public void selectionChanged()","pos":[63072,63102]},{"content":"private void OnDeleting(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[63358,63439],"source":"private void OnDeleting(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"content":"public void addReferenceFieldToSelectionList(FieldId fieldId, str referenceFieldGroupName)","pos":[63644,63734]},{"content":"public void initValue()","pos":[63930,63953]},{"content":"Initializes field values in a new record.","pos":[64059,64100]},{"content":"public void deleteMarked()","pos":[64216,64242]},{"content":"Deletes all marked (selected) records from a data source.","pos":[64345,64402]},{"content":"private void OnLeavingRecord(<ph id=\"ph1\">\\[</ph>FormDataSource sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormDataSourceEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[64502,64588],"source":"private void OnLeavingRecord(\\[FormDataSource sender\\], \\[FormDataSourceEventArgs e\\])"},{"pos":[64791,64804],"content":"Method active","linkify":"Method active","nodes":[{"content":"Method active","pos":[0,13]}]},{"content":"Retrieves data from joined data sources when a user navigates to a new record and then sets the new record as the current record.","pos":[64806,64935]},{"pos":[64967,64979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns 1.","pos":[64981,64998]},{"pos":[65005,65012],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The active method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking active.","pos":[65014,65184]},{"pos":[65190,65207],"content":"Method allowCheck","linkify":"Method allowCheck","nodes":[{"content":"Method allowCheck","pos":[0,17]}]},{"pos":[65262,65272],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65274,65279]},{"pos":[65288,65300],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65306,65324],"content":"Method allowCreate","linkify":"Method allowCreate","nodes":[{"content":"Method allowCreate","pos":[0,18]}]},{"pos":[65380,65390],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65392,65397]},{"pos":[65406,65418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65424,65448],"content":"Method allowDeferredLoad","linkify":"Method allowDeferredLoad","nodes":[{"content":"Method allowDeferredLoad","pos":[0,24]}]},{"pos":[65510,65520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65522,65527]},{"pos":[65536,65548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65554,65572],"content":"Method allowDelete","linkify":"Method allowDelete","nodes":[{"content":"Method allowDelete","pos":[0,18]}]},{"pos":[65628,65638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65640,65645]},{"pos":[65654,65666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65672,65688],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[65690,65757]},{"pos":[65811,65821],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65823,65828]},{"pos":[65837,65849],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[65851,65903]},{"pos":[65910,65917],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[65919,66041]},{"pos":[66047,66067],"content":"Method allRowsLoaded","linkify":"Method allRowsLoaded","nodes":[{"content":"Method allRowsLoaded","pos":[0,20]}]},{"pos":[66110,66122],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66128,66144],"content":"Method anyMarked","linkify":"Method anyMarked","nodes":[{"content":"Method anyMarked","pos":[0,16]}]},{"content":"Checks whether any records in the underlying cache are marked.","pos":[66146,66208]},{"pos":[66247,66259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if any records are marked; otherwise, false.","pos":[66261,66310]},{"pos":[66317,66324],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Records in a data source can be marked (selected) for actions such as deletion or copying by using the FormDataSource.markedRecord method.","pos":[66326,66464]},{"pos":[66470,66487],"content":"Method autoNotify","linkify":"Method autoNotify","nodes":[{"content":"Method autoNotify","pos":[0,17]}]},{"pos":[66542,66552],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66554,66559]},{"pos":[66568,66580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66586,66602],"content":"Method autoQuery","linkify":"Method autoQuery","nodes":[{"content":"Method autoQuery","pos":[0,16]}]},{"pos":[66656,66666],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66668,66673]},{"pos":[66682,66694],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66700,66717],"content":"Method autoSearch","linkify":"Method autoSearch","nodes":[{"content":"Method autoSearch","pos":[0,17]}]},{"pos":[66772,66782],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66784,66789]},{"pos":[66798,66810],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66816,66832],"content":"Method bindField","linkify":"Method bindField","nodes":[{"content":"Method bindField","pos":[0,16]}]},{"pos":[66882,66892],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[66894,66901]},{"pos":[66910,66922],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66928,66949],"content":"Method bindDataMethod","linkify":"Method bindDataMethod","nodes":[{"content":"Method bindDataMethod","pos":[0,21]}]},{"pos":[67007,67017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataMethodName","pos":[67019,67033]},{"pos":[67042,67054],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67060,67081],"content":"Method cacheAddMethod","linkify":"Method cacheAddMethod","nodes":[{"content":"Method cacheAddMethod","pos":[0,21]}]},{"content":"Registers the specified display or edit method for caching.","pos":[67083,67142]},{"pos":[67225,67235],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodName","pos":[67237,67247]},{"content":"A Boolean value that determines whether the cached value is updated automatically when the record is written; optional.","pos":[67250,67369]},{"content":"updateOnWrite","pos":[67381,67394]},{"content":"A Boolean value that determines whether the cached value is updated automatically when the record is written; optional.","pos":[67397,67516]},{"pos":[67523,67535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the method was registered successfully; otherwise, false.","pos":[67537,67602]},{"pos":[67609,67616],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Cached methods perform calculations on fetched data, and then the calculated values are passed to the client together with the data.","pos":[67618,67750]},{"content":"The calculated values are updated on reread.","pos":[67751,67795]},{"content":"By default, the values are also update on write and create.","pos":[67796,67855]},{"content":"This method should be called after initialization of the data source, but before any data is fetched.","pos":[67856,67957]},{"content":"Therefore, the call to this method should be put after the call to the super method in the init method.","pos":[67958,68061]},{"content":"The updateOnWrite parameter also determines whether the display or edit method value should be calculated and cached when a new record is created.","pos":[68062,68208]},{"content":"To manually update the cached value for the display or edit method, call the FormDataSource.cacheCalculateMethod method.","pos":[68209,68329]},{"content":"Only table methods that have the display or edit keyword can be cached.","pos":[68330,68401]},{"content":"Methods that are written on the form or the form data source cannot be cached.","pos":[68402,68480]},{"content":"Do not register display or edit methods that are not used on the form.","pos":[68481,68551]},{"content":"Those methods are calculated for each record, even though the values are never shown.","pos":[68552,68637]},{"pos":[68644,68652],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example registers two methods for caching on the VendTransOpen table.","pos":[68654,68737]},{"pos":[68985,69012],"content":"Method cacheCalculateMethod","linkify":"Method cacheCalculateMethod","nodes":[{"content":"Method cacheCalculateMethod","pos":[0,27]}]},{"content":"Calls the specified cached method and updates the value in the cache for the current record.","pos":[69014,69106]},{"pos":[69170,69180],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodName","pos":[69182,69192]},{"content":"The name of the table method to call.","pos":[69195,69232]},{"pos":[69239,69251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the value has been updated; otherwise, false.","pos":[69253,69306]},{"pos":[69313,69320],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The cached value is updated only if the method name that was supplied was previously registered as a cached method by using the FormDataSource.cacheAddMethod method.","pos":[69322,69487]},{"content":"The cacheCalculate method is particularly useful if you want to update cached values only when certain conditions are met.","pos":[69488,69610]},{"content":"In this case, set the updateOnWrite parameter in the call to the FormDataSource.cacheAddMethod method to false, and then manually update the cache, such as by using the write method on the data source.","pos":[69611,69812]},{"pos":[69819,69827],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example recalculates cached values by using the nextCashDiscDate method and the nextCashDiscAmount method, both of the VendTransOpen table.","pos":[69829,69982]},{"pos":[70269,70289],"content":"Method cacheOnlyMode","linkify":"Method cacheOnlyMode","nodes":[{"content":"Method cacheOnlyMode","pos":[0,20]}]},{"pos":[70347,70357],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70359,70364]},{"pos":[70373,70385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70391,70407],"content":"Method canCreate","linkify":"Method canCreate","nodes":[{"content":"Method canCreate","pos":[0,16]}]},{"pos":[70446,70458],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70464,70480],"content":"Method canDelete","linkify":"Method canDelete","nodes":[{"content":"Method canDelete","pos":[0,16]}]},{"pos":[70519,70531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70537,70551],"content":"Method canEdit","linkify":"Method canEdit","nodes":[{"content":"Method canEdit","pos":[0,14]}]},{"pos":[70588,70600],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70606,70627],"content":"Method clientPageSize","linkify":"Method clientPageSize","nodes":[{"content":"Method clientPageSize","pos":[0,21]}]},{"pos":[70681,70691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pageSize","pos":[70693,70701]},{"pos":[70710,70722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70728,70742],"content":"Method company","linkify":"Method company","nodes":[{"content":"Method company","pos":[0,14]}]},{"pos":[70786,70796],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70798,70803]},{"pos":[70812,70824],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70830,70849],"content":"Method counterField","linkify":"Method counterField","nodes":[{"content":"Method counterField","pos":[0,19]}]},{"pos":[70906,70916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70918,70923]},{"pos":[70932,70944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70950,70978],"content":"Method crossCompanyAutoQuery","linkify":"Method crossCompanyAutoQuery","nodes":[{"content":"Method crossCompanyAutoQuery","pos":[0,28]}]},{"pos":[71044,71054],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71056,71061]},{"pos":[71070,71082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71088,71101],"content":"Method cursor","linkify":"Method cursor","nodes":[{"content":"Method cursor","pos":[0,13]}]},{"content":"Has no functionality in the FormObjectSet class.","pos":[71103,71151]},{"pos":[71200,71210],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"rowIndex","pos":[71212,71220]},{"pos":[71229,71241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71248,71255],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is overridden by the FormDataSource.cursor method, which returns the currently active record in the table that is referenced by the data source.","pos":[71257,71413]},{"pos":[71419,71437],"content":"Method defaultMark","linkify":"Method defaultMark","nodes":[{"content":"Method defaultMark","pos":[0,18]}]},{"content":"Sets the default mark value for records in a form, which determines whether records are marked when they have been selected in a grid.","pos":[71439,71573]},{"pos":[71621,71631],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71633,71638]},{"content":"The default mark value for records in the form.","pos":[71641,71688]},{"content":"The standard default mark value for records is 1, but this value can be overridden by setting the value parameter.","pos":[71689,71803]},{"content":"A value other than 0 (zero) causes the record to be displayed as marked in grids in the form when they have been selected.","pos":[71804,71926]},{"pos":[71933,71945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The default mark value for records in the form.","pos":[71947,71994]},{"pos":[72001,72008],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is executed when a user clicks the top-left corner in a grid control to select all the records in the grid.","pos":[72010,72129]},{"content":"The defaultMark method can be overridden on a form data source.","pos":[72130,72193]},{"content":"Right-click the Methods node under the data source, and then select Override Method <ph id=\"ph1\">&amp;gt;</ph> defaultMark.","pos":[72194,72295],"source":" Right-click the Methods node under the data source, and then select Override Method &gt; defaultMark."},{"pos":[72301,72319],"content":"Method delayActive","linkify":"Method delayActive","nodes":[{"content":"Method delayActive","pos":[0,18]}]},{"pos":[72375,72385],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72387,72392]},{"pos":[72401,72413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72419,72433],"content":"Method extends","linkify":"Method extends","nodes":[{"content":"Method extends","pos":[0,14]}]},{"pos":[72481,72491],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72493,72498]},{"pos":[72507,72519],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72525,72542],"content":"Method findRecord","linkify":"Method findRecord","nodes":[{"content":"Method findRecord","pos":[0,17]}]},{"content":"Finds the specified record in the data source and makes it the current record.","pos":[72544,72622]},{"pos":[72675,72685],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[72687,72693]},{"content":"The record to find.","pos":[72696,72715]},{"pos":[72722,72734],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the record was found; otherwise, false.","pos":[72736,72783]},{"pos":[72790,72797],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is activated when the FormDataSource.findValue method is called.","pos":[72799,72875]},{"content":"The findRecord method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking findRecord.","pos":[72876,73054]},{"pos":[73060,73076],"content":"Method findValue","linkify":"Method findValue","nodes":[{"content":"Method findValue","pos":[0,16]}]},{"content":"Finds the specified value in the data source and makes the record that has that value the current record that uses the FormDataSource.findRecord method.","pos":[73078,73230]},{"pos":[73293,73303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[73305,73310]},{"content":"The value to find.","pos":[73313,73331]},{"content":"value","pos":[73343,73348]},{"content":"The value to find.","pos":[73351,73369]},{"pos":[73376,73388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the value is found; otherwise, false.","pos":[73390,73435]},{"pos":[73442,73449],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a user clicks FindValue in the shortcut menu on a form control.","pos":[73451,73541]},{"content":"The findValue method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking findValue.","pos":[73542,73718]},{"pos":[73725,73733],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example stores the ID of the current record before it tries to modify data.","pos":[73735,73824]},{"content":"If the update fails, the data source is positioned on the original record.","pos":[73825,73899]},{"pos":[74866,74889],"content":"Method positionToRecord","linkify":"Method positionToRecord","nodes":[{"content":"Method positionToRecord","pos":[0,23]}]},{"pos":[74948,74958],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[74960,74966]},{"pos":[74975,74987],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74993,75023],"content":"Method positionToRecordByValue","linkify":"Method positionToRecordByValue","nodes":[{"content":"Method positionToRecordByValue","pos":[0,30]}]},{"pos":[75100,75110],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[75112,75117]},{"content":"value","pos":[75131,75136]},{"pos":[75145,75157],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75163,75175],"content":"Method first","linkify":"Method first","nodes":[{"content":"Method first","pos":[0,12]}]},{"content":"Moves focus to the first record in the data source.","pos":[75177,75228]},{"pos":[75259,75271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A non-zero value if focus is successfully moved to the first record.","pos":[75273,75341]},{"pos":[75348,75355],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a user selects the first record in a form by pressing CTRL+HOME.","pos":[75357,75448]},{"content":"The first method can be overridden on a form data source.","pos":[75449,75506]},{"content":"Right-click the Methods node under the data source, point to Override Method, and then click first.","pos":[75507,75606]},{"pos":[75613,75621],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example overrides the first method for the InventTransPostingFinancial data source on the InventTrans form and returns the last record in another data source that is used on the form.","pos":[75623,75820]},{"pos":[75897,75914],"content":"Method forceWrite","linkify":"Method forceWrite","nodes":[{"content":"Method forceWrite","pos":[0,17]}]},{"pos":[75969,75979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75981,75986]},{"pos":[75995,76007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76013,76034],"content":"Method functionObject","linkify":"Method functionObject","nodes":[{"content":"Method functionObject","pos":[0,21]}]},{"pos":[76089,76099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[76101,76105]},{"pos":[76114,76126],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76132,76149],"content":"Method getDataRow","linkify":"Method getDataRow","nodes":[{"content":"Method getDataRow","pos":[0,17]}]},{"pos":[76234,76244],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"rowIndex","pos":[76246,76254]},{"content":"allowFetchAhead","pos":[76268,76283]},{"pos":[76292,76304],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76310,76325],"content":"Method getFirst","linkify":"Method getFirst","nodes":[{"content":"Method getFirst","pos":[0,15]}]},{"content":"Retrieves the first record in a data set.","pos":[76327,76368]},{"pos":[76437,76447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mark","pos":[76449,76453]},{"content":"A Boolean value; optional.","pos":[76456,76482]},{"content":"The default value is true.","pos":[76483,76509]},{"content":"fetchAhead","pos":[76521,76531]},{"content":"A Boolean value; optional.","pos":[76534,76560]},{"content":"The default value is true.","pos":[76561,76587]},{"pos":[76594,76606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The first record in the data set.","pos":[76608,76641]},{"pos":[76648,76655],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the mark parameter is not 0 (zero), the first record that is marked with the specified value is returned, and subsequent calls to the FormDataSource.getNext method return marked records.","pos":[76657,76846]},{"content":"If the fetchAhead parameter is set to false, only cached records are returned.","pos":[76847,76925]},{"content":"If it is set to true, additional records are found and added to the cache, but the operation can become very time-consuming when it is performed on a large record set.","pos":[76926,77093]},{"content":"When records in a grid are multiselected, the records are marked with the value 1.","pos":[77094,77176]},{"content":"The following examples illustrate how to retrieve a marked or unmarked record: // Get first recordformDataSource.getFirst();// Get first record marked with 2formDataSource.getFirst(2); // Get first cached record marked with 1formDataSource.getFirst(1, false);","pos":[77177,77436]},{"pos":[77443,77451],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example determines whether two records are selected in a form.","pos":[77453,77529]},{"pos":[77945,77959],"content":"Method getNext","linkify":"Method getNext","nodes":[{"content":"Method getNext","pos":[0,14]}]},{"content":"Returns the next record that meets the criteria that are set up in an earlier call to the FormDataSource.getFirst method.","pos":[77961,78082]},{"pos":[78118,78130],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The next record in the dataset.","pos":[78132,78163]},{"pos":[78170,78177],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Depending on the initialization that is performed in the call to the FormDataSource.getFirst method, the getNext method might return only records that have a particular mark value, and it might return records from the cache.","pos":[78179,78403]},{"pos":[78410,78418],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example determines whether two records are selected in a form.","pos":[78420,78496]},{"pos":[78912,78921],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the data source.","pos":[78923,78959]},{"pos":[78987,78999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the data source.","pos":[79001,79027]},{"pos":[79034,79042],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example converts form data sources to their data source IDs.","pos":[79044,79118]},{"pos":[79480,79492],"content":"Method index","linkify":"Method index","nodes":[{"content":"Method index","pos":[0,12]}]},{"pos":[79542,79552],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79554,79559]},{"pos":[79568,79580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79586,79604],"content":"Method insertAtEnd","linkify":"Method insertAtEnd","nodes":[{"content":"Method insertAtEnd","pos":[0,18]}]},{"pos":[79660,79670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79672,79677]},{"pos":[79686,79698],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79704,79724],"content":"Method insertIfEmpty","linkify":"Method insertIfEmpty","nodes":[{"content":"Method insertIfEmpty","pos":[0,20]}]},{"pos":[79782,79792],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79794,79799]},{"pos":[79808,79820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79826,79849],"content":"Method isBaseDataSource","linkify":"Method isBaseDataSource","nodes":[{"content":"Method isBaseDataSource","pos":[0,23]}]},{"pos":[79895,79907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[79913,79943],"content":"Method isInheritanceDataSource","linkify":"Method isInheritanceDataSource","nodes":[{"content":"Method isInheritanceDataSource","pos":[0,30]}]},{"pos":[79996,80008],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80014,80044],"content":"Method isOptionalRecordCreated","linkify":"Method isOptionalRecordCreated","nodes":[{"content":"Method isOptionalRecordCreated","pos":[0,30]}]},{"pos":[80143,80153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"set","pos":[80155,80158]},{"content":"record","pos":[80172,80178]},{"content":"value","pos":[80192,80197]},{"pos":[80206,80218],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80224,80252],"content":"Method isReferenceDataSource","linkify":"Method isReferenceDataSource","nodes":[{"content":"Method isReferenceDataSource","pos":[0,28]}]},{"pos":[80303,80315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80321,80340],"content":"Method joinRelation","linkify":"Method joinRelation","nodes":[{"content":"Method joinRelation","pos":[0,19]}]},{"pos":[80389,80399],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80401,80406]},{"pos":[80415,80427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80433,80466],"content":"Method joinRelationAsDictRelation","linkify":"Method joinRelationAsDictRelation","nodes":[{"content":"Method joinRelationAsDictRelation","pos":[0,33]}]},{"pos":[80527,80539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80545,80562],"content":"Method joinSource","linkify":"Method joinSource","nodes":[{"content":"Method joinSource","pos":[0,17]}]},{"pos":[80613,80623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80625,80630]},{"pos":[80639,80651],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80657,80684],"content":"Method joinSourceDataSource","linkify":"Method joinSourceDataSource","nodes":[{"content":"Method joinSourceDataSource","pos":[0,27]}]},{"pos":[80741,80753],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80759,80770],"content":"Method last","linkify":"Method last","nodes":[{"content":"Method last","pos":[0,11]}]},{"content":"Moves the mouse pointer to the last record in the data source.","pos":[80772,80834]},{"pos":[80864,80876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A non-zero value if the mouse pointer is successfully moved to the last record.","pos":[80878,80957]},{"pos":[80964,80971],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The last method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking last.","pos":[80973,81139]},{"pos":[81146,81154],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example overrides the last method for the InventDim data source on the WMSOrderTransport form and returns the last record in the other data source that is used on the form.","pos":[81156,81342]},{"pos":[81414,81426],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"content":"Provides notification when the mouse pointer is moved to the next record or to another data source.","pos":[81428,81527]},{"pos":[81562,81574],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns true, unless the method is overridden.","pos":[81576,81629]},{"pos":[81636,81643],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is often overridden to implement record-level input validation.","pos":[81645,81720]},{"content":"The leave method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking leave.","pos":[81721,81889]},{"pos":[81896,81904],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example overrides the leave method to perform data validation before the current record is left.","pos":[81906,82016]},{"content":"The method returns false if the data is invalid.","pos":[82017,82065]},{"pos":[82284,82302],"content":"Method leaveRecord","linkify":"Method leaveRecord","nodes":[{"content":"Method leaveRecord","pos":[0,18]}]},{"content":"Provides notification when the focus moves to another record or item in the form.","pos":[82304,82385]},{"pos":[82447,82457],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"forceUpdate","pos":[82459,82470]},{"pos":[82479,82491],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the operation succeeds; otherwise, false.","pos":[82493,82542]},{"pos":[82549,82556],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might fail and return false if changes could not be validated or written.","pos":[82558,82642]},{"content":"It is recommended that you not override this method.","pos":[82643,82695]},{"content":"Instead, override the FormDataSource.leave method.","pos":[82696,82746]},{"content":"If you do override the leaveRecord method, you must call the super method to make sure that the kernel implementation of the method is executed.","pos":[82747,82891]},{"pos":[82897,82920],"content":"Method resolvePartLinks","linkify":"Method resolvePartLinks","nodes":[{"content":"Method resolvePartLinks","pos":[0,23]}]},{"pos":[83005,83015],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"relationName","pos":[83017,83029]},{"content":"partTableId","pos":[83043,83054]},{"pos":[83063,83075],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83081,83096],"content":"Method linkType","linkify":"Method linkType","nodes":[{"content":"Method linkType","pos":[0,15]}]},{"pos":[83141,83151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83153,83158]},{"pos":[83167,83179],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83185,83196],"content":"Method mark","linkify":"Method mark","nodes":[{"content":"Method mark","pos":[0,11]}]},{"pos":[83237,83247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83249,83254]},{"pos":[83263,83275],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83281,83308],"content":"Method markAllLoadedRecords","linkify":"Method markAllLoadedRecords","nodes":[{"content":"Method markAllLoadedRecords","pos":[0,27]}]},{"pos":[83369,83379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83381,83386]},{"pos":[83395,83407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83413,83430],"content":"Method markRecord","linkify":"Method markRecord","nodes":[{"content":"Method markRecord","pos":[0,17]}]},{"content":"Marks the specified record by using the specified mark value.","pos":[83432,83493]},{"pos":[83555,83565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[83567,83573]},{"content":"The value that is associated with a marked record; optional.","pos":[83576,83636]},{"content":"A value other than 0 (zero) causes the record to be displayed as marked in grids in the form.","pos":[83637,83730]},{"content":"mark","pos":[83742,83746]},{"content":"The value that is associated with a marked record; optional.","pos":[83749,83809]},{"content":"A value other than 0 (zero) causes the record to be displayed as marked in grids in the form.","pos":[83810,83903]},{"pos":[83910,83922],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A non-zero integer if the record has been marked.","pos":[83924,83973]},{"pos":[83980,83987],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this method instead of the FormDataSource.mark method if the record has been found by using a select statement or a method call outside the form.","pos":[83989,84138]},{"pos":[84144,84162],"content":"Method markRecords","linkify":"Method markRecords","nodes":[{"content":"Method markRecords","pos":[0,18]}]},{"pos":[84224,84234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"markedRecordIds","pos":[84236,84251]},{"pos":[84260,84272],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84278,84312],"content":"Method masterInheritanceDataSource","linkify":"Method masterInheritanceDataSource","nodes":[{"content":"Method masterInheritanceDataSource","pos":[0,34]}]},{"pos":[84376,84388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84394,84415],"content":"Method maxAccessRight","linkify":"Method maxAccessRight","nodes":[{"content":"Method maxAccessRight","pos":[0,21]}]},{"pos":[84466,84476],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84478,84483]},{"pos":[84492,84504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84510,84533],"content":"Method maxRecordsToLoad","linkify":"Method maxRecordsToLoad","nodes":[{"content":"Method maxRecordsToLoad","pos":[0,23]}]},{"pos":[84586,84596],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84598,84603]},{"pos":[84612,84624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84630,84659],"content":"Method maxPagingRowCountValue","linkify":"Method maxPagingRowCountValue","nodes":[{"content":"Method maxPagingRowCountValue","pos":[0,29]}]},{"pos":[84725,84735],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[84737,84745]},{"pos":[84754,84766],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84772,84783],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.","pos":[84785,84921]},{"pos":[84962,84972],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84974,84979]},{"content":"The name for the data source; optional.","pos":[84982,85021]},{"pos":[85028,85040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[85042,85106]},{"pos":[85113,85120],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[85122,85216]},{"content":"It must start with a letter.","pos":[85222,85250]},{"content":"It cannot exceed 250 characters.","pos":[85255,85287]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[85292,85346],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[85351,85391]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[85396,85506]},{"pos":[85513,85521],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a QueryBuildDataSource object for a form data source.","pos":[85523,85606]},{"content":"The FormDataSource.name method is used to specify the name of the QueryBuildDataSource object.","pos":[85607,85701]},{"pos":[86250,86261],"content":"Method next","linkify":"Method next","nodes":[{"content":"Method next","pos":[0,11]}]},{"content":"Moves the focus to the next record in the data source.","pos":[86263,86317]},{"pos":[86347,86359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A non-zero integer if the operation succeeds.","pos":[86361,86406]},{"pos":[86413,86420],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The next method can be overridden on a form data source.","pos":[86422,86478]},{"content":"Right-click the Methods node under the data source, point to Override Method, and then click next.","pos":[86479,86577]},{"pos":[86584,86592],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example overrides the next method on a data source to return the next record from a different data source.","pos":[86594,86714]},{"pos":[86789,86804],"content":"Method nextPage","linkify":"Method nextPage","nodes":[{"content":"Method nextPage","pos":[0,15]}]},{"content":"Moves a specified number of records forward in the data source.","pos":[86806,86869]},{"pos":[86915,86925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pageSize","pos":[86927,86935]},{"content":"The number of records to skip.","pos":[86938,86968]},{"pos":[86975,86987],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A non-zero integer if the operation succeeds.","pos":[86989,87034]},{"pos":[87040,87065],"content":"Method numberOfRowsLoaded","linkify":"Method numberOfRowsLoaded","nodes":[{"content":"Method numberOfRowsLoaded","pos":[0,25]}]},{"pos":[87137,87147],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"redirectToMasterDS","pos":[87149,87167]},{"pos":[87176,87188],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87194,87207],"content":"Method object","linkify":"Method object","nodes":[{"content":"Method object","pos":[0,13]}]},{"content":"Returns an instance of the FormDataObject class that has the specified ID.","pos":[87209,87283]},{"pos":[87359,87369],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[87371,87378]},{"content":"arrayIndex","pos":[87392,87402]},{"pos":[87411,87423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An instance of the FormDataObject class that has the ID that is specified in the objectId parameter.","pos":[87425,87525]},{"pos":[87532,87540],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a FormDataObject object for the RepositoryFolder field in the SysVersionControlParameters table, and then sets the AllowEdit property for the field to true.","pos":[87542,87728]},{"pos":[88036,88058],"content":"Method onlyFetchActive","linkify":"Method onlyFetchActive","nodes":[{"content":"Method onlyFetchActive","pos":[0,22]}]},{"pos":[88118,88128],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88130,88135]},{"pos":[88144,88156],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88162,88187],"content":"Method optionalRecordMode","linkify":"Method optionalRecordMode","nodes":[{"content":"Method optionalRecordMode","pos":[0,25]}]},{"pos":[88242,88252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88254,88259]},{"pos":[88268,88280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88286,88301],"content":"Method pageSize","linkify":"Method pageSize","nodes":[{"content":"Method pageSize","pos":[0,15]}]},{"pos":[88335,88347],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88353,88373],"content":"Method pagingEnabled","linkify":"Method pagingEnabled","nodes":[{"content":"Method pagingEnabled","pos":[0,20]}]},{"pos":[88416,88428],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88434,88458],"content":"Method parentTitleFields","linkify":"Method parentTitleFields","nodes":[{"content":"Method parentTitleFields","pos":[0,24]}]},{"pos":[88522,88532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[88534,88540]},{"pos":[88549,88561],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88567,88578],"content":"Method prev","linkify":"Method prev","nodes":[{"content":"Method prev","pos":[0,11]}]},{"content":"Moves the focus to the previous record in the data source.","pos":[88580,88638]},{"pos":[88668,88680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A non-zero integer if the operation succeeds.","pos":[88682,88727]},{"pos":[88734,88741],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method can be used to iterate through the records of a data source in reverse order.","pos":[88743,88832]},{"content":"The prev method can be overridden on a form data source.","pos":[88833,88889]},{"content":"Right-click the Methods node under the data source, point to Override Method, and then click prev.","pos":[88890,88988]},{"pos":[88995,89003],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example overrides the prev method on a data source to return the previous record from a different data source.","pos":[89005,89129]},{"pos":[89204,89219],"content":"Method prevPage","linkify":"Method prevPage","nodes":[{"content":"Method prevPage","pos":[0,15]}]},{"content":"Moves the focus back by a specified number of records in the data source.","pos":[89221,89294]},{"pos":[89340,89350],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pageSize","pos":[89352,89360]},{"content":"The number of records to move back by.","pos":[89363,89401]},{"pos":[89408,89420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A non-zero integer if the operation succeeds.","pos":[89422,89467]},{"pos":[89473,89485],"content":"Method query","linkify":"Method query","nodes":[{"content":"Method query","pos":[0,12]}]},{"pos":[89531,89541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89543,89548]},{"pos":[89557,89569],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89575,89602],"content":"Method queryBuildDataSource","linkify":"Method queryBuildDataSource","nodes":[{"content":"Method queryBuildDataSource","pos":[0,27]}]},{"pos":[89665,89677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89683,89698],"content":"Method queryRun","linkify":"Method queryRun","nodes":[{"content":"Method queryRun","pos":[0,15]}]},{"pos":[89753,89763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89765,89770]},{"pos":[89779,89791],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89797,89832],"content":"Method queryRunQueryBuildDataSource","linkify":"Method queryRunQueryBuildDataSource","nodes":[{"content":"Method queryRunQueryBuildDataSource","pos":[0,35]}]},{"pos":[89903,89915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89921,89941],"content":"Method recordsMarked","linkify":"Method recordsMarked","nodes":[{"content":"Method recordsMarked","pos":[0,20]}]},{"pos":[89982,89994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90000,90020],"content":"Method startPosition","linkify":"Method startPosition","nodes":[{"content":"Method startPosition","pos":[0,20]}]},{"pos":[90070,90080],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90082,90087]},{"pos":[90096,90108],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90114,90134],"content":"Method startRowIndex","linkify":"Method startRowIndex","nodes":[{"content":"Method startRowIndex","pos":[0,20]}]},{"pos":[90173,90185],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90191,90203],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[90205,90258]},{"pos":[90308,90318],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90320,90325]},{"pos":[90334,90346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[90348,90409]},{"pos":[90415,90433],"content":"Method titleFields","linkify":"Method titleFields","nodes":[{"content":"Method titleFields","pos":[0,18]}]},{"pos":[90491,90501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[90503,90509]},{"pos":[90518,90530],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90536,90560],"content":"Method totalNumberOfRows","linkify":"Method totalNumberOfRows","nodes":[{"content":"Method totalNumberOfRows","pos":[0,24]}]},{"pos":[90603,90615],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[90621,90642],"content":"Method validateDelete","linkify":"Method validateDelete","nodes":[{"content":"Method validateDelete","pos":[0,21]}]},{"content":"Requests that the user confirm the deletion of a record from the data source.","pos":[90644,90721]},{"pos":[90765,90777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the deletion is performed successfully; otherwise, false.","pos":[90779,90844]},{"pos":[90851,90858],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method calls the validateDelete method on the data source table.","pos":[90860,90929]},{"content":"The FormDataSource.validateDelete method is called by the FormDataSource.delete method.","pos":[90930,91017]},{"content":"Use this method to add custom data validation checks whenever they are required.","pos":[91018,91098]},{"content":"The validateDelete method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking validateDelete.","pos":[91099,91285]},{"pos":[91292,91300],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example does not call the super() method and returns true.","pos":[91302,91374]},{"content":"This supresses the display of the delete confirmation message box.","pos":[91375,91441]},{"pos":[91563,91583],"content":"Method validateWrite","linkify":"Method validateWrite","nodes":[{"content":"Method validateWrite","pos":[0,20]}]},{"content":"Determines whether data is valid and ready to be written.","pos":[91585,91642]},{"pos":[91685,91697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns true if data is valid; otherwise, false.","pos":[91699,91747]},{"pos":[91754,91761],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called from the FormDataSource.write method.","pos":[91763,91822]},{"content":"If false is returned, the write operation is aborted and an error message is displayed.","pos":[91823,91910]},{"content":"Override this method to add custom validation routines to your data source.","pos":[91911,91986]},{"content":"The validateWrite method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking validateWrite.","pos":[91987,92171]},{"content":"The call to the super() method in this method calls the validateWrite method on the table that is used as a data source.","pos":[92172,92292]},{"content":"Therefore, the return value of the super() method should be examined.","pos":[92293,92362]},{"content":"If you override the method, it should return true only if the super() method also returns true.","pos":[92363,92458]},{"pos":[92464,92494],"content":"Method validTimeStateAutoQuery","linkify":"Method validTimeStateAutoQuery","nodes":[{"content":"Method validTimeStateAutoQuery","pos":[0,30]}]},{"pos":[92554,92564],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92566,92571]},{"pos":[92580,92592],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[92598,92625],"content":"Method validTimeStateUpdate","linkify":"Method validTimeStateUpdate","nodes":[{"content":"Method validTimeStateUpdate","pos":[0,27]}]},{"pos":[92682,92692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92694,92699]},{"pos":[92708,92720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[92726,92739],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"content":"Deletes the current record from the data source.","pos":[92741,92789]},{"pos":[92822,92829],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a user deletes a record in a form.","pos":[92831,92892]},{"content":"The delete method calls the FormDataSource.validateDelete method.","pos":[92893,92958]},{"content":"If the validateDelete method returns true, the record is deleted.","pos":[92959,93024]},{"content":"After the deletion, the cursor is positioned on the next record (if there is one).","pos":[93025,93107]},{"content":"The delete method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking delete.","pos":[93108,93278]},{"pos":[93285,93293],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example overrides the delete method on the Errors data source for the SysCompilerOutput form.","pos":[93295,93402]},{"content":"The method updates the number of errors that are displayed in the Compiler output form after an error has been removed.","pos":[93403,93522]},{"pos":[93631,93661],"content":"Method addFieldToSelectionList","linkify":"Method addFieldToSelectionList","nodes":[{"content":"Method addFieldToSelectionList","pos":[0,30]}]},{"pos":[93726,93736],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[93738,93745]},{"pos":[93753,93777],"content":"Method cacheRemoveRecord","linkify":"Method cacheRemoveRecord","nodes":[{"content":"Method cacheRemoveRecord","pos":[0,24]}]},{"content":"Removes the specified record from the underlying cache of the data source.","pos":[93779,93853]},{"pos":[93912,93922],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[93924,93930]},{"content":"The record to remove from the cache; optional.","pos":[93933,93979]},{"pos":[93986,93993],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must enclose data modification statements in a ttsbegin/ttscommit block.","pos":[93995,94071]},{"pos":[94078,94086],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example deletes the inventTable record from the cache of the data source.","pos":[94088,94175]},{"pos":[94838,94861],"content":"Method OnValidatedWrite","linkify":"Method OnValidatedWrite","nodes":[{"content":"Method OnValidatedWrite","pos":[0,23]}]},{"pos":[94957,94967],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[94969,94975]},{"content":"e","pos":[94989,94990]},{"pos":[94998,95011],"content":"Method reread","linkify":"Method reread","nodes":[{"content":"Method reread","pos":[0,13]}]},{"content":"Rereads the current record from the database.","pos":[95013,95058]},{"pos":[95091,95098],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to update the record with the latest changes from the database.","pos":[95100,95180]},{"content":"The reread method can be overridden on a form data source.","pos":[95181,95239]},{"content":"Right-click the Methods node under the data source, point to Override Method, and then click reread.","pos":[95240,95340]},{"pos":[95347,95355],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the reread method as part of a method that is used to update a table.","pos":[95357,95453]},{"pos":[95687,95713],"content":"Method rereadJoinHierarchy","linkify":"Method rereadJoinHierarchy","nodes":[{"content":"Method rereadJoinHierarchy","pos":[0,26]}]},{"pos":[95758,95776],"content":"Method OnRefreshed","linkify":"Method OnRefreshed","nodes":[{"content":"Method OnRefreshed","pos":[0,18]}]},{"pos":[95867,95877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[95879,95885]},{"content":"e","pos":[95899,95900]},{"pos":[95908,95932],"content":"Method OnValidatedDelete","linkify":"Method OnValidatedDelete","nodes":[{"content":"Method OnValidatedDelete","pos":[0,24]}]},{"pos":[96029,96039],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[96041,96047]},{"content":"e","pos":[96061,96062]},{"pos":[96070,96088],"content":"Method markChanged","linkify":"Method markChanged","nodes":[{"content":"Method markChanged","pos":[0,18]}]},{"pos":[96125,96151],"content":"Method setPagingParameters","linkify":"Method setPagingParameters","nodes":[{"content":"Method setPagingParameters","pos":[0,26]}]},{"pos":[96251,96261],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pagingEnabled","pos":[96263,96276]},{"content":"startRowIndex","pos":[96290,96303]},{"content":"pageSize","pos":[96317,96325]},{"pos":[96333,96347],"content":"Method deleted","linkify":"Method deleted","nodes":[{"content":"Method deleted","pos":[0,14]}]},{"pos":[96380,96392],"content":"Method print","linkify":"Method print","nodes":[{"content":"Method print","pos":[0,12]}]},{"content":"Prints the current record.","pos":[96394,96420]},{"pos":[96470,96480],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"target","pos":[96482,96488]},{"content":"The print medium to use to print the record.","pos":[96491,96535]},{"pos":[96542,96549],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The current record is printed by using the system's auto report facilities (the SysTableReport report, which is located in the Reports node).","pos":[96551,96692]},{"content":"The print method can be overridden on a form data source.","pos":[96693,96750]},{"content":"Right-click the Methods node under the data source, point to Override Method, and then click print.","pos":[96751,96850]},{"pos":[96856,96871],"content":"Method OnReread","linkify":"Method OnReread","nodes":[{"content":"Method OnReread","pos":[0,15]}]},{"pos":[96959,96969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[96971,96977]},{"content":"e","pos":[96991,96992]},{"pos":[97000,97015],"content":"Method research","linkify":"Method research","nodes":[{"content":"Method research","pos":[0,15]}]},{"content":"Is overridden by the FormDataSource.research method.","pos":[97017,97069]},{"pos":[97128,97138],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"retainPosition","pos":[97140,97154]},{"content":"A Boolean value that indicates whether to maintain the position in the grid after the method is completed.","pos":[97157,97263]},{"pos":[97270,97277],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method has no functionality in the FormObjectSet class.","pos":[97279,97339]},{"content":"It is overridden by the FormDataSource.research method, which updates the database search that is defined by the filters and sorts that are currently applied to the form.","pos":[97340,97510]},{"pos":[97516,97534],"content":"Method createTypes","linkify":"Method createTypes","nodes":[{"content":"Method createTypes","pos":[0,18]}]},{"pos":[97667,97677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"concreteTypesToCreate","pos":[97679,97700]},{"content":"append","pos":[97714,97720]},{"content":"implicitCreate","pos":[97734,97748]},{"content":"explicitCreate","pos":[97762,97776]},{"pos":[97784,97800],"content":"Method OnCreated","linkify":"Method OnCreated","nodes":[{"content":"Method OnCreated","pos":[0,16]}]},{"pos":[97889,97899],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[97901,97907]},{"content":"e","pos":[97921,97922]},{"pos":[97930,97952],"content":"Method OnQueryExecuted","linkify":"Method OnQueryExecuted","nodes":[{"content":"Method OnQueryExecuted","pos":[0,22]}]},{"pos":[98047,98057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[98059,98065]},{"content":"e","pos":[98079,98080]},{"pos":[98088,98102],"content":"Method written","linkify":"Method written","nodes":[{"content":"Method written","pos":[0,14]}]},{"pos":[98135,98148],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"content":"Filters records in the data source.","pos":[98150,98185]},{"pos":[98242,98252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"field","pos":[98254,98259]},{"content":"The filtering condition.","pos":[98262,98286]},{"content":"value","pos":[98298,98303]},{"content":"The filtering condition.","pos":[98306,98330]},{"pos":[98337,98344],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The filter method can be overridden on a form data source to extend the standard filtering functionality.","pos":[98346,98451]},{"content":"Right-click the Methods node under the data source, point to Override Method, and then click filter.","pos":[98452,98552]},{"pos":[98558,98572],"content":"Method refresh","linkify":"Method refresh","nodes":[{"content":"Method refresh","pos":[0,14]}]},{"content":"Updates the form by updating the view of all the records in the data source.","pos":[98574,98650]},{"pos":[98684,98691],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The contents of the records are redrawn without loading from disk.","pos":[98693,98759]},{"content":"You can, for example, use refresh if you have to update while a lengthy operation is running.","pos":[98760,98853]},{"content":"Use the FormDataSource.refreshEx method if you do not want to refresh all the records.","pos":[98854,98940]},{"content":"The refresh method can be overridden on a form data source.","pos":[98941,99000]},{"content":"Right-click the Methods node under the data source, point to Override Method, and then click refresh.","pos":[99001,99102]},{"pos":[99109,99117],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example overrides the write method on a data source so that it updates records in a different data source after a write operation.","pos":[99119,99263]},{"pos":[99399,99411],"content":"Method write","linkify":"Method write","nodes":[{"content":"Method write","pos":[0,12]}]},{"content":"Calls the FormDataSource.validateWrite method and manages the database write operation.","pos":[99413,99500]},{"pos":[99532,99539],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is invoked when a user inserts a new record or updates an existing one.","pos":[99541,99624]},{"content":"The refreshEx method can be overridden on a form data source.","pos":[99625,99686]},{"content":"Right-click the Methods node under the data source, point to Override Method, and then click refreshEx.","pos":[99687,99790]},{"pos":[99796,99815],"content":"Method executeQuery","linkify":"Method executeQuery","nodes":[{"content":"Method executeQuery","pos":[0,19]}]},{"content":"Executes the data source query and displays the records that are retrieved.","pos":[99817,99892]},{"pos":[99931,99938],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is executed when a form is opened for data display.","pos":[99940,100003]},{"content":"The executeQuery method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking executeQuery.","pos":[100004,100186]},{"pos":[100193,100201],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example executes a data source query in response to a tab page activation event.","pos":[100203,100297]},{"pos":[100403,100419],"content":"Method setRecord","linkify":"Method setRecord","nodes":[{"content":"Method setRecord","pos":[0,16]}]},{"pos":[100468,100478],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[100480,100486]},{"pos":[100494,100510],"content":"Method refreshEx","linkify":"Method refreshEx","nodes":[{"content":"Method refreshEx","pos":[0,16]}]},{"content":"Updates the view of the specified records.","pos":[100512,100554]},{"pos":[100603,100613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pos","pos":[100615,100618]},{"content":"The number of the record to refresh; optional.","pos":[100621,100667]},{"content":"If a value of -1 is specified, all records are updated.","pos":[100668,100723]},{"content":"If a value of -2 is specified, all marked records and all records that have display options specified are updated.","pos":[100724,100838]},{"content":"The default value is -2.","pos":[100839,100863]},{"pos":[100870,100877],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The refreshEx method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking refreshEx.","pos":[100879,101055]},{"pos":[101061,101078],"content":"Method setCurrent","linkify":"Method setCurrent","nodes":[{"content":"Method setCurrent","pos":[0,17]}]},{"pos":[101114,101139],"content":"Method OnValidatingDelete","linkify":"Method OnValidatingDelete","nodes":[{"content":"Method OnValidatingDelete","pos":[0,25]}]},{"pos":[101237,101247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[101249,101255]},{"content":"e","pos":[101269,101270]},{"pos":[101278,101292],"content":"Method writing","linkify":"Method writing","nodes":[{"content":"Method writing","pos":[0,14]}]},{"pos":[101325,101341],"content":"Method OnWritten","linkify":"Method OnWritten","nodes":[{"content":"Method OnWritten","pos":[0,16]}]},{"pos":[101430,101440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[101442,101448]},{"content":"e","pos":[101462,101463]},{"pos":[101471,101496],"content":"Method clearDisplayOption","linkify":"Method clearDisplayOption","nodes":[{"content":"Method clearDisplayOption","pos":[0,25]}]},{"content":"Clears display options that were previously specified for a record and then redraws the record.","pos":[101498,101593]},{"pos":[101651,101661],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[101663,101669]},{"content":"The record to redraw.","pos":[101672,101693]},{"pos":[101700,101707],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Display options are set by using the FormDataSource.displayOption method.","pos":[101709,101782]},{"pos":[101789,101797],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example redraws the first record in a data source.","pos":[101799,101863]},{"pos":[102027,102047],"content":"Method OnMarkChanged","linkify":"Method OnMarkChanged","nodes":[{"content":"Method OnMarkChanged","pos":[0,20]}]},{"pos":[102140,102150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[102152,102158]},{"content":"e","pos":[102172,102173]},{"pos":[102181,102200],"content":"Method OnLeftRecord","linkify":"Method OnLeftRecord","nodes":[{"content":"Method OnLeftRecord","pos":[0,19]}]},{"pos":[102292,102302],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[102304,102310]},{"content":"e","pos":[102324,102325]},{"pos":[102333,102349],"content":"Method OnDeleted","linkify":"Method OnDeleted","nodes":[{"content":"Method OnDeleted","pos":[0,16]}]},{"pos":[102438,102448],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[102450,102456]},{"content":"e","pos":[102470,102471]},{"pos":[102479,102498],"content":"Method removeFilter","linkify":"Method removeFilter","nodes":[{"content":"Method removeFilter","pos":[0,19]}]},{"content":"Resets the query for the data source.","pos":[102500,102537]},{"pos":[102576,102583],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a user clicks the Cancel Filter command in the shortcut menu on a form control.","pos":[102585,102691]},{"content":"The removeFilter method can be overridden on a form data source.","pos":[102692,102756]},{"content":"Right-click the Methods node under the data source, point to Override Method, and then click removeFilter.","pos":[102757,102863]},{"content":"For example, removeFilter removes all modifications to the original query that is generated by the FormDataSource.init method.","pos":[102864,102990]},{"pos":[102996,103016],"content":"Method OnInitialized","linkify":"Method OnInitialized","nodes":[{"content":"Method OnInitialized","pos":[0,20]}]},{"pos":[103109,103119],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[103121,103127]},{"content":"e","pos":[103141,103142]},{"pos":[103150,103173],"content":"Method OnPostLinkActive","linkify":"Method OnPostLinkActive","nodes":[{"content":"Method OnPostLinkActive","pos":[0,23]}]},{"pos":[103269,103279],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[103281,103287]},{"content":"e","pos":[103301,103302]},{"pos":[103310,103335],"content":"Method OnSelectionChanged","linkify":"Method OnSelectionChanged","nodes":[{"content":"Method OnSelectionChanged","pos":[0,25]}]},{"pos":[103433,103443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[103445,103451]},{"content":"e","pos":[103465,103466]},{"pos":[103474,103489],"content":"Method deleting","linkify":"Method deleting","nodes":[{"content":"Method deleting","pos":[0,15]}]},{"pos":[103523,103537],"content":"Method observe","linkify":"Method observe","nodes":[{"content":"Method observe","pos":[0,14]}]},{"pos":[103570,103586],"content":"Method OnWriting","linkify":"Method OnWriting","nodes":[{"content":"Method OnWriting","pos":[0,16]}]},{"pos":[103675,103685],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[103687,103693]},{"content":"e","pos":[103707,103708]},{"pos":[103716,103734],"content":"Method OnActivated","linkify":"Method OnActivated","nodes":[{"content":"Method OnActivated","pos":[0,18]}]},{"pos":[103825,103835],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[103837,103843]},{"content":"e","pos":[103857,103858]},{"pos":[103866,103901],"content":"Method removeFieldFromSelectionList","linkify":"Method removeFieldFromSelectionList","nodes":[{"content":"Method removeFieldFromSelectionList","pos":[0,35]}]},{"pos":[103971,103981],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[103983,103990]},{"pos":[103998,104015],"content":"Method OnCreating","linkify":"Method OnCreating","nodes":[{"content":"Method OnCreating","pos":[0,17]}]},{"pos":[104105,104115],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[104117,104123]},{"content":"e","pos":[104137,104138]},{"pos":[104146,104179],"content":"Method rereadReferenceDataSources","linkify":"Method rereadReferenceDataSources","nodes":[{"content":"Method rereadReferenceDataSources","pos":[0,33]}]},{"pos":[104231,104255],"content":"Method OnValidatingWrite","linkify":"Method OnValidatingWrite","nodes":[{"content":"Method OnValidatingWrite","pos":[0,24]}]},{"pos":[104352,104362],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[104364,104370]},{"content":"e","pos":[104384,104385]},{"pos":[104393,104406],"content":"Method prompt","linkify":"Method prompt","nodes":[{"content":"Method prompt","pos":[0,13]}]},{"content":"Activates the standard form, SysQueryForm, that is used to limit a query range.","pos":[104408,104487]},{"pos":[104520,104527],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a user clicks the Filter records command on the Command menu or presses CTRL+F3.","pos":[104529,104636]},{"content":"The prompt method can be overridden on a form data source.","pos":[104637,104695]},{"content":"Right-click the Methods node under the data source, point to Override Method, and then click prompt.","pos":[104696,104796]},{"pos":[104802,104825],"content":"Method OnQueryExecuting","linkify":"Method OnQueryExecuting","nodes":[{"content":"Method OnQueryExecuting","pos":[0,23]}]},{"pos":[104921,104931],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[104933,104939]},{"content":"e","pos":[104953,104954]},{"pos":[104962,104980],"content":"Method OnInitValue","linkify":"Method OnInitValue","nodes":[{"content":"Method OnInitValue","pos":[0,18]}]},{"pos":[105071,105081],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[105083,105089]},{"content":"e","pos":[105103,105104]},{"pos":[105112,105137],"content":"Method clearReferenceData","linkify":"Method clearReferenceData","nodes":[{"content":"Method clearReferenceData","pos":[0,25]}]},{"pos":[105197,105207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[105209,105216]},{"pos":[105224,105243],"content":"Method cursorNotify","linkify":"Method cursorNotify","nodes":[{"content":"Method cursorNotify","pos":[0,19]}]},{"content":"Notifies the application about a cursor event.","pos":[105245,105291]},{"pos":[105339,105349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"event","pos":[105351,105356]},{"content":"The cursor event identifier.","pos":[105359,105387]},{"content":"The following table shows the available cursor events.","pos":[105388,105442]},{"pos":[105449,105456],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method can be overridden to implement custom handling of cursor events.","pos":[105458,105534]},{"content":"However, the super() method has to be called first to enable the kernel to handle the event as appropriate.","pos":[105535,105642]},{"pos":[105648,105668],"content":"Method displayOption","linkify":"Method displayOption","nodes":[{"content":"Method displayOption","pos":[0,20]}]},{"content":"Sets the text color and the background color for a record in the data source.","pos":[105670,105747]},{"pos":[105830,105840],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[105842,105848]},{"content":"The FormRowDisplayOption object that encapsulates the desired record display properties.","pos":[105851,105939]},{"content":"options","pos":[105951,105958]},{"content":"The FormRowDisplayOption object that encapsulates the desired record display properties.","pos":[105961,106049]},{"pos":[106056,106063],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is executed one time for each record before the record is displayed in a form.","pos":[106065,106155]},{"content":"The displayOption method can be overridden on a form data source.","pos":[106156,106221]},{"content":"Right-click the Methods node under the data source, point to Override Method, and then click displayOption.","pos":[106222,106329]},{"pos":[106336,106344],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example overrides the displayOption method to set display options from a stored profile and to override the background color that is based on the settings for the particular record.","pos":[106346,106541]},{"pos":[106789,106802],"content":"Method create","linkify":"Method create","nodes":[{"content":"Method create","pos":[0,13]}]},{"content":"Creates a new record in the data source.","pos":[106804,106844]},{"pos":[106893,106903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"append","pos":[106905,106911]},{"content":"A Boolean value that indicates whether to insert the record after or before the current cursor position.","pos":[106914,107018]},{"content":"If it is set to true, the new record is inserted after the current record.","pos":[107019,107093]},{"pos":[107100,107107],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a user creates a new record in a data source, such as by using the default shortcut key for insertion (CTRL+N).","pos":[107109,107247]},{"content":"The create method can be overridden on a form data source.","pos":[107248,107306]},{"content":"Right-click the Methods node under the data source, and then select Override Method <ph id=\"ph1\">&amp;gt;</ph> create.","pos":[107307,107403],"source":" Right-click the Methods node under the data source, and then select Override Method &gt; create."},{"pos":[107409,107420],"content":"Method init","linkify":"Method init","nodes":[{"content":"Method init","pos":[0,11]}]},{"content":"Creates a data source query that is based on the data source properties.","pos":[107422,107494]},{"pos":[107525,107532],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when the form is opened.","pos":[107534,107580]},{"content":"The query that is generated by the method is used to the load data so that it can be displayed in the form.","pos":[107581,107688]},{"content":"The init method can be overridden on a form data source.","pos":[107689,107745]},{"content":"Right-click the Methods node under the data source, point to Override Method, and then click init.","pos":[107746,107844]},{"pos":[107851,107859],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example overrides the init method on a data source to specify the sorting order for the data source.","pos":[107861,107975]},{"pos":[108644,108661],"content":"Method linkActive","linkify":"Method linkActive","nodes":[{"content":"Method linkActive","pos":[0,17]}]},{"content":"Calls the FormDataSource.exeuteQuery method on data sources that are linked to the current data source.","pos":[108663,108766]},{"pos":[108803,108810],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is executed when a user moves to another record in the master data source.","pos":[108812,108898]},{"content":"This causes an update to all linked data sources.","pos":[108899,108948]},{"content":"The super() call in the FormDataSource.active method calls the FormDataSource.linkActive method on all linked child data sources if the LinkType property on the parent data source is set to Passive, Delayed, or Active.","pos":[108949,109167]},{"content":"The linkActive method can be overridden on a form data source.","pos":[109168,109230]},{"content":"Right-click the Methods node under the data source, point to Override Method, and then click linkActive.","pos":[109231,109335]},{"pos":[109341,109364],"content":"Method selectionChanged","linkify":"Method selectionChanged","nodes":[{"content":"Method selectionChanged","pos":[0,23]}]},{"pos":[109406,109423],"content":"Method OnDeleting","linkify":"Method OnDeleting","nodes":[{"content":"Method OnDeleting","pos":[0,17]}]},{"pos":[109513,109523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[109525,109531]},{"content":"e","pos":[109545,109546]},{"pos":[109554,109593],"content":"Method addReferenceFieldToSelectionList","linkify":"Method addReferenceFieldToSelectionList","nodes":[{"content":"Method addReferenceFieldToSelectionList","pos":[0,39]}]},{"pos":[109696,109706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[109708,109715]},{"content":"referenceFieldGroupName","pos":[109729,109752]},{"pos":[109760,109776],"content":"Method initValue","linkify":"Method initValue","nodes":[{"content":"Method initValue","pos":[0,16]}]},{"content":"Initializes field values in a new record.","pos":[109778,109819]},{"pos":[109855,109862],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a new record is created.","pos":[109864,109915]},{"content":"It populates the record with initial values for the fields.","pos":[109916,109975]},{"content":"The initValue method can be overridden on a form data source by right-clicking the Methods node under the data source, pointing to Override Method, and then clicking initValue.","pos":[109976,110152]},{"pos":[110159,110167],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example overrides FormDataSource.initValue so that the TaxLimitBase field is initialized with a particular value.","pos":[110169,110296]},{"pos":[110429,110448],"content":"Method deleteMarked","linkify":"Method deleteMarked","nodes":[{"content":"Method deleteMarked","pos":[0,19]}]},{"content":"Deletes all marked (selected) records from a data source.","pos":[110450,110507]},{"pos":[110546,110553],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If no records have been selected, the FormDataSource.delete method is executed.","pos":[110555,110634]},{"content":"The operation can be interrupted by pressing CTRL+BREAK.","pos":[110635,110691]},{"content":"The deleteMarked method can be overridden on a form data source.","pos":[110692,110756]},{"content":"Right-click the Methods node under the data source, and then select Override Method <ph id=\"ph1\">&amp;gt;</ph> deleteMarked.","pos":[110757,110859],"source":" Right-click the Methods node under the data source, and then select Override Method &gt; deleteMarked."},{"pos":[110866,110874],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example overrides the deleteMarked method to let users confirm whether they want to delete the marked records.","pos":[110876,111000]},{"pos":[111144,111166],"content":"Method OnLeavingRecord","linkify":"Method OnLeavingRecord","nodes":[{"content":"Method OnLeavingRecord","pos":[0,22]}]},{"pos":[111261,111271],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[111273,111279]},{"content":"e","pos":[111293,111294]},{"pos":[111301,111322],"content":"Class FormDateControl","linkify":"Class FormDateControl","nodes":[{"content":"Class FormDateControl","pos":[0,21]}]},{"pos":[111374,111381],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[111387,111395],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[111401,111408],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[111412,111418]},{"content":"Description","pos":[111522,111533]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[111976,112022],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[112086,112126]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[112258,112293],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[112540,112583],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[112650,112717]},{"content":"public boolean allowSysSetup()","pos":[112822,112852]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[112932,113015]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[113104,113140],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[113386,113435],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[113496,113594]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[113668,113709],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[113778,113827]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[113950,113985],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[114060,114122]},{"content":"public int beginDrag(int x, int y)","pos":[114232,114266]},{"content":"Is called when the user starts to drag a form control.","pos":[114342,114396]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114514,114544],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[114624,114691]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114796,114828],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[114906,114962]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[115078,115119],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[115360,115414]},{"content":"Retrieves the size of the control.","pos":[115470,115504]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[115642,115680],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[115752,115795]},{"content":"public int charFromPos(int x, int y)","pos":[115924,115960]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[116206,116243],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[116316,116361]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[116488,116560],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[116598,116665]},{"content":"public List configurationKeyEx()","pos":[116770,116802]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[116880,116976]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[117052,117096],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[117162,117240]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[117334,117393],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[117616,117659],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public int dataFieldArrayIndex()","pos":[117898,117930]},{"content":"public FieldName dataFieldName()","pos":[118180,118212]},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[118462,118498],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[118744,118786],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[118854,118979]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[119026,119066],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[119136,119201]},{"content":"public int dateDay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119308,119341],"source":"public int dateDay(\\[int value\\])"},{"content":"public int dateFormat(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119590,119626],"source":"public int dateFormat(\\[int value\\])"},{"content":"public int dateMonth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119872,119907],"source":"public int dateMonth(\\[int value\\])"},{"content":"public int dateSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[120154,120193],"source":"public int dateSeparator(\\[int value\\])"},{"content":"public Date dateValue(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[120436,120473],"source":"public Date dateValue(\\[Date value\\])"},{"content":"public int dateYear(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[120718,120752],"source":"public int dateYear(\\[int value\\])"},{"content":"public int direction(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[121000,121035],"source":"public int direction(\\[int value\\])"},{"content":"public int displayHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[121282,121340],"source":"public int displayHeight(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayHeightMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[121564,121616],"source":"public AutoMode displayHeightMode(\\[AutoMode mode\\])"},{"content":"public int displayHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[121846,121890],"source":"public int displayHeightValue(\\[int value\\])"},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[122128,122186],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[122410,122462],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[122692,122736],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[122974,123013],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both.","pos":[123084,123253]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[123258,123292],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[123368,123449]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[123540,123621]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[123650,123744]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[123822,123899]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[123932,124028]},{"content":"public str dragText()","pos":[124104,124125]},{"content":"Retrieves the text that id displayed when the form control is dragged.","pos":[124214,124284]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[124386,124427],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[124496,124547]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[124668,124732],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[124950,124990],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[125232,125262],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[125342,125399]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[125514,125548],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[125624,125681]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[125796,125837],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[125906,125957]},{"content":"public container getCursorPos()","pos":[126078,126109]},{"content":"public int getFirstVisibleLine()","pos":[126360,126392]},{"content":"public str getLine(int lineNo)","pos":[126642,126672]},{"content":"public int getLineCount()","pos":[126924,126949]},{"content":"public container getSelection()","pos":[127206,127237]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[127488,127530],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[127598,127686]},{"content":"public boolean hasUserSetting()","pos":[127770,127801]},{"content":"Indicates whether the control has custom user settings.","pos":[127880,127935]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[128052,128094],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[128162,128201]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[128334,128370],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[128444,128506]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[128616,128653],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[128726,128765]},{"content":"public str helpField()","pos":[128898,128920]},{"content":"Retrieves the Help text for the control.","pos":[129008,129048]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[129180,129214],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[129290,129394]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[129462,129503],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[129572,129635]},{"content":"public int hWnd()","pos":[129744,129761]},{"content":"Retrieves the Windows handle for the control.","pos":[129854,129899]},{"content":"public int iMEMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[130026,130059],"source":"public int iMEMode(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[130308,130336]},{"content":"public boolean isDisplayed()","pos":[130590,130618]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[130700,130766]},{"content":"public boolean isRestricted()","pos":[130872,130901]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[130982,131049]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[131154,131210]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[131264,131363]},{"content":"public boolean isValid()","pos":[131436,131460]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[131718,131758],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[132000,132031],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[132110,132147]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[132282,132322],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[132564,132599],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[132846,132889],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[133128,133163],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[133410,133449],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[133692,133738],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[133974,134010],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[134256,134303],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[134538,134579],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[134820,134862],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[135102,135147],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[135384,135468]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[135666,135746]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[135948,136026]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[136230,136269],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[136512,136560],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[136794,136840],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[137076,137116],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[137358,137399],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[137640,137662]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[137922,137962],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[138032,138096]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[138204,138238],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[138314,138375]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[138486,138521],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[138596,138660]},{"content":"public int limitText(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[138768,138822],"source":"public int limitText(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode limitTextMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[139050,139098],"source":"public AutoMode limitTextMode(\\[AutoMode mode\\])"},{"content":"public int limitTextValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[139332,139372],"source":"public int limitTextValue(\\[int value\\])"},{"content":"public int lineFromChar(int charIndex)","pos":[139614,139652]},{"content":"public int lineIndex(int lineNo)","pos":[139896,139928]},{"content":"public int lineLength(int lineNo)","pos":[140178,140211]},{"content":"public int lookupButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[140460,140498],"source":"public int lookupButton(\\[int value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[140742,140785],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[141024,141071],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[141134,141187]},{"content":"public str maxDateLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[141306,141344],"source":"public str maxDateLabel(\\[str value\\])"},{"content":"public str maxDateLabelText()","pos":[141588,141617]},{"content":"public boolean modified()","pos":[141870,141895]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[142152,142231]},{"content":"Is called when the control is double-clicked by the user.","pos":[142262,142319]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[142434,142509]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[142544,142609]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[142716,142791]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[142826,142891]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[142998,143071]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[143108,143180]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[143280,143310],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.","pos":[143390,143526]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[143563,143605],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[143845,143884]},{"content":"public FormControl parentControl()","pos":[144127,144161]},{"content":"Retrieves the parent control for the control.","pos":[144237,144282]},{"content":"public container posFromChar(int charIndex)","pos":[144409,144452]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[144691,144731],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[144973,145009],"source":"public int promptrect(\\[int value\\])"},{"content":"public boolean replaceOnLookup(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[145255,145304],"source":"public boolean replaceOnLookup(\\[boolean value\\])"},{"content":"public int searchAfterInput(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[145537,145579],"source":"public int searchAfterInput(\\[int value\\])"},{"content":"public int searchMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[145819,145855],"source":"public int searchMode(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[146101,146158],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[146211,146270]},{"content":"public int showContextMenu(int menuHandle)","pos":[146383,146425]},{"content":"Shows the shortcut menu for the control.","pos":[146493,146533]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[146665,146708],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[146947,146985],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[147057,147184]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[147229,147273],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[147511,147542],"source":"public int style(\\[int value\\])"},{"content":"public str toolTip()","pos":[147793,147813]},{"content":"Retrieves the tooltip text for the control.","pos":[147903,147946]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[148075,148114],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[148185,148247]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[148357,148390],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[148467,148526]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[148639,148673],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[148749,148811]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[148921,148951],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[149203,149246],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[149313,149380]},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[149485,149536]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[149767,149801],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[149877,149920]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[150049,150087],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[150159,150207]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[150331,150370],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[150441,150500]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[150613,150650],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[150723,150806]},{"content":"public int userFastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[150895,150939],"source":"public int userFastTabSummary(\\[int value\\])"},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[151177,151213],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[151287,151339]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[151459,151493],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[151569,151651]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[151741,151783],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[151851,151907]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[152023,152063],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[152133,152187]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[152305,152345],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[152415,152464]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[152587,152630],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[152697,152750]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[152869,152903],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[152979,153127]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[153151,153186],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[153261,153312]},{"content":"public boolean validate()","pos":[153433,153458]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[153715,153775],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[153825,153886]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[153997,154051],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[154107,154166]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[154279,154325],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[154389,154450]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[154561,154599],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[154843,154884],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[154953,155023]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[155125,155166],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[155235,155273]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[155407,155442],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[155517,155579]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[155689,155725],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[155799,155837]},{"content":"public void dragLeave()","pos":[155971,155994]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[156081,156177]},{"content":"public void cut()","pos":[156253,156270]},{"content":"Cuts the contents of the control.","pos":[156363,156396]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[156535,156611],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void scrollCursor()","pos":[156817,156843]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[157099,157176]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[157209,157279]},{"content":"public void copy()","pos":[157381,157399]},{"content":"Copies the contents of the control to the clipboard.","pos":[157491,157543]},{"content":"public void gotFocus()","pos":[157663,157685]},{"content":"Indicates that the control has received focus.","pos":[157773,157819]},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[157945,158022],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void performTypeLookup(<ph id=\"ph1\">\\[</ph>int userType<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[158227,158326],"source":"public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])"},{"content":"public void lineScroll(int dx, int dy)","pos":[158509,158547]},{"content":"public void setSelection(int charIndexFrom, int charIndexTo)","pos":[158791,158851]},{"content":"public void textChange()","pos":[159073,159097]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[159355,159427],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void pasteText(str pasteStr, <ph id=\"ph1\">\\[</ph>boolean InsertSel<ph id=\"ph2\">\\]</ph>)","pos":[159637,159695],"source":"public void pasteText(str pasteStr, \\[boolean InsertSel\\])"},{"content":"public void lostFocus()","pos":[159919,159942]},{"content":"Indicates that the control has lost focus.","pos":[160029,160071]},{"content":"public void jumpRef()","pos":[160201,160222]},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[160483,160559],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[160765,160838],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setCursorPos(int x, int y)","pos":[161047,161085]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[161329,161402]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[161439,161537]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[161611,161685],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void mouseLeave()","pos":[161893,161917]},{"content":"Indicates that the mouse pointer has left the control.","pos":[162003,162057]},{"content":"public void performDBLookup(<ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>TableId tableId<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[162175,162276],"source":"public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])"},{"content":"public void lookup()","pos":[162457,162477]},{"content":"public void endDrag()","pos":[162739,162760]},{"content":"Is called when the user has finished dragging a form control.","pos":[162849,162910]},{"content":"public void undo()","pos":[163021,163039]},{"content":"public void context()","pos":[163303,163324]},{"content":"Shows the shortcut menu for the control.","pos":[163413,163453]},{"content":"public void resetUserSetting()","pos":[163585,163615]},{"content":"Resets the user settings for the control.","pos":[163695,163736]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[163867,163942],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void paste()","pos":[164149,164168]},{"content":"Pastes the contents of the clipboard into the control.","pos":[164259,164313]},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[164431,164506],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[164713,164782]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[164823,164923]},{"content":"public void setFocus()","pos":[164995,165017]},{"content":"Sets the focus on the control.","pos":[165105,165135]},{"content":"public void prefColumnSize(int width, int height)","pos":[165277,165326]},{"content":"Specifies the preferred column width and height for the form control.","pos":[165387,165456]},{"content":"public void enter()","pos":[165559,165578]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[165841,165878],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void inputSearch(str searchStr)","pos":[166123,166161]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[166233,166304]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[166405,166512],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void performFormLookup(xFormRun form)","pos":[166687,166731]},{"content":"public void displayControl()","pos":[166969,166997]},{"content":"Displays the control.","pos":[167079,167100]},{"pos":[167254,167273],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[167275,167315]},{"pos":[167372,167382],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[167384,167389]},{"pos":[167398,167410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[167412,167468]},{"pos":[167475,167482],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[167484,167563]},{"pos":[167569,167585],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[167631,167641],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[167643,167648]},{"pos":[167657,167669],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[167675,167691],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[167693,167760]},{"pos":[167814,167824],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[167826,167831]},{"pos":[167840,167852],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[167854,167906]},{"pos":[167913,167920],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[167922,168048]},{"pos":[168054,168074],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[168076,168159]},{"pos":[168202,168214],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[168216,168284]},{"pos":[168290,168307],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[168354,168364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168366,168371]},{"pos":[168380,168392],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168398,168420],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[168422,168520]},{"pos":[168580,168590],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168592,168597]},{"pos":[168606,168618],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[168620,168699]},{"pos":[168706,168713],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[168715,168752]},{"pos":[168758,168780],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[168782,168831]},{"pos":[168883,168893],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168895,168900]},{"pos":[168909,168921],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[168923,168967]},{"pos":[168974,168981],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[168983,169051]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[169057,169127]},{"content":"The second byte contains a value for green.","pos":[169132,169175]},{"content":"The third byte contains a value for blue.","pos":[169180,169221]},{"content":"The high-order byte must be zero.","pos":[169226,169259]},{"content":"The maximum value for a single byte is 255.","pos":[169264,169307]},{"pos":[169313,169329],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[169331,169393]},{"pos":[169439,169449],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[169451,169456]},{"pos":[169465,169477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[169479,169540]},{"pos":[169546,169562],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[169564,169618]},{"pos":[169665,169675],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[169677,169678]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer The coordinate is relative to the upper-left corner of the control.","pos":[169681,169818]},{"content":"y","pos":[169830,169831]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer The coordinate is relative to the upper-left corner of the control.","pos":[169834,169971]},{"pos":[169978,169990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[169992,170031]},{"pos":[170038,170045],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[170047,170128]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[170129,170233]},{"pos":[170239,170250],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[170252,170319]},{"pos":[170360,170370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170372,170377]},{"pos":[170386,170398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[170400,170450]},{"pos":[170457,170464],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[170466,170538]},{"content":"0 Use the default font weight.","pos":[170544,170574]},{"content":"1 Thin.","pos":[170579,170586]},{"content":"2 Extra-light.","pos":[170591,170605]},{"content":"3 Light.","pos":[170610,170618]},{"content":"4 Normal.","pos":[170623,170632]},{"content":"5 Medium.","pos":[170637,170646]},{"content":"6 Semibold.","pos":[170651,170662]},{"content":"7 Bold.","pos":[170667,170674]},{"content":"8 Extra-bold.","pos":[170679,170692]},{"content":"9 Heavy.","pos":[170697,170705]},{"pos":[170711,170724],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[170726,170782]},{"pos":[170825,170835],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170837,170842]},{"pos":[170851,170863],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[170865,170909]},{"pos":[170916,170923],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[170925,171017]},{"content":"Value.","pos":[171021,171027]},{"content":"Description.","pos":[171030,171042]},{"content":"0","pos":[171073,171074]},{"content":"Auto.","pos":[171082,171087]},{"content":"1","pos":[171099,171100]},{"content":"3D.","pos":[171108,171111]},{"content":"2","pos":[171125,171126]},{"content":"Single line.","pos":[171134,171146]},{"content":"3","pos":[171151,171152]},{"content":"Flat.","pos":[171160,171165]},{"content":"4","pos":[171177,171178]},{"content":"None.","pos":[171186,171191]},{"pos":[171206,171228],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[171280,171290],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171292,171297]},{"pos":[171306,171318],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171324,171346],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[171348,171382]},{"pos":[171449,171459],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[171461,171466]},{"content":"The number of lines to use to determine the height.","pos":[171469,171520]},{"content":"lines","pos":[171532,171537]},{"content":"The number of lines to use to determine the height.","pos":[171540,171591]},{"pos":[171598,171610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[171612,171658]},{"pos":[171664,171683],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[171685,171728]},{"pos":[171777,171787],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171789,171794]},{"pos":[171803,171815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[171817,171879]},{"pos":[171886,171893],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[171895,171999]},{"content":"Value.","pos":[172003,172009]},{"content":"Description.","pos":[172012,172024]},{"content":"0","pos":[172071,172072]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172080,172093],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[172105,172106]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172114,172130],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[172139,172140]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172148,172163],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[172173,172175]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172182,172194],"source":"MAC\\_CHARSET"},{"content":"128","pos":[172207,172210]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172216,172233],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[172241,172244]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172250,172265],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[172275,172278]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172284,172299],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[172309,172312]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172318,172338],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[172343,172346]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172352,172366],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[172377,172380]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172386,172402],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[172411,172414]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172420,172439],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[172445,172448]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172454,172469],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[172479,172482]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172488,172504],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[172513,172516]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172522,172541],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[172547,172550]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172556,172568],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[172580,172668]},{"content":"Value.","pos":[172672,172678]},{"content":"Description.","pos":[172681,172693]},{"content":"130","pos":[172728,172731]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172737,172751],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[172755,172841]},{"content":"Value.","pos":[172845,172851]},{"content":"Description.","pos":[172854,172866]},{"content":"177","pos":[172903,172906]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172912,172927],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[172932,172935]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[172941,172956],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[172960,173037]},{"content":"Value.","pos":[173041,173047]},{"content":"Description.","pos":[173050,173062]},{"content":"222","pos":[173095,173098]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[173104,173117],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[173121,173200]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[173201,173292],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[173293,173407]},{"pos":[173413,173431],"content":"Method charFromPos","linkify":"Method charFromPos","nodes":[{"content":"Method charFromPos","pos":[0,18]}]},{"pos":[173480,173490],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[173492,173493]},{"content":"y","pos":[173507,173508]},{"pos":[173517,173529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[173535,173553],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[173555,173600]},{"pos":[173648,173658],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[173660,173665]},{"pos":[173674,173686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[173688,173731]},{"pos":[173738,173745],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[173747,173808]},{"content":"Value.","pos":[173812,173818]},{"content":"Style.","pos":[173821,173827]},{"content":"0","pos":[173900,173901]},{"content":"Default.","pos":[173909,173917]},{"content":"1","pos":[173944,173945]},{"content":"The Microsoft Windows palette.","pos":[173953,173983]},{"content":"2","pos":[173988,173989]},{"content":"The true-color scheme.","pos":[173997,174019]},{"pos":[174035,174058],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[174060,174127]},{"pos":[174210,174220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[174222,174227]},{"pos":[174236,174248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[174250,174322]},{"pos":[174329,174336],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[174338,174419]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[174420,174513]},{"pos":[174519,174544],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[174546,174642]},{"pos":[174687,174699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[174701,174787]},{"pos":[174794,174801],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[174803,174852]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[174853,175001]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[175002,175136]},{"pos":[175142,175167],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[175169,175247]},{"pos":[175302,175312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[175314,175319]},{"content":"The string that contains the country/region codes to set; optional.","pos":[175322,175389]},{"pos":[175396,175408],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[175410,175475]},{"pos":[175481,175513],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[175583,175593],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[175595,175600]},{"pos":[175609,175621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[175627,175643],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[175697,175707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[175709,175714]},{"pos":[175723,175735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[175741,175767],"content":"Method dataFieldArrayIndex","linkify":"Method dataFieldArrayIndex","nodes":[{"content":"Method dataFieldArrayIndex","pos":[0,26]}]},{"pos":[175812,175824],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[175830,175850],"content":"Method dataFieldName","linkify":"Method dataFieldName","nodes":[{"content":"Method dataFieldName","pos":[0,20]}]},{"pos":[175895,175907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[175913,175930],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[175977,175987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[175989,175994]},{"pos":[176003,176015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[176021,176044],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[176046,176171]},{"pos":[176224,176234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[176236,176241]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[176244,176318]},{"pos":[176325,176337],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[176339,176451]},{"pos":[176458,176465],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[176467,176594]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[176595,176688]},{"pos":[176694,176711],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[176713,176778]},{"pos":[176829,176839],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[176841,176846]},{"pos":[176855,176867],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[176869,176914]},{"pos":[176920,176934],"content":"Method dateDay","linkify":"Method dateDay","nodes":[{"content":"Method dateDay","pos":[0,14]}]},{"pos":[176978,176988],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[176990,176995]},{"pos":[177004,177016],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177022,177039],"content":"Method dateFormat","linkify":"Method dateFormat","nodes":[{"content":"Method dateFormat","pos":[0,17]}]},{"pos":[177086,177096],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[177098,177103]},{"pos":[177112,177124],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177130,177146],"content":"Method dateMonth","linkify":"Method dateMonth","nodes":[{"content":"Method dateMonth","pos":[0,16]}]},{"pos":[177192,177202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[177204,177209]},{"pos":[177218,177230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177236,177256],"content":"Method dateSeparator","linkify":"Method dateSeparator","nodes":[{"content":"Method dateSeparator","pos":[0,20]}]},{"pos":[177306,177316],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[177318,177323]},{"pos":[177332,177344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177350,177366],"content":"Method dateValue","linkify":"Method dateValue","nodes":[{"content":"Method dateValue","pos":[0,16]}]},{"pos":[177414,177424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[177426,177431]},{"pos":[177440,177452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177458,177473],"content":"Method dateYear","linkify":"Method dateYear","nodes":[{"content":"Method dateYear","pos":[0,15]}]},{"pos":[177518,177528],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[177530,177535]},{"pos":[177544,177556],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177562,177578],"content":"Method direction","linkify":"Method direction","nodes":[{"content":"Method direction","pos":[0,16]}]},{"pos":[177624,177634],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[177636,177641]},{"pos":[177650,177662],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177668,177688],"content":"Method displayHeight","linkify":"Method displayHeight","nodes":[{"content":"Method displayHeight","pos":[0,20]}]},{"pos":[177755,177765],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[177767,177772]},{"content":"mode","pos":[177786,177790]},{"pos":[177799,177811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177817,177841],"content":"Method displayHeightMode","linkify":"Method displayHeightMode","nodes":[{"content":"Method displayHeightMode","pos":[0,24]}]},{"pos":[177904,177914],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[177916,177920]},{"pos":[177929,177941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177947,177972],"content":"Method displayHeightValue","linkify":"Method displayHeightValue","nodes":[{"content":"Method displayHeightValue","pos":[0,25]}]},{"pos":[178027,178037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178039,178044]},{"pos":[178053,178065],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178071,178091],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[178158,178168],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178170,178175]},{"content":"mode","pos":[178189,178193]},{"pos":[178202,178214],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178220,178244],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[178307,178317],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[178319,178323]},{"pos":[178332,178344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178350,178375],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[178430,178440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178442,178447]},{"pos":[178456,178468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178474,178494],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both.","pos":[178496,178665]},{"pos":[178715,178725],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178727,178732]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[178735,178809]},{"pos":[178816,178828],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal, or in both.","pos":[178830,178959]},{"pos":[178965,178980],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[178982,179063]},{"pos":[179108,179118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179120,179125]},{"pos":[179134,179146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[179148,179208]},{"pos":[179214,179229],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[179231,179325]},{"pos":[179419,179429],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[179431,179441]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[179444,179529]},{"content":"dragMode","pos":[179541,179549]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[179552,179637]},{"content":"x","pos":[179649,179650]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[179653,179738]},{"content":"y","pos":[179750,179751]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[179754,179839]},{"pos":[179846,179858],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[179860,179925]},{"pos":[179931,179948],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[179950,180046]},{"pos":[180136,180146],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[180148,180158]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[180161,180246]},{"content":"dragMode","pos":[180258,180266]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[180269,180354]},{"content":"x","pos":[180366,180367]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[180370,180455]},{"content":"y","pos":[180467,180468]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[180471,180556]},{"pos":[180563,180575],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[180577,180642]},{"pos":[180648,180663],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that id displayed when the form control is dragged.","pos":[180665,180735]},{"pos":[180769,180781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[180783,180914]},{"pos":[180920,180934],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[180936,180987]},{"pos":[181039,181049],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[181051,181056]},{"pos":[181065,181077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[181079,181127]},{"pos":[181134,181141],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[181143,181218]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[181219,181314]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[181315,181449]},{"pos":[181455,181478],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[181553,181563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[181565,181570]},{"pos":[181579,181591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[181597,181618],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[181669,181679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[181681,181686]},{"pos":[181695,181707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[181713,181724],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[181726,181783]},{"pos":[181824,181834],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[181836,181841]},{"pos":[181850,181862],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[181864,181919]},{"pos":[181925,181940],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[181942,181999]},{"pos":[182044,182054],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[182056,182061]},{"pos":[182070,182082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[182084,182117]},{"pos":[182123,182145],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[182147,182198]},{"pos":[182250,182260],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[182262,182267]},{"pos":[182276,182288],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[182290,182334]},{"pos":[182341,182348],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[182350,182418]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[182424,182494]},{"content":"The second byte contains a value for green.","pos":[182499,182542]},{"content":"The third byte contains a value for blue.","pos":[182547,182588]},{"content":"The high-order byte must be zero.","pos":[182593,182626]},{"content":"The maximum value for a single byte is 255.","pos":[182631,182674]},{"pos":[182680,182699],"content":"Method getCursorPos","linkify":"Method getCursorPos","nodes":[{"content":"Method getCursorPos","pos":[0,19]}]},{"pos":[182743,182755],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[182761,182787],"content":"Method getFirstVisibleLine","linkify":"Method getFirstVisibleLine","nodes":[{"content":"Method getFirstVisibleLine","pos":[0,26]}]},{"pos":[182832,182844],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[182850,182864],"content":"Method getLine","linkify":"Method getLine","nodes":[{"content":"Method getLine","pos":[0,14]}]},{"pos":[182907,182917],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[182919,182925]},{"pos":[182934,182946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[182952,182971],"content":"Method getLineCount","linkify":"Method getLineCount","nodes":[{"content":"Method getLineCount","pos":[0,19]}]},{"pos":[183009,183021],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[183027,183046],"content":"Method getSelection","linkify":"Method getSelection","nodes":[{"content":"Method getSelection","pos":[0,19]}]},{"pos":[183090,183102],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[183108,183125],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[183127,183215]},{"pos":[183268,183278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[183280,183283]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[183286,183356]},{"pos":[183363,183375],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[183377,183444]},{"pos":[183450,183471],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[183473,183528]},{"pos":[183572,183584],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[183586,183649]},{"pos":[183655,183668],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[183670,183709]},{"pos":[183762,183772],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183774,183779]},{"content":"mode","pos":[183793,183797]},{"pos":[183806,183818],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[183820,183856]},{"pos":[183863,183870],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[183872,183979]},{"content":"Mode.","pos":[183983,183988]},{"content":"Height calculation.","pos":[184002,184021]},{"content":"-1 Exact.","pos":[184209,184218]},{"content":"The exact height in pixels of the controls is used.","pos":[184228,184279]},{"content":"0 Auto.","pos":[184322,184329]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[184341,184430]},{"content":"1 Column height.","pos":[184435,184451]},{"content":"The layout of the form determines the height of the control.","pos":[184454,184514]},{"content":"The height and height calculation mode can be set separately.","pos":[184547,184608]},{"pos":[184614,184631],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[184633,184695]},{"pos":[184742,184752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[184754,184759]},{"pos":[184768,184780],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[184782,184803]},{"pos":[184810,184817],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[184819,184873]},{"content":"Mode.","pos":[184877,184882]},{"content":"Height Calculation.","pos":[184894,184913]},{"content":"Exact.","pos":[185099,185105]},{"content":"The exact height in pixels of the controls is used.","pos":[185116,185167]},{"content":"Auto.","pos":[185210,185215]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[185227,185316]},{"content":"Column height.","pos":[185321,185335]},{"content":"The layout of the form determines the height of the control.","pos":[185338,185398]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[185431,185516]},{"pos":[185522,185540],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[185542,185581]},{"pos":[185629,185639],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[185641,185646]},{"pos":[185655,185667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[185669,185690]},{"pos":[185697,185704],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[185706,185796]},{"pos":[185802,185818],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[185820,185860]},{"pos":[185895,185907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[185909,185997]},{"pos":[186004,186011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[186013,186083]},{"content":"Use the helpText method to set the value of the Help text.","pos":[186084,186142]},{"pos":[186148,186163],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[186165,186269]},{"pos":[186314,186324],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[186326,186331]},{"pos":[186340,186352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[186354,186409]},{"pos":[186416,186423],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.","pos":[186425,186538]},{"pos":[186544,186566],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[186568,186631]},{"pos":[186683,186693],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[186695,186700]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[186703,186770]},{"pos":[186777,186789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[186791,186841]},{"pos":[186847,186858],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[186860,186905]},{"pos":[186935,186947],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[186949,186976]},{"pos":[186983,186990],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[186992,187036]},{"pos":[187042,187056],"content":"Method iMEMode","linkify":"Method iMEMode","nodes":[{"content":"Method iMEMode","pos":[0,14]}]},{"pos":[187100,187110],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[187112,187117]},{"pos":[187126,187138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[187144,187162],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[187203,187215],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[187221,187239],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[187241,187307]},{"pos":[187348,187360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[187362,187413]},{"pos":[187420,187427],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[187429,187497]},{"pos":[187503,187522],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[187524,187591]},{"pos":[187633,187645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[187647,187699]},{"pos":[187705,187730],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[187732,187831]},{"pos":[187900,187910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[187912,187929]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control; optional.","pos":[187932,188070]},{"pos":[188077,188089],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that specified by the neededSetupRights parameter; otherwise, false.","pos":[188091,188247]},{"pos":[188254,188261],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[188263,188340]},{"content":"FormAllowUserSetup::No 0","pos":[188680,188704]},{"content":"No changes can be made to the control.","pos":[188715,188753]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[188754,188843]},{"content":"FormAllowUserSetup::Restricted 1","pos":[188848,188880]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[188883,188975]},{"content":"The user cannot move the control.","pos":[188976,189009]},{"content":"FormAllowUserSetup::Yes 2","pos":[189016,189041]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[189051,189143]},{"content":"The user can also move the control.","pos":[189144,189179]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[189183,189372]},{"pos":[189378,189392],"content":"Method isValid","linkify":"Method isValid","nodes":[{"content":"Method isValid","pos":[0,14]}]},{"pos":[189429,189441],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[189447,189460],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[189511,189521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189523,189528]},{"pos":[189537,189549],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[189555,189567],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[189569,189606]},{"pos":[189648,189658],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189660,189665]},{"pos":[189674,189686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[189688,189726]},{"pos":[189733,189740],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[189742,189874]},{"pos":[189880,189901],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[189952,189962],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189964,189969]},{"pos":[189978,189990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[189996,190012],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[190058,190068],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190070,190075]},{"pos":[190084,190096],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190102,190126],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[190180,190190],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190192,190197]},{"pos":[190206,190218],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190224,190240],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[190286,190296],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190298,190303]},{"pos":[190312,190324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190330,190350],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[190400,190410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190412,190417]},{"pos":[190426,190438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190444,190471],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[190528,190538],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190540,190545]},{"pos":[190554,190566],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190572,190589],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[190636,190646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190648,190653]},{"pos":[190662,190674],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190680,190698],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[190756,190766],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190768,190773]},{"content":"mode","pos":[190787,190791]},{"pos":[190800,190812],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190818,190840],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[190892,190902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190904,190909]},{"pos":[190918,190930],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190936,190959],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[191012,191022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191024,191029]},{"pos":[191038,191050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[191056,191074],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[191130,191140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191142,191147]},{"pos":[191156,191168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[191174,191199],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"pos":[191296,191306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[191308,191309]},{"content":"y","pos":[191323,191324]},{"content":"button","pos":[191338,191344]},{"content":"Ctrl","pos":[191358,191362]},{"content":"Shift","pos":[191376,191381]},{"pos":[191390,191402],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[191408,191429],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"pos":[191522,191532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[191534,191535]},{"content":"y","pos":[191549,191550]},{"content":"button","pos":[191564,191570]},{"content":"Ctrl","pos":[191584,191588]},{"content":"Shift","pos":[191602,191607]},{"pos":[191616,191628],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[191634,191653],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"pos":[191744,191754],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[191756,191757]},{"content":"y","pos":[191771,191772]},{"content":"button","pos":[191786,191792]},{"content":"Ctrl","pos":[191806,191810]},{"content":"Shift","pos":[191824,191829]},{"pos":[191838,191850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[191856,191876],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[191926,191936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191938,191943]},{"pos":[191952,191964],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[191970,191991],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[192050,192060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192062,192067]},{"pos":[192076,192088],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[192094,192111],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[192168,192178],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192180,192185]},{"content":"mode","pos":[192199,192203]},{"pos":[192212,192224],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[192230,192251],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[192302,192312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192314,192319]},{"pos":[192328,192340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[192346,192368],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[192420,192430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192432,192437]},{"pos":[192446,192458],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[192464,192476],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[192511,192523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[192529,192540],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[192542,192606]},{"pos":[192657,192667],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192669,192674]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[192677,192763]},{"content":"mode","pos":[192775,192779]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[192782,192868]},{"pos":[192875,192887],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[192889,192940]},{"pos":[192946,192961],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[192963,193024]},{"pos":[193069,193079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[193081,193086]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[193089,193175]},{"pos":[193182,193194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[193196,193252]},{"pos":[193258,193274],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[193276,193340]},{"pos":[193386,193396],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[193398,193403]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[193406,193487]},{"pos":[193494,193506],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[193508,193559]},{"pos":[193565,193581],"content":"Method limitText","linkify":"Method limitText","nodes":[{"content":"Method limitText","pos":[0,16]}]},{"pos":[193644,193654],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[193656,193661]},{"content":"mode","pos":[193675,193679]},{"pos":[193688,193700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[193706,193726],"content":"Method limitTextMode","linkify":"Method limitTextMode","nodes":[{"content":"Method limitTextMode","pos":[0,20]}]},{"pos":[193785,193795],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[193797,193801]},{"pos":[193810,193822],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[193828,193849],"content":"Method limitTextValue","linkify":"Method limitTextValue","nodes":[{"content":"Method limitTextValue","pos":[0,21]}]},{"pos":[193900,193910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[193912,193917]},{"pos":[193926,193938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[193944,193963],"content":"Method lineFromChar","linkify":"Method lineFromChar","nodes":[{"content":"Method lineFromChar","pos":[0,19]}]},{"pos":[194014,194024],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[194026,194035]},{"pos":[194044,194056],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194062,194078],"content":"Method lineIndex","linkify":"Method lineIndex","nodes":[{"content":"Method lineIndex","pos":[0,16]}]},{"pos":[194123,194133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[194135,194141]},{"pos":[194150,194162],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194168,194185],"content":"Method lineLength","linkify":"Method lineLength","nodes":[{"content":"Method lineLength","pos":[0,17]}]},{"pos":[194231,194241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[194243,194249]},{"pos":[194258,194270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194276,194295],"content":"Method lookupButton","linkify":"Method lookupButton","nodes":[{"content":"Method lookupButton","pos":[0,19]}]},{"pos":[194344,194354],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194356,194361]},{"pos":[194370,194382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194388,194404],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[194458,194468],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194470,194475]},{"pos":[194484,194496],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194502,194522],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[194524,194577]},{"pos":[194635,194645],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194647,194652]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[194655,194749]},{"pos":[194756,194768],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[194770,194843]},{"pos":[194849,194868],"content":"Method maxDateLabel","linkify":"Method maxDateLabel","nodes":[{"content":"Method maxDateLabel","pos":[0,19]}]},{"pos":[194917,194927],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194929,194934]},{"pos":[194943,194955],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194961,194984],"content":"Method maxDateLabelText","linkify":"Method maxDateLabelText","nodes":[{"content":"Method maxDateLabelText","pos":[0,23]}]},{"pos":[195026,195038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[195044,195059],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[195097,195109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[195115,195135],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[195137,195194]},{"pos":[195286,195296],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[195298,195299]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[195302,195363]},{"content":"y","pos":[195375,195376]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[195379,195440]},{"content":"button","pos":[195452,195458]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[195461,195522]},{"content":"Ctrl","pos":[195534,195538]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[195541,195602]},{"content":"Shift","pos":[195614,195619]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[195622,195683]},{"pos":[195690,195702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[195704,195743]},{"pos":[195750,195757],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[195759,195863]},{"pos":[195869,195885],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[195887,195952]},{"pos":[196040,196050],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[196052,196053]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[196056,196117]},{"content":"y","pos":[196129,196130]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[196133,196194]},{"content":"button","pos":[196206,196212]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[196215,196276]},{"content":"Ctrl","pos":[196288,196292]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[196295,196356]},{"content":"Shift","pos":[196368,196373]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[196376,196437]},{"pos":[196444,196456],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[196458,196497]},{"pos":[196504,196511],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[196513,196617]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[196618,196753]},{"pos":[196759,196775],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[196777,196842]},{"pos":[196930,196940],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[196942,196943]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[196946,197007]},{"content":"y","pos":[197019,197020]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[197023,197084]},{"content":"button","pos":[197096,197102]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[197105,197166]},{"content":"Ctrl","pos":[197178,197182]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[197185,197246]},{"content":"Shift","pos":[197258,197263]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[197266,197327]},{"pos":[197334,197346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[197348,197387]},{"pos":[197394,197401],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[197403,197507]},{"pos":[197513,197527],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[197529,197601]},{"pos":[197687,197697],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[197699,197700]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[197703,197764]},{"content":"y","pos":[197776,197777]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[197780,197841]},{"content":"button","pos":[197853,197859]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[197862,197923]},{"content":"Ctrl","pos":[197935,197939]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[197942,198003]},{"content":"Shift","pos":[198015,198020]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[198023,198084]},{"pos":[198091,198103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[198105,198144]},{"pos":[198151,198158],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[198160,198264]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[198265,198400]},{"pos":[198406,198417],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.","pos":[198419,198555]},{"pos":[198596,198606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[198608,198613]},{"content":"The name to assign to the control; optional.","pos":[198616,198660]},{"pos":[198667,198679],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[198681,198745]},{"pos":[198752,198759],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[198761,198855]},{"content":"It must start with a letter.","pos":[198861,198889]},{"content":"It cannot exceed 250 characters.","pos":[198894,198926]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[198931,198985],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[198990,199030]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[199035,199145]},{"pos":[199151,199174],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[199227,199237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[199239,199244]},{"pos":[199253,199265],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[199271,199298],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[199350,199362],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[199368,199388],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[199390,199435]},{"pos":[199482,199494],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[199496,199531]},{"pos":[199537,199555],"content":"Method posFromChar","linkify":"Method posFromChar","nodes":[{"content":"Method posFromChar","pos":[0,18]}]},{"pos":[199611,199621],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[199623,199632]},{"pos":[199641,199653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[199659,199680],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[199731,199741],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[199743,199748]},{"pos":[199757,199769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[199775,199792],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[199839,199849],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[199851,199856]},{"pos":[199865,199877],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[199883,199905],"content":"Method replaceOnLookup","linkify":"Method replaceOnLookup","nodes":[{"content":"Method replaceOnLookup","pos":[0,22]}]},{"pos":[199965,199975],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[199977,199982]},{"pos":[199991,200003],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[200009,200032],"content":"Method searchAfterInput","linkify":"Method searchAfterInput","nodes":[{"content":"Method searchAfterInput","pos":[0,23]}]},{"pos":[200085,200095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200097,200102]},{"pos":[200111,200123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[200129,200146],"content":"Method searchMode","linkify":"Method searchMode","nodes":[{"content":"Method searchMode","pos":[0,17]}]},{"pos":[200193,200203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200205,200210]},{"pos":[200219,200231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[200237,200255],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[200257,200316]},{"pos":[200384,200394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200396,200401]},{"content":"The ID of the security key to assign to the control; optional.","pos":[200404,200466]},{"pos":[200473,200485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[200487,200586]},{"pos":[200592,200614],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[200616,200656]},{"pos":[200711,200721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[200723,200733]},{"content":"The ID of the menu to show.","pos":[200736,200763]},{"pos":[200770,200782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[200784,200843]},{"pos":[200849,200865],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[200919,200929],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200931,200936]},{"pos":[200945,200957],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[200963,200974],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[200976,201103]},{"pos":[201152,201162],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201164,201169]},{"content":"The value to assign to the skip property of the control; optional.","pos":[201172,201238]},{"pos":[201245,201257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[201259,201365]},{"pos":[201371,201382],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[201437,201447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[201449,201462]},{"pos":[201471,201483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201489,201501],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[201543,201553],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201555,201560]},{"pos":[201569,201581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201587,201601],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[201603,201646]},{"pos":[201679,201691],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[201693,201795]},{"pos":[201802,201809],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[201811,201883]},{"pos":[201889,201899],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[201901,201963]},{"pos":[202013,202023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202025,202030]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[202033,202117]},{"content":"mode","pos":[202129,202133]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[202136,202220]},{"pos":[202227,202239],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[202241,202290]},{"pos":[202296,202310],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[202312,202371]},{"pos":[202415,202425],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202427,202432]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[202435,202519]},{"pos":[202526,202538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[202540,202594]},{"pos":[202600,202615],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[202617,202679]},{"pos":[202724,202734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202736,202741]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[202744,202823]},{"pos":[202830,202842],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[202844,202893]},{"pos":[202899,202910],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[202951,202961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202963,202968]},{"pos":[202977,202989],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202995,203011],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[203013,203080]},{"pos":[203134,203144],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203146,203151]},{"content":"The value to assign to the underline property of the control; optional.","pos":[203154,203225]},{"pos":[203232,203244],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[203246,203310]},{"pos":[203316,203343],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[203407,203417],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[203419,203423]},{"pos":[203432,203444],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203450,203465],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[203467,203510]},{"pos":[203555,203565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203567,203572]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[203575,203647]},{"pos":[203654,203666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[203668,203698]},{"pos":[203704,203723],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[203725,203773]},{"pos":[203822,203832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203834,203839]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[203842,203919]},{"pos":[203926,203938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[203940,203975]},{"pos":[203981,204001],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[204003,204062]},{"pos":[204112,204122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204124,204129]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[204132,204220]},{"pos":[204227,204239],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[204241,204287]},{"pos":[204293,204311],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[204313,204396]},{"pos":[204444,204454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204456,204461]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[204464,204544]},{"pos":[204551,204563],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[204565,204621]},{"pos":[204627,204652],"content":"Method userFastTabSummary","linkify":"Method userFastTabSummary","nodes":[{"content":"Method userFastTabSummary","pos":[0,25]}]},{"pos":[204707,204717],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204719,204724]},{"pos":[204733,204745],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[204751,204768],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[204770,204822]},{"pos":[204869,204879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204881,204886]},{"content":"The user height for the control; optional.","pos":[204889,204931]},{"pos":[204938,204950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[204952,204991]},{"pos":[204997,205012],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[205014,205096]},{"pos":[205141,205151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[205153,205158]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[205161,205240]},{"pos":[205247,205259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[205261,205316]},{"pos":[205323,205330],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[205332,205502]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[205503,205578]},{"content":"This method lets you programmatically determine and set the value.","pos":[205579,205645]},{"pos":[205651,205674],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[205676,205732]},{"pos":[205785,205795],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[205797,205802]},{"content":"The organization container to set for the control; optional.","pos":[205805,205865]},{"pos":[205872,205884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[205886,205929]},{"pos":[205935,205956],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[205958,206012]},{"pos":[206063,206073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206075,206080]},{"content":"The organization sibling to set for the control; optional.","pos":[206083,206141]},{"pos":[206148,206160],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[206162,206203]},{"pos":[206209,206230],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[206232,206281]},{"pos":[206332,206342],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206344,206349]},{"content":"The user label text to set for the control; optional.","pos":[206352,206405]},{"pos":[206412,206424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[206426,206462]},{"pos":[206468,206492],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[206494,206547]},{"pos":[206601,206611],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206613,206618]},{"content":"The user security level to set for the control; optional.","pos":[206621,206678]},{"pos":[206685,206697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[206699,206739]},{"pos":[206745,206760],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[206762,206910]},{"pos":[206955,206965],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206967,206972]},{"content":"The value to assign to the userSkip property; optional.","pos":[206975,207030]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[207031,207126]},{"pos":[207133,207145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[207147,207216]},{"pos":[207222,207238],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[207240,207291]},{"pos":[207337,207347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207349,207354]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[207357,207423]},{"pos":[207430,207442],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[207444,207573]},{"pos":[207580,207587],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[207589,207683]},{"content":"For example, if the user has specified 30 characters as the width for the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[207684,207801],"source":" For example, if the user has specified 30 characters as the width for the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[207802,207952]},{"pos":[207958,207973],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[208011,208023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208029,208051],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[208053,208114]},{"pos":[208183,208193],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208195,208200]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[208203,208280]},{"content":"mode","pos":[208292,208296]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[208299,208376]},{"pos":[208383,208395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[208397,208445]},{"pos":[208451,208477],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[208479,208538]},{"pos":[208603,208613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[208615,208619]},{"pos":[208628,208640],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[208642,208696]},{"pos":[208702,208729],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[208731,208792]},{"pos":[208849,208859],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208861,208866]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[208869,208947]},{"pos":[208954,208966],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[208968,209016]},{"pos":[209022,209041],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[209090,209100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[209102,209107]},{"pos":[209116,209128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[209134,209148],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[209150,209220]},{"pos":[209272,209282],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[209284,209289]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[209292,209364]},{"pos":[209371,209383],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[209385,209434]},{"pos":[209440,209452],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[209454,209492]},{"pos":[209544,209554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[209556,209561]},{"content":"mode","pos":[209575,209579]},{"pos":[209588,209600],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[209602,209637]},{"pos":[209644,209651],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[209653,209759]},{"content":"Mode.","pos":[209763,209768]},{"content":"Width calculation.","pos":[209781,209799]},{"content":"-1 Exact.","pos":[209985,209994]},{"content":"The exact width in pixels of the controls is used.","pos":[210003,210053]},{"content":"0 Auto.","pos":[210096,210103]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[210114,210202]},{"content":"1 Column width.","pos":[210207,210222]},{"content":"The layout of the form determines the width of the control.","pos":[210225,210284]},{"content":"The width and width calculation mode can be set separately.","pos":[210317,210376]},{"pos":[210382,210398],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[210400,210462]},{"pos":[210508,210518],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210520,210525]},{"pos":[210534,210546],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[210548,210609]},{"pos":[210616,210623],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[210625,210678]},{"content":"Mode.","pos":[210682,210687]},{"content":"Width Calculation.","pos":[210698,210716]},{"content":"Exact.","pos":[210900,210906]},{"content":"The exact width in pixels of the controls is used.","pos":[210916,210966]},{"content":"Auto.","pos":[211009,211014]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[211025,211113]},{"content":"Column width.","pos":[211118,211131]},{"content":"The layout of the form determines the width of the control.","pos":[211134,211193]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[211226,211309]},{"pos":[211315,211332],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[211334,211372]},{"pos":[211419,211429],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[211431,211436]},{"pos":[211445,211457],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[211459,211494]},{"pos":[211501,211508],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[211510,211583]},{"pos":[211589,211605],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[211607,211703]},{"pos":[211738,211748],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[211750,211783]},{"pos":[211812,211830],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[211915,211925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[211927,211933]},{"content":"e","pos":[211947,211948]},{"pos":[211956,211975],"content":"Method scrollCursor","linkify":"Method scrollCursor","nodes":[{"content":"Method scrollCursor","pos":[0,19]}]},{"pos":[212013,212030],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[212032,212102]},{"pos":[212192,212202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[212204,212205]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[212208,212269]},{"content":"y","pos":[212281,212282]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[212285,212346]},{"content":"button","pos":[212358,212364]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[212367,212428]},{"content":"Ctrl","pos":[212440,212444]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[212447,212508]},{"content":"Shift","pos":[212520,212525]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[212528,212589]},{"pos":[212595,212606],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[212608,212660]},{"pos":[212690,212705],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[212707,212753]},{"pos":[212787,212806],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[212892,212902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[212904,212910]},{"content":"e","pos":[212924,212925]},{"pos":[212933,212957],"content":"Method performTypeLookup","linkify":"Method performTypeLookup","nodes":[{"content":"Method performTypeLookup","pos":[0,24]}]},{"pos":[213063,213073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userType","pos":[213075,213083]},{"content":"arrayIndex","pos":[213097,213107]},{"content":"company","pos":[213121,213128]},{"pos":[213136,213153],"content":"Method lineScroll","linkify":"Method lineScroll","nodes":[{"content":"Method lineScroll","pos":[0,17]}]},{"pos":[213204,213214],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dx","pos":[213216,213218]},{"content":"dy","pos":[213232,213234]},{"pos":[213242,213261],"content":"Method setSelection","linkify":"Method setSelection","nodes":[{"content":"Method setSelection","pos":[0,19]}]},{"pos":[213334,213344],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndexFrom","pos":[213346,213359]},{"content":"charIndexTo","pos":[213373,213384]},{"pos":[213392,213409],"content":"Method textChange","linkify":"Method textChange","nodes":[{"content":"Method textChange","pos":[0,17]}]},{"pos":[213445,213459],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[213540,213550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[213552,213558]},{"content":"e","pos":[213572,213573]},{"pos":[213581,213597],"content":"Method pasteText","linkify":"Method pasteText","nodes":[{"content":"Method pasteText","pos":[0,16]}]},{"pos":[213666,213676],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pasteStr","pos":[213678,213686]},{"content":"InsertSel","pos":[213700,213709]},{"pos":[213717,213733],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[213735,213777]},{"pos":[213812,213826],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[213859,213877],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[213962,213972],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[213974,213980]},{"content":"e","pos":[213994,213995]},{"pos":[214003,214018],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[214100,214110],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[214112,214118]},{"content":"e","pos":[214132,214133]},{"pos":[214141,214160],"content":"Method setCursorPos","linkify":"Method setCursorPos","nodes":[{"content":"Method setCursorPos","pos":[0,19]}]},{"pos":[214211,214221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[214223,214224]},{"content":"y","pos":[214238,214239]},{"pos":[214247,214258],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[214260,214358]},{"pos":[214444,214454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[214456,214466]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[214469,214554]},{"content":"dragMode","pos":[214566,214574]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[214577,214662]},{"content":"x","pos":[214674,214675]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[214678,214763]},{"content":"y","pos":[214775,214776]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[214779,214864]},{"pos":[214870,214886],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[214969,214979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[214981,214987]},{"content":"e","pos":[215001,215002]},{"pos":[215010,215027],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[215029,215083]},{"pos":[215119,215141],"content":"Method performDBLookup","linkify":"Method performDBLookup","nodes":[{"content":"Method performDBLookup","pos":[0,22]}]},{"pos":[215249,215259],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[215261,215268]},{"content":"tableId","pos":[215282,215289]},{"content":"company","pos":[215303,215310]},{"pos":[215318,215331],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[215363,215377],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[215379,215440]},{"pos":[215474,215481],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[215483,215611]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[215612,215716]},{"pos":[215722,215733],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[215763,215777],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[215779,215819]},{"pos":[215852,215875],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[215877,215918]},{"pos":[215960,215977],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[216061,216071],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[216073,216079]},{"content":"e","pos":[216093,216094]},{"pos":[216102,216114],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[216116,216170]},{"pos":[216201,216218],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[216302,216312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[216314,216320]},{"content":"e","pos":[216334,216335]},{"pos":[216343,216356],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[216358,216458]},{"pos":[216540,216550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[216552,216562]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[216565,216650]},{"content":"dragMode","pos":[216662,216670]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[216673,216758]},{"content":"x","pos":[216770,216771]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[216774,216859]},{"content":"y","pos":[216871,216872]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[216875,216960]},{"pos":[216966,216981],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[216983,217013]},{"pos":[217047,217068],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[217070,217139]},{"pos":[217201,217211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[217213,217218]},{"content":"The preferred height of the control.","pos":[217221,217257]},{"content":"height","pos":[217269,217275]},{"content":"The preferred height of the control.","pos":[217278,217314]},{"pos":[217320,217332],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[217363,217376],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[217424,217434],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[217436,217445]},{"pos":[217453,217471],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[217473,217544]},{"pos":[217595,217605],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[217607,217616]},{"content":"The string value to use to filter data; optional.","pos":[217619,217668]},{"pos":[217674,217703],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[217821,217831],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[217833,217849]},{"content":"objectMethodToCall","pos":[217863,217881]},{"content":"overrideObject","pos":[217895,217909]},{"pos":[217917,217941],"content":"Method performFormLookup","linkify":"Method performFormLookup","nodes":[{"content":"Method performFormLookup","pos":[0,24]}]},{"pos":[217998,218008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[218010,218014]},{"pos":[218022,218043],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[218045,218066]},{"pos":[218105,218130],"content":"Class FormDateTimeControl","linkify":"Class FormDateTimeControl","nodes":[{"content":"Class FormDateTimeControl","pos":[0,25]}]},{"pos":[218186,218193],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[218199,218207],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[218213,218220],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[218224,218230]},{"content":"Description","pos":[218334,218345]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[218788,218834],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[218898,218938]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[219070,219105],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[219352,219395],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[219462,219529]},{"content":"public boolean allowSysSetup()","pos":[219634,219664]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[219744,219827]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[219916,219952],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[220198,220247],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[220308,220406]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[220480,220521],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[220590,220639]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[220762,220797],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[220872,220934]},{"content":"public int beginDrag(int x, int y)","pos":[221044,221078]},{"content":"Is called when the user starts to drag a form control.","pos":[221154,221208]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[221326,221356],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[221436,221503]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[221608,221640],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[221718,221774]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[221890,221931],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[222172,222226]},{"content":"Retrieves the size of the control.","pos":[222282,222316]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[222454,222492],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[222564,222607]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[222736,222773],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[222846,222891]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[223018,223090],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[223128,223195]},{"content":"public List configurationKeyEx()","pos":[223300,223332]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[223410,223506]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[223582,223626],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[223692,223770]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[223864,223923],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[224146,224189],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[224428,224464],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[224710,224752],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[224820,224945]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[224992,225032],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[225102,225167]},{"content":"public int dateDay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[225274,225307],"source":"public int dateDay(\\[int value\\])"},{"content":"public int dateFormat(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[225556,225592],"source":"public int dateFormat(\\[int value\\])"},{"content":"public int dateMonth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[225838,225873],"source":"public int dateMonth(\\[int value\\])"},{"content":"public int dateSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[226120,226159],"source":"public int dateSeparator(\\[int value\\])"},{"content":"public DateTime dateTimeValue(<ph id=\"ph1\">\\[</ph>DateTime value<ph id=\"ph2\">\\]</ph>)","pos":[226402,226451],"source":"public DateTime dateTimeValue(\\[DateTime value\\])"},{"content":"public int dateYear(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[226684,226718],"source":"public int dateYear(\\[int value\\])"},{"content":"public int displayOption(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[226966,227005],"source":"public int displayOption(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[227248,227287],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both.","pos":[227358,227527]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[227532,227566],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[227642,227723]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[227814,227895]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[227924,228018]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[228096,228173]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[228206,228302]},{"content":"public str dragText()","pos":[228378,228399]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[228488,228558]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[228660,228701],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[228770,228821]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[228942,229006],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[229224,229264],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[229506,229536],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[229616,229673]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[229788,229822],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[229898,229955]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[230070,230111],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[230180,230231]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[230352,230394],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[230462,230550]},{"content":"public boolean hasUserSetting()","pos":[230634,230665]},{"content":"Indicates whether the control has custom user settings.","pos":[230744,230799]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[230916,230958],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[231026,231065]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[231198,231234],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[231308,231370]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[231480,231517],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[231590,231629]},{"content":"public str helpField()","pos":[231762,231784]},{"content":"Retrieves the Help text for the control.","pos":[231872,231912]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[232044,232078],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[232154,232258]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[232326,232367],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[232436,232499]},{"content":"public int hWnd()","pos":[232608,232625]},{"content":"Retrieves the Windows handle for the control.","pos":[232718,232763]},{"content":"public boolean isContainer()","pos":[232890,232918]},{"content":"public boolean isDisplayed()","pos":[233172,233200]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[233282,233348]},{"content":"public boolean isRestricted()","pos":[233454,233483]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[233564,233631]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[233736,233792]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[233846,233945]},{"content":"public boolean isValid()","pos":[234018,234042]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[234300,234340],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[234582,234613],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[234692,234729]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[234864,234904],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[235146,235181],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[235428,235471],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[235710,235745],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[235992,236031],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[236274,236320],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[236556,236592],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[236838,236885],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[237120,237161],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[237402,237444],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[237684,237729],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[237966,238050]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[238248,238328]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[238530,238608]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[238812,238851],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[239094,239142],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[239376,239422],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[239658,239698],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[239940,239981],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[240222,240244]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[240504,240544],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[240614,240678]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[240786,240820],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[240896,240957]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[241068,241103],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[241178,241242]},{"content":"public int limitText(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[241350,241404],"source":"public int limitText(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode limitTextMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[241632,241680],"source":"public AutoMode limitTextMode(\\[AutoMode mode\\])"},{"content":"public int limitTextValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[241914,241954],"source":"public int limitTextValue(\\[int value\\])"},{"content":"public int lookupButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[242196,242234],"source":"public int lookupButton(\\[int value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[242478,242521],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[242760,242807],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[242870,242923]},{"content":"public str maxDateLabel(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[243042,243080],"source":"public str maxDateLabel(\\[str value\\])"},{"content":"public str maxDateLabelText()","pos":[243324,243353]},{"content":"public boolean modified()","pos":[243606,243631]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[243888,243967]},{"content":"Is called when the control is double-clicked by the user.","pos":[243998,244055]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[244170,244245]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[244280,244345]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[244452,244527]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[244562,244627]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[244734,244807]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[244844,244916]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[245016,245046],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.","pos":[245126,245262]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[245299,245341],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[245581,245620]},{"content":"public FormControl parentControl()","pos":[245863,245897]},{"content":"Retrieves the parent control for the control.","pos":[245973,246018]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[246145,246185],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[246427,246463],"source":"public int promptrect(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[246709,246766],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[246819,246878]},{"content":"public int showContextMenu(int menuHandle)","pos":[246991,247033]},{"content":"Shows the shortcut menu for the control.","pos":[247101,247141]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[247273,247316],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[247555,247593],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[247665,247792]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[247837,247881],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int timeFormat(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[248119,248155],"source":"public int timeFormat(\\[int value\\])"},{"content":"public int timeHours(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[248401,248436],"source":"public int timeHours(\\[int value\\])"},{"content":"public int timeMinute(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[248683,248719],"source":"public int timeMinute(\\[int value\\])"},{"content":"public int timeSeconds(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[248965,249002],"source":"public int timeSeconds(\\[int value\\])"},{"content":"public int timeSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[249247,249286],"source":"public int timeSeparator(\\[int value\\])"},{"content":"public Timezone timeZone(<ph id=\"ph1\">\\[</ph>Timezone timeZone<ph id=\"ph2\">\\]</ph>)","pos":[249529,249576],"source":"public Timezone timeZone(\\[Timezone timeZone\\])"},{"content":"public int timeZoneIndicator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[249811,249854],"source":"public int timeZoneIndicator(\\[int value\\])"},{"content":"public int timezonePreference(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[250093,250137],"source":"public int timezonePreference(\\[int value\\])"},{"content":"public str toolTip()","pos":[250375,250395]},{"content":"Retrieves the tooltip text for the control.","pos":[250485,250528]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[250657,250696],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[250767,250829]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[250939,250972],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[251049,251108]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[251221,251255],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[251331,251393]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[251503,251533],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[251785,251828],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[252067,252118]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[252349,252383],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[252459,252502]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[252631,252669],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[252741,252789]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[252913,252952],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[253023,253082]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[253195,253232],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[253305,253388]},{"content":"public int userFastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[253477,253521],"source":"public int userFastTabSummary(\\[int value\\])"},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[253759,253795],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[253869,253921]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[254041,254075],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[254151,254233]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[254323,254365],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[254433,254489]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[254605,254645],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[254715,254769]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[254887,254927],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[254997,255046]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[255169,255212],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[255279,255332]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[255451,255485],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[255561,255709]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[255733,255768],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[255843,255894]},{"content":"public boolean validate()","pos":[256015,256040]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[256297,256357],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[256407,256468]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[256579,256633],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[256689,256748]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[256861,256907],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[256971,257032]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[257143,257181],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[257425,257466],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[257535,257605]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[257707,257748],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[257817,257855]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[257989,258024],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[258099,258161]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[258271,258307],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[258381,258419]},{"content":"public void gotFocus()","pos":[258553,258575]},{"content":"Indicates that the control has received focus.","pos":[258663,258709]},{"content":"public void paste()","pos":[258835,258854]},{"content":"Pastes the contents of the clipboard into the control.","pos":[258945,258999]},{"content":"public void performTypeLookup(<ph id=\"ph1\">\\[</ph>int userType<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[259117,259216],"source":"public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])"},{"content":"public void copy()","pos":[259399,259417]},{"content":"Copies the contents of the control to the clipboard.","pos":[259509,259561]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[259681,259754]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[259791,259889]},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[259963,260040],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void cut()","pos":[260245,260262]},{"content":"Cuts the contents of the control.","pos":[260355,260388]},{"content":"public void endDrag()","pos":[260527,260548]},{"content":"Is called when the user has finished dragging a form control.","pos":[260637,260698]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[260809,260886]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[260919,260989]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[261091,261163],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void timeTextChange()","pos":[261373,261401]},{"content":"public void performDBLookup(<ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>TableId tableId<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[261655,261756],"source":"public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])"},{"content":"public void dateTextChange()","pos":[261937,261965]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[262219,262295],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void prefColumnSize(int width, int height)","pos":[262501,262550]},{"content":"Specifies the preferred column width and height for the form control.","pos":[262611,262680]},{"content":"public void displayControl()","pos":[262783,262811]},{"content":"Displays the control.","pos":[262893,262914]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[263065,263172],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void lostFocus()","pos":[263347,263370]},{"content":"Indicates that the control has lost focus.","pos":[263457,263499]},{"content":"public void inputSearch(str searchStr)","pos":[263629,263667]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[263739,263810]},{"content":"public void mouseLeave()","pos":[263911,263935]},{"content":"Indicates that the mouse pointer has left the control.","pos":[264021,264075]},{"content":"public void enter()","pos":[264193,264212]},{"content":"public void setFocus()","pos":[264475,264497]},{"content":"Sets the focus on the control.","pos":[264585,264615]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[264757,264826]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[264867,264967]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[265039,265076],"source":"public void filter(\\[str filterStr\\])"},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[265321,265397],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void performFormLookup(xFormRun form)","pos":[265603,265647]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[265885,265959],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void lookup()","pos":[266167,266187]},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[266449,266522],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dragLeave()","pos":[266731,266754]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[266841,266937]},{"content":"public void resetUserSetting()","pos":[267013,267043]},{"content":"Resets the user settings for the control.","pos":[267123,267164]},{"content":"public void context()","pos":[267295,267316]},{"content":"Shows the shortcut menu for the control.","pos":[267405,267445]},{"content":"public void undo()","pos":[267577,267595]},{"content":"public void setUTCString(str UTC<ph id=\"ph1\">\\_</ph>Formatted String)","pos":[267859,267910],"source":"public void setUTCString(str UTC\\_Formatted String)"},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[268141,268216],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void jumpRef()","pos":[268423,268444]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[268705,268780],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"pos":[268990,269009],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[269011,269051]},{"pos":[269108,269118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[269120,269125]},{"content":"The new value for the property; optional.","pos":[269128,269169]},{"pos":[269176,269188],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[269190,269246]},{"pos":[269253,269260],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[269262,269341]},{"pos":[269347,269363],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[269409,269419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[269421,269426]},{"pos":[269435,269447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[269453,269469],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[269471,269538]},{"pos":[269592,269602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[269604,269609]},{"content":"The value to assign to the allowEdit property.","pos":[269612,269658]},{"pos":[269665,269677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[269679,269731]},{"pos":[269738,269745],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[269747,269873]},{"pos":[269879,269899],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[269901,269984]},{"pos":[270027,270039],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[270041,270109]},{"pos":[270115,270132],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[270179,270189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[270191,270196]},{"pos":[270205,270217],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[270223,270245],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[270247,270345]},{"pos":[270405,270415],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[270417,270422]},{"content":"The property is set to this value; optional.","pos":[270425,270469]},{"pos":[270476,270488],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[270490,270569]},{"pos":[270576,270583],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[270585,270622]},{"pos":[270628,270650],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[270652,270701]},{"pos":[270753,270763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[270765,270770]},{"pos":[270779,270791],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[270793,270837]},{"pos":[270844,270851],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[270853,270921]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[270927,270997]},{"content":"The second byte contains a value for green.","pos":[271002,271045]},{"content":"The third byte contains a value for blue.","pos":[271050,271091]},{"content":"The high-order byte must be zero.","pos":[271096,271129]},{"content":"The maximum value for a single byte is 255.","pos":[271134,271177]},{"pos":[271183,271199],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[271201,271263]},{"pos":[271309,271319],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[271321,271326]},{"pos":[271335,271347],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[271349,271410]},{"pos":[271416,271432],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[271434,271488]},{"pos":[271535,271545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[271547,271548]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[271551,271621]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[271622,271689]},{"content":"y","pos":[271701,271702]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[271705,271775]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[271776,271843]},{"pos":[271850,271862],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[271864,271903]},{"pos":[271910,271917],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[271919,272000]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[272001,272105]},{"pos":[272111,272122],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[272124,272191]},{"pos":[272232,272242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272244,272249]},{"pos":[272258,272270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[272272,272322]},{"pos":[272329,272336],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[272338,272410]},{"content":"0 Use the default font weight.","pos":[272416,272446]},{"content":"1 Thin.","pos":[272451,272458]},{"content":"2 Extra-light.","pos":[272463,272477]},{"content":"3 Light.","pos":[272482,272490]},{"content":"4 Normal.","pos":[272495,272504]},{"content":"5 Medium.","pos":[272509,272518]},{"content":"6 Semibold.","pos":[272523,272534]},{"content":"7 Bold.","pos":[272539,272546]},{"content":"8 Extra-bold.","pos":[272551,272564]},{"content":"9 Heavy.","pos":[272569,272577]},{"pos":[272583,272596],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[272598,272654]},{"pos":[272697,272707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272709,272714]},{"pos":[272723,272735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[272737,272781]},{"pos":[272788,272795],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[272797,272889]},{"content":"Value.","pos":[272893,272899]},{"content":"Description.","pos":[272902,272914]},{"content":"0","pos":[272945,272946]},{"content":"Auto.","pos":[272954,272959]},{"content":"1","pos":[272971,272972]},{"content":"3D.","pos":[272980,272983]},{"content":"2","pos":[272997,272998]},{"content":"Single line.","pos":[273006,273018]},{"content":"3","pos":[273023,273024]},{"content":"Flat.","pos":[273032,273037]},{"content":"4","pos":[273049,273050]},{"content":"None.","pos":[273058,273063]},{"pos":[273078,273100],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[273152,273162],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273164,273169]},{"pos":[273178,273190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273196,273218],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[273220,273254]},{"pos":[273321,273331],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[273333,273338]},{"content":"The number of lines to use to determine the height.","pos":[273341,273392]},{"content":"lines","pos":[273404,273409]},{"content":"The number of lines to use to determine the height.","pos":[273412,273463]},{"pos":[273470,273482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[273484,273530]},{"pos":[273536,273555],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[273557,273600]},{"pos":[273649,273659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273661,273666]},{"pos":[273675,273687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[273689,273751]},{"pos":[273758,273765],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[273767,273871]},{"content":"Value.","pos":[273875,273881]},{"content":"Description.","pos":[273884,273896]},{"content":"0","pos":[273943,273944]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[273952,273965],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[273977,273978]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[273986,274002],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[274011,274012]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274020,274035],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[274045,274047]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274054,274066],"source":"MAC\\_CHARSET"},{"content":"128","pos":[274079,274082]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274088,274105],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[274113,274116]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274122,274137],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[274147,274150]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274156,274171],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[274181,274184]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274190,274210],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[274215,274218]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274224,274238],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[274249,274252]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274258,274274],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[274283,274286]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274292,274311],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[274317,274320]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274326,274341],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[274351,274354]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274360,274376],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[274385,274388]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274394,274413],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[274419,274422]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274428,274440],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[274452,274540]},{"content":"Value.","pos":[274544,274550]},{"content":"Description.","pos":[274553,274565]},{"content":"130","pos":[274600,274603]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274609,274623],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[274627,274713]},{"content":"Value.","pos":[274717,274723]},{"content":"Description.","pos":[274726,274738]},{"content":"177","pos":[274775,274778]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274784,274799],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[274804,274807]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274813,274828],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[274832,274909]},{"content":"Value.","pos":[274913,274919]},{"content":"Description.","pos":[274922,274934]},{"content":"222","pos":[274967,274970]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[274976,274989],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[274993,275072]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[275073,275164],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[275165,275279]},{"pos":[275285,275303],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[275305,275350]},{"pos":[275398,275408],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275410,275415]},{"pos":[275424,275436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[275438,275481]},{"pos":[275488,275495],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[275497,275558]},{"content":"Value.","pos":[275562,275568]},{"content":"Style.","pos":[275571,275577]},{"content":"0","pos":[275650,275651]},{"content":"Default.","pos":[275659,275667]},{"content":"1","pos":[275694,275695]},{"content":"The Microsoft Windows palette.","pos":[275703,275733]},{"content":"2","pos":[275738,275739]},{"content":"The true-color scheme.","pos":[275747,275769]},{"pos":[275785,275808],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[275810,275877]},{"pos":[275960,275970],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275972,275977]},{"content":"The ID of the configuration key being assigned to the control; optional.","pos":[275980,276052]},{"pos":[276059,276071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[276073,276145]},{"pos":[276152,276159],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[276161,276242]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[276243,276336]},{"pos":[276342,276367],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[276369,276465]},{"pos":[276510,276522],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[276524,276610]},{"pos":[276617,276624],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[276626,276675]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[276676,276824]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[276825,276959]},{"pos":[276965,276990],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[276992,277070]},{"pos":[277125,277135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277137,277142]},{"content":"The string that contains the country/region codes to set; optional.","pos":[277145,277212]},{"pos":[277219,277231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[277233,277298]},{"pos":[277304,277336],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[277406,277416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277418,277423]},{"pos":[277432,277444],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277450,277466],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[277520,277530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277532,277537]},{"pos":[277546,277558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277564,277581],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[277628,277638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277640,277645]},{"pos":[277654,277666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277672,277695],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[277697,277822]},{"pos":[277875,277885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277887,277892]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[277895,277969]},{"pos":[277976,277988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[277990,278102]},{"pos":[278109,278116],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[278118,278245]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[278246,278339]},{"pos":[278345,278362],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[278364,278429]},{"pos":[278480,278490],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278492,278497]},{"pos":[278506,278518],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[278520,278565]},{"pos":[278571,278585],"content":"Method dateDay","linkify":"Method dateDay","nodes":[{"content":"Method dateDay","pos":[0,14]}]},{"pos":[278629,278639],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278641,278646]},{"pos":[278655,278667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278673,278690],"content":"Method dateFormat","linkify":"Method dateFormat","nodes":[{"content":"Method dateFormat","pos":[0,17]}]},{"pos":[278737,278747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278749,278754]},{"pos":[278763,278775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278781,278797],"content":"Method dateMonth","linkify":"Method dateMonth","nodes":[{"content":"Method dateMonth","pos":[0,16]}]},{"pos":[278843,278853],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278855,278860]},{"pos":[278869,278881],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278887,278907],"content":"Method dateSeparator","linkify":"Method dateSeparator","nodes":[{"content":"Method dateSeparator","pos":[0,20]}]},{"pos":[278957,278967],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278969,278974]},{"pos":[278983,278995],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[279001,279021],"content":"Method dateTimeValue","linkify":"Method dateTimeValue","nodes":[{"content":"Method dateTimeValue","pos":[0,20]}]},{"pos":[279081,279091],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[279093,279098]},{"pos":[279107,279119],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[279125,279140],"content":"Method dateYear","linkify":"Method dateYear","nodes":[{"content":"Method dateYear","pos":[0,15]}]},{"pos":[279185,279195],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[279197,279202]},{"pos":[279211,279223],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[279229,279249],"content":"Method displayOption","linkify":"Method displayOption","nodes":[{"content":"Method displayOption","pos":[0,20]}]},{"pos":[279299,279309],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[279311,279316]},{"pos":[279325,279337],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[279343,279363],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both.","pos":[279365,279534]},{"pos":[279584,279594],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[279596,279601]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[279604,279678]},{"pos":[279685,279697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal, or in both.","pos":[279699,279828]},{"pos":[279834,279849],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[279851,279932]},{"pos":[279977,279987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[279989,279994]},{"content":"An Integer data type that indicates whether drag-and-drop behavior is enabled; optional.","pos":[279997,280085]},{"pos":[280092,280104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[280106,280166]},{"pos":[280173,280180],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the FormControl::dragLeave method, the FormControl::dragOver method, and the FormControl::dragOverEx method to specify the behavior.","pos":[280182,280318]},{"pos":[280324,280339],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[280341,280435]},{"pos":[280529,280539],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[280541,280551]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[280554,280639]},{"content":"dragMode","pos":[280651,280659]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[280662,280747]},{"content":"x","pos":[280759,280760]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[280763,280848]},{"content":"y","pos":[280860,280861]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[280864,280949]},{"pos":[280956,280968],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[280970,281035]},{"pos":[281041,281058],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[281060,281156]},{"pos":[281246,281256],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[281258,281268]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[281271,281356]},{"content":"dragMode","pos":[281368,281376]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[281379,281464]},{"content":"x","pos":[281476,281477]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[281480,281565]},{"content":"y","pos":[281577,281578]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[281581,281666]},{"pos":[281673,281685],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[281687,281752]},{"pos":[281758,281773],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[281775,281845]},{"pos":[281879,281891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[281893,282024]},{"pos":[282030,282044],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[282046,282097]},{"pos":[282149,282159],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[282161,282166]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[282169,282241]},{"pos":[282248,282260],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[282262,282310]},{"pos":[282317,282324],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[282326,282401]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[282402,282497]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[282498,282632]},{"pos":[282638,282661],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[282736,282746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[282748,282753]},{"pos":[282762,282774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[282780,282801],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[282852,282862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[282864,282869]},{"pos":[282878,282890],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[282896,282907],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[282909,282966]},{"pos":[283007,283017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[283019,283024]},{"pos":[283033,283045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[283047,283102]},{"pos":[283108,283123],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[283125,283182]},{"pos":[283227,283237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[283239,283244]},{"pos":[283253,283265],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[283267,283300]},{"pos":[283306,283328],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[283330,283381]},{"pos":[283433,283443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[283445,283450]},{"pos":[283459,283471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[283473,283517]},{"pos":[283524,283531],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[283533,283601]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[283607,283677]},{"content":"The second byte contains a value for green.","pos":[283682,283725]},{"content":"The third byte contains a value for blue.","pos":[283730,283771]},{"content":"The high-order byte must be zero.","pos":[283776,283809]},{"content":"The maximum value for a single byte is 255.","pos":[283814,283857]},{"pos":[283863,283880],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[283882,283970]},{"pos":[284023,284033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[284035,284038]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[284041,284111]},{"pos":[284118,284130],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[284132,284199]},{"pos":[284205,284226],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[284228,284283]},{"pos":[284327,284339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[284341,284404]},{"pos":[284410,284423],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[284425,284464]},{"pos":[284517,284527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[284529,284534]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[284537,284612]},{"content":"mode","pos":[284624,284628]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[284631,284706]},{"pos":[284713,284725],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[284727,284763]},{"pos":[284770,284777],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[284779,284886]},{"content":"Mode.","pos":[284890,284895]},{"content":"Height calculation.","pos":[284909,284928]},{"content":"-1 Exact.","pos":[285116,285125]},{"content":"The exact height in pixels of the controls is used.","pos":[285135,285186]},{"content":"0 Auto.","pos":[285229,285236]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[285248,285337]},{"content":"1 Column height.","pos":[285342,285358]},{"content":"The layout of the form determines the height of the control.","pos":[285361,285421]},{"content":"The height and height calculation mode can be set separately.","pos":[285454,285515]},{"pos":[285521,285538],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[285540,285602]},{"pos":[285649,285659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285661,285666]},{"content":"An Integer data type value that indicates how control height is calculated; optional.","pos":[285669,285754]},{"pos":[285761,285773],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[285775,285796]},{"pos":[285803,285810],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[285812,285866]},{"content":"Mode.","pos":[285870,285875]},{"content":"Height Calculation.","pos":[285887,285906]},{"content":"Exact.","pos":[286092,286098]},{"content":"The exact height in pixels of the controls is used.","pos":[286109,286160]},{"content":"Auto.","pos":[286203,286208]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[286220,286309]},{"content":"Column height.","pos":[286314,286328]},{"content":"The layout of the form determines the height of the control.","pos":[286331,286391]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[286424,286509]},{"pos":[286515,286533],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[286535,286574]},{"pos":[286622,286632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[286634,286639]},{"content":"An Integer data type that specifies the height in pixels; optional.","pos":[286642,286709]},{"pos":[286716,286728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[286730,286751]},{"pos":[286758,286765],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[286767,286857]},{"pos":[286863,286879],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[286881,286921]},{"pos":[286956,286968],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[286970,287058]},{"pos":[287065,287072],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[287074,287144]},{"content":"Use the helpText method to set the value of the Help text.","pos":[287145,287203]},{"pos":[287209,287224],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[287226,287330]},{"pos":[287375,287385],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[287387,287392]},{"content":"The value that is assigned as the help text for the control.","pos":[287395,287455]},{"pos":[287462,287474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[287476,287531]},{"pos":[287538,287545],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.","pos":[287547,287660]},{"pos":[287666,287688],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[287690,287753]},{"pos":[287805,287815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[287817,287822]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[287825,287892]},{"pos":[287899,287911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[287913,287963]},{"pos":[287969,287980],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[287982,288027]},{"pos":[288057,288069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[288071,288098]},{"pos":[288105,288112],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[288114,288158]},{"pos":[288164,288182],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[288223,288235],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[288241,288259],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[288261,288327]},{"pos":[288368,288380],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[288382,288433]},{"pos":[288440,288447],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[288449,288517]},{"pos":[288523,288542],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[288544,288611]},{"pos":[288653,288665],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[288667,288719]},{"pos":[288725,288750],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[288752,288851]},{"pos":[288920,288930],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[288932,288949]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control; optional.","pos":[288952,289090]},{"pos":[289097,289109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that specified by the neededSetupRights parameter; otherwise, false.","pos":[289111,289267]},{"pos":[289274,289281],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[289283,289360]},{"content":"FormAllowUserSetup::No 0","pos":[289700,289724]},{"content":"No changes can be made to the control.","pos":[289735,289773]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[289774,289863]},{"content":"FormAllowUserSetup::Restricted 1","pos":[289868,289900]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[289903,289995]},{"content":"The user cannot move the control.","pos":[289996,290029]},{"content":"FormAllowUserSetup::Yes 2","pos":[290036,290061]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[290071,290163]},{"content":"The user can also move the control.","pos":[290164,290199]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[290203,290392]},{"pos":[290398,290412],"content":"Method isValid","linkify":"Method isValid","nodes":[{"content":"Method isValid","pos":[0,14]}]},{"pos":[290449,290461],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[290467,290480],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[290531,290541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[290543,290548]},{"pos":[290557,290569],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[290575,290587],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[290589,290626]},{"pos":[290668,290678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[290680,290685]},{"pos":[290694,290706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[290708,290746]},{"pos":[290753,290760],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[290762,290894]},{"pos":[290900,290921],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[290972,290982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[290984,290989]},{"pos":[290998,291010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[291016,291032],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[291078,291088],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[291090,291095]},{"pos":[291104,291116],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[291122,291146],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[291200,291210],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[291212,291217]},{"pos":[291226,291238],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[291244,291260],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[291306,291316],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[291318,291323]},{"pos":[291332,291344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[291350,291370],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[291420,291430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[291432,291437]},{"pos":[291446,291458],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[291464,291491],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[291548,291558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[291560,291565]},{"pos":[291574,291586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[291592,291609],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[291656,291666],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[291668,291673]},{"pos":[291682,291694],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[291700,291718],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[291776,291786],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[291788,291793]},{"content":"mode","pos":[291807,291811]},{"pos":[291820,291832],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[291838,291860],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[291912,291922],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[291924,291929]},{"pos":[291938,291950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[291956,291979],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[292032,292042],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[292044,292049]},{"pos":[292058,292070],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[292076,292094],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[292150,292160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[292162,292167]},{"pos":[292176,292188],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[292194,292219],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"pos":[292316,292326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[292328,292329]},{"content":"y","pos":[292343,292344]},{"content":"button","pos":[292358,292364]},{"content":"Ctrl","pos":[292378,292382]},{"content":"Shift","pos":[292396,292401]},{"pos":[292410,292422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[292428,292449],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"pos":[292542,292552],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[292554,292555]},{"content":"y","pos":[292569,292570]},{"content":"button","pos":[292584,292590]},{"content":"Ctrl","pos":[292604,292608]},{"content":"Shift","pos":[292622,292627]},{"pos":[292636,292648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[292654,292673],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"pos":[292764,292774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[292776,292777]},{"content":"y","pos":[292791,292792]},{"content":"button","pos":[292806,292812]},{"content":"Ctrl","pos":[292826,292830]},{"content":"Shift","pos":[292844,292849]},{"pos":[292858,292870],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[292876,292896],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[292946,292956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[292958,292963]},{"pos":[292972,292984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[292990,293011],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[293070,293080],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[293082,293087]},{"pos":[293096,293108],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[293114,293131],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[293188,293198],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[293200,293205]},{"content":"mode","pos":[293219,293223]},{"pos":[293232,293244],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[293250,293271],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[293322,293332],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[293334,293339]},{"pos":[293348,293360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[293366,293388],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[293440,293450],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[293452,293457]},{"pos":[293466,293478],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[293484,293496],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[293531,293543],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[293549,293560],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[293562,293626]},{"pos":[293677,293687],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[293689,293694]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[293697,293783]},{"content":"mode","pos":[293795,293799]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[293802,293888]},{"pos":[293895,293907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[293909,293960]},{"pos":[293966,293981],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[293983,294044]},{"pos":[294089,294099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[294101,294106]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[294109,294195]},{"pos":[294202,294214],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[294216,294272]},{"pos":[294278,294294],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[294296,294360]},{"pos":[294406,294416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[294418,294423]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[294426,294507]},{"pos":[294514,294526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[294528,294579]},{"pos":[294585,294601],"content":"Method limitText","linkify":"Method limitText","nodes":[{"content":"Method limitText","pos":[0,16]}]},{"pos":[294664,294674],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[294676,294681]},{"content":"mode","pos":[294695,294699]},{"pos":[294708,294720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[294726,294746],"content":"Method limitTextMode","linkify":"Method limitTextMode","nodes":[{"content":"Method limitTextMode","pos":[0,20]}]},{"pos":[294805,294815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[294817,294821]},{"pos":[294830,294842],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[294848,294869],"content":"Method limitTextValue","linkify":"Method limitTextValue","nodes":[{"content":"Method limitTextValue","pos":[0,21]}]},{"pos":[294920,294930],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[294932,294937]},{"pos":[294946,294958],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[294964,294983],"content":"Method lookupButton","linkify":"Method lookupButton","nodes":[{"content":"Method lookupButton","pos":[0,19]}]},{"pos":[295032,295042],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[295044,295049]},{"pos":[295058,295070],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295076,295092],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[295146,295156],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[295158,295163]},{"pos":[295172,295184],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295190,295210],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[295212,295265]},{"pos":[295323,295333],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[295335,295340]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[295343,295437]},{"pos":[295444,295456],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[295458,295531]},{"pos":[295537,295556],"content":"Method maxDateLabel","linkify":"Method maxDateLabel","nodes":[{"content":"Method maxDateLabel","pos":[0,19]}]},{"pos":[295605,295615],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[295617,295622]},{"pos":[295631,295643],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295649,295672],"content":"Method maxDateLabelText","linkify":"Method maxDateLabelText","nodes":[{"content":"Method maxDateLabelText","pos":[0,23]}]},{"pos":[295714,295726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295732,295747],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[295785,295797],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295803,295823],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[295825,295882]},{"pos":[295974,295984],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[295986,295987]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[295990,296051]},{"content":"y","pos":[296063,296064]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[296067,296128]},{"content":"button","pos":[296140,296146]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[296149,296210]},{"content":"Ctrl","pos":[296222,296226]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[296229,296290]},{"content":"Shift","pos":[296302,296307]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[296310,296371]},{"pos":[296378,296390],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[296392,296431]},{"pos":[296438,296445],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[296447,296551]},{"pos":[296557,296573],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[296575,296640]},{"pos":[296728,296738],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[296740,296741]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[296744,296805]},{"content":"y","pos":[296817,296818]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[296821,296882]},{"content":"button","pos":[296894,296900]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[296903,296964]},{"content":"Ctrl","pos":[296976,296980]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[296983,297044]},{"content":"Shift","pos":[297056,297061]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[297064,297125]},{"pos":[297132,297144],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[297146,297185]},{"pos":[297192,297199],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[297201,297305]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[297306,297441]},{"pos":[297447,297463],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[297465,297530]},{"pos":[297618,297628],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[297630,297631]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[297634,297695]},{"content":"y","pos":[297707,297708]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[297711,297772]},{"content":"button","pos":[297784,297790]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[297793,297854]},{"content":"Ctrl","pos":[297866,297870]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[297873,297934]},{"content":"Shift","pos":[297946,297951]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[297954,298015]},{"pos":[298022,298034],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[298036,298075]},{"pos":[298082,298089],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[298091,298195]},{"pos":[298201,298215],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[298217,298289]},{"pos":[298375,298385],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[298387,298388]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[298391,298452]},{"content":"y","pos":[298464,298465]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[298468,298529]},{"content":"button","pos":[298541,298547]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[298550,298611]},{"content":"Ctrl","pos":[298623,298627]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[298630,298691]},{"content":"Shift","pos":[298703,298708]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[298711,298772]},{"pos":[298779,298791],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[298793,298832]},{"pos":[298839,298846],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[298848,298952]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[298953,299088]},{"pos":[299094,299105],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.","pos":[299107,299243]},{"pos":[299284,299294],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299296,299301]},{"content":"The name to assign to the control; optional.","pos":[299304,299348]},{"pos":[299355,299367],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[299369,299433]},{"pos":[299440,299447],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[299449,299543]},{"content":"It must start with a letter.","pos":[299549,299577]},{"content":"It cannot exceed 250 characters.","pos":[299582,299614]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[299619,299673],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[299678,299718]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[299723,299833]},{"pos":[299839,299862],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[299915,299925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299927,299932]},{"pos":[299941,299953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[299959,299986],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[300038,300050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300056,300076],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[300078,300123]},{"pos":[300170,300182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[300184,300219]},{"pos":[300225,300246],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[300297,300307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300309,300314]},{"pos":[300323,300335],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300341,300358],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[300405,300415],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300417,300422]},{"pos":[300431,300443],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300449,300467],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[300469,300528]},{"pos":[300596,300606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300608,300613]},{"content":"The ID of the security key to assign to the control; optional.","pos":[300616,300678]},{"pos":[300685,300697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[300699,300798]},{"pos":[300804,300826],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[300828,300868]},{"pos":[300923,300933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[300935,300945]},{"content":"The ID of the menu to show.","pos":[300948,300975]},{"pos":[300982,300994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[300996,301055]},{"pos":[301061,301077],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[301131,301141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301143,301148]},{"pos":[301157,301169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[301175,301186],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[301188,301315]},{"pos":[301364,301374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301376,301381]},{"content":"The value to assign to the skip property of the control; optional.","pos":[301384,301450]},{"pos":[301457,301469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[301471,301577]},{"pos":[301584,301591],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[301593,301788]},{"pos":[301794,301805],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[301860,301870],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[301872,301885]},{"pos":[301894,301906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[301912,301929],"content":"Method timeFormat","linkify":"Method timeFormat","nodes":[{"content":"Method timeFormat","pos":[0,17]}]},{"pos":[301976,301986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301988,301993]},{"pos":[302002,302014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302020,302036],"content":"Method timeHours","linkify":"Method timeHours","nodes":[{"content":"Method timeHours","pos":[0,16]}]},{"pos":[302082,302092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302094,302099]},{"pos":[302108,302120],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302126,302143],"content":"Method timeMinute","linkify":"Method timeMinute","nodes":[{"content":"Method timeMinute","pos":[0,17]}]},{"pos":[302190,302200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302202,302207]},{"pos":[302216,302228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302234,302252],"content":"Method timeSeconds","linkify":"Method timeSeconds","nodes":[{"content":"Method timeSeconds","pos":[0,18]}]},{"pos":[302300,302310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302312,302317]},{"pos":[302326,302338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302344,302364],"content":"Method timeSeparator","linkify":"Method timeSeparator","nodes":[{"content":"Method timeSeparator","pos":[0,20]}]},{"pos":[302414,302424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302426,302431]},{"pos":[302440,302452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302458,302473],"content":"Method timeZone","linkify":"Method timeZone","nodes":[{"content":"Method timeZone","pos":[0,15]}]},{"pos":[302531,302541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"timeZone","pos":[302543,302551]},{"pos":[302560,302572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302578,302602],"content":"Method timeZoneIndicator","linkify":"Method timeZoneIndicator","nodes":[{"content":"Method timeZoneIndicator","pos":[0,24]}]},{"pos":[302656,302666],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302668,302673]},{"pos":[302682,302694],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302700,302725],"content":"Method timezonePreference","linkify":"Method timezonePreference","nodes":[{"content":"Method timezonePreference","pos":[0,25]}]},{"pos":[302780,302790],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302792,302797]},{"pos":[302806,302818],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[302824,302838],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[302840,302883]},{"pos":[302916,302928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[302930,303032]},{"pos":[303039,303046],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[303048,303120]},{"pos":[303126,303136],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[303138,303200]},{"pos":[303250,303260],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303262,303267]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[303270,303354]},{"content":"mode","pos":[303366,303370]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[303373,303457]},{"pos":[303464,303476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[303478,303527]},{"pos":[303533,303547],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[303549,303608]},{"pos":[303652,303662],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303664,303669]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[303672,303756]},{"pos":[303763,303775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[303777,303831]},{"pos":[303837,303852],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[303854,303916]},{"pos":[303961,303971],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303973,303978]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[303981,304060]},{"pos":[304067,304079],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[304081,304130]},{"pos":[304136,304147],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[304188,304198],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304200,304205]},{"pos":[304214,304226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304232,304248],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[304302,304312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304314,304319]},{"pos":[304328,304340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304346,304373],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[304437,304447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[304449,304453]},{"pos":[304462,304474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304480,304495],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[304497,304540]},{"pos":[304585,304595],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304597,304602]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[304605,304677]},{"pos":[304684,304696],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[304698,304728]},{"pos":[304734,304753],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[304755,304803]},{"pos":[304852,304862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304864,304869]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[304872,304949]},{"pos":[304956,304968],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[304970,305005]},{"pos":[305011,305031],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[305033,305092]},{"pos":[305142,305152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305154,305159]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[305162,305250]},{"pos":[305257,305269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[305271,305317]},{"pos":[305323,305341],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[305343,305426]},{"pos":[305474,305484],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305486,305491]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[305494,305574]},{"pos":[305581,305593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[305595,305651]},{"pos":[305657,305682],"content":"Method userFastTabSummary","linkify":"Method userFastTabSummary","nodes":[{"content":"Method userFastTabSummary","pos":[0,25]}]},{"pos":[305737,305747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305749,305754]},{"pos":[305763,305775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305781,305798],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[305800,305852]},{"pos":[305899,305909],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305911,305916]},{"content":"The user height for the control; optional.","pos":[305919,305961]},{"pos":[305968,305980],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[305982,306021]},{"pos":[306027,306042],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[306044,306126]},{"pos":[306171,306181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306183,306188]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[306191,306270]},{"pos":[306277,306289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[306291,306346]},{"pos":[306353,306360],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[306362,306532]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[306533,306608]},{"content":"This method lets you programmatically determine and set the value.","pos":[306609,306675]},{"pos":[306681,306704],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[306706,306762]},{"pos":[306815,306825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306827,306832]},{"content":"The organization container to set for the control; optional.","pos":[306835,306895]},{"pos":[306902,306914],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[306916,306959]},{"pos":[306965,306986],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[306988,307042]},{"pos":[307093,307103],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[307105,307110]},{"content":"The organization sibling to set for the control; optional.","pos":[307113,307171]},{"pos":[307178,307190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[307192,307233]},{"pos":[307239,307260],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[307262,307311]},{"pos":[307362,307372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[307374,307379]},{"content":"The user label text to set for the control; optional.","pos":[307382,307435]},{"pos":[307442,307454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[307456,307492]},{"pos":[307498,307522],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[307524,307577]},{"pos":[307631,307641],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[307643,307648]},{"content":"The user security level to set for the control; optional.","pos":[307651,307708]},{"pos":[307715,307727],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[307729,307769]},{"pos":[307775,307790],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[307792,307940]},{"pos":[307985,307995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[307997,308002]},{"content":"The value to assign to the userSkip property; optional.","pos":[308005,308060]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[308061,308156]},{"pos":[308163,308175],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[308177,308246]},{"pos":[308252,308268],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[308270,308321]},{"pos":[308367,308377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308379,308384]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[308387,308453]},{"pos":[308460,308472],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[308474,308603]},{"pos":[308610,308617],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[308619,308713]},{"content":"For example, if the user has specified 30 characters as the width for the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[308714,308831],"source":" For example, if the user has specified 30 characters as the width for the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[308832,308982]},{"pos":[308988,309003],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[309041,309053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309059,309081],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[309083,309144]},{"pos":[309213,309223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309225,309230]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[309233,309304]},{"content":"mode","pos":[309316,309320]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[309323,309394]},{"pos":[309401,309413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[309415,309463]},{"pos":[309469,309495],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[309497,309556]},{"pos":[309621,309631],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[309633,309637]},{"pos":[309646,309658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[309660,309714]},{"pos":[309720,309747],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[309749,309810]},{"pos":[309867,309877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309879,309884]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[309887,309965]},{"pos":[309972,309984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[309986,310034]},{"pos":[310040,310059],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[310108,310118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310120,310125]},{"pos":[310134,310146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310152,310166],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[310168,310238]},{"pos":[310290,310300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310302,310307]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[310310,310382]},{"pos":[310389,310401],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[310403,310452]},{"pos":[310458,310470],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[310472,310510]},{"pos":[310562,310572],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310574,310579]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[310582,310656]},{"content":"mode","pos":[310668,310672]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[310675,310749]},{"pos":[310756,310768],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[310770,310805]},{"pos":[310812,310819],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[310821,310927]},{"content":"Mode.","pos":[310931,310936]},{"content":"Width calculation.","pos":[310949,310967]},{"content":"-1 Exact.","pos":[311153,311162]},{"content":"The exact width in pixels of the controls is used.","pos":[311171,311221]},{"content":"0 Auto.","pos":[311264,311271]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[311282,311370]},{"content":"1 Column width.","pos":[311375,311390]},{"content":"The layout of the form determines the width of the control.","pos":[311393,311452]},{"content":"The width and width calculation mode can be set separately.","pos":[311485,311544]},{"pos":[311550,311566],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[311568,311630]},{"pos":[311676,311686],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311688,311693]},{"content":"An Integer data type value that indicates how control width is calculated; optional.","pos":[311696,311780]},{"pos":[311787,311799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[311801,311862]},{"pos":[311869,311876],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[311878,311931]},{"content":"Mode.","pos":[311935,311940]},{"content":"Width Calculation.","pos":[311951,311969]},{"content":"Exact.","pos":[312153,312159]},{"content":"The exact width in pixels of the controls is used.","pos":[312169,312219]},{"content":"Auto.","pos":[312262,312267]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[312278,312366]},{"content":"Column width.","pos":[312371,312384]},{"content":"The layout of the form determines the width of the control.","pos":[312387,312446]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[312479,312562]},{"pos":[312568,312585],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[312587,312625]},{"pos":[312672,312682],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312684,312689]},{"content":"An Integer data type that specifies the width in pixels; optional.","pos":[312692,312758]},{"pos":[312765,312777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[312779,312814]},{"pos":[312821,312828],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[312830,312903]},{"pos":[312909,312924],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[312926,312972]},{"pos":[313006,313018],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[313020,313074]},{"pos":[313105,313129],"content":"Method performTypeLookup","linkify":"Method performTypeLookup","nodes":[{"content":"Method performTypeLookup","pos":[0,24]}]},{"pos":[313235,313245],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userType","pos":[313247,313255]},{"content":"arrayIndex","pos":[313269,313279]},{"content":"company","pos":[313293,313300]},{"pos":[313308,313319],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[313321,313373]},{"pos":[313403,313414],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[313416,313514]},{"pos":[313600,313610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[313612,313622]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[313625,313710]},{"content":"dragMode","pos":[313722,313730]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[313733,313818]},{"content":"x","pos":[313830,313831]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[313834,313919]},{"content":"y","pos":[313931,313932]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[313935,314020]},{"pos":[314026,314045],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[314131,314141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[314143,314149]},{"content":"e","pos":[314163,314164]},{"pos":[314172,314182],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[314184,314217]},{"pos":[314246,314260],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[314262,314323]},{"pos":[314357,314364],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[314366,314494]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[314495,314599]},{"pos":[314605,314622],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[314624,314694]},{"pos":[314784,314794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[314796,314797]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[314800,314861]},{"content":"y","pos":[314873,314874]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[314877,314938]},{"content":"button","pos":[314950,314956]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[314959,315020]},{"content":"Ctrl","pos":[315032,315036]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[315039,315100]},{"content":"Shift","pos":[315112,315117]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[315120,315181]},{"pos":[315187,315201],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[315282,315292],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[315294,315300]},{"content":"e","pos":[315314,315315]},{"pos":[315323,315344],"content":"Method timeTextChange","linkify":"Method timeTextChange","nodes":[{"content":"Method timeTextChange","pos":[0,21]}]},{"pos":[315384,315406],"content":"Method performDBLookup","linkify":"Method performDBLookup","nodes":[{"content":"Method performDBLookup","pos":[0,22]}]},{"pos":[315514,315524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[315526,315533]},{"content":"tableId","pos":[315547,315554]},{"content":"company","pos":[315568,315575]},{"pos":[315583,315604],"content":"Method dateTextChange","linkify":"Method dateTextChange","nodes":[{"content":"Method dateTextChange","pos":[0,21]}]},{"pos":[315644,315662],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[315747,315757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[315759,315765]},{"content":"e","pos":[315779,315780]},{"pos":[315788,315809],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[315811,315880]},{"pos":[315942,315952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[315954,315959]},{"content":"The preferred height of the control.","pos":[315962,315998]},{"content":"height","pos":[316010,316016]},{"content":"The preferred height of the control.","pos":[316019,316055]},{"pos":[316061,316082],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[316084,316105]},{"pos":[316145,316174],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[316292,316302],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[316304,316320]},{"content":"objectMethodToCall","pos":[316334,316352]},{"content":"overrideObject","pos":[316366,316380]},{"pos":[316388,316404],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[316406,316448]},{"pos":[316483,316501],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[316503,316574]},{"pos":[316625,316635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[316637,316646]},{"content":"The string value to use to filter data; optional.","pos":[316649,316698]},{"pos":[316704,316721],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[316723,316777]},{"pos":[316813,316825],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[316856,316871],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[316873,316903]},{"pos":[316937,316950],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[316952,317052]},{"pos":[317134,317144],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[317146,317156]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[317159,317244]},{"content":"dragMode","pos":[317256,317264]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[317267,317352]},{"content":"x","pos":[317364,317365]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[317368,317453]},{"content":"y","pos":[317465,317466]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[317469,317554]},{"pos":[317560,317573],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[317621,317631],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[317633,317642]},{"pos":[317650,317668],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[317753,317763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[317765,317771]},{"content":"e","pos":[317785,317786]},{"pos":[317794,317818],"content":"Method performFormLookup","linkify":"Method performFormLookup","nodes":[{"content":"Method performFormLookup","pos":[0,24]}]},{"pos":[317875,317885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[317887,317891]},{"pos":[317899,317915],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[317998,318008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[318010,318016]},{"content":"e","pos":[318030,318031]},{"pos":[318039,318052],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[318084,318099],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[318181,318191],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[318193,318199]},{"content":"e","pos":[318213,318214]},{"pos":[318222,318238],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[318240,318336]},{"pos":[318371,318394],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[318396,318437]},{"pos":[318479,318493],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[318495,318535]},{"pos":[318568,318579],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[318609,318628],"content":"Method setUTCString","linkify":"Method setUTCString","nodes":[{"content":"Method setUTCString","pos":[0,19]}]},{"pos":[318691,318701],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"UTC<ph id=\"ph1\">\\_</ph>Formatted String","pos":[318703,318724],"source":"UTC\\_Formatted String"},{"pos":[318732,318749],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[318833,318843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[318845,318851]},{"content":"e","pos":[318865,318866]},{"pos":[318874,318888],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[318921,318938],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[319022,319032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[319034,319040]},{"content":"e","pos":[319054,319055]},{"pos":[319062,319078],"content":"Class FormDesign","linkify":"Class FormDesign","nodes":[{"content":"Class FormDesign","pos":[0,16]}]},{"pos":[319120,319127],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[319133,319141],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[319147,319154],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[319158,319164]},{"content":"Description","pos":[319276,319287]},{"content":"public FormControl addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[319538,319642],"source":"public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[319728,319823],"source":"public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>)","pos":[319918,320033],"source":"public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\])"},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[320108,320152],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[320298,320345],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean allowDocking(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[320488,320534],"source":"public boolean allowDocking(\\[boolean value\\])"},{"content":"public boolean allowFormCompanyChange(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[320678,320734],"source":"public boolean allowFormCompanyChange(\\[boolean value\\])"},{"content":"public boolean allowImplicitParent(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[320868,320921],"source":"public boolean allowImplicitParent(\\[boolean value\\])"},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[321058,321098],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public boolean alwaysOnTop(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[321248,321293],"source":"public boolean alwaysOnTop(\\[boolean value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[321438,321476],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[321628,321667],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[321818,321855],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[322008,322049],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[322126,322175]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[322198,322228],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[322316,322383]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[322388,322445],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[322578,322629],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[322768,322811],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[322958,323043],"source":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"public boolean canContain(FormControl control)","pos":[323148,323194]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[323338,323371],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[323456,323495]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[323528,323566],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[323646,323689]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[323718,323755],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[323836,323881]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[323908,323963],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[324098,324150],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[324288,324344],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[324478,324528],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[324668,324710],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[324858,324896],"source":"public int columnsValue(\\[int value\\])"},{"content":"public boolean contains(FormControl control)","pos":[325048,325092]},{"content":"public FormControl control(int controlId)","pos":[325238,325279]},{"content":"public int controlCount()","pos":[325428,325453]},{"content":"public FormControl controlName(str controlName)","pos":[325618,325665]},{"content":"public FormControl controlNum(int controlNo)","pos":[325808,325852]},{"content":"public str cssClass(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[325998,326032],"source":"public str cssClass(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[326188,326228],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[326306,326371]},{"content":"public str defaultAction(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[326378,326417],"source":"public str defaultAction(\\[str value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[326568,326598],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[326686,326743]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[326758,326792],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[326876,326933]},{"content":"public int frame(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[326948,326979],"source":"public int frame(\\[int value\\])"},{"content":"public boolean hasUserSetting()","pos":[327138,327169]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[327328,327370],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[327446,327485]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[327518,327554],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[327636,327698]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[327708,327745],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[327826,327865]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[327898,327943],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public boolean hideToolbar(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[328088,328133],"source":"public boolean hideToolbar(\\[boolean value\\])"},{"content":"public int imagemode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[328278,328313],"source":"public int imagemode(\\[int value\\])"},{"content":"public str imageName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[328468,328503],"source":"public str imageName(\\[str value\\])"},{"content":"public int imageResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[328658,328697],"source":"public int imageResource(\\[int value\\])"},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[328848,328904]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[329038,329078],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[329228,329263],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[329418,329461],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[329608,329643],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[329798,329837],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[329988,330033],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[330178,330226],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[330368,330408],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[330558,330613],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[330748,330797],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[330938,330979],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[331128,331162],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[331318,331353],"source":"public int leftValue(\\[int value\\])"},{"content":"public str localWebMenu(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[331508,331546],"source":"public str localWebMenu(\\[str value\\])"},{"content":"public boolean maximizeBox(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[331698,331743],"source":"public boolean maximizeBox(\\[boolean value\\])"},{"content":"public boolean minimizeBox(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[331888,331933],"source":"public boolean minimizeBox(\\[boolean value\\])"},{"content":"public int mode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[332078,332108],"source":"public int mode(\\[int value\\])"},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterControlId<ph id=\"ph2\">\\]</ph>)","pos":[332268,332335],"source":"public int moveControl(int controlId, \\[int insertAfterControlId\\])"},{"content":"public str newRecordAction(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[332458,332499],"source":"public str newRecordAction(\\[str value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[332648,332687]},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[332838,332894],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[333028,333078],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[333218,333260],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public boolean saveSize(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[333408,333450],"source":"public boolean saveSize(\\[boolean value\\])"},{"content":"public int scrollbars(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[333598,333634],"source":"public int scrollbars(\\[int value\\])"},{"content":"public boolean setCompany(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[333788,333832],"source":"public boolean setCompany(\\[boolean value\\])"},{"content":"public int showDeleteButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[333978,334020],"source":"public int showDeleteButton(\\[int value\\])"},{"content":"public int showNewButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[334168,334207],"source":"public int showNewButton(\\[int value\\])"},{"content":"public int showWebHelp(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[334358,334395],"source":"public int showWebHelp(\\[int value\\])"},{"content":"public int statusBarStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[334548,334588],"source":"public int statusBarStyle(\\[int value\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[334738,334769],"source":"public int style(\\[int value\\])"},{"content":"public int submitMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[334928,334966],"source":"public int submitMethod(\\[int value\\])"},{"content":"public boolean supportReload(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[335118,335165],"source":"public boolean supportReload(\\[boolean value\\])"},{"content":"public int titleDatasource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[335308,335353],"source":"public int titleDatasource(\\[AnyType value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[335498,335537],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[335688,335742],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[335878,335926],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336068,336108],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336258,336291],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336448,336482],"source":"public int topValue(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[336638,336681],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[336828,336879]},{"content":"public int useCaptionFromMenuItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[337018,337066],"source":"public int useCaptionFromMenuItem(\\[int value\\])"},{"content":"public boolean userSettingAllowSave()","pos":[337208,337245]},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[337398,337445],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[337588,337626],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[337778,337819],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[337968,338009],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[338086,338124]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[338158,338193],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[338276,338338]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[338348,338384],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[338466,338504]},{"content":"public int windowResize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[338538,338576],"source":"public int windowResize(\\[int value\\])"},{"content":"public int windowType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[338728,338764],"source":"public int windowType(\\[int value\\])"},{"content":"public int workflowDatasource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[338918,338966],"source":"public int workflowDatasource(\\[AnyType value\\])"},{"content":"public boolean workflowEnabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[339108,339157],"source":"public boolean workflowEnabled(\\[boolean value\\])"},{"content":"public str workflowType(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[339298,339336],"source":"public str workflowType(\\[str value\\])"},{"content":"public int dialogSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[339488,339524],"source":"public int dialogSize(\\[int value\\])"},{"content":"public void resetUserSetting()","pos":[339678,339708]},{"content":"public void removeControl(<ph id=\"ph1\">\\[</ph>int controlId<ph id=\"ph2\">\\]</ph>)","pos":[339868,339912],"source":"public void removeControl(\\[int controlId\\])"},{"content":"public void finalize()","pos":[340058,340080]},{"pos":[340251,340268],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"pos":[340383,340393],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[340395,340406]},{"content":"controlName","pos":[340420,340431]},{"content":"insertAfter","pos":[340445,340456]},{"pos":[340465,340477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[340483,340502],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[340608,340618],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[340620,340632]},{"content":"controlName","pos":[340646,340657]},{"content":"insertAfter","pos":[340671,340682]},{"pos":[340691,340703],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[340709,340728],"content":"Method addDataField","linkify":"Method addDataField","nodes":[{"content":"Method addDataField","pos":[0,19]}]},{"pos":[340852,340862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[340864,340876]},{"content":"fieldId","pos":[340890,340897]},{"content":"insertAfter","pos":[340911,340922]},{"content":"arrayIndex","pos":[340936,340946]},{"pos":[340955,340967],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[340973,340990],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[341045,341055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341057,341062]},{"pos":[341071,341083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341089,341109],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[341167,341177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341179,341184]},{"pos":[341193,341205],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341211,341230],"content":"Method allowDocking","linkify":"Method allowDocking","nodes":[{"content":"Method allowDocking","pos":[0,19]}]},{"pos":[341287,341297],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341299,341304]},{"pos":[341313,341325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341331,341360],"content":"Method allowFormCompanyChange","linkify":"Method allowFormCompanyChange","nodes":[{"content":"Method allowFormCompanyChange","pos":[0,29]}]},{"pos":[341427,341437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341439,341444]},{"pos":[341453,341465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341471,341497],"content":"Method allowImplicitParent","linkify":"Method allowImplicitParent","nodes":[{"content":"Method allowImplicitParent","pos":[0,26]}]},{"pos":[341561,341571],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341573,341578]},{"pos":[341587,341599],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341605,341626],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[341677,341687],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341689,341694]},{"pos":[341703,341715],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341721,341739],"content":"Method alwaysOnTop","linkify":"Method alwaysOnTop","nodes":[{"content":"Method alwaysOnTop","pos":[0,18]}]},{"pos":[341795,341805],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341807,341812]},{"pos":[341821,341833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341839,341858],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[341907,341917],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341919,341924]},{"pos":[341933,341945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[341951,341971],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[342021,342031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342033,342038]},{"pos":[342047,342059],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[342065,342083],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[342131,342141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342143,342148]},{"pos":[342157,342169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[342175,342197],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[342199,342248]},{"pos":[342300,342310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342312,342317]},{"pos":[342326,342338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[342340,342384]},{"pos":[342391,342398],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[342400,342468]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[342474,342544]},{"content":"The second byte contains a value for green.","pos":[342549,342592]},{"content":"The third byte contains a value for blue.","pos":[342597,342638]},{"content":"The high-order byte must be zero.","pos":[342643,342676]},{"content":"The maximum value for a single byte is 255.","pos":[342681,342724]},{"pos":[342730,342741],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[342743,342810]},{"pos":[342851,342861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342863,342868]},{"pos":[342877,342889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[342891,342941]},{"pos":[342948,342955],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[342957,343029]},{"content":"0 Use the default font weight.","pos":[343035,343065]},{"content":"1 Thin.","pos":[343070,343077]},{"content":"2 Extra-light.","pos":[343082,343096]},{"content":"3 Light.","pos":[343101,343109]},{"content":"4 Normal.","pos":[343114,343123]},{"content":"5 Medium.","pos":[343128,343137]},{"content":"6 Semibold.","pos":[343142,343153]},{"content":"7 Bold.","pos":[343158,343165]},{"content":"8 Extra-bold.","pos":[343170,343183]},{"content":"9 Heavy.","pos":[343188,343196]},{"pos":[343202,343221],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[343287,343297],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[343299,343304]},{"content":"mode","pos":[343318,343322]},{"pos":[343331,343343],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343349,343372],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[343434,343444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[343446,343450]},{"pos":[343459,343471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343477,343501],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[343555,343565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[343567,343572]},{"pos":[343581,343593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343599,343621],"content":"Method canAddDataField","linkify":"Method canAddDataField","nodes":[{"content":"Method canAddDataField","pos":[0,22]}]},{"pos":[343717,343727],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[343729,343741]},{"content":"fieldId","pos":[343755,343762]},{"content":"arrayIndex","pos":[343776,343786]},{"pos":[343795,343807],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343813,343830],"content":"Method canContain","linkify":"Method canContain","nodes":[{"content":"Method canContain","pos":[0,17]}]},{"pos":[343889,343899],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[343901,343908]},{"pos":[343917,343929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[343935,343949],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[343951,343990]},{"pos":[344034,344044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344046,344051]},{"pos":[344060,344072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[344074,344128]},{"pos":[344134,344153],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[344155,344198]},{"pos":[344247,344257],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344259,344264]},{"pos":[344273,344285],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[344287,344349]},{"pos":[344356,344363],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[344365,344469]},{"content":"Value.","pos":[344473,344479]},{"content":"Description.","pos":[344482,344494]},{"content":"0","pos":[344541,344542]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344550,344563],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[344575,344576]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344584,344600],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[344609,344610]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344618,344633],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[344643,344645]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344652,344664],"source":"MAC\\_CHARSET"},{"content":"128","pos":[344677,344680]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344686,344703],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[344711,344714]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344720,344735],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[344745,344748]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344754,344769],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[344779,344782]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344788,344808],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[344813,344816]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344822,344836],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[344847,344850]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344856,344872],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[344881,344884]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344890,344909],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[344915,344918]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344924,344939],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[344949,344952]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344958,344974],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[344983,344986]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[344992,345011],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[345017,345020]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[345026,345038],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of Microsoft Windows.","pos":[345050,345139]},{"content":"Value.","pos":[345143,345149]},{"content":"Description.","pos":[345152,345164]},{"content":"130","pos":[345199,345202]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[345208,345222],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Microsoft Windows.","pos":[345226,345322]},{"content":"Value.","pos":[345326,345332]},{"content":"Description.","pos":[345335,345347]},{"content":"177","pos":[345384,345387]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[345393,345408],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[345413,345416]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[345422,345437],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Microsoft Windows.","pos":[345441,345528]},{"content":"Value.","pos":[345532,345538]},{"content":"Description.","pos":[345541,345553]},{"content":"222","pos":[345586,345589]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[345595,345608],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[345612,345691]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[345692,345898],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[345904,345922],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[345924,345969]},{"pos":[346017,346027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[346029,346034]},{"pos":[346043,346055],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[346057,346100]},{"pos":[346107,346114],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[346116,346177]},{"content":"Value.","pos":[346181,346187]},{"content":"Style.","pos":[346190,346196]},{"content":"0","pos":[346269,346270]},{"content":"Default.","pos":[346278,346286]},{"content":"1","pos":[346313,346314]},{"content":"The Microsoft Windows palette.","pos":[346322,346352]},{"content":"2","pos":[346357,346358]},{"content":"The true-color scheme.","pos":[346366,346388]},{"pos":[346404,346418],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[346482,346492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[346494,346499]},{"content":"mode","pos":[346513,346517]},{"pos":[346526,346538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[346544,346562],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[346625,346635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[346637,346641]},{"pos":[346650,346662],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[346668,346686],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[346751,346761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[346763,346768]},{"content":"mode","pos":[346782,346786]},{"pos":[346795,346807],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[346813,346835],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[346896,346906],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[346908,346912]},{"pos":[346921,346933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[346939,346962],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[347015,347025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[347027,347032]},{"pos":[347041,347053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[347059,347078],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[347127,347137],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[347139,347144]},{"pos":[347153,347165],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[347171,347186],"content":"Method contains","linkify":"Method contains","nodes":[{"content":"Method contains","pos":[0,15]}]},{"pos":[347243,347253],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[347255,347262]},{"pos":[347271,347283],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[347289,347303],"content":"Method control","linkify":"Method control","nodes":[{"content":"Method control","pos":[0,14]}]},{"pos":[347357,347367],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[347369,347378]},{"pos":[347387,347399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[347405,347424],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[347462,347474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[347480,347498],"content":"Method controlName","linkify":"Method controlName","nodes":[{"content":"Method controlName","pos":[0,18]}]},{"pos":[347558,347568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlName","pos":[347570,347581]},{"pos":[347590,347602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[347608,347625],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"pos":[347682,347692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[347694,347703]},{"pos":[347712,347724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[347730,347745],"content":"Method cssClass","linkify":"Method cssClass","nodes":[{"content":"Method cssClass","pos":[0,15]}]},{"pos":[347790,347800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[347802,347807]},{"pos":[347816,347828],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[347834,347851],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[347853,347918]},{"pos":[347969,347979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[347981,347986]},{"pos":[347995,348007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[348009,348054]},{"pos":[348060,348080],"content":"Method defaultAction","linkify":"Method defaultAction","nodes":[{"content":"Method defaultAction","pos":[0,20]}]},{"pos":[348130,348140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[348142,348147]},{"pos":[348156,348168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[348174,348185],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[348187,348244]},{"pos":[348285,348295],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[348297,348302]},{"pos":[348311,348323],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[348325,348380]},{"pos":[348386,348401],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[348403,348460]},{"pos":[348505,348515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[348517,348522]},{"pos":[348531,348543],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[348545,348578]},{"pos":[348584,348596],"content":"Method frame","linkify":"Method frame","nodes":[{"content":"Method frame","pos":[0,12]}]},{"pos":[348638,348648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[348650,348655]},{"pos":[348664,348676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[348682,348703],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"pos":[348747,348759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[348765,348778],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[348780,348819]},{"pos":[348872,348882],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[348884,348889]},{"content":"mode","pos":[348903,348907]},{"pos":[348916,348928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[348930,348966]},{"pos":[348973,348980],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[348982,349089]},{"content":"Mode.","pos":[349093,349098]},{"content":"Height calculation.","pos":[349112,349131]},{"content":"-1 Exact.","pos":[349319,349328]},{"content":"The exact height in pixels of the controls is used.","pos":[349338,349389]},{"content":"0 Auto.","pos":[349432,349439]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[349451,349540]},{"content":"1 Column height.","pos":[349545,349561]},{"content":"The layout of the form determines the height of the control.","pos":[349564,349624]},{"content":"The height and height calculation mode can be set separately.","pos":[349657,349718]},{"pos":[349724,349741],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[349743,349805]},{"pos":[349852,349862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[349864,349869]},{"pos":[349878,349890],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[349892,349913]},{"pos":[349920,349927],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[349929,349983]},{"content":"Mode.","pos":[349987,349992]},{"content":"Height Calculation.","pos":[350004,350023]},{"content":"Exact.","pos":[350209,350215]},{"content":"The exact height in pixels of the controls is used.","pos":[350226,350277]},{"content":"Auto.","pos":[350320,350325]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[350337,350426]},{"content":"Column height.","pos":[350431,350445]},{"content":"The layout of the form determines the height of the control.","pos":[350448,350508]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[350541,350626]},{"pos":[350632,350650],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[350652,350691]},{"pos":[350739,350749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[350751,350756]},{"pos":[350765,350777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[350779,350800]},{"pos":[350807,350814],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[350816,350906]},{"pos":[350912,350930],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[350986,350996],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[350998,351003]},{"pos":[351012,351024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351030,351048],"content":"Method hideToolbar","linkify":"Method hideToolbar","nodes":[{"content":"Method hideToolbar","pos":[0,18]}]},{"pos":[351104,351114],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351116,351121]},{"pos":[351130,351142],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351148,351164],"content":"Method imagemode","linkify":"Method imagemode","nodes":[{"content":"Method imagemode","pos":[0,16]}]},{"pos":[351210,351220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351222,351227]},{"pos":[351236,351248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351254,351270],"content":"Method imageName","linkify":"Method imageName","nodes":[{"content":"Method imageName","pos":[0,16]}]},{"pos":[351316,351326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351328,351333]},{"pos":[351342,351354],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351360,351380],"content":"Method imageResource","linkify":"Method imageResource","nodes":[{"content":"Method imageResource","pos":[0,20]}]},{"pos":[351430,351440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351442,351447]},{"pos":[351456,351468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351474,351499],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"pos":[351568,351578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[351580,351597]},{"pos":[351606,351618],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351624,351637],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[351688,351698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351700,351705]},{"pos":[351714,351726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351732,351748],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[351794,351804],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351806,351811]},{"pos":[351820,351832],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351838,351862],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[351916,351926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351928,351933]},{"pos":[351942,351954],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351960,351976],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[352022,352032],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[352034,352039]},{"pos":[352048,352060],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[352066,352086],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[352136,352146],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[352148,352153]},{"pos":[352162,352174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[352180,352198],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[352254,352264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[352266,352271]},{"pos":[352280,352292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[352298,352319],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[352378,352388],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[352390,352395]},{"pos":[352404,352416],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[352422,352433],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[352484,352494],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[352496,352501]},{"content":"mode","pos":[352515,352519]},{"pos":[352528,352540],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[352546,352563],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[352627,352637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[352639,352644]},{"content":"mode","pos":[352658,352662]},{"pos":[352671,352683],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[352689,352710],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[352770,352780],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[352782,352786]},{"pos":[352795,352807],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[352813,352835],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[352887,352897],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[352899,352904]},{"pos":[352913,352925],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[352931,352946],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[352991,353001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353003,353008]},{"pos":[353017,353029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353035,353051],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[353097,353107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353109,353114]},{"pos":[353123,353135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353141,353160],"content":"Method localWebMenu","linkify":"Method localWebMenu","nodes":[{"content":"Method localWebMenu","pos":[0,19]}]},{"pos":[353209,353219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353221,353226]},{"pos":[353235,353247],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353253,353271],"content":"Method maximizeBox","linkify":"Method maximizeBox","nodes":[{"content":"Method maximizeBox","pos":[0,18]}]},{"pos":[353327,353337],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353339,353344]},{"pos":[353353,353365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353371,353389],"content":"Method minimizeBox","linkify":"Method minimizeBox","nodes":[{"content":"Method minimizeBox","pos":[0,18]}]},{"pos":[353445,353455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353457,353462]},{"pos":[353471,353483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353489,353500],"content":"Method mode","linkify":"Method mode","nodes":[{"content":"Method mode","pos":[0,11]}]},{"pos":[353541,353551],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353553,353558]},{"pos":[353567,353579],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353585,353603],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"pos":[353681,353691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[353693,353702]},{"content":"insertAfterControlId","pos":[353716,353736]},{"pos":[353745,353757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353763,353785],"content":"Method newRecordAction","linkify":"Method newRecordAction","nodes":[{"content":"Method newRecordAction","pos":[0,22]}]},{"pos":[353837,353847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353849,353854]},{"pos":[353863,353875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353881,353908],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[353960,353972],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353978,353996],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[354061,354071],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354073,354078]},{"content":"mode","pos":[354092,354096]},{"pos":[354105,354117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354123,354145],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[354206,354216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[354218,354222]},{"pos":[354231,354243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354249,354272],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[354325,354335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354337,354342]},{"pos":[354351,354363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354369,354384],"content":"Method saveSize","linkify":"Method saveSize","nodes":[{"content":"Method saveSize","pos":[0,15]}]},{"pos":[354437,354447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354449,354454]},{"pos":[354463,354475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354481,354498],"content":"Method scrollbars","linkify":"Method scrollbars","nodes":[{"content":"Method scrollbars","pos":[0,17]}]},{"pos":[354545,354555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354557,354562]},{"pos":[354571,354583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354589,354606],"content":"Method setCompany","linkify":"Method setCompany","nodes":[{"content":"Method setCompany","pos":[0,17]}]},{"pos":[354661,354671],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354673,354678]},{"pos":[354687,354699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354705,354728],"content":"Method showDeleteButton","linkify":"Method showDeleteButton","nodes":[{"content":"Method showDeleteButton","pos":[0,23]}]},{"pos":[354781,354791],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354793,354798]},{"pos":[354807,354819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354825,354845],"content":"Method showNewButton","linkify":"Method showNewButton","nodes":[{"content":"Method showNewButton","pos":[0,20]}]},{"pos":[354895,354905],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354907,354912]},{"pos":[354921,354933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354939,354957],"content":"Method showWebHelp","linkify":"Method showWebHelp","nodes":[{"content":"Method showWebHelp","pos":[0,18]}]},{"pos":[355005,355015],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355017,355022]},{"pos":[355031,355043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355049,355070],"content":"Method statusBarStyle","linkify":"Method statusBarStyle","nodes":[{"content":"Method statusBarStyle","pos":[0,21]}]},{"pos":[355121,355131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355133,355138]},{"pos":[355147,355159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355165,355177],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[355219,355229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355231,355236]},{"pos":[355245,355257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355263,355282],"content":"Method submitMethod","linkify":"Method submitMethod","nodes":[{"content":"Method submitMethod","pos":[0,19]}]},{"pos":[355331,355341],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355343,355348]},{"pos":[355357,355369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355375,355395],"content":"Method supportReload","linkify":"Method supportReload","nodes":[{"content":"Method supportReload","pos":[0,20]}]},{"pos":[355453,355463],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355465,355470]},{"pos":[355479,355491],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355497,355519],"content":"Method titleDatasource","linkify":"Method titleDatasource","nodes":[{"content":"Method titleDatasource","pos":[0,22]}]},{"pos":[355575,355585],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355587,355592]},{"pos":[355601,355613],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355619,355629],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[355679,355689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355691,355696]},{"content":"mode","pos":[355710,355714]},{"pos":[355723,355735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355741,355757],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[355820,355830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355832,355837]},{"content":"mode","pos":[355851,355855]},{"pos":[355864,355876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355882,355902],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[355961,355971],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[355973,355977]},{"pos":[355986,355998],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[356004,356025],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[356076,356086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356088,356093]},{"pos":[356102,356114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[356120,356134],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[356178,356188],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356190,356195]},{"pos":[356204,356216],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[356222,356237],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[356282,356292],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356294,356299]},{"pos":[356308,356320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[356326,356342],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[356396,356406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356408,356413]},{"pos":[356422,356434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[356440,356467],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[356531,356541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[356543,356547]},{"pos":[356556,356568],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[356574,356603],"content":"Method useCaptionFromMenuItem","linkify":"Method useCaptionFromMenuItem","nodes":[{"content":"Method useCaptionFromMenuItem","pos":[0,29]}]},{"pos":[356662,356672],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356674,356679]},{"pos":[356688,356700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[356706,356733],"content":"Method userSettingAllowSave","linkify":"Method userSettingAllowSave","nodes":[{"content":"Method userSettingAllowSave","pos":[0,27]}]},{"pos":[356783,356795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[356801,356821],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[356879,356889],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356891,356896]},{"pos":[356905,356917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[356923,356942],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[356991,357001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357003,357008]},{"pos":[357017,357029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[357035,357049],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[357101,357111],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357113,357118]},{"pos":[357127,357139],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[357145,357157],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[357159,357197]},{"pos":[357249,357259],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357261,357266]},{"content":"mode","pos":[357280,357284]},{"pos":[357293,357305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[357307,357342]},{"pos":[357349,357356],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[357358,357464]},{"content":"Mode.","pos":[357468,357473]},{"content":"Width calculation.","pos":[357486,357504]},{"content":"-1 Exact.","pos":[357690,357699]},{"content":"The exact width in pixels of the controls is used.","pos":[357708,357758]},{"content":"0 Auto.","pos":[357801,357808]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[357819,357907]},{"content":"1 Column width.","pos":[357912,357927]},{"content":"The layout of the form determines the width of the control.","pos":[357930,357989]},{"content":"The width and width calculation mode can be set separately.","pos":[358022,358081]},{"pos":[358087,358103],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[358105,358167]},{"pos":[358213,358223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[358225,358230]},{"pos":[358239,358251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[358253,358314]},{"pos":[358321,358328],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[358330,358383]},{"content":"Mode.","pos":[358387,358392]},{"content":"Width Calculation.","pos":[358403,358421]},{"content":"Exact.","pos":[358605,358611]},{"content":"The exact width in pixels of the controls is used.","pos":[358621,358671]},{"content":"Auto.","pos":[358714,358719]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[358730,358818]},{"content":"Column width.","pos":[358823,358836]},{"content":"The layout of the form determines the width of the control.","pos":[358839,358898]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[358931,359014]},{"pos":[359020,359037],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[359039,359077]},{"pos":[359124,359134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359136,359141]},{"pos":[359150,359162],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[359164,359199]},{"pos":[359206,359213],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[359215,359288]},{"pos":[359294,359313],"content":"Method windowResize","linkify":"Method windowResize","nodes":[{"content":"Method windowResize","pos":[0,19]}]},{"pos":[359362,359372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359374,359379]},{"pos":[359388,359400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359406,359423],"content":"Method windowType","linkify":"Method windowType","nodes":[{"content":"Method windowType","pos":[0,17]}]},{"pos":[359470,359480],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359482,359487]},{"pos":[359496,359508],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359514,359539],"content":"Method workflowDatasource","linkify":"Method workflowDatasource","nodes":[{"content":"Method workflowDatasource","pos":[0,25]}]},{"pos":[359598,359608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359610,359615]},{"pos":[359624,359636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359642,359664],"content":"Method workflowEnabled","linkify":"Method workflowEnabled","nodes":[{"content":"Method workflowEnabled","pos":[0,22]}]},{"pos":[359724,359734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359736,359741]},{"pos":[359750,359762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359768,359787],"content":"Method workflowType","linkify":"Method workflowType","nodes":[{"content":"Method workflowType","pos":[0,19]}]},{"pos":[359836,359846],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359848,359853]},{"pos":[359862,359874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359880,359897],"content":"Method dialogSize","linkify":"Method dialogSize","nodes":[{"content":"Method dialogSize","pos":[0,17]}]},{"pos":[359944,359954],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359956,359961]},{"pos":[359970,359982],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[359988,360011],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"pos":[360053,360073],"content":"Method removeControl","linkify":"Method removeControl","nodes":[{"content":"Method removeControl","pos":[0,20]}]},{"pos":[360128,360138],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[360140,360149]},{"pos":[360157,360172],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[360205,360225],"content":"Class FormDesignView","linkify":"Class FormDesignView","nodes":[{"content":"Class FormDesignView","pos":[0,20]}]},{"pos":[360274,360281],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[360287,360295],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[360301,360308],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[360312,360318]},{"content":"Description","pos":[360369,360380]},{"content":"public FormBuildDesign design(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[360530,360574],"source":"public FormBuildDesign design(\\[int value\\])"},{"content":"public Form form(<ph id=\"ph1\">\\[</ph>Form value<ph id=\"ph2\">\\]</ph>)","pos":[360639,360671],"source":"public Form form(\\[Form value\\])"},{"content":"public str name()","pos":[360748,360765]},{"content":"public FormBuildObjectSet objectPool(<ph id=\"ph1\">\\[</ph>AnyType pool<ph id=\"ph2\">\\]</ph>)","pos":[360857,360911],"source":"public FormBuildObjectSet objectPool(\\[AnyType pool\\])"},{"content":"public void finalize()","pos":[360966,360988]},{"content":"public void new(<ph id=\"ph1\">\\[</ph>str name<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>Form form<ph id=\"ph4\">\\]</ph>)","pos":[361075,361119],"source":"public void new(\\[str name\\], \\[Form form\\])"},{"content":"Initializes a new instance of the Object class.","pos":[361132,361179]},{"pos":[361187,361200],"content":"Method design","linkify":"Method design","nodes":[{"content":"Method design","pos":[0,13]}]},{"pos":[361255,361265],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361267,361272]},{"pos":[361281,361293],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361299,361310],"content":"Method form","linkify":"Method form","nodes":[{"content":"Method form","pos":[0,11]}]},{"pos":[361353,361363],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361365,361370]},{"pos":[361379,361391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361397,361408],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"pos":[361438,361450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361456,361473],"content":"Method objectPool","linkify":"Method objectPool","nodes":[{"content":"Method objectPool","pos":[0,17]}]},{"pos":[361538,361548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pool","pos":[361550,361554]},{"pos":[361563,361575],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361581,361596],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[361630,361640],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[361642,361689]},{"pos":[361742,361752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[361754,361758]},{"content":"form","pos":[361772,361776]},{"pos":[361783,361816],"content":"Class FormDropDialogButtonControl","linkify":"Class FormDropDialogButtonControl","nodes":[{"content":"Class FormDropDialogButtonControl","pos":[0,33]}]},{"pos":[361880,361887],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[361893,361901],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[361907,361914],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[361918,361924]},{"content":"Description","pos":[362028,362039]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[362574,362620],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[362684,362724]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[362902,362937],"source":"public int alignment(\\[int value\\])"},{"content":"Changes the alignment of the text in the control.","pos":[363012,363061]},{"content":"Values are Left, right, or center, to align the control appropriately.","pos":[363062,363132]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[363230,363273],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[363340,363407]},{"content":"public boolean allowSysSetup()","pos":[363558,363588]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[363668,363751]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[363886,363935],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[363996,364094]},{"content":"public boolean autoRefreshData(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[364214,364263],"source":"public boolean autoRefreshData(\\[boolean value\\])"},{"content":"Specifies whether the data from the data source that is associated with the control will be refreshed when the button is clicked.","pos":[364324,364453]},{"content":"The default value is No.","pos":[364454,364478]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[364542,364583],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[364652,364701]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[364870,364905],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[364980,365042]},{"content":"public int beginDrag(int x, int y)","pos":[365198,365232]},{"content":"Is called when the user starts to drag a form control.","pos":[365308,365362]},{"content":"public boolean big(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[365526,365563],"source":"public boolean big(\\[boolean value\\])"},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[365854,365884],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[365964,366031]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[366182,366214],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[366292,366348]},{"content":"public int buttonDisplay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[366510,366549],"source":"public int buttonDisplay(\\[int value\\])"},{"content":"Gets or sets the appearance of the button control.","pos":[366620,366670]},{"content":"public container calcControlSize(int chars, int lines)","pos":[366838,366892]},{"content":"Retrieves the size of the control.","pos":[366948,366982]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[367166,367199],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[367276,367315]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[367494,367532],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[367604,367647]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[367822,367859],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[367932,367977]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[368150,368222],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[368260,368327]},{"content":"public List configurationKeyEx()","pos":[368478,368510]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[368588,368684]},{"content":"public int copyCallerQuery(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[368806,368847],"source":"public int copyCallerQuery(\\[int value\\])"},{"content":"Specifies whether to copy the query from the calling form to the target form.","pos":[368916,368993]},{"content":"This enables the target form to display the same data that was being viewed in the original form.","pos":[368994,369091]},{"content":"The default value is Auto.","pos":[369092,369118]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[369134,369178],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[369244,369322]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[369462,369521],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"Specifies the field that will be used to identify the country context.","pos":[369572,369642]},{"content":"See CountryRegionCodes.","pos":[369643,369666]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[369790,369832],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[369900,370025]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[370118,370158],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[370228,370293]},{"content":"public boolean defaultButton(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[370446,370493],"source":"public boolean defaultButton(\\[boolean value\\])"},{"content":"Determines whether the button should be the default button in the form.","pos":[370556,370627]},{"content":"public str disabledImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[370774,370813],"source":"public str disabledImage(\\[str value\\])"},{"content":"Gets or sets the disabled image of the button.","pos":[370884,370930]},{"content":"public int disabledImageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[371102,371149],"source":"public int disabledImageLocation(\\[int value\\])"},{"content":"public int disabledResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[371430,371472],"source":"public int disabledResource(\\[int value\\])"},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[371540,371618]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[371758,371797],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both.","pos":[371868,372037]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[372088,372122],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[372198,372279]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[372416,372497]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[372526,372620]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[372744,372821]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[372854,372950]},{"content":"public str dragText()","pos":[373072,373093]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[373182,373252]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[373400,373441],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[373510,373561]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[373728,373758],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[373838,373895]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[374056,374090],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[374166,374223]},{"content":"public boolean forcedToOverflow(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[374384,374434],"source":"public boolean forcedToOverflow(\\[boolean value\\])"},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[374712,374753],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[374822,374873]},{"content":"public int formViewOption(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[375040,375080],"source":"public int formViewOption(\\[int value\\])"},{"content":"Specifies the form mode to use.","pos":[375150,375181]},{"content":"Options include Auto, Grid, and Details.","pos":[375182,375222]},{"content":"The default is Auto.","pos":[375223,375243]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[375368,375410],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[375478,375566]},{"content":"public boolean hasUserSetting()","pos":[375696,375727]},{"content":"Indicates whether the control has custom user settings.","pos":[375806,375861]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[376024,376066],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[376134,376173]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[376352,376388],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[376462,376524]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[376680,376717],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[376790,376829]},{"content":"public str helpField()","pos":[377008,377030]},{"content":"Retrieves the Help text for the control.","pos":[377118,377158]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[377336,377370],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[377446,377550]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[377664,377705],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[377774,377837]},{"content":"public int hWnd()","pos":[377992,378009]},{"content":"Retrieves the Windows handle for the control.","pos":[378102,378147]},{"content":"public int imageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[378320,378359],"source":"public int imageLocation(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[378648,378676]},{"content":"public boolean isDisplayed()","pos":[378976,379004]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[379086,379152]},{"content":"public boolean isRestricted()","pos":[379304,379333]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[379414,379481]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[379632,379688]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[379742,379843]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[379960,380000],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str keyTip(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[380288,380320],"source":"public str keyTip(\\[str value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[380616,380656],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[380726,380790]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[380944,380978],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[381054,381115]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[381272,381307],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[381382,381446]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[381600,381647],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[381710,381763]},{"content":"public xMenuFunction menufunction()","pos":[381928,381963]},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[382256,382294],"source":"public str menuItemName(\\[str value\\])"},{"content":"Determines which menu item is run for a DropDialogButton control.","pos":[382366,382431]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[382584,382663]},{"content":"Is called when the control is double-clicked by the user.","pos":[382694,382751]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[382912,382987]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[383022,383087]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[383240,383315]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[383350,383415]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[383568,383641]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[383678,383750]},{"content":"public int multiSelect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[383896,383933],"source":"public int multiSelect(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[384224,384254],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.","pos":[384334,384470]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[384553,384595],"source":"public int neededPermission(\\[int value\\])"},{"content":"Specifies the minimum permission level that is required to be allowed access to the control.","pos":[384663,384755]},{"content":"public int needsRecord(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[384881,384918],"source":"public int needsRecord(\\[int value\\])"},{"content":"Specifies whether a button is enabled if no record is present.","pos":[384991,385053]},{"content":"The default value is No.","pos":[385054,385078]},{"content":"public str normalImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[385209,385246],"source":"public str normalImage(\\[str value\\])"},{"content":"public int normalResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[385537,385577],"source":"public int normalResource(\\[int value\\])"},{"content":"public int openMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[385865,385899],"source":"public int openMode(\\[int value\\])"},{"content":"Specifies the view mode of the target form.","pos":[385975,386018]},{"content":"The possible values include Auto, View, Edit, and New.","pos":[386019,386073]},{"content":"The default is Auto.","pos":[386074,386094]},{"content":"You may use this property to specify whether the target form opens in edit or read-only mode.","pos":[386095,386188]},{"content":"public container SysObsoleteAttribute()","pos":[386193,386232]},{"content":"public str parameters(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[386521,386557],"source":"public str parameters(\\[str value\\])"},{"content":"Gets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.","pos":[386631,386733]},{"content":"public FormControl parentControl()","pos":[386849,386883]},{"content":"Retrieves the parent control for the control.","pos":[386959,387004]},{"content":"public boolean primary(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[387177,387218],"source":"public boolean primary(\\[boolean value\\])"},{"content":"public boolean saveRecord(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[387505,387549],"source":"public boolean saveRecord(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[387833,387890],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[387943,388002]},{"content":"public boolean sendExternalContext(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[388161,388214],"source":"public boolean sendExternalContext(\\[boolean value\\])"},{"content":"Specifies whether the external record context of this form should be used as the menu item external record context.","pos":[388271,388386]},{"content":"The default value is No.","pos":[388387,388411]},{"content":"public int shortkey(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[388489,388523],"source":"public int shortkey(\\[int value\\])"},{"content":"public int showContextMenu(int menuHandle)","pos":[388817,388859]},{"content":"Shows the shortcut menu for the control.","pos":[388927,388967]},{"content":"public boolean showShortCut(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[389145,389191],"source":"public boolean showShortCut(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[389473,389511],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[389583,389710]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[389801,389845],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[390129,390160],"source":"public int style(\\[int value\\])"},{"content":"Specifies the style of the form.","pos":[390239,390271]},{"content":"This property controls the form design pattern being used with the form.","pos":[390272,390344]},{"content":"The default is Auto.","pos":[390345,390365]},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[390457,390487],"source":"public str text(\\[str value\\])"},{"content":"public str toolTip()","pos":[390785,390805]},{"content":"Retrieves the tooltip text for the control.","pos":[390895,390938]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[391113,391152],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[391223,391285]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[391441,391474],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[391551,391610]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[391769,391803],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[391879,391941]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[392097,392127],"source":"public int type(\\[int value\\])"},{"content":"Specifies the type of the control.","pos":[392207,392241]},{"content":"Read-only.","pos":[392242,392252]},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[392425,392468],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[392753,392804]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[393081,393115],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[393191,393234]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[393409,393447],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[393519,393567]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[393737,393776],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[393847,393906]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[394065,394102],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[394175,394258]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[394393,394429],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[394503,394555]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[394721,394755],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[394831,394913]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[395049,395091],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[395159,395215]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[395377,395417],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[395487,395541]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[395705,395745],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[395815,395864]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[396033,396076],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[396143,396196]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[396361,396395],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[396471,396619]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[396689,396724],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[396799,396850]},{"content":"public boolean value(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[397017,397056],"source":"public boolean value(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[397345,397405],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[397455,397516]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[397673,397727],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[397783,397842]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[398001,398047],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[398111,398172]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[398329,398370],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[398439,398509]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[398657,398698],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[398767,398805]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[398985,399020],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[399095,399157]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[399313,399349],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[399423,399461]},{"content":"public void gotFocus()","pos":[399641,399663]},{"content":"Indicates that the control has received focus.","pos":[399751,399797]},{"content":"public void inputSearch(str searchStr)","pos":[399969,400007]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[400079,400150]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[400297,400334],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void prefColumnSize(int width, int height)","pos":[400625,400674]},{"content":"Specifies the preferred column width and height for the form control.","pos":[400735,400804]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[400953,401026]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[401063,401161]},{"content":"public void mouseLeave()","pos":[401281,401305]},{"content":"Indicates that the mouse pointer has left the control.","pos":[401391,401445]},{"content":"private void OnDialogClosed(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[401609,401688],"source":"private void OnDialogClosed(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void clicked()","pos":[401937,401958]},{"content":"private void OnClicked(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[402265,402339],"source":"private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void lostFocus()","pos":[402593,402616]},{"content":"Indicates that the control has lost focus.","pos":[402703,402745]},{"content":"public void jumpRef()","pos":[402921,402942]},{"content":"public void context()","pos":[403249,403270]},{"content":"Shows the shortcut menu for the control.","pos":[403359,403399]},{"content":"public void displayControl()","pos":[403577,403605]},{"content":"Displays the control.","pos":[403687,403708]},{"content":"public void dialogClosed(xFormRun formRun)","pos":[403905,403947]},{"content":"public void endDrag()","pos":[404233,404254]},{"content":"Is called when the user has finished dragging a form control.","pos":[404343,404404]},{"content":"public void dialogInitialized(xFormRun formRun)","pos":[404561,404608]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[404889,404965],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[405217,405286]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[405327,405427]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[405545,405620],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void resetUserSetting()","pos":[405873,405903]},{"content":"Resets the user settings for the control.","pos":[405983,406024]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[406201,406278]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[406311,406381]},{"content":"public void setFocus()","pos":[406529,406551]},{"content":"Sets the focus on the control.","pos":[406639,406669]},{"content":"public void cut()","pos":[406857,406874]},{"content":"Cuts the contents of the control.","pos":[406967,407000]},{"content":"public void dragLeave()","pos":[407185,407208]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[407295,407391]},{"content":"public void paste()","pos":[407513,407532]},{"content":"Pastes the contents of the clipboard into the control.","pos":[407623,407677]},{"content":"public void copy()","pos":[407841,407859]},{"content":"Copies the contents of the control to the clipboard.","pos":[407951,408003]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[408169,408276],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[408500,408519],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[408521,408561]},{"pos":[408618,408628],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408630,408635]},{"content":"The new value for the property; optional.","pos":[408638,408679]},{"pos":[408686,408698],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[408700,408756]},{"pos":[408763,408770],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[408772,408851]},{"pos":[408857,408873],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"content":"Changes the alignment of the text in the control.","pos":[408875,408924]},{"content":"Values are Left, right, or center, to align the control appropriately.","pos":[408925,408995]},{"pos":[409041,409051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409053,409058]},{"pos":[409067,409079],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409085,409101],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[409103,409170]},{"pos":[409224,409234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409236,409241]},{"content":"The value to assign to the allowEdit property.","pos":[409244,409290]},{"pos":[409297,409309],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[409311,409363]},{"pos":[409370,409377],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[409379,409505]},{"pos":[409511,409531],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[409533,409616]},{"pos":[409659,409671],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[409673,409741]},{"pos":[409747,409769],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[409771,409869]},{"pos":[409929,409939],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409941,409946]},{"content":"The new value of the property; optional.","pos":[409949,409989]},{"pos":[409996,410008],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[410010,410089]},{"pos":[410096,410103],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[410105,410142]},{"pos":[410148,410170],"content":"Method autoRefreshData","linkify":"Method autoRefreshData","nodes":[{"content":"Method autoRefreshData","pos":[0,22]}]},{"content":"Specifies whether the data from the data source that is associated with the control will be refreshed when the button is clicked.","pos":[410172,410301]},{"content":"The default value is No.","pos":[410302,410326]},{"pos":[410386,410396],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410398,410403]},{"pos":[410412,410424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[410430,410452],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[410454,410503]},{"pos":[410555,410565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410567,410572]},{"pos":[410581,410593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[410595,410639]},{"pos":[410646,410653],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[410655,410723]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[410729,410799]},{"content":"The second byte contains a value for green.","pos":[410804,410847]},{"content":"The third byte contains a value for blue.","pos":[410852,410893]},{"content":"The high-order byte must be zero.","pos":[410898,410931]},{"content":"The maximum value for a single byte is 255.","pos":[410936,410979]},{"pos":[410985,411001],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[411003,411065]},{"pos":[411111,411121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411123,411128]},{"pos":[411137,411149],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[411151,411212]},{"pos":[411218,411234],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[411236,411290]},{"pos":[411337,411347],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[411349,411350]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[411353,411423]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[411424,411491]},{"content":"y","pos":[411503,411504]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[411507,411577]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[411578,411645]},{"pos":[411652,411664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[411666,411705]},{"pos":[411712,411719],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[411721,411802]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[411803,411907]},{"pos":[411913,411923],"content":"Method big","linkify":"Method big","nodes":[{"content":"Method big","pos":[0,10]}]},{"pos":[411971,411981],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411983,411988]},{"pos":[411997,412009],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[412015,412026],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[412028,412095]},{"pos":[412136,412146],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[412148,412153]},{"pos":[412162,412174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[412176,412226]},{"pos":[412233,412240],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[412242,412314]},{"content":"0 Use the default font weight.","pos":[412320,412350]},{"content":"1 Thin.","pos":[412355,412362]},{"content":"2 Extra-light.","pos":[412367,412381]},{"content":"3 Light.","pos":[412386,412394]},{"content":"4 Normal.","pos":[412399,412408]},{"content":"5 Medium.","pos":[412413,412422]},{"content":"6 Semibold.","pos":[412427,412438]},{"content":"7 Bold.","pos":[412443,412450]},{"content":"8 Extra-bold.","pos":[412455,412468]},{"content":"9 Heavy.","pos":[412473,412481]},{"pos":[412487,412500],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[412502,412558]},{"pos":[412601,412611],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[412613,412618]},{"pos":[412627,412639],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[412641,412685]},{"pos":[412692,412699],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[412701,412793]},{"content":"Value.","pos":[412797,412803]},{"content":"Description.","pos":[412806,412818]},{"content":"0","pos":[412849,412850]},{"content":"Auto.","pos":[412858,412863]},{"content":"1","pos":[412875,412876]},{"content":"3D.","pos":[412884,412887]},{"content":"2","pos":[412901,412902]},{"content":"Single line.","pos":[412910,412922]},{"content":"3","pos":[412927,412928]},{"content":"Flat.","pos":[412936,412941]},{"content":"4","pos":[412953,412954]},{"content":"None.","pos":[412962,412967]},{"pos":[412982,413002],"content":"Method buttonDisplay","linkify":"Method buttonDisplay","nodes":[{"content":"Method buttonDisplay","pos":[0,20]}]},{"content":"Gets or sets the appearance of the button control.","pos":[413004,413054]},{"pos":[413104,413114],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[413116,413121]},{"pos":[413130,413142],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and five, inclusive.","pos":[413144,413188]},{"pos":[413195,413202],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The value of the property defines whether the text, the image, or both should be displayed on the button.","pos":[413204,413309]},{"content":"This property also controls relative positions of text and image if both are displayed.The integer value that is returned contains the appearace of the button control as follows:","pos":[413310,413488]},{"content":"Value.","pos":[413492,413498]},{"content":"Description.","pos":[413501,413513]},{"content":"0","pos":[413648,413649]},{"content":"Text only.","pos":[413657,413667]},{"content":"1","pos":[413726,413727]},{"content":"Image Only.","pos":[413735,413746]},{"content":"2","pos":[413804,413805]},{"content":"Text and image; the image is displayed below the text.","pos":[413813,413867]},{"content":"3","pos":[413882,413883]},{"content":"Text and image; the image is displayed above the text.","pos":[413891,413945]},{"content":"4","pos":[413960,413961]},{"content":"Text and image; the image is displayed to the left of the text.","pos":[413969,414032]},{"content":"5","pos":[414038,414039]},{"content":"Text and image; the image is displayed to the right of the text.","pos":[414047,414111]},{"pos":[414119,414141],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[414143,414177]},{"pos":[414244,414254],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[414256,414261]},{"content":"The number of lines to use to determine the height.","pos":[414264,414315]},{"content":"lines","pos":[414327,414332]},{"content":"The number of lines to use to determine the height.","pos":[414335,414386]},{"pos":[414393,414405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[414407,414453]},{"pos":[414459,414473],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[414475,414514]},{"pos":[414558,414568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414570,414575]},{"pos":[414584,414596],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[414598,414652]},{"pos":[414658,414677],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[414679,414722]},{"pos":[414771,414781],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414783,414788]},{"pos":[414797,414809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[414811,414873]},{"pos":[414880,414887],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[414889,414993]},{"content":"Value.","pos":[414997,415003]},{"content":"Description.","pos":[415006,415018]},{"content":"0","pos":[415065,415066]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415074,415087],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[415099,415100]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415108,415124],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[415133,415134]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415142,415157],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[415167,415169]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415176,415188],"source":"MAC\\_CHARSET"},{"content":"128","pos":[415201,415204]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415210,415227],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[415235,415238]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415244,415259],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[415269,415272]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415278,415293],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[415303,415306]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415312,415332],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[415337,415340]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415346,415360],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[415371,415374]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415380,415396],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[415405,415408]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415414,415433],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[415439,415442]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415448,415463],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[415473,415476]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415482,415498],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[415507,415510]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415516,415535],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[415541,415544]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415550,415562],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[415574,415662]},{"content":"Value.","pos":[415666,415672]},{"content":"Description.","pos":[415675,415687]},{"content":"130","pos":[415722,415725]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415731,415745],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[415749,415835]},{"content":"Value.","pos":[415839,415845]},{"content":"Description.","pos":[415848,415860]},{"content":"177","pos":[415897,415900]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415906,415921],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[415926,415929]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415935,415950],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[415954,416031]},{"content":"Value.","pos":[416035,416041]},{"content":"Description.","pos":[416044,416056]},{"content":"222","pos":[416089,416092]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[416098,416111],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[416115,416194]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[416195,416286],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[416287,416401]},{"pos":[416407,416425],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[416427,416472]},{"pos":[416520,416530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[416532,416537]},{"pos":[416546,416558],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[416560,416603]},{"pos":[416610,416617],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[416619,416680]},{"content":"Value.","pos":[416684,416690]},{"content":"Style.","pos":[416693,416699]},{"content":"0","pos":[416772,416773]},{"content":"Default.","pos":[416781,416789]},{"content":"1","pos":[416816,416817]},{"content":"The Microsoft Windows palette.","pos":[416825,416855]},{"content":"2","pos":[416860,416861]},{"content":"The true-color scheme.","pos":[416869,416891]},{"pos":[416907,416930],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[416932,416999]},{"pos":[417082,417092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[417094,417099]},{"content":"The ID of the configuration key being assigned to the control; optional.","pos":[417102,417174]},{"pos":[417181,417193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[417195,417267]},{"pos":[417274,417281],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[417283,417364]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[417365,417458]},{"pos":[417464,417489],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[417491,417587]},{"pos":[417632,417644],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[417646,417732]},{"pos":[417739,417746],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[417748,417797]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[417798,417946]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[417947,418081]},{"pos":[418087,418109],"content":"Method copyCallerQuery","linkify":"Method copyCallerQuery","nodes":[{"content":"Method copyCallerQuery","pos":[0,22]}]},{"content":"Specifies whether to copy the query from the calling form to the target form.","pos":[418111,418188]},{"content":"This enables the target form to display the same data that was being viewed in the original form.","pos":[418189,418286]},{"content":"The default value is Auto.","pos":[418287,418313]},{"pos":[418365,418375],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[418377,418382]},{"pos":[418391,418403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[418409,418434],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[418436,418514]},{"pos":[418569,418579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[418581,418586]},{"content":"The string that contains the country/region codes to set; optional.","pos":[418589,418656]},{"pos":[418663,418675],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[418677,418742]},{"pos":[418748,418780],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"content":"Specifies the field that will be used to identify the country context.","pos":[418782,418852]},{"content":"See CountryRegionCodes.","pos":[418853,418876]},{"pos":[418946,418956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[418958,418963]},{"pos":[418972,418984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[418990,419013],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[419015,419140]},{"pos":[419193,419203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419205,419210]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[419213,419287]},{"pos":[419294,419306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[419308,419420]},{"pos":[419427,419434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[419436,419563]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[419564,419657]},{"pos":[419663,419680],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[419682,419747]},{"pos":[419798,419808],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419810,419815]},{"pos":[419824,419836],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[419838,419883]},{"pos":[419889,419909],"content":"Method defaultButton","linkify":"Method defaultButton","nodes":[{"content":"Method defaultButton","pos":[0,20]}]},{"content":"Determines whether the button should be the default button in the form.","pos":[419911,419982]},{"pos":[420040,420050],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420052,420057]},{"pos":[420066,420078],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the button should be the default button; otherwise, false.","pos":[420080,420146]},{"pos":[420152,420172],"content":"Method disabledImage","linkify":"Method disabledImage","nodes":[{"content":"Method disabledImage","pos":[0,20]}]},{"content":"Gets or sets the disabled image of the button.","pos":[420174,420220]},{"pos":[420270,420280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420282,420287]},{"pos":[420296,420308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The full name of an image file.","pos":[420310,420341]},{"content":"The system supports all of the GDI-supported image formats.","pos":[420342,420401]},{"pos":[420408,420415],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property has precedence over the disabledResource property.","pos":[420417,420481]},{"content":"It is used if both of these properties are set.","pos":[420482,420529]},{"pos":[420535,420563],"content":"Method disabledImageLocation","linkify":"Method disabledImageLocation","nodes":[{"content":"Method disabledImageLocation","pos":[0,28]}]},{"pos":[420621,420631],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420633,420638]},{"pos":[420647,420659],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[420665,420688],"content":"Method disabledResource","linkify":"Method disabledResource","nodes":[{"content":"Method disabledResource","pos":[0,23]}]},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[420690,420768]},{"pos":[420821,420831],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420833,420838]},{"pos":[420847,420859],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resource ID of the image to use as the disabled button image.","pos":[420861,420926]},{"content":"Both icon and bitmap images are supported.","pos":[420927,420969]},{"pos":[420975,420995],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both.","pos":[420997,421166]},{"pos":[421216,421226],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421228,421233]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[421236,421310]},{"pos":[421317,421329],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal, or in both.","pos":[421331,421460]},{"pos":[421466,421481],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[421483,421564]},{"pos":[421609,421619],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421621,421626]},{"content":"An integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[421629,421707]},{"pos":[421714,421726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[421728,421788]},{"pos":[421795,421802],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave , the dragOver, and the dragOverEx to specify the behavior.","pos":[421804,421881]},{"pos":[421887,421902],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[421904,421998]},{"pos":[422092,422102],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[422104,422114]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[422117,422202]},{"content":"dragMode","pos":[422214,422222]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[422225,422310]},{"content":"x","pos":[422322,422323]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[422326,422411]},{"content":"y","pos":[422423,422424]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[422427,422512]},{"pos":[422519,422531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[422533,422598]},{"pos":[422604,422621],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[422623,422719]},{"pos":[422809,422819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[422821,422831]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[422834,422919]},{"content":"dragMode","pos":[422931,422939]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[422942,423027]},{"content":"x","pos":[423039,423040]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[423043,423128]},{"content":"y","pos":[423140,423141]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[423144,423229]},{"pos":[423236,423248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[423250,423315]},{"pos":[423321,423336],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[423338,423408]},{"pos":[423442,423454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[423456,423587]},{"pos":[423593,423607],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[423609,423660]},{"pos":[423712,423722],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423724,423729]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[423732,423804]},{"pos":[423811,423823],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[423825,423873]},{"pos":[423880,423887],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[423889,423964]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[423965,424060]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[424061,424195]},{"pos":[424201,424212],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[424214,424271]},{"pos":[424312,424322],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424324,424329]},{"pos":[424338,424350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[424352,424407]},{"pos":[424413,424428],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[424430,424487]},{"pos":[424532,424542],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424544,424549]},{"pos":[424558,424570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[424572,424605]},{"pos":[424611,424634],"content":"Method forcedToOverflow","linkify":"Method forcedToOverflow","nodes":[{"content":"Method forcedToOverflow","pos":[0,23]}]},{"pos":[424695,424705],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424707,424712]},{"pos":[424721,424733],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[424739,424761],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[424763,424814]},{"pos":[424866,424876],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424878,424883]},{"pos":[424892,424904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[424906,424950]},{"pos":[424957,424964],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[424966,425034]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[425040,425110]},{"content":"The second byte contains a value for green.","pos":[425115,425158]},{"content":"The third byte contains a value for blue.","pos":[425163,425204]},{"content":"The high-order byte must be zero.","pos":[425209,425242]},{"content":"The maximum value for a single byte is 255.","pos":[425247,425290]},{"pos":[425296,425317],"content":"Method formViewOption","linkify":"Method formViewOption","nodes":[{"content":"Method formViewOption","pos":[0,21]}]},{"content":"Specifies the form mode to use.","pos":[425319,425350]},{"content":"Options include Auto, Grid, and Details.","pos":[425351,425391]},{"content":"The default is Auto.","pos":[425392,425412]},{"pos":[425463,425473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[425475,425480]},{"pos":[425489,425501],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[425507,425524],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[425526,425614]},{"pos":[425667,425677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[425679,425682]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[425685,425755]},{"pos":[425762,425774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[425776,425843]},{"pos":[425849,425870],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[425872,425927]},{"pos":[425971,425983],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[425985,426048]},{"pos":[426054,426067],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[426069,426108]},{"pos":[426161,426171],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426173,426178]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[426181,426246]},{"content":"mode","pos":[426258,426262]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[426265,426330]},{"pos":[426337,426349],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[426351,426387]},{"pos":[426394,426401],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[426403,426510]},{"content":"Mode.","pos":[426514,426519]},{"content":"Height calculation.","pos":[426533,426552]},{"content":"-1 Exact.","pos":[426740,426749]},{"content":"The exact height in pixels of the controls is used.","pos":[426759,426810]},{"content":"0 Auto.","pos":[426853,426860]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[426872,426961]},{"content":"1 Column height.","pos":[426966,426982]},{"content":"The layout of the form determines the height of the control.","pos":[426985,427045]},{"content":"The height and height calculation mode can be set separately.","pos":[427078,427139]},{"pos":[427145,427162],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[427164,427226]},{"pos":[427273,427283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427285,427290]},{"content":"An integer value that indicates how control height is calculated; optional.","pos":[427293,427368]},{"pos":[427375,427387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[427389,427410]},{"pos":[427417,427424],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[427426,427480]},{"content":"Mode.","pos":[427484,427489]},{"content":"Height Calculation.","pos":[427501,427520]},{"content":"Exact.","pos":[427706,427712]},{"content":"The exact height in pixels of the controls is used.","pos":[427723,427774]},{"content":"Auto.","pos":[427817,427822]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[427834,427923]},{"content":"Column height.","pos":[427928,427942]},{"content":"The layout of the form determines the height of the control.","pos":[427945,428005]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[428038,428123]},{"pos":[428129,428147],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[428149,428188]},{"pos":[428236,428246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428248,428253]},{"content":"An integer that specifies the height in pixels; optional.","pos":[428256,428313]},{"pos":[428320,428332],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[428334,428355]},{"pos":[428362,428369],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[428371,428461]},{"pos":[428467,428483],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[428485,428525]},{"pos":[428560,428572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[428574,428662]},{"pos":[428669,428676],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[428678,428748]},{"content":"Use the helpText mehod to set the value of the Help text.","pos":[428749,428806]},{"pos":[428812,428827],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[428829,428933]},{"pos":[428978,428988],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428990,428995]},{"content":"The value that is assigned as the Help text for the control.","pos":[428998,429058]},{"pos":[429065,429077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[429079,429134]},{"pos":[429141,429148],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[429150,429218]},{"content":"The Help text must not exceed 250 characters.","pos":[429219,429264]},{"pos":[429270,429292],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[429294,429357]},{"pos":[429409,429419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[429421,429426]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[429429,429496]},{"pos":[429503,429515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[429517,429567]},{"pos":[429573,429584],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[429586,429631]},{"pos":[429661,429673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[429675,429702]},{"pos":[429709,429716],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[429718,429762]},{"pos":[429768,429788],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[429838,429848],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[429850,429855]},{"pos":[429864,429876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[429882,429900],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[429941,429953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[429959,429977],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[429979,430045]},{"pos":[430086,430098],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[430100,430151]},{"pos":[430158,430165],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[430167,430235]},{"pos":[430241,430260],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[430262,430329]},{"pos":[430371,430383],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[430385,430437]},{"pos":[430443,430468],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[430470,430571]},{"pos":[430640,430650],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[430652,430669]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[430672,430800]},{"pos":[430807,430819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[430821,430980]},{"pos":[430987,430994],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[430996,431073]},{"content":"FormAllowUserSetup::No 0","pos":[431413,431437]},{"content":"No changes can be made to the control.","pos":[431448,431486]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[431487,431576]},{"content":"FormAllowUserSetup::Restricted 1","pos":[431581,431613]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[431616,431708]},{"content":"The user cannot move the control.","pos":[431709,431742]},{"content":"FormAllowUserSetup::Yes 2","pos":[431749,431774]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[431784,431876]},{"content":"The user can also move the control.","pos":[431877,431912]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[431916,432105]},{"pos":[432111,432124],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[432175,432185],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432187,432192]},{"pos":[432201,432213],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[432219,432232],"content":"Method keyTip","linkify":"Method keyTip","nodes":[{"content":"Method keyTip","pos":[0,13]}]},{"pos":[432275,432285],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432287,432292]},{"pos":[432301,432313],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[432319,432330],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[432332,432396]},{"pos":[432447,432457],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432459,432464]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[432467,432553]},{"content":"mode","pos":[432565,432569]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[432572,432658]},{"pos":[432665,432677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[432679,432730]},{"pos":[432736,432751],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[432753,432814]},{"pos":[432859,432869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432871,432876]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[432879,432965]},{"pos":[432972,432984],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[432986,433042]},{"pos":[433048,433064],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[433066,433130]},{"pos":[433176,433186],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[433188,433193]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[433196,433277]},{"pos":[433284,433296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[433298,433349]},{"pos":[433355,433375],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[433377,433430]},{"pos":[433488,433498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[433500,433505]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[433508,433602]},{"pos":[433609,433621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[433623,433696]},{"pos":[433702,433721],"content":"Method menufunction","linkify":"Method menufunction","nodes":[{"content":"Method menufunction","pos":[0,19]}]},{"pos":[433769,433781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[433787,433806],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"content":"Determines which menu item is run for a DropDialogButton control.","pos":[433808,433873]},{"pos":[433922,433932],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[433934,433939]},{"pos":[433948,433960],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[433966,433986],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[433988,434045]},{"pos":[434137,434147],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[434149,434150]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[434153,434214]},{"content":"y","pos":[434226,434227]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[434230,434291]},{"content":"button","pos":[434303,434309]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[434312,434373]},{"content":"Ctrl","pos":[434385,434389]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[434392,434453]},{"content":"Shift","pos":[434465,434470]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[434473,434534]},{"pos":[434541,434553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[434555,434594]},{"pos":[434601,434608],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[434610,434714]},{"pos":[434720,434736],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[434738,434803]},{"pos":[434891,434901],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[434903,434904]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[434907,434968]},{"content":"y","pos":[434980,434981]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[434984,435045]},{"content":"button","pos":[435057,435063]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435066,435127]},{"content":"Ctrl","pos":[435139,435143]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435146,435207]},{"content":"Shift","pos":[435219,435224]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435227,435288]},{"pos":[435295,435307],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[435309,435348]},{"pos":[435355,435362],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[435364,435468]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[435469,435604]},{"pos":[435610,435626],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[435628,435693]},{"pos":[435781,435791],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[435793,435794]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435797,435858]},{"content":"y","pos":[435870,435871]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435874,435935]},{"content":"button","pos":[435947,435953]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435956,436017]},{"content":"Ctrl","pos":[436029,436033]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[436036,436097]},{"content":"Shift","pos":[436109,436114]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[436117,436178]},{"pos":[436185,436197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[436199,436238]},{"pos":[436245,436252],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[436254,436358]},{"pos":[436364,436378],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[436380,436452]},{"pos":[436538,436548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[436550,436551]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[436554,436615]},{"content":"y","pos":[436627,436628]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[436631,436692]},{"content":"button","pos":[436704,436710]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[436713,436774]},{"content":"Ctrl","pos":[436786,436790]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[436793,436854]},{"content":"Shift","pos":[436866,436871]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[436874,436935]},{"pos":[436942,436954],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[436956,436995]},{"pos":[437002,437009],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[437011,437115]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[437116,437251]},{"pos":[437257,437275],"content":"Method multiSelect","linkify":"Method multiSelect","nodes":[{"content":"Method multiSelect","pos":[0,18]}]},{"pos":[437323,437333],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437335,437340]},{"pos":[437349,437361],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437367,437378],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.","pos":[437380,437516]},{"pos":[437557,437567],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437569,437574]},{"content":"The name to assign to the control.","pos":[437577,437611]},{"pos":[437618,437630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[437632,437696]},{"pos":[437703,437710],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[437712,437806]},{"content":"It must begin with a letter.","pos":[437812,437840]},{"content":"It cannot exceed 250 characters.","pos":[437845,437877]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[437882,437936],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[437941,437981]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[437986,438096]},{"pos":[438102,438125],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"content":"Specifies the minimum permission level that is required to be allowed access to the control.","pos":[438127,438219]},{"pos":[438272,438282],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438284,438289]},{"pos":[438298,438310],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438317,438324],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The possible values are as follows:","pos":[438326,438361]},{"content":"None","pos":[438367,438371]},{"content":"Read","pos":[438376,438380]},{"content":"Update","pos":[438385,438391]},{"content":"Create","pos":[438396,438402]},{"content":"Correct","pos":[438407,438414]},{"content":"Delete","pos":[438419,438425]},{"content":"Manual","pos":[438430,438436]},{"content":"The default value is None.","pos":[438438,438464]},{"pos":[438470,438488],"content":"Method needsRecord","linkify":"Method needsRecord","nodes":[{"content":"Method needsRecord","pos":[0,18]}]},{"content":"Specifies whether a button is enabled if no record is present.","pos":[438490,438552]},{"content":"The default value is No.","pos":[438553,438577]},{"pos":[438625,438635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438637,438642]},{"pos":[438651,438663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438669,438687],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[438735,438745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438747,438752]},{"pos":[438761,438773],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438779,438800],"content":"Method normalResource","linkify":"Method normalResource","nodes":[{"content":"Method normalResource","pos":[0,21]}]},{"pos":[438851,438861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438863,438868]},{"pos":[438877,438889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438895,438910],"content":"Method openMode","linkify":"Method openMode","nodes":[{"content":"Method openMode","pos":[0,15]}]},{"content":"Specifies the view mode of the target form.","pos":[438912,438955]},{"content":"The possible values include Auto, View, Edit, and New.","pos":[438956,439010]},{"content":"The default is Auto.","pos":[439011,439031]},{"content":"You may use this property to specify whether the target form opens in edit or read-only mode.","pos":[439032,439125]},{"pos":[439170,439180],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[439182,439187]},{"pos":[439196,439208],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[439214,439241],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[439293,439305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[439311,439328],"content":"Method parameters","linkify":"Method parameters","nodes":[{"content":"Method parameters","pos":[0,17]}]},{"content":"Gets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.","pos":[439330,439432]},{"pos":[439479,439489],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[439491,439496]},{"pos":[439505,439517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The list of parameters that are passed to the object.","pos":[439519,439572]},{"pos":[439579,439586],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The parameters string format is Parameter1=Value1, Parameter2=Value2, and so on.cts ignore passed, unrecognized parameters.","pos":[439588,439711]},{"pos":[439717,439737],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[439739,439784]},{"pos":[439831,439843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[439845,439880]},{"pos":[439886,439900],"content":"Method primary","linkify":"Method primary","nodes":[{"content":"Method primary","pos":[0,14]}]},{"pos":[439952,439962],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[439964,439969]},{"pos":[439978,439990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[439996,440013],"content":"Method saveRecord","linkify":"Method saveRecord","nodes":[{"content":"Method saveRecord","pos":[0,17]}]},{"pos":[440068,440078],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[440080,440085]},{"pos":[440094,440106],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[440112,440130],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[440132,440191]},{"pos":[440259,440269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[440271,440276]},{"content":"The ID of the security key to assign to the control; optional.","pos":[440279,440341]},{"pos":[440348,440360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[440362,440461]},{"pos":[440467,440493],"content":"Method sendExternalContext","linkify":"Method sendExternalContext","nodes":[{"content":"Method sendExternalContext","pos":[0,26]}]},{"content":"Specifies whether the external record context of this form should be used as the menu item external record context.","pos":[440495,440610]},{"content":"The default value is No.","pos":[440611,440635]},{"pos":[440699,440709],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[440711,440716]},{"pos":[440725,440737],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[440743,440758],"content":"Method shortkey","linkify":"Method shortkey","nodes":[{"content":"Method shortkey","pos":[0,15]}]},{"pos":[440803,440813],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[440815,440820]},{"pos":[440829,440841],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[440847,440869],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[440871,440911]},{"pos":[440966,440976],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[440978,440988]},{"content":"The ID of the menu to show.","pos":[440991,441018]},{"pos":[441025,441037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[441039,441098]},{"pos":[441104,441123],"content":"Method showShortCut","linkify":"Method showShortCut","nodes":[{"content":"Method showShortCut","pos":[0,19]}]},{"pos":[441180,441190],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[441192,441197]},{"pos":[441206,441218],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[441224,441235],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[441237,441364]},{"pos":[441413,441423],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[441425,441430]},{"content":"The value to assign to the skip property of the control; optional.","pos":[441433,441499]},{"pos":[441506,441518],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[441520,441626]},{"pos":[441633,441640],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[441642,441837]},{"pos":[441843,441854],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[441909,441919],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[441921,441934]},{"pos":[441943,441955],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[441961,441973],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"content":"Specifies the style of the form.","pos":[441975,442007]},{"content":"This property controls the form design pattern being used with the form.","pos":[442008,442080]},{"content":"The default is Auto.","pos":[442081,442101]},{"pos":[442143,442153],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[442155,442160]},{"pos":[442169,442181],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[442187,442198],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[442239,442249],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[442251,442256]},{"pos":[442265,442277],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[442283,442297],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[442299,442342]},{"pos":[442375,442387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[442389,442491]},{"pos":[442498,442505],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[442507,442579]},{"pos":[442585,442595],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[442597,442659]},{"pos":[442709,442719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[442721,442726]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[442729,442813]},{"content":"mode","pos":[442825,442829]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[442832,442916]},{"pos":[442923,442935],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[442937,442986]},{"pos":[442992,443006],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[443008,443067]},{"pos":[443111,443121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[443123,443128]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[443131,443215]},{"pos":[443222,443234],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[443236,443290]},{"pos":[443296,443311],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[443313,443375]},{"pos":[443420,443430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[443432,443437]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[443440,443519]},{"pos":[443526,443538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[443540,443589]},{"pos":[443595,443606],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"content":"Specifies the type of the control.","pos":[443608,443642]},{"content":"Read-only.","pos":[443643,443653]},{"pos":[443694,443704],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[443706,443711]},{"pos":[443720,443732],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[443738,443754],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[443808,443818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[443820,443825]},{"pos":[443834,443846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[443852,443879],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[443943,443953],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[443955,443959]},{"pos":[443968,443980],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[443986,444001],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[444003,444046]},{"pos":[444091,444101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[444103,444108]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[444111,444183]},{"pos":[444190,444202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[444204,444234]},{"pos":[444240,444259],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[444261,444309]},{"pos":[444358,444368],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[444370,444375]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[444378,444455]},{"pos":[444462,444474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[444476,444511]},{"pos":[444517,444537],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[444539,444598]},{"pos":[444648,444658],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[444660,444665]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[444668,444756]},{"pos":[444763,444775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[444777,444823]},{"pos":[444829,444847],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[444849,444932]},{"pos":[444980,444990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[444992,444997]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[445000,445080]},{"pos":[445087,445099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[445101,445157]},{"pos":[445163,445180],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[445182,445234]},{"pos":[445281,445291],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[445293,445298]},{"content":"The user height for the control; optional.","pos":[445301,445343]},{"pos":[445350,445362],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[445364,445403]},{"pos":[445409,445424],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[445426,445508]},{"pos":[445553,445563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[445565,445570]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[445573,445652]},{"pos":[445659,445671],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[445673,445728]},{"pos":[445735,445742],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[445744,445914]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[445915,445990]},{"content":"This method lets you programmatically determine and set the value.","pos":[445991,446057]},{"pos":[446063,446086],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[446088,446144]},{"pos":[446197,446207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[446209,446214]},{"content":"The organization container to set for the control; optional.","pos":[446217,446277]},{"pos":[446284,446296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[446298,446341]},{"pos":[446347,446368],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[446370,446424]},{"pos":[446475,446485],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[446487,446492]},{"content":"The organization sibling to set for the control; optional.","pos":[446495,446553]},{"pos":[446560,446572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[446574,446615]},{"pos":[446621,446642],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[446644,446693]},{"pos":[446744,446754],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[446756,446761]},{"content":"The user label text to set for the control; optional.","pos":[446764,446817]},{"pos":[446824,446836],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[446838,446874]},{"pos":[446880,446904],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[446906,446959]},{"pos":[447013,447023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[447025,447030]},{"content":"The user security level to set for the control; optional.","pos":[447033,447090]},{"pos":[447097,447109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[447111,447151]},{"pos":[447157,447172],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[447174,447322]},{"pos":[447367,447377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[447379,447384]},{"content":"The value to assign to the userSkip property; optional.","pos":[447387,447442]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[447443,447538]},{"pos":[447545,447557],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[447559,447628]},{"pos":[447634,447650],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[447652,447703]},{"pos":[447749,447759],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[447761,447766]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[447769,447835]},{"pos":[447842,447854],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[447856,447985]},{"pos":[447992,447999],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[448001,448095]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[448096,448212],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[448213,448363]},{"pos":[448369,448381],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[448431,448441],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[448443,448448]},{"pos":[448457,448469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[448475,448497],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[448499,448560]},{"pos":[448629,448639],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[448641,448646]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[448649,448726]},{"content":"mode","pos":[448738,448742]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[448745,448822]},{"pos":[448829,448841],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[448843,448891]},{"pos":[448897,448923],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[448925,448984]},{"pos":[449049,449059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[449061,449065]},{"pos":[449074,449086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[449088,449142]},{"pos":[449148,449175],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[449177,449238]},{"pos":[449295,449305],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[449307,449312]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[449315,449393]},{"pos":[449400,449412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[449414,449462]},{"pos":[449468,449482],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[449484,449554]},{"pos":[449606,449616],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[449618,449623]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[449626,449698]},{"pos":[449705,449717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[449719,449768]},{"pos":[449774,449786],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[449788,449826]},{"pos":[449878,449888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[449890,449895]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[449898,449962]},{"content":"mode","pos":[449974,449978]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[449981,450045]},{"pos":[450052,450064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[450066,450101]},{"pos":[450108,450115],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[450117,450223]},{"content":"Mode.","pos":[450227,450232]},{"content":"Width calculation.","pos":[450245,450263]},{"content":"-1 Exact.","pos":[450449,450458]},{"content":"The exact width in pixels of the controls is used.","pos":[450467,450517]},{"content":"0 Auto.","pos":[450560,450567]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[450578,450666]},{"content":"1 Column width.","pos":[450671,450686]},{"content":"The layout of the form determines the width of the control.","pos":[450689,450748]},{"content":"The width and width calculation mode can be set separately.","pos":[450781,450840]},{"pos":[450846,450862],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[450864,450926]},{"pos":[450972,450982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[450984,450989]},{"content":"An integer value that indicates how control width is calculated; optional.","pos":[450992,451066]},{"pos":[451073,451085],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[451087,451148]},{"pos":[451155,451162],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[451164,451217]},{"content":"Mode.","pos":[451221,451226]},{"content":"Width Calculation.","pos":[451237,451255]},{"content":"Exact.","pos":[451439,451445]},{"content":"The exact width in pixels of the controls is used.","pos":[451455,451505]},{"content":"Auto.","pos":[451548,451553]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[451564,451652]},{"content":"Column width.","pos":[451657,451670]},{"content":"The layout of the form determines the width of the control.","pos":[451673,451732]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[451765,451848]},{"pos":[451854,451871],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[451873,451911]},{"pos":[451958,451968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[451970,451975]},{"content":"An integer that specifies the width in pixels; optional.","pos":[451978,452034]},{"pos":[452041,452053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[452055,452090]},{"pos":[452097,452104],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[452106,452179]},{"pos":[452185,452200],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[452202,452248]},{"pos":[452282,452300],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[452302,452373]},{"pos":[452424,452434],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[452436,452445]},{"content":"The string value to use to filter data; optional.","pos":[452448,452497]},{"pos":[452503,452516],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[452564,452574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[452576,452585]},{"pos":[452593,452614],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[452616,452685]},{"pos":[452747,452757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[452759,452764]},{"content":"The preferred height of the control.","pos":[452767,452803]},{"content":"height","pos":[452815,452821]},{"content":"The preferred height of the control.","pos":[452824,452860]},{"pos":[452866,452877],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[452879,452977]},{"pos":[453063,453073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[453075,453085]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[453088,453173]},{"content":"dragMode","pos":[453185,453193]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[453196,453281]},{"content":"x","pos":[453293,453294]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[453297,453382]},{"content":"y","pos":[453394,453395]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[453398,453483]},{"pos":[453489,453506],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[453508,453562]},{"pos":[453598,453619],"content":"Method OnDialogClosed","linkify":"Method OnDialogClosed","nodes":[{"content":"Method OnDialogClosed","pos":[0,21]}]},{"pos":[453707,453717],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[453719,453725]},{"content":"e","pos":[453739,453740]},{"pos":[453748,453762],"content":"Method clicked","linkify":"Method clicked","nodes":[{"content":"Method clicked","pos":[0,14]}]},{"pos":[453795,453811],"content":"Method OnClicked","linkify":"Method OnClicked","nodes":[{"content":"Method OnClicked","pos":[0,16]}]},{"pos":[453894,453904],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[453906,453912]},{"content":"e","pos":[453926,453927]},{"pos":[453935,453951],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[453953,453995]},{"pos":[454030,454044],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[454077,454091],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[454093,454133]},{"pos":[454166,454187],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[454189,454210]},{"pos":[454250,454269],"content":"Method dialogClosed","linkify":"Method dialogClosed","nodes":[{"content":"Method dialogClosed","pos":[0,19]}]},{"pos":[454324,454334],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formRun","pos":[454336,454343]},{"pos":[454351,454365],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[454367,454428]},{"pos":[454462,454469],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[454471,454599]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[454600,454704]},{"pos":[454710,454734],"content":"Method dialogInitialized","linkify":"Method dialogInitialized","nodes":[{"content":"Method dialogInitialized","pos":[0,24]}]},{"pos":[454794,454804],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formRun","pos":[454806,454813]},{"pos":[454821,454839],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[454924,454934],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[454936,454942]},{"content":"e","pos":[454956,454957]},{"pos":[454965,454978],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[454980,455080]},{"pos":[455162,455172],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[455174,455184]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[455187,455272]},{"content":"dragMode","pos":[455284,455292]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[455295,455380]},{"content":"x","pos":[455392,455393]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[455396,455481]},{"content":"y","pos":[455493,455494]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[455497,455582]},{"pos":[455588,455605],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[455689,455699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[455701,455707]},{"content":"e","pos":[455721,455722]},{"pos":[455730,455753],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[455755,455796]},{"pos":[455838,455855],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[455857,455927]},{"pos":[456017,456027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[456029,456030]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[456033,456094]},{"content":"y","pos":[456106,456107]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[456110,456171]},{"content":"button","pos":[456183,456189]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[456192,456253]},{"content":"Ctrl","pos":[456265,456269]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[456272,456333]},{"content":"Shift","pos":[456345,456350]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[456353,456414]},{"pos":[456420,456435],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[456437,456467]},{"pos":[456501,456511],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[456513,456546]},{"pos":[456575,456591],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[456593,456689]},{"pos":[456724,456736],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[456738,456792]},{"pos":[456823,456834],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[456836,456888]},{"pos":[456918,456947],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[457065,457075],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[457077,457093]},{"content":"objectMethodToCall","pos":[457107,457125]},{"content":"overrideObject","pos":[457139,457153]},{"pos":[457160,457179],"content":"Class FormEventArgs","linkify":"Class FormEventArgs","nodes":[{"content":"Class FormEventArgs","pos":[0,19]}]},{"pos":[457209,457216],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[457222,457230],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[457236,457243],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[457247,457253]},{"content":"Description","pos":[457256,457267]},{"pos":[457299,457329],"content":"Class FormFastTabHeaderControl","linkify":"Class FormFastTabHeaderControl","nodes":[{"content":"Class FormFastTabHeaderControl","pos":[0,30]}]},{"pos":[457390,457397],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[457403,457411],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[457417,457424],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[457428,457434]},{"content":"Description","pos":[457546,457557]},{"content":"public FormControl addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[458008,458112],"source":"public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[458298,458393],"source":"public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>)","pos":[458588,458703],"source":"public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\])"},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[458878,458922],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[459168,459215],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[459458,459504],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[459576,459616]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[459748,459791],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[459866,459933]},{"content":"public boolean allowSysSetup()","pos":[460038,460068]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[460156,460239]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[460328,460368],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[460618,460656],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[460908,460947],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[461198,461235],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[461488,461537],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[461606,461704]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[461778,461819],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[461896,461945]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[462068,462103],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[462186,462248]},{"content":"public int beginDrag(int x, int y)","pos":[462358,462392]},{"content":"Is called when the user starts to drag a form control.","pos":[462476,462530]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[462648,462678],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[462766,462833]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[462938,462995],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[463228,463279],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[463518,463561],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[463808,463862]},{"content":"Retrieves the size of the control.","pos":[463926,463960]},{"content":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[464098,464183],"source":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"public boolean canContain(FormControl control)","pos":[464388,464434]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[464678,464711],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[464796,464835]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[464968,465006],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[465086,465129]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[465258,465295],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[465376,465421]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[465548,465600],"source":"public int columns(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnsMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[465838,465884],"source":"public AutoMode columnsMode(\\[AutoMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[466128,466184],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[466418,466468],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[466708,466750],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[466998,467036],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[467288,467360],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[467406,467473]},{"content":"public List configurationKeyEx()","pos":[467578,467610]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[467696,467792]},{"content":"public boolean contains(FormControl control)","pos":[467868,467912]},{"content":"public int controlCount()","pos":[468158,468183]},{"content":"public FormControl controlNum(int controlNo)","pos":[468448,468492]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[468738,468782],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[468856,468934]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[469028,469087],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[469318,469360],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[469436,469561]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[469608,469648],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[469726,469791]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[469898,469937],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both.","pos":[470016,470185]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[470190,470224],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[470308,470389]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[470480,470561]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[470598,470692]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[470770,470847]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[470888,470984]},{"content":"public str dragText()","pos":[471060,471081]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[471178,471248]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[471350,471391],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[471468,471519]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[471640,471670],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[471758,471815]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[471930,471964],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[472048,472105]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[472220,472262],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[472338,472426]},{"content":"public boolean hasUserSetting()","pos":[472510,472541]},{"content":"Indicates whether the control has custom user settings.","pos":[472628,472683]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[472800,472842],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[472918,472957]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[473090,473126],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[473208,473270]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[473380,473417],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[473498,473537]},{"content":"public str helpField()","pos":[473670,473692]},{"content":"Retrieves the Help text for the control.","pos":[473788,473828]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[473960,473994],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[474078,474182]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[474250,474295],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[474540,474581],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[474658,474721]},{"content":"public int hWnd()","pos":[474830,474847]},{"content":"Retrieves the Windows handle for the control.","pos":[474948,474993]},{"content":"public boolean isContainer()","pos":[475120,475148]},{"content":"public boolean isDisplayed()","pos":[475410,475438]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[475528,475594]},{"content":"public boolean isRestricted()","pos":[475700,475729]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[475818,475885]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[475990,476046]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[476108,476209]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[476280,476320],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public boolean leave()","pos":[476570,476592]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[476860,476900],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[476978,477042]},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[477150,477205],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[477440,477489],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[477730,477771],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[478020,478054],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[478138,478199]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[478310,478345],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[478428,478492]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[478600,478647],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[478718,478771]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[478890,478969]},{"content":"Is called when the control is double-clicked by the user.","pos":[479008,479065]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[479180,479255]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[479298,479363]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[479470,479545]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[479588,479653]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[479760,479833]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[479878,479950]},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterId<ph id=\"ph2\">\\]</ph>)","pos":[480050,480110],"source":"public int moveControl(int controlId, \\[int insertAfterId\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[480340,480370],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.","pos":[480458,480594]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[480631,480673],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[480921,480960]},{"content":"public FormControl parentControl()","pos":[481211,481245]},{"content":"Retrieves the parent control for the control.","pos":[481329,481374]},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[481501,481557],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[481791,481841],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[482081,482123],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[482371,482428],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[482489,482548]},{"content":"public int showContextMenu(int menuHandle)","pos":[482661,482703]},{"content":"Shows the shortcut menu for the control.","pos":[482779,482819]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[482951,482989],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[483069,483196]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[483241,483285],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public str toolTip()","pos":[483531,483551]},{"content":"Retrieves the tooltip text for the control.","pos":[483649,483692]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[483821,483860],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[483939,484001]},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[484111,484165],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[484401,484449],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[484691,484731],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[484981,485014],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[485099,485158]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[485271,485305],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[485389,485451]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[485561,485591],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[485851,485894],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[486141,486192]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[486431,486465],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[486549,486592]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[486721,486759],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[486839,486887]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[487011,487050],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[487129,487188]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[487301,487338],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[487419,487502]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[487591,487627],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[487709,487761]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[487881,487915],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[487999,488081]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[488171,488213],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[488289,488345]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[488461,488501],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[488579,488633]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[488751,488791],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[488869,488918]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[489041,489084],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[489159,489212]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[489331,489365],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[489449,489597]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[489621,489656],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[489739,489790]},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[489911,489958],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[490201,490261],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[490319,490380]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[490491,490545],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[490609,490668]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[490781,490827],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[490899,490960]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[491071,491112],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[491189,491259]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[491361,491402],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[491479,491517]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[491651,491686],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[491769,491831]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[491941,491977],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[492059,492097]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[492231,492268],"source":"public void filter(\\[str filterStr\\])"},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[492521,492595],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void jumpRef()","pos":[492811,492832]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[493101,493208],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void gotFocus()","pos":[493391,493413]},{"content":"Indicates that the control has received focus.","pos":[493509,493555]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[493681,493756],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setFocus()","pos":[493971,493993]},{"content":"Sets the focus on the control.","pos":[494089,494119]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[494261,494338]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[494379,494449]},{"content":"public void arrange()","pos":[494551,494572]},{"content":"public void endDrag()","pos":[494841,494862]},{"content":"Is called when the user has finished dragging a form control.","pos":[494959,495020]},{"content":"public void paste()","pos":[495131,495150]},{"content":"Pastes the contents of the clipboard into the control.","pos":[495249,495303]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[495421,495494]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[495539,495637]},{"content":"public void resetUserSetting()","pos":[495711,495741]},{"content":"Resets the user settings for the control.","pos":[495829,495870]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[496001,496077],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void mouseLeave()","pos":[496291,496315]},{"content":"Indicates that the mouse pointer has left the control.","pos":[496409,496463]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[496581,496650]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[496699,496799]},{"content":"public void prefColumnSize(int width, int height)","pos":[496871,496920]},{"content":"Specifies the preferred column width and height for the form control.","pos":[496989,497058]},{"content":"public void copy()","pos":[497161,497179]},{"content":"Copies the contents of the control to the clipboard.","pos":[497279,497331]},{"content":"public void enter()","pos":[497451,497470]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[497741,497813],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void context()","pos":[498031,498052]},{"content":"Shows the shortcut menu for the control.","pos":[498149,498189]},{"content":"public void displayControl()","pos":[498321,498349]},{"content":"Displays the control.","pos":[498439,498460]},{"content":"public void cut()","pos":[498611,498628]},{"content":"Cuts the contents of the control.","pos":[498729,498762]},{"content":"public void lostFocus()","pos":[498901,498924]},{"content":"Indicates that the control has lost focus.","pos":[499019,499061]},{"content":"public void dragLeave()","pos":[499191,499214]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[499309,499405]},{"content":"public void inputSearch(str searchStr)","pos":[499481,499519]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[499599,499670]},{"pos":[499774,499791],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"pos":[499906,499916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[499918,499929]},{"content":"controlName","pos":[499943,499954]},{"content":"insertAfter","pos":[499968,499979]},{"pos":[499988,500000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[500006,500025],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[500131,500141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[500143,500155]},{"content":"controlName","pos":[500169,500180]},{"content":"insertAfter","pos":[500194,500205]},{"pos":[500214,500226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[500232,500251],"content":"Method addDataField","linkify":"Method addDataField","nodes":[{"content":"Method addDataField","pos":[0,19]}]},{"pos":[500375,500385],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[500387,500399]},{"content":"fieldId","pos":[500413,500420]},{"content":"insertAfter","pos":[500434,500445]},{"content":"arrayIndex","pos":[500459,500469]},{"pos":[500478,500490],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[500496,500513],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[500568,500578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500580,500585]},{"pos":[500594,500606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[500612,500632],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[500690,500700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500702,500707]},{"pos":[500716,500728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[500734,500753],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[500755,500795]},{"pos":[500852,500862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500864,500869]},{"content":"The new value for the property; optional.","pos":[500872,500913]},{"pos":[500920,500932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[500934,500990]},{"pos":[500997,501004],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[501006,501085]},{"pos":[501091,501107],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[501109,501176]},{"pos":[501230,501240],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[501242,501247]},{"content":"The value to assign to the allowEdit property.","pos":[501250,501296]},{"pos":[501303,501315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[501317,501369]},{"pos":[501376,501383],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[501385,501511]},{"pos":[501517,501537],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[501539,501622]},{"pos":[501665,501677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[501679,501747]},{"pos":[501753,501774],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[501825,501835],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[501837,501842]},{"pos":[501851,501863],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[501869,501888],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[501937,501947],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[501949,501954]},{"pos":[501963,501975],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[501981,502001],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[502051,502061],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[502063,502068]},{"pos":[502077,502089],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[502095,502113],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[502161,502171],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[502173,502178]},{"pos":[502187,502199],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[502205,502227],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[502229,502327]},{"pos":[502387,502397],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[502399,502404]},{"content":"The value to which to set the property; optional.","pos":[502407,502456]},{"pos":[502463,502475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[502477,502556]},{"pos":[502563,502570],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[502572,502609]},{"pos":[502615,502637],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[502639,502688]},{"pos":[502740,502750],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[502752,502757]},{"pos":[502766,502778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[502780,502824]},{"pos":[502831,502838],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[502840,502908]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[502914,502984]},{"content":"The second byte contains a value for green.","pos":[502989,503032]},{"content":"The third byte contains a value for blue.","pos":[503037,503078]},{"content":"The high-order byte must be zero.","pos":[503083,503116]},{"content":"The maximum value for a single byte is 255.","pos":[503121,503164]},{"pos":[503170,503186],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[503188,503250]},{"pos":[503296,503306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[503308,503313]},{"pos":[503322,503334],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[503336,503397]},{"pos":[503403,503419],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[503421,503475]},{"pos":[503522,503532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[503534,503535]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[503538,503608]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[503609,503676]},{"content":"y","pos":[503688,503689]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[503692,503762]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[503763,503830]},{"pos":[503837,503849],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[503851,503890]},{"pos":[503897,503904],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[503906,503987]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[503988,504092]},{"pos":[504098,504109],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[504111,504178]},{"pos":[504219,504229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504231,504236]},{"pos":[504245,504257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[504259,504309]},{"pos":[504316,504323],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[504325,504397]},{"content":"0 Use the default font weight.","pos":[504403,504433]},{"content":"1 Thin.","pos":[504438,504445]},{"content":"2 Extra-light.","pos":[504450,504464]},{"content":"3 Light.","pos":[504469,504477]},{"content":"4 Normal.","pos":[504482,504491]},{"content":"5 Medium.","pos":[504496,504505]},{"content":"6 Semibold.","pos":[504510,504521]},{"content":"7 Bold.","pos":[504526,504533]},{"content":"8 Extra-bold.","pos":[504538,504551]},{"content":"9 Heavy.","pos":[504556,504564]},{"pos":[504570,504589],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[504655,504665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504667,504672]},{"content":"mode","pos":[504686,504690]},{"pos":[504699,504711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504717,504740],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[504802,504812],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[504814,504818]},{"pos":[504827,504839],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504845,504869],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[504923,504933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504935,504940]},{"pos":[504949,504961],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504967,504989],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[504991,505025]},{"pos":[505092,505102],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[505104,505109]},{"content":"The number of lines to use to determine the height.","pos":[505112,505163]},{"content":"lines","pos":[505175,505180]},{"content":"The number of lines to use to determine the height.","pos":[505183,505234]},{"pos":[505241,505253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[505255,505301]},{"pos":[505307,505329],"content":"Method canAddDataField","linkify":"Method canAddDataField","nodes":[{"content":"Method canAddDataField","pos":[0,22]}]},{"pos":[505425,505435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[505437,505449]},{"content":"fieldId","pos":[505463,505470]},{"content":"arrayIndex","pos":[505484,505494]},{"pos":[505503,505515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[505521,505538],"content":"Method canContain","linkify":"Method canContain","nodes":[{"content":"Method canContain","pos":[0,17]}]},{"pos":[505597,505607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[505609,505616]},{"pos":[505625,505637],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[505643,505657],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[505659,505698]},{"pos":[505742,505752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[505754,505759]},{"pos":[505768,505780],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[505782,505836]},{"pos":[505842,505861],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[505863,505906]},{"pos":[505955,505965],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[505967,505972]},{"pos":[505981,505993],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[505995,506057]},{"pos":[506064,506071],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[506073,506177]},{"content":"Value.","pos":[506181,506187]},{"content":"Description.","pos":[506190,506202]},{"content":"0","pos":[506249,506250]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506258,506271],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[506283,506284]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506292,506308],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[506317,506318]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506326,506341],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[506351,506353]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506360,506372],"source":"MAC\\_CHARSET"},{"content":"128","pos":[506385,506388]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506394,506411],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[506419,506422]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506428,506443],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[506453,506456]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506462,506477],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[506487,506490]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506496,506516],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[506521,506524]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506530,506544],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[506555,506558]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506564,506580],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[506589,506592]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506598,506617],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[506623,506626]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506632,506647],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[506657,506660]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506666,506682],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[506691,506694]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506700,506719],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[506725,506728]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506734,506746],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[506758,506846]},{"content":"Value.","pos":[506850,506856]},{"content":"Description.","pos":[506859,506871]},{"content":"130","pos":[506906,506909]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[506915,506929],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[506933,507019]},{"content":"Value.","pos":[507023,507029]},{"content":"Description.","pos":[507032,507044]},{"content":"177","pos":[507081,507084]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[507090,507105],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[507110,507113]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[507119,507134],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[507138,507215]},{"content":"Value.","pos":[507219,507225]},{"content":"Description.","pos":[507228,507240]},{"content":"222","pos":[507273,507276]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[507282,507295],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[507299,507378]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[507379,507470],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[507471,507585]},{"pos":[507591,507609],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[507611,507656]},{"pos":[507704,507714],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[507716,507721]},{"pos":[507730,507742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[507744,507787]},{"pos":[507794,507801],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[507803,507864]},{"content":"Value.","pos":[507868,507874]},{"content":"Style.","pos":[507877,507883]},{"content":"0","pos":[507940,507941]},{"content":"Default.","pos":[507949,507957]},{"content":"1","pos":[507976,507977]},{"content":"The Windows palette.","pos":[507985,508005]},{"content":"2","pos":[508012,508013]},{"content":"The true-color scheme.","pos":[508021,508043]},{"pos":[508051,508065],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[508126,508136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508138,508143]},{"content":"mode","pos":[508157,508161]},{"pos":[508170,508182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[508188,508206],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[508263,508273],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[508275,508279]},{"pos":[508288,508300],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[508306,508324],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[508389,508399],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508401,508406]},{"content":"mode","pos":[508420,508424]},{"pos":[508433,508445],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[508451,508473],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[508534,508544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[508546,508550]},{"pos":[508559,508571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[508577,508600],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[508653,508663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508665,508670]},{"pos":[508679,508691],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[508697,508716],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[508765,508775],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508777,508782]},{"pos":[508791,508803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[508809,508832],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[508834,508901]},{"pos":[508984,508994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508996,509001]},{"content":"The ID of the configuration key being assigned to the control; optional.","pos":[509004,509076]},{"pos":[509083,509095],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[509097,509169]},{"pos":[509176,509183],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[509185,509266]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[509267,509360]},{"pos":[509366,509391],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[509393,509489]},{"pos":[509534,509546],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[509548,509634]},{"pos":[509641,509648],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[509650,509699]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[509700,509848]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[509849,509983]},{"pos":[509989,510004],"content":"Method contains","linkify":"Method contains","nodes":[{"content":"Method contains","pos":[0,15]}]},{"pos":[510061,510071],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[510073,510080]},{"pos":[510089,510101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[510107,510126],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[510164,510176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[510182,510199],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"pos":[510256,510266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[510268,510277]},{"pos":[510286,510298],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[510304,510329],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[510331,510409]},{"pos":[510464,510474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[510476,510481]},{"content":"The string that contains the country/region codes to set; optional.","pos":[510484,510551]},{"pos":[510558,510570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[510572,510637]},{"pos":[510643,510675],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[510745,510755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[510757,510762]},{"pos":[510771,510783],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[510789,510812],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[510814,510939]},{"pos":[510992,511002],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[511004,511009]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[511012,511086]},{"pos":[511093,511105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[511107,511219]},{"pos":[511226,511233],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[511235,511362]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[511363,511456]},{"pos":[511462,511479],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[511481,511546]},{"pos":[511597,511607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[511609,511614]},{"pos":[511623,511635],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[511637,511682]},{"pos":[511688,511708],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal for Finance and Operations, or in both.","pos":[511710,511879]},{"pos":[511929,511939],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[511941,511946]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[511949,512023]},{"pos":[512030,512042],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Finance and Operations client, in Enterprise Portal, or in both.","pos":[512044,512173]},{"pos":[512179,512194],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[512196,512277]},{"pos":[512322,512332],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[512334,512339]},{"content":"An Integer data type that indicates whether drag-and-drop behavior is enabled; optional.","pos":[512342,512430]},{"pos":[512437,512449],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[512451,512511]},{"pos":[512518,512525],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave, dragOver, and dragOverEx methods to specify the behavior.","pos":[512527,512603]},{"pos":[512609,512624],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[512626,512720]},{"pos":[512814,512824],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[512826,512836]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[512839,512924]},{"content":"dragMode","pos":[512936,512944]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[512947,513032]},{"content":"x","pos":[513044,513045]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[513048,513133]},{"content":"y","pos":[513145,513146]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[513149,513234]},{"pos":[513241,513253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[513255,513320]},{"pos":[513326,513343],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[513345,513441]},{"pos":[513531,513541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[513543,513553]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[513556,513641]},{"content":"dragMode","pos":[513653,513661]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[513664,513749]},{"content":"x","pos":[513761,513762]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[513765,513850]},{"content":"y","pos":[513862,513863]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[513866,513951]},{"pos":[513958,513970],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[513972,514037]},{"pos":[514043,514058],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[514060,514130]},{"pos":[514164,514176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[514178,514309]},{"pos":[514315,514329],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[514331,514382]},{"pos":[514434,514444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[514446,514451]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[514454,514526]},{"pos":[514533,514545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[514547,514595]},{"pos":[514602,514609],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[514611,514686]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[514687,514782]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[514783,514917]},{"pos":[514923,514934],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[514936,514993]},{"pos":[515034,515044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[515046,515051]},{"pos":[515060,515072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[515074,515129]},{"pos":[515135,515150],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[515152,515209]},{"pos":[515254,515264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[515266,515271]},{"pos":[515280,515292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[515294,515327]},{"pos":[515333,515350],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[515352,515440]},{"pos":[515493,515503],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[515505,515508]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[515511,515581]},{"pos":[515588,515600],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[515602,515669]},{"pos":[515675,515696],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[515698,515753]},{"pos":[515797,515809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[515811,515874]},{"pos":[515880,515893],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[515895,515934]},{"pos":[515987,515997],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[515999,516004]},{"content":"An integer data type that indicates how the height is calculated; optional.","pos":[516007,516082]},{"content":"mode","pos":[516094,516098]},{"content":"An integer data type that indicates how the height is calculated; optional.","pos":[516101,516176]},{"pos":[516183,516195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[516197,516233]},{"pos":[516240,516247],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[516249,516356]},{"content":"Mode.","pos":[516360,516365]},{"content":"Height calculation.","pos":[516379,516398]},{"content":"-1 Exact.","pos":[516586,516595]},{"content":"The exact height in pixels of the controls is used.","pos":[516605,516656]},{"content":"0 Auto.","pos":[516699,516706]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[516718,516807]},{"content":"1 Column height.","pos":[516812,516828]},{"content":"The layout of the form determines the height of the control.","pos":[516831,516891]},{"content":"The height and height calculation mode can be set separately.","pos":[516924,516985]},{"pos":[516991,517008],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[517010,517072]},{"pos":[517119,517129],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[517131,517136]},{"content":"An integer data type value that indicates how control height is calculated; optional.","pos":[517139,517224]},{"pos":[517231,517243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[517245,517266]},{"pos":[517273,517280],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[517282,517336]},{"content":"Mode.","pos":[517340,517345]},{"content":"Height Calculation.","pos":[517357,517376]},{"content":"Exact.","pos":[517562,517568]},{"content":"The exact height in pixels of the controls is used.","pos":[517579,517630]},{"content":"Auto.","pos":[517673,517678]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[517690,517779]},{"content":"Column height.","pos":[517784,517798]},{"content":"The layout of the form determines the height of the control.","pos":[517801,517861]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[517894,517979]},{"pos":[517985,518003],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[518005,518044]},{"pos":[518092,518102],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[518104,518109]},{"content":"An integer data type that specifies the height in pixels; optional.","pos":[518112,518179]},{"pos":[518186,518198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[518200,518221]},{"pos":[518228,518235],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[518237,518327]},{"pos":[518333,518349],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[518351,518391]},{"pos":[518426,518438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[518440,518528]},{"pos":[518535,518542],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[518544,518614]},{"content":"Use the helpText method to set the value of the Help text.","pos":[518615,518673]},{"pos":[518679,518694],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[518696,518800]},{"pos":[518845,518855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[518857,518862]},{"content":"The value that is assigned as the Help text for the control.","pos":[518865,518925]},{"pos":[518932,518944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[518946,519001]},{"pos":[519008,519015],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[519017,519085]},{"content":"The Help text must not exceed 250 characters.","pos":[519086,519131]},{"pos":[519137,519155],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[519211,519221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[519223,519228]},{"pos":[519237,519249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[519255,519277],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[519279,519342]},{"pos":[519394,519404],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[519406,519411]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[519414,519481]},{"pos":[519488,519500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[519502,519552]},{"pos":[519558,519569],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[519571,519616]},{"pos":[519646,519658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[519660,519687]},{"pos":[519694,519701],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[519703,519747]},{"pos":[519753,519771],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[519812,519824],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[519830,519848],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[519850,519916]},{"pos":[519957,519969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[519971,520022]},{"pos":[520029,520036],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[520038,520106]},{"pos":[520112,520131],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[520133,520200]},{"pos":[520242,520254],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[520256,520308]},{"pos":[520314,520339],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[520341,520442]},{"pos":[520511,520521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[520523,520540]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[520543,520671]},{"pos":[520678,520690],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[520692,520851]},{"pos":[520858,520865],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[520867,520944]},{"content":"FormAllowUserSetup::No 0","pos":[521284,521308]},{"content":"No changes can be made to the control.","pos":[521319,521357]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[521358,521447]},{"content":"FormAllowUserSetup::Restricted 1","pos":[521452,521484]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[521487,521579]},{"content":"The user cannot move the control.","pos":[521580,521613]},{"content":"FormAllowUserSetup::Yes 2","pos":[521620,521645]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[521655,521747]},{"content":"The user can also move the control.","pos":[521748,521783]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[521787,521976]},{"pos":[521982,521995],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[522046,522056],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[522058,522063]},{"pos":[522072,522084],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[522090,522102],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[522137,522149],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[522155,522166],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[522168,522232]},{"pos":[522283,522293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[522295,522300]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[522303,522389]},{"content":"mode","pos":[522401,522405]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[522408,522494]},{"pos":[522501,522513],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[522515,522566]},{"pos":[522572,522589],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[522653,522663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[522665,522670]},{"content":"mode","pos":[522684,522688]},{"pos":[522697,522709],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[522715,522736],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[522796,522806],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[522808,522812]},{"pos":[522821,522833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[522839,522861],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[522913,522923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[522925,522930]},{"pos":[522939,522951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[522957,522972],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[522974,523035]},{"pos":[523080,523090],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[523092,523097]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[523100,523186]},{"pos":[523193,523205],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[523207,523263]},{"pos":[523269,523285],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[523287,523351]},{"pos":[523397,523407],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[523409,523414]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[523417,523498]},{"pos":[523505,523517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[523519,523570]},{"pos":[523576,523596],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[523598,523651]},{"pos":[523709,523719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[523721,523726]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[523729,523823]},{"pos":[523830,523842],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[523844,523917]},{"pos":[523923,523943],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[523945,524002]},{"pos":[524094,524104],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[524106,524107]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[524110,524171]},{"content":"y","pos":[524183,524184]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[524187,524248]},{"content":"button","pos":[524260,524266]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[524269,524330]},{"content":"Ctrl","pos":[524342,524346]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[524349,524410]},{"content":"Shift","pos":[524422,524427]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[524430,524491]},{"pos":[524498,524510],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[524512,524551]},{"pos":[524558,524565],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[524567,524671]},{"pos":[524677,524693],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[524695,524760]},{"pos":[524848,524858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[524860,524861]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[524864,524925]},{"content":"y","pos":[524937,524938]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[524941,525002]},{"content":"button","pos":[525014,525020]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[525023,525084]},{"content":"Ctrl","pos":[525096,525100]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[525103,525164]},{"content":"Shift","pos":[525176,525181]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[525184,525245]},{"pos":[525252,525264],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[525266,525305]},{"pos":[525312,525319],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[525321,525425]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[525426,525561]},{"pos":[525567,525583],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[525585,525650]},{"pos":[525738,525748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[525750,525751]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[525754,525815]},{"content":"y","pos":[525827,525828]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[525831,525892]},{"content":"button","pos":[525904,525910]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[525913,525974]},{"content":"Ctrl","pos":[525986,525990]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[525993,526054]},{"content":"Shift","pos":[526066,526071]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[526074,526135]},{"pos":[526142,526154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[526156,526195]},{"pos":[526202,526209],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[526211,526315]},{"pos":[526321,526335],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[526337,526409]},{"pos":[526495,526505],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[526507,526508]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[526511,526572]},{"content":"y","pos":[526584,526585]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[526588,526649]},{"content":"button","pos":[526661,526667]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[526670,526731]},{"content":"Ctrl","pos":[526743,526747]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[526750,526811]},{"content":"Shift","pos":[526823,526828]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[526831,526892]},{"pos":[526899,526911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[526913,526952]},{"pos":[526959,526966],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[526968,527072]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[527073,527208]},{"pos":[527214,527232],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"pos":[527303,527313],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[527315,527324]},{"content":"insertAfterId","pos":[527338,527351]},{"pos":[527360,527372],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[527378,527389],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.","pos":[527391,527527]},{"pos":[527568,527578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[527580,527585]},{"content":"The name to assign to the control.","pos":[527588,527622]},{"pos":[527629,527641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[527643,527707]},{"pos":[527714,527721],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[527723,527817]},{"content":"It must begin with a letter.","pos":[527823,527851]},{"content":"It cannot exceed 250 characters.","pos":[527856,527888]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[527893,527947],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[527952,527992]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[527997,528107]},{"pos":[528113,528136],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[528189,528199],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[528201,528206]},{"pos":[528215,528227],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[528233,528260],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[528312,528324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[528330,528350],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[528352,528397]},{"pos":[528444,528456],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[528458,528493]},{"pos":[528499,528517],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[528582,528592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[528594,528599]},{"content":"mode","pos":[528613,528617]},{"pos":[528626,528638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[528644,528666],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[528727,528737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[528739,528743]},{"pos":[528752,528764],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[528770,528793],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[528846,528856],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[528858,528863]},{"pos":[528872,528884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[528890,528908],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[528910,528969]},{"pos":[529037,529047],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[529049,529054]},{"content":"The ID of the security key to assign to the control; optional.","pos":[529057,529119]},{"pos":[529126,529138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[529140,529239]},{"pos":[529245,529267],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[529269,529309]},{"pos":[529364,529374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[529376,529386]},{"content":"The ID of the menu to show.","pos":[529389,529416]},{"pos":[529423,529435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[529437,529496]},{"pos":[529502,529513],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[529515,529642]},{"pos":[529691,529701],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[529703,529708]},{"content":"The value to assign to the skip property of the control; optional.","pos":[529711,529777]},{"pos":[529784,529796],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[529798,529904]},{"pos":[529911,529918],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[529920,530115]},{"pos":[530121,530132],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[530187,530197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[530199,530212]},{"pos":[530221,530233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[530239,530253],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[530255,530298]},{"pos":[530331,530343],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[530345,530447]},{"pos":[530454,530461],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[530463,530535]},{"pos":[530541,530551],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[530553,530615]},{"pos":[530665,530675],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[530677,530682]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[530685,530769]},{"content":"mode","pos":[530781,530785]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[530788,530872]},{"pos":[530879,530891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[530893,530942]},{"pos":[530948,530964],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[531027,531037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[531039,531044]},{"content":"mode","pos":[531058,531062]},{"pos":[531071,531083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[531089,531109],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[531168,531178],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[531180,531184]},{"pos":[531193,531205],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[531211,531232],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[531283,531293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[531295,531300]},{"pos":[531309,531321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[531327,531341],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[531343,531402]},{"pos":[531446,531456],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[531458,531463]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[531466,531550]},{"pos":[531557,531569],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[531571,531625]},{"pos":[531631,531646],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[531648,531710]},{"pos":[531755,531765],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[531767,531772]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[531775,531854]},{"pos":[531861,531873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[531875,531924]},{"pos":[531930,531941],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[531982,531992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[531994,531999]},{"pos":[532008,532020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[532026,532042],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[532096,532106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[532108,532113]},{"pos":[532122,532134],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[532140,532167],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[532231,532241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[532243,532247]},{"pos":[532256,532268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[532274,532289],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[532291,532334]},{"pos":[532379,532389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[532391,532396]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[532399,532471]},{"pos":[532478,532490],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[532492,532522]},{"pos":[532528,532547],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[532549,532597]},{"pos":[532646,532656],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[532658,532663]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[532666,532743]},{"pos":[532750,532762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[532764,532799]},{"pos":[532805,532825],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[532827,532886]},{"pos":[532936,532946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[532948,532953]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[532956,533044]},{"pos":[533051,533063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[533065,533111]},{"pos":[533117,533135],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[533137,533220]},{"pos":[533268,533278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[533280,533285]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[533288,533368]},{"pos":[533375,533387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[533389,533445]},{"pos":[533451,533468],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[533470,533522]},{"pos":[533569,533579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[533581,533586]},{"content":"The user height for the control; optional.","pos":[533589,533631]},{"pos":[533638,533650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[533652,533691]},{"pos":[533697,533712],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[533714,533796]},{"pos":[533841,533851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[533853,533858]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[533861,533940]},{"pos":[533947,533959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[533961,534016]},{"pos":[534023,534030],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[534032,534202]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[534203,534278]},{"content":"This method lets you programmatically determine and set the value.","pos":[534279,534345]},{"pos":[534351,534374],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[534376,534432]},{"pos":[534485,534495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[534497,534502]},{"content":"The organization container to set for the control; optional.","pos":[534505,534565]},{"pos":[534572,534584],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[534586,534629]},{"pos":[534635,534656],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[534658,534712]},{"pos":[534763,534773],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[534775,534780]},{"content":"The organization sibling to set for the control; optional.","pos":[534783,534841]},{"pos":[534848,534860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[534862,534903]},{"pos":[534909,534930],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[534932,534981]},{"pos":[535032,535042],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[535044,535049]},{"content":"The user label text to set for the control; optional.","pos":[535052,535105]},{"pos":[535112,535124],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[535126,535162]},{"pos":[535168,535192],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[535194,535247]},{"pos":[535301,535311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[535313,535318]},{"content":"The user security level to set for the control; optional.","pos":[535321,535378]},{"pos":[535385,535397],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[535399,535439]},{"pos":[535445,535460],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[535462,535610]},{"pos":[535655,535665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[535667,535672]},{"content":"The value to assign to the userSkip property; optional.","pos":[535675,535730]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[535731,535826]},{"pos":[535833,535845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[535847,535916]},{"pos":[535922,535938],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[535940,535991]},{"pos":[536037,536047],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[536049,536054]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[536057,536123]},{"pos":[536130,536142],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[536144,536273]},{"pos":[536280,536287],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[536289,536383]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[536384,536500],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[536501,536651]},{"pos":[536657,536677],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[536735,536745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[536747,536752]},{"pos":[536761,536773],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[536779,536801],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[536803,536864]},{"pos":[536933,536943],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[536945,536950]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[536953,537024]},{"content":"mode","pos":[537036,537040]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[537043,537114]},{"pos":[537121,537133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[537135,537183]},{"pos":[537189,537215],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[537217,537276]},{"pos":[537341,537351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[537353,537357]},{"pos":[537366,537378],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[537380,537434]},{"pos":[537440,537467],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[537469,537530]},{"pos":[537587,537597],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[537599,537604]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[537607,537685]},{"pos":[537692,537704],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[537706,537754]},{"pos":[537760,537774],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[537776,537846]},{"pos":[537898,537908],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[537910,537915]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[537918,537990]},{"pos":[537997,538009],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[538011,538060]},{"pos":[538066,538078],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[538080,538118]},{"pos":[538170,538180],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[538182,538187]},{"content":"An integer data type that indicates how the width is calculated; optional.","pos":[538190,538264]},{"content":"mode","pos":[538276,538280]},{"content":"An integer data type that indicates how the width is calculated; optional.","pos":[538283,538357]},{"pos":[538364,538376],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[538378,538413]},{"pos":[538420,538427],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[538429,538535]},{"content":"Mode.","pos":[538539,538544]},{"content":"Width calculation.","pos":[538557,538575]},{"content":"-1 Exact.","pos":[538761,538770]},{"content":"The exact width in pixels of the controls is used.","pos":[538779,538829]},{"content":"0 Auto.","pos":[538872,538879]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[538890,538978]},{"content":"1 Column width.","pos":[538983,538998]},{"content":"The layout of the form determines the width of the control.","pos":[539001,539060]},{"content":"The width and width calculation mode can be set separately.","pos":[539093,539152]},{"pos":[539158,539174],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[539176,539238]},{"pos":[539284,539294],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[539296,539301]},{"content":"An integer data type value that indicates how control width is calculated; optional.","pos":[539304,539388]},{"pos":[539395,539407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[539409,539470]},{"pos":[539477,539484],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[539486,539539]},{"content":"Mode.","pos":[539543,539548]},{"content":"Width Calculation.","pos":[539559,539577]},{"content":"Exact.","pos":[539761,539767]},{"content":"The exact width in pixels of the controls is used.","pos":[539777,539827]},{"content":"Auto.","pos":[539870,539875]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[539886,539974]},{"content":"Column width.","pos":[539979,539992]},{"content":"The layout of the form determines the width of the control.","pos":[539995,540054]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[540087,540170]},{"pos":[540176,540193],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[540195,540233]},{"pos":[540280,540290],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[540292,540297]},{"content":"An integer data type that specifies the width in pixels; optional.","pos":[540300,540366]},{"pos":[540373,540385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[540387,540422]},{"pos":[540429,540436],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[540438,540511]},{"pos":[540517,540530],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[540578,540588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[540590,540599]},{"pos":[540607,540623],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[540706,540716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[540718,540724]},{"content":"e","pos":[540738,540739]},{"pos":[540747,540761],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[540794,540823],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[540941,540951],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[540953,540969]},{"content":"objectMethodToCall","pos":[540983,541001]},{"content":"overrideObject","pos":[541015,541029]},{"pos":[541037,541052],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[541054,541100]},{"pos":[541134,541151],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[541235,541245],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[541247,541253]},{"content":"e","pos":[541267,541268]},{"pos":[541276,541291],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[541293,541323]},{"pos":[541357,541374],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[541376,541446]},{"pos":[541536,541546],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[541548,541549]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[541552,541613]},{"content":"y","pos":[541625,541626]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[541629,541690]},{"content":"button","pos":[541702,541708]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[541711,541772]},{"content":"Ctrl","pos":[541784,541788]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[541791,541852]},{"content":"Shift","pos":[541864,541869]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[541872,541933]},{"pos":[541939,541953],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[541986,542000],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[542002,542063]},{"pos":[542097,542104],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[542106,542234]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[542235,542339]},{"pos":[542345,542357],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[542359,542413]},{"pos":[542444,542455],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[542457,542555]},{"pos":[542641,542651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[542653,542663]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[542666,542751]},{"content":"dragMode","pos":[542763,542771]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[542774,542859]},{"content":"x","pos":[542871,542872]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[542875,542960]},{"content":"y","pos":[542972,542973]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[542976,543061]},{"pos":[543067,543090],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[543092,543133]},{"pos":[543175,543193],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[543278,543288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[543290,543296]},{"content":"e","pos":[543310,543311]},{"pos":[543319,543336],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[543338,543392]},{"pos":[543428,543441],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[543443,543543]},{"pos":[543625,543635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[543637,543647]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[543650,543735]},{"content":"dragMode","pos":[543747,543755]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[543758,543843]},{"content":"x","pos":[543855,543856]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[543859,543944]},{"content":"y","pos":[543956,543957]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[543960,544045]},{"pos":[544051,544072],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[544074,544143]},{"pos":[544205,544215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[544217,544222]},{"content":"The preferred height of the control.","pos":[544225,544261]},{"content":"height","pos":[544273,544279]},{"content":"The preferred height of the control.","pos":[544282,544318]},{"pos":[544324,544335],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[544337,544389]},{"pos":[544419,544431],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[544462,544476],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[544557,544567],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[544569,544575]},{"content":"e","pos":[544589,544590]},{"pos":[544598,544612],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[544614,544654]},{"pos":[544687,544708],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[544710,544731]},{"pos":[544771,544781],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[544783,544816]},{"pos":[544845,544861],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[544863,544905]},{"pos":[544940,544956],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[544958,545054]},{"pos":[545089,545107],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[545109,545180]},{"pos":[545231,545241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[545243,545252]},{"content":"The string value to use to filter data; optional.","pos":[545255,545304]}]}