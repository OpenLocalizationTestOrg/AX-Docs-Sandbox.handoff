{"content":"---\n# required metadata\n\ntitle: P Classes\ndescription: System API classes that start with the letter P.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 52231\nms.assetid: 50842cd5-c27f-43aa-8a6d-bc9d3b02fd60\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# P Classes\n\n[!include[banner](../includes/banner.md)]\n\n\nSystem API classes that start with the letter P.\n\nClass Page\n----------\n\n    class Page extends Object\n\nThis Page class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                        | Description                                                              |\n|-------------------------------------------------------------------------------|--------------------------------------------------------------------------|\n| public boolean actionPaneControlEnabled(str controlName, \\[boolean enabled\\]) | Sets or gets the enabled property value of a control on the Action Pane. |\n| public boolean actionPaneControlVisible(str controlName, \\[boolean visible\\]) | Sets or gets the visible property value of a control on the Action Pane. |\n| public Array activeActionPaneTabNames()                                       |                                                                          |\n| public Common activeRecord(str dataSourceName)                                | Gets the active record for the given data source name.                   |\n| public str name()                                                             | Gets the name of the page.                                               |\n| public PageArgs pageArgs()                                                    | Gets the page arguments.                                                 |\n| public xFormRun formRun()                                                     |                                                                          |\n\n### Method actionPaneControlEnabled\n\nSets or gets the enabled property value of a control on the Action Pane.\n\n    public boolean actionPaneControlEnabled(str controlName, [boolean enabled])\n\n#### Parameters\n\ncontrolName  \nA value that specifies whether the Action Pane control is enabled; optional.\n\n<!-- -->\n\nenabled  \nA value that specifies whether the Action Pane control is enabled; optional.\n\n#### Return Value\n\nA Boolean value that indicates whether the Action Pane control is enabled.\n\n### Method actionPaneControlVisible\n\nSets or gets the visible property value of a control on the Action Pane.\n\n    public boolean actionPaneControlVisible(str controlName, [boolean visible])\n\n#### Parameters\n\ncontrolName  \nA value that specifies whether the Action Pane control is visible; optional.\n\n<!-- -->\n\nvisible  \nA value that specifies whether the Action Pane control is visible; optional.\n\n#### Return Value\n\nA Boolean value that indicates whether the Action Pane control is visible.\n\n### Method activeActionPaneTabNames\n\n    public Array activeActionPaneTabNames()\n\n#### Return Value\n\n### Method activeRecord\n\nGets the active record for the given data source name.\n\n    public Common activeRecord(str dataSourceName)\n\n#### Parameters\n\ndataSourceName  \nThe name of the data source to search on.\n\n#### Return Value\n\nThe active record for the given data source.\n\n### Method name\n\nGets the name of the page.\n\n    public str name()\n\n#### Return Value\n\nThe page name.\n\n### Method pageArgs\n\nGets the page arguments.\n\n    public PageArgs pageArgs()\n\n#### Return Value\n\nThe page arguments.\n\n### Method formRun\n\n    public xFormRun formRun()\n\n#### Return Value\n\n## Class PageArgs\n    class PageArgs extends Object\n\nThe PageArgs class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                         | Description                                                                                                 |\n|------------------------------------------------|-------------------------------------------------------------------------------------------------------------|\n| public int enumParameter(\\[int value\\])        | Gets or sets the enumParameter property that is passed to the object that is run by the MenuFunction class. |\n| public int enumTypeParameter(\\[int value\\])    | Gets or sets the enumTypeParameter property for the MenuFunction class.                                     |\n| public Common externalRecord(\\[Common value\\]) |                                                                                                             |\n| public str menuItemName(\\[str value\\])         |                                                                                                             |\n| public str parameters(\\[str value\\])           | Gets or sets the list of parameters that are passed to objects that are run by the MenuFunction class.      |\n| public void new()                              | Initializes a new instance of the PageArgs class.                                                           |\n\n### Method enumParameter\n\nGets or sets the enumParameter property that is passed to the object that is run by the MenuFunction class.\n\n    public int enumParameter([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe enumParameter property that is passed to the object that is run by the MenuFunction class.\n\n### Method enumTypeParameter\n\nGets or sets the enumTypeParameter property for the MenuFunction class.\n\n    public int enumTypeParameter([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe enumTypeParameter property for the MenuFunction class.\n\n### Method externalRecord\n\n    public Common externalRecord([Common value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method parameters\n\nGets or sets the list of parameters that are passed to objects that are run by the MenuFunction class.\n\n    public str parameters([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe list of parameters that are passed to the object.\n\n#### Remarks\n\nThe parameters string format is Parameter1=Value1, Parameter2=Value2, and so on.cts ignore passed, unrecognized parameters.\n\n### Method new\n\nInitializes a new instance of the PageArgs class.\n\n    public void new()\n\n## Class PageInteraction\n    class PageInteraction extends Object\n\nThe PageInteraction class provides functionality for interacting with a list page.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                           | Description                                                        |\n|--------------------------------------------------|--------------------------------------------------------------------|\n| public Page page()                               | Gets the ListPage instance.                                        |\n| public void tabChanged(container activeTabNames) |                                                                    |\n| public void new(Page page)                       | Creates a new PageInteraction object that operates on a list page. |\n\n### Method page\n\nGets the ListPage instance.\n\n    public Page page()\n\n#### Return Value\n\nReturns the ListPage instance for this PageInteraction instance.\n\n### Method tabChanged\n\n    public void tabChanged(container activeTabNames)\n\n#### Parameters\n\nactiveTabNames  \n\n### Method new\n\nCreates a new PageInteraction object that operates on a list page.\n\n    public void new(Page page)\n\n#### Parameters\n\npage  \n\n## Class PartList\n    class PartList extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                        | Description                                     |\n|-----------------------------------------------|-------------------------------------------------|\n| public xFormRun getPartById(int id)           |                                                 |\n| public FormControl getPartControlById(int id) |                                                 |\n| public int partCount()                        |                                                 |\n| public void new(xFormRun form)                | Initializes a new instance of the Object class. |\n| public void finalize()                        |                                                 |\n\n### Method getPartById\n\n    public xFormRun getPartById(int id)\n\n#### Parameters\n\nid  \n\n#### Return Value\n\n### Method getPartControlById\n\n    public FormControl getPartControlById(int id)\n\n#### Parameters\n\nid  \n\n#### Return Value\n\n### Method partCount\n\n    public int partCount()\n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(xFormRun form)\n\n#### Parameters\n\nform  \n\n### Method finalize\n\n    public void finalize()\n\n## Class Percentbar\n    class Percentbar extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                   | Description                                         |\n|------------------------------------------|-----------------------------------------------------|\n| public void new(int maxCount, str title) | Initializes a new instance of the Percentbar class. |\n| public void set(int count)               |                                                     |\n| public void finalize()                   |                                                     |\n\n### Method new\n\nInitializes a new instance of the Percentbar class.\n\n    public void new(int maxCount, str title)\n\n#### Parameters\n\nmaxCount  \n\n<!-- -->\n\ntitle  \n\n### Method set\n\n    public void set(int count)\n\n#### Parameters\n\ncount  \n\n### Method finalize\n\n    public void finalize()\n\n## Class PerformanceMonitor\n    class PerformanceMonitor extends Object\n\nThe PerformanceMonitor class fetches data for processes that are running on the system.\n\n### Remarks\n\nYou can take a snapshot of the system at any time and traverse the counters for any process that is running on the system.\n\n### Examples\n\nThe following example prints the processId and workingset values for all the currently running processes.\n\n    static void pvPerformanceMonitorTest(args a) \n    { \n        int i, j;  \n        PerformanceMonitorInstance instance;  \n        PerformanceMonitorCounter counter1, counter2;  \n        PerformanceMonitor pm = new PerformanceMonitor();  \n        // Take a current snapshot of the system. \n        pm.takeSnapshot ();  \n        // Traverse all the running processes. \n        for (i= 1; i <= pm.instanceCount(); i++)  \n        {  \n            instance = pm.instance(i);  \n            counter1 = instance.getCounter(\"ID Process\");  \n            counter2 = instance.getCounter(\"Working Set\");  \n            print instance.name(), \" \",  \n            counter1.intData(), \" \",  \n            counter2.intData();  \n        } \n        pause;  \n    }\n\n### Methods\n\n| Method                                                     | Description                                                                                    |\n|------------------------------------------------------------|------------------------------------------------------------------------------------------------|\n| public PerformanceMonitorInstance instance(int instanceNo) |                                                                                                |\n| public int instanceCount()                                 | Returns the instance count, which is the number of processes in the current snapshot.          |\n| public int processId()                                     | Returns the processId value of the process that is running this method.                        |\n| public str systemName()                                    |                                                                                                |\n| public boolean takeSnapshot(\\[str processName\\])           |                                                                                                |\n| public str toString()                                      | Returns a string that contains the class handle and name, and possibly additional information. |\n| public void new()                                          | Initializes a new instance of the PerformanceMonitor class.                                    |\n\n### Method instance\n\n    public PerformanceMonitorInstance instance(int instanceNo)\n\n#### Parameters\n\ninstanceNo  \n\n#### Return Value\n\n### Method instanceCount\n\nReturns the instance count, which is the number of processes in the current snapshot.\n\n    public int instanceCount()\n\n#### Return Value\n\nThe number of processes in the current snapshot.\n\n#### Remarks\n\nUse the takeSnapshot method to take a snapshot of the currently running processes.\n\n#### Examples\n\n    static void pvPerformanceMonitorTest(args a) \n    { \n        int i, j; \n        PerformanceMonitorInstance instance; \n        PerformanceMonitorCounter counter1, counter2; \n        PerformanceMonitor pm = new PerformanceMonitor(); \n        // Take a current snapshot of the system. \n        pm.takeSnapshot (); \n        // Traverse all the running processes. \n        for (i= 1; i <= pm.instanceCount(); i++) \n        { \n            instance = pm.instance(i); \n            counter1 = instance.getCounter(\"ID Process\"); \n            counter2 = instance.getCounter(\"Working Set\"); \n            print instance.name(), \" \",  \n                counter1.intData(), \" \",  \n                counter2.intData(); \n        } \n        pause; \n    }\n\n### Method processId\n\nReturns the processId value of the process that is running this method.\n\n    public int processId()\n\n#### Return Value\n\nThe processId value of the Finance and Operations process that is running this method.\n\n#### Examples\n\n    static void processIdDemo(args a) \n    { \n        PerformanceMonitor pm = new PerformanceMonitor(); \n        print pm.processId(); \n        pause; \n    }\n\n### Method systemName\n\n    public str systemName()\n\n#### Return Value\n\n### Method takeSnapshot\n\n    public boolean takeSnapshot([str processName])\n\n#### Parameters\n\nprocessName  \n\n#### Return Value\n\n### Method toString\n\nReturns a string that contains the class handle and name, and possibly additional information.\n\n    public str toString()\n\n#### Return Value\n\nA textual description of the class.\n\n#### Remarks\n\nBy default, for most classes, the toString method returns a string that contains the class handle and name. However, in some classes, additional information is returned in the string.\n\n### Method new\n\nInitializes a new instance of the PerformanceMonitor class.\n\n    public void new()\n\n## Class PerformanceMonitorCounter\n    class PerformanceMonitorCounter extends Object\n\nThe PerformanceMonitorCounter class identifies a counter that is assigned to a particular instance of a particular snapshot.\n\n### Remarks\n\nThe data can be fetched by using the get methods.\n\n### Examples\n\n### Methods\n\n| Method                 | Description                                                                                    |\n|------------------------|------------------------------------------------------------------------------------------------|\n| public int intData()   |                                                                                                |\n| public str name()      |                                                                                                |\n| public Time timeData() |                                                                                                |\n| public str toString()  | Returns a string that contains the class handle and name, and possibly additional information. |\n\n### Method intData\n\n    public int intData()\n\n#### Return Value\n\n### Method name\n\n    public str name()\n\n#### Return Value\n\n### Method timeData\n\n    public Time timeData()\n\n#### Return Value\n\n### Method toString\n\nReturns a string that contains the class handle and name, and possibly additional information.\n\n    public str toString()\n\n#### Return Value\n\nA textual description of the class.\n\n#### Remarks\n\nBy default, for most classes, the toString method returns a string that contains the class handle and name. However, in some classes additional information is returned in the string.\n\n## Class PerformanceMonitorInstance\n    class PerformanceMonitorInstance extends Object\n\nThe PerformanceMonitorInstance class represents a process that is running on the machine on which the Process Monitor runs.\n\n### Remarks\n\nThis class allows for queries of the process counters. You can use objects of this class to query the processes counters. Each counter represents a process parameter.\n\n### Examples\n\n### Methods\n\n| Method                                                       | Description                                                                                    |\n|--------------------------------------------------------------|------------------------------------------------------------------------------------------------|\n| public PerformanceMonitorCounter getCounter(str counterName) |                                                                                                |\n| public str name()                                            |                                                                                                |\n| public str toString()                                        | Returns a string that contains the class handle and name, and possibly additional information. |\n\n### Method getCounter\n\n    public PerformanceMonitorCounter getCounter(str counterName)\n\n#### Parameters\n\ncounterName  \n\n#### Return Value\n\n### Method name\n\n    public str name()\n\n#### Return Value\n\n### Method toString\n\nReturns a string that contains the class handle and name, and possibly additional information.\n\n    public str toString()\n\n#### Return Value\n\nReturns a textual description of the class.\n\n#### Remarks\n\nBy default, for most classes, the toString method returns a string that contains the class handle and name. However, in some classes additional information is returned in the string.\n\n## Class PipeClient\n    class PipeClient extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                              | Description                                         |\n|---------------------------------------------------------------------|-----------------------------------------------------|\n| public boolean blockingMode(\\[boolean block\\])                      |                                                     |\n| public int errorCode()                                              |                                                     |\n| public str read()                                                   |                                                     |\n| public boolean write(str buffer)                                    |                                                     |\n| public void new(str servername, str pipename, \\[boolean blocking\\]) | Initializes a new instance of the PipeClient class. |\n\n### Method blockingMode\n\n    public boolean blockingMode([boolean block])\n\n#### Parameters\n\nblock  \n\n#### Return Value\n\n### Method errorCode\n\n    public int errorCode()\n\n#### Return Value\n\n### Method read\n\n    public str read()\n\n#### Return Value\n\n### Method write\n\n    public boolean write(str buffer)\n\n#### Parameters\n\nbuffer  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the PipeClient class.\n\n    public void new(str servername, str pipename, [boolean blocking])\n\n#### Parameters\n\nservername  \n\n<!-- -->\n\npipename  \n\n<!-- -->\n\nblocking  \n\n## Class PipeServer\n    class PipeServer extends Object\n\nThe PipeServer class supports the server side of a named pipe connection.\n\n### Remarks\n\nA named pipe is created when a PipeServer object is created by using the PipeServer.new method. The pipe that is created has read access and is in message mode. The name of the pipe is automatically prefixed with \\\\\\\\.\\\\pipe\\\\Dynamics. The current session SID is postfixed to the name. The support that is provided for pipe connections on the server is restricted for the following security reasons:\n\n-   The pipe is supported only for the current logon session on the computer that the session was created on.\n-   The user who creates the pipe is the only person who can communicate with that pipe.\n\n### Examples\n\n### Methods\n\n| Method                                              | Description                                                                  |\n|-----------------------------------------------------|------------------------------------------------------------------------------|\n| public boolean blockingMode(\\[boolean block\\])      |                                                                              |\n| public boolean connect()                            | Waits for a client to connect to the named pipe.                             |\n| public boolean disconnect()                         | Disconnects the server end of the named pipe instance from a client process. |\n| public int errorCode()                              |                                                                              |\n| public str read()                                   | Reads data from the named pipe, as written by a pipe client.                 |\n| public void new(str pipename, \\[boolean blocking\\]) | Creates a new instance of the PipeServer class.                              |\n\n### Method blockingMode\n\n    public boolean blockingMode([boolean block])\n\n#### Parameters\n\nblock  \n\n#### Return Value\n\n### Method connect\n\nWaits for a client to connect to the named pipe.\n\n    public boolean connect()\n\n#### Return Value\n\ntrue if the method succeeds; otherwise, false.\n\n#### Remarks\n\nIf you do not want to block the current thread if it is waiting for a client to connect, avoid using the PipeServer.connect method, and poll by using the PipeServer.read method instead.\n\n### Method disconnect\n\nDisconnects the server end of the named pipe instance from a client process.\n\n    public boolean disconnect()\n\n#### Return Value\n\ntrue if the method succeeds; otherwise, false.\n\n### Method errorCode\n\n    public int errorCode()\n\n#### Return Value\n\n### Method read\n\nReads data from the named pipe, as written by a pipe client.\n\n    public str read()\n\n#### Return Value\n\nThe data that is read from the pipe, if any data is read.\n\n#### Remarks\n\nData might not be available when this method is called, perhaps because no client has connected to the named pipe. If you want to wait for a client to connect, use the connect method. However, if you do not want to block the current thread that is waiting for a client to connect, poll by using the read method.\n\n### Method new\n\nCreates a new instance of the PipeServer class.\n\n    public void new(str pipename, [boolean blocking])\n\n#### Parameters\n\npipename  \nA Boolean flag that indicates whether blocking behavior should be used. Non-blocking mode is supported for compatibility with Microsoft LAN Manager version 2.0 and should not be used to achieve asynchronous I/O with named pipes. Instead, a polling technique should be used. See the read method.\n\n<!-- -->\n\nblocking  \nA Boolean flag that indicates whether blocking behavior should be used. Non-blocking mode is supported for compatibility with Microsoft LAN Manager version 2.0 and should not be used to achieve asynchronous I/O with named pipes. Instead, a polling technique should be used. See the read method.\n\n#### Remarks\n\nSome restrictions apply. See the example in the general description of the PipeServer class.\n\n## Class PresenceInfo\n    class PresenceInfo extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                | Description                                           |\n|-----------------------------------------------------------------------|-------------------------------------------------------|\n| public str contactName(\\[str contactName\\])                           |                                                       |\n| public str emailAddress(int index)                                    |                                                       |\n| public str emailAlias(int index)                                      |                                                       |\n| public int emailCount()                                               |                                                       |\n| public str phoneAlias(int index)                                      |                                                       |\n| public int phoneCount()                                               |                                                       |\n| public str phoneNumber(int index)                                     |                                                       |\n| public str sipAddress(\\[str sipAddress\\])                             |                                                       |\n| public void finalize()                                                |                                                       |\n| public void new()                                                     | Initializes a new instance of the PresenceInfo class. |\n| public void addEmailAddress(\\[str emailAlias\\], \\[str emailAddress\\]) |                                                       |\n| public void addPhoneNumber(\\[str phoneAlias\\], \\[str phoneNumber\\])   |                                                       |\n\n### Method contactName\n\n    public str contactName([str contactName])\n\n#### Parameters\n\ncontactName  \n\n#### Return Value\n\n### Method emailAddress\n\n    public str emailAddress(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method emailAlias\n\n    public str emailAlias(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method emailCount\n\n    public int emailCount()\n\n#### Return Value\n\n### Method phoneAlias\n\n    public str phoneAlias(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method phoneCount\n\n    public int phoneCount()\n\n#### Return Value\n\n### Method phoneNumber\n\n    public str phoneNumber(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method sipAddress\n\n    public str sipAddress([str sipAddress])\n\n#### Parameters\n\nsipAddress  \n\n#### Return Value\n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the PresenceInfo class.\n\n    public void new()\n\n### Method addEmailAddress\n\n    public void addEmailAddress([str emailAlias], [str emailAddress])\n\n#### Parameters\n\nemailAlias  \n\n<!-- -->\n\nemailAddress  \n\n### Method addPhoneNumber\n\n    public void addPhoneNumber([str phoneAlias], [str phoneNumber])\n\n#### Parameters\n\nphoneAlias  \n\n<!-- -->\n\nphoneNumber  \n\n## Class PrintJobSettings\n    class PrintJobSettings extends Object\n\nThe PrintJobSettings class lets users access printers and their device settings.\n\n### Remarks\n\nPrintJobSettings is used by the SysPrintForm form.\n\n### Examples\n\nThe following example writes the name of the default printer and lists the available printers.\n\n    void printerInfo() \n    {    \n        printJobSettings pjs; \n        int i; \n        pjs = new PrintJobSettings(); \n        print \"The default printer is \", pjs.DeviceName(); \n        print \"There are \", pjs.GetNumberOfPrinters(), \" printers\"; \n        i = 1; \n        while (i<=pjs.GetNumberOfPrinters())  \n        { \n            print \"Printer No. \", i, \" is \", pjs.GetPrinter(i);  \n            i++; \n        } \n        pause; \n    }\n\n### Methods\n\n| Method                                                                                                  | Description                                                                                       |\n|---------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------|\n| public boolean allPages(\\[boolean all\\])                                                                | Controls whether the All or Pages option button should be selected when you run the sysPrintForm. |\n| public boolean appendToTextFile(\\[boolean append\\])                                                     |                                                                                                   |\n| public boolean banding()                                                                                |                                                                                                   |\n| public PrintJobSettings clientPrintJobSettings()                                                        |                                                                                                   |\n| public boolean collate(\\[boolean collate\\])                                                             |                                                                                                   |\n| public int copies(\\[int numberOfCopies\\])                                                               |                                                                                                   |\n| public str copyDescription(int number, \\[str description\\])                                             |                                                                                                   |\n| public str deviceName(\\[str device\\], \\[ClassRunMode runOn\\])                                           | Selects a printer or retrieves the deviceName of the selected printer.                            |\n| public boolean doNotOverwrite(\\[boolean warn\\])                                                         |                                                                                                   |\n| public boolean enableCopies(\\[boolean enable\\])                                                         |                                                                                                   |\n| public boolean enableDevice(\\[boolean enable\\])                                                         |                                                                                                   |\n| public boolean enablePages(\\[boolean enable\\])                                                          |                                                                                                   |\n| public boolean enableProperties(\\[boolean enable\\])                                                     |                                                                                                   |\n| public boolean enableStoreInPrintArchive(\\[boolean enable\\])                                            |                                                                                                   |\n| public boolean enableTarget(\\[boolean enable\\])                                                         |                                                                                                   |\n| public int facename2number(\\[str facename\\])                                                            |                                                                                                   |\n| public str fileName(\\[str FileName\\])                                                                   |                                                                                                   |\n| public boolean fitToPage(\\[boolean fit\\])                                                               |                                                                                                   |\n| public PrintFormat format(\\[PrintFormat format\\])                                                       |                                                                                                   |\n| public int from(\\[int fromPage\\])                                                                       |                                                                                                   |\n| public str getFacename(int number)                                                                      |                                                                                                   |\n| public str getFacenameInfo(int number)                                                                  |                                                                                                   |\n| public Struct getFontInfo(str fontName)                                                                 |                                                                                                   |\n| public Array getGlyphWidthsArray(str fontName, int firstChar, int lastChar)                             |                                                                                                   |\n| public int getNumberOfClientPrinters()                                                                  |                                                                                                   |\n| public int getNumberOfFacenames()                                                                       |                                                                                                   |\n| public int getNumberOfPrinters()                                                                        | Returns the number of printers that are set up on the computer.                                   |\n| public int getNumberOfServerPrinters()                                                                  |                                                                                                   |\n| public int getNumberOfTrays()                                                                           |                                                                                                   |\n| public str getPrinter(int number)                                                                       | Gets the deviceName of a printer.                                                                 |\n| public ClassRunMode getRunOn(int number)                                                                |                                                                                                   |\n| public PrintMedium getTarget()                                                                          |                                                                                                   |\n| public int getTray(int number)                                                                          |                                                                                                   |\n| public str getTrayName(int number)                                                                      |                                                                                                   |\n| public Int64 hDC()                                                                                      |                                                                                                   |\n| public boolean lockDestinationProperties(\\[boolean warn\\])                                              |                                                                                                   |\n| public str mailCc(\\[str MailCc\\])                                                                       |                                                                                                   |\n| public str mailSubject(\\[str MailSubject\\])                                                             |                                                                                                   |\n| public str mailTo(\\[str MailTo\\])                                                                       |                                                                                                   |\n| public int numberOfCopyDescriptions(int number)                                                         |                                                                                                   |\n| public boolean outputToClient(\\[boolean toClient\\])                                                     |                                                                                                   |\n| public boolean outputToPrnFile(\\[boolean writePrnFile\\])                                                |                                                                                                   |\n| public container packNamesAndPrinterData()                                                              |                                                                                                   |\n| public container packPageSettings()                                                                     | Stores the data that is selected during page formatting in a container.                           |\n| public container packPrinterSettings()                                                                  |                                                                                                   |\n| public container packPrintJobSettings()                                                                 |                                                                                                   |\n| public container packSubtotalSettings()                                                                 |                                                                                                   |\n| public int pageCopy2Tray(int pageNumber, \\[int copyNumber\\])                                            |                                                                                                   |\n| public boolean pageFormatting()                                                                         |                                                                                                   |\n| public PrinterOrientation paperOrientation(\\[PrinterOrientation orientation\\])                          |                                                                                                   |\n| public int paperTray(\\[int tray\\])                                                                      |                                                                                                   |\n| public int paperTrayRaw(\\[int tray\\])                                                                   |                                                                                                   |\n| public int performanceTest(\\[int loops\\])                                                               |                                                                                                   |\n| public PrintFormat preferredFileFormat(\\[PrintFormat format\\])                                          |                                                                                                   |\n| public PrintFormat preferredMailFormat(\\[PrintFormat format\\])                                          |                                                                                                   |\n| public PrinterOrientation preferredOrientation(\\[PrinterOrientation orientation\\])                      |                                                                                                   |\n| public PrintMedium preferredTarget(\\[PrintMedium target\\])                                              |                                                                                                   |\n| public int printerAttributes()                                                                          |                                                                                                   |\n| public int printerAveragePPM()                                                                          |                                                                                                   |\n| public str printerComment()                                                                             |                                                                                                   |\n| public str printerDatatype()                                                                            |                                                                                                   |\n| public int printerDefaultPriority()                                                                     |                                                                                                   |\n| public str printerDriverName()                                                                          |                                                                                                   |\n| public str printerLocation()                                                                            |                                                                                                   |\n| public int printerPageHeight()                                                                          |                                                                                                   |\n| public int printerPageWidth()                                                                           |                                                                                                   |\n| public int printerPaper()                                                                               |                                                                                                   |\n| public str printerParameters()                                                                          |                                                                                                   |\n| public str printerPortName()                                                                            |                                                                                                   |\n| public str printerPrinterName()                                                                         |                                                                                                   |\n| public str printerPrintProcessor()                                                                      |                                                                                                   |\n| public int printerPriority()                                                                            |                                                                                                   |\n| public int printerQueuedJobs()                                                                          |                                                                                                   |\n| public ClassRunMode printerRunOn()                                                                      |                                                                                                   |\n| public str printerSepFile()                                                                             |                                                                                                   |\n| public str printerServerName()                                                                          |                                                                                                   |\n| public boolean printerSettings(str formName, \\[xArgs args\\], \\[ReportRun reportRun\\], \\[int showWhat\\]) |                                                                                                   |\n| public str printerShareName()                                                                           |                                                                                                   |\n| public TimeOfDay printerStartTime()                                                                     |                                                                                                   |\n| public int printerStatus()                                                                              |                                                                                                   |\n| public TimeOfDay printerUntilTime()                                                                     |                                                                                                   |\n| public ReportRun reportRun()                                                                            |                                                                                                   |\n| public str requestedDeviceName()                                                                        |                                                                                                   |\n| public ClassRunMode requestedRunOn()                                                                    |                                                                                                   |\n| public boolean runClient()                                                                              |                                                                                                   |\n| public boolean runServer()                                                                              |                                                                                                   |\n| public int sectionsPerPage(\\[int sectionsPerPage\\])                                                     |                                                                                                   |\n| public PrintMedium setTarget(PrintMedium target)                                                        | Sets the print medium.                                                                            |\n| public boolean singleLargePage(\\[boolean singleLargePage\\])                                             |                                                                                                   |\n| public boolean skipBitmapsInRTF(\\[boolean skipBitmaps\\])                                                | Controls whether bitmaps are included when reports are printed to an .rtf file.                   |\n| public boolean storeInPrintArchive(\\[boolean store\\])                                                   |                                                                                                   |\n| public boolean suppressScalingMessage(\\[boolean suppress\\])                                             |                                                                                                   |\n| public int to(\\[int toPage\\])                                                                           |                                                                                                   |\n| public str toString()                                                                                   | Returns a string that represents the current object.                                              |\n| public boolean unpackPageSettings(container settings)                                                   | Sets the page settings, such as paper size and orientation.                                       |\n| public boolean unpackPrinterSettings(container settings)                                                |                                                                                                   |\n| public boolean unpackPrintJobSettings(container settings)                                               |                                                                                                   |\n| public boolean unpackSubtotalSettings(container settings)                                               |                                                                                                   |\n| public int unprintableBottom()                                                                          |                                                                                                   |\n| public int unprintableLeft()                                                                            |                                                                                                   |\n| public int unprintableRight()                                                                           |                                                                                                   |\n| public int unprintableTop()                                                                             | Indicates the distance from the top of the paper to the printable area of the paper.              |\n| public ReportOutputUserType viewerType(\\[ReportOutputUserType type\\])                                   |                                                                                                   |\n| public int virtualPageHeight(\\[int height\\])                                                            |                                                                                                   |\n| public boolean warnIfFileExists(\\[boolean warn\\])                                                       |                                                                                                   |\n| public void enableBody(\\[TableId tableId\\])                                                             |                                                                                                   |\n| public void new(\\[container Settings\\], \\[boolean infoOnly\\])                                           | Initializes a new instance of the Object class.                                                   |\n| public void addTrayPageCopy(int tray, int pageNumber, \\[int copyNumber\\])                               |                                                                                                   |\n| public void disableBody(\\[TableId tableId\\])                                                            |                                                                                                   |\n| public void clearTrayPageCopy()                                                                         |                                                                                                   |\n| public void rulerInch()                                                                                 |                                                                                                   |\n| public void finalize()                                                                                  |                                                                                                   |\n| public void rulerOff()                                                                                  |                                                                                                   |\n| public void rulerMetric()                                                                               |                                                                                                   |\n\n### Method allPages\n\nControls whether the All or Pages option button should be selected when you run the sysPrintForm.\n\n    public boolean allPages([boolean all])\n\n#### Parameters\n\nall  \nA boolean value that, if true, the All option button is selected; otherwise, the Pages option button is selected.\n\n#### Return Value\n\ntrue if the All radio button should be selected; otherwise, false, and the Pages option button is selected.\n\n#### Remarks\n\nThe method is for internal use by sysPrintForm.\n\n#### Examples\n\nThe following example prints pages 2 to 4 and selects the Pages option button instead of the All option button.\n\n    static void PrintingToPDF(Args _args) \n    { \n        Args                args; \n        ReportRun           rr; \n        str reportName = 'Cust'; \n        int i; \n        int numReports = 10; \n        args = new Args(reportName); \n        rr = new ReportRun(args,''); \n        rr.setTarget(Printmedium::File); \n        rr.printJobSettings().format(PrintFormat::RTF); \n        rr.printJobSettings().fileName(\"C:\\\\tmp\\\\Cust_ReportRange2.rtf\"); \n        // Select the Pages option button rather than the All option button. \n        rr.printJobSettings().allPages(false); \n        rr.printJobSettings().from(2); \n        rr.printJobSettings().to(4); \n        rr.query().interactive(false); \n        rr.report().interactive(false); \n        rr.run(); \n    }\n\n### Method appendToTextFile\n\n    public boolean appendToTextFile([boolean append])\n\n#### Parameters\n\nappend  \n\n#### Return Value\n\n### Method banding\n\n    public boolean banding()\n\n#### Return Value\n\n### Method clientPrintJobSettings\n\n    public PrintJobSettings clientPrintJobSettings()\n\n#### Return Value\n\n### Method collate\n\n    public boolean collate([boolean collate])\n\n#### Parameters\n\ncollate  \n\n#### Return Value\n\n### Method copies\n\n    public int copies([int numberOfCopies])\n\n#### Parameters\n\nnumberOfCopies  \n\n#### Return Value\n\n### Method copyDescription\n\n    public str copyDescription(int number, [str description])\n\n#### Parameters\n\nnumber  \n\n<!-- -->\n\ndescription  \n\n#### Return Value\n\n### Method deviceName\n\nSelects a printer or retrieves the deviceName of the selected printer.\n\n    public str deviceName([str device], [ClassRunMode runOn])\n\n#### Parameters\n\ndevice  \n\n<!-- -->\n\nrunOn  \n\n#### Return Value\n\nThe deviceName of the selected printer.\n\n#### Remarks\n\nThe deviceName of a printer to be selected could be found by using the getPrinter method.\n\n#### Examples\n\nThis job lists the available printers and their nonprintable area.\n\n    static void aaaKJ(args a) \n    { \n        printJobSettings pjs; \n        str printer; \n        int i; \n        pjs = new printJobSettings(); \n        for (i=1; i<=pjs.GetNumberOfPrinters(); i++) \n        { \n            printer = pjs.GetPrinter(i); \n            pjs.DeviceName(printer); \n            print \"printer No. \",i, \" has name \",  printer; \n            print \"   left:  \", pjs.UnprintableLeft(),   \"/100 mm\"; \n            print \"   right: \", pjs.UnprintableRight(),  \"/100 mm\"; \n            print \"   top:   \", pjs.UnprintableTop(),    \"/100 mm\"; \n            print \"   bottom:\", pjs.UnprintableBottom(), \"/100 mm\"; \n        } \n        pause; \n    }\n\n### Method doNotOverwrite\n\n    public boolean doNotOverwrite([boolean warn])\n\n#### Parameters\n\nwarn  \n\n#### Return Value\n\n### Method enableCopies\n\n    public boolean enableCopies([boolean enable])\n\n#### Parameters\n\nenable  \n\n#### Return Value\n\n### Method enableDevice\n\n    public boolean enableDevice([boolean enable])\n\n#### Parameters\n\nenable  \n\n#### Return Value\n\n### Method enablePages\n\n    public boolean enablePages([boolean enable])\n\n#### Parameters\n\nenable  \n\n#### Return Value\n\n### Method enableProperties\n\n    public boolean enableProperties([boolean enable])\n\n#### Parameters\n\nenable  \n\n#### Return Value\n\n### Method enableStoreInPrintArchive\n\n    public boolean enableStoreInPrintArchive([boolean enable])\n\n#### Parameters\n\nenable  \n\n#### Return Value\n\n### Method enableTarget\n\n    public boolean enableTarget([boolean enable])\n\n#### Parameters\n\nenable  \n\n#### Return Value\n\n### Method facename2number\n\n    public int facename2number([str facename])\n\n#### Parameters\n\nfacename  \n\n#### Return Value\n\n### Method fileName\n\n    public str fileName([str FileName])\n\n#### Parameters\n\nFileName  \n\n#### Return Value\n\n### Method fitToPage\n\n    public boolean fitToPage([boolean fit])\n\n#### Parameters\n\nfit  \n\n#### Return Value\n\n### Method format\n\n    public PrintFormat format([PrintFormat format])\n\n#### Parameters\n\nformat  \n\n#### Return Value\n\n### Method from\n\n    public int from([int fromPage])\n\n#### Parameters\n\nfromPage  \n\n#### Return Value\n\n### Method getFacename\n\n    public str getFacename(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method getFacenameInfo\n\n    public str getFacenameInfo(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method getFontInfo\n\n    public Struct getFontInfo(str fontName)\n\n#### Parameters\n\nfontName  \n\n#### Return Value\n\n### Method getGlyphWidthsArray\n\n    public Array getGlyphWidthsArray(str fontName, int firstChar, int lastChar)\n\n#### Parameters\n\nfontName  \n\n<!-- -->\n\nfirstChar  \n\n<!-- -->\n\nlastChar  \n\n#### Return Value\n\n### Method getNumberOfClientPrinters\n\n    public int getNumberOfClientPrinters()\n\n#### Return Value\n\n### Method getNumberOfFacenames\n\n    public int getNumberOfFacenames()\n\n#### Return Value\n\n### Method getNumberOfPrinters\n\nReturns the number of printers that are set up on the computer.\n\n    public int getNumberOfPrinters()\n\n#### Return Value\n\nThe number of printers that are set up on the computer.\n\n### Method getNumberOfServerPrinters\n\n    public int getNumberOfServerPrinters()\n\n#### Return Value\n\n### Method getNumberOfTrays\n\n    public int getNumberOfTrays()\n\n#### Return Value\n\n### Method getPrinter\n\nGets the deviceName of a printer.\n\n    public str getPrinter(int number)\n\n#### Parameters\n\nnumber  \nA value between 1 and the number of available printers.\n\n#### Return Value\n\nThe deviceName of the given printer number.\n\n#### Examples\n\n    printJobSettings pjs; \n    int i; \n    pjs = new printJobSettings(); \n    i = 1; \n    while (i<=pjs.GetNumberOfPrinters()) \n    { \n        print \"Printer No. \", i, \" is \", pjs.GetPrinter(i); \n        i++; \n    }\n\n### Method getRunOn\n\n    public ClassRunMode getRunOn(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method getTarget\n\n    public PrintMedium getTarget()\n\n#### Return Value\n\n### Method getTray\n\n    public int getTray(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method getTrayName\n\n    public str getTrayName(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method hDC\n\n    public Int64 hDC()\n\n#### Return Value\n\n### Method lockDestinationProperties\n\n    public boolean lockDestinationProperties([boolean warn])\n\n#### Parameters\n\nwarn  \n\n#### Return Value\n\n### Method mailCc\n\n    public str mailCc([str MailCc])\n\n#### Parameters\n\nMailCc  \n\n#### Return Value\n\n### Method mailSubject\n\n    public str mailSubject([str MailSubject])\n\n#### Parameters\n\nMailSubject  \n\n#### Return Value\n\n### Method mailTo\n\n    public str mailTo([str MailTo])\n\n#### Parameters\n\nMailTo  \n\n#### Return Value\n\n### Method numberOfCopyDescriptions\n\n    public int numberOfCopyDescriptions(int number)\n\n#### Parameters\n\nnumber  \n\n#### Return Value\n\n### Method outputToClient\n\n    public boolean outputToClient([boolean toClient])\n\n#### Parameters\n\ntoClient  \n\n#### Return Value\n\n### Method outputToPrnFile\n\n    public boolean outputToPrnFile([boolean writePrnFile])\n\n#### Parameters\n\nwritePrnFile  \n\n#### Return Value\n\n### Method packNamesAndPrinterData\n\n    public container packNamesAndPrinterData()\n\n#### Return Value\n\n### Method packPageSettings\n\nStores the data that is selected during page formatting in a container.\n\n    public container packPageSettings()\n\n#### Return Value\n\nA container that holds data that is selected during page formatting.\n\n#### Remarks\n\nThe returned container can be used as input to the unpackPageSettings method.\n\n### Method packPrinterSettings\n\n    public container packPrinterSettings()\n\n#### Return Value\n\n### Method packPrintJobSettings\n\n    public container packPrintJobSettings()\n\n#### Return Value\n\n### Method packSubtotalSettings\n\n    public container packSubtotalSettings()\n\n#### Return Value\n\n### Method pageCopy2Tray\n\n    public int pageCopy2Tray(int pageNumber, [int copyNumber])\n\n#### Parameters\n\npageNumber  \n\n<!-- -->\n\ncopyNumber  \n\n#### Return Value\n\n### Method pageFormatting\n\n    public boolean pageFormatting()\n\n#### Return Value\n\n### Method paperOrientation\n\n    public PrinterOrientation paperOrientation([PrinterOrientation orientation])\n\n#### Parameters\n\norientation  \n\n#### Return Value\n\n### Method paperTray\n\n    public int paperTray([int tray])\n\n#### Parameters\n\ntray  \n\n#### Return Value\n\n### Method paperTrayRaw\n\n    public int paperTrayRaw([int tray])\n\n#### Parameters\n\ntray  \n\n#### Return Value\n\n### Method performanceTest\n\n    public int performanceTest([int loops])\n\n#### Parameters\n\nloops  \n\n#### Return Value\n\n### Method preferredFileFormat\n\n    public PrintFormat preferredFileFormat([PrintFormat format])\n\n#### Parameters\n\nformat  \n\n#### Return Value\n\n### Method preferredMailFormat\n\n    public PrintFormat preferredMailFormat([PrintFormat format])\n\n#### Parameters\n\nformat  \n\n#### Return Value\n\n### Method preferredOrientation\n\n    public PrinterOrientation preferredOrientation([PrinterOrientation orientation])\n\n#### Parameters\n\norientation  \n\n#### Return Value\n\n### Method preferredTarget\n\n    public PrintMedium preferredTarget([PrintMedium target])\n\n#### Parameters\n\ntarget  \n\n#### Return Value\n\n### Method printerAttributes\n\n    public int printerAttributes()\n\n#### Return Value\n\n### Method printerAveragePPM\n\n    public int printerAveragePPM()\n\n#### Return Value\n\n### Method printerComment\n\n    public str printerComment()\n\n#### Return Value\n\n### Method printerDatatype\n\n    public str printerDatatype()\n\n#### Return Value\n\n### Method printerDefaultPriority\n\n    public int printerDefaultPriority()\n\n#### Return Value\n\n### Method printerDriverName\n\n    public str printerDriverName()\n\n#### Return Value\n\n### Method printerLocation\n\n    public str printerLocation()\n\n#### Return Value\n\n### Method printerPageHeight\n\n    public int printerPageHeight()\n\n#### Return Value\n\n### Method printerPageWidth\n\n    public int printerPageWidth()\n\n#### Return Value\n\n### Method printerPaper\n\n    public int printerPaper()\n\n#### Return Value\n\n### Method printerParameters\n\n    public str printerParameters()\n\n#### Return Value\n\n### Method printerPortName\n\n    public str printerPortName()\n\n#### Return Value\n\n### Method printerPrinterName\n\n    public str printerPrinterName()\n\n#### Return Value\n\n### Method printerPrintProcessor\n\n    public str printerPrintProcessor()\n\n#### Return Value\n\n### Method printerPriority\n\n    public int printerPriority()\n\n#### Return Value\n\n### Method printerQueuedJobs\n\n    public int printerQueuedJobs()\n\n#### Return Value\n\n### Method printerRunOn\n\n    public ClassRunMode printerRunOn()\n\n#### Return Value\n\n### Method printerSepFile\n\n    public str printerSepFile()\n\n#### Return Value\n\n### Method printerServerName\n\n    public str printerServerName()\n\n#### Return Value\n\n### Method printerSettings\n\n    public boolean printerSettings(str formName, [xArgs args], [ReportRun reportRun], [int showWhat])\n\n#### Parameters\n\nformName  \n\n<!-- -->\n\nargs  \n\n<!-- -->\n\nreportRun  \n\n<!-- -->\n\nshowWhat  \n\n#### Return Value\n\n### Method printerShareName\n\n    public str printerShareName()\n\n#### Return Value\n\n### Method printerStartTime\n\n    public TimeOfDay printerStartTime()\n\n#### Return Value\n\n### Method printerStatus\n\n    public int printerStatus()\n\n#### Return Value\n\n### Method printerUntilTime\n\n    public TimeOfDay printerUntilTime()\n\n#### Return Value\n\n### Method reportRun\n\n    public ReportRun reportRun()\n\n#### Return Value\n\n### Method requestedDeviceName\n\n    public str requestedDeviceName()\n\n#### Return Value\n\n### Method requestedRunOn\n\n    public ClassRunMode requestedRunOn()\n\n#### Return Value\n\n### Method runClient\n\n    public boolean runClient()\n\n#### Return Value\n\n### Method runServer\n\n    public boolean runServer()\n\n#### Return Value\n\n### Method sectionsPerPage\n\n    public int sectionsPerPage([int sectionsPerPage])\n\n#### Parameters\n\nsectionsPerPage  \n\n#### Return Value\n\n### Method setTarget\n\nSets the print medium.\n\n    public PrintMedium setTarget(PrintMedium target)\n\n#### Parameters\n\ntarget  \nThe print medium.\n\n#### Return Value\n\nThe print medium.\n\n### Method singleLargePage\n\n    public boolean singleLargePage([boolean singleLargePage])\n\n#### Parameters\n\nsingleLargePage  \n\n#### Return Value\n\n### Method skipBitmapsInRTF\n\nControls whether bitmaps are included when reports are printed to an .rtf file.\n\n    public boolean skipBitmapsInRTF([boolean skipBitmaps])\n\n#### Parameters\n\nskipBitmaps  \nA boolean flag that determines whether bitmaps are included; optional.\n\n#### Return Value\n\ntrue if the bitmaps are included; otherwise, false.\n\n### Method storeInPrintArchive\n\n    public boolean storeInPrintArchive([boolean store])\n\n#### Parameters\n\nstore  \n\n#### Return Value\n\n### Method suppressScalingMessage\n\n    public boolean suppressScalingMessage([boolean suppress])\n\n#### Parameters\n\nsuppress  \n\n#### Return Value\n\n### Method to\n\n    public int to([int toPage])\n\n#### Parameters\n\ntoPage  \n\n#### Return Value\n\n### Method toString\n\nReturns a string that represents the current object.\n\n    public str toString()\n\n#### Return Value\n\nA string that represents the current object.\n\n#### Remarks\n\nThe default implementation returns the class name of the object. The method can be overridden in a derived class to return values that are meaningful for that type.For example, an instance of the class returns the method name and type of the method, such as instance or static.\n\n### Method unpackPageSettings\n\nSets the page settings, such as paper size and orientation.\n\n    public boolean unpackPageSettings(container settings)\n\n#### Parameters\n\nsettings  \nA container that is obtained by calling the packPageSettings method.\n\n#### Return Value\n\ntrue if the pageSettings were successfully changed; false if the pageSettings were set to the default values.\n\n#### Remarks\n\nThe classes reportDesign and report have a method with the same name.\n\n### Method unpackPrinterSettings\n\n    public boolean unpackPrinterSettings(container settings)\n\n#### Parameters\n\nsettings  \n\n#### Return Value\n\n### Method unpackPrintJobSettings\n\n    public boolean unpackPrintJobSettings(container settings)\n\n#### Parameters\n\nsettings  \n\n#### Return Value\n\n### Method unpackSubtotalSettings\n\n    public boolean unpackSubtotalSettings(container settings)\n\n#### Parameters\n\nsettings  \n\n#### Return Value\n\n### Method unprintableBottom\n\n    public int unprintableBottom()\n\n#### Return Value\n\n### Method unprintableLeft\n\n    public int unprintableLeft()\n\n#### Return Value\n\n### Method unprintableRight\n\n    public int unprintableRight()\n\n#### Return Value\n\n### Method unprintableTop\n\nIndicates the distance from the top of the paper to the printable area of the paper.\n\n    public int unprintableTop()\n\n#### Return Value\n\nThe size of nonprintable area, measured in hundredths of a millimeter.\n\n#### Remarks\n\nIn reports, the topMargin of a reportDesign must not be less than unprintableTop.\n\n#### Examples\n\n    static void printerInfo(args a) \n    { \n        printJobSettings pjs; \n        str printer; \n        int i; \n        pjs = new printJobSettings(); \n        for (i=1; i<=pjs.GetNumberOfPrinters(); i++) \n        { \n            printer = pjs.GetPrinter(i); \n            pjs.DeviceName(printer); \n            print \"printer No. \",i, \" has name \",  printer; \n            print \"   left:   \", pjs.UnprintableLeft(),   \"/100 mm\"; \n            print \"   right:  \", pjs.UnprintableRight(),  \"/100 mm\"; \n            print \"   totalWidth: \", pjs.UnprintableLeft() +  \n                pjs.PrinterPageWidth() + pjs.UnprintableRight(); \n            print \"   top:    \", pjs.UnprintableTop(),    \"/100 mm\"; \n            print \"   bottom: \", pjs.UnprintableBottom(), \"/100 mm\"; \n            print \"   totalHeight: \", pjs.UnprintableTop() +  \n                pjs.PrinterPageHeight() + pjs.UnprintableBottom(); \n        } \n        pause; \n    }\n\n### Method viewerType\n\n    public ReportOutputUserType viewerType([ReportOutputUserType type])\n\n#### Parameters\n\ntype  \n\n#### Return Value\n\n### Method virtualPageHeight\n\n    public int virtualPageHeight([int height])\n\n#### Parameters\n\nheight  \n\n#### Return Value\n\n### Method warnIfFileExists\n\n    public boolean warnIfFileExists([boolean warn])\n\n#### Parameters\n\nwarn  \n\n#### Return Value\n\n### Method enableBody\n\n    public void enableBody([TableId tableId])\n\n#### Parameters\n\ntableId  \n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new([container Settings], [boolean infoOnly])\n\n#### Parameters\n\nSettings  \n\n<!-- -->\n\ninfoOnly  \n\n### Method addTrayPageCopy\n\n    public void addTrayPageCopy(int tray, int pageNumber, [int copyNumber])\n\n#### Parameters\n\ntray  \n\n<!-- -->\n\npageNumber  \n\n<!-- -->\n\ncopyNumber  \n\n### Method disableBody\n\n    public void disableBody([TableId tableId])\n\n#### Parameters\n\ntableId  \n\n### Method clearTrayPageCopy\n\n    public void clearTrayPageCopy()\n\n### Method rulerInch\n\n    public void rulerInch()\n\n### Method finalize\n\n    public void finalize()\n\n### Method rulerOff\n\n    public void rulerOff()\n\n### Method rulerMetric\n\n    public void rulerMetric()\n\n## Class profiler\n    class profiler extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                                                                                                                                                                                                                                                                                                                                          | Description                                          |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------|\n| public int collected()                                                                                                                                                                                                                                                                                                                                                                                                                                          |                                                      |\n| public int flushInterval(\\[int interval\\])                                                                                                                                                                                                                                                                                                                                                                                                                      |                                                      |\n| public AnyType profileOff()                                                                                                                                                                                                                                                                                                                                                                                                                                     |                                                      |\n| public AnyType profileOn(str runId, \\[int traceDepth\\])                                                                                                                                                                                                                                                                                                                                                                                                         |                                                      |\n| public str tempPath()                                                                                                                                                                                                                                                                                                                                                                                                                                           |                                                      |\n| public str toString()                                                                                                                                                                                                                                                                                                                                                                                                                                           | Returns a string that represents the current object. |\n| ::public static AnyType profilerAlreadyOn()                                                                                                                                                                                                                                                                                                                                                                                                                     |                                                      |\n| public void flush()                                                                                                                                                                                                                                                                                                                                                                                                                                             |                                                      |\n| public void new()                                                                                                                                                                                                                                                                                                                                                                                                                                               | Initializes a new instance of the profiler class.    |\n| public void flushData(int lineNumber, str path, int microSecs, int sequenceNumber, int parentSequenceNumber, int selectCalls, int selectBytes, int selectRows, int sqlWaitTime, int aosWaitTime, int sqlInserts, int sqlUpdates, int sqlDeletes, int aosInCalls, int aosOutCalls, int aosInBytes, int aosOutBytes, \\[int sqlInsertBytes\\], \\[int sqlInsertRows\\], \\[int sqlUpdateBytes\\], \\[int sqlUpdateRows\\], \\[int sqlDeleteBytes\\], \\[int sqlDeleteRows\\]) |                                                      |\n\n### Method collected\n\n    public int collected()\n\n#### Return Value\n\n### Method flushInterval\n\n    public int flushInterval([int interval])\n\n#### Parameters\n\ninterval  \n\n#### Return Value\n\n### Method profileOff\n\n    public AnyType profileOff()\n\n#### Return Value\n\n### Method profileOn\n\n    public AnyType profileOn(str runId, [int traceDepth])\n\n#### Parameters\n\nrunId  \n\n<!-- -->\n\ntraceDepth  \n\n#### Return Value\n\n### Method tempPath\n\n    public str tempPath()\n\n#### Return Value\n\n### Method toString\n\nReturns a string that represents the current object.\n\n    public str toString()\n\n#### Return Value\n\nA string that represents the current object.\n\n#### Remarks\n\nThe default implementation returns the class name of the object. The method can be overridden in a derived class to return values that are meaningful for that type.For example, an instance of the class returns the method name and type of the method, such as instance or static.\n\n### Method profilerAlreadyOn\n\n    public static AnyType profilerAlreadyOn()\n\n#### Return Value\n\n### Method flush\n\n    public void flush()\n\n### Method new\n\nInitializes a new instance of the profiler class.\n\n    public void new()\n\n### Method flushData\n\n    public void flushData(int lineNumber, str path, int microSecs, int sequenceNumber, int parentSequenceNumber, int selectCalls, int selectBytes, int selectRows, int sqlWaitTime, int aosWaitTime, int sqlInserts, int sqlUpdates, int sqlDeletes, int aosInCalls, int aosOutCalls, int aosInBytes, int aosOutBytes, [int sqlInsertBytes], [int sqlInsertRows], [int sqlUpdateBytes], [int sqlUpdateRows], [int sqlDeleteBytes], [int sqlDeleteRows])\n\n#### Parameters\n\nlineNumber  \n\n<!-- -->\n\npath  \n\n<!-- -->\n\nmicroSecs  \n\n<!-- -->\n\nsequenceNumber  \n\n<!-- -->\n\nparentSequenceNumber  \n\n<!-- -->\n\nselectCalls  \n\n<!-- -->\n\nselectBytes  \n\n<!-- -->\n\nselectRows  \n\n<!-- -->\n\nsqlWaitTime  \n\n<!-- -->\n\naosWaitTime  \n\n<!-- -->\n\nsqlInserts  \n\n<!-- -->\n\nsqlUpdates  \n\n<!-- -->\n\nsqlDeletes  \n\n<!-- -->\n\naosInCalls  \n\n<!-- -->\n\naosOutCalls  \n\n<!-- -->\n\naosInBytes  \n\n<!-- -->\n\naosOutBytes  \n\n<!-- -->\n\nsqlInsertBytes  \n\n<!-- -->\n\nsqlInsertRows  \n\n<!-- -->\n\nsqlUpdateBytes  \n\n<!-- -->\n\nsqlUpdateRows  \n\n<!-- -->\n\nsqlDeleteBytes  \n\n<!-- -->\n\nsqlDeleteRows  \n\n## Class ProgressWindow\n    class ProgressWindow extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                      | Description                                             |\n|-------------------------------------------------------------|---------------------------------------------------------|\n| public int addProgressControl(\\[int progressControlCount\\]) |                                                         |\n| public void ProgressBarVisible(int index, int visible)      |                                                         |\n| public void ProgressValue(int index, int progressValue)     |                                                         |\n| public void ControlMinMax(int index, int min, int max)      |                                                         |\n| public void ProgressTextVisible(int index, int visible)     |                                                         |\n| public void Animation(str animation)                        |                                                         |\n| public void ControlText(int index, str text)                |                                                         |\n| public void FormCaption(str text)                           |                                                         |\n| public void ControlTime(str text)                           |                                                         |\n| public void finalize()                                      |                                                         |\n| public void new()                                           | Initializes a new instance of the ProgressWindow class. |\n\n### Method addProgressControl\n\n    public int addProgressControl([int progressControlCount])\n\n#### Parameters\n\nprogressControlCount  \n\n#### Return Value\n\n### Method ProgressBarVisible\n\n    public void ProgressBarVisible(int index, int visible)\n\n#### Parameters\n\nindex  \n\n<!-- -->\n\nvisible  \n\n### Method ProgressValue\n\n    public void ProgressValue(int index, int progressValue)\n\n#### Parameters\n\nindex  \n\n<!-- -->\n\nprogressValue  \n\n### Method ControlMinMax\n\n    public void ControlMinMax(int index, int min, int max)\n\n#### Parameters\n\nindex  \n\n<!-- -->\n\nmin  \n\n<!-- -->\n\nmax  \n\n### Method ProgressTextVisible\n\n    public void ProgressTextVisible(int index, int visible)\n\n#### Parameters\n\nindex  \n\n<!-- -->\n\nvisible  \n\n### Method Animation\n\n    public void Animation(str animation)\n\n#### Parameters\n\nanimation  \n\n### Method ControlText\n\n    public void ControlText(int index, str text)\n\n#### Parameters\n\nindex  \n\n<!-- -->\n\ntext  \n\n### Method FormCaption\n\n    public void FormCaption(str text)\n\n#### Parameters\n\ntext  \n\n### Method ControlTime\n\n    public void ControlTime(str text)\n\n#### Parameters\n\ntext  \n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the ProgressWindow class.\n\n    public void new()\n\n## Class ProjectGroupNode\n    class ProjectGroupNode extends TreeNode\n\nThe ProjectGroupNode class represents a group node within a project.\n\n### Remarks\n\nThis class enables you to create, read, update, and delete X++ code and metadata. Make sure that the user has access to the development security key (SysDevelopment) before you call this API.\n\n### Examples\n\n### Methods\n\n| Method                                                                                       | Description                                                                                                                                   |\n|----------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public TreeNode findGroupMember(str name, UtilElementType type, \\[boolean searchSubgroups\\]) | Searches the projectGroup for a specific element. It can be used to search a specific group or the whole project.                             |\n| public str groupMask(\\[str value\\])                                                          |                                                                                                                                               |\n| public str name(\\[str value\\])                                                               | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public boolean preventEditProperties(\\[boolean value\\])                                      |                                                                                                                                               |\n| public GroupNodeType projectGroupType(\\[GroupNodeType value\\])                               |                                                                                                                                               |\n| public void addUtilNode(UtilElementType type, str name)                                      | Adds a node to the projectGroup.                                                                                                              |\n| public void addNode(TreeNode node)                                                           | Adds an existing node to the projectGroup.                                                                                                    |\n\n### Method findGroupMember\n\nSearches the projectGroup for a specific element. It can be used to search a specific group or the whole project.\n\n    public TreeNode findGroupMember(str name, UtilElementType type, [boolean searchSubgroups])\n\n#### Parameters\n\nname  \nA boolean flag that determines whether the search should be recursive (whether to search subprojects); optional.\n\n<!-- -->\n\ntype  \nA boolean flag that determines whether the search should be recursive (whether to search subprojects); optional.\n\n<!-- -->\n\nsearchSubgroups  \nA boolean flag that determines whether the search should be recursive (whether to search subprojects); optional.\n\n#### Return Value\n\nThe first object that fits the criteria; returns nullNothingnullptrunita null reference (Nothing in Visual Basic) if no object is found.\n\n#### Remarks\n\nThis method is also found on ProjectNode.\n\n### Method groupMask\n\n    public str groupMask([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method preventEditProperties\n\n    public boolean preventEditProperties([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method projectGroupType\n\n    public GroupNodeType projectGroupType([GroupNodeType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method addUtilNode\n\nAdds a node to the projectGroup.\n\n    public void addUtilNode(UtilElementType type, str name)\n\n#### Parameters\n\ntype  \nThe name of the node.\n\n<!-- -->\n\nname  \nThe name of the node.\n\n#### Remarks\n\nThis method also is found on the ProjectNode class.\n\n### Method addNode\n\nAdds an existing node to the projectGroup.\n\n    public void addNode(TreeNode node)\n\n#### Parameters\n\nnode  \nThe node to add.\n\n## Class ProjectListNode\n    class ProjectListNode extends TreeNode\n\nThe ProjectListNode class corresponds to the Private and Shared lists of projects in the project overview window. Use the ProjectListNode.addProject method to add a new project from X++ code.\n\n### Remarks\n\nThis class enables you to create, read, update, and delete X++ code and metadata. Make sure that the user has access to the development security key (SysDevelopment) before calling this API.\n\n### Examples\n\n### Methods\n\n| Method                                                               | Description                     |\n|----------------------------------------------------------------------|---------------------------------|\n| public ProjectNode addProject(str projectName, \\[str projectClass\\]) | Adds a new project to the list. |\n\n### Method addProject\n\nAdds a new project to the list.\n\n    public ProjectNode addProject(str projectName, [str projectClass])\n\n#### Parameters\n\nprojectName  \nThe name of the projecttype; optional. This should be the name of a class associated with the project (see the setProjectClass method). If no value is supplied, the project becomes a standard project.\n\n<!-- -->\n\nprojectClass  \nThe name of the projecttype; optional. This should be the name of a class associated with the project (see the setProjectClass method). If no value is supplied, the project becomes a standard project.\n\n#### Return Value\n\nThe newly added projectNode.\n\n## Class ProjectNode\n    class ProjectNode extends TreeNode\n\nThe ProjectNode class controls the behavior of an AOT project.\n\n### Remarks\n\nThis class enables you to create, read, update, and delete X++ code and metadata. Create a new, user-defined AOT project by extending from this class. Control the behavior of the project by overriding the methods of this class. Create both Web projects and Help projects by creating classes that extend the ProjectNode class.\n\n### Examples\n\n### Methods\n\n| Method                                                                                       | Description                                                                                                                                   |\n|----------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public str addContextMenuItems()                                                             | Adds a list of items to the shortcut menu of the project node.                                                                                |\n| public str changedBy(\\[str value\\])                                                          | Gets or sets the name of the user who last changed the application object.                                                                    |\n| public Date changedDate(\\[Date value\\])                                                      | Gets or sets the date an application object was last changed.                                                                                 |\n| public str changedTime(\\[str value\\])                                                        | Gets or sets the time an application object was last changed.                                                                                 |\n| public str createdBy(\\[str value\\])                                                          | Gets or sets the name of the user who created the application object.                                                                         |\n| public Date creationDate(\\[Date value\\])                                                     | Gets or sets the date an application object was created.                                                                                      |\n| public str creationTime(\\[str value\\])                                                       |                                                                                                                                               |\n| public str export(str buffer)                                                                |                                                                                                                                               |\n| public TreeNode findGroupMember(str name, UtilElementType type, \\[boolean searchSubgroups\\]) | Searches the project or group for a specific element.                                                                                         |\n| public str getProjectClassName()                                                             | Returns the name of the class corresponding to the classid of the project.                                                                    |\n| public ProjectNode getRunNode()                                                              | Opens the project window and returns the root projectNode of that window, for a particular projectNode found in the project overview window.  |\n| public str import(str buffer)                                                                |                                                                                                                                               |\n| public boolean isRunNode()                                                                   |                                                                                                                                               |\n| public ProjectNode loadForInspection()                                                       | Returns a loaded version of a projectNode found in the project overview window.                                                               |\n| public str name(\\[str value\\])                                                               | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public Guid origin(\\[Guid value\\])                                                           |                                                                                                                                               |\n| public boolean removeFromProject(TreeNode node)                                              |                                                                                                                                               |\n| public str tooltipText(TreeNode node)                                                        |                                                                                                                                               |\n| ::public static str projectType()                                                            |                                                                                                                                               |\n| public void lockUpdate()                                                                     | Prevents visual updates while a series of actions is being performed.                                                                         |\n| public void addSpecialOverlayIcon(str path, int resId, \\[int xOffset\\], \\[int yOffset\\])     |                                                                                                                                               |\n| public void created(str name)                                                                | Enables the ability to perform custom actions on a project when a new instance of the project is created.                                     |\n| public void setSpecialIcon(int type, str name, int resId)                                    | Assigns a different icon to a specific node in the project.                                                                                   |\n| public void loadProject(str buffer)                                                          | Enables storing and retrieving custom data in the project definition when a project is loaded.                                                |\n| public void saveProject(str buffer)                                                          | Enables saving custom data together with the project in the application object database.                                                      |\n| public void unlockUpdate()                                                                   | Enables a visual update after a series of actions started with lockUpdate.                                                                    |\n| public void handleContextMenuItem(int id)                                                    | Handles a user selecting an item on the shortcut menu that has been defined by the corresponding method addContextMenuItems.                  |\n| public void addNode(TreeNode node)                                                           | Adds an existing node to the project.                                                                                                         |\n| public void addUtilNode(UtilElementType type, str name)                                      | Adds a node to the project.                                                                                                                   |\n| public void clear()                                                                          | Removes the contents of a project.                                                                                                            |\n| public void setProjectClass(int classid)                                                     | Assigns a class to the project, which gives the project the type that the class defines.                                                      |\n| public void removeSpecialOverlayIcons(str path)                                              |                                                                                                                                               |\n| public void new()                                                                            | Initializes a new instance of the ProjectNode class.                                                                                          |\n\n### Method addContextMenuItems\n\nAdds a list of items to the shortcut menu of the project node.\n\n    public str addContextMenuItems()\n\n#### Return Value\n\nA comma-separated list of the menu items to be added.\n\n#### Remarks\n\nOverride this method to add a list of items to the shortcut menu of the project node. When one of the added menu items is selected by a user, the handleContextMenuItem method is called. Override this method to perform the appropriate action.\n\n### Method changedBy\n\nGets or sets the name of the user who last changed the application object.\n\n    public str changedBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method changedDate\n\nGets or sets the date an application object was last changed.\n\n    public Date changedDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was last changed.\n\n### Method changedTime\n\nGets or sets the time an application object was last changed.\n\n    public str changedTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe time an application object was last changed.\n\n### Method createdBy\n\nGets or sets the name of the user who created the application object.\n\n    public str createdBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method creationDate\n\nGets or sets the date an application object was created.\n\n    public Date creationDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was created.\n\n### Method creationTime\n\n    public str creationTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method export\n\n    public str export(str buffer)\n\n#### Parameters\n\nbuffer  \n\n#### Return Value\n\n### Method findGroupMember\n\nSearches the project or group for a specific element.\n\n    public TreeNode findGroupMember(str name, UtilElementType type, [boolean searchSubgroups])\n\n#### Parameters\n\nname  \nA Boolean flag to determine whether the search should be recursive; optional.\n\n<!-- -->\n\ntype  \nA Boolean flag to determine whether the search should be recursive; optional.\n\n<!-- -->\n\nsearchSubgroups  \nA Boolean flag to determine whether the search should be recursive; optional.\n\n#### Return Value\n\nThe first object that fits the criteria, or nullNothingnullptrunita null reference (Nothing in Visual Basic) if no object is found.\n\n#### Remarks\n\nThis method is also found on ProjectGroupNode.\n\n### Method getProjectClassName\n\nReturns the name of the class corresponding to the classid of the project.\n\n    public str getProjectClassName()\n\n#### Return Value\n\nThe name of the class corresponding to the classid of the project.\n\n#### Remarks\n\nThe setClassId method assigns a classid to the project.\n\n### Method getRunNode\n\nOpens the project window and returns the root projectNode of that window, for a particular projectNode found in the project overview window.\n\n    public ProjectNode getRunNode()\n\n#### Return Value\n\nThe running projectNode.\n\n#### Remarks\n\nTo obtain a running projectNode without opening the project window, use the ProjectNode.loadForInspection Method.\n\n### Method import\n\n    public str import(str buffer)\n\n#### Parameters\n\nbuffer  \n\n#### Return Value\n\n### Method isRunNode\n\n    public boolean isRunNode()\n\n#### Return Value\n\n### Method loadForInspection\n\nReturns a loaded version of a projectNode found in the project overview window.\n\n    public ProjectNode loadForInspection()\n\n#### Return Value\n\nThe loaded projectNode.\n\n#### Remarks\n\nTo get a loaded projectNode while also opening the project window, use the method getRunNode.\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method origin\n\n    public Guid origin([Guid value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method removeFromProject\n\n    public boolean removeFromProject(TreeNode node)\n\n#### Parameters\n\nnode  \n\n#### Return Value\n\n### Method tooltipText\n\n    public str tooltipText(TreeNode node)\n\n#### Parameters\n\nnode  \n\n#### Return Value\n\n### Method projectType\n\n    public static str projectType()\n\n#### Return Value\n\n### Method lockUpdate\n\nPrevents visual updates while a series of actions is being performed.\n\n    public void lockUpdate()\n\n#### Remarks\n\nTo perform visual updates after the series of actions, call unlockUpdate.\n\n### Method addSpecialOverlayIcon\n\n    public void addSpecialOverlayIcon(str path, int resId, [int xOffset], [int yOffset])\n\n#### Parameters\n\npath  \n\n<!-- -->\n\nresId  \n\n<!-- -->\n\nxOffset  \n\n<!-- -->\n\nyOffset  \n\n### Method created\n\nEnables the ability to perform custom actions on a project when a new instance of the project is created.\n\n    public void created(str name)\n\n#### Parameters\n\nname  \nThe name of the project instance.\n\n#### Remarks\n\nThis method is called when a new instance of the project is created. Override this method to perform custom actions on your project.\n\n### Method setSpecialIcon\n\nAssigns a different icon to a specific node in the project.\n\n    public void setSpecialIcon(int type, str name, int resId)\n\n#### Parameters\n\ntype  \nThe ID of the icon that must be used for the specified node.\n\n<!-- -->\n\nname  \nThe ID of the icon that must be used for the specified node.\n\n<!-- -->\n\nresId  \nThe ID of the icon that must be used for the specified node.\n\n### Method loadProject\n\nEnables storing and retrieving custom data in the project definition when a project is loaded.\n\n    public void loadProject(str buffer)\n\n#### Parameters\n\nbuffer  \nA string that contains the custom data that was saved in the project by saveProject.\n\n#### Remarks\n\nThis method is called when a project is loaded. By overriding saveProject and loadProject, a user can store and retrieve custom data in the project definition. You must call super() for the project to continue loading.\n\n### Method saveProject\n\nEnables saving custom data together with the project in the application object database.\n\n    public void saveProject(str buffer)\n\n#### Parameters\n\nbuffer  \nA string buffer that must be used for packing the data. The buffer must then be passed on to super().\n\n#### Remarks\n\nBy overriding this method, you can save custom data together with the project in the application object database. It is recommended that the data be formed as an XML string in the following form: \"&lt;APPDATA&gt; ... &lt;/APPDATA&gt;\" The data can be retrieved by overriding the loadProject method.\n\n### Method unlockUpdate\n\nEnables a visual update after a series of actions started with lockUpdate.\n\n    public void unlockUpdate()\n\n### Method handleContextMenuItem\n\nHandles a user selecting an item on the shortcut menu that has been defined by the corresponding method addContextMenuItems.\n\n    public void handleContextMenuItem(int id)\n\n#### Parameters\n\nid  \nThe ID of the menu items. This is the zero-based number in the list set by the addContextMenuItems method. If accContextMenuItems returns the string \"item1,item2\" and the user selects the item \"item2\" in the shortcut menu, this method uses the value 1.\n\n#### Remarks\n\nThis method is called when a user selects an item on the shortcut menu that has been defined by the corresponding method addContextMenuItems.\n\n### Method addNode\n\nAdds an existing node to the project.\n\n    public void addNode(TreeNode node)\n\n#### Parameters\n\nnode  \nThe node to add.\n\n### Method addUtilNode\n\nAdds a node to the project.\n\n    public void addUtilNode(UtilElementType type, str name)\n\n#### Parameters\n\ntype  \nThe name of the node.\n\n<!-- -->\n\nname  \nThe name of the node.\n\n#### Remarks\n\nThis function is also found on ProjectGroupNode.\n\n### Method clear\n\nRemoves the contents of a project.\n\n    public void clear()\n\n#### Remarks\n\nThis method does not remove the project contents from the Application Object Tree (AOT)—only from the project itself. This method removes the project contents but does not remove the project folder. To delete a project and its contents in one method call, use the AOTdelete method. To delete objects from the AOT, use the AOTdelete method.\n\n#### Examples\n\nThe following example removes any objects in the Project1 project in the Private folder.\n\n    static void clearProjectObjects(Args _args) \n        { \n            ProjectNode privatePn; \n            ProjectNode pn; \n            // Navigate to the Private projects folder. \n            privatePn = infolog.projectRootNode().AOTfindChild(\"Private\"); \n            // Get a reference to the project. \n            pn = privatePn.AOTfindChild(\"Project1\"); \n            // Clear the project. \n            pn.clear(); \n        }\n\n### Method setProjectClass\n\nAssigns a class to the project, which gives the project the type that the class defines.\n\n    public void setProjectClass(int classid)\n\n#### Parameters\n\nclassid  \nThe ID of the class to assign to the project.\n\n#### Remarks\n\nThe specified class must extend the projectNode class.\n\n### Method removeSpecialOverlayIcons\n\n    public void removeSpecialOverlayIcons(str path)\n\n#### Parameters\n\npath  \n\n### Method new\n\nInitializes a new instance of the ProjectNode class.\n\n    public void new()\n\n## Class PropertiesWindow\n    class PropertiesWindow extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                   | Description |\n|----------------------------------------------------------|-------------|\n| public int Activate(PropWindowDisplayState displaystate) |             |\n| public boolean DockFrame(PropWindowDockState dockstate)  |             |\n| public str GetSelectedPropertyName()                     |             |\n| public boolean IsVisible()                               |             |\n| public boolean SelectPropertyByName(str propname)        |             |\n| public boolean SelectTab(PropWindowSelectTab selecttab)  |             |\n\n### Method Activate\n\n    public int Activate(PropWindowDisplayState displaystate)\n\n#### Parameters\n\ndisplaystate  \n\n#### Return Value\n\n### Method DockFrame\n\n    public boolean DockFrame(PropWindowDockState dockstate)\n\n#### Parameters\n\ndockstate  \n\n#### Return Value\n\n### Method GetSelectedPropertyName\n\n    public str GetSelectedPropertyName()\n\n#### Return Value\n\n### Method IsVisible\n\n    public boolean IsVisible()\n\n#### Return Value\n\n### Method SelectPropertyByName\n\n    public boolean SelectPropertyByName(str propname)\n\n#### Parameters\n\npropname  \n\n#### Return Value\n\n### Method SelectTab\n\n    public boolean SelectTab(PropWindowSelectTab selecttab)\n\n#### Parameters\n\nselecttab  \n\n#### Return Value\n\n\n\n","nodes":[{"pos":[4,613],"embed":true,"content":"# required metadata\n\ntitle: P Classes\ndescription: System API classes that start with the letter P.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 52231\nms.assetid: 50842cd5-c27f-43aa-8a6d-bc9d3b02fd60\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n","nodes":[{"content":"P Classes","nodes":[{"pos":[0,9],"content":"P Classes","nodes":[{"content":"P Classes","pos":[0,9]}]}],"path":["title"]},{"content":"System API classes that start with the letter P.","nodes":[{"pos":[0,48],"content":"System API classes that start with the letter P.","nodes":[{"content":"System API classes that start with the letter P.","pos":[0,48]}]}],"path":["description"]}],"header":"# required metadata\n","yml":true},{"pos":[621,630],"content":"P Classes","linkify":"P Classes","nodes":[{"content":"P Classes","pos":[0,9]}]},{"content":"System API classes that start with the letter P.","pos":[676,724]},{"pos":[726,736],"content":"Class Page","linkify":"Class Page","nodes":[{"content":"Class Page","pos":[0,10]}]},{"content":"This Page class lets you create, read, update, and delete X++ code and metadata.","pos":[780,860]},{"pos":[866,873],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[875,985]},{"pos":[991,999],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[1005,1012],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[1016,1022]},{"content":"Description","pos":[1096,1107]},{"content":"public boolean actionPaneControlEnabled(str controlName, <ph id=\"ph1\">\\[</ph>boolean enabled<ph id=\"ph2\">\\]</ph>)","pos":[1330,1407],"source":"public boolean actionPaneControlEnabled(str controlName, \\[boolean enabled\\])"},{"content":"Sets or gets the enabled property value of a control on the Action Pane.","pos":[1410,1482]},{"content":"public boolean actionPaneControlVisible(str controlName, <ph id=\"ph1\">\\[</ph>boolean visible<ph id=\"ph2\">\\]</ph>)","pos":[1487,1564],"source":"public boolean actionPaneControlVisible(str controlName, \\[boolean visible\\])"},{"content":"Sets or gets the visible property value of a control on the Action Pane.","pos":[1567,1639]},{"content":"public Array activeActionPaneTabNames()","pos":[1644,1683]},{"content":"public Common activeRecord(str dataSourceName)","pos":[1801,1847]},{"content":"Gets the active record for the given data source name.","pos":[1881,1935]},{"content":"public str name()","pos":[1958,1975]},{"content":"Gets the name of the page.","pos":[2038,2064]},{"content":"public PageArgs pageArgs()","pos":[2115,2141]},{"content":"Gets the page arguments.","pos":[2195,2219]},{"content":"public xFormRun formRun()","pos":[2272,2297]},{"pos":[2432,2463],"content":"Method actionPaneControlEnabled","linkify":"Method actionPaneControlEnabled","nodes":[{"content":"Method actionPaneControlEnabled","pos":[0,31]}]},{"content":"Sets or gets the enabled property value of a control on the Action Pane.","pos":[2465,2537]},{"pos":[2625,2635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlName","pos":[2637,2648]},{"content":"A value that specifies whether the Action Pane control is enabled; optional.","pos":[2651,2727]},{"content":"enabled","pos":[2739,2746]},{"content":"A value that specifies whether the Action Pane control is enabled; optional.","pos":[2749,2825]},{"pos":[2832,2844],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the Action Pane control is enabled.","pos":[2846,2920]},{"pos":[2926,2957],"content":"Method actionPaneControlVisible","linkify":"Method actionPaneControlVisible","nodes":[{"content":"Method actionPaneControlVisible","pos":[0,31]}]},{"content":"Sets or gets the visible property value of a control on the Action Pane.","pos":[2959,3031]},{"pos":[3119,3129],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlName","pos":[3131,3142]},{"content":"A value that specifies whether the Action Pane control is visible; optional.","pos":[3145,3221]},{"content":"visible","pos":[3233,3240]},{"content":"A value that specifies whether the Action Pane control is visible; optional.","pos":[3243,3319]},{"pos":[3326,3338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the Action Pane control is visible.","pos":[3340,3414]},{"pos":[3420,3451],"content":"Method activeActionPaneTabNames","linkify":"Method activeActionPaneTabNames","nodes":[{"content":"Method activeActionPaneTabNames","pos":[0,31]}]},{"pos":[3503,3515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3521,3540],"content":"Method activeRecord","linkify":"Method activeRecord","nodes":[{"content":"Method activeRecord","pos":[0,19]}]},{"content":"Gets the active record for the given data source name.","pos":[3542,3596]},{"pos":[3655,3665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceName","pos":[3667,3681]},{"content":"The name of the data source to search on.","pos":[3684,3725]},{"pos":[3732,3744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The active record for the given data source.","pos":[3746,3790]},{"pos":[3796,3807],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets the name of the page.","pos":[3809,3835]},{"pos":[3865,3877],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The page name.","pos":[3879,3893]},{"pos":[3899,3914],"content":"Method pageArgs","linkify":"Method pageArgs","nodes":[{"content":"Method pageArgs","pos":[0,15]}]},{"content":"Gets the page arguments.","pos":[3916,3940]},{"pos":[3979,3991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The page arguments.","pos":[3993,4012]},{"pos":[4018,4032],"content":"Method formRun","linkify":"Method formRun","nodes":[{"content":"Method formRun","pos":[0,14]}]},{"pos":[4070,4082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4087,4101],"content":"Class PageArgs","linkify":"Class PageArgs","nodes":[{"content":"Class PageArgs","pos":[0,14]}]},{"content":"The PageArgs class lets you create, read, update, and delete X++ code and metadata.","pos":[4137,4220]},{"pos":[4226,4233],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[4235,4345]},{"pos":[4351,4359],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[4365,4372],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[4376,4382]},{"content":"Description","pos":[4425,4436]},{"content":"public int enumParameter(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4698,4737],"source":"public int enumParameter(\\[int value\\])"},{"content":"Gets or sets the enumParameter property that is passed to the object that is run by the MenuFunction class.","pos":[4747,4854]},{"content":"public int enumTypeParameter(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4859,4902],"source":"public int enumTypeParameter(\\[int value\\])"},{"content":"Gets or sets the enumTypeParameter property for the MenuFunction class.","pos":[4908,4979]},{"content":"public Common externalRecord(<ph id=\"ph1\">\\[</ph>Common value<ph id=\"ph2\">\\]</ph>)","pos":[5020,5066],"source":"public Common externalRecord(\\[Common value\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[5181,5219],"source":"public str menuItemName(\\[str value\\])"},{"content":"public str parameters(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[5342,5378],"source":"public str parameters(\\[str value\\])"},{"content":"Gets or sets the list of parameters that are passed to objects that are run by the MenuFunction class.","pos":[5391,5493]},{"content":"public void new()","pos":[5503,5520]},{"content":"Initializes a new instance of the PageArgs class.","pos":[5552,5601]},{"pos":[5667,5687],"content":"Method enumParameter","linkify":"Method enumParameter","nodes":[{"content":"Method enumParameter","pos":[0,20]}]},{"content":"Gets or sets the enumParameter property that is passed to the object that is run by the MenuFunction class.","pos":[5689,5796]},{"pos":[5846,5856],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[5858,5863]},{"pos":[5872,5884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The enumParameter property that is passed to the object that is run by the MenuFunction class.","pos":[5886,5980]},{"pos":[5986,6010],"content":"Method enumTypeParameter","linkify":"Method enumTypeParameter","nodes":[{"content":"Method enumTypeParameter","pos":[0,24]}]},{"content":"Gets or sets the enumTypeParameter property for the MenuFunction class.","pos":[6012,6083]},{"pos":[6137,6147],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[6149,6154]},{"pos":[6163,6175],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The enumTypeParameter property for the MenuFunction class.","pos":[6177,6235]},{"pos":[6241,6262],"content":"Method externalRecord","linkify":"Method externalRecord","nodes":[{"content":"Method externalRecord","pos":[0,21]}]},{"pos":[6319,6329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[6331,6336]},{"pos":[6345,6357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6363,6382],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[6431,6441],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[6443,6448]},{"pos":[6457,6469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6475,6492],"content":"Method parameters","linkify":"Method parameters","nodes":[{"content":"Method parameters","pos":[0,17]}]},{"content":"Gets or sets the list of parameters that are passed to objects that are run by the MenuFunction class.","pos":[6494,6596]},{"pos":[6643,6653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[6655,6660]},{"pos":[6669,6681],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The list of parameters that are passed to the object.","pos":[6683,6736]},{"pos":[6743,6750],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The parameters string format is Parameter1=Value1, Parameter2=Value2, and so on.cts ignore passed, unrecognized parameters.","pos":[6752,6875]},{"pos":[6881,6891],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the PageArgs class.","pos":[6893,6942]},{"pos":[6970,6991],"content":"Class PageInteraction","linkify":"Class PageInteraction","nodes":[{"content":"Class PageInteraction","pos":[0,21]}]},{"content":"The PageInteraction class provides functionality for interacting with a list page.","pos":[7034,7116]},{"pos":[7122,7129],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7135,7143],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[7149,7156],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[7160,7166]},{"content":"Description","pos":[7211,7222]},{"content":"public Page page()","pos":[7404,7422]},{"content":"Gets the ListPage instance.","pos":[7455,7482]},{"content":"public void tabChanged(container activeTabNames)","pos":[7526,7574]},{"content":"public void new(Page page)","pos":[7648,7674]},{"content":"Creates a new PageInteraction object that operates on a list page.","pos":[7699,7765]},{"pos":[7773,7784],"content":"Method page","linkify":"Method page","nodes":[{"content":"Method page","pos":[0,11]}]},{"content":"Gets the ListPage instance.","pos":[7786,7813]},{"pos":[7844,7856],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns the ListPage instance for this PageInteraction instance.","pos":[7858,7922]},{"pos":[7928,7945],"content":"Method tabChanged","linkify":"Method tabChanged","nodes":[{"content":"Method tabChanged","pos":[0,17]}]},{"pos":[8006,8016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"activeTabNames","pos":[8018,8032]},{"pos":[8040,8050],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a new PageInteraction object that operates on a list page.","pos":[8052,8118]},{"pos":[8157,8167],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"page","pos":[8169,8173]},{"pos":[8180,8194],"content":"Class PartList","linkify":"Class PartList","nodes":[{"content":"Class PartList","pos":[0,14]}]},{"pos":[8234,8241],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8247,8255],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[8261,8268],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[8272,8278]},{"content":"Description","pos":[8320,8331]},{"content":"public xFormRun getPartById(int id)","pos":[8472,8507]},{"content":"public FormControl getPartControlById(int id)","pos":[8572,8617]},{"content":"public int partCount()","pos":[8672,8694]},{"content":"public void new(xFormRun form)","pos":[8772,8802]},{"content":"Initializes a new instance of the Object class.","pos":[8820,8867]},{"content":"public void finalize()","pos":[8872,8894]},{"pos":[8975,8993],"content":"Method getPartById","linkify":"Method getPartById","nodes":[{"content":"Method getPartById","pos":[0,18]}]},{"pos":[9041,9051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"id","pos":[9053,9055]},{"pos":[9064,9076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9082,9107],"content":"Method getPartControlById","linkify":"Method getPartControlById","nodes":[{"content":"Method getPartControlById","pos":[0,25]}]},{"pos":[9165,9175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"id","pos":[9177,9179]},{"pos":[9188,9200],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9206,9222],"content":"Method partCount","linkify":"Method partCount","nodes":[{"content":"Method partCount","pos":[0,16]}]},{"pos":[9257,9269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[9275,9285],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[9287,9334]},{"pos":[9377,9387],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[9389,9393]},{"pos":[9401,9416],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[9449,9465],"content":"Class Percentbar","linkify":"Class Percentbar","nodes":[{"content":"Class Percentbar","pos":[0,16]}]},{"pos":[9507,9514],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9520,9528],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[9534,9541],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[9545,9551]},{"content":"Description","pos":[9588,9599]},{"content":"public void new(int maxCount, str title)","pos":[9743,9783]},{"content":"Initializes a new instance of the Percentbar class.","pos":[9786,9837]},{"content":"public void set(int count)","pos":[9842,9868]},{"content":"public void finalize()","pos":[9941,9963]},{"pos":[10043,10053],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Percentbar class.","pos":[10055,10106]},{"pos":[10159,10169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"maxCount","pos":[10171,10179]},{"content":"title","pos":[10193,10198]},{"pos":[10206,10216],"content":"Method set","linkify":"Method set","nodes":[{"content":"Method set","pos":[0,10]}]},{"pos":[10255,10265],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"count","pos":[10267,10272]},{"pos":[10280,10295],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[10328,10352],"content":"Class PerformanceMonitor","linkify":"Class PerformanceMonitor","nodes":[{"content":"Class PerformanceMonitor","pos":[0,24]}]},{"content":"The PerformanceMonitor class fetches data for processes that are running on the system.","pos":[10398,10485]},{"pos":[10491,10498],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can take a snapshot of the system at any time and traverse the counters for any process that is running on the system.","pos":[10500,10622]},{"pos":[10628,10636],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints the processId and workingset values for all the currently running processes.","pos":[10638,10743]},{"pos":[11493,11500],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[11504,11510]},{"content":"Description","pos":[11565,11576]},{"content":"public PerformanceMonitorInstance instance(int instanceNo)","pos":[11824,11882]},{"content":"public int instanceCount()","pos":[11984,12010]},{"content":"Returns the instance count, which is the number of processes in the current snapshot.","pos":[12045,12130]},{"content":"public int processId()","pos":[12144,12166]},{"content":"Returns the processId value of the process that is running this method.","pos":[12205,12276]},{"content":"public str systemName()","pos":[12304,12327]},{"content":"public boolean takeSnapshot(<ph id=\"ph1\">\\[</ph>str processName<ph id=\"ph2\">\\]</ph>)","pos":[12464,12512],"source":"public boolean takeSnapshot(\\[str processName\\])"},{"content":"public str toString()","pos":[12624,12645]},{"content":"Returns a string that contains the class handle and name, and possibly additional information.","pos":[12685,12779]},{"content":"public void new()","pos":[12784,12801]},{"content":"Initializes a new instance of the PerformanceMonitor class.","pos":[12845,12904]},{"pos":[12947,12962],"content":"Method instance","linkify":"Method instance","nodes":[{"content":"Method instance","pos":[0,15]}]},{"pos":[13033,13043],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"instanceNo","pos":[13045,13055]},{"pos":[13064,13076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[13082,13102],"content":"Method instanceCount","linkify":"Method instanceCount","nodes":[{"content":"Method instanceCount","pos":[0,20]}]},{"content":"Returns the instance count, which is the number of processes in the current snapshot.","pos":[13104,13189]},{"pos":[13228,13240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of processes in the current snapshot.","pos":[13242,13290]},{"pos":[13297,13304],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the takeSnapshot method to take a snapshot of the currently running processes.","pos":[13306,13388]},{"pos":[13395,13403],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[14149,14165],"content":"Method processId","linkify":"Method processId","nodes":[{"content":"Method processId","pos":[0,16]}]},{"content":"Returns the processId value of the process that is running this method.","pos":[14167,14238]},{"pos":[14273,14285],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The processId value of the Finance and Operations process that is running this method.","pos":[14287,14373]},{"pos":[14380,14388],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[14553,14570],"content":"Method systemName","linkify":"Method systemName","nodes":[{"content":"Method systemName","pos":[0,17]}]},{"pos":[14606,14618],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14624,14643],"content":"Method takeSnapshot","linkify":"Method takeSnapshot","nodes":[{"content":"Method takeSnapshot","pos":[0,19]}]},{"pos":[14702,14712],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"processName","pos":[14714,14725]},{"pos":[14734,14746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[14752,14767],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that contains the class handle and name, and possibly additional information.","pos":[14769,14863]},{"pos":[14897,14909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A textual description of the class.","pos":[14911,14946]},{"pos":[14953,14960],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, for most classes, the toString method returns a string that contains the class handle and name.","pos":[14962,15069]},{"content":"However, in some classes, additional information is returned in the string.","pos":[15070,15145]},{"pos":[15151,15161],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the PerformanceMonitor class.","pos":[15163,15222]},{"pos":[15250,15281],"content":"Class PerformanceMonitorCounter","linkify":"Class PerformanceMonitorCounter","nodes":[{"content":"Class PerformanceMonitorCounter","pos":[0,31]}]},{"content":"The PerformanceMonitorCounter class identifies a counter that is assigned to a particular instance of a particular snapshot.","pos":[15334,15458]},{"pos":[15464,15471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The data can be fetched by using the get methods.","pos":[15473,15522]},{"pos":[15528,15536],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[15542,15549],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[15553,15559]},{"content":"Description","pos":[15578,15589]},{"content":"public int intData()","pos":[15801,15821]},{"content":"public str name()","pos":[15925,15942]},{"content":"public Time timeData()","pos":[16049,16071]},{"content":"public str toString()","pos":[16173,16194]},{"content":"Returns a string that contains the class handle and name, and possibly additional information.","pos":[16198,16292]},{"pos":[16300,16314],"content":"Method intData","linkify":"Method intData","nodes":[{"content":"Method intData","pos":[0,14]}]},{"pos":[16347,16359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16365,16376],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"pos":[16406,16418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16424,16439],"content":"Method timeData","linkify":"Method timeData","nodes":[{"content":"Method timeData","pos":[0,15]}]},{"pos":[16474,16486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16492,16507],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that contains the class handle and name, and possibly additional information.","pos":[16509,16603]},{"pos":[16637,16649],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A textual description of the class.","pos":[16651,16686]},{"pos":[16693,16700],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, for most classes, the toString method returns a string that contains the class handle and name.","pos":[16702,16809]},{"content":"However, in some classes additional information is returned in the string.","pos":[16810,16884]},{"pos":[16889,16921],"content":"Class PerformanceMonitorInstance","linkify":"Class PerformanceMonitorInstance","nodes":[{"content":"Class PerformanceMonitorInstance","pos":[0,32]}]},{"content":"The PerformanceMonitorInstance class represents a process that is running on the machine on which the Process Monitor runs.","pos":[16975,17098]},{"pos":[17104,17111],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class allows for queries of the process counters.","pos":[17113,17167]},{"content":"You can use objects of this class to query the processes counters.","pos":[17168,17234]},{"content":"Each counter represents a process parameter.","pos":[17235,17279]},{"pos":[17285,17293],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[17299,17306],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[17310,17316]},{"content":"Description","pos":[17373,17384]},{"content":"public PerformanceMonitorCounter getCounter(str counterName)","pos":[17634,17694]},{"content":"public str name()","pos":[17796,17813]},{"content":"public str toString()","pos":[17958,17979]},{"content":"Returns a string that contains the class handle and name, and possibly additional information.","pos":[18021,18115]},{"pos":[18123,18140],"content":"Method getCounter","linkify":"Method getCounter","nodes":[{"content":"Method getCounter","pos":[0,17]}]},{"pos":[18213,18223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"counterName","pos":[18225,18236]},{"pos":[18245,18257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18263,18274],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"pos":[18304,18316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[18322,18337],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that contains the class handle and name, and possibly additional information.","pos":[18339,18433]},{"pos":[18467,18479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a textual description of the class.","pos":[18481,18524]},{"pos":[18531,18538],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By default, for most classes, the toString method returns a string that contains the class handle and name.","pos":[18540,18647]},{"content":"However, in some classes additional information is returned in the string.","pos":[18648,18722]},{"pos":[18727,18743],"content":"Class PipeClient","linkify":"Class PipeClient","nodes":[{"content":"Class PipeClient","pos":[0,16]}]},{"pos":[18785,18792],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[18798,18806],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[18812,18819],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[18823,18829]},{"content":"Description","pos":[18893,18904]},{"content":"public boolean blockingMode(<ph id=\"ph1\">\\[</ph>boolean block<ph id=\"ph2\">\\]</ph>)","pos":[19075,19121],"source":"public boolean blockingMode(\\[boolean block\\])"},{"content":"public int errorCode()","pos":[19201,19223]},{"content":"public str read()","pos":[19327,19344]},{"content":"public boolean write(str buffer)","pos":[19453,19485]},{"content":"public void new(str servername, str pipename, <ph id=\"ph1\">\\[</ph>boolean blocking<ph id=\"ph2\">\\]</ph>)","pos":[19579,19646],"source":"public void new(str servername, str pipename, \\[boolean blocking\\])"},{"content":"Initializes a new instance of the PipeClient class.","pos":[19649,19700]},{"pos":[19708,19727],"content":"Method blockingMode","linkify":"Method blockingMode","nodes":[{"content":"Method blockingMode","pos":[0,19]}]},{"pos":[19784,19794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"block","pos":[19796,19801]},{"pos":[19810,19822],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19828,19844],"content":"Method errorCode","linkify":"Method errorCode","nodes":[{"content":"Method errorCode","pos":[0,16]}]},{"pos":[19879,19891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19897,19908],"content":"Method read","linkify":"Method read","nodes":[{"content":"Method read","pos":[0,11]}]},{"pos":[19938,19950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19956,19968],"content":"Method write","linkify":"Method write","nodes":[{"content":"Method write","pos":[0,12]}]},{"pos":[20013,20023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"buffer","pos":[20025,20031]},{"pos":[20040,20052],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20058,20068],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the PipeClient class.","pos":[20070,20121]},{"pos":[20199,20209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"servername","pos":[20211,20221]},{"content":"pipename","pos":[20235,20243]},{"content":"blocking","pos":[20257,20265]},{"pos":[20272,20288],"content":"Class PipeServer","linkify":"Class PipeServer","nodes":[{"content":"Class PipeServer","pos":[0,16]}]},{"content":"The PipeServer class supports the server side of a named pipe connection.","pos":[20326,20399]},{"pos":[20405,20412],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A named pipe is created when a PipeServer object is created by using the PipeServer.new method.","pos":[20414,20509]},{"content":"The pipe that is created has read access and is in message mode.","pos":[20510,20574]},{"content":"The name of the pipe is automatically prefixed with <ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>.<ph id=\"ph3\">\\\\</ph>pipe<ph id=\"ph4\">\\\\</ph>Dynamics.","pos":[20575,20649],"source":" The name of the pipe is automatically prefixed with \\\\\\\\.\\\\pipe\\\\Dynamics."},{"content":"The current session SID is postfixed to the name.","pos":[20650,20699]},{"content":"The support that is provided for pipe connections on the server is restricted for the following security reasons:","pos":[20700,20813]},{"content":"The pipe is supported only for the current logon session on the computer that the session was created on.","pos":[20819,20924]},{"content":"The user who creates the pipe is the only person who can communicate with that pipe.","pos":[20929,21013]},{"pos":[21019,21027],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[21033,21040],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[21044,21050]},{"content":"Description","pos":[21098,21109]},{"content":"public boolean blockingMode(<ph id=\"ph1\">\\[</ph>boolean block<ph id=\"ph2\">\\]</ph>)","pos":[21314,21360],"source":"public boolean blockingMode(\\[boolean block\\])"},{"content":"public boolean connect()","pos":[21449,21473]},{"content":"Waits for a client to connect to the named pipe.","pos":[21503,21551]},{"content":"public boolean disconnect()","pos":[21584,21611]},{"content":"Disconnects the server end of the named pipe instance from a client process.","pos":[21638,21714]},{"content":"public int errorCode()","pos":[21719,21741]},{"content":"public str read()","pos":[21854,21871]},{"content":"Reads data from the named pipe, as written by a pipe client.","pos":[21908,21968]},{"content":"public void new(str pipename, <ph id=\"ph1\">\\[</ph>boolean blocking<ph id=\"ph2\">\\]</ph>)","pos":[21989,22040],"source":"public void new(str pipename, \\[boolean blocking\\])"},{"content":"Creates a new instance of the PipeServer class.","pos":[22043,22090]},{"pos":[22127,22146],"content":"Method blockingMode","linkify":"Method blockingMode","nodes":[{"content":"Method blockingMode","pos":[0,19]}]},{"pos":[22203,22213],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"block","pos":[22215,22220]},{"pos":[22229,22241],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22247,22261],"content":"Method connect","linkify":"Method connect","nodes":[{"content":"Method connect","pos":[0,14]}]},{"content":"Waits for a client to connect to the named pipe.","pos":[22263,22311]},{"pos":[22348,22360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the method succeeds; otherwise, false.","pos":[22362,22408]},{"pos":[22415,22422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you do not want to block the current thread if it is waiting for a client to connect, avoid using the PipeServer.connect method, and poll by using the PipeServer.read method instead.","pos":[22424,22609]},{"pos":[22615,22632],"content":"Method disconnect","linkify":"Method disconnect","nodes":[{"content":"Method disconnect","pos":[0,17]}]},{"content":"Disconnects the server end of the named pipe instance from a client process.","pos":[22634,22710]},{"pos":[22750,22762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the method succeeds; otherwise, false.","pos":[22764,22810]},{"pos":[22816,22832],"content":"Method errorCode","linkify":"Method errorCode","nodes":[{"content":"Method errorCode","pos":[0,16]}]},{"pos":[22867,22879],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[22885,22896],"content":"Method read","linkify":"Method read","nodes":[{"content":"Method read","pos":[0,11]}]},{"content":"Reads data from the named pipe, as written by a pipe client.","pos":[22898,22958]},{"pos":[22988,23000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The data that is read from the pipe, if any data is read.","pos":[23002,23059]},{"pos":[23066,23073],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Data might not be available when this method is called, perhaps because no client has connected to the named pipe.","pos":[23075,23189]},{"content":"If you want to wait for a client to connect, use the connect method.","pos":[23190,23258]},{"content":"However, if you do not want to block the current thread that is waiting for a client to connect, poll by using the read method.","pos":[23259,23386]},{"pos":[23392,23402],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a new instance of the PipeServer class.","pos":[23404,23451]},{"pos":[23513,23523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pipename","pos":[23525,23533]},{"content":"A Boolean flag that indicates whether blocking behavior should be used.","pos":[23536,23607]},{"content":"Non-blocking mode is supported for compatibility with Microsoft LAN Manager version 2.0 and should not be used to achieve asynchronous I/O with named pipes.","pos":[23608,23764]},{"content":"Instead, a polling technique should be used.","pos":[23765,23809]},{"content":"See the read method.","pos":[23810,23830]},{"content":"blocking","pos":[23842,23850]},{"content":"A Boolean flag that indicates whether blocking behavior should be used.","pos":[23853,23924]},{"content":"Non-blocking mode is supported for compatibility with Microsoft LAN Manager version 2.0 and should not be used to achieve asynchronous I/O with named pipes.","pos":[23925,24081]},{"content":"Instead, a polling technique should be used.","pos":[24082,24126]},{"content":"See the read method.","pos":[24127,24147]},{"pos":[24154,24161],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Some restrictions apply.","pos":[24163,24187]},{"content":"See the example in the general description of the PipeServer class.","pos":[24188,24255]},{"pos":[24260,24278],"content":"Class PresenceInfo","linkify":"Class PresenceInfo","nodes":[{"content":"Class PresenceInfo","pos":[0,18]}]},{"pos":[24322,24329],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24335,24343],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[24349,24356],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[24360,24366]},{"content":"Description","pos":[24432,24443]},{"content":"public str contactName(<ph id=\"ph1\">\\[</ph>str contactName<ph id=\"ph2\">\\]</ph>)","pos":[24620,24663],"source":"public str contactName(\\[str contactName\\])"},{"content":"public str emailAddress(int index)","pos":[24750,24784]},{"content":"public str emailAlias(int index)","pos":[24880,24912]},{"content":"public int emailCount()","pos":[25010,25033]},{"content":"public str phoneAlias(int index)","pos":[25140,25172]},{"content":"public int phoneCount()","pos":[25270,25293]},{"content":"public str phoneNumber(int index)","pos":[25400,25433]},{"content":"public str sipAddress(<ph id=\"ph1\">\\[</ph>str sipAddress<ph id=\"ph2\">\\]</ph>)","pos":[25530,25571],"source":"public str sipAddress(\\[str sipAddress\\])"},{"content":"public void finalize()","pos":[25660,25682]},{"content":"public void new()","pos":[25790,25807]},{"content":"Initializes a new instance of the PresenceInfo class.","pos":[25862,25915]},{"content":"public void addEmailAddress(<ph id=\"ph1\">\\[</ph>str emailAlias<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>str emailAddress<ph id=\"ph4\">\\]</ph>)","pos":[25920,25989],"source":"public void addEmailAddress(\\[str emailAlias\\], \\[str emailAddress\\])"},{"content":"public void addPhoneNumber(<ph id=\"ph1\">\\[</ph>str phoneAlias<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>str phoneNumber<ph id=\"ph4\">\\]</ph>)","pos":[26050,26117],"source":"public void addPhoneNumber(\\[str phoneAlias\\], \\[str phoneNumber\\])"},{"pos":[26183,26201],"content":"Method contactName","linkify":"Method contactName","nodes":[{"content":"Method contactName","pos":[0,18]}]},{"pos":[26255,26265],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"contactName","pos":[26267,26278]},{"pos":[26287,26299],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26305,26324],"content":"Method emailAddress","linkify":"Method emailAddress","nodes":[{"content":"Method emailAddress","pos":[0,19]}]},{"pos":[26371,26381],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[26383,26388]},{"pos":[26397,26409],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26415,26432],"content":"Method emailAlias","linkify":"Method emailAlias","nodes":[{"content":"Method emailAlias","pos":[0,17]}]},{"pos":[26477,26487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[26489,26494]},{"pos":[26503,26515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26521,26538],"content":"Method emailCount","linkify":"Method emailCount","nodes":[{"content":"Method emailCount","pos":[0,17]}]},{"pos":[26574,26586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26592,26609],"content":"Method phoneAlias","linkify":"Method phoneAlias","nodes":[{"content":"Method phoneAlias","pos":[0,17]}]},{"pos":[26654,26664],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[26666,26671]},{"pos":[26680,26692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26698,26715],"content":"Method phoneCount","linkify":"Method phoneCount","nodes":[{"content":"Method phoneCount","pos":[0,17]}]},{"pos":[26751,26763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26769,26787],"content":"Method phoneNumber","linkify":"Method phoneNumber","nodes":[{"content":"Method phoneNumber","pos":[0,18]}]},{"pos":[26833,26843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[26845,26850]},{"pos":[26859,26871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26877,26894],"content":"Method sipAddress","linkify":"Method sipAddress","nodes":[{"content":"Method sipAddress","pos":[0,17]}]},{"pos":[26946,26956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sipAddress","pos":[26958,26968]},{"pos":[26977,26989],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26995,27010],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[27044,27054],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the PresenceInfo class.","pos":[27056,27109]},{"pos":[27138,27160],"content":"Method addEmailAddress","linkify":"Method addEmailAddress","nodes":[{"content":"Method addEmailAddress","pos":[0,22]}]},{"pos":[27238,27248],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"emailAlias","pos":[27250,27260]},{"content":"emailAddress","pos":[27274,27286]},{"pos":[27294,27315],"content":"Method addPhoneNumber","linkify":"Method addPhoneNumber","nodes":[{"content":"Method addPhoneNumber","pos":[0,21]}]},{"pos":[27391,27401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"phoneAlias","pos":[27403,27413]},{"content":"phoneNumber","pos":[27427,27438]},{"pos":[27445,27467],"content":"Class PrintJobSettings","linkify":"Class PrintJobSettings","nodes":[{"content":"Class PrintJobSettings","pos":[0,22]}]},{"content":"The PrintJobSettings class lets users access printers and their device settings.","pos":[27511,27591]},{"pos":[27597,27604],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"PrintJobSettings is used by the SysPrintForm form.","pos":[27606,27656]},{"pos":[27662,27670],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example writes the name of the default printer and lists the available printers.","pos":[27672,27766]},{"pos":[28213,28220],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[28224,28230]},{"content":"Description","pos":[28330,28341]},{"content":"public boolean allPages(<ph id=\"ph1\">\\[</ph>boolean all<ph id=\"ph2\">\\]</ph>)","pos":[28640,28680],"source":"public boolean allPages(\\[boolean all\\])"},{"content":"Controls whether the All or Pages option button should be selected when you run the sysPrintForm.","pos":[28746,28843]},{"content":"public boolean appendToTextFile(<ph id=\"ph1\">\\[</ph>boolean append<ph id=\"ph2\">\\]</ph>)","pos":[28848,28899],"source":"public boolean appendToTextFile(\\[boolean append\\])"},{"content":"public boolean banding()","pos":[29056,29080]},{"content":"public PrintJobSettings clientPrintJobSettings()","pos":[29264,29312]},{"content":"public boolean collate(<ph id=\"ph1\">\\[</ph>boolean collate<ph id=\"ph2\">\\]</ph>)","pos":[29472,29515],"source":"public boolean collate(\\[boolean collate\\])"},{"content":"public int copies(<ph id=\"ph1\">\\[</ph>int numberOfCopies<ph id=\"ph2\">\\]</ph>)","pos":[29680,29721],"source":"public int copies(\\[int numberOfCopies\\])"},{"content":"public str copyDescription(int number, <ph id=\"ph1\">\\[</ph>str description<ph id=\"ph2\">\\]</ph>)","pos":[29888,29947],"source":"public str copyDescription(int number, \\[str description\\])"},{"content":"public str deviceName(<ph id=\"ph1\">\\[</ph>str device<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ClassRunMode runOn<ph id=\"ph4\">\\]</ph>)","pos":[30096,30157],"source":"public str deviceName(\\[str device\\], \\[ClassRunMode runOn\\])"},{"content":"Selects a printer or retrieves the deviceName of the selected printer.","pos":[30202,30272]},{"content":"public boolean doNotOverwrite(<ph id=\"ph1\">\\[</ph>boolean warn<ph id=\"ph2\">\\]</ph>)","pos":[30304,30351],"source":"public boolean doNotOverwrite(\\[boolean warn\\])"},{"content":"public boolean enableCopies(<ph id=\"ph1\">\\[</ph>boolean enable<ph id=\"ph2\">\\]</ph>)","pos":[30512,30559],"source":"public boolean enableCopies(\\[boolean enable\\])"},{"content":"public boolean enableDevice(<ph id=\"ph1\">\\[</ph>boolean enable<ph id=\"ph2\">\\]</ph>)","pos":[30720,30767],"source":"public boolean enableDevice(\\[boolean enable\\])"},{"content":"public boolean enablePages(<ph id=\"ph1\">\\[</ph>boolean enable<ph id=\"ph2\">\\]</ph>)","pos":[30928,30974],"source":"public boolean enablePages(\\[boolean enable\\])"},{"content":"public boolean enableProperties(<ph id=\"ph1\">\\[</ph>boolean enable<ph id=\"ph2\">\\]</ph>)","pos":[31136,31187],"source":"public boolean enableProperties(\\[boolean enable\\])"},{"content":"public boolean enableStoreInPrintArchive(<ph id=\"ph1\">\\[</ph>boolean enable<ph id=\"ph2\">\\]</ph>)","pos":[31344,31404],"source":"public boolean enableStoreInPrintArchive(\\[boolean enable\\])"},{"content":"public boolean enableTarget(<ph id=\"ph1\">\\[</ph>boolean enable<ph id=\"ph2\">\\]</ph>)","pos":[31552,31599],"source":"public boolean enableTarget(\\[boolean enable\\])"},{"content":"public int facename2number(<ph id=\"ph1\">\\[</ph>str facename<ph id=\"ph2\">\\]</ph>)","pos":[31760,31804],"source":"public int facename2number(\\[str facename\\])"},{"content":"public str fileName(<ph id=\"ph1\">\\[</ph>str FileName<ph id=\"ph2\">\\]</ph>)","pos":[31968,32005],"source":"public str fileName(\\[str FileName\\])"},{"content":"public boolean fitToPage(<ph id=\"ph1\">\\[</ph>boolean fit<ph id=\"ph2\">\\]</ph>)","pos":[32176,32217],"source":"public boolean fitToPage(\\[boolean fit\\])"},{"content":"public PrintFormat format(<ph id=\"ph1\">\\[</ph>PrintFormat format<ph id=\"ph2\">\\]</ph>)","pos":[32384,32433],"source":"public PrintFormat format(\\[PrintFormat format\\])"},{"content":"public int from(<ph id=\"ph1\">\\[</ph>int fromPage<ph id=\"ph2\">\\]</ph>)","pos":[32592,32625],"source":"public int from(\\[int fromPage\\])"},{"content":"public str getFacename(int number)","pos":[32800,32834]},{"content":"public str getFacenameInfo(int number)","pos":[33008,33046]},{"content":"public Struct getFontInfo(str fontName)","pos":[33216,33255]},{"content":"public Array getGlyphWidthsArray(str fontName, int firstChar, int lastChar)","pos":[33424,33499]},{"content":"public int getNumberOfClientPrinters()","pos":[33632,33670]},{"content":"public int getNumberOfFacenames()","pos":[33840,33873]},{"content":"public int getNumberOfPrinters()","pos":[34048,34080]},{"content":"Returns the number of printers that are set up on the computer.","pos":[34154,34217]},{"content":"public int getNumberOfServerPrinters()","pos":[34256,34294]},{"content":"public int getNumberOfTrays()","pos":[34464,34493]},{"content":"public str getPrinter(int number)","pos":[34672,34705]},{"content":"Gets the deviceName of a printer.","pos":[34778,34811]},{"content":"public ClassRunMode getRunOn(int number)","pos":[34880,34920]},{"content":"public PrintMedium getTarget()","pos":[35088,35118]},{"content":"public int getTray(int number)","pos":[35296,35326]},{"content":"public str getTrayName(int number)","pos":[35504,35538]},{"content":"public Int64 hDC()","pos":[35712,35730]},{"content":"public boolean lockDestinationProperties(<ph id=\"ph1\">\\[</ph>boolean warn<ph id=\"ph2\">\\]</ph>)","pos":[35920,35978],"source":"public boolean lockDestinationProperties(\\[boolean warn\\])"},{"content":"public str mailCc(<ph id=\"ph1\">\\[</ph>str MailCc<ph id=\"ph2\">\\]</ph>)","pos":[36128,36161],"source":"public str mailCc(\\[str MailCc\\])"},{"content":"public str mailSubject(<ph id=\"ph1\">\\[</ph>str MailSubject<ph id=\"ph2\">\\]</ph>)","pos":[36336,36379],"source":"public str mailSubject(\\[str MailSubject\\])"},{"content":"public str mailTo(<ph id=\"ph1\">\\[</ph>str MailTo<ph id=\"ph2\">\\]</ph>)","pos":[36544,36577],"source":"public str mailTo(\\[str MailTo\\])"},{"content":"public int numberOfCopyDescriptions(int number)","pos":[36752,36799]},{"content":"public boolean outputToClient(<ph id=\"ph1\">\\[</ph>boolean toClient<ph id=\"ph2\">\\]</ph>)","pos":[36960,37011],"source":"public boolean outputToClient(\\[boolean toClient\\])"},{"content":"public boolean outputToPrnFile(<ph id=\"ph1\">\\[</ph>boolean writePrnFile<ph id=\"ph2\">\\]</ph>)","pos":[37168,37224],"source":"public boolean outputToPrnFile(\\[boolean writePrnFile\\])"},{"content":"public container packNamesAndPrinterData()","pos":[37376,37418]},{"content":"public container packPageSettings()","pos":[37584,37619]},{"content":"Stores the data that is selected during page formatting in a container.","pos":[37690,37761]},{"content":"public container packPrinterSettings()","pos":[37792,37830]},{"content":"public container packPrintJobSettings()","pos":[38000,38039]},{"content":"public container packSubtotalSettings()","pos":[38208,38247]},{"content":"public int pageCopy2Tray(int pageNumber, <ph id=\"ph1\">\\[</ph>int copyNumber<ph id=\"ph2\">\\]</ph>)","pos":[38416,38476],"source":"public int pageCopy2Tray(int pageNumber, \\[int copyNumber\\])"},{"content":"public boolean pageFormatting()","pos":[38624,38655]},{"content":"public PrinterOrientation paperOrientation(<ph id=\"ph1\">\\[</ph>PrinterOrientation orientation<ph id=\"ph2\">\\]</ph>)","pos":[38832,38910],"source":"public PrinterOrientation paperOrientation(\\[PrinterOrientation orientation\\])"},{"content":"public int paperTray(<ph id=\"ph1\">\\[</ph>int tray<ph id=\"ph2\">\\]</ph>)","pos":[39040,39074],"source":"public int paperTray(\\[int tray\\])"},{"content":"public int paperTrayRaw(<ph id=\"ph1\">\\[</ph>int tray<ph id=\"ph2\">\\]</ph>)","pos":[39248,39285],"source":"public int paperTrayRaw(\\[int tray\\])"},{"content":"public int performanceTest(<ph id=\"ph1\">\\[</ph>int loops<ph id=\"ph2\">\\]</ph>)","pos":[39456,39497],"source":"public int performanceTest(\\[int loops\\])"},{"content":"public PrintFormat preferredFileFormat(<ph id=\"ph1\">\\[</ph>PrintFormat format<ph id=\"ph2\">\\]</ph>)","pos":[39664,39726],"source":"public PrintFormat preferredFileFormat(\\[PrintFormat format\\])"},{"content":"public PrintFormat preferredMailFormat(<ph id=\"ph1\">\\[</ph>PrintFormat format<ph id=\"ph2\">\\]</ph>)","pos":[39872,39934],"source":"public PrintFormat preferredMailFormat(\\[PrintFormat format\\])"},{"content":"public PrinterOrientation preferredOrientation(<ph id=\"ph1\">\\[</ph>PrinterOrientation orientation<ph id=\"ph2\">\\]</ph>)","pos":[40080,40162],"source":"public PrinterOrientation preferredOrientation(\\[PrinterOrientation orientation\\])"},{"content":"public PrintMedium preferredTarget(<ph id=\"ph1\">\\[</ph>PrintMedium target<ph id=\"ph2\">\\]</ph>)","pos":[40288,40346],"source":"public PrintMedium preferredTarget(\\[PrintMedium target\\])"},{"content":"public int printerAttributes()","pos":[40496,40526]},{"content":"public int printerAveragePPM()","pos":[40704,40734]},{"content":"public str printerComment()","pos":[40912,40939]},{"content":"public str printerDatatype()","pos":[41120,41148]},{"content":"public int printerDefaultPriority()","pos":[41328,41363]},{"content":"public str printerDriverName()","pos":[41536,41566]},{"content":"public str printerLocation()","pos":[41744,41772]},{"content":"public int printerPageHeight()","pos":[41952,41982]},{"content":"public int printerPageWidth()","pos":[42160,42189]},{"content":"public int printerPaper()","pos":[42368,42393]},{"content":"public str printerParameters()","pos":[42576,42606]},{"content":"public str printerPortName()","pos":[42784,42812]},{"content":"public str printerPrinterName()","pos":[42992,43023]},{"content":"public str printerPrintProcessor()","pos":[43200,43234]},{"content":"public int printerPriority()","pos":[43408,43436]},{"content":"public int printerQueuedJobs()","pos":[43616,43646]},{"content":"public ClassRunMode printerRunOn()","pos":[43824,43858]},{"content":"public str printerSepFile()","pos":[44032,44059]},{"content":"public str printerServerName()","pos":[44240,44270]},{"content":"public boolean printerSettings(str formName, <ph id=\"ph1\">\\[</ph>xArgs args<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ReportRun reportRun<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int showWhat<ph id=\"ph6\">\\]</ph>)","pos":[44448,44551],"source":"public boolean printerSettings(str formName, \\[xArgs args\\], \\[ReportRun reportRun\\], \\[int showWhat\\])"},{"content":"public str printerShareName()","pos":[44656,44685]},{"content":"public TimeOfDay printerStartTime()","pos":[44864,44899]},{"content":"public int printerStatus()","pos":[45072,45098]},{"content":"public TimeOfDay printerUntilTime()","pos":[45280,45315]},{"content":"public ReportRun reportRun()","pos":[45488,45516]},{"content":"public str requestedDeviceName()","pos":[45696,45728]},{"content":"public ClassRunMode requestedRunOn()","pos":[45904,45940]},{"content":"public boolean runClient()","pos":[46112,46138]},{"content":"public boolean runServer()","pos":[46320,46346]},{"content":"public int sectionsPerPage(<ph id=\"ph1\">\\[</ph>int sectionsPerPage<ph id=\"ph2\">\\]</ph>)","pos":[46528,46579],"source":"public int sectionsPerPage(\\[int sectionsPerPage\\])"},{"content":"public PrintMedium setTarget(PrintMedium target)","pos":[46736,46784]},{"content":"Sets the print medium.","pos":[46842,46864]},{"content":"public boolean singleLargePage(<ph id=\"ph1\">\\[</ph>boolean singleLargePage<ph id=\"ph2\">\\]</ph>)","pos":[46944,47003],"source":"public boolean singleLargePage(\\[boolean singleLargePage\\])"},{"content":"public boolean skipBitmapsInRTF(<ph id=\"ph1\">\\[</ph>boolean skipBitmaps<ph id=\"ph2\">\\]</ph>)","pos":[47152,47208],"source":"public boolean skipBitmapsInRTF(\\[boolean skipBitmaps\\])"},{"content":"Controls whether bitmaps are included when reports are printed to an .rtf file.","pos":[47258,47337]},{"content":"public boolean storeInPrintArchive(<ph id=\"ph1\">\\[</ph>boolean store<ph id=\"ph2\">\\]</ph>)","pos":[47360,47413],"source":"public boolean storeInPrintArchive(\\[boolean store\\])"},{"content":"public boolean suppressScalingMessage(<ph id=\"ph1\">\\[</ph>boolean suppress<ph id=\"ph2\">\\]</ph>)","pos":[47568,47627],"source":"public boolean suppressScalingMessage(\\[boolean suppress\\])"},{"content":"public int to(<ph id=\"ph1\">\\[</ph>int toPage<ph id=\"ph2\">\\]</ph>)","pos":[47776,47805],"source":"public int to(\\[int toPage\\])"},{"content":"public str toString()","pos":[47984,48005]},{"content":"Returns a string that represents the current object.","pos":[48090,48142]},{"content":"public boolean unpackPageSettings(container settings)","pos":[48192,48245]},{"content":"Sets the page settings, such as paper size and orientation.","pos":[48298,48357]},{"content":"public boolean unpackPrinterSettings(container settings)","pos":[48400,48456]},{"content":"public boolean unpackPrintJobSettings(container settings)","pos":[48608,48665]},{"content":"public boolean unpackSubtotalSettings(container settings)","pos":[48816,48873]},{"content":"public int unprintableBottom()","pos":[49024,49054]},{"content":"public int unprintableLeft()","pos":[49232,49260]},{"content":"public int unprintableRight()","pos":[49440,49469]},{"content":"public int unprintableTop()","pos":[49648,49675]},{"content":"Indicates the distance from the top of the paper to the printable area of the paper.","pos":[49754,49838]},{"content":"public ReportOutputUserType viewerType(<ph id=\"ph1\">\\[</ph>ReportOutputUserType type<ph id=\"ph2\">\\]</ph>)","pos":[49856,49925],"source":"public ReportOutputUserType viewerType(\\[ReportOutputUserType type\\])"},{"content":"public int virtualPageHeight(<ph id=\"ph1\">\\[</ph>int height<ph id=\"ph2\">\\]</ph>)","pos":[50064,50108],"source":"public int virtualPageHeight(\\[int height\\])"},{"content":"public boolean warnIfFileExists(<ph id=\"ph1\">\\[</ph>boolean warn<ph id=\"ph2\">\\]</ph>)","pos":[50272,50321],"source":"public boolean warnIfFileExists(\\[boolean warn\\])"},{"content":"public void enableBody(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[50480,50523],"source":"public void enableBody(\\[TableId tableId\\])"},{"content":"public void new(<ph id=\"ph1\">\\[</ph>container Settings<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean infoOnly<ph id=\"ph4\">\\]</ph>)","pos":[50688,50749],"source":"public void new(\\[container Settings\\], \\[boolean infoOnly\\])"},{"content":"Initializes a new instance of the Object class.","pos":[50794,50841]},{"content":"public void addTrayPageCopy(int tray, int pageNumber, <ph id=\"ph1\">\\[</ph>int copyNumber<ph id=\"ph2\">\\]</ph>)","pos":[50896,50969],"source":"public void addTrayPageCopy(int tray, int pageNumber, \\[int copyNumber\\])"},{"content":"public void disableBody(<ph id=\"ph1\">\\[</ph>TableId tableId<ph id=\"ph2\">\\]</ph>)","pos":[51104,51148],"source":"public void disableBody(\\[TableId tableId\\])"},{"content":"public void clearTrayPageCopy()","pos":[51312,51343]},{"content":"public void rulerInch()","pos":[51520,51543]},{"content":"public void finalize()","pos":[51728,51750]},{"content":"public void rulerOff()","pos":[51936,51958]},{"content":"public void rulerMetric()","pos":[52144,52169]},{"pos":[52355,52370],"content":"Method allPages","linkify":"Method allPages","nodes":[{"content":"Method allPages","pos":[0,15]}]},{"content":"Controls whether the All or Pages option button should be selected when you run the sysPrintForm.","pos":[52372,52469]},{"pos":[52520,52530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"all","pos":[52532,52535]},{"content":"A boolean value that, if true, the All option button is selected; otherwise, the Pages option button is selected.","pos":[52538,52651]},{"pos":[52658,52670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the All radio button should be selected; otherwise, false, and the Pages option button is selected.","pos":[52672,52779]},{"pos":[52786,52793],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method is for internal use by sysPrintForm.","pos":[52795,52842]},{"pos":[52849,52857],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example prints pages 2 to 4 and selects the Pages option button instead of the All option button.","pos":[52859,52970]},{"pos":[53735,53758],"content":"Method appendToTextFile","linkify":"Method appendToTextFile","nodes":[{"content":"Method appendToTextFile","pos":[0,23]}]},{"pos":[53820,53830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"append","pos":[53832,53838]},{"pos":[53847,53859],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[53865,53879],"content":"Method banding","linkify":"Method banding","nodes":[{"content":"Method banding","pos":[0,14]}]},{"pos":[53916,53928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[53934,53963],"content":"Method clientPrintJobSettings","linkify":"Method clientPrintJobSettings","nodes":[{"content":"Method clientPrintJobSettings","pos":[0,29]}]},{"pos":[54024,54036],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54042,54056],"content":"Method collate","linkify":"Method collate","nodes":[{"content":"Method collate","pos":[0,14]}]},{"pos":[54110,54120],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"collate","pos":[54122,54129]},{"pos":[54138,54150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54156,54169],"content":"Method copies","linkify":"Method copies","nodes":[{"content":"Method copies","pos":[0,13]}]},{"pos":[54221,54231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"numberOfCopies","pos":[54233,54247]},{"pos":[54256,54268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54274,54296],"content":"Method copyDescription","linkify":"Method copyDescription","nodes":[{"content":"Method copyDescription","pos":[0,22]}]},{"pos":[54366,54376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[54378,54384]},{"content":"description","pos":[54398,54409]},{"pos":[54418,54430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[54436,54453],"content":"Method deviceName","linkify":"Method deviceName","nodes":[{"content":"Method deviceName","pos":[0,17]}]},{"content":"Selects a printer or retrieves the deviceName of the selected printer.","pos":[54455,54525]},{"pos":[54595,54605],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"device","pos":[54607,54613]},{"content":"runOn","pos":[54627,54632]},{"pos":[54641,54653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The deviceName of the selected printer.","pos":[54655,54694]},{"pos":[54701,54708],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The deviceName of a printer to be selected could be found by using the getPrinter method.","pos":[54710,54799]},{"pos":[54806,54814],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"This job lists the available printers and their nonprintable area.","pos":[54816,54882]},{"pos":[55550,55571],"content":"Method doNotOverwrite","linkify":"Method doNotOverwrite","nodes":[{"content":"Method doNotOverwrite","pos":[0,21]}]},{"pos":[55629,55639],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"warn","pos":[55641,55645]},{"pos":[55654,55666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55672,55691],"content":"Method enableCopies","linkify":"Method enableCopies","nodes":[{"content":"Method enableCopies","pos":[0,19]}]},{"pos":[55749,55759],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enable","pos":[55761,55767]},{"pos":[55776,55788],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55794,55813],"content":"Method enableDevice","linkify":"Method enableDevice","nodes":[{"content":"Method enableDevice","pos":[0,19]}]},{"pos":[55871,55881],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enable","pos":[55883,55889]},{"pos":[55898,55910],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55916,55934],"content":"Method enablePages","linkify":"Method enablePages","nodes":[{"content":"Method enablePages","pos":[0,18]}]},{"pos":[55991,56001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enable","pos":[56003,56009]},{"pos":[56018,56030],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56036,56059],"content":"Method enableProperties","linkify":"Method enableProperties","nodes":[{"content":"Method enableProperties","pos":[0,23]}]},{"pos":[56121,56131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enable","pos":[56133,56139]},{"pos":[56148,56160],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56166,56198],"content":"Method enableStoreInPrintArchive","linkify":"Method enableStoreInPrintArchive","nodes":[{"content":"Method enableStoreInPrintArchive","pos":[0,32]}]},{"pos":[56269,56279],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enable","pos":[56281,56287]},{"pos":[56296,56308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56314,56333],"content":"Method enableTarget","linkify":"Method enableTarget","nodes":[{"content":"Method enableTarget","pos":[0,19]}]},{"pos":[56391,56401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"enable","pos":[56403,56409]},{"pos":[56418,56430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56436,56458],"content":"Method facename2number","linkify":"Method facename2number","nodes":[{"content":"Method facename2number","pos":[0,22]}]},{"pos":[56513,56523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"facename","pos":[56525,56533]},{"pos":[56542,56554],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56560,56575],"content":"Method fileName","linkify":"Method fileName","nodes":[{"content":"Method fileName","pos":[0,15]}]},{"pos":[56623,56633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"FileName","pos":[56635,56643]},{"pos":[56652,56664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56670,56686],"content":"Method fitToPage","linkify":"Method fitToPage","nodes":[{"content":"Method fitToPage","pos":[0,16]}]},{"pos":[56738,56748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fit","pos":[56750,56753]},{"pos":[56762,56774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56780,56793],"content":"Method format","linkify":"Method format","nodes":[{"content":"Method format","pos":[0,13]}]},{"pos":[56853,56863],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"format","pos":[56865,56871]},{"pos":[56880,56892],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56898,56909],"content":"Method from","linkify":"Method from","nodes":[{"content":"Method from","pos":[0,11]}]},{"pos":[56953,56963],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fromPage","pos":[56965,56973]},{"pos":[56982,56994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57000,57018],"content":"Method getFacename","linkify":"Method getFacename","nodes":[{"content":"Method getFacename","pos":[0,18]}]},{"pos":[57065,57075],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[57077,57083]},{"pos":[57092,57104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57110,57132],"content":"Method getFacenameInfo","linkify":"Method getFacenameInfo","nodes":[{"content":"Method getFacenameInfo","pos":[0,22]}]},{"pos":[57183,57193],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[57195,57201]},{"pos":[57210,57222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57228,57246],"content":"Method getFontInfo","linkify":"Method getFontInfo","nodes":[{"content":"Method getFontInfo","pos":[0,18]}]},{"pos":[57298,57308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fontName","pos":[57310,57318]},{"pos":[57327,57339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57345,57371],"content":"Method getGlyphWidthsArray","linkify":"Method getGlyphWidthsArray","nodes":[{"content":"Method getGlyphWidthsArray","pos":[0,26]}]},{"pos":[57459,57469],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fontName","pos":[57471,57479]},{"content":"firstChar","pos":[57493,57502]},{"content":"lastChar","pos":[57516,57524]},{"pos":[57533,57545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57551,57583],"content":"Method getNumberOfClientPrinters","linkify":"Method getNumberOfClientPrinters","nodes":[{"content":"Method getNumberOfClientPrinters","pos":[0,32]}]},{"pos":[57634,57646],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57652,57679],"content":"Method getNumberOfFacenames","linkify":"Method getNumberOfFacenames","nodes":[{"content":"Method getNumberOfFacenames","pos":[0,27]}]},{"pos":[57725,57737],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57743,57769],"content":"Method getNumberOfPrinters","linkify":"Method getNumberOfPrinters","nodes":[{"content":"Method getNumberOfPrinters","pos":[0,26]}]},{"content":"Returns the number of printers that are set up on the computer.","pos":[57771,57834]},{"pos":[57879,57891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of printers that are set up on the computer.","pos":[57893,57948]},{"pos":[57954,57986],"content":"Method getNumberOfServerPrinters","linkify":"Method getNumberOfServerPrinters","nodes":[{"content":"Method getNumberOfServerPrinters","pos":[0,32]}]},{"pos":[58037,58049],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[58055,58078],"content":"Method getNumberOfTrays","linkify":"Method getNumberOfTrays","nodes":[{"content":"Method getNumberOfTrays","pos":[0,23]}]},{"pos":[58120,58132],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[58138,58155],"content":"Method getPrinter","linkify":"Method getPrinter","nodes":[{"content":"Method getPrinter","pos":[0,17]}]},{"content":"Gets the deviceName of a printer.","pos":[58157,58190]},{"pos":[58236,58246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[58248,58254]},{"content":"A value between 1 and the number of available printers.","pos":[58257,58312]},{"pos":[58319,58331],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The deviceName of the given printer number.","pos":[58333,58376]},{"pos":[58383,58391],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[58614,58629],"content":"Method getRunOn","linkify":"Method getRunOn","nodes":[{"content":"Method getRunOn","pos":[0,15]}]},{"pos":[58682,58692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[58694,58700]},{"pos":[58709,58721],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[58727,58743],"content":"Method getTarget","linkify":"Method getTarget","nodes":[{"content":"Method getTarget","pos":[0,16]}]},{"pos":[58786,58798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[58804,58818],"content":"Method getTray","linkify":"Method getTray","nodes":[{"content":"Method getTray","pos":[0,14]}]},{"pos":[58861,58871],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[58873,58879]},{"pos":[58888,58900],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[58906,58924],"content":"Method getTrayName","linkify":"Method getTrayName","nodes":[{"content":"Method getTrayName","pos":[0,18]}]},{"pos":[58971,58981],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[58983,58989]},{"pos":[58998,59010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59016,59026],"content":"Method hDC","linkify":"Method hDC","nodes":[{"content":"Method hDC","pos":[0,10]}]},{"pos":[59057,59069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59075,59107],"content":"Method lockDestinationProperties","linkify":"Method lockDestinationProperties","nodes":[{"content":"Method lockDestinationProperties","pos":[0,32]}]},{"pos":[59176,59186],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"warn","pos":[59188,59192]},{"pos":[59201,59213],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59219,59232],"content":"Method mailCc","linkify":"Method mailCc","nodes":[{"content":"Method mailCc","pos":[0,13]}]},{"pos":[59276,59286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"MailCc","pos":[59288,59294]},{"pos":[59303,59315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59321,59339],"content":"Method mailSubject","linkify":"Method mailSubject","nodes":[{"content":"Method mailSubject","pos":[0,18]}]},{"pos":[59393,59403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"MailSubject","pos":[59405,59416]},{"pos":[59425,59437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59443,59456],"content":"Method mailTo","linkify":"Method mailTo","nodes":[{"content":"Method mailTo","pos":[0,13]}]},{"pos":[59500,59510],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"MailTo","pos":[59512,59518]},{"pos":[59527,59539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59545,59576],"content":"Method numberOfCopyDescriptions","linkify":"Method numberOfCopyDescriptions","nodes":[{"content":"Method numberOfCopyDescriptions","pos":[0,31]}]},{"pos":[59636,59646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"number","pos":[59648,59654]},{"pos":[59663,59675],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59681,59702],"content":"Method outputToClient","linkify":"Method outputToClient","nodes":[{"content":"Method outputToClient","pos":[0,21]}]},{"pos":[59764,59774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"toClient","pos":[59776,59784]},{"pos":[59793,59805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59811,59833],"content":"Method outputToPrnFile","linkify":"Method outputToPrnFile","nodes":[{"content":"Method outputToPrnFile","pos":[0,22]}]},{"pos":[59900,59910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"writePrnFile","pos":[59912,59924]},{"pos":[59933,59945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59951,59981],"content":"Method packNamesAndPrinterData","linkify":"Method packNamesAndPrinterData","nodes":[{"content":"Method packNamesAndPrinterData","pos":[0,30]}]},{"pos":[60036,60048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60054,60077],"content":"Method packPageSettings","linkify":"Method packPageSettings","nodes":[{"content":"Method packPageSettings","pos":[0,23]}]},{"content":"Stores the data that is selected during page formatting in a container.","pos":[60079,60150]},{"pos":[60198,60210],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that holds data that is selected during page formatting.","pos":[60212,60280]},{"pos":[60287,60294],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned container can be used as input to the unpackPageSettings method.","pos":[60296,60373]},{"pos":[60379,60405],"content":"Method packPrinterSettings","linkify":"Method packPrinterSettings","nodes":[{"content":"Method packPrinterSettings","pos":[0,26]}]},{"pos":[60456,60468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60474,60501],"content":"Method packPrintJobSettings","linkify":"Method packPrintJobSettings","nodes":[{"content":"Method packPrintJobSettings","pos":[0,27]}]},{"pos":[60553,60565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60571,60598],"content":"Method packSubtotalSettings","linkify":"Method packSubtotalSettings","nodes":[{"content":"Method packSubtotalSettings","pos":[0,27]}]},{"pos":[60650,60662],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60668,60688],"content":"Method pageCopy2Tray","linkify":"Method pageCopy2Tray","nodes":[{"content":"Method pageCopy2Tray","pos":[0,20]}]},{"pos":[60759,60769],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pageNumber","pos":[60771,60781]},{"content":"copyNumber","pos":[60795,60805]},{"pos":[60814,60826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60832,60853],"content":"Method pageFormatting","linkify":"Method pageFormatting","nodes":[{"content":"Method pageFormatting","pos":[0,21]}]},{"pos":[60897,60909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60915,60938],"content":"Method paperOrientation","linkify":"Method paperOrientation","nodes":[{"content":"Method paperOrientation","pos":[0,23]}]},{"pos":[61027,61037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"orientation","pos":[61039,61050]},{"pos":[61059,61071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61077,61093],"content":"Method paperTray","linkify":"Method paperTray","nodes":[{"content":"Method paperTray","pos":[0,16]}]},{"pos":[61138,61148],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tray","pos":[61150,61154]},{"pos":[61163,61175],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61181,61200],"content":"Method paperTrayRaw","linkify":"Method paperTrayRaw","nodes":[{"content":"Method paperTrayRaw","pos":[0,19]}]},{"pos":[61248,61258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tray","pos":[61260,61264]},{"pos":[61273,61285],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61291,61313],"content":"Method performanceTest","linkify":"Method performanceTest","nodes":[{"content":"Method performanceTest","pos":[0,22]}]},{"pos":[61365,61375],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"loops","pos":[61377,61382]},{"pos":[61391,61403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61409,61435],"content":"Method preferredFileFormat","linkify":"Method preferredFileFormat","nodes":[{"content":"Method preferredFileFormat","pos":[0,26]}]},{"pos":[61508,61518],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"format","pos":[61520,61526]},{"pos":[61535,61547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61553,61579],"content":"Method preferredMailFormat","linkify":"Method preferredMailFormat","nodes":[{"content":"Method preferredMailFormat","pos":[0,26]}]},{"pos":[61652,61662],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"format","pos":[61664,61670]},{"pos":[61679,61691],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61697,61724],"content":"Method preferredOrientation","linkify":"Method preferredOrientation","nodes":[{"content":"Method preferredOrientation","pos":[0,27]}]},{"pos":[61817,61827],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"orientation","pos":[61829,61840]},{"pos":[61849,61861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61867,61889],"content":"Method preferredTarget","linkify":"Method preferredTarget","nodes":[{"content":"Method preferredTarget","pos":[0,22]}]},{"pos":[61958,61968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"target","pos":[61970,61976]},{"pos":[61985,61997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62003,62027],"content":"Method printerAttributes","linkify":"Method printerAttributes","nodes":[{"content":"Method printerAttributes","pos":[0,24]}]},{"pos":[62070,62082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62088,62112],"content":"Method printerAveragePPM","linkify":"Method printerAveragePPM","nodes":[{"content":"Method printerAveragePPM","pos":[0,24]}]},{"pos":[62155,62167],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62173,62194],"content":"Method printerComment","linkify":"Method printerComment","nodes":[{"content":"Method printerComment","pos":[0,21]}]},{"pos":[62234,62246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62252,62274],"content":"Method printerDatatype","linkify":"Method printerDatatype","nodes":[{"content":"Method printerDatatype","pos":[0,22]}]},{"pos":[62315,62327],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62333,62362],"content":"Method printerDefaultPriority","linkify":"Method printerDefaultPriority","nodes":[{"content":"Method printerDefaultPriority","pos":[0,29]}]},{"pos":[62410,62422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62428,62452],"content":"Method printerDriverName","linkify":"Method printerDriverName","nodes":[{"content":"Method printerDriverName","pos":[0,24]}]},{"pos":[62495,62507],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62513,62535],"content":"Method printerLocation","linkify":"Method printerLocation","nodes":[{"content":"Method printerLocation","pos":[0,22]}]},{"pos":[62576,62588],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62594,62618],"content":"Method printerPageHeight","linkify":"Method printerPageHeight","nodes":[{"content":"Method printerPageHeight","pos":[0,24]}]},{"pos":[62661,62673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62679,62702],"content":"Method printerPageWidth","linkify":"Method printerPageWidth","nodes":[{"content":"Method printerPageWidth","pos":[0,23]}]},{"pos":[62744,62756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62762,62781],"content":"Method printerPaper","linkify":"Method printerPaper","nodes":[{"content":"Method printerPaper","pos":[0,19]}]},{"pos":[62819,62831],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62837,62861],"content":"Method printerParameters","linkify":"Method printerParameters","nodes":[{"content":"Method printerParameters","pos":[0,24]}]},{"pos":[62904,62916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62922,62944],"content":"Method printerPortName","linkify":"Method printerPortName","nodes":[{"content":"Method printerPortName","pos":[0,22]}]},{"pos":[62985,62997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63003,63028],"content":"Method printerPrinterName","linkify":"Method printerPrinterName","nodes":[{"content":"Method printerPrinterName","pos":[0,25]}]},{"pos":[63072,63084],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63090,63118],"content":"Method printerPrintProcessor","linkify":"Method printerPrintProcessor","nodes":[{"content":"Method printerPrintProcessor","pos":[0,28]}]},{"pos":[63165,63177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63183,63205],"content":"Method printerPriority","linkify":"Method printerPriority","nodes":[{"content":"Method printerPriority","pos":[0,22]}]},{"pos":[63246,63258],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63264,63288],"content":"Method printerQueuedJobs","linkify":"Method printerQueuedJobs","nodes":[{"content":"Method printerQueuedJobs","pos":[0,24]}]},{"pos":[63331,63343],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63349,63368],"content":"Method printerRunOn","linkify":"Method printerRunOn","nodes":[{"content":"Method printerRunOn","pos":[0,19]}]},{"pos":[63415,63427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63433,63454],"content":"Method printerSepFile","linkify":"Method printerSepFile","nodes":[{"content":"Method printerSepFile","pos":[0,21]}]},{"pos":[63494,63506],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63512,63536],"content":"Method printerServerName","linkify":"Method printerServerName","nodes":[{"content":"Method printerServerName","pos":[0,24]}]},{"pos":[63579,63591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63597,63619],"content":"Method printerSettings","linkify":"Method printerSettings","nodes":[{"content":"Method printerSettings","pos":[0,22]}]},{"pos":[63729,63739],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formName","pos":[63741,63749]},{"content":"args","pos":[63763,63767]},{"content":"reportRun","pos":[63781,63790]},{"content":"showWhat","pos":[63804,63812]},{"pos":[63821,63833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63839,63862],"content":"Method printerShareName","linkify":"Method printerShareName","nodes":[{"content":"Method printerShareName","pos":[0,23]}]},{"pos":[63904,63916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63922,63945],"content":"Method printerStartTime","linkify":"Method printerStartTime","nodes":[{"content":"Method printerStartTime","pos":[0,23]}]},{"pos":[63993,64005],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64011,64031],"content":"Method printerStatus","linkify":"Method printerStatus","nodes":[{"content":"Method printerStatus","pos":[0,20]}]},{"pos":[64070,64082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64088,64111],"content":"Method printerUntilTime","linkify":"Method printerUntilTime","nodes":[{"content":"Method printerUntilTime","pos":[0,23]}]},{"pos":[64159,64171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64177,64193],"content":"Method reportRun","linkify":"Method reportRun","nodes":[{"content":"Method reportRun","pos":[0,16]}]},{"pos":[64234,64246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64252,64278],"content":"Method requestedDeviceName","linkify":"Method requestedDeviceName","nodes":[{"content":"Method requestedDeviceName","pos":[0,26]}]},{"pos":[64323,64335],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64341,64362],"content":"Method requestedRunOn","linkify":"Method requestedRunOn","nodes":[{"content":"Method requestedRunOn","pos":[0,21]}]},{"pos":[64411,64423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64429,64445],"content":"Method runClient","linkify":"Method runClient","nodes":[{"content":"Method runClient","pos":[0,16]}]},{"pos":[64484,64496],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64502,64518],"content":"Method runServer","linkify":"Method runServer","nodes":[{"content":"Method runServer","pos":[0,16]}]},{"pos":[64557,64569],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64575,64597],"content":"Method sectionsPerPage","linkify":"Method sectionsPerPage","nodes":[{"content":"Method sectionsPerPage","pos":[0,22]}]},{"pos":[64659,64669],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sectionsPerPage","pos":[64671,64686]},{"pos":[64695,64707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64713,64729],"content":"Method setTarget","linkify":"Method setTarget","nodes":[{"content":"Method setTarget","pos":[0,16]}]},{"content":"Sets the print medium.","pos":[64731,64753]},{"pos":[64814,64824],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"target","pos":[64826,64832]},{"content":"The print medium.","pos":[64835,64852]},{"pos":[64859,64871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The print medium.","pos":[64873,64890]},{"pos":[64896,64918],"content":"Method singleLargePage","linkify":"Method singleLargePage","nodes":[{"content":"Method singleLargePage","pos":[0,22]}]},{"pos":[64988,64998],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"singleLargePage","pos":[65000,65015]},{"pos":[65024,65036],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65042,65065],"content":"Method skipBitmapsInRTF","linkify":"Method skipBitmapsInRTF","nodes":[{"content":"Method skipBitmapsInRTF","pos":[0,23]}]},{"content":"Controls whether bitmaps are included when reports are printed to an .rtf file.","pos":[65067,65146]},{"pos":[65213,65223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"skipBitmaps","pos":[65225,65236]},{"content":"A boolean flag that determines whether bitmaps are included; optional.","pos":[65239,65309]},{"pos":[65316,65328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the bitmaps are included; otherwise, false.","pos":[65330,65381]},{"pos":[65387,65413],"content":"Method storeInPrintArchive","linkify":"Method storeInPrintArchive","nodes":[{"content":"Method storeInPrintArchive","pos":[0,26]}]},{"pos":[65477,65487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"store","pos":[65489,65494]},{"pos":[65503,65515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65521,65550],"content":"Method suppressScalingMessage","linkify":"Method suppressScalingMessage","nodes":[{"content":"Method suppressScalingMessage","pos":[0,29]}]},{"pos":[65620,65630],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"suppress","pos":[65632,65640]},{"pos":[65649,65661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65667,65676],"content":"Method to","linkify":"Method to","nodes":[{"content":"Method to","pos":[0,9]}]},{"pos":[65716,65726],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"toPage","pos":[65728,65734]},{"pos":[65743,65755],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[65761,65776],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that represents the current object.","pos":[65778,65830]},{"pos":[65864,65876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that represents the current object.","pos":[65878,65922]},{"pos":[65929,65936],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation returns the class name of the object.","pos":[65938,66002]},{"content":"The method can be overridden in a derived class to return values that are meaningful for that type.For example, an instance of the class returns the method name and type of the method, such as instance or static.","pos":[66003,66215]},{"pos":[66221,66246],"content":"Method unpackPageSettings","linkify":"Method unpackPageSettings","nodes":[{"content":"Method unpackPageSettings","pos":[0,25]}]},{"content":"Sets the page settings, such as paper size and orientation.","pos":[66248,66307]},{"pos":[66373,66383],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"settings","pos":[66385,66393]},{"content":"A container that is obtained by calling the packPageSettings method.","pos":[66396,66464]},{"pos":[66471,66483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the pageSettings were successfully changed; false if the pageSettings were set to the default values.","pos":[66485,66594]},{"pos":[66601,66608],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The classes reportDesign and report have a method with the same name.","pos":[66610,66679]},{"pos":[66685,66713],"content":"Method unpackPrinterSettings","linkify":"Method unpackPrinterSettings","nodes":[{"content":"Method unpackPrinterSettings","pos":[0,28]}]},{"pos":[66782,66792],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"settings","pos":[66794,66802]},{"pos":[66811,66823],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66829,66858],"content":"Method unpackPrintJobSettings","linkify":"Method unpackPrintJobSettings","nodes":[{"content":"Method unpackPrintJobSettings","pos":[0,29]}]},{"pos":[66928,66938],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"settings","pos":[66940,66948]},{"pos":[66957,66969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[66975,67004],"content":"Method unpackSubtotalSettings","linkify":"Method unpackSubtotalSettings","nodes":[{"content":"Method unpackSubtotalSettings","pos":[0,29]}]},{"pos":[67074,67084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"settings","pos":[67086,67094]},{"pos":[67103,67115],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67121,67145],"content":"Method unprintableBottom","linkify":"Method unprintableBottom","nodes":[{"content":"Method unprintableBottom","pos":[0,24]}]},{"pos":[67188,67200],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67206,67228],"content":"Method unprintableLeft","linkify":"Method unprintableLeft","nodes":[{"content":"Method unprintableLeft","pos":[0,22]}]},{"pos":[67269,67281],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67287,67310],"content":"Method unprintableRight","linkify":"Method unprintableRight","nodes":[{"content":"Method unprintableRight","pos":[0,23]}]},{"pos":[67352,67364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67370,67391],"content":"Method unprintableTop","linkify":"Method unprintableTop","nodes":[{"content":"Method unprintableTop","pos":[0,21]}]},{"content":"Indicates the distance from the top of the paper to the printable area of the paper.","pos":[67393,67477]},{"pos":[67517,67529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The size of nonprintable area, measured in hundredths of a millimeter.","pos":[67531,67601]},{"pos":[67608,67615],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In reports, the topMargin of a reportDesign must not be less than unprintableTop.","pos":[67617,67698]},{"pos":[67705,67713],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[68651,68668],"content":"Method viewerType","linkify":"Method viewerType","nodes":[{"content":"Method viewerType","pos":[0,17]}]},{"pos":[68748,68758],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[68760,68764]},{"pos":[68773,68785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68791,68815],"content":"Method virtualPageHeight","linkify":"Method virtualPageHeight","nodes":[{"content":"Method virtualPageHeight","pos":[0,24]}]},{"pos":[68870,68880],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"height","pos":[68882,68888]},{"pos":[68897,68909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68915,68938],"content":"Method warnIfFileExists","linkify":"Method warnIfFileExists","nodes":[{"content":"Method warnIfFileExists","pos":[0,23]}]},{"pos":[68998,69008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"warn","pos":[69010,69014]},{"pos":[69023,69035],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69041,69058],"content":"Method enableBody","linkify":"Method enableBody","nodes":[{"content":"Method enableBody","pos":[0,17]}]},{"pos":[69112,69122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[69124,69131]},{"pos":[69139,69149],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[69151,69198]},{"pos":[69268,69278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Settings","pos":[69280,69288]},{"content":"infoOnly","pos":[69302,69310]},{"pos":[69318,69340],"content":"Method addTrayPageCopy","linkify":"Method addTrayPageCopy","nodes":[{"content":"Method addTrayPageCopy","pos":[0,22]}]},{"pos":[69424,69434],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tray","pos":[69436,69440]},{"content":"pageNumber","pos":[69454,69464]},{"content":"copyNumber","pos":[69478,69488]},{"pos":[69496,69514],"content":"Method disableBody","linkify":"Method disableBody","nodes":[{"content":"Method disableBody","pos":[0,18]}]},{"pos":[69569,69579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"tableId","pos":[69581,69588]},{"pos":[69596,69620],"content":"Method clearTrayPageCopy","linkify":"Method clearTrayPageCopy","nodes":[{"content":"Method clearTrayPageCopy","pos":[0,24]}]},{"pos":[69663,69679],"content":"Method rulerInch","linkify":"Method rulerInch","nodes":[{"content":"Method rulerInch","pos":[0,16]}]},{"pos":[69714,69729],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[69763,69778],"content":"Method rulerOff","linkify":"Method rulerOff","nodes":[{"content":"Method rulerOff","pos":[0,15]}]},{"pos":[69812,69830],"content":"Method rulerMetric","linkify":"Method rulerMetric","nodes":[{"content":"Method rulerMetric","pos":[0,18]}]},{"pos":[69866,69880],"content":"Class profiler","linkify":"Class profiler","nodes":[{"content":"Class profiler","pos":[0,14]}]},{"pos":[69920,69927],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[69933,69941],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[69947,69954],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[69958,69964]},{"content":"Description","pos":[70408,70419]},{"content":"public int collected()","pos":[70972,70994]},{"content":"public int flushInterval(<ph id=\"ph1\">\\[</ph>int interval<ph id=\"ph2\">\\]</ph>)","pos":[71479,71521],"source":"public int flushInterval(\\[int interval\\])"},{"content":"public AnyType profileOff()","pos":[71986,72013]},{"content":"public AnyType profileOn(str runId, <ph id=\"ph1\">\\[</ph>int traceDepth<ph id=\"ph2\">\\]</ph>)","pos":[72493,72548],"source":"public AnyType profileOn(str runId, \\[int traceDepth\\])"},{"content":"public str tempPath()","pos":[73000,73021]},{"content":"public str toString()","pos":[73507,73528]},{"content":"Returns a string that represents the current object.","pos":[73957,74009]},{"content":"::public static AnyType profilerAlreadyOn()","pos":[74014,74057]},{"content":"public void flush()","pos":[74521,74540]},{"content":"public void new()","pos":[75028,75045]},{"content":"Initializes a new instance of the profiler class.","pos":[75478,75527]},{"content":"public void flushData(int lineNumber, str path, int microSecs, int sequenceNumber, int parentSequenceNumber, int selectCalls, int selectBytes, int selectRows, int sqlWaitTime, int aosWaitTime, int sqlInserts, int sqlUpdates, int sqlDeletes, int aosInCalls, int aosOutCalls, int aosInBytes, int aosOutBytes, <ph id=\"ph1\">\\[</ph>int sqlInsertBytes<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int sqlInsertRows<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int sqlUpdateBytes<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>int sqlUpdateRows<ph id=\"ph8\">\\]</ph>, <ph id=\"ph9\">\\[</ph>int sqlDeleteBytes<ph id=\"ph10\">\\]</ph>, <ph id=\"ph11\">\\[</ph>int sqlDeleteRows<ph id=\"ph12\">\\]</ph>)","pos":[75535,75982],"source":"public void flushData(int lineNumber, str path, int microSecs, int sequenceNumber, int parentSequenceNumber, int selectCalls, int selectBytes, int selectRows, int sqlWaitTime, int aosWaitTime, int sqlInserts, int sqlUpdates, int sqlDeletes, int aosInCalls, int aosOutCalls, int aosInBytes, int aosOutBytes, \\[int sqlInsertBytes\\], \\[int sqlInsertRows\\], \\[int sqlUpdateBytes\\], \\[int sqlUpdateRows\\], \\[int sqlDeleteBytes\\], \\[int sqlDeleteRows\\])"},{"pos":[76045,76061],"content":"Method collected","linkify":"Method collected","nodes":[{"content":"Method collected","pos":[0,16]}]},{"pos":[76096,76108],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76114,76134],"content":"Method flushInterval","linkify":"Method flushInterval","nodes":[{"content":"Method flushInterval","pos":[0,20]}]},{"pos":[76187,76197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"interval","pos":[76199,76207]},{"pos":[76216,76228],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76234,76251],"content":"Method profileOff","linkify":"Method profileOff","nodes":[{"content":"Method profileOff","pos":[0,17]}]},{"pos":[76291,76303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76309,76325],"content":"Method profileOn","linkify":"Method profileOn","nodes":[{"content":"Method profileOn","pos":[0,16]}]},{"pos":[76391,76401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"runId","pos":[76403,76408]},{"content":"traceDepth","pos":[76422,76432]},{"pos":[76441,76453],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76459,76474],"content":"Method tempPath","linkify":"Method tempPath","nodes":[{"content":"Method tempPath","pos":[0,15]}]},{"pos":[76508,76520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76526,76541],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that represents the current object.","pos":[76543,76595]},{"pos":[76629,76641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that represents the current object.","pos":[76643,76687]},{"pos":[76694,76701],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation returns the class name of the object.","pos":[76703,76767]},{"content":"The method can be overridden in a derived class to return values that are meaningful for that type.For example, an instance of the class returns the method name and type of the method, such as instance or static.","pos":[76768,76980]},{"pos":[76986,77010],"content":"Method profilerAlreadyOn","linkify":"Method profilerAlreadyOn","nodes":[{"content":"Method profilerAlreadyOn","pos":[0,24]}]},{"pos":[77064,77076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[77082,77094],"content":"Method flush","linkify":"Method flush","nodes":[{"content":"Method flush","pos":[0,12]}]},{"pos":[77125,77135],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the profiler class.","pos":[77137,77186]},{"pos":[77215,77231],"content":"Method flushData","linkify":"Method flushData","nodes":[{"content":"Method flushData","pos":[0,16]}]},{"pos":[77679,77689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNumber","pos":[77691,77701]},{"content":"path","pos":[77715,77719]},{"content":"microSecs","pos":[77733,77742]},{"content":"sequenceNumber","pos":[77756,77770]},{"content":"parentSequenceNumber","pos":[77784,77804]},{"content":"selectCalls","pos":[77818,77829]},{"content":"selectBytes","pos":[77843,77854]},{"content":"selectRows","pos":[77868,77878]},{"content":"sqlWaitTime","pos":[77892,77903]},{"content":"aosWaitTime","pos":[77917,77928]},{"content":"sqlInserts","pos":[77942,77952]},{"content":"sqlUpdates","pos":[77966,77976]},{"content":"sqlDeletes","pos":[77990,78000]},{"content":"aosInCalls","pos":[78014,78024]},{"content":"aosOutCalls","pos":[78038,78049]},{"content":"aosInBytes","pos":[78063,78073]},{"content":"aosOutBytes","pos":[78087,78098]},{"content":"sqlInsertBytes","pos":[78112,78126]},{"content":"sqlInsertRows","pos":[78140,78153]},{"content":"sqlUpdateBytes","pos":[78167,78181]},{"content":"sqlUpdateRows","pos":[78195,78208]},{"content":"sqlDeleteBytes","pos":[78222,78236]},{"content":"sqlDeleteRows","pos":[78250,78263]},{"pos":[78270,78290],"content":"Class ProgressWindow","linkify":"Class ProgressWindow","nodes":[{"content":"Class ProgressWindow","pos":[0,20]}]},{"pos":[78336,78343],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[78349,78357],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[78363,78370],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[78374,78380]},{"content":"Description","pos":[78436,78447]},{"content":"public int addProgressControl(<ph id=\"ph1\">\\[</ph>int progressControlCount<ph id=\"ph2\">\\]</ph>)","pos":[78618,78677],"source":"public int addProgressControl(\\[int progressControlCount\\])"},{"content":"public void ProgressBarVisible(int index, int visible)","pos":[78740,78794]},{"content":"public void ProgressValue(int index, int progressValue)","pos":[78862,78917]},{"content":"public void ControlMinMax(int index, int min, int max)","pos":[78984,79038]},{"content":"public void ProgressTextVisible(int index, int visible)","pos":[79106,79161]},{"content":"public void Animation(str animation)","pos":[79228,79264]},{"content":"public void ControlText(int index, str text)","pos":[79350,79394]},{"content":"public void FormCaption(str text)","pos":[79472,79505]},{"content":"public void ControlTime(str text)","pos":[79594,79627]},{"content":"public void finalize()","pos":[79716,79738]},{"content":"public void new()","pos":[79838,79855]},{"content":"Initializes a new instance of the ProgressWindow class.","pos":[79900,79955]},{"pos":[79963,79988],"content":"Method addProgressControl","linkify":"Method addProgressControl","nodes":[{"content":"Method addProgressControl","pos":[0,25]}]},{"pos":[80058,80068],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"progressControlCount","pos":[80070,80090]},{"pos":[80099,80111],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80117,80142],"content":"Method ProgressBarVisible","linkify":"Method ProgressBarVisible","nodes":[{"content":"Method ProgressBarVisible","pos":[0,25]}]},{"pos":[80209,80219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[80221,80226]},{"content":"visible","pos":[80240,80247]},{"pos":[80255,80275],"content":"Method ProgressValue","linkify":"Method ProgressValue","nodes":[{"content":"Method ProgressValue","pos":[0,20]}]},{"pos":[80343,80353],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[80355,80360]},{"content":"progressValue","pos":[80374,80387]},{"pos":[80395,80415],"content":"Method ControlMinMax","linkify":"Method ControlMinMax","nodes":[{"content":"Method ControlMinMax","pos":[0,20]}]},{"pos":[80482,80492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[80494,80499]},{"content":"min","pos":[80513,80516]},{"content":"max","pos":[80530,80533]},{"pos":[80541,80567],"content":"Method ProgressTextVisible","linkify":"Method ProgressTextVisible","nodes":[{"content":"Method ProgressTextVisible","pos":[0,26]}]},{"pos":[80635,80645],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[80647,80652]},{"content":"visible","pos":[80666,80673]},{"pos":[80681,80697],"content":"Method Animation","linkify":"Method Animation","nodes":[{"content":"Method Animation","pos":[0,16]}]},{"pos":[80746,80756],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"animation","pos":[80758,80767]},{"pos":[80775,80793],"content":"Method ControlText","linkify":"Method ControlText","nodes":[{"content":"Method ControlText","pos":[0,18]}]},{"pos":[80850,80860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[80862,80867]},{"content":"text","pos":[80881,80885]},{"pos":[80893,80911],"content":"Method FormCaption","linkify":"Method FormCaption","nodes":[{"content":"Method FormCaption","pos":[0,18]}]},{"pos":[80957,80967],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"text","pos":[80969,80973]},{"pos":[80981,80999],"content":"Method ControlTime","linkify":"Method ControlTime","nodes":[{"content":"Method ControlTime","pos":[0,18]}]},{"pos":[81045,81055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"text","pos":[81057,81061]},{"pos":[81069,81084],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[81118,81128],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the ProgressWindow class.","pos":[81130,81185]},{"pos":[81213,81235],"content":"Class ProjectGroupNode","linkify":"Class ProjectGroupNode","nodes":[{"content":"Class ProjectGroupNode","pos":[0,22]}]},{"content":"The ProjectGroupNode class represents a group node within a project.","pos":[81281,81349]},{"pos":[81355,81362],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class enables you to create, read, update, and delete X++ code and metadata.","pos":[81364,81445]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before you call this API.","pos":[81446,81555]},{"pos":[81561,81569],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[81575,81582],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[81586,81592]},{"content":"Description","pos":[81681,81692]},{"content":"public TreeNode findGroupMember(str name, UtilElementType type, <ph id=\"ph1\">\\[</ph>boolean searchSubgroups<ph id=\"ph2\">\\]</ph>)","pos":[82068,82160],"source":"public TreeNode findGroupMember(str name, UtilElementType type, \\[boolean searchSubgroups\\])"},{"content":"Searches the projectGroup for a specific element.","pos":[82163,82212]},{"content":"It can be used to search a specific group or the whole project.","pos":[82213,82276]},{"content":"public str groupMask(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[82309,82344],"source":"public str groupMask(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[82550,82580],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[82645,82787]},{"content":"public boolean preventEditProperties(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[82792,82847],"source":"public boolean preventEditProperties(\\[boolean value\\])"},{"content":"public GroupNodeType projectGroupType(<ph id=\"ph1\">\\[</ph>GroupNodeType value<ph id=\"ph2\">\\]</ph>)","pos":[83033,83095],"source":"public GroupNodeType projectGroupType(\\[GroupNodeType value\\])"},{"content":"public void addUtilNode(UtilElementType type, str name)","pos":[83274,83329]},{"content":"Adds a node to the projectGroup.","pos":[83369,83401]},{"content":"public void addNode(TreeNode node)","pos":[83515,83549]},{"content":"Adds an existing node to the projectGroup.","pos":[83610,83652]},{"pos":[83759,83781],"content":"Method findGroupMember","linkify":"Method findGroupMember","nodes":[{"content":"Method findGroupMember","pos":[0,22]}]},{"content":"Searches the projectGroup for a specific element.","pos":[83783,83832]},{"content":"It can be used to search a specific group or the whole project.","pos":[83833,83896]},{"pos":[83999,84009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[84011,84015]},{"content":"A boolean flag that determines whether the search should be recursive (whether to search subprojects); optional.","pos":[84018,84130]},{"content":"type","pos":[84142,84146]},{"content":"A boolean flag that determines whether the search should be recursive (whether to search subprojects); optional.","pos":[84149,84261]},{"content":"searchSubgroups","pos":[84273,84288]},{"content":"A boolean flag that determines whether the search should be recursive (whether to search subprojects); optional.","pos":[84291,84403]},{"pos":[84410,84422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The first object that fits the criteria; returns nullNothingnullptrunita null reference (Nothing in Visual Basic) if no object is found.","pos":[84424,84560]},{"pos":[84567,84574],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is also found on ProjectNode.","pos":[84576,84617]},{"pos":[84623,84639],"content":"Method groupMask","linkify":"Method groupMask","nodes":[{"content":"Method groupMask","pos":[0,16]}]},{"pos":[84685,84695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84697,84702]},{"pos":[84711,84723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84729,84740],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[84742,84884]},{"pos":[84925,84935],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84937,84942]},{"pos":[84951,84963],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[84965,85033]},{"pos":[85040,85047],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[85049,85143]},{"content":"Begins with a letter.","pos":[85149,85170]},{"content":"Doesn't exceed 250 characters.","pos":[85175,85205]},{"content":"Can include numbers and underscore characters.","pos":[85210,85256]},{"content":"Cannot include punctuation or spaces.","pos":[85261,85298]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[85303,85421]},{"pos":[85427,85455],"content":"Method preventEditProperties","linkify":"Method preventEditProperties","nodes":[{"content":"Method preventEditProperties","pos":[0,28]}]},{"pos":[85521,85531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85533,85538]},{"pos":[85547,85559],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85565,85588],"content":"Method projectGroupType","linkify":"Method projectGroupType","nodes":[{"content":"Method projectGroupType","pos":[0,23]}]},{"pos":[85661,85671],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85673,85678]},{"pos":[85687,85699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85705,85723],"content":"Method addUtilNode","linkify":"Method addUtilNode","nodes":[{"content":"Method addUtilNode","pos":[0,18]}]},{"content":"Adds a node to the projectGroup.","pos":[85725,85757]},{"pos":[85825,85835],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[85837,85841]},{"content":"The name of the node.","pos":[85844,85865]},{"content":"name","pos":[85877,85881]},{"content":"The name of the node.","pos":[85884,85905]},{"pos":[85912,85919],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method also is found on the ProjectNode class.","pos":[85921,85972]},{"pos":[85978,85992],"content":"Method addNode","linkify":"Method addNode","nodes":[{"content":"Method addNode","pos":[0,14]}]},{"content":"Adds an existing node to the projectGroup.","pos":[85994,86036]},{"pos":[86083,86093],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[86095,86099]},{"content":"The node to add.","pos":[86102,86118]},{"pos":[86123,86144],"content":"Class ProjectListNode","linkify":"Class ProjectListNode","nodes":[{"content":"Class ProjectListNode","pos":[0,21]}]},{"content":"The ProjectListNode class corresponds to the Private and Shared lists of projects in the project overview window.","pos":[86189,86302]},{"content":"Use the ProjectListNode.addProject method to add a new project from X++ code.","pos":[86303,86380]},{"pos":[86386,86393],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class enables you to create, read, update, and delete X++ code and metadata.","pos":[86395,86476]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before calling this API.","pos":[86477,86585]},{"pos":[86591,86599],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[86605,86612],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[86616,86622]},{"content":"Description","pos":[86687,86698]},{"content":"public ProjectNode addProject(str projectName, <ph id=\"ph1\">\\[</ph>str projectClass<ph id=\"ph2\">\\]</ph>)","pos":[86830,86898],"source":"public ProjectNode addProject(str projectName, \\[str projectClass\\])"},{"content":"Adds a new project to the list.","pos":[86901,86932]},{"pos":[86940,86957],"content":"Method addProject","linkify":"Method addProject","nodes":[{"content":"Method addProject","pos":[0,17]}]},{"content":"Adds a new project to the list.","pos":[86959,86990]},{"pos":[87069,87079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"projectName","pos":[87081,87092]},{"content":"The name of the projecttype; optional.","pos":[87095,87133]},{"content":"This should be the name of a class associated with the project (see the setProjectClass method).","pos":[87134,87230]},{"content":"If no value is supplied, the project becomes a standard project.","pos":[87231,87295]},{"content":"projectClass","pos":[87307,87319]},{"content":"The name of the projecttype; optional.","pos":[87322,87360]},{"content":"This should be the name of a class associated with the project (see the setProjectClass method).","pos":[87361,87457]},{"content":"If no value is supplied, the project becomes a standard project.","pos":[87458,87522]},{"pos":[87529,87541],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The newly added projectNode.","pos":[87543,87571]},{"pos":[87576,87593],"content":"Class ProjectNode","linkify":"Class ProjectNode","nodes":[{"content":"Class ProjectNode","pos":[0,17]}]},{"content":"The ProjectNode class controls the behavior of an AOT project.","pos":[87634,87696]},{"pos":[87702,87709],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class enables you to create, read, update, and delete X++ code and metadata.","pos":[87711,87792]},{"content":"Create a new, user-defined AOT project by extending from this class.","pos":[87793,87861]},{"content":"Control the behavior of the project by overriding the methods of this class.","pos":[87862,87938]},{"content":"Create both Web projects and Help projects by creating classes that extend the ProjectNode class.","pos":[87939,88036]},{"pos":[88042,88050],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[88056,88063],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[88067,88073]},{"content":"Description","pos":[88162,88173]},{"content":"public str addContextMenuItems()","pos":[88549,88581]},{"content":"Adds a list of items to the shortcut menu of the project node.","pos":[88644,88706]},{"content":"public str changedBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[88790,88825],"source":"public str changedBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[88885,88959]},{"content":"public Date changedDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[89031,89070],"source":"public Date changedDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was last changed.","pos":[89126,89187]},{"content":"public str changedTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[89272,89309],"source":"public str changedTime(\\[str value\\])"},{"content":"Gets or sets the time an application object was last changed.","pos":[89367,89428]},{"content":"public str createdBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[89513,89548],"source":"public str createdBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who created the application object.","pos":[89608,89677]},{"content":"public Date creationDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[89754,89794],"source":"public Date creationDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was created.","pos":[89849,89905]},{"content":"public str creationTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[89995,90033],"source":"public str creationTime(\\[str value\\])"},{"content":"public str export(str buffer)","pos":[90236,90265]},{"content":"public TreeNode findGroupMember(str name, UtilElementType type, <ph id=\"ph1\">\\[</ph>boolean searchSubgroups<ph id=\"ph2\">\\]</ph>)","pos":[90477,90569],"source":"public TreeNode findGroupMember(str name, UtilElementType type, \\[boolean searchSubgroups\\])"},{"content":"Searches the project or group for a specific element.","pos":[90572,90625]},{"content":"public str getProjectClassName()","pos":[90718,90750]},{"content":"Returns the name of the class corresponding to the classid of the project.","pos":[90813,90887]},{"content":"public ProjectNode getRunNode()","pos":[90959,90990]},{"content":"Opens the project window and returns the root projectNode of that window, for a particular projectNode found in the project overview window.","pos":[91054,91194]},{"content":"public str import(str buffer)","pos":[91200,91229]},{"content":"public boolean isRunNode()","pos":[91441,91467]},{"content":"public ProjectNode loadForInspection()","pos":[91682,91720]},{"content":"Returns a loaded version of a projectNode found in the project overview window.","pos":[91777,91856]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[91923,91953],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[92018,92160]},{"content":"public Guid origin(<ph id=\"ph1\">\\[</ph>Guid value<ph id=\"ph2\">\\]</ph>)","pos":[92165,92199],"source":"public Guid origin(\\[Guid value\\])"},{"content":"public boolean removeFromProject(TreeNode node)","pos":[92406,92453]},{"content":"public str tooltipText(TreeNode node)","pos":[92647,92684]},{"content":"::public static str projectType()","pos":[92888,92921]},{"content":"public void lockUpdate()","pos":[93129,93153]},{"content":"Prevents visual updates while a series of actions is being performed.","pos":[93224,93293]},{"content":"public void addSpecialOverlayIcon(str path, int resId, <ph id=\"ph1\">\\[</ph>int xOffset<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int yOffset<ph id=\"ph4\">\\]</ph>)","pos":[93370,93458],"source":"public void addSpecialOverlayIcon(str path, int resId, \\[int xOffset\\], \\[int yOffset\\])"},{"content":"public void created(str name)","pos":[93611,93640]},{"content":"Enables the ability to perform custom actions on a project when a new instance of the project is created.","pos":[93706,93811]},{"content":"public void setSpecialIcon(int type, str name, int resId)","pos":[93852,93909]},{"content":"Assigns a different icon to a specific node in the project.","pos":[93947,94006]},{"content":"public void loadProject(str buffer)","pos":[94093,94128]},{"content":"Enables storing and retrieving custom data in the project definition when a project is loaded.","pos":[94188,94282]},{"content":"public void saveProject(str buffer)","pos":[94334,94369]},{"content":"Enables saving custom data together with the project in the application object database.","pos":[94429,94517]},{"content":"public void unlockUpdate()","pos":[94575,94601]},{"content":"Enables a visual update after a series of actions started with lockUpdate.","pos":[94670,94744]},{"content":"public void handleContextMenuItem(int id)","pos":[94816,94857]},{"content":"Handles a user selecting an item on the shortcut menu that has been defined by the corresponding method addContextMenuItems.","pos":[94911,95035]},{"content":"public void addNode(TreeNode node)","pos":[95057,95091]},{"content":"Adds an existing node to the project.","pos":[95152,95189]},{"content":"public void addUtilNode(UtilElementType type, str name)","pos":[95298,95353]},{"content":"Adds a node to the project.","pos":[95393,95420]},{"content":"public void clear()","pos":[95539,95558]},{"content":"Removes the contents of a project.","pos":[95634,95668]},{"content":"public void setProjectClass(int classid)","pos":[95780,95820]},{"content":"Assigns a class to the project, which gives the project the type that the class defines.","pos":[95875,95963]},{"content":"public void removeSpecialOverlayIcons(str path)","pos":[96021,96068]},{"content":"public void new()","pos":[96262,96279]},{"content":"Initializes a new instance of the ProjectNode class.","pos":[96357,96409]},{"pos":[96506,96532],"content":"Method addContextMenuItems","linkify":"Method addContextMenuItems","nodes":[{"content":"Method addContextMenuItems","pos":[0,26]}]},{"content":"Adds a list of items to the shortcut menu of the project node.","pos":[96534,96596]},{"pos":[96641,96653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A comma-separated list of the menu items to be added.","pos":[96655,96708]},{"pos":[96715,96722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Override this method to add a list of items to the shortcut menu of the project node.","pos":[96724,96809]},{"content":"When one of the added menu items is selected by a user, the handleContextMenuItem method is called.","pos":[96810,96909]},{"content":"Override this method to perform the appropriate action.","pos":[96910,96965]},{"pos":[96971,96987],"content":"Method changedBy","linkify":"Method changedBy","nodes":[{"content":"Method changedBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[96989,97063]},{"pos":[97109,97119],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97121,97126]},{"pos":[97135,97147],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[97149,97170]},{"pos":[97176,97194],"content":"Method changedDate","linkify":"Method changedDate","nodes":[{"content":"Method changedDate","pos":[0,18]}]},{"content":"Gets or sets the date an application object was last changed.","pos":[97196,97257]},{"pos":[97307,97317],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97319,97324]},{"pos":[97333,97345],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was last changed.","pos":[97347,97395]},{"pos":[97401,97419],"content":"Method changedTime","linkify":"Method changedTime","nodes":[{"content":"Method changedTime","pos":[0,18]}]},{"content":"Gets or sets the time an application object was last changed.","pos":[97421,97482]},{"pos":[97530,97540],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97542,97547]},{"pos":[97556,97568],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The time an application object was last changed.","pos":[97570,97618]},{"pos":[97624,97640],"content":"Method createdBy","linkify":"Method createdBy","nodes":[{"content":"Method createdBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who created the application object.","pos":[97642,97711]},{"pos":[97757,97767],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97769,97774]},{"pos":[97783,97795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[97797,97818]},{"pos":[97824,97843],"content":"Method creationDate","linkify":"Method creationDate","nodes":[{"content":"Method creationDate","pos":[0,19]}]},{"content":"Gets or sets the date an application object was created.","pos":[97845,97901]},{"pos":[97952,97962],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97964,97969]},{"pos":[97978,97990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was created.","pos":[97992,98035]},{"pos":[98041,98060],"content":"Method creationTime","linkify":"Method creationTime","nodes":[{"content":"Method creationTime","pos":[0,19]}]},{"pos":[98109,98119],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[98121,98126]},{"pos":[98135,98147],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[98153,98166],"content":"Method export","linkify":"Method export","nodes":[{"content":"Method export","pos":[0,13]}]},{"pos":[98208,98218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"buffer","pos":[98220,98226]},{"pos":[98235,98247],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[98253,98275],"content":"Method findGroupMember","linkify":"Method findGroupMember","nodes":[{"content":"Method findGroupMember","pos":[0,22]}]},{"content":"Searches the project or group for a specific element.","pos":[98277,98330]},{"pos":[98433,98443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[98445,98449]},{"content":"A Boolean flag to determine whether the search should be recursive; optional.","pos":[98452,98529]},{"content":"type","pos":[98541,98545]},{"content":"A Boolean flag to determine whether the search should be recursive; optional.","pos":[98548,98625]},{"content":"searchSubgroups","pos":[98637,98652]},{"content":"A Boolean flag to determine whether the search should be recursive; optional.","pos":[98655,98732]},{"pos":[98739,98751],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The first object that fits the criteria, or nullNothingnullptrunita null reference (Nothing in Visual Basic) if no object is found.","pos":[98753,98884]},{"pos":[98891,98898],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is also found on ProjectGroupNode.","pos":[98900,98946]},{"pos":[98952,98978],"content":"Method getProjectClassName","linkify":"Method getProjectClassName","nodes":[{"content":"Method getProjectClassName","pos":[0,26]}]},{"content":"Returns the name of the class corresponding to the classid of the project.","pos":[98980,99054]},{"pos":[99099,99111],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the class corresponding to the classid of the project.","pos":[99113,99179]},{"pos":[99186,99193],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The setClassId method assigns a classid to the project.","pos":[99195,99250]},{"pos":[99256,99273],"content":"Method getRunNode","linkify":"Method getRunNode","nodes":[{"content":"Method getRunNode","pos":[0,17]}]},{"content":"Opens the project window and returns the root projectNode of that window, for a particular projectNode found in the project overview window.","pos":[99275,99415]},{"pos":[99459,99471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The running projectNode.","pos":[99473,99497]},{"pos":[99504,99511],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To obtain a running projectNode without opening the project window, use the ProjectNode.loadForInspection Method.","pos":[99513,99626]},{"pos":[99632,99645],"content":"Method import","linkify":"Method import","nodes":[{"content":"Method import","pos":[0,13]}]},{"pos":[99687,99697],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"buffer","pos":[99699,99705]},{"pos":[99714,99726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[99732,99748],"content":"Method isRunNode","linkify":"Method isRunNode","nodes":[{"content":"Method isRunNode","pos":[0,16]}]},{"pos":[99787,99799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[99805,99829],"content":"Method loadForInspection","linkify":"Method loadForInspection","nodes":[{"content":"Method loadForInspection","pos":[0,24]}]},{"content":"Returns a loaded version of a projectNode found in the project overview window.","pos":[99831,99910]},{"pos":[99961,99973],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The loaded projectNode.","pos":[99975,99998]},{"pos":[100005,100012],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To get a loaded projectNode while also opening the project window, use the method getRunNode.","pos":[100014,100107]},{"pos":[100113,100124],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[100126,100268]},{"pos":[100309,100319],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100321,100326]},{"pos":[100335,100347],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[100349,100417]},{"pos":[100424,100431],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[100433,100527]},{"content":"Begins with a letter.","pos":[100533,100554]},{"content":"Doesn't exceed 250 characters.","pos":[100559,100589]},{"content":"Can include numbers and underscore characters.","pos":[100594,100640]},{"content":"Cannot include punctuation or spaces.","pos":[100645,100682]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[100687,100805]},{"pos":[100811,100824],"content":"Method origin","linkify":"Method origin","nodes":[{"content":"Method origin","pos":[0,13]}]},{"pos":[100869,100879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100881,100886]},{"pos":[100895,100907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[100913,100937],"content":"Method removeFromProject","linkify":"Method removeFromProject","nodes":[{"content":"Method removeFromProject","pos":[0,24]}]},{"pos":[100997,101007],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[101009,101013]},{"pos":[101022,101034],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101040,101058],"content":"Method tooltipText","linkify":"Method tooltipText","nodes":[{"content":"Method tooltipText","pos":[0,18]}]},{"pos":[101108,101118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[101120,101124]},{"pos":[101133,101145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101151,101169],"content":"Method projectType","linkify":"Method projectType","nodes":[{"content":"Method projectType","pos":[0,18]}]},{"pos":[101213,101225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101231,101248],"content":"Method lockUpdate","linkify":"Method lockUpdate","nodes":[{"content":"Method lockUpdate","pos":[0,17]}]},{"content":"Prevents visual updates while a series of actions is being performed.","pos":[101250,101319]},{"pos":[101356,101363],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To perform visual updates after the series of actions, call unlockUpdate.","pos":[101365,101438]},{"pos":[101444,101472],"content":"Method addSpecialOverlayIcon","linkify":"Method addSpecialOverlayIcon","nodes":[{"content":"Method addSpecialOverlayIcon","pos":[0,28]}]},{"pos":[101569,101579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[101581,101585]},{"content":"resId","pos":[101599,101604]},{"content":"xOffset","pos":[101618,101625]},{"content":"yOffset","pos":[101639,101646]},{"pos":[101654,101668],"content":"Method created","linkify":"Method created","nodes":[{"content":"Method created","pos":[0,14]}]},{"content":"Enables the ability to perform custom actions on a project when a new instance of the project is created.","pos":[101670,101775]},{"pos":[101817,101827],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[101829,101833]},{"content":"The name of the project instance.","pos":[101836,101869]},{"pos":[101876,101883],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a new instance of the project is created.","pos":[101885,101953]},{"content":"Override this method to perform custom actions on your project.","pos":[101954,102017]},{"pos":[102023,102044],"content":"Method setSpecialIcon","linkify":"Method setSpecialIcon","nodes":[{"content":"Method setSpecialIcon","pos":[0,21]}]},{"content":"Assigns a different icon to a specific node in the project.","pos":[102046,102105]},{"pos":[102175,102185],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[102187,102191]},{"content":"The ID of the icon that must be used for the specified node.","pos":[102194,102254]},{"content":"name","pos":[102266,102270]},{"content":"The ID of the icon that must be used for the specified node.","pos":[102273,102333]},{"content":"resId","pos":[102345,102350]},{"content":"The ID of the icon that must be used for the specified node.","pos":[102353,102413]},{"pos":[102419,102437],"content":"Method loadProject","linkify":"Method loadProject","nodes":[{"content":"Method loadProject","pos":[0,18]}]},{"content":"Enables storing and retrieving custom data in the project definition when a project is loaded.","pos":[102439,102533]},{"pos":[102581,102591],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"buffer","pos":[102593,102599]},{"content":"A string that contains the custom data that was saved in the project by saveProject.","pos":[102602,102686]},{"pos":[102693,102700],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a project is loaded.","pos":[102702,102749]},{"content":"By overriding saveProject and loadProject, a user can store and retrieve custom data in the project definition.","pos":[102750,102861]},{"content":"You must call super() for the project to continue loading.","pos":[102862,102920]},{"pos":[102926,102944],"content":"Method saveProject","linkify":"Method saveProject","nodes":[{"content":"Method saveProject","pos":[0,18]}]},{"content":"Enables saving custom data together with the project in the application object database.","pos":[102946,103034]},{"pos":[103082,103092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"buffer","pos":[103094,103100]},{"content":"A string buffer that must be used for packing the data.","pos":[103103,103158]},{"content":"The buffer must then be passed on to super().","pos":[103159,103204]},{"pos":[103211,103218],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By overriding this method, you can save custom data together with the project in the application object database.","pos":[103220,103333]},{"content":"It is recommended that the data be formed as an XML string in the following form: \"<ph id=\"ph1\">&amp;lt;</ph>APPDATA<ph id=\"ph2\">&amp;gt;</ph> ... <ph id=\"ph3\">&amp;lt;</ph>/APPDATA<ph id=\"ph4\">&amp;gt;</ph>\" The data can be retrieved by overriding the loadProject method.","pos":[103334,103518],"source":" It is recommended that the data be formed as an XML string in the following form: \"&lt;APPDATA&gt; ... &lt;/APPDATA&gt;\" The data can be retrieved by overriding the loadProject method."},{"pos":[103524,103543],"content":"Method unlockUpdate","linkify":"Method unlockUpdate","nodes":[{"content":"Method unlockUpdate","pos":[0,19]}]},{"content":"Enables a visual update after a series of actions started with lockUpdate.","pos":[103545,103619]},{"pos":[103657,103685],"content":"Method handleContextMenuItem","linkify":"Method handleContextMenuItem","nodes":[{"content":"Method handleContextMenuItem","pos":[0,28]}]},{"content":"Handles a user selecting an item on the shortcut menu that has been defined by the corresponding method addContextMenuItems.","pos":[103687,103811]},{"pos":[103865,103875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"id","pos":[103877,103879]},{"content":"The ID of the menu items.","pos":[103882,103907]},{"content":"This is the zero-based number in the list set by the addContextMenuItems method.","pos":[103908,103988]},{"content":"If accContextMenuItems returns the string \"item1,item2\" and the user selects the item \"item2\" in the shortcut menu, this method uses the value 1.","pos":[103989,104134]},{"pos":[104141,104148],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a user selects an item on the shortcut menu that has been defined by the corresponding method addContextMenuItems.","pos":[104150,104291]},{"pos":[104297,104311],"content":"Method addNode","linkify":"Method addNode","nodes":[{"content":"Method addNode","pos":[0,14]}]},{"content":"Adds an existing node to the project.","pos":[104313,104350]},{"pos":[104397,104407],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"node","pos":[104409,104413]},{"content":"The node to add.","pos":[104416,104432]},{"pos":[104438,104456],"content":"Method addUtilNode","linkify":"Method addUtilNode","nodes":[{"content":"Method addUtilNode","pos":[0,18]}]},{"content":"Adds a node to the project.","pos":[104458,104485]},{"pos":[104553,104563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"type","pos":[104565,104569]},{"content":"The name of the node.","pos":[104572,104593]},{"content":"name","pos":[104605,104609]},{"content":"The name of the node.","pos":[104612,104633]},{"pos":[104640,104647],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This function is also found on ProjectGroupNode.","pos":[104649,104697]},{"pos":[104703,104715],"content":"Method clear","linkify":"Method clear","nodes":[{"content":"Method clear","pos":[0,12]}]},{"content":"Removes the contents of a project.","pos":[104717,104751]},{"pos":[104783,104790],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method does not remove the project contents from the Application Object Tree (AOT)—only from the project itself.","pos":[104792,104909]},{"content":"This method removes the project contents but does not remove the project folder.","pos":[104910,104990]},{"content":"To delete a project and its contents in one method call, use the AOTdelete method.","pos":[104991,105073]},{"content":"To delete objects from the AOT, use the AOTdelete method.","pos":[105074,105131]},{"pos":[105138,105146],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example removes any objects in the Project1 project in the Private folder.","pos":[105148,105236]},{"pos":[105673,105695],"content":"Method setProjectClass","linkify":"Method setProjectClass","nodes":[{"content":"Method setProjectClass","pos":[0,22]}]},{"content":"Assigns a class to the project, which gives the project the type that the class defines.","pos":[105697,105785]},{"pos":[105838,105848],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"classid","pos":[105850,105857]},{"content":"The ID of the class to assign to the project.","pos":[105860,105905]},{"pos":[105912,105919],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The specified class must extend the projectNode class.","pos":[105921,105975]},{"pos":[105981,106013],"content":"Method removeSpecialOverlayIcons","linkify":"Method removeSpecialOverlayIcons","nodes":[{"content":"Method removeSpecialOverlayIcons","pos":[0,32]}]},{"pos":[106073,106083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"path","pos":[106085,106089]},{"pos":[106097,106107],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the ProjectNode class.","pos":[106109,106161]},{"pos":[106189,106211],"content":"Class PropertiesWindow","linkify":"Class PropertiesWindow","nodes":[{"content":"Class PropertiesWindow","pos":[0,22]}]},{"pos":[106259,106266],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[106272,106280],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[106286,106293],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[106297,106303]},{"content":"Description","pos":[106356,106367]},{"content":"public int Activate(PropWindowDisplayState displaystate)","pos":[106447,106503]},{"content":"public boolean DockFrame(PropWindowDockState dockstate)","pos":[106522,106577]},{"content":"public str GetSelectedPropertyName()","pos":[106597,106633]},{"content":"public boolean IsVisible()","pos":[106672,106698]},{"content":"public boolean SelectPropertyByName(str propname)","pos":[106747,106796]},{"content":"public boolean SelectTab(PropWindowSelectTab selecttab)","pos":[106822,106877]},{"pos":[106900,106915],"content":"Method Activate","linkify":"Method Activate","nodes":[{"content":"Method Activate","pos":[0,15]}]},{"pos":[106984,106994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"displaystate","pos":[106996,107008]},{"pos":[107017,107029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[107035,107051],"content":"Method DockFrame","linkify":"Method DockFrame","nodes":[{"content":"Method DockFrame","pos":[0,16]}]},{"pos":[107119,107129],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dockstate","pos":[107131,107140]},{"pos":[107149,107161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[107167,107197],"content":"Method GetSelectedPropertyName","linkify":"Method GetSelectedPropertyName","nodes":[{"content":"Method GetSelectedPropertyName","pos":[0,30]}]},{"pos":[107246,107258],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[107264,107280],"content":"Method IsVisible","linkify":"Method IsVisible","nodes":[{"content":"Method IsVisible","pos":[0,16]}]},{"pos":[107319,107331],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[107337,107364],"content":"Method SelectPropertyByName","linkify":"Method SelectPropertyByName","nodes":[{"content":"Method SelectPropertyByName","pos":[0,27]}]},{"pos":[107426,107436],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"propname","pos":[107438,107446]},{"pos":[107455,107467],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[107473,107489],"content":"Method SelectTab","linkify":"Method SelectTab","nodes":[{"content":"Method SelectTab","pos":[0,16]}]},{"pos":[107557,107567],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"selecttab","pos":[107569,107578]},{"pos":[107587,107599],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]}]}