{"nodes":[{"pos":[6,23],"content":"required metadata","linkify":"required metadata","nodes":[{"content":"required metadata","pos":[0,17]}]},{"content":"title: Code migration: Mouse double-click | Microsoft Docs description: In Microsoft Dynamics 365 for Operations, the mouseDblClick() override has been deprecated, and you will have to move this logic to new controls.","pos":[25,242],"source":"title: Code migration: Mouse double-click | Microsoft Docs\ndescription: In Microsoft Dynamics 365 for Operations, the mouseDblClick() override has been deprecated, and you will have to move this logic to new controls."},{"content":"author: annbe manager: AnnBe ms.date: 2015-12-18 23:21:21 ms.topic: article ms.prod: ms.service: Dynamics365Operations ms.technology:","pos":[243,377],"source":"\nauthor: annbe\nmanager: AnnBe\nms.date: 2015-12-18 23:21:21\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology:"},{"pos":[382,399],"content":"optional metadata","linkify":"optional metadata","nodes":[{"content":"optional metadata","pos":[0,17]}]},{"pos":[403,412],"content":"keywords:","linkify":"keywords:","nodes":[{"content":"keywords:","pos":[0,9]}]},{"pos":[416,423],"content":"ROBOTS:","linkify":"ROBOTS:","nodes":[{"content":"ROBOTS:","pos":[0,7]}]},{"content":"audience: Developer","pos":[425,444]},{"pos":[447,458],"content":"ms.devlang:","linkify":"ms.devlang:","nodes":[{"content":"ms.devlang:","pos":[0,11]}]},{"pos":[460,513],"content":"ms.reviewer: 61 ms.suite: Released- Dynamics AX 7.0.0","source":"ms.reviewer: 61\nms.suite: Released- Dynamics AX 7.0.0"},{"pos":[516,530],"content":"ms.tgt_pltfrm:","linkify":"ms.tgt_pltfrm:","nodes":[{"content":"ms.tgt_pltfrm:","pos":[0,14]}]},{"pos":[532,597],"content":"ms.custom: 28331 ms.assetid: 4a04d6b4-7a28-4bc9-addc-bf7ff1c8fb94","source":"ms.custom: 28331\nms.assetid: 4a04d6b4-7a28-4bc9-addc-bf7ff1c8fb94"},{"pos":[600,610],"content":"ms.region:","linkify":"ms.region:","nodes":[{"content":"ms.region:","pos":[0,10]}]},{"pos":[614,626],"content":"ms.industry:","linkify":"ms.industry:","nodes":[{"content":"ms.industry:","pos":[0,12]}]},{"content":"ms.author: jasongre","pos":[628,647]},{"pos":[656,690],"content":"Code migration: Mouse double-click","linkify":"Code migration: Mouse double-click","nodes":[{"content":"Code migration: Mouse double-click","pos":[0,34]}]},{"content":"In Microsoft Dynamics AX 2012, the mouse double-click event was used for various reasons.","pos":[692,781]},{"content":"For example, it helped provide a better user experience and provided an alternative way to run certain scenarios.","pos":[782,895]},{"content":"Here are some examples of common usage patterns:","pos":[896,944]},{"content":"Moving elements between two lists or tree controls","pos":[950,1000]},{"content":"Opening a new form to get more details about the selected field","pos":[1005,1068]},{"content":"Running complex business logic","pos":[1073,1103]},{"content":"Selecting a field in a lookup","pos":[1108,1137]},{"pos":[1139,1330],"content":"In Dynamics 365 for Operations, the <bpt id=\"p1\">**</bpt>mouseDblClick()<ept id=\"p1\">**</ept> override has been deprecated, and developers will have to move this logic to new controls, depending on the logic that was implemented.","source":"In Dynamics 365 for Operations, the **mouseDblClick()** override has been deprecated, and developers will have to move this logic to new controls, depending on the logic that was implemented."},{"pos":[1335,1352],"content":"Strategy overview","linkify":"Strategy overview","nodes":[{"content":"Strategy overview","pos":[0,17]}]},{"content":"Before you begin to use the form, it's a good idea to fix all best practice warning messages that state, “The mouseDblClick control method has been deprecated and should not be used.”","pos":[1353,1536]},{"content":"Otherwise, the form might be useless, or it might work only in limited ways.","pos":[1537,1613]},{"pos":[1618,1659],"content":"Migrate code from mouseDblClick() methods","linkify":"Migrate code from mouseDblClick() methods","nodes":[{"content":"Migrate code from mouseDblClick() methods","pos":[0,41]}]},{"content":"As we mentioned earlier, there were various reasons for using the <bpt id=\"p1\">**</bpt>mouseDblClick()<ept id=\"p1\">**</ept> method in Dynamics AX 2012.","pos":[1660,1773],"source":"As we mentioned earlier, there were various reasons for using the **mouseDblClick()** method in Dynamics AX 2012."},{"content":"This section explains how to migrate some of the most common scenarios.","pos":[1774,1845]},{"pos":[1851,1890],"content":"Moving items between two lists controls","linkify":"Moving items between two lists controls","nodes":[{"content":"Moving items between two lists controls","pos":[0,39]}]},{"content":"In Dynamics AX 2012, a mouse double-click was often used in List Panel scenarios, where two list controls appeared side by side.","pos":[1892,2020]},{"content":"Often, when a user double-clicked an item in one list control, that item was moved to the second list control.","pos":[2021,2131]},{"content":"Migration of this <bpt id=\"p1\">**</bpt>mouseDblClick()<ept id=\"p1\">**</ept> scenario in Dynamics 365 for Operations involves alignment to the List Panel pattern.","pos":[2132,2255],"source":" Migration of this **mouseDblClick()** scenario in Dynamics 365 for Operations involves alignment to the List Panel pattern."},{"content":"You have two options for migrating this usage pattern:","pos":[2256,2310]},{"pos":[2316,2443],"content":"Use the <bpt id=\"p1\">**</bpt>SysListPanel<ept id=\"p1\">**</ept> class itself, which provides the logic and the buttons for moving items between the two list controls.","source":"Use the **SysListPanel** class itself, which provides the logic and the buttons for moving items between the two list controls."},{"content":"If you can't use the <bpt id=\"p1\">**</bpt>SysListPanel<ept id=\"p1\">**</ept> class (because the lists aren't ListViews, or the class isn't appropriate for the given situation), you can manually model the controls by following the List Panel sub-pattern.","pos":[2448,2662],"source":"If you can't use the **SysListPanel** class (because the lists aren't ListViews, or the class isn't appropriate for the given situation), you can manually model the controls by following the List Panel sub-pattern."},{"content":"This pattern includes buttons for moving items between lists, but the developer will have to add the correct logic to make these buttons work.","pos":[2663,2805]},{"pos":[2811,2829],"content":"Opening a new form","linkify":"Opening a new form","nodes":[{"content":"Opening a new form","pos":[0,18]}]},{"content":"In another common usage pattern in Dynamics AX 2012, the user double-clicked a field to open a new form that showed more detailed information about that field.","pos":[2831,2990]},{"content":"You have several options for migrating this usage pattern:","pos":[2991,3049]},{"content":"Use a single-click to open a backing form that shows more details about a field.","pos":[3055,3135]},{"content":"This functionality is automatically implemented for many fields that are based on table relations, and you can implement it manually by overriding the <bpt id=\"p1\">**</bpt>jumpRef()<ept id=\"p1\">**</ept> method on a control.","pos":[3136,3321],"source":" This functionality is automatically implemented for many fields that are based on table relations, and you can implement it manually by overriding the **jumpRef()** method on a control."},{"content":"The preferred migration route is to move the code from <bpt id=\"p1\">**</bpt>mouseDblClick()<ept id=\"p1\">**</ept> into a <bpt id=\"p2\">**</bpt>jumpRef()<ept id=\"p2\">**</ept> override, so that the navigation will be aligned with other fields in the system.","pos":[3322,3499],"source":" The preferred migration route is to move the code from **mouseDblClick()** into a **jumpRef()** override, so that the navigation will be aligned with other fields in the system."},{"content":"Model a new button on the form, and move the logic from the <bpt id=\"p1\">**</bpt>mouseDblClick()<ept id=\"p1\">**</ept> method into the button's <bpt id=\"p2\">**</bpt>clicked()<ept id=\"p2\">**</ept> method.","pos":[3504,3630],"source":"Model a new button on the form, and move the logic from the **mouseDblClick()** method into the button's **clicked()** method."},{"content":"You should use this approach only for non-input field controls (for example, a Tree control) in which a <bpt id=\"p1\">**</bpt>jumpRef()<ept id=\"p1\">**</ept> override doesn't exist.","pos":[3631,3772],"source":" You should use this approach only for non-input field controls (for example, a Tree control) in which a **jumpRef()** override doesn't exist."},{"content":"Add a right-click context menu (shortcut menu) option.","pos":[3777,3831]},{"content":"However, note that UX guidelines specify that the commands on context menus should <bpt id=\"p1\">**</bpt>always<ept id=\"p1\">**</ept> be available in other locations on the page.","pos":[3832,3970],"source":" However, note that UX guidelines specify that the commands on context menus should **always** be available in other locations on the page."},{"content":"A <bpt id=\"p1\">**</bpt>View details<ept id=\"p1\">**</ept> command is automatically added to the right-click context menu for controls that have an overridden <bpt id=\"p2\">**</bpt>jumpRef()<ept id=\"p2\">**</ept> method.","pos":[3971,4111],"source":" A **View details** command is automatically added to the right-click context menu for controls that have an overridden **jumpRef()** method."},{"content":"Therefore, this approach should be used only as an optional addition to the previous migration route (modeling a new button).","pos":[4112,4237]},{"content":"For more information about how to add context menu options in Dynamics 365 for Operations, see <bpt id=\"p1\">[</bpt>Code migration: Context menus<ept id=\"p1\">](http://ax.help.dynamics.com/en/wiki/code-migration-context-menus/)</ept>.","pos":[4238,4432],"source":" For more information about how to add context menu options in Dynamics 365 for Operations, see [Code migration: Context menus](http://ax.help.dynamics.com/en/wiki/code-migration-context-menus/)."},{"pos":[4438,4470],"content":"Moving logic to a button control","linkify":"Moving logic to a button control","nodes":[{"content":"Moving logic to a button control","pos":[0,32]}]},{"content":"In another common usage pattern in Dynamics AX 2012, the double-click caused complex business logic to run.","pos":[4472,4579]},{"content":"For this scenario, the preferred migration route is to model a new button on the form, and then move the logic from <bpt id=\"p1\">**</bpt>mouseDblClick()<ept id=\"p1\">**</ept> into the new button's <bpt id=\"p2\">**</bpt>clicked()<ept id=\"p2\">**</ept> method.","pos":[4580,4759],"source":" For this scenario, the preferred migration route is to model a new button on the form, and then move the logic from **mouseDblClick()** into the new button's **clicked()** method."},{"pos":[4765,4794],"content":"Selecting a field in a lookup","linkify":"Selecting a field in a lookup","nodes":[{"content":"Selecting a field in a lookup","pos":[0,29]}]},{"content":"In some custom lookups in Dynamics AX 2012, code was added so that the user could double-click a row in a grid (or an element in a tree) to select the value and close the lookup.","pos":[4796,4974]},{"content":"For this scenario, the recommended migration route is to add a <bpt id=\"p1\">**</bpt>Select<ept id=\"p1\">**</ept> button at the bottom of the lookup form to enable record selection.","pos":[4975,5116],"source":" For this scenario, the recommended migration route is to add a **Select** button at the bottom of the lookup form to enable record selection."},{"pos":[5121,5134],"content":"UX guidelines","linkify":"UX guidelines","nodes":[{"content":"UX guidelines","pos":[0,13]}]},{"content":"As you migrate mouse double-click methods, you should consider the following guidelines:","pos":[5135,5223]},{"pos":[5229,5335],"content":"To move items between controls, use the <bpt id=\"p1\">**</bpt>SysListPanel<ept id=\"p1\">**</ept> class or the ListPanel pattern whenever possible.","source":"To move items between controls, use the **SysListPanel** class or the ListPanel pattern whenever possible."},{"content":"When you add buttons to replace mouse double-click logic, put the button as close as possible (contextually) to the control.","pos":[5340,5464]},{"pos":[5469,5596],"content":"In some cases, you might have to redesign the form to accommodate the logic that was present in the <bpt id=\"p1\">**</bpt>mouseDblClick()<ept id=\"p1\">**</ept> method.","source":"In some cases, you might have to redesign the form to accommodate the logic that was present in the **mouseDblClick()** method."}],"content":"---\n# required metadata\n\ntitle: Code migration: Mouse double-click | Microsoft Docs\ndescription: In Microsoft Dynamics 365 for Operations, the mouseDblClick() override has been deprecated, and you will have to move this logic to new controls.\nauthor: annbe\nmanager: AnnBe\nms.date: 2015-12-18 23:21:21\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: 61\nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 28331\nms.assetid: 4a04d6b4-7a28-4bc9-addc-bf7ff1c8fb94\n# ms.region: \n# ms.industry: \nms.author: jasongre\n\n---\n\n# Code migration: Mouse double-click\n\nIn Microsoft Dynamics AX 2012, the mouse double-click event was used for various reasons. For example, it helped provide a better user experience and provided an alternative way to run certain scenarios. Here are some examples of common usage patterns:\n\n-   Moving elements between two lists or tree controls\n-   Opening a new form to get more details about the selected field\n-   Running complex business logic\n-   Selecting a field in a lookup\n\nIn Dynamics 365 for Operations, the **mouseDblClick()** override has been deprecated, and developers will have to move this logic to new controls, depending on the logic that was implemented.\n\n## Strategy overview\nBefore you begin to use the form, it's a good idea to fix all best practice warning messages that state, “The mouseDblClick control method has been deprecated and should not be used.” Otherwise, the form might be useless, or it might work only in limited ways.\n\n## Migrate code from mouseDblClick() methods\nAs we mentioned earlier, there were various reasons for using the **mouseDblClick()** method in Dynamics AX 2012. This section explains how to migrate some of the most common scenarios.\n\n### Moving items between two lists controls\n\nIn Dynamics AX 2012, a mouse double-click was often used in List Panel scenarios, where two list controls appeared side by side. Often, when a user double-clicked an item in one list control, that item was moved to the second list control. Migration of this **mouseDblClick()** scenario in Dynamics 365 for Operations involves alignment to the List Panel pattern. You have two options for migrating this usage pattern:\n\n-   Use the **SysListPanel** class itself, which provides the logic and the buttons for moving items between the two list controls.\n-   If you can't use the **SysListPanel** class (because the lists aren't ListViews, or the class isn't appropriate for the given situation), you can manually model the controls by following the List Panel sub-pattern. This pattern includes buttons for moving items between lists, but the developer will have to add the correct logic to make these buttons work.\n\n### Opening a new form\n\nIn another common usage pattern in Dynamics AX 2012, the user double-clicked a field to open a new form that showed more detailed information about that field. You have several options for migrating this usage pattern:\n\n-   Use a single-click to open a backing form that shows more details about a field. This functionality is automatically implemented for many fields that are based on table relations, and you can implement it manually by overriding the **jumpRef()** method on a control. The preferred migration route is to move the code from **mouseDblClick()** into a **jumpRef()** override, so that the navigation will be aligned with other fields in the system.\n-   Model a new button on the form, and move the logic from the **mouseDblClick()** method into the button's **clicked()** method. You should use this approach only for non-input field controls (for example, a Tree control) in which a **jumpRef()** override doesn't exist.\n-   Add a right-click context menu (shortcut menu) option. However, note that UX guidelines specify that the commands on context menus should **always** be available in other locations on the page. A **View details** command is automatically added to the right-click context menu for controls that have an overridden **jumpRef()** method. Therefore, this approach should be used only as an optional addition to the previous migration route (modeling a new button). For more information about how to add context menu options in Dynamics 365 for Operations, see [Code migration: Context menus](http://ax.help.dynamics.com/en/wiki/code-migration-context-menus/).\n\n### Moving logic to a button control\n\nIn another common usage pattern in Dynamics AX 2012, the double-click caused complex business logic to run. For this scenario, the preferred migration route is to model a new button on the form, and then move the logic from **mouseDblClick()** into the new button's **clicked()** method.\n\n### Selecting a field in a lookup\n\nIn some custom lookups in Dynamics AX 2012, code was added so that the user could double-click a row in a grid (or an element in a tree) to select the value and close the lookup. For this scenario, the recommended migration route is to add a **Select** button at the bottom of the lookup form to enable record selection.\n\n## UX guidelines\nAs you migrate mouse double-click methods, you should consider the following guidelines:\n\n-   To move items between controls, use the **SysListPanel** class or the ListPanel pattern whenever possible.\n-   When you add buttons to replace mouse double-click logic, put the button as close as possible (contextually) to the control.\n-   In some cases, you might have to redesign the form to accommodate the logic that was present in the **mouseDblClick()** method.\n\n\n"}