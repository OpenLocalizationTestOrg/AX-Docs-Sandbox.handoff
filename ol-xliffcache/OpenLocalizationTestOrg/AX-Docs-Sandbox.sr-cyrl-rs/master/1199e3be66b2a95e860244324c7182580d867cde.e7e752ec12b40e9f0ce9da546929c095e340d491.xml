{"content":"---\n# required metadata\n\ntitle: M Classes\ndescription: System API classes that start with the letter M.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 52321\nms.assetid: 954d2067-ef47-4714-ae75-23e7a5d539db\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# M Classes\n\n[!include[banner](../includes/banner.md)]\n\n\nSystem API classes that start with the letter M.\n\nClass ManagedEventArgs\n----------------------\n\n    class ManagedEventArgs extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method            | Description                                               |\n|-------------------|-----------------------------------------------------------|\n| public void new() | Initializes a new instance of the ManagedEventArgs class. |\n\n### Method new\n\nInitializes a new instance of the ManagedEventArgs class.\n\n    public void new()\n\n## Class ManagedEventDelegate\n    class ManagedEventDelegate extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                    | Description                                                   |\n|---------------------------------------------------------------------------|---------------------------------------------------------------|\n| public boolean marshalExceptionsToXPP(\\[boolean marshalExceptionsToXPP\\]) |                                                               |\n| private void new()                                                        | Initializes a new instance of the ManagedEventDelegate class. |\n| public void invoke(Object sender, ManagedEventArgs args)                  |                                                               |\n\n### Method marshalExceptionsToXPP\n\n    public boolean marshalExceptionsToXPP([boolean marshalExceptionsToXPP])\n\n#### Parameters\n\nmarshalExceptionsToXPP  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the ManagedEventDelegate class.\n\n    private void new()\n\n### Method invoke\n\n    public void invoke(Object sender, ManagedEventArgs args)\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\nargs  \n\n## Class ManagedEventHandler\n    class ManagedEventHandler extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                     | Description                                     |\n|--------------------------------------------|-------------------------------------------------|\n| public void finalize()                     |                                                 |\n| public void new(Object object, str method) | Initializes a new instance of the Object class. |\n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(Object object, str method)\n\n#### Parameters\n\nobject  \n\n<!-- -->\n\nmethod  \n\n## Class Map\n    class Map extends Object\n\nThe Map class lets to associate one value (the key) with another value.\n\n### Remarks\n\nBoth the key and the value can be any valid X++ type, including objects. The types of the key and the value are specified in the declaration of the map. The way in which maps are implemented means that access to the values is very fast. Multiple keys can map to the same value, but one key can map to only one value at a time. If you add a (key, value) pair that has an existing key value, it replaces the existing pair with that key value. The (key, value) pairs in a map can be traversed by using the MapEnumerator class.\n\n### Examples\n\nThe following example illustrates how to invert a map. A map can be inverted only if no value is mapped to by two different keys. The number of elements in the Map.keySet method and the Map.valueSet method is compared to check this. Otherwise, the elements are traversed in the incoming map and inserted into the result map. The function that performs the inversion, the invertMap method, works regardless of the types of the keys and values.\n\n    { \n        Map example; \n        Map invertMap(map _mapToInvert) \n        { \n            MapEnumerator en; \n            Map result =  new Map( \n                _mapToInvert.valueType(), \n                _mapToInvert.keyType()); \n            if (_mapToInvert.keySet().elements()  \n                != _mapToInvert.valueSet().elements()) \n            { \n                return null; \n            } \n            en = new MapEnumerator(_mapToInvert); \n            while (en.moveNext()) \n            { \n                result.insert(en.currentValue(), en.currentKey()); \n            } \n            return result; \n        } \n        ; \n        // Fill in a few values. \n        example = new Map(Types::Integer, Types::String); \n        example.insert (1, \"one\"); \n        example.insert (2, \"two\"); \n        print invertMap(example).toString(); \n        pause; \n        // Now two keys (2 and 3) map to the same value \n        // so can't create inverse map \n        example.insert (3, \"two\"); \n        if (!invertMap(example)) \n        { \n            print \"Could not create the map\"; \n        } \n        pause; \n    }\n\n### Methods\n\n| Method                                                      | Description                                                                                     |\n|-------------------------------------------------------------|-------------------------------------------------------------------------------------------------|\n| public str definitionString()                               | Returns a string that contains a definition of the map.                                         |\n| public Set domainSet()                                      | Creates a set of the key (domain) values in a map.                                              |\n| public Types domainType()                                   | Determines the type of the key (domain) values in a map.                                        |\n| public int elements()                                       | Returns the number of elements in the map.                                                      |\n| public boolean empty()                                      | Determines whether the map contains any (key, value) pairs.                                     |\n| public boolean exists(AnyType keyValue)                     | Determines whether a particular value exists as a key in the map.                               |\n| public MapEnumerator getEnumerator()                        | Creates an enumerator for the map, which lets you traverse the map.                             |\n| public boolean insert(AnyType keyValue, AnyType valueValue) | Inserts an element (keyValue, valueValue pair) into the map.                                    |\n| public Set keySet()                                         | Returns a set that contains the key values from a map.                                          |\n| public Types keyType()                                      | Returns the type of the key values in a map.                                                    |\n| public AnyType lookup(AnyType keyValue)                     | Returns the value that is mapped to by a specified key value.                                   |\n| public container pack()                                     | Serializes the current instance of the Map class.                                               |\n| public Set rangeSet()                                       | Returns a set that contains the values (ranges) that are mapped to by the keys in a map.        |\n| public Types rangeType()                                    | Determines the type of the values (ranges) that are mapped to by the keys in a map.             |\n| public boolean remove(AnyType keyValue)                     | Removes a (key, value) pair from a map.                                                         |\n| public str toString()                                       | Returns a description of the (key, value) pairs in the map.                                     |\n| public Set valueSet()                                       | Returns a set that contains the values that are mapped to by the keys in a map.                 |\n| public Types valueType()                                    | Returns the type of the values that are mapped to by the keys in a map.                         |\n| public str xml(\\[int indent\\])                              | Returns an XML string that represents the current object.                                       |\n| ::public static Map create(container container)             | Creates a map from the container that was obtained from a previous call to the Map.pack method. |\n| ::public static Map createFromXML(Object xmlnode)           |                                                                                                 |\n| ::public static boolean equal(Map map1, Map map2)           | Determines whether two maps are equal.                                                          |\n| public void new(Types key, Types value)                     | Creates a new map.                                                                              |\n\n### Method definitionString\n\nReturns a string that contains a definition of the map.\n\n    public str definitionString()\n\n#### Return Value\n\nA string that contains the definition of the map.\n\n#### Remarks\n\nThe definition of the map.\n\n#### Examples\n\nThe following example creates a map and then prints the definition of the map.\n\n    { \n        Map myMap = new Map(Types::Integer, Types::String); \n        print myMap.definitionString(); \n        pause; \n    }\n\n### Method domainSet\n\nCreates a set of the key (domain) values in a map.\n\n    public Set domainSet()\n\n#### Return Value\n\n#### Remarks\n\nThis method is obsolete; use the Map.keySet method instead.\n\n### Method domainType\n\nDetermines the type of the key (domain) values in a map.\n\n    public Types domainType()\n\n#### Return Value\n\n#### Remarks\n\nThis method is obsolete; use the Map.keyType method instead.\n\n### Method elements\n\nReturns the number of elements in the map.\n\n    public int elements()\n\n#### Return Value\n\nThe number of elements in the map.\n\n#### Remarks\n\nThe number of elements in the map is equal to the number of different key values in the map.\n\n#### Examples\n\nThe following example uses the elements method to check whether a map has any elements. If the \\_from map exists and has some elements, the values from the \\_from map are inserted into the \\_to map.\n\n    static void mergeRecsPrim( \n        Map _from, \n        Map _to \n        ) \n    { \n        MapEnumerator   me; \n        if (! _from) \n        { \n            return; \n        } \n        if (! _from.elements()) \n        { \n            return; \n        } \n        me = _from.getEnumerator(); \n        while (me.moveNext()) \n        { \n            _to.insert(me.currentKey(),me.currentValue()); \n        } \n    }\n\n### Method empty\n\nDetermines whether the map contains any (key, value) pairs.\n\n    public boolean empty()\n\n#### Return Value\n\ntrue if the map does not contain any elements; otherwise, false.\n\n#### Remarks\n\nThis method is equivalent to (elements() == 0).\n\n### Method exists\n\nDetermines whether a particular value exists as a key in the map.\n\n    public boolean exists(AnyType keyValue)\n\n#### Parameters\n\nkeyValue  \nThe value to check for.\n\n#### Return Value\n\ntrue if the specified key value exists in the map; otherwise, false.\n\n#### Remarks\n\nUse this method to guard calls to the Map.lookup method. If the Map.lookup method does not find the value that it is looking for, it throws an exception.\n\n#### Examples\n\nThe following example checks whether a particular style exists in a map of styles in a style sheet. If it does, a new name is substituted for the body style.\n\n    static void renameStyle(Map stylesheet, str fromName, str toName) \n    { \n        str body; \n        if (stylesheet.exists(fromName)) \n        { \n            body = stylesheet.lookup (fromName); \n            stylesheet.remove (fromName); \n            stylesheet.insert (toName, body); \n        } \n        else \n        { \n            info (fromName); \n        } \n    }\n\n### Method getEnumerator\n\nCreates an enumerator for the map, which lets you traverse the map.\n\n    public MapEnumerator getEnumerator()\n\n#### Return Value\n\nA MapEnumerator object for the map.\n\n#### Examples\n\nThe following example checks whether the \\_from map has any elements and creates an enumerator for the map if it has any elements. The map is then traversed, and the elements in it are inserted into the \\_to map.\n\n    static void mergeRecsPrim( \n        Map _from, \n        Map _to \n        ) \n    { \n        MapEnumerator   me; \n        if (! _from) \n        { \n            return; \n        } \n        if (! _from.elements()) \n        { \n            return; \n        } \n        me = _from.getEnumerator(); \n        while (me.moveNext()) \n        { \n            _to.insert(me.currentKey(),me.currentValue()); \n        } \n    }\n\n### Method insert\n\nInserts an element (keyValue, valueValue pair) into the map.\n\n    public boolean insert(AnyType keyValue, AnyType valueValue)\n\n#### Parameters\n\nkeyValue  \nThe value that is mapped to by the key.\n\n<!-- -->\n\nvalueValue  \nThe value that is mapped to by the key.\n\n#### Return Value\n\ntrue if the key did not already exist in the map and has been inserted; otherwise, false.\n\n#### Remarks\n\nIf the key already exists in the map, the value is updated.\n\n#### Examples\n\nThe following example checks whether the \\_from map has any elements and creates an enumerator for the map if it has any elements. The map is traversed, and the insert method is used to insert the elements from the \\_from map into the \\_to map.\n\n    static void mergeRecsPrim( \n        Map _from, \n        Map _to \n        ) \n    { \n        MapEnumerator   me; \n        if (! _from) \n        { \n            return; \n        } \n        if (! _from.elements()) \n        { \n            return; \n        } \n        me = _from.getEnumerator(); \n        while (me.moveNext()) \n        { \n            _to.insert(me.currentKey(),me.currentValue()); \n        } \n    }\n\n### Method keySet\n\nReturns a set that contains the key values from a map.\n\n    public Set keySet()\n\n#### Return Value\n\nA set that contains the key values.\n\n#### Examples\n\nThe following example deletes all elements from a map that have key values that are not found as elements in a set.\n\n    public void deleteItems(Set _set, Map _map) \n    { \n        Set             deletedSet; \n        SetEnumerator   enumerator; \n        // deletedSet contains all key values from \n        // _map that are not values in _set \n        deletedSet = Set::difference(_map.keySet(), _set); \n        enumerator = deletedSet.getEnumerator(); \n        while (enumerator.moveNext()) \n        { \n            // Deletes elements from map with key \n            // values matching values in deletedSet \n            _map.remove(enumerator.current()); \n        } \n    }\n\n### Method keyType\n\nReturns the type of the key values in a map.\n\n    public Types keyType()\n\n#### Return Value\n\nThe type of the key values.\n\n#### Remarks\n\nThe possible return values are outlined by the Types system enum. The type of the key values is determined when the map is constructed. It is supplied as the first parameter to the Map.new method.\n\n### Method lookup\n\nReturns the value that is mapped to by a specified key value.\n\n    public AnyType lookup(AnyType keyValue)\n\n#### Parameters\n\nkeyValue  \nThe key to find.\n\n#### Return Value\n\nThe value that is mapped to by the specified key.\n\n#### Remarks\n\nAn exception is thrown if the key is not found in the map, so check whether the value that you want to retrieve exists by using the Map.exists method.\n\n#### Examples\n\nThe following example checks whether a particular style exists in a map of styles in a style sheet. If it does, a new name is substituted for the body style.\n\n    static void renameStyle(Map stylesheet, str fromName, str toName) \n    { \n        str body; \n        if (stylesheet.exists(fromName)) \n        { \n            body = stylesheet.lookup (fromName); \n            stylesheet.remove (fromName); \n            stylesheet.insert (toName, body); \n        } \n        else \n        { \n            info (fromName); \n        } \n    }\n\n### Method pack\n\nSerializes the current instance of the Map class.\n\n    public container pack()\n\n#### Return Value\n\nA container that contains the current instance of the Map class.\n\n#### Remarks\n\nThe container created by this method contains 4 elements before the first element from the map:\n\n-   A version number for the container\n-   An integer that identifies the data type of the keys in the map\n-   An integer that identifies the data type of the values in the map\n-   The number of elements in the map\n\nIf the keys or the values are objects, packing is performed by calling the pack method successively on each object to yield a subcontainer. The pack and unpack methods cannot preserve X++ anytype values. One option is to put the anytype values into objects or structs, and have the structs be the values in the Map object. Use of Microsoft .NET System.Collections classes is another option. The map can be retrieved from the packed container by using the Map.create method.\n\n#### Examples\n\nThe following example creates a map from a container that is passed into the method (conprojItemTransSalesAmount), adds some values to it, and then uses MapEnumerator.pack to pack the map into a container. The new container is then returned by the method.\n\n    server static container salesAmountDisplayCache( \n        container   _conprojItemTrans, \n        container   _conprojItemTransSalesAmount, \n        TransDate   _ledgerFromDate, \n        TransDate   _ledgerToDate) \n    { \n        ProjItemTrans    projItemTrans; \n        Set              setprojItemTrans; \n        Map              mapprojItemTransSalesAmount; \n        SetIterator      si; \n        if(_conprojItemTrans) \n        { \n            setprojItemTrans = Set::create(_conprojItemTrans); \n        } \n        if(_conprojItemTransSalesAmount) \n        { \n            mapprojItemTransSalesAmount = Map::create( \n                _conprojItemTransSalesAmount); \n        } \n        si = new SetIterator(setprojItemTrans); \n        si.begin(); \n        while (si.more()) \n        { \n            projItemTrans = ProjItemTrans::find(si.value()); \n            mapprojItemTransSalesAmount.insert( \n                si.value(),  \n                projItemTrans.salesAmount( \n                    projItemTrans, \n                   _ledgerFromDate, \n                   _ledgerToDate)); \n            si.next(); \n        } \n        return mapprojItemTransSalesAmount.pack(); \n    }\n\n### Method rangeSet\n\nReturns a set that contains the values (ranges) that are mapped to by the keys in a map.\n\n    public Set rangeSet()\n\n#### Return Value\n\n#### Remarks\n\nThis method is obsolete; use the Map.valueSet method instead.\n\n### Method rangeType\n\nDetermines the type of the values (ranges) that are mapped to by the keys in a map.\n\n    public Types rangeType()\n\n#### Return Value\n\n#### Remarks\n\nThis method is obsolete; use the valueType method instead.\n\n### Method remove\n\nRemoves a (key, value) pair from a map.\n\n    public boolean remove(AnyType keyValue)\n\n#### Parameters\n\nkeyValue  \nThe value of the key to delete.\n\n#### Return Value\n\ntrue if the key was found in the map and the element has been deleted; otherwise, false.\n\n#### Examples\n\nThe following example checks whether a particular key value exists in a map. If the value exists, the method deletes the key and its corresponding value. The method returns true if the value was found and false if the key did not exist in the map.\n\n    public boolean clear(str owner) \n    { \n        // maps is a class variable \n        if (maps.exists(owner)) \n        { \n            maps.remove(owner); \n        } \n        else \n        { \n            return false; \n        } \n        return true; \n    }\n\n### Method toString\n\nReturns a description of the (key, value) pairs in the map.\n\n    public str toString()\n\n#### Return Value\n\nA string that contains a description of the elements in the map.\n\n#### Examples\n\nThe following example creates a map, adds some elements to it, and then prints a description of these elements.\n\n    { \n        Map myMap = new Map(Types::Integer, Types::String); \n        // Add some elements to the map \n        myMap.insert(1, \"Element one\"); \n        myMap.insert(2, \"Element two\"); \n        myMap.insert(3, \"Element three\"); \n        myMap.insert(4, \"Element Four\"); \n        print myMap.toString(); \n        pause; \n    }\n\n### Method valueSet\n\nReturns a set that contains the values that are mapped to by the keys in a map.\n\n    public Set valueSet()\n\n#### Return Value\n\nA set that contains the values from the map.\n\n#### Remarks\n\nIf all the keys map to different values, the number of elements in the set is equal to the number of elements in the map.\n\n### Method valueType\n\nReturns the type of the values that are mapped to by the keys in a map.\n\n    public Types valueType()\n\n#### Return Value\n\nThe type of the values that are mapped to by the keys.\n\n#### Remarks\n\nThe type of the key values is determined when the map is constructed. It is supplied as the first parameter to the Map.new method.\n\n### Method xml\n\nReturns an XML string that represents the current object.\n\n    public str xml([int indent])\n\n#### Parameters\n\nindent  \nThe amount of indentation of the XML string that is returned; optional.\n\n#### Return Value\n\nAn XML string that represents the current object.\n\n#### Remarks\n\nThis method can be overridden to return values that are meaningful for that type.\n\n### Method create\n\nCreates a map from the container that was obtained from a previous call to the Map.pack method.\n\n    public static Map create(container container)\n\n#### Parameters\n\ncontainer  \n\n#### Return Value\n\nA map that is equal to the map that was packed into the container by the Map.pack method.\n\n#### Remarks\n\nIf the keys or values are objects, the objects must have an unpack method that is called to re-establish their internal state from the container.\n\n#### Examples\n\nThe following example creates a map from a container that is passed into the method (conprojItemTransSalesAmount), adds some values to the container, and then packs the map and returns it as a new container.\n\n    server static container salesAmountDisplayCache( \n        container   _conprojItemTrans, \n        container   _conprojItemTransSalesAmount, \n        TransDate   _ledgerFromDate, \n        TransDate   _ledgerToDate) \n    { \n        ProjItemTrans    projItemTrans; \n        Set              setprojItemTrans; \n        Map              mapprojItemTransSalesAmount; \n        SetIterator      si; \n        if(_conprojItemTrans) \n        { \n            setprojItemTrans = Set::create(_conprojItemTrans); \n        } \n        if(_conprojItemTransSalesAmount) \n        { \n            mapprojItemTransSalesAmount = Map::create( \n                _conprojItemTransSalesAmount); \n        } \n        si = new SetIterator(setprojItemTrans); \n        si.begin(); \n        while (si.more()) \n        { \n            projItemTrans = ProjItemTrans::find(si.value()); \n            mapprojItemTransSalesAmount.insert( \n                si.value(),  \n                projItemTrans.salesAmount( \n                    projItemTrans, \n                   _ledgerFromDate, \n                   _ledgerToDate)); \n            si.next(); \n        } \n        return mapprojItemTransSalesAmount.pack(); \n    }\n\n### Method createFromXML\n\n    public static Map createFromXML(Object xmlnode)\n\n#### Parameters\n\nxmlnode  \n\n#### Return Value\n\n### Method equal\n\nDetermines whether two maps are equal.\n\n    public static boolean equal(Map map1, Map map2)\n\n#### Parameters\n\nmap1  \nThe second map to compare.\n\n<!-- -->\n\nmap2  \nThe second map to compare.\n\n#### Return Value\n\ntrue if the two maps are equal; otherwise, false.\n\n#### Remarks\n\nTwo maps are equal if they contain the same number of elements, their key sets are the same, and each key in the key set maps to the same value in both maps.\n\n### Method new\n\nCreates a new map.\n\n    public void new(Types key, Types value)\n\n#### Parameters\n\nkey  \nThe type of the values.\n\n<!-- -->\n\nvalue  \nThe type of the values.\n\n#### Examples\n\nThe following example creates a map that maps string keys to integer values.\n\n    Map myMap = new Map(Types::String, Types::Integer);\n\n## Class MapEnumerator\n    class MapEnumerator extends Object\n\nThe MapEnumerator class lets you traverse through the elements in a map.\n\n### Remarks\n\nMap enumerators start before the first element in the list. You must call the MapEnumerator.moveNext method to make it point to the first element in the list. It is a best practice to use the MapEnumerator class instead of the MapIterator class because enumerators are automatically created on the same tier as the map when you call the Map.getEnumerator method. Using the MapEnumerator class avoids a potential problem in code marked as Called from, where the iterator and map can end up on separate tiers. In addition, because map enumerators require less code than map iterators, they perform slightly better. The only situation where you have to use a map iterator, is when you want to delete items from a list by using the MapIterator.delete method.\n\n### Examples\n\n### Methods\n\n| Method                        | Description                                                                                                                                       |\n|-------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|\n| public AnyType current()      | This method is obsolete; use MapEnumerator.currentKey instead.                                                                                    |\n| public AnyType currentKey()   | Returns the key from the (key, value) pair that is currently pointed to by the enumerator.                                                        |\n| public AnyType currentValue() | Returns the value from the (key, value) pair that is currently pointed to by the enumerator.                                                      |\n| public str definitionString() | Returns a description of the enumerator. For example, an enumerator for a map of integers to strings would return \"\\[int -&gt; str\\] enumerator\". |\n| public boolean moveNext()     | Determines whether the enumerator points to a valid map element.                                                                                  |\n| public str toString()         | Returns a string that represents the current object.                                                                                              |\n| public void new(Map map)      | Initializes a new instance of the Object class.                                                                                                   |\n| public void reset()           | Moves the enumerator to point to just before the first element in the map.                                                                        |\n\n### Method current\n\nThis method is obsolete; use MapEnumerator.currentKey instead.\n\n    public AnyType current()\n\n#### Return Value\n\n### Method currentKey\n\nReturns the key from the (key, value) pair that is currently pointed to by the enumerator.\n\n    public AnyType currentKey()\n\n#### Return Value\n\nThe key from the map element that is currently pointed to by the enumerator.\n\n#### Remarks\n\nYou must call the MapEnumerator.moveNext method before you call the currentKey method.\n\n#### Examples\n\nThe following example searches for a particular table ID in a map and then returns the key value of that map element.\n\n    private LabelType tableLabel(tableId _tableId) \n    { \n        LabelType     labelType; \n        MapEnumerator mapEnum; \n        mapEnum = tableAllMap.getEnumerator(); \n        while (mapEnum.moveNext()) \n        { \n            if (_tableId == mapEnum.currentValue()) \n            { \n                labelType = mapEnum.currentKey(); \n                break; \n            } \n        } \n        return labelType; \n    }\n\n### Method currentValue\n\nReturns the value from the (key, value) pair that is currently pointed to by the enumerator.\n\n    public AnyType currentValue()\n\n#### Return Value\n\nThe value from the map element that is currently pointed to by the enumerator.\n\n#### Remarks\n\nYou must call the MapEnumerator.moveNext method before you call this method.\n\n#### Examples\n\nThe following example searches through a map to find an element that has a value equal to that passed in as a parameter. The MapEnumerator.moveNext method is used to iterate through the map, and the currentValue method is used to test each value to see whether it matches the parameter.\n\n    private LabelType tableLabel(tableId _tableId) \n    { \n        LabelType     labelType; \n        MapEnumerator mapEnum; \n        mapEnum = tableAllMap.getEnumerator(); \n        while (mapEnum.moveNext()) \n        { \n            if (_tableId == mapEnum.currentValue()) \n            { \n                labelType = mapEnum.currentKey(); \n                break; \n            } \n        } \n        return labelType; \n    }\n\n### Method definitionString\n\nReturns a description of the enumerator. For example, an enumerator for a map of integers to strings would return \"\\[int -&gt; str\\] enumerator\".\n\n    public str definitionString()\n\n#### Return Value\n\nA string that contains a description of the enumerator.\n\n#### Examples\n\nThe following example creates a map and an enumerator for it, and then it prints out a definition of the enumerator.\n\n    { \n        Map myMap = new Map(Types::Integer, Types::String); \n        MapEnumerator  enumerator; \n        int i; \n        // Add some elements to the map \n        myMap.insert(1, \"Element one\"); \n        myMap.insert(2, \"Element two\"); \n        myMap.insert(3, \"Element three\"); \n        myMap.insert(4, \"Element Four\"); \n        // Set the enumerator \n        enumerator = myMap.getEnumerator(); \n        print enumerator.definitionString(); \n        pause; \n    }\n\n### Method moveNext\n\nDetermines whether the enumerator points to a valid map element.\n\n    public boolean moveNext()\n\n#### Return Value\n\ntrue if the current position in the map holds a valid element; otherwise false.\n\n#### Remarks\n\nMap enumerators start before the first element in the map. You must call the moveNext method to make it point to the first element in the map.\n\n#### Examples\n\nThe following example uses the moveNext method to iterate over the tables that are contained in a project and adds them to a new map that contains a DictTable object for each table. (DictTable lets you access information about a table.)\n\n    { \n        Map map = Map::create( \n            SysUmlDataModel::getProjectTablesClient(projectNode)); \n        MapEnumerator enum = map.getEnumerator(); \n        TableName tableName; \n        while (enum.moveNext()) \n        { \n            tableName = enum.currentKey(); \n            map.insert(tableName, new DictTable(tablename2id(tableName))); \n        } \n        return map; \n    }\n\n### Method toString\n\nReturns a string that represents the current object.\n\n    public str toString()\n\n#### Return Value\n\nA string that represents the current object.\n\n#### Remarks\n\nThe default implementation returns the class name of the object. The method can be overridden in a derived class to return values that are meaningful for that type. For example, an instance of the SysMethodInfo class returns the method name and type of the method, such as instance or static.\n\n#### Examples\n\nThe following example creates a map, and then prints the content of the first and second elements in the map.\n\n    { \n        Map myMap = new Map(Types::Integer, Types::String); \n        MapEnumerator  enumerator; \n        int i; \n         // Add some elements to the map \n        myMap.insert(1, \"Element one\"); \n        myMap.insert(2, \"Element two\"); \n        myMap.insert(3, \"Element three\"); \n        myMap.insert(4, \"Element Four\"); \n        // Set the enumerator \n        enumerator = myMap.getEnumerator(); \n        // Go to beginning of enumerator \n        enumerator.reset(); \n        // Go to the first element in the map \n        enumerator.moveNext(); \n        // Print first item in the map \n        print enumerator.toString(); \n        // go to second element \n         enumerator.moveNext(); \n        // Print second element in map \n        print enumerator.toString(); \n        pause; \n    }\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(Map map)\n\n#### Parameters\n\nmap  \nThe map for which to create an enumerator.\n\n#### Remarks\n\nThis method is obsolete. Use the Map.getEnumerator method instead.\n\n### Method reset\n\nMoves the enumerator to point to just before the first element in the map.\n\n    public void reset()\n\n#### Remarks\n\nThe reset method moves the enumerator to the start of the set, before the first element in the set. You must call the MapEnumerator.moveNext method to make it point to the first element in the set.\n\n## Class Mapi\n    class Mapi extends Object\n\nThe Mapi class enables email to be sent, received, and managed in most major mail systems, such as Microsoft Exchange–based systems, Microsoft Outlook Express, and Lotus CCMail.\n\n### Remarks\n\nTogether with the other Mapi classes, MapiMessage, MapiRecipDesc, and MapiFileDesc, this class lets you specify multiple recipients, file attachments, message text, and a subject. The easiest approach is to set up a working mail client on the machine, and make sure that this works correctly order by sending and receiving a few email messages. Flags for the Mapi methods are located in the Mapi macro. You include this macro in code where you use the Mapi classes together with the \\#MAPI statement.\n\n### Examples\n\nThe following example shows how to send an email message by using this class.\n\n    static void example() \n    { \n        #Mapi \n        Mapi m = new Mapi(); \n        MapiMessage msg = new MapiMessage(); \n        MapiRecipDesc recip = new MapiRecipDesc(); \n        // Set up the recipient. \n        recip.Name(\"someone\"); \n        recip.RecipClass(#MAPI_TO); \n        msg.setRecipNo(1,recip); \n        // Log on using default profile. \n        m.Logon(\"\",\"\",#MAPI_USE_DEFAULT); \n        // Send the mail, and allow the user to modify the \n        // Subject, Text and Recipients in the Send Mail Dialog. \n        m.SendMail(msg,#MAPI_DIALOG); \n        // Log off. \n        m.Logoff(); \n    }\n\n### Methods\n\n| Method                                                                         | Description                                                                                          |\n|--------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|\n| public int deleteMail(str messageID)                                           | Removes the specified message from the message store.                                                |\n| public str findNext(\\[str messageType\\], \\[str seedMessageID\\], \\[int flags\\]) | Finds the first or next message in the message store.                                                |\n| public int logoff()                                                            | Lets you log off the mail system.                                                                    |\n| public int logon(str profileName, str password, int flags)                     | Logs on to the mail system by using the specified profile and password.                              |\n| public MapiMessage readMail(str messageID, \\[int flags\\])                      | Retrieves a message from the message store.                                                          |\n| public MapiRecipDesc resolveName(str mame, int flags)                          | Transforms the message recipient's name, as entered by a user, to an unambiguous address list entry. |\n| public int saveMail(MapiMessage message, int flags, str messageId)             | Saves a message to the message store.                                                                |\n| public int sendMail(MapiMessage message, \\[int flags\\])                        | Sends a message to the specified recipients.                                                         |\n| public int status()                                                            | Retrieves the status of the last Mapi operation.                                                     |\n| public void new()                                                              | Initializes an instance of the Mapi class.                                                           |\n| public void finalize()                                                         |                                                                                                      |\n\n### Method deleteMail\n\nRemoves the specified message from the message store.\n\n    public int deleteMail(str messageID)\n\n#### Parameters\n\nmessageID  \nThe unique message ID for the message to delete.\n\n#### Return Value\n\nThe status \\#SUCCESS\\_SUCCES or an error code, which can be found in the \\#MAPI macro.\n\n#### Remarks\n\nThe message ID can be retrieved by using the findNext method.\n\n### Method findNext\n\nFinds the first or next message in the message store.\n\n    public str findNext([str messageType], [str seedMessageID], [int flags])\n\n#### Parameters\n\nmessageType  \nFlags that indicate first in, first out (FIFO) or unread; optional. This parameter has two possible values:\n\n<!-- -->\n\nseedMessageID  \nFlags that indicate first in, first out (FIFO) or unread; optional. This parameter has two possible values:\n\n<!-- -->\n\nflags  \nFlags that indicate first in, first out (FIFO) or unread; optional. This parameter has two possible values:\n\n#### Return Value\n\nThe message ID of the message that is found; an empty string if no message is found.\n\n#### Remarks\n\nCall this method to find the first message, and then issue subsequent calls to obtain the following messages. Use the status method to check for Mapi errors after you call this method.\n\n### Method logoff\n\nLets you log off the mail system.\n\n    public int logoff()\n\n#### Return Value\n\nThe status \\#SUCCESS\\_SUCCESS or an error code, which can be found in the \\#MAPI macro.\n\n### Method logon\n\nLogs on to the mail system by using the specified profile and password.\n\n    public int logon(str profileName, str password, int flags)\n\n#### Parameters\n\nprofileName  \nA list of flags. The valid flags are as follows:\n\n<!-- -->\n\npassword  \nA list of flags. The valid flags are as follows:\n\n<!-- -->\n\nflags  \nA list of flags. The valid flags are as follows:\n\n#### Return Value\n\nThe status \\#SUCCESS\\_SUCCESS if the logon succeeded; otherwise, an error code, which can be found in the \\#MAPI macro.\n\n#### Remarks\n\nAn easy and common way to log on is to specify the \\#MAPI\\_USE\\_DEFAULT flag, which logs on by using the default profile.\n\n### Method readMail\n\nRetrieves a message from the message store.\n\n    public MapiMessage readMail(str messageID, [int flags])\n\n#### Parameters\n\nmessageID  \nA list of flags; optional. The valid flags are as follows:\n\n<!-- -->\n\nflags  \nA list of flags; optional. The valid flags are as follows:\n\n#### Return Value\n\nThe MapiMessage object that is retrieved or nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n### Method resolveName\n\nTransforms the message recipient's name, as entered by a user, to an unambiguous address list entry.\n\n    public MapiRecipDesc resolveName(str mame, int flags)\n\n#### Parameters\n\nmame  \nA list of flags. The valid flags are as follows:\n\n<!-- -->\n\nflags  \nA list of flags. The valid flags are as follows:\n\n#### Return Value\n\nA MapiRecipDesc class object that has an unambiguous address list entry.\n\n### Method saveMail\n\nSaves a message to the message store.\n\n    public int saveMail(MapiMessage message, int flags, str messageId)\n\n#### Parameters\n\nmessage  \nThe unique ID of the message to retrieve.\n\n<!-- -->\n\nflags  \nThe unique ID of the message to retrieve.\n\n<!-- -->\n\nmessageId  \nThe unique ID of the message to retrieve.\n\n#### Return Value\n\nThe status \\#SUCCESS\\_SUCCESS or an error code from the \\#MAPI macro.\n\n### Method sendMail\n\nSends a message to the specified recipients.\n\n    public int sendMail(MapiMessage message, [int flags])\n\n#### Parameters\n\nmessage  \nA list of flags; optional. The valid flags are as follows:\n\n<!-- -->\n\nflags  \nA list of flags; optional. The valid flags are as follows:\n\n#### Return Value\n\nThe status \\#SUCCESS\\_SUCCESS or an error code from the \\#MAPI macro.\n\n### Method status\n\nRetrieves the status of the last Mapi operation.\n\n    public int status()\n\n#### Return Value\n\nThe status code of the last Mapi operation.\n\n#### Remarks\n\nThe status codes can be found in the \\#MAPI macro.\n\n### Method new\n\nInitializes an instance of the Mapi class.\n\n    public void new()\n\n### Method finalize\n\n    public void finalize()\n\n## Class MapiEx\n    class MapiEx extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                          | Description                                     |\n|-----------------------------------------------------------------|-------------------------------------------------|\n| public MapiExAppointment getAppointmentFromEntryId(str entryID) |                                                 |\n| public MapiExContact getContactFromEntryId(str entryID)         |                                                 |\n| public int getCurrentUser()                                     |                                                 |\n| public str getCurrentUserEmail()                                |                                                 |\n| public str getCurrentUserEntryId()                              |                                                 |\n| public str getCurrentUserName()                                 |                                                 |\n| public MapiExMail getMailFromEntryId(str entryID)               |                                                 |\n| public MapiExTask getTaskFromEntryId(str entryID)               |                                                 |\n| public int logon(str profileName, str password, int flags)      |                                                 |\n| public boolean mapiInitialised()                                |                                                 |\n| public boolean openMessageStore(str str)                        |                                                 |\n| public void finalize()                                          |                                                 |\n| public void new()                                               | Initializes a new instance of the MapiEx class. |\n| public void logout()                                            |                                                 |\n\n### Method getAppointmentFromEntryId\n\n    public MapiExAppointment getAppointmentFromEntryId(str entryID)\n\n#### Parameters\n\nentryID  \n\n#### Return Value\n\n### Method getContactFromEntryId\n\n    public MapiExContact getContactFromEntryId(str entryID)\n\n#### Parameters\n\nentryID  \n\n#### Return Value\n\n### Method getCurrentUser\n\n    public int getCurrentUser()\n\n#### Return Value\n\n### Method getCurrentUserEmail\n\n    public str getCurrentUserEmail()\n\n#### Return Value\n\n### Method getCurrentUserEntryId\n\n    public str getCurrentUserEntryId()\n\n#### Return Value\n\n### Method getCurrentUserName\n\n    public str getCurrentUserName()\n\n#### Return Value\n\n### Method getMailFromEntryId\n\n    public MapiExMail getMailFromEntryId(str entryID)\n\n#### Parameters\n\nentryID  \n\n#### Return Value\n\n### Method getTaskFromEntryId\n\n    public MapiExTask getTaskFromEntryId(str entryID)\n\n#### Parameters\n\nentryID  \n\n#### Return Value\n\n### Method logon\n\n    public int logon(str profileName, str password, int flags)\n\n#### Parameters\n\nprofileName  \n\n<!-- -->\n\npassword  \n\n<!-- -->\n\nflags  \n\n#### Return Value\n\n### Method mapiInitialised\n\n    public boolean mapiInitialised()\n\n#### Return Value\n\n### Method openMessageStore\n\n    public boolean openMessageStore(str str)\n\n#### Parameters\n\nstr  \n\n#### Return Value\n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the MapiEx class.\n\n    public void new()\n\n### Method logout\n\n    public void logout()\n\n## Class MapiExAppointment\n    class MapiExAppointment extends MapiExMessage\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                 | Description                                                |\n|--------------------------------------------------------|------------------------------------------------------------|\n| public str addRecipient(str email, str name, int type) |                                                            |\n| public str entryId()                                   |                                                            |\n| public str getGlobalObjectId()                         |                                                            |\n| public boolean getRecipient(int index)                 |                                                            |\n| public int getRecipientCount()                         |                                                            |\n| public str getRecipientDisplayName()                   |                                                            |\n| public str getRecipientEmailAddress()                  |                                                            |\n| public str getRecipientEntryId()                       |                                                            |\n| public boolean getRecipients()                         |                                                            |\n| public str getRecipientSMTPAddress()                   |                                                            |\n| public int getRecipientType()                          |                                                            |\n| public str getSenderEmail()                            |                                                            |\n| public str getSenderName()                             |                                                            |\n| public str removeRecipient(str email, int type)        |                                                            |\n| public boolean save()                                  |                                                            |\n| public boolean setBody(str body)                       |                                                            |\n| public void new()                                      | Initializes a new instance of the MapiExAppointment class. |\n| public void close()                                    |                                                            |\n| public void finalize()                                 |                                                            |\n\n### Method addRecipient\n\n    public str addRecipient(str email, str name, int type)\n\n#### Parameters\n\nemail  \n\n<!-- -->\n\nname  \n\n<!-- -->\n\ntype  \n\n#### Return Value\n\n### Method entryId\n\n    public str entryId()\n\n#### Return Value\n\n### Method getGlobalObjectId\n\n    public str getGlobalObjectId()\n\n#### Return Value\n\n### Method getRecipient\n\n    public boolean getRecipient(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method getRecipientCount\n\n    public int getRecipientCount()\n\n#### Return Value\n\n### Method getRecipientDisplayName\n\n    public str getRecipientDisplayName()\n\n#### Return Value\n\n### Method getRecipientEmailAddress\n\n    public str getRecipientEmailAddress()\n\n#### Return Value\n\n### Method getRecipientEntryId\n\n    public str getRecipientEntryId()\n\n#### Return Value\n\n### Method getRecipients\n\n    public boolean getRecipients()\n\n#### Return Value\n\n### Method getRecipientSMTPAddress\n\n    public str getRecipientSMTPAddress()\n\n#### Return Value\n\n### Method getRecipientType\n\n    public int getRecipientType()\n\n#### Return Value\n\n### Method getSenderEmail\n\n    public str getSenderEmail()\n\n#### Return Value\n\n### Method getSenderName\n\n    public str getSenderName()\n\n#### Return Value\n\n### Method removeRecipient\n\n    public str removeRecipient(str email, int type)\n\n#### Parameters\n\nemail  \n\n<!-- -->\n\ntype  \n\n#### Return Value\n\n### Method save\n\n    public boolean save()\n\n#### Return Value\n\n### Method setBody\n\n    public boolean setBody(str body)\n\n#### Parameters\n\nbody  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the MapiExAppointment class.\n\n    public void new()\n\n### Method close\n\n    public void close()\n\n### Method finalize\n\n    public void finalize()\n\n## Class MapiExContact\n    class MapiExContact extends MapiExMessage\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                            | Description                                            |\n|-----------------------------------|--------------------------------------------------------|\n| public str entryId()              |                                                        |\n| public str getBody()              |                                                        |\n| public str getEmail1()            |                                                        |\n| public str getEmail1DisplayName() |                                                        |\n| public str getEmail1Type()        |                                                        |\n| public str getEmail2()            |                                                        |\n| public str getEmail2DisplayName() |                                                        |\n| public str getEmail2Type()        |                                                        |\n| public str getEmail3()            |                                                        |\n| public str getEmail3DisplayName() |                                                        |\n| public str getEmail3Type()        |                                                        |\n| public str getIMAddress()         |                                                        |\n| public boolean save()             |                                                        |\n| public boolean setBody(str body)  |                                                        |\n| public void close()               |                                                        |\n| public void finalize()            |                                                        |\n| public void new()                 | Initializes a new instance of the MapiExContact class. |\n\n### Method entryId\n\n    public str entryId()\n\n#### Return Value\n\n### Method getBody\n\n    public str getBody()\n\n#### Return Value\n\n### Method getEmail1\n\n    public str getEmail1()\n\n#### Return Value\n\n### Method getEmail1DisplayName\n\n    public str getEmail1DisplayName()\n\n#### Return Value\n\n### Method getEmail1Type\n\n    public str getEmail1Type()\n\n#### Return Value\n\n### Method getEmail2\n\n    public str getEmail2()\n\n#### Return Value\n\n### Method getEmail2DisplayName\n\n    public str getEmail2DisplayName()\n\n#### Return Value\n\n### Method getEmail2Type\n\n    public str getEmail2Type()\n\n#### Return Value\n\n### Method getEmail3\n\n    public str getEmail3()\n\n#### Return Value\n\n### Method getEmail3DisplayName\n\n    public str getEmail3DisplayName()\n\n#### Return Value\n\n### Method getEmail3Type\n\n    public str getEmail3Type()\n\n#### Return Value\n\n### Method getIMAddress\n\n    public str getIMAddress()\n\n#### Return Value\n\n### Method save\n\n    public boolean save()\n\n#### Return Value\n\n### Method setBody\n\n    public boolean setBody(str body)\n\n#### Parameters\n\nbody  \n\n#### Return Value\n\n### Method close\n\n    public void close()\n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the MapiExContact class.\n\n    public void new()\n\n## Class MapiExMail\n    class MapiExMail extends MapiExMessage\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                 | Description                                         |\n|--------------------------------------------------------|-----------------------------------------------------|\n| public str addRecipient(str email, str name, int type) |                                                     |\n| public str entryId()                                   |                                                     |\n| public boolean getRecipient(int index)                 |                                                     |\n| public int getRecipientCount()                         |                                                     |\n| public str getRecipientDisplayName()                   |                                                     |\n| public str getRecipientEmailAddress()                  |                                                     |\n| public str getRecipientEntryId()                       |                                                     |\n| public boolean getRecipients()                         |                                                     |\n| public str getRecipientSMTPAddress()                   |                                                     |\n| public int getRecipientType()                          |                                                     |\n| public str getSenderEmail()                            |                                                     |\n| public str getSenderName()                             |                                                     |\n| public str removeRecipient(str email, int type)        |                                                     |\n| public boolean save()                                  |                                                     |\n| public boolean saveMsgToFile(str fileName)             |                                                     |\n| public boolean send()                                  |                                                     |\n| public boolean setBody(str body)                       |                                                     |\n| public void finalize()                                 |                                                     |\n| public void close()                                    |                                                     |\n| public void new()                                      | Initializes a new instance of the MapiExMail class. |\n\n### Method addRecipient\n\n    public str addRecipient(str email, str name, int type)\n\n#### Parameters\n\nemail  \n\n<!-- -->\n\nname  \n\n<!-- -->\n\ntype  \n\n#### Return Value\n\n### Method entryId\n\n    public str entryId()\n\n#### Return Value\n\n### Method getRecipient\n\n    public boolean getRecipient(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method getRecipientCount\n\n    public int getRecipientCount()\n\n#### Return Value\n\n### Method getRecipientDisplayName\n\n    public str getRecipientDisplayName()\n\n#### Return Value\n\n### Method getRecipientEmailAddress\n\n    public str getRecipientEmailAddress()\n\n#### Return Value\n\n### Method getRecipientEntryId\n\n    public str getRecipientEntryId()\n\n#### Return Value\n\n### Method getRecipients\n\n    public boolean getRecipients()\n\n#### Return Value\n\n### Method getRecipientSMTPAddress\n\n    public str getRecipientSMTPAddress()\n\n#### Return Value\n\n### Method getRecipientType\n\n    public int getRecipientType()\n\n#### Return Value\n\n### Method getSenderEmail\n\n    public str getSenderEmail()\n\n#### Return Value\n\n### Method getSenderName\n\n    public str getSenderName()\n\n#### Return Value\n\n### Method removeRecipient\n\n    public str removeRecipient(str email, int type)\n\n#### Parameters\n\nemail  \n\n<!-- -->\n\ntype  \n\n#### Return Value\n\n### Method save\n\n    public boolean save()\n\n#### Return Value\n\n### Method saveMsgToFile\n\n    public boolean saveMsgToFile(str fileName)\n\n#### Parameters\n\nfileName  \n\n#### Return Value\n\n### Method send\n\n    public boolean send()\n\n#### Return Value\n\n### Method setBody\n\n    public boolean setBody(str body)\n\n#### Parameters\n\nbody  \n\n#### Return Value\n\n### Method finalize\n\n    public void finalize()\n\n### Method close\n\n    public void close()\n\n### Method new\n\nInitializes a new instance of the MapiExMail class.\n\n    public void new()\n\n## Class MapiExMessage\n    class MapiExMessage extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                           | Description                                            |\n|----------------------------------|--------------------------------------------------------|\n| public str entryId()             |                                                        |\n| public str getBody()             |                                                        |\n| public boolean save()            |                                                        |\n| public boolean setBody(str body) |                                                        |\n| public void new()                | Initializes a new instance of the MapiExMessage class. |\n| public void finalize()           |                                                        |\n| public void close()              |                                                        |\n\n### Method entryId\n\n    public str entryId()\n\n#### Return Value\n\n### Method getBody\n\n    public str getBody()\n\n#### Return Value\n\n### Method save\n\n    public boolean save()\n\n#### Return Value\n\n### Method setBody\n\n    public boolean setBody(str body)\n\n#### Parameters\n\nbody  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the MapiExMessage class.\n\n    public void new()\n\n### Method finalize\n\n    public void finalize()\n\n### Method close\n\n    public void close()\n\n## Class MapiExTask\n    class MapiExTask extends MapiExMessage\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                           | Description                                         |\n|----------------------------------|-----------------------------------------------------|\n| public str entryId()             |                                                     |\n| public str getBody()             |                                                     |\n| public boolean save()            |                                                     |\n| public boolean setBody(str body) |                                                     |\n| public void finalize()           |                                                     |\n| public void close()              |                                                     |\n| public void new()                | Initializes a new instance of the MapiExTask class. |\n\n### Method entryId\n\n    public str entryId()\n\n#### Return Value\n\n### Method getBody\n\n    public str getBody()\n\n#### Return Value\n\n### Method save\n\n    public boolean save()\n\n#### Return Value\n\n### Method setBody\n\n    public boolean setBody(str body)\n\n#### Parameters\n\nbody  \n\n#### Return Value\n\n### Method finalize\n\n    public void finalize()\n\n### Method close\n\n    public void close()\n\n### Method new\n\nInitializes a new instance of the MapiExTask class.\n\n    public void new()\n\n## Class MapiFileDesc\n    class MapiFileDesc extends Object\n\nThe MapiFileDesc class gets and sets the files that are attached to messages.\n\n### Remarks\n\nThe file description consists of two types of information for the file:\n\n-   A path method, which points to a file on disk\n-   A fileName method, which contains the file name as it will be presented to the user.\n\n### Examples\n\n    static void example() \n    { \n        MapiMessage msg = New MapiMessage(); \n        MapiFileDesc attach = new MapiFileDesc(); \n        attach.Path(\"C:\\\\files\\\\myfile.txt\"); \n    }\n\n### Methods\n\n| Method                                | Description                                           |\n|---------------------------------------|-------------------------------------------------------|\n| public str fileName(\\[str filename\\]) |                                                       |\n| public str path(\\[str thePath\\])      |                                                       |\n| public void new()                     | Initializes a new instance of the MapiFileDesc class. |\n| public void finalize()                |                                                       |\n\n### Method fileName\n\n    public str fileName([str filename])\n\n#### Parameters\n\nfilename  \n\n#### Return Value\n\n### Method path\n\n    public str path([str thePath])\n\n#### Parameters\n\nthePath  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the MapiFileDesc class.\n\n    public void new()\n\n### Method finalize\n\n    public void finalize()\n\n## Class MapiMessage\n    class MapiMessage extends Object\n\nThe MapiMessage class contains a message that is sent to or received from the MAPI system. The message includes a subject, text, recipient information, and attachment information.\n\n### Remarks\n\nWhen you send or receive a message, the message is passed to and from the MAPI system as a MapiMessage object.\n\n### Examples\n\n### Methods\n\n| Method                                                        | Description                                                                                             |\n|---------------------------------------------------------------|---------------------------------------------------------------------------------------------------------|\n| public str conversationID(\\[str conversationId\\])             | Gets or sets the string that identifies the conversation thread to which the message belongs.           |\n| public str dateReceived(\\[Date theDate\\])                     | Returns the date when the message was received.                                                         |\n| public int flags(\\[int flags\\])                               | Set or get a bitmask of the message status flags.                                                       |\n| public MapiFileDesc getFileNo(int fileNo)                     | Gets a file attachment from a message.                                                                  |\n| public MapiRecipDesc getRecipNo(int recipentNo)               | Retrieves information about a message recipient in a MapiRecipDesc object.                              |\n| public str messageType(\\[str messageType\\])                   | Gets or sets the string that indicates that the message is not of the IPM (interpersonal message) type. |\n| public int numFiles(\\[int numFiles\\])                         |                                                                                                         |\n| public int numRecips(\\[int numRecips\\])                       |                                                                                                         |\n| public MapiRecipDesc originator(\\[MapiRecipDesc originator\\]) |                                                                                                         |\n| public str subject(\\[str subject\\])                           |                                                                                                         |\n| public str text(\\[str text\\])                                 |                                                                                                         |\n| public void new()                                             | Initializes an instance of the MapiMessage class.                                                       |\n| public void finalize()                                        |                                                                                                         |\n| public void setRecipNo(int recipNo, MapiRecipDesc recipient)  | Adds a recipient to the message.                                                                        |\n| public void setFileNo(int fileNo, MapiFileDesc file)          | Sets a file attachment for the message.                                                                 |\n\n### Method conversationID\n\nGets or sets the string that identifies the conversation thread to which the message belongs.\n\n    public str conversationID([str conversationId])\n\n#### Parameters\n\nconversationId  \nThe ID of the conversation thread; optional.\n\n#### Return Value\n\nA string that identifies the conversation thread to which the message belongs.\n\n#### Remarks\n\nSome messaging systems might ignore and not return this member.\n\n### Method dateReceived\n\nReturns the date when the message was received.\n\n    public str dateReceived([Date theDate])\n\n#### Parameters\n\ntheDate  \nThe date when the message was received; optional.\n\n#### Return Value\n\nA string that indicates the date when the message was received.\n\n#### Remarks\n\nThe format of the string that is returned is YYYY/MM/DD HH:MM and uses a 24-hour clock.\n\n### Method flags\n\nSet or get a bitmask of the message status flags.\n\n    public int flags([int flags])\n\n#### Parameters\n\nflags  \nThe message status flags; optional.\n\n#### Return Value\n\nA bitmask of the message status flags.\n\n#### Remarks\n\nThe following flags can be set:\n\n-   \\#MAPI\\_RECEIPT\\_REQUESTED – Receipt notification is requested. Client applications set this bit when they send a message.\n-   \\#MAPI\\_SENT – The message has been sent.\n-   \\#MAPI\\_UNREAD – The message has not been read.\n\n### Method getFileNo\n\nGets a file attachment from a message.\n\n    public MapiFileDesc getFileNo(int fileNo)\n\n#### Parameters\n\nfileNo  \nThe index of the attachment to retrieve. The index starts at 1, and the total number of attachments can be retrieved using the numFiles method.\n\n#### Return Value\n\nReturns a MapiFileDesc object that contains information about the attachment.\n\n#### Remarks\n\nThe attached file is returned in a MapiFileDesc object.\n\n#### Examples\n\n    { \n        MapiFileDesc attachment; \n        MapiMessage message; \n        // Retrieve message. \n        // ...  \n        if (message.NumFiles() >= 1) \n        { \n            attachment = message.GetFileNo(1); \n        } \n    }\n\n### Method getRecipNo\n\nRetrieves information about a message recipient in a MapiRecipDesc object.\n\n    public MapiRecipDesc getRecipNo(int recipentNo)\n\n#### Parameters\n\nrecipentNo  \nThe number of the recipient to retrieve. The numbering starts at 1, and the total number of recipients can be read by using the numRecips method.\n\n#### Return Value\n\nA MapiRecipDesc object that describes the recipient or nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n### Method messageType\n\nGets or sets the string that indicates that the message is not of the IPM (interpersonal message) type.\n\n    public str messageType([str messageType])\n\n#### Parameters\n\nmessageType  \nThe messageType value to set for the message; optional.\n\n#### Return Value\n\nA messagetype string.\n\n#### Remarks\n\nApplications can select message types for messages that are not IPMs. Clients that support only IPMs can ignore the MessageType member when they read messages and set it to empty when they send messages.\n\n### Method numFiles\n\n    public int numFiles([int numFiles])\n\n#### Parameters\n\nnumFiles  \n\n#### Return Value\n\n### Method numRecips\n\n    public int numRecips([int numRecips])\n\n#### Parameters\n\nnumRecips  \n\n#### Return Value\n\n### Method originator\n\n    public MapiRecipDesc originator([MapiRecipDesc originator])\n\n#### Parameters\n\noriginator  \n\n#### Return Value\n\n### Method subject\n\n    public str subject([str subject])\n\n#### Parameters\n\nsubject  \n\n#### Return Value\n\n### Method text\n\n    public str text([str text])\n\n#### Parameters\n\ntext  \n\n#### Return Value\n\n### Method new\n\nInitializes an instance of the MapiMessage class.\n\n    public void new()\n\n### Method finalize\n\n    public void finalize()\n\n### Method setRecipNo\n\nAdds a recipient to the message.\n\n    public void setRecipNo(int recipNo, MapiRecipDesc recipient)\n\n#### Parameters\n\nrecipNo  \nThe MapiRecipDesc object that describes the recipient.\n\n<!-- -->\n\nrecipient  \nThe MapiRecipDesc object that describes the recipient.\n\n#### Remarks\n\nIf you have to get a correct MapiRecipDesc object from a name that a user entered, use the resolveName method.\n\n### Method setFileNo\n\nSets a file attachment for the message.\n\n    public void setFileNo(int fileNo, MapiFileDesc file)\n\n#### Parameters\n\nfileNo  \nThe MapiFileDesc object that describes the attachment.\n\n<!-- -->\n\nfile  \nThe MapiFileDesc object that describes the attachment.\n\n#### Remarks\n\nThe attachments are numbered from 1. Therefore, the first attachment should be numbered 1. You can call the numFiles method to retrieve the number of attachments.\n\n#### Examples\n\n    { \n        MapiMessage msg = new MapiMessage(); \n        MapiFileDesc attachment = new MapiFileDesc(); \n        attachment.Path(\"C:\\\\files\\\\info.txt\"); \n        msg.SetFileNo(1,attachment); \n    }\n\n## Class MapiRecipDesc\n    class MapiRecipDesc extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                    | Description                                                                                                                                   |\n|-------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public str address(\\[str Address\\])       |                                                                                                                                               |\n| public str name(\\[str Name\\])             | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public int recipClass(\\[int RecipClass\\]) |                                                                                                                                               |\n| public void new()                         | Initializes a new instance of the MapiRecipDesc class.                                                                                        |\n| public void finalize()                    |                                                                                                                                               |\n\n### Method address\n\n    public str address([str Address])\n\n#### Parameters\n\nAddress  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str Name])\n\n#### Parameters\n\nName  \n\n#### Return Value\n\nThe name that is used in thte code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method recipClass\n\n    public int recipClass([int RecipClass])\n\n#### Parameters\n\nRecipClass  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the MapiRecipDesc class.\n\n    public void new()\n\n### Method finalize\n\n    public void finalize()\n\n## Class MapIterator\n    class MapIterator extends Object\n\nThe MapIterator class is used to iterate over the elements in a map.\n\n### Remarks\n\nMap iterators are used to iterate over the elements in a map. They can be viewed as simple pointers into the maps over which they iterate. Functionality is available to start the iteration, determine whether more (key, value) pairs are available, and fetch the element that is pointed to by the iterator. It is better to use the MapEnumerator class than the MapIterator class. Map iterators and the maps over which they iterate must be on the same client/server side. If you use the MapIterator class and code is marked as Called from, the map and the iterator could end up on different tiers, and the code will fail. If you use the MapEnumerator class, the enumerator is automatically created on the same tier as the map. Additionally, if you use the MapIterator class, you must explicitly call the more and next methods to move to the next item in a map. If you use the MapEnumerator class, you only have to call the moveNext method. The sequence in which the elements are inserted does not determine the order in which they occur. The order is defined by the ordering of the elements. Elements that have lower keys appear before elements that have higher keys. The usual ordering for the types is used. However, if the keys are objects, the addresses of the objects are used to supply the ordering, and therefore no specific ordering can be inferred. The addresses of the objects are transient by nature.\n\n### Examples\n\nThe following example creates a map and adds three (key, value) pairs. It then iterates through the map and prints information about each map element.\n\n    { \n        Map iim = new Map(Types::Integer, Types::Class); \n        MapIterator it; \n        // Add some elements into the map \n        iim.insert(1, new query()); \n        iim.insert(2, new query()); \n        iim.insert(4, new query()); \n        // Create a map iterator \n        it = new MapIterator (iim); \n        // Print \"[int -> class] iterator\" \n        print it.definitionString();     \n        // Go on for as long as elements are found in the map \n        while (it.more()) \n        { \n            // Print each key (1, 2, 4) \n            print it.key();  \n            // Print text representation of each value \n            print it.value().toString();  \n            // Fetch next element in map \n            it.next(); \n        } \n        pause; \n    }\n\n### Methods\n\n| Method                             | Description                                                                                    |\n|------------------------------------|------------------------------------------------------------------------------------------------|\n| public str definitionString()      | Retrieves a textual representation of the iterator type, such as \"\\[int -&gt; str\\] iterator\". |\n| public AnyType domainValue()       | Returns the value of the key in the (key, value) pair that is referred to by the iterator.     |\n| public boolean find(AnyType value) | Searches for the specified key value.                                                          |\n| public AnyType key()               | Returns the key from the (key, value) pair that is referred to by the iterator.                |\n| public boolean more()              | Determines whether the iterator finds a valid (key, value) pair.                               |\n| public AnyType rangeValue()        | Returns the value of the value in the (key, value) pair that is referred to by the iterator.   |\n| public str toString()              | Retrieves a textual representation of the iterator.                                            |\n| public AnyType value()             | Returns the value from the (key, value) pair that is referred to by the iterator.              |\n| public container valuePair()       | Retrieves a container that holds the key and the value.                                        |\n| public void next()                 | Moves the iterator to the next (key, value) pair.                                              |\n| public void new(Map map)           | Creates a new iterator for a map that lets you traverse through the elements in the map.       |\n| public void begin()                | Moves the iterator to the start of the map.                                                    |\n| public void end()                  | Moves the iterator past the last element in the map.                                           |\n| public void delete()               | Removes from the map the element that is pointed to by the iterator.                           |\n\n### Method definitionString\n\nRetrieves a textual representation of the iterator type, such as \"\\[int -&gt; str\\] iterator\".\n\n    public str definitionString()\n\n#### Return Value\n\nA string that describes the iterator.\n\n### Method domainValue\n\nReturns the value of the key in the (key, value) pair that is referred to by the iterator.\n\n    public AnyType domainValue()\n\n#### Return Value\n\nThe value of the first item in the map element that is currently referred to by the iterator.\n\n### Method find\n\nSearches for the specified key value.\n\n    public boolean find(AnyType value)\n\n#### Parameters\n\nvalue  \nThe value to search for.\n\n#### Return Value\n\ntrue if the value is found; otherwise, false.\n\n#### Remarks\n\nIf true is returned, the method positions the iterator at the element; otherwise, the MapIterator.more method returns false.\n\n### Method key\n\nReturns the key from the (key, value) pair that is referred to by the iterator.\n\n    public AnyType key()\n\n#### Return Value\n\nThe key value of the map entry that is denoted by the iterator.\n\n#### Remarks\n\nUse the SetIterator.more method to test whether an element exists before you try to retrieve the key value of the map element.\n\n#### Examples\n\nThe following example iterates through a map and returns a description of all the elements in the map.\n\n    static str writeMap (Map m) \n    { \n        MapIterator it = new MapIterator(m); \n        str result; \n        while (it.more()) \n        { \n            result += it.key() + '\\n' + it.value() + '\\n'; \n            it.next(); \n        } \n        return result; \n    }\n\n### Method more\n\nDetermines whether the iterator finds a valid (key, value) pair.\n\n    public boolean more()\n\n#### Return Value\n\ntrue if more (key, value) pairs are available in the map; otherwise, false.\n\n#### Remarks\n\nIf you try to access an element that is pointed to by an iterator when the more method returns false, you receive an error. The more method only tests whether the iterator points to a valid element. It does not test whether there are more elements in the map.\n\n#### Examples\n\nThe following example iterates through a map by using the more method to check whether there are still elements in the map. It then returns a description of all the elements in the map.\n\n    static str writeMap (Map m) \n    { \n        MapIterator it = new MapIterator(m); \n        str result; \n        while (it.more()) \n        { \n            result += it.key() + '\\n' + it.value() + '\\n'; \n            it.next(); \n        } \n        return result; \n    }\n\n### Method rangeValue\n\nReturns the value of the value in the (key, value) pair that is referred to by the iterator.\n\n    public AnyType rangeValue()\n\n#### Return Value\n\nThe value of the second item in the map element that is currently referred to by the iterator.\n\n#### Remarks\n\nThe rangeValue method has the same functionality as the MapIterator.value method, but it is available as a counterpart to the domainValue method.\n\n### Method toString\n\nRetrieves a textual representation of the iterator.\n\n    public str toString()\n\n#### Return Value\n\nThe string that describes the iterator.\n\n#### Remarks\n\nIf the iterator points to the first element in the set, the string will contain an indication of this, in the form: \"(begin)\\[ *value*\\]\". If the iterator does not point to an element (that is, if the MapIterator.more method returns false), the string that is returned is \"(end)\". If the iterator points to a value, the string is \"\\[ *value*\\]\", where *value* is a string representation of the element value.\n\n#### Examples\n\nThe following example iterates through an integer or class map, and prints information about each map element. It uses the MapIterator.toString method to return a textual representation of the class in each map element.\n\n    { \n        Map iim = new Map(Types::Integer, Types::Class); \n        MapIterator it; \n        // Add some elements into the map \n        iim.insert(1, new query()); \n        iim.insert(2, new query()); \n        iim.insert(4, new query()); \n        // Create a map iterator \n        it = new MapIterator (iim); \n        // Go on for as long as elements are found in the map \n        while (it.more()) \n        { \n            // Print each key (1, 2, 4) \n            print it.key();  \n            // Print text representation of each value \n            print it.value().toString();  \n            // Fetch next element in map \n            it.next(); \n        } \n        pause; \n    }\n\n### Method value\n\nReturns the value from the (key, value) pair that is referred to by the iterator.\n\n    public AnyType value()\n\n#### Return Value\n\nThe value from the map element that is denoted by the map iterator.\n\n#### Remarks\n\nUse the MapIterator.more method to test whether an element exists before you try to retrieve the key value of the map element.\n\n#### Examples\n\nThe following example iterates through a map and returns a list of all the elements in the map.\n\n    static str writeMap (Map m) \n    { \n        MapIterator it = new MapIterator(m); \n        str result; \n        while (it.more()) \n        { \n            result += it.key() + '\\n' + it.value() + '\\n'; \n            it.next(); \n        } \n        return result; \n    }\n\n### Method valuePair\n\nRetrieves a container that holds the key and the value.\n\n    public container valuePair()\n\n#### Return Value\n\nA container that holds the key and the value.\n\n#### Remarks\n\nObjects cannot reside in containers. Therefore, an exception is raised if either the key or the value is an object.\n\n### Method next\n\nMoves the iterator to the next (key, value) pair.\n\n    public void next()\n\n#### Remarks\n\nYou can use the MapIterator.more method to determine whether there are any more elements in the map.\n\n#### Examples\n\nThe following example uses the next method to iterate through a map and returns a list of all the elements in the map.\n\n    static str writeMap (Map m) \n    { \n        MapIterator it = new MapIterator(m); \n        str result; \n        while (it.more()) \n        { \n            result += it.key() + '\\n' + it.value() + '\\n'; \n            it.next(); \n        } \n        return result; \n    }\n\n### Method new\n\nCreates a new iterator for a map that lets you traverse through the elements in the map.\n\n    public void new(Map map)\n\n#### Parameters\n\nmap  \nThe map for which to create an iterator.\n\n#### Remarks\n\nThe iterator is positioned at the first value in the map if the map is not empty.\n\n#### Examples\n\nThe following example creates a map of (integer, class) pairs and then creates an iterator to traverse the map.\n\n    Map iim = new Map(Types::Integer, Types::Class); \n    MapIterator it; \n    it = new MapIterator (iim);\n\n### Method begin\n\nMoves the iterator to the start of the map.\n\n    public void begin()\n\n#### Remarks\n\nNewly created map iterators are positioned at the first element in the map, so you do not have to call the begin method before you iterate through the set. You must call the begin method if you want to reset the pointer.\n\n### Method end\n\nMoves the iterator past the last element in the map.\n\n    public void end()\n\n#### Remarks\n\nAfter this method runs, the MapIterator.more method will return false.\n\n### Method delete\n\nRemoves from the map the element that is pointed to by the iterator.\n\n    public void delete()\n\n#### Remarks\n\nThe iterator points to the next element after the delete method is invoked.\n\n## Class MemberFunction\n    class MemberFunction extends TreeNode\n\nThe MemberFunction class provides information about a specified node in the Finance and Operations Application Object Tree (AOT), such as a form, report, or class.\n\n### Remarks\n\nThis class lets you create, read, update, and delete X++ code and metadata. Make sure that the user has access to the development security key (SysDevelopment) before this API is called. You can use the ::findNode method to assign a node to an instance of the MemberFunction class.\n\n### Examples\n\nThe following example uses the TreeNode::findNode method to assign the node for the AddressSelectForm.callerDataSource method to an instance of the MemberFunction class. The MemberFunction.AOTgetSource Method method returns the method source code.\n\n    void getMemberFunction() \n    { \n        MemberFunction memberFunction; \n        str name; \n        boolean isStatic; \n        str source; \n        try \n        { \n            memberFunction = TreeNode::findNode( \n               '\\\\Classes\\\\AddressSelectForm\\\\callerDataSource'); \n            if(!memberFunction) \n            { \n                throw exception::Error; \n            } \n            source = memberFunction.AOTgetSource(); \n            print source; \n            pause; \n        } \n        catch (exception::Error) \n        { \n            print \"The specified node does not exist.\"; \n            pause; \n            } \n        } \n    }\n\n### Methods\n\n| Method                                                     | Description                                                                                                                             |\n|------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public str AOTgetSource()                                  | Provides the source code for a specified node in the AOT, such as a class or method.                                                    |\n| public boolean canAddEventHandler()                        |                                                                                                                                         |\n| public boolean isEvent()                                   |                                                                                                                                         |\n| public boolean isStatic()                                  | Indicates whether a method is static.                                                                                                   |\n| public str name(\\[str value\\])                             | Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object. |\n| public void AOTedit(\\[int Line\\], \\[int Column\\])          | Opens the appropriate editor for a specified node in the AOT.                                                                           |\n| public void new()                                          | Initializes a new instance of the MemberFunction class.                                                                                 |\n| public void AOTsetSource(str source, \\[boolean isStatic\\]) | Sets the source code for a specified node in the AOT, such as a class or method.                                                        |\n\n### Method AOTgetSource\n\nProvides the source code for a specified node in the AOT, such as a class or method.\n\n    public str AOTgetSource()\n\n#### Return Value\n\nA string value for the source code; nullNothingnullptrunita null reference (Nothing in Visual Basic) if the node does not contain source code.\n\n### Method canAddEventHandler\n\n    public boolean canAddEventHandler()\n\n#### Return Value\n\n### Method isEvent\n\n    public boolean isEvent()\n\n#### Return Value\n\n### Method isStatic\n\nIndicates whether a method is static.\n\n    public boolean isStatic()\n\n#### Return Value\n\ntrue if the method is static; otherwise, false.\n\n#### Remarks\n\nThis method is associated with a specified node in the AOT, such as a form, report, or class. This method is used primarily in conjunction with the MemberFunction::AOTsetSource method.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nA string that specifies a node; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It starts with a letter.\n-   It doesn't exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, and classes.\n\n### Method AOTedit\n\nOpens the appropriate editor for a specified node in the AOT.\n\n    public void AOTedit([int Line], [int Column])\n\n#### Parameters\n\nLine  \nAn integer that specifies the column position for the cursor; optional.\n\n<!-- -->\n\nColumn  \nAn integer that specifies the column position for the cursor; optional.\n\n### Method new\n\nInitializes a new instance of the MemberFunction class.\n\n    public void new()\n\n### Method AOTsetSource\n\nSets the source code for a specified node in the AOT, such as a class or method.\n\n    public void AOTsetSource(str source, [boolean isStatic])\n\n#### Parameters\n\nsource  \nA Boolean value: true for a static method or false for an instance method; optional.\n\n<!-- -->\n\nisStatic  \nA Boolean value: true for a static method or false for an instance method; optional.\n\n## Class Menu\n    class Menu extends TreeNode\n\nThe Menu system class lets you configure and run any of the Finance and OperationsMenu objects from code.\n\n### Remarks\n\nThe TreeNode system class serves as a more general approach to the menus in the Finance and Operations Application Object Tree (AOT). You use the Menu class to create or manipulate the menus contents, such as submenus and menu items. This class lets you create, read, update, and delete X++ code and metadata. Make sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                                               |\n|--------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|\n| public str changedBy(\\[str value\\])                                      | Gets or sets the name of the user who last changed the application object.                                                |\n| public Date changedDate(\\[Date value\\])                                  | Gets or sets the date an application object was last changed.                                                             |\n| public str changedTime(\\[str value\\])                                    | Gets or sets the time an application object was last changed.                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\]) | Gets or sets the configuration key that is assigned to the control.                                                       |\n| public str countryRegionCodes(\\[str value\\])                             |                                                                                                                           |\n| public str createdBy(\\[str value\\])                                      | Gets or sets the name of the user who created the application object.                                                     |\n| public Date creationDate(\\[Date value\\])                                 | Gets or sets the date an application object was created.                                                                  |\n| public str creationTime(\\[str value\\])                                   |                                                                                                                           |\n| public str disabledImage(\\[str value\\])                                  | Gets or sets the disabled image of the button.                                                                            |\n| public int disabledImageLocation(\\[int value\\])                          |                                                                                                                           |\n| public int disabledResource(\\[int value\\])                               | Gets or sets the resource ID of the image to use as the disabled button image.                                            |\n| public int imageLocation(\\[int value\\])                                  |                                                                                                                           |\n| public str label(\\[str value\\])                                          | Gets or sets the label for a control.                                                                                     |\n| public str menuFunctionName(\\[str name\\])                                |                                                                                                                           |\n| public str menuItemName(\\[str value\\])                                   |                                                                                                                           |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])                 |                                                                                                                           |\n| public str menuName()                                                    |                                                                                                                           |\n| public str name(\\[str value\\])                                           | Gets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object. |\n| public int neededAccessLevel(\\[int value\\])                              | Gets or sets the neededAccessLevel property for the MenuFunction class.                                                   |\n| public str normalImage(\\[str value\\])                                    |                                                                                                                           |\n| public int normalResource(\\[int value\\])                                 |                                                                                                                           |\n| public Guid origin(\\[Guid value\\])                                       |                                                                                                                           |\n| public str parameter(\\[str parameter\\])                                  |                                                                                                                           |\n| public str parameters(\\[str value\\])                                     | Gets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.                    |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                |                                                                                                                           |\n| public boolean setCompany(\\[boolean value\\])                             |                                                                                                                           |\n| public str shortCut(\\[str value\\])                                       |                                                                                                                           |\n| public boolean showParentModule(\\[boolean value\\])                       |                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                |                                                                                                                           |\n| public str webTarget(\\[str value\\])                                      |                                                                                                                           |\n| public void save()                                                       |                                                                                                                           |\n| public void new(str Name)                                                | Initializes a new instance of the TreeNode class.                                                                         |\n| public void makeWebMenu(Object outputClass)                              |                                                                                                                           |\n| public void addMenuitem(xMenuFunction menuFunction)                      | Adds a menu item to the menu.                                                                                             |\n| public void setTreeNodeName(str name)                                    |                                                                                                                           |\n| public void addMenuReference(Menu menu)                                  |                                                                                                                           |\n| public void addSubmenu(str name)                                         | Adds a submenu to the menu.                                                                                               |\n| public void addSeparator()                                               | Adds a menu separator to the menu.                                                                                        |\n\n### Method changedBy\n\nGets or sets the name of the user who last changed the application object.\n\n    public str changedBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method changedDate\n\nGets or sets the date an application object was last changed.\n\n    public Date changedDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was last changed.\n\n### Method changedTime\n\nGets or sets the time an application object was last changed.\n\n    public str changedTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe time an application object was last changed.\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method createdBy\n\nGets or sets the name of the user who created the application object.\n\n    public str createdBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method creationDate\n\nGets or sets the date an application object was created.\n\n    public Date creationDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was created.\n\n### Method creationTime\n\n    public str creationTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method disabledImage\n\nGets or sets the disabled image of the button.\n\n    public str disabledImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe full name of an image file. The system supports all of the GDI-supported image formats.\n\n#### Remarks\n\nThis property has precedence over the disabledResource property . It is used if both of these properties are set.\n\n### Method disabledImageLocation\n\n    public int disabledImageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method disabledResource\n\nGets or sets the resource ID of the image to use as the disabled button image.\n\n    public int disabledResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe resource ID of the image to use as the disabled button image. Both icon and bitmap images are supported.\n\n### Method imageLocation\n\n    public int imageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method menuFunctionName\n\n    public str menuFunctionName([str name])\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuName\n\n    public str menuName()\n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method neededAccessLevel\n\nGets or sets the neededAccessLevel property for the MenuFunction class.\n\n    public int neededAccessLevel([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the neededAccessLevel property.\n\n#### Remarks\n\nThe possible values for the AccessType system enumuration value are as follows:\n\n-   AccessType::NoAccess.\n-   AccessType::View.\n-   AccessType::Edit.\n-   AccessType::Add.\n-   AccessType::Delete.\n\n### Method normalImage\n\n    public str normalImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalResource\n\n    public int normalResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method origin\n\n    public Guid origin([Guid value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method parameter\n\n    public str parameter([str parameter])\n\n#### Parameters\n\nparameter  \n\n#### Return Value\n\n### Method parameters\n\nGets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.\n\n    public str parameters([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe list of parameters that are passed to the object.\n\n#### Remarks\n\nThe parameters string format is Parameter1=Value1, Parameter2=Value2, and so on.cts ignore passed, unrecognized parameters.\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method setCompany\n\n    public boolean setCompany([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method shortCut\n\n    public str shortCut([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showParentModule\n\n    public boolean showParentModule([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method save\n\n    public void save()\n\n### Method new\n\nInitializes a new instance of the TreeNode class.\n\n    public void new(str Name)\n\n#### Parameters\n\nName  \n\n### Method makeWebMenu\n\n    public void makeWebMenu(Object outputClass)\n\n#### Parameters\n\noutputClass  \n\n### Method addMenuitem\n\nAdds a menu item to the menu.\n\n    public void addMenuitem(xMenuFunction menuFunction)\n\n#### Parameters\n\nmenuFunction  \nThe menu item to add.\n\n### Method setTreeNodeName\n\n    public void setTreeNodeName(str name)\n\n#### Parameters\n\nname  \n\n### Method addMenuReference\n\n    public void addMenuReference(Menu menu)\n\n#### Parameters\n\nmenu  \n\n### Method addSubmenu\n\nAdds a submenu to the menu.\n\n    public void addSubmenu(str name)\n\n#### Parameters\n\nname  \nA string expression that evaluates to the name of the submenu to add to the menu.\n\n### Method addSeparator\n\nAdds a menu separator to the menu.\n\n    public void addSeparator()\n\n## Class MenuItem\n    class MenuItem extends TreeNode\n\nThe MenuItem class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nA menu item represents the user interface of a menu function. Menu items are linked to a MenuFunction object, which runs when the user selects the menu item. Make sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                     | Description                                                                                                                                   |\n|------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public str allowRootNavigation(\\[str value\\])              |                                                                                                                                               |\n| public boolean isDisplayedInContentArea(\\[boolean value\\]) |                                                                                                                                               |\n| public str label(\\[str name\\])                             |                                                                                                                                               |\n| public str menuFunctionName(\\[str name\\])                  |                                                                                                                                               |\n| public str menuItemName(\\[str value\\])                     |                                                                                                                                               |\n| public MenuItemType menuItemType(\\[MenuItemType value\\])   |                                                                                                                                               |\n| public str name(\\[str value\\])                             | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public str parameter(\\[str parameter\\])                    |                                                                                                                                               |\n| public str parameters(\\[str value\\])                       | Gets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.                                        |\n| public str shortCut(\\[str value\\])                         |                                                                                                                                               |\n| public boolean showParentModule(\\[boolean value\\])         |                                                                                                                                               |\n| public boolean visible(\\[boolean value\\])                  |                                                                                                                                               |\n| public str webTarget(\\[str value\\])                        |                                                                                                                                               |\n\n### Method allowRootNavigation\n\n    public str allowRootNavigation([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isDisplayedInContentArea\n\n    public boolean isDisplayedInContentArea([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\n    public str label([str name])\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method menuFunctionName\n\n    public str menuFunctionName([str name])\n\n#### Parameters\n\nname  \n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method menuItemType\n\n    public MenuItemType menuItemType([MenuItemType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method parameter\n\n    public str parameter([str parameter])\n\n#### Parameters\n\nparameter  \n\n#### Return Value\n\n### Method parameters\n\nGets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.\n\n    public str parameters([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe list of parameters that are passed to the object.\n\n#### Remarks\n\nThe parameters string format is Parameter1=Value1, Parameter2=Value2, and so on.cts ignore passed, unrecognized parameters.\n\n### Method shortCut\n\n    public str shortCut([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showParentModule\n\n    public boolean showParentModule([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method webTarget\n\n    public str webTarget([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n## Class MenuReference\n    class MenuReference extends TreeNode\n\nThe MenuReference class enables you to create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                | Description |\n|-----------------------|-------------|\n| public str menuName() |             |\n\n### Method menuName\n\n    public str menuName()\n\n#### Return Value\n\n## Class MessageWin\n    class MessageWin extends Object\n\nThe MessageWin class gives access to the messageWindow class of the Finance and Operations development environment.\n\n### Remarks\n\nAlthough you can instantiate more MessageWin objects, they will all refer to the same message window on the screen.\n\n### Examples\n\n### Methods\n\n| Method                        | Description                                           |\n|-------------------------------|-------------------------------------------------------|\n| public void clear()           | Clears the message window.                            |\n| public void activate()        | Makes the message window the currently active window. |\n| public void addLine(str line) | Writes a line to the message window.                  |\n\n### Method clear\n\nClears the message window.\n\n    public void clear()\n\n### Method activate\n\nMakes the message window the currently active window.\n\n    public void activate()\n\n#### Remarks\n\nBefore version 2.11, the message window would get focus when lines were added or contents were cleared. Starting in version 2.11, the developer must call this method to make the message window the top window.\n\n### Method addLine\n\nWrites a line to the message window.\n\n    public void addLine(str line)\n\n#### Parameters\n\nline  \nA string that contains the line to write to the message window.\n\n## Class MethodInfo\n    class MethodInfo extends Object\n\nProvides information about a specified method.\n\n### Remarks\n\nAssign a table method to MethodInfo by using the SysDictTable class. Assign a class method by using the SysDictClass class. The following classes extend MethodInfo:\n\n-   SysMethodInfo\n-   DictMethod\n\n### Examples\n\nThe following example uses the SysDictClass::ObjectMethodObject method to assign a method of a FormBuildDataSource Class object to an instance of the MethodInfo class. An integer value specifies the method. The MethodInfo.name Method method returns the method name.\n\n    void getMethodInfo() \n    { \n        MethodInfo methodInfo; \n        SysDictClass sysDictClass; \n        str name; \n        try \n        { \n            sysDictClass = new SysDictClass(classnum(FormBuildDataSource)); \n            methodInfo = sysDictClass.objectMethodObject(1); \n            if(!methodInfo) \n            { \n                throw exception::Error; \n            } \n            name = methodInfo.name(); \n            print name; \n            pause; \n         } \n         catch (exception::Error) \n         { \n            print \"The specified method does not exist\"; \n            pause; \n         } \n    }\n\n### Methods\n\n| Method                                                      | Description                                                                                                                                   |\n|-------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public AccessSpecifier accessSpecifier()                    | Specifies whether the method is public, protected, or private.                                                                                |\n| public boolean compiledOk()                                 | Specifies whether the method has compiled.                                                                                                    |\n| public TableId displayTableId()                             |                                                                                                                                               |\n| public DisplayFunctionType displayType()                    | Specifies the display function type of a method.                                                                                              |\n| public Array getAllAttributes()                             | Gets the full set of attributes for the method.                                                                                               |\n| public Object getAttribute(str attribute)                   | Gets the first matching attribute from the class header metadata, creates an instance of the Object class that represents it, and returns it. |\n| public Array getAttributes(str attribute)                   |                                                                                                                                               |\n| public boolean isAbstract()                                 | Indicates whether the method is abstract.                                                                                                     |\n| public boolean isStatic()                                   | Specifies whether the method is static.                                                                                                       |\n| public str name()                                           | Specifies the name of a method.                                                                                                               |\n| public int noParms()                                        | Specifies the number of parameters in a method.                                                                                               |\n| public int noVars()                                         | Specifies the number of variables in a method.                                                                                                |\n| public int parentId()                                       | Specifies the table ID for a table method or the class ID for a class method.                                                                 |\n| public str propertyHelp()                                   | Specifies the Help text that a method sets or returns for a control.                                                                          |\n| public NoYes PropertyMethod()                               | Specifies whether a method is a property method.                                                                                              |\n| public int returnId()                                       | Specifies the ID for certain return data types, such as extended data types and classes, for a method that returns a value.                   |\n| public Types returnType()                                   | Specifies a method return type.                                                                                                               |\n| public ClassRunMode runMode()                               | Specifies where a method is executed.                                                                                                         |\n| public int varId(int variableNumber)                        | Specifies the ID for certain variable data types, such as extended data types and enums, for a method that contains variables.                |\n| public int varIdOld(int variableNumber)                     |                                                                                                                                               |\n| public Types varType(int variableNumber)                    | Specifies a variable data type by using values from the Types enumeration.                                                                    |\n| public void new(UtilElementType utilType, int Id, str Name) | Creates a new instance of the MethodInfo class.                                                                                               |\n| public void setMethod(MemberFunction method)                | Specifies the application object type of a node in the Application Object Tree (AOT) by using an instance of the .                            |\n\n### Method accessSpecifier\n\nSpecifies whether the method is public, protected, or private.\n\n    public AccessSpecifier accessSpecifier()\n\n#### Return Value\n\nAn AccessSpecifier enum value that specifies whether the method is public, proctected, or private.\n\n### Method compiledOk\n\nSpecifies whether the method has compiled.\n\n    public boolean compiledOk()\n\n#### Return Value\n\ntrue if the method has compiled; otherwise, false.\n\n### Method displayTableId\n\n    public TableId displayTableId()\n\n#### Return Value\n\n### Method displayType\n\nSpecifies the display function type of a method.\n\n    public DisplayFunctionType displayType()\n\n#### Return Value\n\nA DisplayFunctionType enumeration value that indicates the display function type of a method.\n\n#### Remarks\n\nThe following table lists the possible values returned by the displayType method.\n\n|           |                                             |\n|-----------|---------------------------------------------|\n| Get       | The method is a display method.             |\n| None      | The method is not a display or edit method. |\n| RecordGet | The method gets a record.                   |\n| RecordSet | The method sets a record.                   |\n| Set       | The method is an edit method.               |\n\n### Method getAllAttributes\n\nGets the full set of attributes for the method.\n\n    public Array getAllAttributes()\n\n#### Return Value\n\nThe Array of SysAttribute objects for the method.\n\n### Method getAttribute\n\nGets the first matching attribute from the class header metadata, creates an instance of the Object class that represents it, and returns it.\n\n    public Object getAttribute(str attribute)\n\n#### Parameters\n\nattribute  \nThe attribute for which to search.\n\n#### Return Value\n\nThe attribute as an instance of the Object class.\n\n### Method getAttributes\n\n    public Array getAttributes(str attribute)\n\n#### Parameters\n\nattribute  \n\n#### Return Value\n\n### Method isAbstract\n\nIndicates whether the method is abstract.\n\n    public boolean isAbstract()\n\n#### Return Value\n\ntrue if the method is abstract; otherwise, false.\n\n#### Remarks\n\nAn abstract method is declared but not implemented in a parent class. For more information, see Method Modifiers.\n\n### Method isStatic\n\nSpecifies whether the method is static.\n\n    public boolean isStatic()\n\n#### Return Value\n\ntrue if the method is static; otherwise, false.\n\n#### Remarks\n\nFor more information, see Static Methods.\n\n### Method name\n\nSpecifies the name of a method.\n\n    public str name()\n\n#### Return Value\n\nA string that indicates the method name.\n\n### Method noParms\n\nSpecifies the number of parameters in a method.\n\n    public int noParms()\n\n#### Return Value\n\nAn integer value that indicates the number of parameters in a method.\n\n### Method noVars\n\nSpecifies the number of variables in a method.\n\n    public int noVars()\n\n#### Return Value\n\nAn integer value that indicates the number of variables in a method.\n\n### Method parentId\n\nSpecifies the table ID for a table method or the class ID for a class method.\n\n    public int parentId()\n\n#### Return Value\n\nAn integer value that indicates a table ID or a class ID.\n\n### Method propertyHelp\n\nSpecifies the Help text that a method sets or returns for a control.\n\n    public str propertyHelp()\n\n#### Return Value\n\nA string that contains the Help text.\n\n### Method PropertyMethod\n\nSpecifies whether a method is a property method.\n\n    public NoYes PropertyMethod()\n\n#### Return Value\n\n1 if the method is a property method; otherwise, 0.\n\n#### Remarks\n\nA property method sets or returns a property.\n\n### Method returnId\n\nSpecifies the ID for certain return data types, such as extended data types and classes, for a method that returns a value.\n\n    public int returnId()\n\n#### Return Value\n\nAn integer value that indicates the ID for the return data type.\n\n#### Remarks\n\nThe return value is 0 if the data type does not have an ID or if a method does not return a value.\n\n### Method returnType\n\nSpecifies a method return type.\n\n    public Types returnType()\n\n#### Return Value\n\nA Types enumeration value that indicates a method return type.\n\n#### Remarks\n\nThe following list indicates the possible values. :\n\n-   AnyType\n-   BLOB\n-   Class\n-   Container\n-   Date\n-   DateTime\n-   Enum\n-   Grid\n-   Int64\n-   Integer\n-   Real\n-   Record\n-   RString\n-   String\n-   UserType\n-   VarString\n-   void\n\n### Method runMode\n\nSpecifies where a method is executed.\n\n    public ClassRunMode runMode()\n\n#### Return Value\n\nA ClassRunMode enumeration value that indicates where a method is executed.\n\n#### Remarks\n\nThe following list indicates the possible values.\n\n-   Called\n-   Client\n-   ClientorServer\n-   Server\n\n### Method varId\n\nSpecifies the ID for certain variable data types, such as extended data types and enums, for a method that contains variables.\n\n    public int varId(int variableNumber)\n\n#### Parameters\n\nvariableNumber  \nAn integer value that specifies a method variable based on the order of the variables listed in the method.\n\n#### Return Value\n\nAn integer value that indicates the variable data type ID.\n\n#### Remarks\n\nThe return value is 0 if the data type does not have an ID or if a method does not have variables.\n\n### Method varIdOld\n\n    public int varIdOld(int variableNumber)\n\n#### Parameters\n\nvariableNumber  \n\n#### Return Value\n\n### Method varType\n\nSpecifies a variable data type by using values from the Types enumeration.\n\n    public Types varType(int variableNumber)\n\n#### Parameters\n\nvariableNumber  \nAn integer that specifies a method variable based on the order of the variables listed in the method.\n\n#### Return Value\n\nA Types enumeration value that indicates the variable data type.\n\n#### Remarks\n\nFollowing are the possible values:\n\n-   AnyType\n-   BLOB\n-   Class\n-   Container\n-   Date\n-   DateTime\n-   Enum\n-   Grid\n-   Int64\n-   Integer\n-   Real\n-   Record\n-   RString\n-   String\n-   UserType\n-   VarString\n-   void\n\n### Method new\n\nCreates a new instance of the MethodInfo class.\n\n    public void new(UtilElementType utilType, int Id, str Name)\n\n#### Parameters\n\nutilType  \nA string that specifies the name of the element.\n\n<!-- -->\n\nId  \nA string that specifies the name of the element.\n\n<!-- -->\n\nName  \nA string that specifies the name of the element.\n\n### Method setMethod\n\nSpecifies the application object type of a node in the Application Object Tree (AOT).\n\n    public void setMethod(MemberFunction method)\n\n#### Parameters\n\nmethod  \nAn instance of the MemberFunction class that represents a node in the AOT.\n\n## Class ModifyFieldEventArgs\n    class ModifyFieldEventArgs extends DataEventArgs\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                       | Description |\n|------------------------------|-------------|\n| public int parmFieldId()     |             |\n| public void new(int fieldId) |             |\n\n### Method parmFieldId\n\n    public int parmFieldId()\n\n#### Return Value\n\n### Method new\n\n    public void new(int fieldId)\n\n#### Parameters\n\nfieldId  \n\n## Class ModifyFieldValueEventArgs\n    class ModifyFieldValueEventArgs extends DataEventArgs\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                         | Description |\n|------------------------------------------------|-------------|\n| public str parmFieldName()                     |             |\n| public int parmArrayIndex()                    |             |\n| public void new(str fieldName, int arrayIndex) |             |\n\n### Method parmFieldName\n\n    public str parmFieldName()\n\n#### Return Value\n\n### Method parmArrayIndex\n\n    public int parmArrayIndex()\n\n#### Return Value\n\n### Method new\n\n    public void new(str fieldName, int arrayIndex)\n\n#### Parameters\n\nfieldName  \n\n<!-- -->\n\narrayIndex  \n\n## Class MultiSelectionContext\n    class MultiSelectionContext extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                   | Description                                                    |\n|--------------------------|----------------------------------------------------------------|\n| public Common getFirst() |                                                                |\n| public Common getNext()  |                                                                |\n| private void new()       | Initializes a new instance of the MultiSelectionContext class. |\n\n### Method getFirst\n\n    public Common getFirst()\n\n#### Return Value\n\n### Method getNext\n\n    public Common getNext()\n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the MultiSelectionContext class.\n\n    private void new()\n\n\n\n","nodes":[{"pos":[4,613],"content":"# required metadata\n\ntitle: M Classes\ndescription: System API classes that start with the letter M.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 52321\nms.assetid: 954d2067-ef47-4714-ae75-23e7a5d539db\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n","nodes":[{"content":"M Classes","nodes":[{"pos":[0,9],"content":"M Classes","nodes":[{"content":"M Classes","pos":[0,9]}]}],"path":["title"]},{"content":"System API classes that start with the letter M.","nodes":[{"pos":[0,48],"content":"System API classes that start with the letter M.","nodes":[{"content":"System API classes that start with the letter M.","pos":[0,48]}]}],"path":["description"]}],"header":"# required metadata\n","yml":true},{"pos":[621,630],"content":"M Classes","linkify":"M Classes","nodes":[{"content":"M Classes","pos":[0,9]}]},{"content":"System API classes that start with the letter M.","pos":[676,724]},{"pos":[726,748],"content":"Class ManagedEventArgs","linkify":"Class ManagedEventArgs","nodes":[{"content":"Class ManagedEventArgs","pos":[0,22]}]},{"pos":[820,827],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[833,841],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[847,854],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[858,864]},{"content":"Description","pos":[878,889]},{"content":"public void new()","pos":[1022,1039]},{"content":"Initializes a new instance of the ManagedEventArgs class.","pos":[1042,1099]},{"pos":[1107,1117],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the ManagedEventArgs class.","pos":[1119,1176]},{"pos":[1204,1230],"content":"Class ManagedEventDelegate","linkify":"Class ManagedEventDelegate","nodes":[{"content":"Class ManagedEventDelegate","pos":[0,26]}]},{"pos":[1282,1289],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1295,1303],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[1309,1316],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[1320,1326]},{"content":"Description","pos":[1396,1407]},{"content":"public boolean marshalExceptionsToXPP(<ph id=\"ph1\">\\[</ph>boolean marshalExceptionsToXPP<ph id=\"ph2\">\\]</ph>)","pos":[1604,1677],"source":"public boolean marshalExceptionsToXPP(\\[boolean marshalExceptionsToXPP\\])"},{"content":"private void new()","pos":[1746,1764]},{"content":"Initializes a new instance of the ManagedEventDelegate class.","pos":[1822,1883]},{"content":"public void invoke(Object sender, ManagedEventArgs args)","pos":[1888,1944]},{"pos":[2033,2062],"content":"Method marshalExceptionsToXPP","linkify":"Method marshalExceptionsToXPP","nodes":[{"content":"Method marshalExceptionsToXPP","pos":[0,29]}]},{"pos":[2146,2156],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"marshalExceptionsToXPP","pos":[2158,2180]},{"pos":[2189,2201],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2207,2217],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the ManagedEventDelegate class.","pos":[2219,2280]},{"pos":[2310,2323],"content":"Method invoke","linkify":"Method invoke","nodes":[{"content":"Method invoke","pos":[0,13]}]},{"pos":[2392,2402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[2404,2410]},{"content":"args","pos":[2424,2428]},{"pos":[2435,2460],"content":"Class ManagedEventHandler","linkify":"Class ManagedEventHandler","nodes":[{"content":"Class ManagedEventHandler","pos":[0,25]}]},{"pos":[2511,2518],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[2524,2532],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[2538,2545],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[2549,2555]},{"content":"Description","pos":[2594,2605]},{"content":"public void finalize()","pos":[2743,2765]},{"content":"public void new(Object object, str method)","pos":[2840,2882]},{"content":"Initializes a new instance of the Object class.","pos":[2885,2932]},{"pos":[2940,2955],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[2989,2999],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[3001,3048]},{"pos":[3103,3113],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"object","pos":[3115,3121]},{"content":"method","pos":[3135,3141]},{"pos":[3148,3157],"content":"Class Map","linkify":"Class Map","nodes":[{"content":"Class Map","pos":[0,9]}]},{"content":"The Map class lets to associate one value (the key) with another value.","pos":[3188,3259]},{"pos":[3265,3272],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Both the key and the value can be any valid X++ type, including objects.","pos":[3274,3346]},{"content":"The types of the key and the value are specified in the declaration of the map.","pos":[3347,3426]},{"content":"The way in which maps are implemented means that access to the values is very fast.","pos":[3427,3510]},{"content":"Multiple keys can map to the same value, but one key can map to only one value at a time.","pos":[3511,3600]},{"content":"If you add a (key, value) pair that has an existing key value, it replaces the existing pair with that key value.","pos":[3601,3714]},{"content":"The (key, value) pairs in a map can be traversed by using the MapEnumerator class.","pos":[3715,3797]},{"pos":[3803,3811],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example illustrates how to invert a map.","pos":[3813,3867]},{"content":"A map can be inverted only if no value is mapped to by two different keys.","pos":[3868,3942]},{"content":"The number of elements in the Map.keySet method and the Map.valueSet method is compared to check this.","pos":[3943,4045]},{"content":"Otherwise, the elements are traversed in the incoming map and inserted into the result map.","pos":[4046,4137]},{"content":"The function that performs the inversion, the invertMap method, works regardless of the types of the keys and values.","pos":[4138,4255]},{"pos":[5381,5388],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[5392,5398]},{"content":"Description","pos":[5454,5465]},{"content":"public str definitionString()","pos":[5716,5745]},{"content":"Returns a string that contains a definition of the map.","pos":[5778,5833]},{"content":"public Set domainSet()","pos":[5878,5900]},{"content":"Creates a set of the key (domain) values in a map.","pos":[5940,5990]},{"content":"public Types domainType()","pos":[6040,6065]},{"content":"Determines the type of the key (domain) values in a map.","pos":[6102,6158]},{"content":"public int elements()","pos":[6202,6223]},{"content":"Returns the number of elements in the map.","pos":[6264,6306]},{"content":"public boolean empty()","pos":[6364,6386]},{"content":"Determines whether the map contains any (key, value) pairs.","pos":[6426,6485]},{"content":"public boolean exists(AnyType keyValue)","pos":[6526,6565]},{"content":"Determines whether a particular value exists as a key in the map.","pos":[6588,6653]},{"content":"public MapEnumerator getEnumerator()","pos":[6688,6724]},{"content":"Creates an enumerator for the map, which lets you traverse the map.","pos":[6750,6817]},{"content":"public boolean insert(AnyType keyValue, AnyType valueValue)","pos":[6850,6909]},{"content":"Inserts an element (keyValue, valueValue pair) into the map.","pos":[6912,6972]},{"content":"public Set keySet()","pos":[7012,7031]},{"content":"Returns a set that contains the key values from a map.","pos":[7074,7128]},{"content":"public Types keyType()","pos":[7174,7196]},{"content":"Returns the type of the key values in a map.","pos":[7236,7280]},{"content":"public AnyType lookup(AnyType keyValue)","pos":[7336,7375]},{"content":"Returns the value that is mapped to by a specified key value.","pos":[7398,7459]},{"content":"public container pack()","pos":[7498,7521]},{"content":"Serializes the current instance of the Map class.","pos":[7560,7609]},{"content":"public Set rangeSet()","pos":[7660,7681]},{"content":"Returns a set that contains the values (ranges) that are mapped to by the keys in a map.","pos":[7722,7810]},{"content":"public Types rangeType()","pos":[7822,7846]},{"content":"Determines the type of the values (ranges) that are mapped to by the keys in a map.","pos":[7884,7967]},{"content":"public boolean remove(AnyType keyValue)","pos":[7984,8023]},{"content":"Removes a (key, value) pair from a map.","pos":[8046,8085]},{"content":"public str toString()","pos":[8146,8167]},{"content":"Returns a description of the (key, value) pairs in the map.","pos":[8208,8267]},{"content":"public Set valueSet()","pos":[8308,8329]},{"content":"Returns a set that contains the values that are mapped to by the keys in a map.","pos":[8370,8449]},{"content":"public Types valueType()","pos":[8470,8494]},{"content":"Returns the type of the values that are mapped to by the keys in a map.","pos":[8532,8603]},{"content":"public str xml(<ph id=\"ph1\">\\[</ph>int indent<ph id=\"ph2\">\\]</ph>)","pos":[8632,8662],"source":"public str xml(\\[int indent\\])"},{"content":"Returns an XML string that represents the current object.","pos":[8694,8751]},{"content":"::public static Map create(container container)","pos":[8794,8841]},{"content":"Creates a map from the container that was obtained from a previous call to the Map.pack method.","pos":[8856,8951]},{"content":"::public static Map createFromXML(Object xmlnode)","pos":[8956,9005]},{"content":"::public static boolean equal(Map map1, Map map2)","pos":[9118,9167]},{"content":"Determines whether two maps are equal.","pos":[9180,9218]},{"content":"public void new(Types key, Types value)","pos":[9280,9319]},{"content":"Creates a new map.","pos":[9342,9360]},{"pos":[9445,9468],"content":"Method definitionString","linkify":"Method definitionString","nodes":[{"content":"Method definitionString","pos":[0,23]}]},{"content":"Returns a string that contains a definition of the map.","pos":[9470,9525]},{"pos":[9567,9579],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the definition of the map.","pos":[9581,9630]},{"pos":[9637,9644],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The definition of the map.","pos":[9646,9672]},{"pos":[9679,9687],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a map and then prints the definition of the map.","pos":[9689,9767]},{"pos":[9905,9921],"content":"Method domainSet","linkify":"Method domainSet","nodes":[{"content":"Method domainSet","pos":[0,16]}]},{"content":"Creates a set of the key (domain) values in a map.","pos":[9923,9973]},{"pos":[10008,10020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10027,10034],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is obsolete; use the Map.keySet method instead.","pos":[10036,10095]},{"pos":[10101,10118],"content":"Method domainType","linkify":"Method domainType","nodes":[{"content":"Method domainType","pos":[0,17]}]},{"content":"Determines the type of the key (domain) values in a map.","pos":[10120,10176]},{"pos":[10214,10226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10233,10240],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is obsolete; use the Map.keyType method instead.","pos":[10242,10302]},{"pos":[10308,10323],"content":"Method elements","linkify":"Method elements","nodes":[{"content":"Method elements","pos":[0,15]}]},{"content":"Returns the number of elements in the map.","pos":[10325,10367]},{"pos":[10401,10413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of elements in the map.","pos":[10415,10449]},{"pos":[10456,10463],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The number of elements in the map is equal to the number of different key values in the map.","pos":[10465,10557]},{"pos":[10564,10572],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the elements method to check whether a map has any elements.","pos":[10574,10661]},{"content":"If the <ph id=\"ph1\">\\_</ph>from map exists and has some elements, the values from the <ph id=\"ph2\">\\_</ph>from map are inserted into the <ph id=\"ph3\">\\_</ph>to map.","pos":[10662,10772],"source":" If the \\_from map exists and has some elements, the values from the \\_from map are inserted into the \\_to map."},{"pos":[11192,11204],"content":"Method empty","linkify":"Method empty","nodes":[{"content":"Method empty","pos":[0,12]}]},{"content":"Determines whether the map contains any (key, value) pairs.","pos":[11206,11265]},{"pos":[11300,11312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the map does not contain any elements; otherwise, false.","pos":[11314,11378]},{"pos":[11385,11392],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is equivalent to (elements() == 0).","pos":[11394,11441]},{"pos":[11447,11460],"content":"Method exists","linkify":"Method exists","nodes":[{"content":"Method exists","pos":[0,13]}]},{"content":"Determines whether a particular value exists as a key in the map.","pos":[11462,11527]},{"pos":[11579,11589],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"keyValue","pos":[11591,11599]},{"content":"The value to check for.","pos":[11602,11625]},{"pos":[11632,11644],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the specified key value exists in the map; otherwise, false.","pos":[11646,11714]},{"pos":[11721,11728],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use this method to guard calls to the Map.lookup method.","pos":[11730,11786]},{"content":"If the Map.lookup method does not find the value that it is looking for, it throws an exception.","pos":[11787,11883]},{"pos":[11890,11898],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example checks whether a particular style exists in a map of styles in a style sheet.","pos":[11900,11999]},{"content":"If it does, a new name is substituted for the body style.","pos":[12000,12057]},{"pos":[12437,12457],"content":"Method getEnumerator","linkify":"Method getEnumerator","nodes":[{"content":"Method getEnumerator","pos":[0,20]}]},{"content":"Creates an enumerator for the map, which lets you traverse the map.","pos":[12459,12526]},{"pos":[12575,12587],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A MapEnumerator object for the map.","pos":[12589,12624]},{"pos":[12631,12639],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example checks whether the <ph id=\"ph1\">\\_</ph>from map has any elements and creates an enumerator for the map if it has any elements.","pos":[12641,12771],"source":"The following example checks whether the \\_from map has any elements and creates an enumerator for the map if it has any elements."},{"content":"The map is then traversed, and the elements in it are inserted into the <ph id=\"ph1\">\\_</ph>to map.","pos":[12772,12853],"source":" The map is then traversed, and the elements in it are inserted into the \\_to map."},{"pos":[13273,13286],"content":"Method insert","linkify":"Method insert","nodes":[{"content":"Method insert","pos":[0,13]}]},{"content":"Inserts an element (keyValue, valueValue pair) into the map.","pos":[13288,13348]},{"pos":[13420,13430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"keyValue","pos":[13432,13440]},{"content":"The value that is mapped to by the key.","pos":[13443,13482]},{"content":"valueValue","pos":[13494,13504]},{"content":"The value that is mapped to by the key.","pos":[13507,13546]},{"pos":[13553,13565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the key did not already exist in the map and has been inserted; otherwise, false.","pos":[13567,13656]},{"pos":[13663,13670],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the key already exists in the map, the value is updated.","pos":[13672,13731]},{"pos":[13738,13746],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example checks whether the <ph id=\"ph1\">\\_</ph>from map has any elements and creates an enumerator for the map if it has any elements.","pos":[13748,13878],"source":"The following example checks whether the \\_from map has any elements and creates an enumerator for the map if it has any elements."},{"content":"The map is traversed, and the insert method is used to insert the elements from the <ph id=\"ph1\">\\_</ph>from map into the <ph id=\"ph2\">\\_</ph>to map.","pos":[13879,13992],"source":" The map is traversed, and the insert method is used to insert the elements from the \\_from map into the \\_to map."},{"pos":[14412,14425],"content":"Method keySet","linkify":"Method keySet","nodes":[{"content":"Method keySet","pos":[0,13]}]},{"content":"Returns a set that contains the key values from a map.","pos":[14427,14481]},{"pos":[14513,14525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A set that contains the key values.","pos":[14527,14562]},{"pos":[14569,14577],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example deletes all elements from a map that have key values that are not found as elements in a set.","pos":[14579,14694]},{"pos":[15257,15271],"content":"Method keyType","linkify":"Method keyType","nodes":[{"content":"Method keyType","pos":[0,14]}]},{"content":"Returns the type of the key values in a map.","pos":[15273,15317]},{"pos":[15352,15364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of the key values.","pos":[15366,15393]},{"pos":[15400,15407],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The possible return values are outlined by the Types system enum.","pos":[15409,15474]},{"content":"The type of the key values is determined when the map is constructed.","pos":[15475,15544]},{"content":"It is supplied as the first parameter to the Map.new method.","pos":[15545,15605]},{"pos":[15611,15624],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"content":"Returns the value that is mapped to by a specified key value.","pos":[15626,15687]},{"pos":[15739,15749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"keyValue","pos":[15751,15759]},{"content":"The key to find.","pos":[15762,15778]},{"pos":[15785,15797],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that is mapped to by the specified key.","pos":[15799,15848]},{"pos":[15855,15862],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An exception is thrown if the key is not found in the map, so check whether the value that you want to retrieve exists by using the Map.exists method.","pos":[15864,16014]},{"pos":[16021,16029],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example checks whether a particular style exists in a map of styles in a style sheet.","pos":[16031,16130]},{"content":"If it does, a new name is substituted for the body style.","pos":[16131,16188]},{"pos":[16568,16579],"content":"Method pack","linkify":"Method pack","nodes":[{"content":"Method pack","pos":[0,11]}]},{"content":"Serializes the current instance of the Map class.","pos":[16581,16630]},{"pos":[16666,16678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that contains the current instance of the Map class.","pos":[16680,16744]},{"pos":[16751,16758],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The container created by this method contains 4 elements before the first element from the map:","pos":[16760,16855]},{"content":"A version number for the container","pos":[16861,16895]},{"content":"An integer that identifies the data type of the keys in the map","pos":[16900,16963]},{"content":"An integer that identifies the data type of the values in the map","pos":[16968,17033]},{"content":"The number of elements in the map","pos":[17038,17071]},{"content":"If the keys or the values are objects, packing is performed by calling the pack method successively on each object to yield a subcontainer.","pos":[17073,17212]},{"content":"The pack and unpack methods cannot preserve X++ anytype values.","pos":[17213,17276]},{"content":"One option is to put the anytype values into objects or structs, and have the structs be the values in the Map object.","pos":[17277,17395]},{"content":"Use of Microsoft .NET System.Collections classes is another option.","pos":[17396,17463]},{"content":"The map can be retrieved from the packed container by using the Map.create method.","pos":[17464,17546]},{"pos":[17553,17561],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a map from a container that is passed into the method (conprojItemTransSalesAmount), adds some values to it, and then uses MapEnumerator.pack to pack the map into a container.","pos":[17563,17768]},{"content":"The new container is then returned by the method.","pos":[17769,17818]},{"pos":[19002,19017],"content":"Method rangeSet","linkify":"Method rangeSet","nodes":[{"content":"Method rangeSet","pos":[0,15]}]},{"content":"Returns a set that contains the values (ranges) that are mapped to by the keys in a map.","pos":[19019,19107]},{"pos":[19141,19153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19160,19167],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is obsolete; use the Map.valueSet method instead.","pos":[19169,19230]},{"pos":[19236,19252],"content":"Method rangeType","linkify":"Method rangeType","nodes":[{"content":"Method rangeType","pos":[0,16]}]},{"content":"Determines the type of the values (ranges) that are mapped to by the keys in a map.","pos":[19254,19337]},{"pos":[19374,19386],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19393,19400],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is obsolete; use the valueType method instead.","pos":[19402,19460]},{"pos":[19466,19479],"content":"Method remove","linkify":"Method remove","nodes":[{"content":"Method remove","pos":[0,13]}]},{"content":"Removes a (key, value) pair from a map.","pos":[19481,19520]},{"pos":[19572,19582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"keyValue","pos":[19584,19592]},{"content":"The value of the key to delete.","pos":[19595,19626]},{"pos":[19633,19645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the key was found in the map and the element has been deleted; otherwise, false.","pos":[19647,19735]},{"pos":[19742,19750],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example checks whether a particular key value exists in a map.","pos":[19752,19828]},{"content":"If the value exists, the method deletes the key and its corresponding value.","pos":[19829,19905]},{"content":"The method returns true if the value was found and false if the key did not exist in the map.","pos":[19906,19999]},{"pos":[20266,20281],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a description of the (key, value) pairs in the map.","pos":[20283,20342]},{"pos":[20376,20388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains a description of the elements in the map.","pos":[20390,20454]},{"pos":[20461,20469],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a map, adds some elements to it, and then prints a description of these elements.","pos":[20471,20582]},{"pos":[20920,20935],"content":"Method valueSet","linkify":"Method valueSet","nodes":[{"content":"Method valueSet","pos":[0,15]}]},{"content":"Returns a set that contains the values that are mapped to by the keys in a map.","pos":[20937,21016]},{"pos":[21050,21062],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A set that contains the values from the map.","pos":[21064,21108]},{"pos":[21115,21122],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If all the keys map to different values, the number of elements in the set is equal to the number of elements in the map.","pos":[21124,21245]},{"pos":[21251,21267],"content":"Method valueType","linkify":"Method valueType","nodes":[{"content":"Method valueType","pos":[0,16]}]},{"content":"Returns the type of the values that are mapped to by the keys in a map.","pos":[21269,21340]},{"pos":[21377,21389],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of the values that are mapped to by the keys.","pos":[21391,21445]},{"pos":[21452,21459],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The type of the key values is determined when the map is constructed.","pos":[21461,21530]},{"content":"It is supplied as the first parameter to the Map.new method.","pos":[21531,21591]},{"pos":[21597,21607],"content":"Method xml","linkify":"Method xml","nodes":[{"content":"Method xml","pos":[0,10]}]},{"content":"Returns an XML string that represents the current object.","pos":[21609,21666]},{"pos":[21707,21717],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"indent","pos":[21719,21725]},{"content":"The amount of indentation of the XML string that is returned; optional.","pos":[21728,21799]},{"pos":[21806,21818],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An XML string that represents the current object.","pos":[21820,21869]},{"pos":[21876,21883],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method can be overridden to return values that are meaningful for that type.","pos":[21885,21966]},{"pos":[21972,21985],"content":"Method create","linkify":"Method create","nodes":[{"content":"Method create","pos":[0,13]}]},{"content":"Creates a map from the container that was obtained from a previous call to the Map.pack method.","pos":[21987,22082]},{"pos":[22140,22150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[22152,22161]},{"pos":[22170,22182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A map that is equal to the map that was packed into the container by the Map.pack method.","pos":[22184,22273]},{"pos":[22280,22287],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the keys or values are objects, the objects must have an unpack method that is called to re-establish their internal state from the container.","pos":[22289,22434]},{"pos":[22441,22449],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a map from a container that is passed into the method (conprojItemTransSalesAmount), adds some values to the container, and then packs the map and returns it as a new container.","pos":[22451,22658]},{"pos":[23842,23862],"content":"Method createFromXML","linkify":"Method createFromXML","nodes":[{"content":"Method createFromXML","pos":[0,20]}]},{"pos":[23922,23932],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"xmlnode","pos":[23934,23941]},{"pos":[23950,23962],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[23968,23980],"content":"Method equal","linkify":"Method equal","nodes":[{"content":"Method equal","pos":[0,12]}]},{"content":"Determines whether two maps are equal.","pos":[23982,24020]},{"pos":[24080,24090],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"map1","pos":[24092,24096]},{"content":"The second map to compare.","pos":[24099,24125]},{"content":"map2","pos":[24137,24141]},{"content":"The second map to compare.","pos":[24144,24170]},{"pos":[24177,24189],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the two maps are equal; otherwise, false.","pos":[24191,24240]},{"pos":[24247,24254],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Two maps are equal if they contain the same number of elements, their key sets are the same, and each key in the key set maps to the same value in both maps.","pos":[24256,24413]},{"pos":[24419,24429],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a new map.","pos":[24431,24449]},{"pos":[24501,24511],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"key","pos":[24513,24516]},{"content":"The type of the values.","pos":[24519,24542]},{"content":"value","pos":[24554,24559]},{"content":"The type of the values.","pos":[24562,24585]},{"pos":[24592,24600],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a map that maps string keys to integer values.","pos":[24602,24678]},{"pos":[24740,24759],"content":"Class MapEnumerator","linkify":"Class MapEnumerator","nodes":[{"content":"Class MapEnumerator","pos":[0,19]}]},{"content":"The MapEnumerator class lets you traverse through the elements in a map.","pos":[24800,24872]},{"pos":[24878,24885],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Map enumerators start before the first element in the list.","pos":[24887,24946]},{"content":"You must call the MapEnumerator.moveNext method to make it point to the first element in the list.","pos":[24947,25045]},{"content":"It is a best practice to use the MapEnumerator class instead of the MapIterator class because enumerators are automatically created on the same tier as the map when you call the Map.getEnumerator method.","pos":[25046,25249]},{"content":"Using the MapEnumerator class avoids a potential problem in code marked as Called from, where the iterator and map can end up on separate tiers.","pos":[25250,25394]},{"content":"In addition, because map enumerators require less code than map iterators, they perform slightly better.","pos":[25395,25499]},{"content":"The only situation where you have to use a map iterator, is when you want to delete items from a list by using the MapIterator.delete method.","pos":[25500,25641]},{"pos":[25647,25655],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[25661,25668],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[25672,25678]},{"content":"Description","pos":[25704,25715]},{"content":"public AnyType current()","pos":[26036,26060]},{"content":"This method is obsolete; use MapEnumerator.currentKey instead.","pos":[26068,26130]},{"content":"public AnyType currentKey()","pos":[26218,26245]},{"content":"Returns the key from the (key, value) pair that is currently pointed to by the enumerator.","pos":[26250,26340]},{"content":"public AnyType currentValue()","pos":[26400,26429]},{"content":"Returns the value from the (key, value) pair that is currently pointed to by the enumerator.","pos":[26432,26524]},{"content":"public str definitionString()","pos":[26582,26611]},{"content":"Returns a description of the enumerator.","pos":[26614,26654]},{"content":"For example, an enumerator for a map of integers to strings would return \"<ph id=\"ph1\">\\[</ph>int -<ph id=\"ph2\">&amp;gt;</ph> str<ph id=\"ph3\">\\]</ph> enumerator\".","pos":[26655,26759],"source":" For example, an enumerator for a map of integers to strings would return \"\\[int -&gt; str\\] enumerator\"."},{"content":"public boolean moveNext()","pos":[26764,26789]},{"content":"Determines whether the enumerator points to a valid map element.","pos":[26796,26860]},{"content":"public str toString()","pos":[26946,26967]},{"content":"Returns a string that represents the current object.","pos":[26978,27030]},{"content":"public void new(Map map)","pos":[27128,27152]},{"content":"Initializes a new instance of the Object class.","pos":[27160,27207]},{"content":"public void reset()","pos":[27310,27329]},{"content":"Moves the enumerator to point to just before the first element in the map.","pos":[27342,27416]},{"pos":[27495,27509],"content":"Method current","linkify":"Method current","nodes":[{"content":"Method current","pos":[0,14]}]},{"content":"This method is obsolete; use MapEnumerator.currentKey instead.","pos":[27511,27573]},{"pos":[27610,27622],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27628,27645],"content":"Method currentKey","linkify":"Method currentKey","nodes":[{"content":"Method currentKey","pos":[0,17]}]},{"content":"Returns the key from the (key, value) pair that is currently pointed to by the enumerator.","pos":[27647,27737]},{"pos":[27777,27789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The key from the map element that is currently pointed to by the enumerator.","pos":[27791,27867]},{"pos":[27874,27881],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must call the MapEnumerator.moveNext method before you call the currentKey method.","pos":[27883,27969]},{"pos":[27976,27984],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example searches for a particular table ID in a map and then returns the key value of that map element.","pos":[27986,28103]},{"pos":[28532,28551],"content":"Method currentValue","linkify":"Method currentValue","nodes":[{"content":"Method currentValue","pos":[0,19]}]},{"content":"Returns the value from the (key, value) pair that is currently pointed to by the enumerator.","pos":[28553,28645]},{"pos":[28687,28699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value from the map element that is currently pointed to by the enumerator.","pos":[28701,28779]},{"pos":[28786,28793],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must call the MapEnumerator.moveNext method before you call this method.","pos":[28795,28871]},{"pos":[28878,28886],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example searches through a map to find an element that has a value equal to that passed in as a parameter.","pos":[28888,29008]},{"content":"The MapEnumerator.moveNext method is used to iterate through the map, and the currentValue method is used to test each value to see whether it matches the parameter.","pos":[29009,29174]},{"pos":[29603,29626],"content":"Method definitionString","linkify":"Method definitionString","nodes":[{"content":"Method definitionString","pos":[0,23]}]},{"content":"Returns a description of the enumerator.","pos":[29628,29668]},{"content":"For example, an enumerator for a map of integers to strings would return \"<ph id=\"ph1\">\\[</ph>int -<ph id=\"ph2\">&amp;gt;</ph> str<ph id=\"ph3\">\\]</ph> enumerator\".","pos":[29669,29773],"source":" For example, an enumerator for a map of integers to strings would return \"\\[int -&gt; str\\] enumerator\"."},{"pos":[29815,29827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains a description of the enumerator.","pos":[29829,29884]},{"pos":[29891,29899],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a map and an enumerator for it, and then it prints out a definition of the enumerator.","pos":[29901,30017]},{"pos":[30496,30511],"content":"Method moveNext","linkify":"Method moveNext","nodes":[{"content":"Method moveNext","pos":[0,15]}]},{"content":"Determines whether the enumerator points to a valid map element.","pos":[30513,30577]},{"pos":[30615,30627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the current position in the map holds a valid element; otherwise false.","pos":[30629,30708]},{"pos":[30715,30722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Map enumerators start before the first element in the map.","pos":[30724,30782]},{"content":"You must call the moveNext method to make it point to the first element in the map.","pos":[30783,30866]},{"pos":[30873,30881],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the moveNext method to iterate over the tables that are contained in a project and adds them to a new map that contains a DictTable object for each table.","pos":[30883,31064]},{"content":"(DictTable lets you access information about a table.)","pos":[31065,31119]},{"pos":[31516,31531],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that represents the current object.","pos":[31533,31585]},{"pos":[31619,31631],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that represents the current object.","pos":[31633,31677]},{"pos":[31684,31691],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation returns the class name of the object.","pos":[31693,31757]},{"content":"The method can be overridden in a derived class to return values that are meaningful for that type.","pos":[31758,31857]},{"content":"For example, an instance of the SysMethodInfo class returns the method name and type of the method, such as instance or static.","pos":[31858,31985]},{"pos":[31992,32000],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a map, and then prints the content of the first and second elements in the map.","pos":[32002,32111]},{"pos":[32917,32927],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[32929,32976]},{"pos":[33013,33023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"map","pos":[33025,33028]},{"content":"The map for which to create an enumerator.","pos":[33031,33073]},{"pos":[33080,33087],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is obsolete.","pos":[33089,33113]},{"content":"Use the Map.getEnumerator method instead.","pos":[33114,33155]},{"pos":[33161,33173],"content":"Method reset","linkify":"Method reset","nodes":[{"content":"Method reset","pos":[0,12]}]},{"content":"Moves the enumerator to point to just before the first element in the map.","pos":[33175,33249]},{"pos":[33281,33288],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The reset method moves the enumerator to the start of the set, before the first element in the set.","pos":[33290,33389]},{"content":"You must call the MapEnumerator.moveNext method to make it point to the first element in the set.","pos":[33390,33487]},{"pos":[33492,33502],"content":"Class Mapi","linkify":"Class Mapi","nodes":[{"content":"Class Mapi","pos":[0,10]}]},{"content":"The Mapi class enables email to be sent, received, and managed in most major mail systems, such as Microsoft Exchange–based systems, Microsoft Outlook Express, and Lotus CCMail.","pos":[33534,33711]},{"pos":[33717,33724],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Together with the other Mapi classes, MapiMessage, MapiRecipDesc, and MapiFileDesc, this class lets you specify multiple recipients, file attachments, message text, and a subject.","pos":[33726,33905]},{"content":"The easiest approach is to set up a working mail client on the machine, and make sure that this works correctly order by sending and receiving a few email messages.","pos":[33906,34070]},{"content":"Flags for the Mapi methods are located in the Mapi macro.","pos":[34071,34128]},{"content":"You include this macro in code where you use the Mapi classes together with the <ph id=\"ph1\">\\#</ph>MAPI statement.","pos":[34129,34226],"source":" You include this macro in code where you use the Mapi classes together with the \\#MAPI statement."},{"pos":[34232,34240],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to send an email message by using this class.","pos":[34242,34319]},{"pos":[34938,34945],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[34949,34955]},{"content":"Description","pos":[35030,35041]},{"content":"public int deleteMail(str messageID)","pos":[35321,35357]},{"content":"Removes the specified message from the message store.","pos":[35402,35455]},{"content":"public str findNext(<ph id=\"ph1\">\\[</ph>str messageType<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>str seedMessageID<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int flags<ph id=\"ph6\">\\]</ph>)","pos":[35507,35585],"source":"public str findNext(\\[str messageType\\], \\[str seedMessageID\\], \\[int flags\\])"},{"content":"Finds the first or next message in the message store.","pos":[35588,35641]},{"content":"public int logoff()","pos":[35693,35712]},{"content":"Lets you log off the mail system.","pos":[35774,35807]},{"content":"public int logon(str profileName, str password, int flags)","pos":[35879,35937]},{"content":"Logs on to the mail system by using the specified profile and password.","pos":[35960,36031]},{"content":"public MapiMessage readMail(str messageID, <ph id=\"ph1\">\\[</ph>int flags<ph id=\"ph2\">\\]</ph>)","pos":[36065,36122],"source":"public MapiMessage readMail(str messageID, \\[int flags\\])"},{"content":"Retrieves a message from the message store.","pos":[36146,36189]},{"content":"public MapiRecipDesc resolveName(str mame, int flags)","pos":[36251,36304]},{"content":"Transforms the message recipient's name, as entered by a user, to an unambiguous address list entry.","pos":[36332,36432]},{"content":"public int saveMail(MapiMessage message, int flags, str messageId)","pos":[36437,36503]},{"content":"Saves a message to the message store.","pos":[36518,36555]},{"content":"public int sendMail(MapiMessage message, <ph id=\"ph1\">\\[</ph>int flags<ph id=\"ph2\">\\]</ph>)","pos":[36623,36678],"source":"public int sendMail(MapiMessage message, \\[int flags\\])"},{"content":"Sends a message to the specified recipients.","pos":[36704,36748]},{"content":"public int status()","pos":[36809,36828]},{"content":"Retrieves the status of the last Mapi operation.","pos":[36890,36938]},{"content":"public void new()","pos":[36995,37012]},{"content":"Initializes an instance of the Mapi class.","pos":[37076,37118]},{"content":"public void finalize()","pos":[37181,37203]},{"pos":[37370,37387],"content":"Method deleteMail","linkify":"Method deleteMail","nodes":[{"content":"Method deleteMail","pos":[0,17]}]},{"content":"Removes the specified message from the message store.","pos":[37389,37442]},{"pos":[37491,37501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"messageID","pos":[37503,37512]},{"content":"The unique message ID for the message to delete.","pos":[37515,37563]},{"pos":[37570,37582],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The status <ph id=\"ph1\">\\#</ph>SUCCESS<ph id=\"ph2\">\\_</ph>SUCCES or an error code, which can be found in the <ph id=\"ph3\">\\#</ph>MAPI macro.","pos":[37584,37670],"source":"The status \\#SUCCESS\\_SUCCES or an error code, which can be found in the \\#MAPI macro."},{"pos":[37677,37684],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The message ID can be retrieved by using the findNext method.","pos":[37686,37747]},{"pos":[37753,37768],"content":"Method findNext","linkify":"Method findNext","nodes":[{"content":"Method findNext","pos":[0,15]}]},{"content":"Finds the first or next message in the message store.","pos":[37770,37823]},{"pos":[37908,37918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"messageType","pos":[37920,37931]},{"content":"Flags that indicate first in, first out (FIFO) or unread; optional.","pos":[37934,38001]},{"content":"This parameter has two possible values:","pos":[38002,38041]},{"content":"seedMessageID","pos":[38053,38066]},{"content":"Flags that indicate first in, first out (FIFO) or unread; optional.","pos":[38069,38136]},{"content":"This parameter has two possible values:","pos":[38137,38176]},{"content":"flags","pos":[38188,38193]},{"content":"Flags that indicate first in, first out (FIFO) or unread; optional.","pos":[38196,38263]},{"content":"This parameter has two possible values:","pos":[38264,38303]},{"pos":[38310,38322],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The message ID of the message that is found; an empty string if no message is found.","pos":[38324,38408]},{"pos":[38415,38422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call this method to find the first message, and then issue subsequent calls to obtain the following messages.","pos":[38424,38533]},{"content":"Use the status method to check for Mapi errors after you call this method.","pos":[38534,38608]},{"pos":[38614,38627],"content":"Method logoff","linkify":"Method logoff","nodes":[{"content":"Method logoff","pos":[0,13]}]},{"content":"Lets you log off the mail system.","pos":[38629,38662]},{"pos":[38694,38706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The status <ph id=\"ph1\">\\#</ph>SUCCESS<ph id=\"ph2\">\\_</ph>SUCCESS or an error code, which can be found in the <ph id=\"ph3\">\\#</ph>MAPI macro.","pos":[38708,38795],"source":"The status \\#SUCCESS\\_SUCCESS or an error code, which can be found in the \\#MAPI macro."},{"pos":[38801,38813],"content":"Method logon","linkify":"Method logon","nodes":[{"content":"Method logon","pos":[0,12]}]},{"content":"Logs on to the mail system by using the specified profile and password.","pos":[38815,38886]},{"pos":[38957,38967],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"profileName","pos":[38969,38980]},{"content":"A list of flags.","pos":[38983,38999]},{"content":"The valid flags are as follows:","pos":[39000,39031]},{"content":"password","pos":[39043,39051]},{"content":"A list of flags.","pos":[39054,39070]},{"content":"The valid flags are as follows:","pos":[39071,39102]},{"content":"flags","pos":[39114,39119]},{"content":"A list of flags.","pos":[39122,39138]},{"content":"The valid flags are as follows:","pos":[39139,39170]},{"pos":[39177,39189],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The status <ph id=\"ph1\">\\#</ph>SUCCESS<ph id=\"ph2\">\\_</ph>SUCCESS if the logon succeeded; otherwise, an error code, which can be found in the <ph id=\"ph3\">\\#</ph>MAPI macro.","pos":[39191,39310],"source":"The status \\#SUCCESS\\_SUCCESS if the logon succeeded; otherwise, an error code, which can be found in the \\#MAPI macro."},{"pos":[39317,39324],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An easy and common way to log on is to specify the <ph id=\"ph1\">\\#</ph>MAPI<ph id=\"ph2\">\\_</ph>USE<ph id=\"ph3\">\\_</ph>DEFAULT flag, which logs on by using the default profile.","pos":[39326,39447],"source":"An easy and common way to log on is to specify the \\#MAPI\\_USE\\_DEFAULT flag, which logs on by using the default profile."},{"pos":[39453,39468],"content":"Method readMail","linkify":"Method readMail","nodes":[{"content":"Method readMail","pos":[0,15]}]},{"content":"Retrieves a message from the message store.","pos":[39470,39513]},{"pos":[39581,39591],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"messageID","pos":[39593,39602]},{"content":"A list of flags; optional.","pos":[39605,39631]},{"content":"The valid flags are as follows:","pos":[39632,39663]},{"content":"flags","pos":[39675,39680]},{"content":"A list of flags; optional.","pos":[39683,39709]},{"content":"The valid flags are as follows:","pos":[39710,39741]},{"pos":[39748,39760],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The MapiMessage object that is retrieved or nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[39762,39871]},{"pos":[39877,39895],"content":"Method resolveName","linkify":"Method resolveName","nodes":[{"content":"Method resolveName","pos":[0,18]}]},{"content":"Transforms the message recipient's name, as entered by a user, to an unambiguous address list entry.","pos":[39897,39997]},{"pos":[40063,40073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mame","pos":[40075,40079]},{"content":"A list of flags.","pos":[40082,40098]},{"content":"The valid flags are as follows:","pos":[40099,40130]},{"content":"flags","pos":[40142,40147]},{"content":"A list of flags.","pos":[40150,40166]},{"content":"The valid flags are as follows:","pos":[40167,40198]},{"pos":[40205,40217],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A MapiRecipDesc class object that has an unambiguous address list entry.","pos":[40219,40291]},{"pos":[40297,40312],"content":"Method saveMail","linkify":"Method saveMail","nodes":[{"content":"Method saveMail","pos":[0,15]}]},{"content":"Saves a message to the message store.","pos":[40314,40351]},{"pos":[40430,40440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"message","pos":[40442,40449]},{"content":"The unique ID of the message to retrieve.","pos":[40452,40493]},{"content":"flags","pos":[40505,40510]},{"content":"The unique ID of the message to retrieve.","pos":[40513,40554]},{"content":"messageId","pos":[40566,40575]},{"content":"The unique ID of the message to retrieve.","pos":[40578,40619]},{"pos":[40626,40638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The status <ph id=\"ph1\">\\#</ph>SUCCESS<ph id=\"ph2\">\\_</ph>SUCCESS or an error code from the <ph id=\"ph3\">\\#</ph>MAPI macro.","pos":[40640,40709],"source":"The status \\#SUCCESS\\_SUCCESS or an error code from the \\#MAPI macro."},{"pos":[40715,40730],"content":"Method sendMail","linkify":"Method sendMail","nodes":[{"content":"Method sendMail","pos":[0,15]}]},{"content":"Sends a message to the specified recipients.","pos":[40732,40776]},{"pos":[40842,40852],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"message","pos":[40854,40861]},{"content":"A list of flags; optional.","pos":[40864,40890]},{"content":"The valid flags are as follows:","pos":[40891,40922]},{"content":"flags","pos":[40934,40939]},{"content":"A list of flags; optional.","pos":[40942,40968]},{"content":"The valid flags are as follows:","pos":[40969,41000]},{"pos":[41007,41019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The status <ph id=\"ph1\">\\#</ph>SUCCESS<ph id=\"ph2\">\\_</ph>SUCCESS or an error code from the <ph id=\"ph3\">\\#</ph>MAPI macro.","pos":[41021,41090],"source":"The status \\#SUCCESS\\_SUCCESS or an error code from the \\#MAPI macro."},{"pos":[41096,41109],"content":"Method status","linkify":"Method status","nodes":[{"content":"Method status","pos":[0,13]}]},{"content":"Retrieves the status of the last Mapi operation.","pos":[41111,41159]},{"pos":[41191,41203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The status code of the last Mapi operation.","pos":[41205,41248]},{"pos":[41255,41262],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The status codes can be found in the <ph id=\"ph1\">\\#</ph>MAPI macro.","pos":[41264,41314],"source":"The status codes can be found in the \\#MAPI macro."},{"pos":[41320,41330],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes an instance of the Mapi class.","pos":[41332,41374]},{"pos":[41403,41418],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[41451,41463],"content":"Class MapiEx","linkify":"Class MapiEx","nodes":[{"content":"Class MapiEx","pos":[0,12]}]},{"pos":[41501,41508],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41514,41522],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[41528,41535],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[41539,41545]},{"content":"Description","pos":[41605,41616]},{"content":"public MapiExAppointment getAppointmentFromEntryId(str entryID)","pos":[41775,41838]},{"content":"public MapiExContact getContactFromEntryId(str entryID)","pos":[41893,41948]},{"content":"public int getCurrentUser()","pos":[42011,42038]},{"content":"public str getCurrentUserEmail()","pos":[42129,42161]},{"content":"public str getCurrentUserEntryId()","pos":[42247,42281]},{"content":"public str getCurrentUserName()","pos":[42365,42396]},{"content":"public MapiExMail getMailFromEntryId(str entryID)","pos":[42483,42532]},{"content":"public MapiExTask getTaskFromEntryId(str entryID)","pos":[42601,42650]},{"content":"public int logon(str profileName, str password, int flags)","pos":[42719,42777]},{"content":"public boolean mapiInitialised()","pos":[42837,42869]},{"content":"public boolean openMessageStore(str str)","pos":[42955,42995]},{"content":"public void finalize()","pos":[43073,43095]},{"content":"public void new()","pos":[43191,43208]},{"content":"Initializes a new instance of the MapiEx class.","pos":[43257,43304]},{"content":"public void logout()","pos":[43309,43329]},{"pos":[43430,43462],"content":"Method getAppointmentFromEntryId","linkify":"Method getAppointmentFromEntryId","nodes":[{"content":"Method getAppointmentFromEntryId","pos":[0,32]}]},{"pos":[43538,43548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"entryID","pos":[43550,43557]},{"pos":[43566,43578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43584,43612],"content":"Method getContactFromEntryId","linkify":"Method getContactFromEntryId","nodes":[{"content":"Method getContactFromEntryId","pos":[0,28]}]},{"pos":[43680,43690],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"entryID","pos":[43692,43699]},{"pos":[43708,43720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43726,43747],"content":"Method getCurrentUser","linkify":"Method getCurrentUser","nodes":[{"content":"Method getCurrentUser","pos":[0,21]}]},{"pos":[43787,43799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43805,43831],"content":"Method getCurrentUserEmail","linkify":"Method getCurrentUserEmail","nodes":[{"content":"Method getCurrentUserEmail","pos":[0,26]}]},{"pos":[43876,43888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43894,43922],"content":"Method getCurrentUserEntryId","linkify":"Method getCurrentUserEntryId","nodes":[{"content":"Method getCurrentUserEntryId","pos":[0,28]}]},{"pos":[43969,43981],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43987,44012],"content":"Method getCurrentUserName","linkify":"Method getCurrentUserName","nodes":[{"content":"Method getCurrentUserName","pos":[0,25]}]},{"pos":[44056,44068],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44074,44099],"content":"Method getMailFromEntryId","linkify":"Method getMailFromEntryId","nodes":[{"content":"Method getMailFromEntryId","pos":[0,25]}]},{"pos":[44161,44171],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"entryID","pos":[44173,44180]},{"pos":[44189,44201],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44207,44232],"content":"Method getTaskFromEntryId","linkify":"Method getTaskFromEntryId","nodes":[{"content":"Method getTaskFromEntryId","pos":[0,25]}]},{"pos":[44294,44304],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"entryID","pos":[44306,44313]},{"pos":[44322,44334],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44340,44352],"content":"Method logon","linkify":"Method logon","nodes":[{"content":"Method logon","pos":[0,12]}]},{"pos":[44423,44433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"profileName","pos":[44435,44446]},{"content":"password","pos":[44460,44468]},{"content":"flags","pos":[44482,44487]},{"pos":[44496,44508],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44514,44536],"content":"Method mapiInitialised","linkify":"Method mapiInitialised","nodes":[{"content":"Method mapiInitialised","pos":[0,22]}]},{"pos":[44581,44593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44599,44622],"content":"Method openMessageStore","linkify":"Method openMessageStore","nodes":[{"content":"Method openMessageStore","pos":[0,23]}]},{"pos":[44675,44685],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"str","pos":[44687,44690]},{"pos":[44699,44711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[44717,44732],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[44766,44776],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the MapiEx class.","pos":[44778,44825]},{"pos":[44854,44867],"content":"Method logout","linkify":"Method logout","nodes":[{"content":"Method logout","pos":[0,13]}]},{"pos":[44898,44921],"content":"Class MapiExAppointment","linkify":"Class MapiExAppointment","nodes":[{"content":"Class MapiExAppointment","pos":[0,23]}]},{"pos":[44977,44984],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44990,44998],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[45004,45011],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[45015,45021]},{"content":"Description","pos":[45072,45083]},{"content":"public str addRecipient(str email, str name, int type)","pos":[45255,45309]},{"content":"public str entryId()","pos":[45375,45395]},{"content":"public str getGlobalObjectId()","pos":[45495,45525]},{"content":"public boolean getRecipient(int index)","pos":[45615,45653]},{"content":"public int getRecipientCount()","pos":[45735,45765]},{"content":"public str getRecipientDisplayName()","pos":[45855,45891]},{"content":"public str getRecipientEmailAddress()","pos":[45975,46012]},{"content":"public str getRecipientEntryId()","pos":[46095,46127]},{"content":"public boolean getRecipients()","pos":[46215,46245]},{"content":"public str getRecipientSMTPAddress()","pos":[46335,46371]},{"content":"public int getRecipientType()","pos":[46455,46484]},{"content":"public str getSenderEmail()","pos":[46575,46602]},{"content":"public str getSenderName()","pos":[46695,46721]},{"content":"public str removeRecipient(str email, int type)","pos":[46815,46862]},{"content":"public boolean save()","pos":[46935,46956]},{"content":"public boolean setBody(str body)","pos":[47055,47087]},{"content":"public void new()","pos":[47175,47192]},{"content":"Initializes a new instance of the MapiExAppointment class.","pos":[47232,47290]},{"content":"public void close()","pos":[47295,47314]},{"content":"public void finalize()","pos":[47415,47437]},{"pos":[47538,47557],"content":"Method addRecipient","linkify":"Method addRecipient","nodes":[{"content":"Method addRecipient","pos":[0,19]}]},{"pos":[47624,47634],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"email","pos":[47636,47641]},{"content":"name","pos":[47655,47659]},{"content":"type","pos":[47673,47677]},{"pos":[47686,47698],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47704,47718],"content":"Method entryId","linkify":"Method entryId","nodes":[{"content":"Method entryId","pos":[0,14]}]},{"pos":[47751,47763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47769,47793],"content":"Method getGlobalObjectId","linkify":"Method getGlobalObjectId","nodes":[{"content":"Method getGlobalObjectId","pos":[0,24]}]},{"pos":[47836,47848],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47854,47873],"content":"Method getRecipient","linkify":"Method getRecipient","nodes":[{"content":"Method getRecipient","pos":[0,19]}]},{"pos":[47924,47934],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[47936,47941]},{"pos":[47950,47962],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[47968,47992],"content":"Method getRecipientCount","linkify":"Method getRecipientCount","nodes":[{"content":"Method getRecipientCount","pos":[0,24]}]},{"pos":[48035,48047],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48053,48083],"content":"Method getRecipientDisplayName","linkify":"Method getRecipientDisplayName","nodes":[{"content":"Method getRecipientDisplayName","pos":[0,30]}]},{"pos":[48132,48144],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48150,48181],"content":"Method getRecipientEmailAddress","linkify":"Method getRecipientEmailAddress","nodes":[{"content":"Method getRecipientEmailAddress","pos":[0,31]}]},{"pos":[48231,48243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48249,48275],"content":"Method getRecipientEntryId","linkify":"Method getRecipientEntryId","nodes":[{"content":"Method getRecipientEntryId","pos":[0,26]}]},{"pos":[48320,48332],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48338,48358],"content":"Method getRecipients","linkify":"Method getRecipients","nodes":[{"content":"Method getRecipients","pos":[0,20]}]},{"pos":[48401,48413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48419,48449],"content":"Method getRecipientSMTPAddress","linkify":"Method getRecipientSMTPAddress","nodes":[{"content":"Method getRecipientSMTPAddress","pos":[0,30]}]},{"pos":[48498,48510],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48516,48539],"content":"Method getRecipientType","linkify":"Method getRecipientType","nodes":[{"content":"Method getRecipientType","pos":[0,23]}]},{"pos":[48581,48593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48599,48620],"content":"Method getSenderEmail","linkify":"Method getSenderEmail","nodes":[{"content":"Method getSenderEmail","pos":[0,21]}]},{"pos":[48660,48672],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48678,48698],"content":"Method getSenderName","linkify":"Method getSenderName","nodes":[{"content":"Method getSenderName","pos":[0,20]}]},{"pos":[48737,48749],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48755,48777],"content":"Method removeRecipient","linkify":"Method removeRecipient","nodes":[{"content":"Method removeRecipient","pos":[0,22]}]},{"pos":[48837,48847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"email","pos":[48849,48854]},{"content":"type","pos":[48868,48872]},{"pos":[48881,48893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48899,48910],"content":"Method save","linkify":"Method save","nodes":[{"content":"Method save","pos":[0,11]}]},{"pos":[48944,48956],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48962,48976],"content":"Method setBody","linkify":"Method setBody","nodes":[{"content":"Method setBody","pos":[0,14]}]},{"pos":[49021,49031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"body","pos":[49033,49037]},{"pos":[49046,49058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[49064,49074],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the MapiExAppointment class.","pos":[49076,49134]},{"pos":[49163,49175],"content":"Method close","linkify":"Method close","nodes":[{"content":"Method close","pos":[0,12]}]},{"pos":[49206,49221],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[49254,49273],"content":"Class MapiExContact","linkify":"Class MapiExContact","nodes":[{"content":"Class MapiExContact","pos":[0,19]}]},{"pos":[49325,49332],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[49338,49346],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[49352,49359],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[49363,49369]},{"content":"Description","pos":[49399,49410]},{"content":"public str entryId()","pos":[49553,49573]},{"content":"public str getBody()","pos":[49648,49668]},{"content":"public str getEmail1()","pos":[49743,49765]},{"content":"public str getEmail1DisplayName()","pos":[49838,49871]},{"content":"public str getEmail1Type()","pos":[49933,49959]},{"content":"public str getEmail2()","pos":[50028,50050]},{"content":"public str getEmail2DisplayName()","pos":[50123,50156]},{"content":"public str getEmail2Type()","pos":[50218,50244]},{"content":"public str getEmail3()","pos":[50313,50335]},{"content":"public str getEmail3DisplayName()","pos":[50408,50441]},{"content":"public str getEmail3Type()","pos":[50503,50529]},{"content":"public str getIMAddress()","pos":[50598,50623]},{"content":"public boolean save()","pos":[50693,50714]},{"content":"public boolean setBody(str body)","pos":[50788,50820]},{"content":"public void close()","pos":[50883,50902]},{"content":"public void finalize()","pos":[50978,51000]},{"content":"public void new()","pos":[51073,51090]},{"content":"Initializes a new instance of the MapiExContact class.","pos":[51109,51163]},{"pos":[51171,51185],"content":"Method entryId","linkify":"Method entryId","nodes":[{"content":"Method entryId","pos":[0,14]}]},{"pos":[51218,51230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51236,51250],"content":"Method getBody","linkify":"Method getBody","nodes":[{"content":"Method getBody","pos":[0,14]}]},{"pos":[51283,51295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51301,51317],"content":"Method getEmail1","linkify":"Method getEmail1","nodes":[{"content":"Method getEmail1","pos":[0,16]}]},{"pos":[51352,51364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51370,51397],"content":"Method getEmail1DisplayName","linkify":"Method getEmail1DisplayName","nodes":[{"content":"Method getEmail1DisplayName","pos":[0,27]}]},{"pos":[51443,51455],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51461,51481],"content":"Method getEmail1Type","linkify":"Method getEmail1Type","nodes":[{"content":"Method getEmail1Type","pos":[0,20]}]},{"pos":[51520,51532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51538,51554],"content":"Method getEmail2","linkify":"Method getEmail2","nodes":[{"content":"Method getEmail2","pos":[0,16]}]},{"pos":[51589,51601],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51607,51634],"content":"Method getEmail2DisplayName","linkify":"Method getEmail2DisplayName","nodes":[{"content":"Method getEmail2DisplayName","pos":[0,27]}]},{"pos":[51680,51692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51698,51718],"content":"Method getEmail2Type","linkify":"Method getEmail2Type","nodes":[{"content":"Method getEmail2Type","pos":[0,20]}]},{"pos":[51757,51769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51775,51791],"content":"Method getEmail3","linkify":"Method getEmail3","nodes":[{"content":"Method getEmail3","pos":[0,16]}]},{"pos":[51826,51838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51844,51871],"content":"Method getEmail3DisplayName","linkify":"Method getEmail3DisplayName","nodes":[{"content":"Method getEmail3DisplayName","pos":[0,27]}]},{"pos":[51917,51929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[51935,51955],"content":"Method getEmail3Type","linkify":"Method getEmail3Type","nodes":[{"content":"Method getEmail3Type","pos":[0,20]}]},{"pos":[51994,52006],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52012,52031],"content":"Method getIMAddress","linkify":"Method getIMAddress","nodes":[{"content":"Method getIMAddress","pos":[0,19]}]},{"pos":[52069,52081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52087,52098],"content":"Method save","linkify":"Method save","nodes":[{"content":"Method save","pos":[0,11]}]},{"pos":[52132,52144],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52150,52164],"content":"Method setBody","linkify":"Method setBody","nodes":[{"content":"Method setBody","pos":[0,14]}]},{"pos":[52209,52219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"body","pos":[52221,52225]},{"pos":[52234,52246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52252,52264],"content":"Method close","linkify":"Method close","nodes":[{"content":"Method close","pos":[0,12]}]},{"pos":[52295,52310],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[52344,52354],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the MapiExContact class.","pos":[52356,52410]},{"pos":[52438,52454],"content":"Class MapiExMail","linkify":"Class MapiExMail","nodes":[{"content":"Class MapiExMail","pos":[0,16]}]},{"pos":[52503,52510],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[52516,52524],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[52530,52537],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[52541,52547]},{"content":"Description","pos":[52598,52609]},{"content":"public str addRecipient(str email, str name, int type)","pos":[52767,52821]},{"content":"public str entryId()","pos":[52880,52900]},{"content":"public boolean getRecipient(int index)","pos":[52993,53031]},{"content":"public int getRecipientCount()","pos":[53106,53136]},{"content":"public str getRecipientDisplayName()","pos":[53219,53255]},{"content":"public str getRecipientEmailAddress()","pos":[53332,53369]},{"content":"public str getRecipientEntryId()","pos":[53445,53477]},{"content":"public boolean getRecipients()","pos":[53558,53588]},{"content":"public str getRecipientSMTPAddress()","pos":[53671,53707]},{"content":"public int getRecipientType()","pos":[53784,53813]},{"content":"public str getSenderEmail()","pos":[53897,53924]},{"content":"public str getSenderName()","pos":[54010,54036]},{"content":"public str removeRecipient(str email, int type)","pos":[54123,54170]},{"content":"public boolean save()","pos":[54236,54257]},{"content":"public boolean saveMsgToFile(str fileName)","pos":[54349,54391]},{"content":"public boolean send()","pos":[54462,54483]},{"content":"public boolean setBody(str body)","pos":[54575,54607]},{"content":"public void finalize()","pos":[54688,54710]},{"content":"public void close()","pos":[54801,54820]},{"content":"public void new()","pos":[54914,54931]},{"content":"Initializes a new instance of the MapiExMail class.","pos":[54971,55022]},{"pos":[55030,55049],"content":"Method addRecipient","linkify":"Method addRecipient","nodes":[{"content":"Method addRecipient","pos":[0,19]}]},{"pos":[55116,55126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"email","pos":[55128,55133]},{"content":"name","pos":[55147,55151]},{"content":"type","pos":[55165,55169]},{"pos":[55178,55190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55196,55210],"content":"Method entryId","linkify":"Method entryId","nodes":[{"content":"Method entryId","pos":[0,14]}]},{"pos":[55243,55255],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55261,55280],"content":"Method getRecipient","linkify":"Method getRecipient","nodes":[{"content":"Method getRecipient","pos":[0,19]}]},{"pos":[55331,55341],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[55343,55348]},{"pos":[55357,55369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55375,55399],"content":"Method getRecipientCount","linkify":"Method getRecipientCount","nodes":[{"content":"Method getRecipientCount","pos":[0,24]}]},{"pos":[55442,55454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55460,55490],"content":"Method getRecipientDisplayName","linkify":"Method getRecipientDisplayName","nodes":[{"content":"Method getRecipientDisplayName","pos":[0,30]}]},{"pos":[55539,55551],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55557,55588],"content":"Method getRecipientEmailAddress","linkify":"Method getRecipientEmailAddress","nodes":[{"content":"Method getRecipientEmailAddress","pos":[0,31]}]},{"pos":[55638,55650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55656,55682],"content":"Method getRecipientEntryId","linkify":"Method getRecipientEntryId","nodes":[{"content":"Method getRecipientEntryId","pos":[0,26]}]},{"pos":[55727,55739],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55745,55765],"content":"Method getRecipients","linkify":"Method getRecipients","nodes":[{"content":"Method getRecipients","pos":[0,20]}]},{"pos":[55808,55820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55826,55856],"content":"Method getRecipientSMTPAddress","linkify":"Method getRecipientSMTPAddress","nodes":[{"content":"Method getRecipientSMTPAddress","pos":[0,30]}]},{"pos":[55905,55917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[55923,55946],"content":"Method getRecipientType","linkify":"Method getRecipientType","nodes":[{"content":"Method getRecipientType","pos":[0,23]}]},{"pos":[55988,56000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56006,56027],"content":"Method getSenderEmail","linkify":"Method getSenderEmail","nodes":[{"content":"Method getSenderEmail","pos":[0,21]}]},{"pos":[56067,56079],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56085,56105],"content":"Method getSenderName","linkify":"Method getSenderName","nodes":[{"content":"Method getSenderName","pos":[0,20]}]},{"pos":[56144,56156],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56162,56184],"content":"Method removeRecipient","linkify":"Method removeRecipient","nodes":[{"content":"Method removeRecipient","pos":[0,22]}]},{"pos":[56244,56254],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"email","pos":[56256,56261]},{"content":"type","pos":[56275,56279]},{"pos":[56288,56300],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56306,56317],"content":"Method save","linkify":"Method save","nodes":[{"content":"Method save","pos":[0,11]}]},{"pos":[56351,56363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56369,56389],"content":"Method saveMsgToFile","linkify":"Method saveMsgToFile","nodes":[{"content":"Method saveMsgToFile","pos":[0,20]}]},{"pos":[56444,56454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fileName","pos":[56456,56464]},{"pos":[56473,56485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56491,56502],"content":"Method send","linkify":"Method send","nodes":[{"content":"Method send","pos":[0,11]}]},{"pos":[56536,56548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56554,56568],"content":"Method setBody","linkify":"Method setBody","nodes":[{"content":"Method setBody","pos":[0,14]}]},{"pos":[56613,56623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"body","pos":[56625,56629]},{"pos":[56638,56650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[56656,56671],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[56705,56717],"content":"Method close","linkify":"Method close","nodes":[{"content":"Method close","pos":[0,12]}]},{"pos":[56748,56758],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the MapiExMail class.","pos":[56760,56811]},{"pos":[56839,56858],"content":"Class MapiExMessage","linkify":"Class MapiExMessage","nodes":[{"content":"Class MapiExMessage","pos":[0,19]}]},{"pos":[56903,56910],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[56916,56924],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[56930,56937],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[56941,56947]},{"content":"Description","pos":[56976,56987]},{"content":"public str entryId()","pos":[57129,57149]},{"content":"public str getBody()","pos":[57223,57243]},{"content":"public boolean save()","pos":[57317,57338]},{"content":"public boolean setBody(str body)","pos":[57411,57443]},{"content":"public void new()","pos":[57505,57522]},{"content":"Initializes a new instance of the MapiExMessage class.","pos":[57540,57594]},{"content":"public void finalize()","pos":[57599,57621]},{"content":"public void close()","pos":[57693,57712]},{"pos":[57790,57804],"content":"Method entryId","linkify":"Method entryId","nodes":[{"content":"Method entryId","pos":[0,14]}]},{"pos":[57837,57849],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57855,57869],"content":"Method getBody","linkify":"Method getBody","nodes":[{"content":"Method getBody","pos":[0,14]}]},{"pos":[57902,57914],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57920,57931],"content":"Method save","linkify":"Method save","nodes":[{"content":"Method save","pos":[0,11]}]},{"pos":[57965,57977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57983,57997],"content":"Method setBody","linkify":"Method setBody","nodes":[{"content":"Method setBody","pos":[0,14]}]},{"pos":[58042,58052],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"body","pos":[58054,58058]},{"pos":[58067,58079],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[58085,58095],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the MapiExMessage class.","pos":[58097,58151]},{"pos":[58180,58195],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[58229,58241],"content":"Method close","linkify":"Method close","nodes":[{"content":"Method close","pos":[0,12]}]},{"pos":[58271,58287],"content":"Class MapiExTask","linkify":"Class MapiExTask","nodes":[{"content":"Class MapiExTask","pos":[0,16]}]},{"pos":[58336,58343],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[58349,58357],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[58363,58370],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[58374,58380]},{"content":"Description","pos":[58409,58420]},{"content":"public str entryId()","pos":[58556,58576]},{"content":"public str getBody()","pos":[58647,58667]},{"content":"public boolean save()","pos":[58738,58759]},{"content":"public boolean setBody(str body)","pos":[58829,58861]},{"content":"public void finalize()","pos":[58920,58942]},{"content":"public void close()","pos":[59011,59030]},{"content":"public void new()","pos":[59102,59119]},{"content":"Initializes a new instance of the MapiExTask class.","pos":[59137,59188]},{"pos":[59196,59210],"content":"Method entryId","linkify":"Method entryId","nodes":[{"content":"Method entryId","pos":[0,14]}]},{"pos":[59243,59255],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59261,59275],"content":"Method getBody","linkify":"Method getBody","nodes":[{"content":"Method getBody","pos":[0,14]}]},{"pos":[59308,59320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59326,59337],"content":"Method save","linkify":"Method save","nodes":[{"content":"Method save","pos":[0,11]}]},{"pos":[59371,59383],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59389,59403],"content":"Method setBody","linkify":"Method setBody","nodes":[{"content":"Method setBody","pos":[0,14]}]},{"pos":[59448,59458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"body","pos":[59460,59464]},{"pos":[59473,59485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59491,59506],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[59540,59552],"content":"Method close","linkify":"Method close","nodes":[{"content":"Method close","pos":[0,12]}]},{"pos":[59583,59593],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the MapiExTask class.","pos":[59595,59646]},{"pos":[59674,59692],"content":"Class MapiFileDesc","linkify":"Class MapiFileDesc","nodes":[{"content":"Class MapiFileDesc","pos":[0,18]}]},{"content":"The MapiFileDesc class gets and sets the files that are attached to messages.","pos":[59732,59809]},{"pos":[59815,59822],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The file description consists of two types of information for the file:","pos":[59824,59895]},{"content":"A path method, which points to a file on disk","pos":[59901,59946]},{"content":"A fileName method, which contains the file name as it will be presented to the user.","pos":[59951,60035]},{"pos":[60041,60049],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[60240,60247],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[60251,60257]},{"content":"Description","pos":[60291,60302]},{"content":"public str fileName(<ph id=\"ph1\">\\[</ph>str filename<ph id=\"ph2\">\\]</ph>)","pos":[60447,60484],"source":"public str fileName(\\[str filename\\])"},{"content":"public str path(<ph id=\"ph1\">\\[</ph>str thePath<ph id=\"ph2\">\\]</ph>)","pos":[60545,60577],"source":"public str path(\\[str thePath\\])"},{"content":"public void new()","pos":[60643,60660]},{"content":"Initializes a new instance of the MapiFileDesc class.","pos":[60683,60736]},{"content":"public void finalize()","pos":[60741,60763]},{"pos":[60842,60857],"content":"Method fileName","linkify":"Method fileName","nodes":[{"content":"Method fileName","pos":[0,15]}]},{"pos":[60905,60915],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[60917,60925]},{"pos":[60934,60946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60952,60963],"content":"Method path","linkify":"Method path","nodes":[{"content":"Method path","pos":[0,11]}]},{"pos":[61006,61016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"thePath","pos":[61018,61025]},{"pos":[61034,61046],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61052,61062],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the MapiFileDesc class.","pos":[61064,61117]},{"pos":[61146,61161],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[61194,61211],"content":"Class MapiMessage","linkify":"Class MapiMessage","nodes":[{"content":"Class MapiMessage","pos":[0,17]}]},{"content":"The MapiMessage class contains a message that is sent to or received from the MAPI system.","pos":[61250,61340]},{"content":"The message includes a subject, text, recipient information, and attachment information.","pos":[61341,61429]},{"pos":[61435,61442],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When you send or receive a message, the message is passed to and from the MAPI system as a MapiMessage object.","pos":[61444,61554]},{"pos":[61560,61568],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[61574,61581],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[61585,61591]},{"content":"Description","pos":[61649,61660]},{"content":"public str conversationID(<ph id=\"ph1\">\\[</ph>str conversationId<ph id=\"ph2\">\\]</ph>)","pos":[61929,61978],"source":"public str conversationID(\\[str conversationId\\])"},{"content":"Gets or sets the string that identifies the conversation thread to which the message belongs.","pos":[61993,62086]},{"content":"public str dateReceived(<ph id=\"ph1\">\\[</ph>Date theDate<ph id=\"ph2\">\\]</ph>)","pos":[62101,62142],"source":"public str dateReceived(\\[Date theDate\\])"},{"content":"Returns the date when the message was received.","pos":[62165,62212]},{"content":"public int flags(<ph id=\"ph1\">\\[</ph>int flags<ph id=\"ph2\">\\]</ph>)","pos":[62273,62304],"source":"public int flags(\\[int flags\\])"},{"content":"Set or get a bitmask of the message status flags.","pos":[62337,62386]},{"content":"public MapiFileDesc getFileNo(int fileNo)","pos":[62445,62486]},{"content":"Gets a file attachment from a message.","pos":[62509,62547]},{"content":"public MapiRecipDesc getRecipNo(int recipentNo)","pos":[62617,62664]},{"content":"Retrieves information about a message recipient in a MapiRecipDesc object.","pos":[62681,62755]},{"content":"public str messageType(<ph id=\"ph1\">\\[</ph>str messageType<ph id=\"ph2\">\\]</ph>)","pos":[62789,62832],"source":"public str messageType(\\[str messageType\\])"},{"content":"Gets or sets the string that indicates that the message is not of the IPM (interpersonal message) type.","pos":[62853,62956]},{"content":"public int numFiles(<ph id=\"ph1\">\\[</ph>int numFiles<ph id=\"ph2\">\\]</ph>)","pos":[62961,62998],"source":"public int numFiles(\\[int numFiles\\])"},{"content":"public int numRecips(<ph id=\"ph1\">\\[</ph>int numRecips<ph id=\"ph2\">\\]</ph>)","pos":[63133,63172],"source":"public int numRecips(\\[int numRecips\\])"},{"content":"public MapiRecipDesc originator(<ph id=\"ph1\">\\[</ph>MapiRecipDesc originator<ph id=\"ph2\">\\]</ph>)","pos":[63305,63366],"source":"public MapiRecipDesc originator(\\[MapiRecipDesc originator\\])"},{"content":"public str subject(<ph id=\"ph1\">\\[</ph>str subject<ph id=\"ph2\">\\]</ph>)","pos":[63477,63512],"source":"public str subject(\\[str subject\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str text<ph id=\"ph2\">\\]</ph>)","pos":[63649,63678],"source":"public str text(\\[str text\\])"},{"content":"public void new()","pos":[63821,63838]},{"content":"Initializes an instance of the MapiMessage class.","pos":[63885,63934]},{"content":"public void finalize()","pos":[63993,64015]},{"content":"public void setRecipNo(int recipNo, MapiRecipDesc recipient)","pos":[64165,64225]},{"content":"Adds a recipient to the message.","pos":[64229,64261]},{"content":"public void setFileNo(int fileNo, MapiFileDesc file)","pos":[64337,64389]},{"content":"Sets a file attachment for the message.","pos":[64401,64440]},{"pos":[64512,64533],"content":"Method conversationID","linkify":"Method conversationID","nodes":[{"content":"Method conversationID","pos":[0,21]}]},{"content":"Gets or sets the string that identifies the conversation thread to which the message belongs.","pos":[64535,64628]},{"pos":[64688,64698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"conversationId","pos":[64700,64714]},{"content":"The ID of the conversation thread; optional.","pos":[64717,64761]},{"pos":[64768,64780],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that identifies the conversation thread to which the message belongs.","pos":[64782,64860]},{"pos":[64867,64874],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Some messaging systems might ignore and not return this member.","pos":[64876,64939]},{"pos":[64945,64964],"content":"Method dateReceived","linkify":"Method dateReceived","nodes":[{"content":"Method dateReceived","pos":[0,19]}]},{"content":"Returns the date when the message was received.","pos":[64966,65013]},{"pos":[65065,65075],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"theDate","pos":[65077,65084]},{"content":"The date when the message was received; optional.","pos":[65087,65136]},{"pos":[65143,65155],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that indicates the date when the message was received.","pos":[65157,65220]},{"pos":[65227,65234],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The format of the string that is returned is YYYY/MM/DD HH:MM and uses a 24-hour clock.","pos":[65236,65323]},{"pos":[65329,65341],"content":"Method flags","linkify":"Method flags","nodes":[{"content":"Method flags","pos":[0,12]}]},{"content":"Set or get a bitmask of the message status flags.","pos":[65343,65392]},{"pos":[65434,65444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"flags","pos":[65446,65451]},{"content":"The message status flags; optional.","pos":[65454,65489]},{"pos":[65496,65508],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A bitmask of the message status flags.","pos":[65510,65548]},{"pos":[65555,65562],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following flags can be set:","pos":[65564,65595]},{"content":"<ph id=\"ph1\">\\#</ph>MAPI<ph id=\"ph2\">\\_</ph>RECEIPT<ph id=\"ph3\">\\_</ph>REQUESTED – Receipt notification is requested.","pos":[65601,65664],"source":"\\#MAPI\\_RECEIPT\\_REQUESTED – Receipt notification is requested."},{"content":"Client applications set this bit when they send a message.","pos":[65665,65723]},{"content":"<ph id=\"ph1\">\\#</ph>MAPI<ph id=\"ph2\">\\_</ph>SENT – The message has been sent.","pos":[65728,65769],"source":"\\#MAPI\\_SENT – The message has been sent."},{"content":"<ph id=\"ph1\">\\#</ph>MAPI<ph id=\"ph2\">\\_</ph>UNREAD – The message has not been read.","pos":[65774,65821],"source":"\\#MAPI\\_UNREAD – The message has not been read."},{"pos":[65827,65843],"content":"Method getFileNo","linkify":"Method getFileNo","nodes":[{"content":"Method getFileNo","pos":[0,16]}]},{"content":"Gets a file attachment from a message.","pos":[65845,65883]},{"pos":[65937,65947],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fileNo","pos":[65949,65955]},{"content":"The index of the attachment to retrieve.","pos":[65958,65998]},{"content":"The index starts at 1, and the total number of attachments can be retrieved using the numFiles method.","pos":[65999,66101]},{"pos":[66108,66120],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Returns a MapiFileDesc object that contains information about the attachment.","pos":[66122,66199]},{"pos":[66206,66213],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The attached file is returned in a MapiFileDesc object.","pos":[66215,66270]},{"pos":[66277,66285],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[66524,66541],"content":"Method getRecipNo","linkify":"Method getRecipNo","nodes":[{"content":"Method getRecipNo","pos":[0,17]}]},{"content":"Retrieves information about a message recipient in a MapiRecipDesc object.","pos":[66543,66617]},{"pos":[66677,66687],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"recipentNo","pos":[66689,66699]},{"content":"The number of the recipient to retrieve.","pos":[66702,66742]},{"content":"The numbering starts at 1, and the total number of recipients can be read by using the numRecips method.","pos":[66743,66847]},{"pos":[66854,66866],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A MapiRecipDesc object that describes the recipient or nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[66868,66988]},{"pos":[66994,67012],"content":"Method messageType","linkify":"Method messageType","nodes":[{"content":"Method messageType","pos":[0,18]}]},{"content":"Gets or sets the string that indicates that the message is not of the IPM (interpersonal message) type.","pos":[67014,67117]},{"pos":[67171,67181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"messageType","pos":[67183,67194]},{"content":"The messageType value to set for the message; optional.","pos":[67197,67252]},{"pos":[67259,67271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A messagetype string.","pos":[67273,67294]},{"pos":[67301,67308],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Applications can select message types for messages that are not IPMs.","pos":[67310,67379]},{"content":"Clients that support only IPMs can ignore the MessageType member when they read messages and set it to empty when they send messages.","pos":[67380,67513]},{"pos":[67519,67534],"content":"Method numFiles","linkify":"Method numFiles","nodes":[{"content":"Method numFiles","pos":[0,15]}]},{"pos":[67582,67592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"numFiles","pos":[67594,67602]},{"pos":[67611,67623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67629,67645],"content":"Method numRecips","linkify":"Method numRecips","nodes":[{"content":"Method numRecips","pos":[0,16]}]},{"pos":[67695,67705],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"numRecips","pos":[67707,67716]},{"pos":[67725,67737],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67743,67760],"content":"Method originator","linkify":"Method originator","nodes":[{"content":"Method originator","pos":[0,17]}]},{"pos":[67832,67842],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"originator","pos":[67844,67854]},{"pos":[67863,67875],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67881,67895],"content":"Method subject","linkify":"Method subject","nodes":[{"content":"Method subject","pos":[0,14]}]},{"pos":[67941,67951],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"subject","pos":[67953,67960]},{"pos":[67969,67981],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67987,67998],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[68038,68048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"text","pos":[68050,68054]},{"pos":[68063,68075],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68081,68091],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes an instance of the MapiMessage class.","pos":[68093,68142]},{"pos":[68171,68186],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[68220,68237],"content":"Method setRecipNo","linkify":"Method setRecipNo","nodes":[{"content":"Method setRecipNo","pos":[0,17]}]},{"content":"Adds a recipient to the message.","pos":[68239,68271]},{"pos":[68344,68354],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"recipNo","pos":[68356,68363]},{"content":"The MapiRecipDesc object that describes the recipient.","pos":[68366,68420]},{"content":"recipient","pos":[68432,68441]},{"content":"The MapiRecipDesc object that describes the recipient.","pos":[68444,68498]},{"pos":[68505,68512],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you have to get a correct MapiRecipDesc object from a name that a user entered, use the resolveName method.","pos":[68514,68624]},{"pos":[68630,68646],"content":"Method setFileNo","linkify":"Method setFileNo","nodes":[{"content":"Method setFileNo","pos":[0,16]}]},{"content":"Sets a file attachment for the message.","pos":[68648,68687]},{"pos":[68752,68762],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fileNo","pos":[68764,68770]},{"content":"The MapiFileDesc object that describes the attachment.","pos":[68773,68827]},{"content":"file","pos":[68839,68843]},{"content":"The MapiFileDesc object that describes the attachment.","pos":[68846,68900]},{"pos":[68907,68914],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The attachments are numbered from 1.","pos":[68916,68952]},{"content":"Therefore, the first attachment should be numbered 1.","pos":[68953,69006]},{"content":"You can call the numFiles method to retrieve the number of attachments.","pos":[69007,69078]},{"pos":[69085,69093],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[69300,69319],"content":"Class MapiRecipDesc","linkify":"Class MapiRecipDesc","nodes":[{"content":"Class MapiRecipDesc","pos":[0,19]}]},{"pos":[69364,69371],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[69377,69385],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[69391,69398],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[69402,69408]},{"content":"Description","pos":[69446,69457]},{"content":"public str address(<ph id=\"ph1\">\\[</ph>str Address<ph id=\"ph2\">\\]</ph>)","pos":[69782,69817],"source":"public str address(\\[str Address\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str Name<ph id=\"ph2\">\\]</ph>)","pos":[69972,70001],"source":"public str name(\\[str Name\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[70016,70158]},{"content":"public int recipClass(<ph id=\"ph1\">\\[</ph>int RecipClass<ph id=\"ph2\">\\]</ph>)","pos":[70163,70204],"source":"public int recipClass(\\[int RecipClass\\])"},{"content":"public void new()","pos":[70353,70370]},{"content":"Initializes a new instance of the MapiRecipDesc class.","pos":[70397,70451]},{"content":"public void finalize()","pos":[70543,70565]},{"pos":[70736,70750],"content":"Method address","linkify":"Method address","nodes":[{"content":"Method address","pos":[0,14]}]},{"pos":[70796,70806],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Address","pos":[70808,70815]},{"pos":[70824,70836],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70842,70853],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[70855,70997]},{"pos":[71037,71047],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name","pos":[71049,71053]},{"pos":[71062,71074],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in thte code to identify an application object.","pos":[71076,71145]},{"pos":[71152,71159],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[71161,71255]},{"content":"Begins with a letter.","pos":[71261,71282]},{"content":"Doesn't exceed 250 characters.","pos":[71287,71317]},{"content":"Can include numbers and underscore characters.","pos":[71322,71368]},{"content":"Cannot include punctuation or spaces.","pos":[71373,71410]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[71415,71533]},{"pos":[71539,71556],"content":"Method recipClass","linkify":"Method recipClass","nodes":[{"content":"Method recipClass","pos":[0,17]}]},{"pos":[71608,71618],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"RecipClass","pos":[71620,71630]},{"pos":[71639,71651],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71657,71667],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the MapiRecipDesc class.","pos":[71669,71723]},{"pos":[71752,71767],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[71800,71817],"content":"Class MapIterator","linkify":"Class MapIterator","nodes":[{"content":"Class MapIterator","pos":[0,17]}]},{"content":"The MapIterator class is used to iterate over the elements in a map.","pos":[71856,71924]},{"pos":[71930,71937],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Map iterators are used to iterate over the elements in a map.","pos":[71939,72000]},{"content":"They can be viewed as simple pointers into the maps over which they iterate.","pos":[72001,72077]},{"content":"Functionality is available to start the iteration, determine whether more (key, value) pairs are available, and fetch the element that is pointed to by the iterator.","pos":[72078,72243]},{"content":"It is better to use the MapEnumerator class than the MapIterator class.","pos":[72244,72315]},{"content":"Map iterators and the maps over which they iterate must be on the same client/server side.","pos":[72316,72406]},{"content":"If you use the MapIterator class and code is marked as Called from, the map and the iterator could end up on different tiers, and the code will fail.","pos":[72407,72556]},{"content":"If you use the MapEnumerator class, the enumerator is automatically created on the same tier as the map.","pos":[72557,72661]},{"content":"Additionally, if you use the MapIterator class, you must explicitly call the more and next methods to move to the next item in a map.","pos":[72662,72795]},{"content":"If you use the MapEnumerator class, you only have to call the moveNext method.","pos":[72796,72874]},{"content":"The sequence in which the elements are inserted does not determine the order in which they occur.","pos":[72875,72972]},{"content":"The order is defined by the ordering of the elements.","pos":[72973,73026]},{"content":"Elements that have lower keys appear before elements that have higher keys.","pos":[73027,73102]},{"content":"The usual ordering for the types is used.","pos":[73103,73144]},{"content":"However, if the keys are objects, the addresses of the objects are used to supply the ordering, and therefore no specific ordering can be inferred.","pos":[73145,73292]},{"content":"The addresses of the objects are transient by nature.","pos":[73293,73346]},{"pos":[73352,73360],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a map and adds three (key, value) pairs.","pos":[73362,73432]},{"content":"It then iterates through the map and prints information about each map element.","pos":[73433,73512]},{"pos":[74290,74297],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[74301,74307]},{"content":"Description","pos":[74338,74349]},{"content":"public str definitionString()","pos":[74573,74602]},{"content":"Retrieves a textual representation of the iterator type, such as \"<ph id=\"ph1\">\\[</ph>int -<ph id=\"ph2\">&amp;gt;</ph> str<ph id=\"ph3\">\\]</ph> iterator\".","pos":[74610,74704],"source":"Retrieves a textual representation of the iterator type, such as \"\\[int -&gt; str\\] iterator\"."},{"content":"public AnyType domainValue()","pos":[74709,74737]},{"content":"Returns the value of the key in the (key, value) pair that is referred to by the iterator.","pos":[74746,74836]},{"content":"public boolean find(AnyType value)","pos":[74845,74879]},{"content":"Searches for the specified key value.","pos":[74882,74919]},{"content":"public AnyType key()","pos":[74981,75001]},{"content":"Returns the key from the (key, value) pair that is referred to by the iterator.","pos":[75018,75097]},{"content":"public boolean more()","pos":[75117,75138]},{"content":"Determines whether the iterator finds a valid (key, value) pair.","pos":[75154,75218]},{"content":"public AnyType rangeValue()","pos":[75253,75280]},{"content":"Returns the value of the value in the (key, value) pair that is referred to by the iterator.","pos":[75290,75382]},{"content":"public str toString()","pos":[75389,75410]},{"content":"Retrieves a textual representation of the iterator.","pos":[75426,75477]},{"content":"public AnyType value()","pos":[75525,75547]},{"content":"Returns the value from the (key, value) pair that is referred to by the iterator.","pos":[75562,75643]},{"content":"public container valuePair()","pos":[75661,75689]},{"content":"Retrieves a container that holds the key and the value.","pos":[75698,75753]},{"content":"public void next()","pos":[75797,75815]},{"content":"Moves the iterator to the next (key, value) pair.","pos":[75834,75883]},{"content":"public void new(Map map)","pos":[75933,75957]},{"content":"Creates a new iterator for a map that lets you traverse through the elements in the map.","pos":[75970,76058]},{"content":"public void begin()","pos":[76069,76088]},{"content":"Moves the iterator to the start of the map.","pos":[76106,76149]},{"content":"public void end()","pos":[76205,76222]},{"content":"Moves the iterator past the last element in the map.","pos":[76242,76294]},{"content":"public void delete()","pos":[76341,76361]},{"content":"Removes from the map the element that is pointed to by the iterator.","pos":[76378,76446]},{"pos":[76480,76503],"content":"Method definitionString","linkify":"Method definitionString","nodes":[{"content":"Method definitionString","pos":[0,23]}]},{"content":"Retrieves a textual representation of the iterator type, such as \"<ph id=\"ph1\">\\[</ph>int -<ph id=\"ph2\">&amp;gt;</ph> str<ph id=\"ph3\">\\]</ph> iterator\".","pos":[76505,76599],"source":"Retrieves a textual representation of the iterator type, such as \"\\[int -&gt; str\\] iterator\"."},{"pos":[76641,76653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that describes the iterator.","pos":[76655,76692]},{"pos":[76698,76716],"content":"Method domainValue","linkify":"Method domainValue","nodes":[{"content":"Method domainValue","pos":[0,18]}]},{"content":"Returns the value of the key in the (key, value) pair that is referred to by the iterator.","pos":[76718,76808]},{"pos":[76849,76861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of the first item in the map element that is currently referred to by the iterator.","pos":[76863,76956]},{"pos":[76962,76973],"content":"Method find","linkify":"Method find","nodes":[{"content":"Method find","pos":[0,11]}]},{"content":"Searches for the specified key value.","pos":[76975,77012]},{"pos":[77059,77069],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77071,77076]},{"content":"The value to search for.","pos":[77079,77103]},{"pos":[77110,77122],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the value is found; otherwise, false.","pos":[77124,77169]},{"pos":[77176,77183],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If true is returned, the method positions the iterator at the element; otherwise, the MapIterator.more method returns false.","pos":[77185,77309]},{"pos":[77315,77325],"content":"Method key","linkify":"Method key","nodes":[{"content":"Method key","pos":[0,10]}]},{"content":"Returns the key from the (key, value) pair that is referred to by the iterator.","pos":[77327,77406]},{"pos":[77439,77451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The key value of the map entry that is denoted by the iterator.","pos":[77453,77516]},{"pos":[77523,77530],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the SetIterator.more method to test whether an element exists before you try to retrieve the key value of the map element.","pos":[77532,77658]},{"pos":[77665,77673],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example iterates through a map and returns a description of all the elements in the map.","pos":[77675,77777]},{"pos":[78054,78065],"content":"Method more","linkify":"Method more","nodes":[{"content":"Method more","pos":[0,11]}]},{"content":"Determines whether the iterator finds a valid (key, value) pair.","pos":[78067,78131]},{"pos":[78165,78177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if more (key, value) pairs are available in the map; otherwise, false.","pos":[78179,78254]},{"pos":[78261,78268],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you try to access an element that is pointed to by an iterator when the more method returns false, you receive an error.","pos":[78270,78393]},{"content":"The more method only tests whether the iterator points to a valid element.","pos":[78394,78468]},{"content":"It does not test whether there are more elements in the map.","pos":[78469,78529]},{"pos":[78536,78544],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example iterates through a map by using the more method to check whether there are still elements in the map.","pos":[78546,78669]},{"content":"It then returns a description of all the elements in the map.","pos":[78670,78731]},{"pos":[79008,79025],"content":"Method rangeValue","linkify":"Method rangeValue","nodes":[{"content":"Method rangeValue","pos":[0,17]}]},{"content":"Returns the value of the value in the (key, value) pair that is referred to by the iterator.","pos":[79027,79119]},{"pos":[79159,79171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of the second item in the map element that is currently referred to by the iterator.","pos":[79173,79267]},{"pos":[79274,79281],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The rangeValue method has the same functionality as the MapIterator.value method, but it is available as a counterpart to the domainValue method.","pos":[79283,79428]},{"pos":[79434,79449],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Retrieves a textual representation of the iterator.","pos":[79451,79502]},{"pos":[79536,79548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that describes the iterator.","pos":[79550,79589]},{"pos":[79596,79603],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the iterator points to the first element in the set, the string will contain an indication of this, in the form: \"(begin)<ph id=\"ph1\">\\[</ph> <bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept><ph id=\"ph2\">\\]</ph>\".","pos":[79605,79743],"source":"If the iterator points to the first element in the set, the string will contain an indication of this, in the form: \"(begin)\\[ *value*\\]\"."},{"content":"If the iterator does not point to an element (that is, if the MapIterator.more method returns false), the string that is returned is \"(end)\".","pos":[79744,79885]},{"content":"If the iterator points to a value, the string is \"<ph id=\"ph1\">\\[</ph> <bpt id=\"p1\">*</bpt>value<ept id=\"p1\">*</ept><ph id=\"ph2\">\\]</ph>\", where <bpt id=\"p2\">*</bpt>value<ept id=\"p2\">*</ept> is a string representation of the element value.","pos":[79886,80013],"source":" If the iterator points to a value, the string is \"\\[ *value*\\]\", where *value* is a string representation of the element value."},{"pos":[80020,80028],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example iterates through an integer or class map, and prints information about each map element.","pos":[80030,80140]},{"content":"It uses the MapIterator.toString method to return a textual representation of the class in each map element.","pos":[80141,80249]},{"pos":[80941,80953],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"content":"Returns the value from the (key, value) pair that is referred to by the iterator.","pos":[80955,81036]},{"pos":[81071,81083],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value from the map element that is denoted by the map iterator.","pos":[81085,81152]},{"pos":[81159,81166],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the MapIterator.more method to test whether an element exists before you try to retrieve the key value of the map element.","pos":[81168,81294]},{"pos":[81301,81309],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example iterates through a map and returns a list of all the elements in the map.","pos":[81311,81406]},{"pos":[81683,81699],"content":"Method valuePair","linkify":"Method valuePair","nodes":[{"content":"Method valuePair","pos":[0,16]}]},{"content":"Retrieves a container that holds the key and the value.","pos":[81701,81756]},{"pos":[81797,81809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that holds the key and the value.","pos":[81811,81856]},{"pos":[81863,81870],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Objects cannot reside in containers.","pos":[81872,81908]},{"content":"Therefore, an exception is raised if either the key or the value is an object.","pos":[81909,81987]},{"pos":[81993,82004],"content":"Method next","linkify":"Method next","nodes":[{"content":"Method next","pos":[0,11]}]},{"content":"Moves the iterator to the next (key, value) pair.","pos":[82006,82055]},{"pos":[82086,82093],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can use the MapIterator.more method to determine whether there are any more elements in the map.","pos":[82095,82195]},{"pos":[82202,82210],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the next method to iterate through a map and returns a list of all the elements in the map.","pos":[82212,82330]},{"pos":[82607,82617],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a new iterator for a map that lets you traverse through the elements in the map.","pos":[82619,82707]},{"pos":[82744,82754],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"map","pos":[82756,82759]},{"content":"The map for which to create an iterator.","pos":[82762,82802]},{"pos":[82809,82816],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The iterator is positioned at the first value in the map if the map is not empty.","pos":[82818,82899]},{"pos":[82906,82914],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a map of (integer, class) pairs and then creates an iterator to traverse the map.","pos":[82916,83027]},{"pos":[83141,83153],"content":"Method begin","linkify":"Method begin","nodes":[{"content":"Method begin","pos":[0,12]}]},{"content":"Moves the iterator to the start of the map.","pos":[83155,83198]},{"pos":[83230,83237],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Newly created map iterators are positioned at the first element in the map, so you do not have to call the begin method before you iterate through the set.","pos":[83239,83394]},{"content":"You must call the begin method if you want to reset the pointer.","pos":[83395,83459]},{"pos":[83465,83475],"content":"Method end","linkify":"Method end","nodes":[{"content":"Method end","pos":[0,10]}]},{"content":"Moves the iterator past the last element in the map.","pos":[83477,83529]},{"pos":[83559,83566],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"After this method runs, the MapIterator.more method will return false.","pos":[83568,83638]},{"pos":[83644,83657],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"content":"Removes from the map the element that is pointed to by the iterator.","pos":[83659,83727]},{"pos":[83760,83767],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The iterator points to the next element after the delete method is invoked.","pos":[83769,83844]},{"pos":[83849,83869],"content":"Class MemberFunction","linkify":"Class MemberFunction","nodes":[{"content":"Class MemberFunction","pos":[0,20]}]},{"content":"The MemberFunction class provides information about a specified node in the Finance and Operations Application Object Tree (AOT), such as a form, report, or class.","pos":[83913,84076]},{"pos":[84082,84089],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class lets you create, read, update, and delete X++ code and metadata.","pos":[84091,84166]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[84167,84277]},{"content":"You can use the ::findNode method to assign a node to an instance of the MemberFunction class.","pos":[84278,84372]},{"pos":[84378,84386],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the TreeNode::findNode method to assign the node for the AddressSelectForm.callerDataSource method to an instance of the MemberFunction class.","pos":[84388,84557]},{"content":"The MemberFunction.AOTgetSource Method method returns the method source code.","pos":[84558,84635]},{"pos":[85296,85303],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[85307,85313]},{"content":"Description","pos":[85368,85379]},{"content":"public str AOTgetSource()","pos":[85709,85734]},{"content":"Provides the source code for a specified node in the AOT, such as a class or method.","pos":[85770,85854]},{"content":"public boolean canAddEventHandler()","pos":[85910,85945]},{"content":"public boolean isEvent()","pos":[86111,86135]},{"content":"public boolean isStatic()","pos":[86312,86337]},{"content":"Indicates whether a method is static.","pos":[86373,86410]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[86513,86543],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.","pos":[86574,86710]},{"content":"public void AOTedit(<ph id=\"ph1\">\\[</ph>int Line<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int Column<ph id=\"ph4\">\\]</ph>)","pos":[86715,86764],"source":"public void AOTedit(\\[int Line\\], \\[int Column\\])"},{"content":"Opens the appropriate editor for a specified node in the AOT.","pos":[86776,86837]},{"content":"public void new()","pos":[86916,86933]},{"content":"Initializes a new instance of the MemberFunction class.","pos":[86977,87032]},{"content":"public void AOTsetSource(str source, <ph id=\"ph1\">\\[</ph>boolean isStatic<ph id=\"ph2\">\\]</ph>)","pos":[87117,87175],"source":"public void AOTsetSource(str source, \\[boolean isStatic\\])"},{"content":"Sets the source code for a specified node in the AOT, such as a class or method.","pos":[87178,87258]},{"pos":[87321,87340],"content":"Method AOTgetSource","linkify":"Method AOTgetSource","nodes":[{"content":"Method AOTgetSource","pos":[0,19]}]},{"content":"Provides the source code for a specified node in the AOT, such as a class or method.","pos":[87342,87426]},{"pos":[87464,87476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string value for the source code; nullNothingnullptrunita null reference (Nothing in Visual Basic) if the node does not contain source code.","pos":[87478,87620]},{"pos":[87626,87651],"content":"Method canAddEventHandler","linkify":"Method canAddEventHandler","nodes":[{"content":"Method canAddEventHandler","pos":[0,25]}]},{"pos":[87699,87711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87717,87731],"content":"Method isEvent","linkify":"Method isEvent","nodes":[{"content":"Method isEvent","pos":[0,14]}]},{"pos":[87768,87780],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87786,87801],"content":"Method isStatic","linkify":"Method isStatic","nodes":[{"content":"Method isStatic","pos":[0,15]}]},{"content":"Indicates whether a method is static.","pos":[87803,87840]},{"pos":[87878,87890],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the method is static; otherwise, false.","pos":[87892,87939]},{"pos":[87946,87953],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is associated with a specified node in the AOT, such as a form, report, or class.","pos":[87955,88048]},{"content":"This method is used primarily in conjunction with the MemberFunction::AOTsetSource method.","pos":[88049,88139]},{"pos":[88145,88156],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Finance and Operations application object.","pos":[88158,88294]},{"pos":[88335,88345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88347,88352]},{"content":"A string that specifies a node; optional.","pos":[88355,88396]},{"pos":[88403,88415],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[88417,88481]},{"pos":[88488,88495],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[88497,88591]},{"content":"It starts with a letter.","pos":[88597,88621]},{"content":"It doesn't exceed 250 characters.","pos":[88626,88659]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[88664,88718],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[88723,88763]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, and classes.","pos":[88768,88879]},{"pos":[88885,88899],"content":"Method AOTedit","linkify":"Method AOTedit","nodes":[{"content":"Method AOTedit","pos":[0,14]}]},{"content":"Opens the appropriate editor for a specified node in the AOT.","pos":[88901,88962]},{"pos":[89020,89030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Line","pos":[89032,89036]},{"content":"An integer that specifies the column position for the cursor; optional.","pos":[89039,89110]},{"content":"Column","pos":[89122,89128]},{"content":"An integer that specifies the column position for the cursor; optional.","pos":[89131,89202]},{"pos":[89208,89218],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the MemberFunction class.","pos":[89220,89275]},{"pos":[89304,89323],"content":"Method AOTsetSource","linkify":"Method AOTsetSource","nodes":[{"content":"Method AOTsetSource","pos":[0,19]}]},{"content":"Sets the source code for a specified node in the AOT, such as a class or method.","pos":[89325,89405]},{"pos":[89474,89484],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"source","pos":[89486,89492]},{"content":"A Boolean value: true for a static method or false for an instance method; optional.","pos":[89495,89579]},{"content":"isStatic","pos":[89591,89599]},{"content":"A Boolean value: true for a static method or false for an instance method; optional.","pos":[89602,89686]},{"pos":[89691,89701],"content":"Class Menu","linkify":"Class Menu","nodes":[{"content":"Class Menu","pos":[0,10]}]},{"content":"The Menu system class lets you configure and run any of the Finance and OperationsMenu objects from code.","pos":[89735,89840]},{"pos":[89846,89853],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The TreeNode system class serves as a more general approach to the menus in the Finance and Operations Application Object Tree (AOT).","pos":[89855,89988]},{"content":"You use the Menu class to create or manipulate the menus contents, such as submenus and menu items.","pos":[89989,90088]},{"content":"This class lets you create, read, update, and delete X++ code and metadata.","pos":[90089,90164]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[90165,90275]},{"pos":[90281,90289],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[90295,90302],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[90306,90312]},{"content":"Description","pos":[90381,90392]},{"content":"public str changedBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[90708,90743],"source":"public str changedBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[90783,90857]},{"content":"public Date changedDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[90909,90948],"source":"public Date changedDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was last changed.","pos":[90984,91045]},{"content":"public str changedTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[91110,91147],"source":"public str changedTime(\\[str value\\])"},{"content":"Gets or sets the time an application object was last changed.","pos":[91185,91246]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[91311,91383],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[91386,91453]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[91512,91556],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public str createdBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[91713,91748],"source":"public str createdBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who created the application object.","pos":[91788,91857]},{"content":"public Date creationDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[91914,91954],"source":"public Date creationDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was created.","pos":[91989,92045]},{"content":"public str creationTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[92115,92153],"source":"public str creationTime(\\[str value\\])"},{"content":"public str disabledImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[92316,92355],"source":"public str disabledImage(\\[str value\\])"},{"content":"Gets or sets the disabled image of the button.","pos":[92391,92437]},{"content":"public int disabledImageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[92517,92564],"source":"public int disabledImageLocation(\\[int value\\])"},{"content":"public int disabledResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[92718,92760],"source":"public int disabledResource(\\[int value\\])"},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[92793,92871]},{"content":"public int imageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[92919,92958],"source":"public int imageLocation(\\[int value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[93120,93151],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[93195,93232]},{"content":"public str menuFunctionName(<ph id=\"ph1\">\\[</ph>str name<ph id=\"ph2\">\\]</ph>)","pos":[93321,93362],"source":"public str menuFunctionName(\\[str name\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[93522,93560],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[93723,93779],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public str menuName()","pos":[93924,93945]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[94125,94155],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object.","pos":[94200,94321]},{"content":"public int neededAccessLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[94326,94369],"source":"public int neededAccessLevel(\\[int value\\])"},{"content":"Gets or sets the neededAccessLevel property for the MenuFunction class.","pos":[94401,94472]},{"content":"public str normalImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[94527,94564],"source":"public str normalImage(\\[str value\\])"},{"content":"public int normalResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[94728,94768],"source":"public int normalResource(\\[int value\\])"},{"content":"public Guid origin(<ph id=\"ph1\">\\[</ph>Guid value<ph id=\"ph2\">\\]</ph>)","pos":[94929,94963],"source":"public Guid origin(\\[Guid value\\])"},{"content":"public str parameter(<ph id=\"ph1\">\\[</ph>str parameter<ph id=\"ph2\">\\]</ph>)","pos":[95130,95169],"source":"public str parameter(\\[str parameter\\])"},{"content":"public str parameters(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[95331,95367],"source":"public str parameters(\\[str value\\])"},{"content":"Gets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.","pos":[95406,95508]},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[95532,95589],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean setCompany(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[95733,95777],"source":"public boolean setCompany(\\[boolean value\\])"},{"content":"public str shortCut(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[95934,95968],"source":"public str shortCut(\\[str value\\])"},{"content":"public boolean showParentModule(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[96135,96185],"source":"public boolean showParentModule(\\[boolean value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[96336,96377],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[96537,96572],"source":"public str webTarget(\\[str value\\])"},{"content":"public void save()","pos":[96738,96756]},{"content":"public void new(str Name)","pos":[96939,96964]},{"content":"Initializes a new instance of the TreeNode class.","pos":[97014,97063]},{"content":"public void makeWebMenu(Object outputClass)","pos":[97140,97183]},{"content":"public void addMenuitem(xMenuFunction menuFunction)","pos":[97341,97392]},{"content":"Adds a menu item to the menu.","pos":[97416,97445]},{"content":"public void setTreeNodeName(str name)","pos":[97542,97579]},{"content":"public void addMenuReference(Menu menu)","pos":[97743,97782]},{"content":"public void addSubmenu(str name)","pos":[97944,97976]},{"content":"Adds a submenu to the menu.","pos":[98019,98046]},{"content":"public void addSeparator()","pos":[98145,98171]},{"content":"Adds a menu separator to the menu.","pos":[98220,98254]},{"pos":[98349,98365],"content":"Method changedBy","linkify":"Method changedBy","nodes":[{"content":"Method changedBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[98367,98441]},{"pos":[98487,98497],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[98499,98504]},{"pos":[98513,98525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[98527,98548]},{"pos":[98554,98572],"content":"Method changedDate","linkify":"Method changedDate","nodes":[{"content":"Method changedDate","pos":[0,18]}]},{"content":"Gets or sets the date an application object was last changed.","pos":[98574,98635]},{"pos":[98685,98695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[98697,98702]},{"pos":[98711,98723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was last changed.","pos":[98725,98773]},{"pos":[98779,98797],"content":"Method changedTime","linkify":"Method changedTime","nodes":[{"content":"Method changedTime","pos":[0,18]}]},{"content":"Gets or sets the time an application object was last changed.","pos":[98799,98860]},{"pos":[98908,98918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[98920,98925]},{"pos":[98934,98946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The time an application object was last changed.","pos":[98948,98996]},{"pos":[99002,99025],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[99027,99094]},{"pos":[99177,99187],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[99189,99194]},{"pos":[99203,99215],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[99217,99289]},{"pos":[99296,99303],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[99305,99386]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[99387,99480]},{"pos":[99486,99511],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[99566,99576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[99578,99583]},{"pos":[99592,99604],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[99610,99626],"content":"Method createdBy","linkify":"Method createdBy","nodes":[{"content":"Method createdBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who created the application object.","pos":[99628,99697]},{"pos":[99743,99753],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[99755,99760]},{"pos":[99769,99781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[99783,99804]},{"pos":[99810,99829],"content":"Method creationDate","linkify":"Method creationDate","nodes":[{"content":"Method creationDate","pos":[0,19]}]},{"content":"Gets or sets the date an application object was created.","pos":[99831,99887]},{"pos":[99938,99948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[99950,99955]},{"pos":[99964,99976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was created.","pos":[99978,100021]},{"pos":[100027,100046],"content":"Method creationTime","linkify":"Method creationTime","nodes":[{"content":"Method creationTime","pos":[0,19]}]},{"pos":[100095,100105],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100107,100112]},{"pos":[100121,100133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[100139,100159],"content":"Method disabledImage","linkify":"Method disabledImage","nodes":[{"content":"Method disabledImage","pos":[0,20]}]},{"content":"Gets or sets the disabled image of the button.","pos":[100161,100207]},{"pos":[100257,100267],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100269,100274]},{"pos":[100283,100295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The full name of an image file.","pos":[100297,100328]},{"content":"The system supports all of the GDI-supported image formats.","pos":[100329,100388]},{"pos":[100395,100402],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property has precedence over the disabledResource property .","pos":[100404,100469]},{"content":"It is used if both of these properties are set.","pos":[100470,100517]},{"pos":[100523,100551],"content":"Method disabledImageLocation","linkify":"Method disabledImageLocation","nodes":[{"content":"Method disabledImageLocation","pos":[0,28]}]},{"pos":[100609,100619],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100621,100626]},{"pos":[100635,100647],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[100653,100676],"content":"Method disabledResource","linkify":"Method disabledResource","nodes":[{"content":"Method disabledResource","pos":[0,23]}]},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[100678,100756]},{"pos":[100809,100819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100821,100826]},{"pos":[100835,100847],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resource ID of the image to use as the disabled button image.","pos":[100849,100914]},{"content":"Both icon and bitmap images are supported.","pos":[100915,100957]},{"pos":[100963,100983],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[101033,101043],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101045,101050]},{"pos":[101059,101071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101077,101089],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[101091,101128]},{"pos":[101170,101180],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101182,101187]},{"pos":[101196,101208],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[101210,101248]},{"pos":[101255,101262],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[101264,101396]},{"pos":[101402,101425],"content":"Method menuFunctionName","linkify":"Method menuFunctionName","nodes":[{"content":"Method menuFunctionName","pos":[0,23]}]},{"pos":[101477,101487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[101489,101493]},{"pos":[101502,101514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101520,101539],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[101588,101598],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101600,101605]},{"pos":[101614,101626],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101632,101651],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[101718,101728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101730,101735]},{"pos":[101744,101756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101762,101777],"content":"Method menuName","linkify":"Method menuName","nodes":[{"content":"Method menuName","pos":[0,15]}]},{"pos":[101811,101823],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[101829,101840],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, rable, query, or another MSDAX application object.","pos":[101842,101963]},{"pos":[102004,102014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102016,102021]},{"pos":[102030,102042],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[102044,102108]},{"pos":[102115,102122],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[102124,102218]},{"content":"Begins with a letter.","pos":[102224,102245]},{"content":"Doesn't exceed 250 characters.","pos":[102250,102280]},{"content":"Can include numbers and underscore characters.","pos":[102285,102331]},{"content":"Cannot include punctuation or spaces.","pos":[102336,102373]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[102378,102496]},{"pos":[102502,102526],"content":"Method neededAccessLevel","linkify":"Method neededAccessLevel","nodes":[{"content":"Method neededAccessLevel","pos":[0,24]}]},{"content":"Gets or sets the neededAccessLevel property for the MenuFunction class.","pos":[102528,102599]},{"pos":[102653,102663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102665,102670]},{"pos":[102679,102691],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the neededAccessLevel property.","pos":[102693,102745]},{"pos":[102752,102759],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The possible values for the AccessType system enumuration value are as follows:","pos":[102761,102840]},{"content":"AccessType::NoAccess.","pos":[102846,102867]},{"content":"AccessType::View.","pos":[102872,102889]},{"content":"AccessType::Edit.","pos":[102894,102911]},{"content":"AccessType::Add.","pos":[102916,102932]},{"content":"AccessType::Delete.","pos":[102937,102956]},{"pos":[102962,102980],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[103028,103038],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103040,103045]},{"pos":[103054,103066],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103072,103093],"content":"Method normalResource","linkify":"Method normalResource","nodes":[{"content":"Method normalResource","pos":[0,21]}]},{"pos":[103144,103154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103156,103161]},{"pos":[103170,103182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103188,103201],"content":"Method origin","linkify":"Method origin","nodes":[{"content":"Method origin","pos":[0,13]}]},{"pos":[103246,103256],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103258,103263]},{"pos":[103272,103284],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103290,103306],"content":"Method parameter","linkify":"Method parameter","nodes":[{"content":"Method parameter","pos":[0,16]}]},{"pos":[103356,103366],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"parameter","pos":[103368,103377]},{"pos":[103386,103398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103404,103421],"content":"Method parameters","linkify":"Method parameters","nodes":[{"content":"Method parameters","pos":[0,17]}]},{"content":"Gets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.","pos":[103423,103525]},{"pos":[103572,103582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103584,103589]},{"pos":[103598,103610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The list of parameters that are passed to the object.","pos":[103612,103665]},{"pos":[103672,103679],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The parameters string format is Parameter1=Value1, Parameter2=Value2, and so on.cts ignore passed, unrecognized parameters.","pos":[103681,103804]},{"pos":[103810,103828],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[103896,103906],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103908,103913]},{"pos":[103922,103934],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[103940,103957],"content":"Method setCompany","linkify":"Method setCompany","nodes":[{"content":"Method setCompany","pos":[0,17]}]},{"pos":[104012,104022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[104024,104029]},{"pos":[104038,104050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104056,104071],"content":"Method shortCut","linkify":"Method shortCut","nodes":[{"content":"Method shortCut","pos":[0,15]}]},{"pos":[104116,104126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[104128,104133]},{"pos":[104142,104154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104160,104183],"content":"Method showParentModule","linkify":"Method showParentModule","nodes":[{"content":"Method showParentModule","pos":[0,23]}]},{"pos":[104244,104254],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[104256,104261]},{"pos":[104270,104282],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104288,104302],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[104354,104364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[104366,104371]},{"pos":[104380,104392],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104398,104414],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[104460,104470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[104472,104477]},{"pos":[104486,104498],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[104504,104515],"content":"Method save","linkify":"Method save","nodes":[{"content":"Method save","pos":[0,11]}]},{"pos":[104545,104555],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the TreeNode class.","pos":[104557,104606]},{"pos":[104644,104654],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Name","pos":[104656,104660]},{"pos":[104668,104686],"content":"Method makeWebMenu","linkify":"Method makeWebMenu","nodes":[{"content":"Method makeWebMenu","pos":[0,18]}]},{"pos":[104742,104752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"outputClass","pos":[104754,104765]},{"pos":[104773,104791],"content":"Method addMenuitem","linkify":"Method addMenuitem","nodes":[{"content":"Method addMenuitem","pos":[0,18]}]},{"content":"Adds a menu item to the menu.","pos":[104793,104822]},{"pos":[104886,104896],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuFunction","pos":[104898,104910]},{"content":"The menu item to add.","pos":[104913,104934]},{"pos":[104940,104962],"content":"Method setTreeNodeName","linkify":"Method setTreeNodeName","nodes":[{"content":"Method setTreeNodeName","pos":[0,22]}]},{"pos":[105012,105022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[105024,105028]},{"pos":[105036,105059],"content":"Method addMenuReference","linkify":"Method addMenuReference","nodes":[{"content":"Method addMenuReference","pos":[0,23]}]},{"pos":[105111,105121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menu","pos":[105123,105127]},{"pos":[105135,105152],"content":"Method addSubmenu","linkify":"Method addSubmenu","nodes":[{"content":"Method addSubmenu","pos":[0,17]}]},{"content":"Adds a submenu to the menu.","pos":[105154,105181]},{"pos":[105226,105236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[105238,105242]},{"content":"A string expression that evaluates to the name of the submenu to add to the menu.","pos":[105245,105326]},{"pos":[105332,105351],"content":"Method addSeparator","linkify":"Method addSeparator","nodes":[{"content":"Method addSeparator","pos":[0,19]}]},{"content":"Adds a menu separator to the menu.","pos":[105353,105387]},{"pos":[105424,105438],"content":"Class MenuItem","linkify":"Class MenuItem","nodes":[{"content":"Class MenuItem","pos":[0,14]}]},{"content":"The MenuItem class lets you create, read, update, and delete X++ code and metadata.","pos":[105476,105559]},{"pos":[105565,105572],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A menu item represents the user interface of a menu function.","pos":[105574,105635]},{"content":"Menu items are linked to a MenuFunction object, which runs when the user selects the menu item.","pos":[105636,105731]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[105732,105842]},{"pos":[105848,105856],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[105862,105869],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[105873,105879]},{"content":"Description","pos":[105934,105945]},{"content":"public str allowRootNavigation(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[106287,106332],"source":"public str allowRootNavigation(\\[str value\\])"},{"content":"public boolean isDisplayedInContentArea(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[106494,106552],"source":"public boolean isDisplayedInContentArea(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str name<ph id=\"ph2\">\\]</ph>)","pos":[106701,106731],"source":"public str label(\\[str name\\])"},{"content":"public str menuFunctionName(<ph id=\"ph1\">\\[</ph>str name<ph id=\"ph2\">\\]</ph>)","pos":[106908,106949],"source":"public str menuFunctionName(\\[str name\\])"},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[107115,107153],"source":"public str menuItemName(\\[str value\\])"},{"content":"public MenuItemType menuItemType(<ph id=\"ph1\">\\[</ph>MenuItemType value<ph id=\"ph2\">\\]</ph>)","pos":[107322,107378],"source":"public MenuItemType menuItemType(\\[MenuItemType value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[107529,107559],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[107590,107732]},{"content":"public str parameter(<ph id=\"ph1\">\\[</ph>str parameter<ph id=\"ph2\">\\]</ph>)","pos":[107737,107776],"source":"public str parameter(\\[str parameter\\])"},{"content":"public str parameters(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[107944,107980],"source":"public str parameters(\\[str value\\])"},{"content":"Gets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.","pos":[108005,108107]},{"content":"public str shortCut(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[108151,108185],"source":"public str shortCut(\\[str value\\])"},{"content":"public boolean showParentModule(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[108358,108408],"source":"public boolean showParentModule(\\[boolean value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[108565,108606],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public str webTarget(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[108772,108807],"source":"public str webTarget(\\[str value\\])"},{"pos":[108982,109008],"content":"Method allowRootNavigation","linkify":"Method allowRootNavigation","nodes":[{"content":"Method allowRootNavigation","pos":[0,26]}]},{"pos":[109064,109074],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[109076,109081]},{"pos":[109090,109102],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[109108,109139],"content":"Method isDisplayedInContentArea","linkify":"Method isDisplayedInContentArea","nodes":[{"content":"Method isDisplayedInContentArea","pos":[0,31]}]},{"pos":[109208,109218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[109220,109225]},{"pos":[109234,109246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[109252,109264],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"pos":[109305,109315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[109317,109321]},{"pos":[109330,109342],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[109348,109371],"content":"Method menuFunctionName","linkify":"Method menuFunctionName","nodes":[{"content":"Method menuFunctionName","pos":[0,23]}]},{"pos":[109423,109433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[109435,109439]},{"pos":[109448,109460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[109466,109485],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[109534,109544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[109546,109551]},{"pos":[109560,109572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[109578,109597],"content":"Method menuItemType","linkify":"Method menuItemType","nodes":[{"content":"Method menuItemType","pos":[0,19]}]},{"pos":[109664,109674],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[109676,109681]},{"pos":[109690,109702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[109708,109719],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[109721,109863]},{"pos":[109904,109914],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[109916,109921]},{"pos":[109930,109942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[109944,110012]},{"pos":[110019,110026],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[110028,110122]},{"content":"Begins with a letter.","pos":[110128,110149]},{"content":"Doesn't exceed 250 characters.","pos":[110154,110184]},{"content":"Can include numbers and underscore characters.","pos":[110189,110235]},{"content":"Cannot include punctuation or spaces.","pos":[110240,110277]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[110282,110400]},{"pos":[110406,110422],"content":"Method parameter","linkify":"Method parameter","nodes":[{"content":"Method parameter","pos":[0,16]}]},{"pos":[110472,110482],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"parameter","pos":[110484,110493]},{"pos":[110502,110514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[110520,110537],"content":"Method parameters","linkify":"Method parameters","nodes":[{"content":"Method parameters","pos":[0,17]}]},{"content":"Gets or sets the list of parameters that are passed to objects taht are run by the MenuFunction class.","pos":[110539,110641]},{"pos":[110688,110698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[110700,110705]},{"pos":[110714,110726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The list of parameters that are passed to the object.","pos":[110728,110781]},{"pos":[110788,110795],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The parameters string format is Parameter1=Value1, Parameter2=Value2, and so on.cts ignore passed, unrecognized parameters.","pos":[110797,110920]},{"pos":[110926,110941],"content":"Method shortCut","linkify":"Method shortCut","nodes":[{"content":"Method shortCut","pos":[0,15]}]},{"pos":[110986,110996],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[110998,111003]},{"pos":[111012,111024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[111030,111053],"content":"Method showParentModule","linkify":"Method showParentModule","nodes":[{"content":"Method showParentModule","pos":[0,23]}]},{"pos":[111114,111124],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[111126,111131]},{"pos":[111140,111152],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[111158,111172],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[111224,111234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[111236,111241]},{"pos":[111250,111262],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[111268,111284],"content":"Method webTarget","linkify":"Method webTarget","nodes":[{"content":"Method webTarget","pos":[0,16]}]},{"pos":[111330,111340],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[111342,111347]},{"pos":[111356,111368],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[111373,111392],"content":"Class MenuReference","linkify":"Class MenuReference","nodes":[{"content":"Class MenuReference","pos":[0,19]}]},{"content":"The MenuReference class enables you to create, read, update, and delete X++ code and metadata.","pos":[111435,111529]},{"pos":[111535,111542],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[111548,111556],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[111562,111569],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[111573,111579]},{"content":"Description","pos":[111597,111608]},{"content":"public str menuName()","pos":[111653,111674]},{"pos":[111696,111711],"content":"Method menuName","linkify":"Method menuName","nodes":[{"content":"Method menuName","pos":[0,15]}]},{"pos":[111745,111757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[111762,111778],"content":"Class MessageWin","linkify":"Class MessageWin","nodes":[{"content":"Class MessageWin","pos":[0,16]}]},{"content":"The MessageWin class gives access to the messageWindow class of the Finance and Operations development environment.","pos":[111816,111931]},{"pos":[111937,111944],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Although you can instantiate more MessageWin objects, they will all refer to the same message window on the screen.","pos":[111946,112061]},{"pos":[112067,112075],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[112081,112088],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[112092,112098]},{"content":"Description","pos":[112124,112135]},{"content":"public void clear()","pos":[112272,112291]},{"content":"Clears the message window.","pos":[112304,112330]},{"content":"public void activate()","pos":[112362,112384]},{"content":"Makes the message window the currently active window.","pos":[112394,112447]},{"content":"public void addLine(str line)","pos":[112452,112481]},{"content":"Writes a line to the message window.","pos":[112484,112520]},{"pos":[112545,112557],"content":"Method clear","linkify":"Method clear","nodes":[{"content":"Method clear","pos":[0,12]}]},{"content":"Clears the message window.","pos":[112559,112585]},{"pos":[112616,112631],"content":"Method activate","linkify":"Method activate","nodes":[{"content":"Method activate","pos":[0,15]}]},{"content":"Makes the message window the currently active window.","pos":[112633,112686]},{"pos":[112721,112728],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Before version 2.11, the message window would get focus when lines were added or contents were cleared.","pos":[112730,112833]},{"content":"Starting in version 2.11, the developer must call this method to make the message window the top window.","pos":[112834,112938]},{"pos":[112944,112958],"content":"Method addLine","linkify":"Method addLine","nodes":[{"content":"Method addLine","pos":[0,14]}]},{"content":"Writes a line to the message window.","pos":[112960,112996]},{"pos":[113038,113048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"line","pos":[113050,113054]},{"content":"A string that contains the line to write to the message window.","pos":[113057,113120]},{"pos":[113125,113141],"content":"Class MethodInfo","linkify":"Class MethodInfo","nodes":[{"content":"Class MethodInfo","pos":[0,16]}]},{"content":"Provides information about a specified method.","pos":[113179,113225]},{"pos":[113231,113238],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Assign a table method to MethodInfo by using the SysDictTable class.","pos":[113240,113308]},{"content":"Assign a class method by using the SysDictClass class.","pos":[113309,113363]},{"content":"The following classes extend MethodInfo:","pos":[113364,113404]},{"content":"SysMethodInfo","pos":[113410,113423]},{"content":"DictMethod","pos":[113428,113438]},{"pos":[113444,113452],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses the SysDictClass::ObjectMethodObject method to assign a method of a FormBuildDataSource Class object to an instance of the MethodInfo class.","pos":[113454,113621]},{"content":"An integer value specifies the method.","pos":[113622,113660]},{"content":"The MethodInfo.name Method method returns the method name.","pos":[113661,113719]},{"pos":[114348,114355],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[114359,114365]},{"content":"Description","pos":[114421,114432]},{"content":"public AccessSpecifier accessSpecifier()","pos":[114775,114815]},{"content":"Specifies whether the method is public, protected, or private.","pos":[114837,114899]},{"content":"public boolean compiledOk()","pos":[114983,115010]},{"content":"Specifies whether the method has compiled.","pos":[115045,115087]},{"content":"public TableId displayTableId()","pos":[115191,115222]},{"content":"public DisplayFunctionType displayType()","pos":[115399,115439]},{"content":"Specifies the display function type of a method.","pos":[115461,115509]},{"content":"public Array getAllAttributes()","pos":[115607,115638]},{"content":"Gets the full set of attributes for the method.","pos":[115669,115716]},{"content":"public Object getAttribute(str attribute)","pos":[115815,115856]},{"content":"Gets the first matching attribute from the class header metadata, creates an instance of the Object class that represents it, and returns it.","pos":[115877,116018]},{"content":"public Array getAttributes(str attribute)","pos":[116023,116064]},{"content":"public boolean isAbstract()","pos":[116231,116258]},{"content":"Indicates whether the method is abstract.","pos":[116293,116334]},{"content":"public boolean isStatic()","pos":[116439,116464]},{"content":"Specifies whether the method is static.","pos":[116501,116540]},{"content":"public str name()","pos":[116647,116664]},{"content":"Specifies the name of a method.","pos":[116709,116740]},{"content":"public int noParms()","pos":[116855,116875]},{"content":"Specifies the number of parameters in a method.","pos":[116917,116964]},{"content":"public int noVars()","pos":[117063,117082]},{"content":"Specifies the number of variables in a method.","pos":[117125,117171]},{"content":"public int parentId()","pos":[117271,117292]},{"content":"Specifies the table ID for a table method or the class ID for a class method.","pos":[117333,117410]},{"content":"public str propertyHelp()","pos":[117479,117504]},{"content":"Specifies the Help text that a method sets or returns for a control.","pos":[117541,117609]},{"content":"public NoYes PropertyMethod()","pos":[117687,117716]},{"content":"Specifies whether a method is a property method.","pos":[117749,117797]},{"content":"public int returnId()","pos":[117895,117916]},{"content":"Specifies the ID for certain return data types, such as extended data types and classes, for a method that returns a value.","pos":[117957,118080]},{"content":"public Types returnType()","pos":[118103,118128]},{"content":"Specifies a method return type.","pos":[118165,118196]},{"content":"public ClassRunMode runMode()","pos":[118311,118340]},{"content":"Specifies where a method is executed.","pos":[118373,118410]},{"content":"public int varId(int variableNumber)","pos":[118519,118555]},{"content":"Specifies the ID for certain variable data types, such as extended data types and enums, for a method that contains variables.","pos":[118581,118707]},{"content":"public int varIdOld(int variableNumber)","pos":[118727,118766]},{"content":"public Types varType(int variableNumber)","pos":[118935,118975]},{"content":"Specifies a variable data type by using values from the Types enumeration.","pos":[118997,119071]},{"content":"public void new(UtilElementType utilType, int Id, str Name)","pos":[119143,119202]},{"content":"Creates a new instance of the MethodInfo class.","pos":[119205,119252]},{"content":"public void setMethod(MemberFunction method)","pos":[119351,119395]},{"content":"Specifies the application object type of a node in the Application Object Tree (AOT) by using an instance of the .","pos":[119413,119527]},{"pos":[119562,119584],"content":"Method accessSpecifier","linkify":"Method accessSpecifier","nodes":[{"content":"Method accessSpecifier","pos":[0,22]}]},{"content":"Specifies whether the method is public, protected, or private.","pos":[119586,119648]},{"pos":[119701,119713],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An AccessSpecifier enum value that specifies whether the method is public, proctected, or private.","pos":[119715,119813]},{"pos":[119819,119836],"content":"Method compiledOk","linkify":"Method compiledOk","nodes":[{"content":"Method compiledOk","pos":[0,17]}]},{"content":"Specifies whether the method has compiled.","pos":[119838,119880]},{"pos":[119920,119932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the method has compiled; otherwise, false.","pos":[119934,119984]},{"pos":[119990,120011],"content":"Method displayTableId","linkify":"Method displayTableId","nodes":[{"content":"Method displayTableId","pos":[0,21]}]},{"pos":[120055,120067],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[120073,120091],"content":"Method displayType","linkify":"Method displayType","nodes":[{"content":"Method displayType","pos":[0,18]}]},{"content":"Specifies the display function type of a method.","pos":[120093,120141]},{"pos":[120194,120206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A DisplayFunctionType enumeration value that indicates the display function type of a method.","pos":[120208,120301]},{"pos":[120308,120315],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table lists the possible values returned by the displayType method.","pos":[120317,120398]},{"content":"Get","pos":[120522,120525]},{"content":"The method is a display method.","pos":[120534,120565]},{"content":"None","pos":[120582,120586]},{"content":"The method is not a display or edit method.","pos":[120594,120637]},{"content":"RecordGet","pos":[120642,120651]},{"content":"The method gets a record.","pos":[120654,120679]},{"content":"RecordSet","pos":[120702,120711]},{"content":"The method sets a record.","pos":[120714,120739]},{"content":"Set","pos":[120762,120765]},{"content":"The method is an edit method.","pos":[120774,120803]},{"pos":[120825,120848],"content":"Method getAllAttributes","linkify":"Method getAllAttributes","nodes":[{"content":"Method getAllAttributes","pos":[0,23]}]},{"content":"Gets the full set of attributes for the method.","pos":[120850,120897]},{"pos":[120941,120953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Array of SysAttribute objects for the method.","pos":[120955,121004]},{"pos":[121010,121029],"content":"Method getAttribute","linkify":"Method getAttribute","nodes":[{"content":"Method getAttribute","pos":[0,19]}]},{"content":"Gets the first matching attribute from the class header metadata, creates an instance of the Object class that represents it, and returns it.","pos":[121031,121172]},{"pos":[121226,121236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"attribute","pos":[121238,121247]},{"content":"The attribute for which to search.","pos":[121250,121284]},{"pos":[121291,121303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The attribute as an instance of the Object class.","pos":[121305,121354]},{"pos":[121360,121380],"content":"Method getAttributes","linkify":"Method getAttributes","nodes":[{"content":"Method getAttributes","pos":[0,20]}]},{"pos":[121434,121444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"attribute","pos":[121446,121455]},{"pos":[121464,121476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[121482,121499],"content":"Method isAbstract","linkify":"Method isAbstract","nodes":[{"content":"Method isAbstract","pos":[0,17]}]},{"content":"Indicates whether the method is abstract.","pos":[121501,121542]},{"pos":[121582,121594],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the method is abstract; otherwise, false.","pos":[121596,121645]},{"pos":[121652,121659],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"An abstract method is declared but not implemented in a parent class.","pos":[121661,121730]},{"content":"For more information, see Method Modifiers.","pos":[121731,121774]},{"pos":[121780,121795],"content":"Method isStatic","linkify":"Method isStatic","nodes":[{"content":"Method isStatic","pos":[0,15]}]},{"content":"Specifies whether the method is static.","pos":[121797,121836]},{"pos":[121874,121886],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the method is static; otherwise, false.","pos":[121888,121935]},{"pos":[121942,121949],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For more information, see Static Methods.","pos":[121951,121992]},{"pos":[121998,122009],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Specifies the name of a method.","pos":[122011,122042]},{"pos":[122072,122084],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that indicates the method name.","pos":[122086,122126]},{"pos":[122132,122146],"content":"Method noParms","linkify":"Method noParms","nodes":[{"content":"Method noParms","pos":[0,14]}]},{"content":"Specifies the number of parameters in a method.","pos":[122148,122195]},{"pos":[122228,122240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the number of parameters in a method.","pos":[122242,122311]},{"pos":[122317,122330],"content":"Method noVars","linkify":"Method noVars","nodes":[{"content":"Method noVars","pos":[0,13]}]},{"content":"Specifies the number of variables in a method.","pos":[122332,122378]},{"pos":[122410,122422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the number of variables in a method.","pos":[122424,122492]},{"pos":[122498,122513],"content":"Method parentId","linkify":"Method parentId","nodes":[{"content":"Method parentId","pos":[0,15]}]},{"content":"Specifies the table ID for a table method or the class ID for a class method.","pos":[122515,122592]},{"pos":[122626,122638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates a table ID or a class ID.","pos":[122640,122697]},{"pos":[122703,122722],"content":"Method propertyHelp","linkify":"Method propertyHelp","nodes":[{"content":"Method propertyHelp","pos":[0,19]}]},{"content":"Specifies the Help text that a method sets or returns for a control.","pos":[122724,122792]},{"pos":[122830,122842],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains the Help text.","pos":[122844,122881]},{"pos":[122887,122908],"content":"Method PropertyMethod","linkify":"Method PropertyMethod","nodes":[{"content":"Method PropertyMethod","pos":[0,21]}]},{"content":"Specifies whether a method is a property method.","pos":[122910,122958]},{"pos":[123000,123012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the method is a property method; otherwise, 0.","pos":[123014,123065]},{"pos":[123072,123079],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A property method sets or returns a property.","pos":[123081,123126]},{"pos":[123132,123147],"content":"Method returnId","linkify":"Method returnId","nodes":[{"content":"Method returnId","pos":[0,15]}]},{"content":"Specifies the ID for certain return data types, such as extended data types and classes, for a method that returns a value.","pos":[123149,123272]},{"pos":[123306,123318],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the ID for the return data type.","pos":[123320,123384]},{"pos":[123391,123398],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The return value is 0 if the data type does not have an ID or if a method does not return a value.","pos":[123400,123498]},{"pos":[123504,123521],"content":"Method returnType","linkify":"Method returnType","nodes":[{"content":"Method returnType","pos":[0,17]}]},{"content":"Specifies a method return type.","pos":[123523,123554]},{"pos":[123592,123604],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Types enumeration value that indicates a method return type.","pos":[123606,123668]},{"pos":[123675,123682],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following list indicates the possible values.","pos":[123684,123733]},{"content":":","pos":[123734,123735]},{"content":"AnyType","pos":[123741,123748]},{"content":"BLOB","pos":[123753,123757]},{"content":"Class","pos":[123762,123767]},{"content":"Container","pos":[123772,123781]},{"content":"Date","pos":[123786,123790]},{"content":"DateTime","pos":[123795,123803]},{"content":"Enum","pos":[123808,123812]},{"content":"Grid","pos":[123817,123821]},{"content":"Int64","pos":[123826,123831]},{"content":"Integer","pos":[123836,123843]},{"content":"Real","pos":[123848,123852]},{"content":"Record","pos":[123857,123863]},{"content":"RString","pos":[123868,123875]},{"content":"String","pos":[123880,123886]},{"content":"UserType","pos":[123891,123899]},{"content":"VarString","pos":[123904,123913]},{"content":"void","pos":[123918,123922]},{"pos":[123928,123942],"content":"Method runMode","linkify":"Method runMode","nodes":[{"content":"Method runMode","pos":[0,14]}]},{"content":"Specifies where a method is executed.","pos":[123944,123981]},{"pos":[124023,124035],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A ClassRunMode enumeration value that indicates where a method is executed.","pos":[124037,124112]},{"pos":[124119,124126],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following list indicates the possible values.","pos":[124128,124177]},{"content":"Called","pos":[124183,124189]},{"content":"Client","pos":[124194,124200]},{"content":"ClientorServer","pos":[124205,124219]},{"content":"Server","pos":[124224,124230]},{"pos":[124236,124248],"content":"Method varId","linkify":"Method varId","nodes":[{"content":"Method varId","pos":[0,12]}]},{"content":"Specifies the ID for certain variable data types, such as extended data types and enums, for a method that contains variables.","pos":[124250,124376]},{"pos":[124425,124435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"variableNumber","pos":[124437,124451]},{"content":"An integer value that specifies a method variable based on the order of the variables listed in the method.","pos":[124454,124561]},{"pos":[124568,124580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the variable data type ID.","pos":[124582,124640]},{"pos":[124647,124654],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The return value is 0 if the data type does not have an ID or if a method does not have variables.","pos":[124656,124754]},{"pos":[124760,124775],"content":"Method varIdOld","linkify":"Method varIdOld","nodes":[{"content":"Method varIdOld","pos":[0,15]}]},{"pos":[124827,124837],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"variableNumber","pos":[124839,124853]},{"pos":[124862,124874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[124880,124894],"content":"Method varType","linkify":"Method varType","nodes":[{"content":"Method varType","pos":[0,14]}]},{"content":"Specifies a variable data type by using values from the Types enumeration.","pos":[124896,124970]},{"pos":[125023,125033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"variableNumber","pos":[125035,125049]},{"content":"An integer that specifies a method variable based on the order of the variables listed in the method.","pos":[125052,125153]},{"pos":[125160,125172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Types enumeration value that indicates the variable data type.","pos":[125174,125238]},{"pos":[125245,125252],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Following are the possible values:","pos":[125254,125288]},{"content":"AnyType","pos":[125294,125301]},{"content":"BLOB","pos":[125306,125310]},{"content":"Class","pos":[125315,125320]},{"content":"Container","pos":[125325,125334]},{"content":"Date","pos":[125339,125343]},{"content":"DateTime","pos":[125348,125356]},{"content":"Enum","pos":[125361,125365]},{"content":"Grid","pos":[125370,125374]},{"content":"Int64","pos":[125379,125384]},{"content":"Integer","pos":[125389,125396]},{"content":"Real","pos":[125401,125405]},{"content":"Record","pos":[125410,125416]},{"content":"RString","pos":[125421,125428]},{"content":"String","pos":[125433,125439]},{"content":"UserType","pos":[125444,125452]},{"content":"VarString","pos":[125457,125466]},{"content":"void","pos":[125471,125475]},{"pos":[125481,125491],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a new instance of the MethodInfo class.","pos":[125493,125540]},{"pos":[125612,125622],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"utilType","pos":[125624,125632]},{"content":"A string that specifies the name of the element.","pos":[125635,125683]},{"content":"Id","pos":[125695,125697]},{"content":"A string that specifies the name of the element.","pos":[125700,125748]},{"content":"Name","pos":[125760,125764]},{"content":"A string that specifies the name of the element.","pos":[125767,125815]},{"pos":[125821,125837],"content":"Method setMethod","linkify":"Method setMethod","nodes":[{"content":"Method setMethod","pos":[0,16]}]},{"content":"Specifies the application object type of a node in the Application Object Tree (AOT).","pos":[125839,125924]},{"pos":[125981,125991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"method","pos":[125993,125999]},{"content":"An instance of the MemberFunction class that represents a node in the AOT.","pos":[126002,126076]},{"pos":[126081,126107],"content":"Class ModifyFieldEventArgs","linkify":"Class ModifyFieldEventArgs","nodes":[{"content":"Class ModifyFieldEventArgs","pos":[0,26]}]},{"pos":[126166,126173],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[126179,126187],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[126193,126200],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[126204,126210]},{"content":"Description","pos":[126235,126246]},{"content":"public int parmFieldId()","pos":[126298,126322]},{"content":"public void new(int fieldId)","pos":[126345,126373]},{"pos":[126395,126413],"content":"Method parmFieldId","linkify":"Method parmFieldId","nodes":[{"content":"Method parmFieldId","pos":[0,18]}]},{"pos":[126450,126462],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[126468,126478],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[126519,126529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[126531,126538]},{"pos":[126545,126576],"content":"Class ModifyFieldValueEventArgs","linkify":"Class ModifyFieldValueEventArgs","nodes":[{"content":"Class ModifyFieldValueEventArgs","pos":[0,31]}]},{"pos":[126640,126647],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[126653,126661],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[126667,126674],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[126678,126684]},{"content":"Description","pos":[126727,126738]},{"content":"public str parmFieldName()","pos":[126808,126834]},{"content":"public int parmArrayIndex()","pos":[126873,126900]},{"content":"public void new(str fieldName, int arrayIndex)","pos":[126938,126984]},{"pos":[127006,127026],"content":"Method parmFieldName","linkify":"Method parmFieldName","nodes":[{"content":"Method parmFieldName","pos":[0,20]}]},{"pos":[127065,127077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[127083,127104],"content":"Method parmArrayIndex","linkify":"Method parmArrayIndex","nodes":[{"content":"Method parmArrayIndex","pos":[0,21]}]},{"pos":[127144,127156],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[127162,127172],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[127231,127241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldName","pos":[127243,127252]},{"content":"arrayIndex","pos":[127266,127276]},{"pos":[127283,127310],"content":"Class MultiSelectionContext","linkify":"Class MultiSelectionContext","nodes":[{"content":"Class MultiSelectionContext","pos":[0,27]}]},{"pos":[127363,127370],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[127376,127384],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[127390,127397],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[127401,127407]},{"content":"Description","pos":[127428,127439]},{"content":"public Common getFirst()","pos":[127589,127613]},{"content":"public Common getNext()","pos":[127683,127706]},{"content":"private void new()","pos":[127777,127795]},{"content":"Initializes a new instance of the MultiSelectionContext class.","pos":[127804,127866]},{"pos":[127874,127889],"content":"Method getFirst","linkify":"Method getFirst","nodes":[{"content":"Method getFirst","pos":[0,15]}]},{"pos":[127926,127938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[127944,127958],"content":"Method getNext","linkify":"Method getNext","nodes":[{"content":"Method getNext","pos":[0,14]}]},{"pos":[127994,128006],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[128012,128022],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the MultiSelectionContext class.","pos":[128024,128086]}]}