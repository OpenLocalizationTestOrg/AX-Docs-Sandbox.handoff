{"content":"---\n# required metadata\n\ntitle: X++ reflection run-time functions\ndescription: This topic describes the reflection run-time functions.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: 61\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 31381\nms.assetid: d0d4043e-5abb-42ae-bcc2-c6b678f4ef5b\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# X++ reflection run-time functions\n\n[!include[banner](../includes/banner.md)]\n\n\nThis topic describes the reflection run-time functions.\n\nclassIdGet\n----------\n\nRetrieves the numeric identifier (the class ID) of the class that the object that is initialized belongs to.\n\n    int classIdGet(class object)\n\n### Parameters\n\n| Parameter | Description                         |\n|-----------|-------------------------------------|\n| object    | The object to get the class ID for. |\n\n### Return value\n\nThe class ID of the specified object.\n\n### Example\n\n    static void classIdGetExample(Args _args)\n    {\n            int i;\n            WorkTimeCheck w;\n\n            i = classIdGet(w);\n            print \"Class ID for object is \" + int2Str(i);\n    }\n\n## dimOf\nRetrieves the number of index elements that space has been allocated for in an X++ array.\n\n    int dimOf(anytype object)\n\n### Parameters\n\n| Parameter | Description                                   |\n|-----------|-----------------------------------------------|\n| object    | The array to determine the dimension size of. |\n\n### Return value\n\nIf the value of the *object* parameter is an array, the number of elements in the array; otherwise, **0** (zero).\n\n### Remarks\n\nThe **dimOf** function is intended for X++ arrays that are declared as the following X++ primitive types:\n\n-   boolean\n-   date\n-   int\n-   int64\n-   real\n-   utcDateTime\n\nAn example is **int iAmounts\\[6\\];**. Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as **int**). The **dimOf** function doesn't accept arrays of all X++ primitive types. Here are the array types that the **dimOf** function doesn't accept:\n\n-   **str**\n-   **container**\n-   **anytype**\n-   Arrays of class objects\n-   Instances of the **Array** class\n\n### Example\n\n    static void JobDimOfArrays(Args _args)\n    {\n            int iAmounts[20], iCounts[];\n            ABCModel enumAbcModel[22]; // Enum\n            ABCModelType exdtAbcModelType[24]; // Extended data type\n            anytype anyThings[26];\n            str sNames[28];\n            Array myArrayObj; // Class\n\n            info(\"Start of job.\");\n            info(\"--(Next, normal int array, dimOf() accepts it.)\");\n            info(int2Str(dimOf(iAmounts)));\n            info(\"--(Next, normal enum array, dimOf() accepts it.)\");\n            info(int2Str(dimOf(enumAbcModel)));\n            info(\"--(Next, normal extended data type array (based on enum), dimOf() accepts it.)\");\n            info(int2Str(dimOf(exdtAbcModelType)));\n            info(\"--(Next, dynamic int array, dimension not yet set.)\");\n            info(int2Str(dimOf(iCounts)));\n            info(\"--(Next, dynamic int array, after dimension established.)\");\n            \n            iCounts[13] = 13;\n            info(int2Str(dimOf(iCounts)));\n            info(\" == == == == == (Next, array types that dimOf() does not support.)\");\n            info(\"--(Next, normal anytype array, dimOf() always returns 0.)\");\n            info(int2Str(dimOf(anyThings)));\n            info(\"--(Next, an instance of class X++ Array, dimOf() always returns 0.)\");\n\n            myArrayObj = new Array(Types::Integer);\n            myArrayObj.value(1,501);\n            info(int2Str(dimOf(myArrayObj)));\n            info(\"--(Next, the lastIndex method provides size information about Array instances.)\");\n            info(int2Str(myArrayObj.lastIndex()));\n            info(\"--(Next, normal str array, dimOf() does not accept it, job is halted.)\");\n            info(int2Str(dimOf(sNames)));\n            info(\"End of job.\");\n\n    }\n    /************  Actual Infolog output\n    Message (11:10:06 am)\n    Start of job.\n    --(Next, normal int array, dimOf() accepts it.)\n    20\n    --(Next, normal enum array, dimOf() accepts it.)\n    22\n    --(Next, normal extended data type array (based on enum), dimOf() accepts it.)\n    24\n    --(Next, dynamic int array, dimension not yet set.)\n    0\n    --(Next, dynamic int array, after dimension established.)\n    16\n    == == == == == (Next, array types that dimOf() does not support.)\n    --(Next, normal anytype array, dimOf() always returns 0.)\n    0\n    --(Next, an instance of class X++ Array, dimOf() always returns 0.)\n    0\n    --(Next, the lastIndex method provides size information about Array instances.)\n    1\n    --(Next, normal str array, dimOf() does not accept it, job is halted.)\n    Error executing code: Illegal operation on this type of array. (C)JobsJobDimOfArrays - line 41\n    ************/\n    /***********  Pop-up error dialog box\n    \"Internal error number 25 in script.\"\n    This error is caused by the code line...\n    info(int2Str(dimOf(iCounts)));\n    ...before iCounts was assigned at any index.\n    ***********/\n\n## fieldId2Name\nRetrieves a string that represents the name of the field that is specified by a table ID number and a field ID number.\n\n    str fieldId2Name(int tableid, int fieldid)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldid   | The ID number of the field.                                                                           |\n\n### Return value\n\nThe name of the field.\n\n### Remarks\n\nTo return a printable version of the field name, use the **fieldId2PName** function.\n\n### Example\n\nThe following example sets **fn** to the name of the field in the Customer (CustGroup) table that has a field ID of 7.\n\n    static void fieldId2NameExample(Args _arg)\n    {\n            str fn;\n            fn = fieldId2Name(tableName2Id(\"Customer\"),7);\n    }\n\n## fieldId2PName\nRetrieves the printable name of the field that is specified by a table ID number and a field ID number.\n\n    str fieldId2PName(int tableid, int fieldid)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldid   | The ID number of the field. **Note:** Use the **fieldName2Id** function to specify the ID of a field. |\n\n### Return value\n\nThe name of the field.\n\n### Example\n\n    static void fieldId2PNameExample(Args _arg)\n    {\n            str name;\n            tableid _tableId;\n            fieldid _fieldid;\n\n            _tableId = tableName2Id(\"Address\");\n            _fieldId = fieldName2Id(_tableId, \"Name\");\n            name = fieldId2PName(_tableId, _fieldid);\n            print name;\n    }\n\n## fieldName2Id\nRetrieves the field ID of the table field that is specified by a table ID number and a field ID number.\n\n    int fieldName2Id(int tableid, str fieldname)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldname | The name of the field.                                                                                |\n\n### Return value\n\nThe ID of the field that is specified by the *tableid* and *fieldname* parameters.\n\n### Example\n\n    static void fieldName2IdExample(Args _arg)\n    {\n            int id;\n\n            id = fieldName2Id(tableName2Id(\"Address\"), \"Name\");\n            // Returns 6. Name is the 6th field in the Address table.\n            print id;\n    }\n\n## indexId2Name\nRetrieves the name of an index.\n\n    str indexId2Name(int tableid, int indexid)\n\n### Parameters\n\n| Parameter | Description                                    |\n|-----------|------------------------------------------------|\n| tableid   | The ID of the table that the index belongs to. |\n| indexid   | The ID of the index.                           |\n\n### Return value\n\nThe name of the index.\n\n### Example\n\n    static void indexId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n            indexid idx;\n\n            id  = tableName2Id(\"Address\");\n            idx = indexName2Id(id, \"AddrIdx\");\n            s = indexId2Name(id, idx);\n            print \"The result of calling indexId2Name is \" + s;\n    }\n\n## indexName2Id\nRetrieves the ID of an index.\n\n    int indexName2Id(int tableid, str indexname)\n\n### Parameters\n\n| Parameter | Description                                    |\n|-----------|------------------------------------------------|\n| tableid   | The ID of the table that the index belongs to. |\n| indexname | The name of the index.                         |\n\n### Return value\n\nThe ID of the index.\n\n### Example\n\n    static void indexName2IdExample(Args _arg)\n    {\n            indexid idx;\n            tableid id;\n\n            id  = tableName2Id(\"Address\");\n            idx = indexName2Id(id, \"AddrIdx\");\n            print \"Index ID for index name AddrIdx of table Address is \" + int2Str(idx);\n    }\n\n## refPrintAll (no content)\nSummary\n\n    void refPrintAll(class object, str filename, str title)\n\n### Parameters\n\n| Parameter | Description |\n|-----------|-------------|\n| object    | Description |\n| filename  | Description |\n| title     | Description |\n\n## tableId2Name\nRetrieves a string that contains the name of a table.\n\n    str tableId2Name(int _tableid)\n\n### Parameters\n\n| Parameter | Description          |\n|-----------|----------------------|\n| \\_tableid | The ID of the table. |\n\n### Return value\n\nThe name of the table.\n\n### Example\n\n    static void tableId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for table name Address.\n            id = tableName2Id(\"Address\");\n            print \"ID for table name Address is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## tableId2PName\nRetrieves a string that contains the printable name (the label) of a table.\n\n    str tableId2PName(int _fieldid)\n\n### Parameters\n\n| Parameter | Description          |\n|-----------|----------------------|\n| \\_fieldid | The ID of the table. |\n\n### Return value\n\nThe label of the table.\n\n### Example\n\n    static void tableId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for table name Address.\n            id = tableName2Id(\"Address\");\n            print \"ID for table name Address is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## tableName2Id\nRetrieves the ID of a table.\n\n    int tableName2Id(str _name)\n\n### Parameters\n\n| Parameter | Description            |\n|-----------|------------------------|\n| \\_name    | The name of the table. |\n\n### Return value\n\nThe ID of the table.\n\n### Example\n\n    static void tableName2IdExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for the Address table name.\n            id = tableName2Id(\"Address\");\n            print \"ID for the Address table name is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## typeOf\nRetrieves the type of an element.\n\n    enum typeOf(anytype _object)\n\n### Parameters\n\n| Parameter | Description                         |\n|-----------|-------------------------------------|\n| \\_object  | The element to return the type for. |\n\n### Return value\n\nA **Types** system enumeration value.\n\n### Example\n\nThe following example tests whether the first element in a container, **c**, is another container that contains a single integer.\n\n    if(typeof(conpeek(c, 1)) != Types::Container ||\n    conlen(conpeek(c, 1)) != 1 ||\n    typeof(conpeek(conpeek(c, 1), 1)) != Types::Integer)\n    {\n            // More code.\n    }\n\n\n\n","nodes":[{"pos":[4,640],"content":"# required metadata\n\ntitle: X++ reflection run-time functions\ndescription: This topic describes the reflection run-time functions.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: 61\nms.search.scope: AX 7.0.0, Operations, UnifiedOperations\n# ms.tgt_pltfrm: \nms.custom: 31381\nms.assetid: d0d4043e-5abb-42ae-bcc2-c6b678f4ef5b\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n","nodes":[{"content":"X++ reflection run-time functions","nodes":[{"pos":[0,33],"content":"X++ reflection run-time functions","nodes":[{"content":"X++ reflection run-time functions","pos":[0,33]}]}],"path":["title"]},{"content":"This topic describes the reflection run-time functions.","nodes":[{"pos":[0,55],"content":"This topic describes the reflection run-time functions.","nodes":[{"content":"This topic describes the reflection run-time functions.","pos":[0,55]}]}],"path":["description"]}],"header":"# required metadata\n","yml":true},{"pos":[648,681],"content":"X++ reflection run-time functions","linkify":"X++ reflection run-time functions","nodes":[{"content":"X++ reflection run-time functions","pos":[0,33]}]},{"content":"This topic describes the reflection run-time functions.","pos":[727,782]},{"pos":[784,794],"content":"classIdGet","linkify":"classIdGet","nodes":[{"content":"classIdGet","pos":[0,10]}]},{"content":"Retrieves the numeric identifier (the class ID) of the class that the object that is initialized belongs to.","pos":[807,915]},{"pos":[955,965],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[969,978]},{"content":"Description","pos":[981,992]},{"content":"object","pos":[1073,1079]},{"content":"The object to get the class ID for.","pos":[1085,1120]},{"pos":[1128,1140],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The class ID of the specified object.","pos":[1142,1179]},{"pos":[1185,1192],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1394,1399],"content":"dimOf","linkify":"dimOf","nodes":[{"content":"dimOf","pos":[0,5]}]},{"content":"Retrieves the number of index elements that space has been allocated for in an X++ array.","pos":[1400,1489]},{"pos":[1526,1536],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1540,1549]},{"content":"Description","pos":[1552,1563]},{"content":"object","pos":[1664,1670]},{"content":"The array to determine the dimension size of.","pos":[1676,1721]},{"pos":[1729,1741],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[1743,1856],"content":"If the value of the <bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> parameter is an array, the number of elements in the array; otherwise, <bpt id=\"p2\">**</bpt>0<ept id=\"p2\">**</ept> (zero).","source":"If the value of the *object* parameter is an array, the number of elements in the array; otherwise, **0** (zero)."},{"pos":[1862,1869],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1871,1976],"content":"The <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function is intended for X++ arrays that are declared as the following X++ primitive types:","source":"The **dimOf** function is intended for X++ arrays that are declared as the following X++ primitive types:"},{"content":"boolean","pos":[1982,1989]},{"content":"date","pos":[1994,1998]},{"content":"int","pos":[2003,2006]},{"content":"int64","pos":[2011,2016]},{"content":"real","pos":[2021,2025]},{"content":"utcDateTime","pos":[2030,2041]},{"content":"An example is <bpt id=\"p1\">**</bpt>int iAmounts<ph id=\"ph1\">\\[</ph>6<ph id=\"ph2\">\\]</ph>;<ept id=\"p1\">**</ept>.","pos":[2043,2080],"source":"An example is **int iAmounts\\[6\\];**."},{"content":"Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as <bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept>).","pos":[2081,2245],"source":" Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as **int**)."},{"content":"The <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function doesn't accept arrays of all X++ primitive types.","pos":[2246,2318],"source":" The **dimOf** function doesn't accept arrays of all X++ primitive types."},{"content":"Here are the array types that the <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function doesn't accept:","pos":[2319,2387],"source":" Here are the array types that the **dimOf** function doesn't accept:"},{"pos":[2393,2400],"content":"<bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept>","source":"**str**"},{"pos":[2405,2418],"content":"<bpt id=\"p1\">**</bpt>container<ept id=\"p1\">**</ept>","source":"**container**"},{"pos":[2423,2434],"content":"<bpt id=\"p1\">**</bpt>anytype<ept id=\"p1\">**</ept>","source":"**anytype**"},{"content":"Arrays of class objects","pos":[2439,2462]},{"pos":[2467,2499],"content":"Instances of the <bpt id=\"p1\">**</bpt>Array<ept id=\"p1\">**</ept> class","source":"Instances of the **Array** class"},{"pos":[2505,2512],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5442,5454],"content":"fieldId2Name","linkify":"fieldId2Name","nodes":[{"content":"fieldId2Name","pos":[0,12]}]},{"content":"Retrieves a string that represents the name of the field that is specified by a table ID number and a field ID number.","pos":[5455,5573]},{"pos":[5627,5637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[5641,5650]},{"content":"Description","pos":[5653,5664]},{"content":"tableid","pos":[5877,5884]},{"content":"The ID number of the table.","pos":[5889,5916]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[5917,5990],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldid","pos":[5995,6002]},{"content":"The ID number of the field.","pos":[6007,6034]},{"pos":[6116,6128],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the field.","pos":[6130,6152]},{"pos":[6158,6165],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6167,6251],"content":"To return a printable version of the field name, use the <bpt id=\"p1\">**</bpt>fieldId2PName<ept id=\"p1\">**</ept> function.","source":"To return a printable version of the field name, use the **fieldId2PName** function."},{"pos":[6257,6264],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6266,6384],"content":"The following example sets <bpt id=\"p1\">**</bpt>fn<ept id=\"p1\">**</ept> to the name of the field in the Customer (CustGroup) table that has a field ID of 7.","source":"The following example sets **fn** to the name of the field in the Customer (CustGroup) table that has a field ID of 7."},{"pos":[6528,6541],"content":"fieldId2PName","linkify":"fieldId2PName","nodes":[{"content":"fieldId2PName","pos":[0,13]}]},{"content":"Retrieves the printable name of the field that is specified by a table ID number and a field ID number.","pos":[6542,6645]},{"pos":[6700,6710],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[6714,6723]},{"content":"Description","pos":[6726,6737]},{"content":"tableid","pos":[6950,6957]},{"content":"The ID number of the table.","pos":[6962,6989]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[6990,7063],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldid","pos":[7068,7075]},{"content":"The ID number of the field.","pos":[7080,7107]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>fieldName2Id<ept id=\"p2\">**</ept> function to specify the ID of a field.","pos":[7108,7181],"source":"**Note:** Use the **fieldName2Id** function to specify the ID of a field."},{"pos":[7189,7201],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the field.","pos":[7203,7225]},{"pos":[7231,7238],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7568,7580],"content":"fieldName2Id","linkify":"fieldName2Id","nodes":[{"content":"fieldName2Id","pos":[0,12]}]},{"content":"Retrieves the field ID of the table field that is specified by a table ID number and a field ID number.","pos":[7581,7684]},{"pos":[7740,7750],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[7754,7763]},{"content":"Description","pos":[7766,7777]},{"content":"tableid","pos":[7990,7997]},{"content":"The ID number of the table.","pos":[8002,8029]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[8030,8103],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldname","pos":[8108,8117]},{"content":"The name of the field.","pos":[8120,8142]},{"pos":[8229,8241],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[8243,8325],"content":"The ID of the field that is specified by the <bpt id=\"p1\">*</bpt>tableid<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>fieldname<ept id=\"p2\">*</ept> parameters.","source":"The ID of the field that is specified by the *tableid* and *fieldname* parameters."},{"pos":[8331,8338],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8580,8592],"content":"indexId2Name","linkify":"indexId2Name","nodes":[{"content":"indexId2Name","pos":[0,12]}]},{"content":"Retrieves the name of an index.","pos":[8593,8624]},{"pos":[8678,8688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[8692,8701]},{"content":"Description","pos":[8704,8715]},{"content":"tableid","pos":[8818,8825]},{"content":"The ID of the table that the index belongs to.","pos":[8830,8876]},{"content":"indexid","pos":[8881,8888]},{"content":"The ID of the index.","pos":[8893,8913]},{"pos":[8947,8959],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the index.","pos":[8961,8983]},{"pos":[8989,8996],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9323,9335],"content":"indexName2Id","linkify":"indexName2Id","nodes":[{"content":"indexName2Id","pos":[0,12]}]},{"content":"Retrieves the ID of an index.","pos":[9336,9365]},{"pos":[9421,9431],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[9435,9444]},{"content":"Description","pos":[9447,9458]},{"content":"tableid","pos":[9561,9568]},{"content":"The ID of the table that the index belongs to.","pos":[9573,9619]},{"content":"indexname","pos":[9624,9633]},{"content":"The name of the index.","pos":[9636,9658]},{"pos":[9690,9702],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The ID of the index.","pos":[9704,9724]},{"pos":[9730,9737],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10031,10055],"content":"refPrintAll (no content)","linkify":"refPrintAll (no content)","nodes":[{"content":"refPrintAll (no content)","pos":[0,24]}]},{"content":"Summary","pos":[10056,10063]},{"pos":[10130,10140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[10144,10153]},{"content":"Description","pos":[10156,10167]},{"content":"object","pos":[10200,10206]},{"content":"Description","pos":[10212,10223]},{"content":"filename","pos":[10228,10236]},{"content":"Description","pos":[10240,10251]},{"content":"title","pos":[10256,10261]},{"content":"Description","pos":[10268,10279]},{"pos":[10286,10298],"content":"tableId2Name","linkify":"tableId2Name","nodes":[{"content":"tableId2Name","pos":[0,12]}]},{"content":"Retrieves a string that contains the name of a table.","pos":[10299,10352]},{"pos":[10394,10404],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[10408,10417]},{"content":"Description","pos":[10420,10431]},{"content":"<ph id=\"ph1\">\\_</ph>tableid","pos":[10482,10491],"source":"\\_tableid"},{"content":"The ID of the table.","pos":[10494,10514]},{"pos":[10522,10534],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the table.","pos":[10536,10558]},{"pos":[10564,10571],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11156,11169],"content":"tableId2PName","linkify":"tableId2PName","nodes":[{"content":"tableId2PName","pos":[0,13]}]},{"content":"Retrieves a string that contains the printable name (the label) of a table.","pos":[11170,11245]},{"pos":[11288,11298],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[11302,11311]},{"content":"Description","pos":[11314,11325]},{"content":"<ph id=\"ph1\">\\_</ph>fieldid","pos":[11376,11385],"source":"\\_fieldid"},{"content":"The ID of the table.","pos":[11388,11408]},{"pos":[11416,11428],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The label of the table.","pos":[11430,11453]},{"pos":[11459,11466],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12051,12063],"content":"tableName2Id","linkify":"tableName2Id","nodes":[{"content":"tableName2Id","pos":[0,12]}]},{"content":"Retrieves the ID of a table.","pos":[12064,12092]},{"pos":[12131,12141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[12145,12154]},{"content":"Description","pos":[12157,12168]},{"content":"<ph id=\"ph1\">\\_</ph>name","pos":[12223,12229],"source":"\\_name"},{"content":"The name of the table.","pos":[12235,12257]},{"pos":[12265,12277],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The ID of the table.","pos":[12279,12299]},{"pos":[12305,12312],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12905,12911],"content":"typeOf","linkify":"typeOf","nodes":[{"content":"typeOf","pos":[0,6]}]},{"content":"Retrieves the type of an element.","pos":[12912,12945]},{"pos":[12985,12995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[12999,13008]},{"content":"Description","pos":[13011,13022]},{"content":"<ph id=\"ph1\">\\_</ph>object","pos":[13103,13111],"source":"\\_object"},{"content":"The element to return the type for.","pos":[13115,13150]},{"pos":[13158,13170],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[13172,13209],"content":"A <bpt id=\"p1\">**</bpt>Types<ept id=\"p1\">**</ept> system enumeration value.","source":"A **Types** system enumeration value."},{"pos":[13215,13222],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13224,13353],"content":"The following example tests whether the first element in a container, <bpt id=\"p1\">**</bpt>c<ept id=\"p1\">**</ept>, is another container that contains a single integer.","source":"The following example tests whether the first element in a container, **c**, is another container that contains a single integer."}]}