{"nodes":[{"pos":[6,23],"content":"required metadata","linkify":"required metadata","nodes":[{"content":"required metadata","pos":[0,17]}]},{"content":"title: Code migration: Context menus | Microsoft Docs description: A new programming model is required for context menus (shortcut menus).","pos":[25,163],"source":"title: Code migration: Context menus | Microsoft Docs\ndescription: A new programming model is required for context menus (shortcut menus)."},{"content":"This article outlines the process for migrating context menu code from Microsoft Dynamics AX 2012 to Microsoft Dynamics 365 for Operations.","pos":[164,303]},{"content":"It also includes UX guidelines for context menus.","pos":[304,353]},{"content":"author: annbe manager: AnnBe ms.date: 2015-12-04 00:22:34 ms.topic: article ms.prod: ms.service: Dynamics365Operations ms.technology:","pos":[354,488],"source":"\nauthor: annbe\nmanager: AnnBe\nms.date: 2015-12-04 00:22:34\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology:"},{"pos":[493,510],"content":"optional metadata","linkify":"optional metadata","nodes":[{"content":"optional metadata","pos":[0,17]}]},{"pos":[514,523],"content":"keywords:","linkify":"keywords:","nodes":[{"content":"keywords:","pos":[0,9]}]},{"pos":[527,534],"content":"ROBOTS:","linkify":"ROBOTS:","nodes":[{"content":"ROBOTS:","pos":[0,7]}]},{"content":"audience: Developer","pos":[536,555]},{"pos":[558,569],"content":"ms.devlang:","linkify":"ms.devlang:","nodes":[{"content":"ms.devlang:","pos":[0,11]}]},{"pos":[571,624],"content":"ms.reviewer: 61 ms.suite: Released- Dynamics AX 7.0.0","source":"ms.reviewer: 61\nms.suite: Released- Dynamics AX 7.0.0"},{"pos":[627,641],"content":"ms.tgt_pltfrm:","linkify":"ms.tgt_pltfrm:","nodes":[{"content":"ms.tgt_pltfrm:","pos":[0,14]}]},{"pos":[643,708],"content":"ms.custom: 16301 ms.assetid: 72ac5cb0-b640-44eb-aaf4-ec8f6f277133","source":"ms.custom: 16301\nms.assetid: 72ac5cb0-b640-44eb-aaf4-ec8f6f277133"},{"pos":[711,721],"content":"ms.region:","linkify":"ms.region:","nodes":[{"content":"ms.region:","pos":[0,10]}]},{"pos":[725,737],"content":"ms.industry:","linkify":"ms.industry:","nodes":[{"content":"ms.industry:","pos":[0,12]}]},{"content":"ms.author: jasongre","pos":[739,758]},{"pos":[767,796],"content":"Code migration: Context menus","linkify":"Code migration: Context menus","nodes":[{"content":"Code migration: Context menus","pos":[0,29]}]},{"content":"In Microsoft Dynamics AX 2012 and earlier versions, developers modified right-click context menus (shortcut menus) by using the <bpt id=\"p1\">**</bpt>PopupMenu<ept id=\"p1\">**</ept> class.","pos":[798,946],"source":"In Microsoft Dynamics AX 2012 and earlier versions, developers modified right-click context menus (shortcut menus) by using the **PopupMenu** class."},{"content":"This class relied on Microsoft Windows application programming interfaces (APIs) that aren't available on the web.","pos":[947,1061]},{"content":"In Dynamics 365 for Operations, the <bpt id=\"p1\">**</bpt>ContextMenu<ept id=\"p1\">**</ept> APIs have been created as replacements to provide similar functionality.","pos":[1062,1186],"source":" In Dynamics 365 for Operations, the **ContextMenu** APIs have been created as replacements to provide similar functionality."},{"content":"Previously, the <bpt id=\"p1\">**</bpt>context()<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>showContextMenu()<ept id=\"p2\">**</ept> method overrides were the entry points for modifying context menus for specific controls.","pos":[1187,1332],"source":" Previously, the **context()** and **showContextMenu()** method overrides were the entry points for modifying context menus for specific controls."},{"content":"These overrides typically contained code to add options to the context menu, and also to process the user’s selection.","pos":[1333,1451]},{"content":"The code for processing the user's selection used a wait model.","pos":[1452,1515]},{"content":"In Dynamics 365 for Operations, these overrides are being removed, and the wait model is being eliminated.","pos":[1516,1622]},{"content":"Instead, developers must create two overrides: <bpt id=\"p1\">**</bpt>getContextMenuOptions()<ept id=\"p1\">**</ept> to add options to the context menu and <bpt id=\"p2\">**</bpt>selectedMenuOption()<ept id=\"p2\">**</ept> to process the user’s selection.","pos":[1623,1794],"source":" Instead, developers must create two overrides: **getContextMenuOptions()** to add options to the context menu and **selectedMenuOption()** to process the user’s selection."},{"pos":[1799,1855],"content":"Migrate context menu code in Dynamics 365 for Operations","linkify":"Migrate context menu code in Dynamics 365 for Operations","nodes":[{"content":"Migrate context menu code in Dynamics 365 for Operations","pos":[0,56]}]},{"pos":[1856,1963],"content":"Migration from the <bpt id=\"p1\">**</bpt>PopupMenu<ept id=\"p1\">**</ept> APIs to the <bpt id=\"p2\">**</bpt>ContextMenu<ept id=\"p2\">**</ept> APIs can be broken down into three main steps.","source":"Migration from the **PopupMenu** APIs to the **ContextMenu** APIs can be broken down into three main steps."},{"pos":[1969,2031],"content":"Step 1. Add a constant for each menu option that must be added","linkify":"Step 1. Add a constant for each menu option that must be added","nodes":[{"content":"Step 1. Add a constant for each menu option that must be added","pos":[0,62],"nodes":[{"content":"Step 1.","pos":[0,7]},{"content":"Add a constant for each menu option that must be added","pos":[8,62]}]}]},{"content":"The old <bpt id=\"p1\">**</bpt>insertItem()<ept id=\"p1\">**</ept> method in the <bpt id=\"p2\">**</bpt>PopupMenu<ept id=\"p2\">**</ept> class returned an identifier for the menu option that was being added.","pos":[2033,2156],"source":"The old **insertItem()** method in the **PopupMenu** class returned an identifier for the menu option that was being added."},{"content":"This identifier was saved into a variable for future reference.","pos":[2157,2220]},{"content":"Because developers will define the menu identifier for themselves in Dynamics 365 for Operations, it's a good idea to define constants for each option to help with code readability.","pos":[2221,2402]},{"content":"At the form level, add a constant for each menu option that is being added to the context menu.","pos":[2408,2503]},{"content":"The value must be unique within each context menu.","pos":[2504,2554]},{"content":"Note that you must modify the old variable name if it conflicts with another variable on the form or control.","pos":[2555,2664]},{"pos":[2671,2677],"content":"Before","linkify":"Before","nodes":[{"content":"Before","pos":[0,6]}]},{"pos":[2803,2808],"content":"After","linkify":"After","nodes":[{"content":"After","pos":[0,5]}]},{"pos":[2946,2976],"content":"Step 2. Build the context menu","linkify":"Step 2. Build the context menu","nodes":[{"content":"Step 2. Build the context menu","pos":[0,30],"nodes":[{"content":"Step 2.","pos":[0,7]},{"content":"Build the context menu","pos":[8,30]}]}]},{"content":"Construct the list of submenus and menu options, and add it to the control’s context menu.","pos":[2978,3068]},{"pos":[3074,3141],"content":"Add the <bpt id=\"p1\">**</bpt>getContextMenuOptions()<ept id=\"p1\">**</ept> method override on the control.","source":"Add the **getContextMenuOptions()** method override on the control."},{"content":"Create a new context menu and a list to hold the options that you will add to the menu:","pos":[3146,3233]},{"content":"ContextMenu menu = new ContextMenu();","pos":[3242,3279]},{"content":"List menuOptions = new List(Types::Class);","pos":[3288,3330]},{"content":"Add menu options to the list:","pos":[3336,3365]},{"content":"ContextMenuOption option = ContextMenuOption::Create(label,identifier);","pos":[3374,3445]},{"content":"menuOptions.addEnd(option);","pos":[3454,3481]},{"content":"Add the list of options to the menu.","pos":[3487,3523]},{"content":"menu.ContextMenuOptions(menuOptions);","pos":[3532,3569]},{"pos":[3575,3607],"content":"Modify the <bpt id=\"p1\">**</bpt>return<ept id=\"p1\">**</ept> statement.","source":"Modify the **return** statement."},{"content":"return menu.Serialize();","pos":[3616,3640]},{"pos":[3646,3702],"content":"Step 3. Process the user selection from the context menu","linkify":"Step 3. Process the user selection from the context menu","nodes":[{"content":"Step 3. Process the user selection from the context menu","pos":[0,56],"nodes":[{"content":"Step 3.","pos":[0,7]},{"content":"Process the user selection from the context menu","pos":[8,56]}]}]},{"pos":[3708,3772],"content":"Add the <bpt id=\"p1\">**</bpt>selectedMenuOption()<ept id=\"p1\">**</ept> method override on the control.","source":"Add the **selectedMenuOption()** method override on the control."},{"pos":[3777,3851],"content":"Move the <bpt id=\"p1\">**</bpt>switch()<ept id=\"p1\">**</ept> statement for processing options into this override.","source":"Move the **switch()** statement for processing options into this override."},{"pos":[3856,3868],"content":"Code example","linkify":"Code example","nodes":[{"content":"Code example","pos":[0,12]}]},{"content":"This section illustrates the migration of a context menu from Dynamics AX 2012 to Dynamics 365 for Operations.","pos":[3869,3979]},{"content":"The <bpt id=\"p1\">**</bpt>MainAccount<ept id=\"p1\">**</ept> form is used as an example.","pos":[3980,4027],"source":" The **MainAccount** form is used as an example."},{"pos":[4033,4046],"content":"Original code","linkify":"Original code","nodes":[{"content":"Original code","pos":[0,13]}]},{"pos":[4544,4557],"content":"Migrated code","linkify":"Migrated code","nodes":[{"content":"Migrated code","pos":[0,13]}]},{"pos":[5539,5570],"content":"UX guidelines for context menus","linkify":"UX guidelines for context menus","nodes":[{"content":"UX guidelines for context menus","pos":[0,31]}]},{"content":"As you migrate context menus, consider the following guidelines:","pos":[5571,5635]},{"content":"The most important commands should be at the top of the menu.","pos":[5641,5702]},{"content":"Remove commands that don't apply to the current state of the element that is the target of the right-click.","pos":[5707,5814]},{"content":"Right-click is a shortcut.","pos":[5819,5845]},{"content":"Therefore, the commands on the context menu should <bpt id=\"p1\">**</bpt>always<ept id=\"p1\">**</ept> be available in other places on the page.","pos":[5846,5949],"source":" Therefore, the commands on the context menu should **always** be available in other places on the page."},{"content":"Don't create submenus of context menus.","pos":[5954,5993]},{"content":"Submenus are hard to use and aren't touch-friendly.","pos":[5994,6045]},{"content":"Limit the number of menu items to five.","pos":[6050,6089]}],"content":"---\n# required metadata\n\ntitle: Code migration: Context menus | Microsoft Docs\ndescription: A new programming model is required for context menus (shortcut menus). This article outlines the process for migrating context menu code from Microsoft Dynamics AX 2012 to Microsoft Dynamics 365 for Operations. It also includes UX guidelines for context menus.\nauthor: annbe\nmanager: AnnBe\nms.date: 2015-12-04 00:22:34\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: 61\nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 16301\nms.assetid: 72ac5cb0-b640-44eb-aaf4-ec8f6f277133\n# ms.region: \n# ms.industry: \nms.author: jasongre\n\n---\n\n# Code migration: Context menus\n\nIn Microsoft Dynamics AX 2012 and earlier versions, developers modified right-click context menus (shortcut menus) by using the **PopupMenu** class. This class relied on Microsoft Windows application programming interfaces (APIs) that aren't available on the web. In Dynamics 365 for Operations, the **ContextMenu** APIs have been created as replacements to provide similar functionality. Previously, the **context()** and **showContextMenu()** method overrides were the entry points for modifying context menus for specific controls. These overrides typically contained code to add options to the context menu, and also to process the user’s selection. The code for processing the user's selection used a wait model. In Dynamics 365 for Operations, these overrides are being removed, and the wait model is being eliminated. Instead, developers must create two overrides: **getContextMenuOptions()** to add options to the context menu and **selectedMenuOption()** to process the user’s selection.\n\n## Migrate context menu code in Dynamics 365 for Operations\nMigration from the **PopupMenu** APIs to the **ContextMenu** APIs can be broken down into three main steps.\n\n### Step 1. Add a constant for each menu option that must be added\n\nThe old **insertItem()** method in the **PopupMenu** class returned an identifier for the menu option that was being added. This identifier was saved into a variable for future reference. Because developers will define the menu identifier for themselves in Dynamics 365 for Operations, it's a good idea to define constants for each option to help with code readability.\n\n-   At the form level, add a constant for each menu option that is being added to the context menu. The value must be unique within each context menu. Note that you must modify the old variable name if it conflicts with another variable on the form or control.\n\n#### Before\n\n    public void context()\n    {\n        ...\n        int listCreateRoot = listMenu.insertItem(\"@SYS5480\");\n        ...\n\n#### After\n\n    [Form]\n    public class MainAccount extends FormRun\n    {\n        ...\n        public const int listCreateRoot = 1;\n        ...\n\n### Step 2. Build the context menu\n\nConstruct the list of submenus and menu options, and add it to the control’s context menu.\n\n1.  Add the **getContextMenuOptions()** method override on the control.\n2.  Create a new context menu and a list to hold the options that you will add to the menu:\n    -   ContextMenu menu = new ContextMenu();\n    -   List menuOptions = new List(Types::Class);\n\n3.  Add menu options to the list:\n    -   ContextMenuOption option = ContextMenuOption::Create(label,identifier);\n    -   menuOptions.addEnd(option);\n\n4.  Add the list of options to the menu.\n    -   menu.ContextMenuOptions(menuOptions);\n\n5.  Modify the **return** statement.\n    -   return menu.Serialize();\n\n### Step 3. Process the user selection from the context menu\n\n1.  Add the **selectedMenuOption()** method override on the control.\n2.  Move the **switch()** statement for processing options into this override.\n\n## Code example\nThis section illustrates the migration of a context menu from Dynamics AX 2012 to Dynamics 365 for Operations. The **MainAccount** form is used as an example.\n\n### Original code\n\n    public void context()\n    {       \n        PopupMenu  listMenu        = new PopupMenu(element.hWnd());\n        int        listCreateRoot  = listMenu.insertItem(\"@SYS5480\");\n        int        selectedMenu;\n        selectedMenu = listMenu.draw();\n        switch (selectedMenu)\n        {\n            case -1:\n                break;\n            case listCreateRoot:\n                mainAccount_ds.create();\n                break;\n            default:\n                break;\n        }\n    }\n\n### Migrated code\n\n    // Define new form-level constant for each context menu option\n    public const int listCreateRoot = 1;\n    // Define new override on the control for building the context menu\n    public str getContextMenuOptions()\n    {\n        str ret;\n        ContextMenu menu = new ContextMenu(); \n        ContextMenuOption option = ContextMenuOption::Create(\"@SYS5480\", listCreateRoot);\n        List menuOptions = new List(Types::Class); \n        // Add label and ID of menu option\n        menuOptions.addEnd(option); \n        menu.ContextMenuOptions(menuOptions);\n        return menu.Serialize();\n    }\n    // Define new override on the control for processing the user selection\n    public void selectedMenuOption(int selectedOption)\n    {\n        switch (selectedOption)\n        {\n            case -1:\n                break;\n            case listCreateRoot:\n                mainAccount_ds.create();\n                break;\n            default:\n                break;\n        }\n    }\n\n## UX guidelines for context menus\nAs you migrate context menus, consider the following guidelines:\n\n-   The most important commands should be at the top of the menu.\n-   Remove commands that don't apply to the current state of the element that is the target of the right-click.\n-   Right-click is a shortcut. Therefore, the commands on the context menu should **always** be available in other places on the page.\n-   Don't create submenus of context menus. Submenus are hard to use and aren't touch-friendly.\n-   Limit the number of menu items to five.\n\n\n"}