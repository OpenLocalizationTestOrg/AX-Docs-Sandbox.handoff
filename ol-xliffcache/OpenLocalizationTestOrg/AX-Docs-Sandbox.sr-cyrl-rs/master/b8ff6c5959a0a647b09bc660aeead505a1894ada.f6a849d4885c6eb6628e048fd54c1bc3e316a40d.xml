{"nodes":[{"pos":[32,102],"content":"F Classes - FormListBoxControl to FormNotifyEventArgs | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"F Classes - FormListBoxControl to FormNotifyEventArgs | Microsoft Docs","pos":[0,70]}]},{"pos":[116,189],"content":"API reference for classes from FormListBoxControl to FormNotifyEventArgs.","needQuote":true,"needEscape":true,"nodes":[{"content":"API reference for classes from FormListBoxControl to FormNotifyEventArgs.","pos":[0,73]}]},{"pos":[614,667],"content":"F Classes - FormListBoxControl to FormNotifyEventArgs","linkify":"F Classes - FormListBoxControl to FormNotifyEventArgs","nodes":[{"content":"F Classes - FormListBoxControl to FormNotifyEventArgs","pos":[0,53]}]},{"content":"API reference for classes from FormListBoxControl to FormNotifyEventArgs.","pos":[669,742]},{"pos":[744,768],"content":"Class FormListBoxControl","linkify":"Class FormListBoxControl","nodes":[{"content":"Class FormListBoxControl","pos":[0,24]}]},{"pos":[849,856],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[862,870],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[876,883],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[887,893]},{"content":"Description","pos":[997,1008]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[1451,1497],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[1561,1601]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[1733,1776],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[1843,1910]},{"content":"public boolean allowSysSetup()","pos":[2015,2045]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[2125,2208]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[2297,2333],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2579,2628],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[2689,2787]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[2861,2902],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[2971,3020]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3143,3178],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[3253,3315]},{"content":"public int beginDrag(int x, int y)","pos":[3425,3459]},{"content":"Is called when the user starts to drag a form control.","pos":[3535,3589]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3707,3737],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[3817,3884]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3989,4021],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[4099,4155]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4271,4312],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[4553,4607]},{"content":"Retrieves the size of the control.","pos":[4663,4697]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4835,4873],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[4945,4988]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[5117,5154],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[5227,5272]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[5399,5471],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[5509,5576]},{"content":"public List configurationKeyEx()","pos":[5681,5713]},{"content":"Retrieves a list that contains the names of configuration keys that are checked for the control.","pos":[5791,5887]},{"content":"public int count()","pos":[5963,5981]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[6245,6289],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[6355,6433]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[6527,6586],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[6809,6852],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[7091,7127],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[7373,7415],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[7483,7608]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[7655,7695],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[7765,7830]},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[7937,7995],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[8219,8271],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[8501,8545],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[8783,8822],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[8893,9060]},{"content":"public int doubleClick()","pos":[9065,9089]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[9347,9381],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[9457,9538]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[9629,9710]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[9739,9833]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[9911,9988]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[10021,10117]},{"content":"public str dragText()","pos":[10193,10214]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[10303,10373]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[10475,10516],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[10585,10636]},{"content":"public EnumId enumType(<ph id=\"ph1\">\\[</ph>EnumId value<ph id=\"ph2\">\\]</ph>)","pos":[10757,10797],"source":"public EnumId enumType(\\[EnumId value\\])"},{"content":"public EnumId enumTypeValue()","pos":[11039,11068]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[11321,11385],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int find(str string)","pos":[11603,11630]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[11885,11915],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[11995,12052]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[12167,12201],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[12277,12334]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[12449,12490],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[12559,12610]},{"content":"public str getText(int index)","pos":[12731,12760]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[13013,13055],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[13123,13211]},{"content":"public boolean hasUserSetting()","pos":[13295,13326]},{"content":"Indicates whether the control has custom user settings.","pos":[13405,13460]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[13577,13619],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[13687,13726]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[13859,13895],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[13969,14031]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[14141,14178],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[14251,14290]},{"content":"public str helpField()","pos":[14423,14445]},{"content":"Retrieves the Help text for the control.","pos":[14533,14573]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[14705,14739],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[14815,14919]},{"content":"public boolean hideFirstEntry(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[14987,15035],"source":"public boolean hideFirstEntry(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[15269,15310],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[15379,15442]},{"content":"public int hWnd()","pos":[15551,15568]},{"content":"Returns the Windows handle (hWnd) of the control.","pos":[15661,15710]},{"content":"public boolean isContainer()","pos":[15833,15861]},{"content":"public boolean isDisplayed()","pos":[16115,16143]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[16225,16291]},{"content":"public boolean isRestricted()","pos":[16397,16426]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[16507,16574]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[16679,16735]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[16789,16888]},{"content":"public boolean isValid()","pos":[16961,16985]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[17243,17283],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public int item(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[17525,17555],"source":"public int item(\\[int value\\])"},{"content":"public int items(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[17807,17838],"source":"public int items(\\[int value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[18089,18120],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[18199,18236]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[18371,18411],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[18653,18688],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[18935,18978],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[19217,19252],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[19499,19538],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[19781,19827],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[20063,20099],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[20345,20392],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[20627,20668],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[20909,20951],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[21191,21236],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[21473,21557]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[21755,21835]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[22037,22115]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[22319,22358],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[22601,22649],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[22883,22929],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[23165,23205],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[23447,23488],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[23729,23751]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[24011,24051],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[24121,24185]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[24293,24327],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[24403,24464]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[24575,24610],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[24685,24749]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[24857,24904],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[24967,25020]},{"content":"public boolean modified()","pos":[25139,25164]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[25421,25500]},{"content":"Is called when the control is double-clicked by the user.","pos":[25531,25588]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[25703,25778]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[25813,25878]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[25985,26060]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[26095,26160]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[26267,26340]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[26377,26449]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[26549,26579],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[26659,26794]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[26831,26873],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[27113,27152]},{"content":"public FormControl parentControl()","pos":[27395,27429]},{"content":"Retrieves the parent control for the control.","pos":[27505,27550]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[27677,27717],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[27959,27995],"source":"public int promptrect(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[28241,28298],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[28351,28410]},{"content":"public int selection(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[28523,28558],"source":"public int selection(\\[int value\\])"},{"content":"public int selectionChange()","pos":[28805,28833]},{"content":"public int selectText(str string)","pos":[29087,29120]},{"content":"public int showContextMenu(int menuHandle)","pos":[29369,29411]},{"content":"Shows the shortcut menu for the control.","pos":[29479,29519]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[29651,29694],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[29933,29971],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[30043,30170]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[30215,30259],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[30497,30527],"source":"public str text(\\[str value\\])"},{"content":"public str toolTip()","pos":[30779,30799]},{"content":"Retrieves a tooltip for the control.","pos":[30889,30925]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[31061,31100],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[31171,31233]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[31343,31376],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[31453,31512]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[31625,31659],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[31735,31797]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[31907,31937],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[32189,32232],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[32299,32366]},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[32471,32522]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[32753,32787],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[32863,32906]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[33035,33073],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[33145,33193]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[33317,33356],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[33427,33486]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[33599,33636],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[33709,33792]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[33881,33917],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[33991,34043]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[34163,34197],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[34273,34355]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[34445,34487],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[34555,34611]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[34727,34767],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[34837,34891]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[35009,35049],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[35119,35168]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[35291,35334],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[35401,35454]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[35573,35607],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[35683,35831]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[35855,35890],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[35965,36016]},{"content":"public boolean validate()","pos":[36137,36162]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[36419,36479],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[36529,36590]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[36701,36755],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[36811,36870]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[36983,37029],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[37093,37154]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[37265,37303],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[37547,37588],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[37657,37727]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[37829,37870],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[37939,37977]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[38111,38146],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[38221,38283]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[38393,38429],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[38503,38541]},{"content":"public void dragLeave()","pos":[38675,38698]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[38785,38881]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[38957,38994],"source":"public void filter(\\[str filterStr\\])"},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[39239,39313],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void lostFocus()","pos":[39521,39544]},{"content":"Indicates that the control has lost focus.","pos":[39631,39673]},{"content":"public void copy()","pos":[39803,39821]},{"content":"Copies the contents of the control to the clipboard.","pos":[39913,39965]},{"content":"public void cut()","pos":[40085,40102]},{"content":"Cuts the contents of the control.","pos":[40195,40228]},{"content":"public void insert(str string, int index)","pos":[40367,40408]},{"content":"public void delete(str string)","pos":[40649,40679]},{"content":"public void context()","pos":[40931,40952]},{"content":"Shows the shortcut menu for the control.","pos":[41041,41081]},{"content":"public void enter()","pos":[41213,41232]},{"content":"public void endDrag()","pos":[41495,41516]},{"content":"Is called when the user has finished dragging a form control.","pos":[41605,41666]},{"content":"public void resetUserSetting()","pos":[41777,41807]},{"content":"Resets the user settings for the control.","pos":[41887,41928]},{"content":"public void prefColumnSize(int width, int height)","pos":[42059,42108]},{"content":"Specifies the preferred column width and height for the form control.","pos":[42169,42238]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[42341,42418]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[42451,42521]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[42623,42696]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[42733,42831]},{"content":"public void setFocus()","pos":[42905,42927]},{"content":"Sets the focus on the control.","pos":[43015,43045]},{"content":"public void paste()","pos":[43187,43206]},{"content":"Pastes the contents of the clipboard into the control.","pos":[43297,43351]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[43469,43576],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void add(str string)","pos":[43751,43778]},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[44033,44109],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[44315,44390],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[44597,44666]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[44707,44807]},{"content":"public void undo()","pos":[44879,44897]},{"content":"public void endUpdate()","pos":[45161,45184]},{"content":"public void clear()","pos":[45443,45462]},{"content":"public void beginUpdate()","pos":[45725,45750]},{"content":"public void jumpRef()","pos":[46007,46028]},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[46289,46362],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[46571,46647],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void inputSearch(str searchStr)","pos":[46853,46891]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[46963,47034]},{"content":"private void OnSelectionChanging(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[47135,47219],"source":"private void OnSelectionChanging(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void lookup()","pos":[47417,47437]},{"content":"public void mouseLeave()","pos":[47699,47723]},{"content":"Indicates that the mouse pointer has left the control.","pos":[47809,47863]},{"content":"public void gotFocus()","pos":[47981,48003]},{"content":"Indicates that the control has received focus.","pos":[48091,48137]},{"content":"public void displayControl()","pos":[48263,48291]},{"content":"Displays the control.","pos":[48373,48394]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[48545,48617],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[48827,48902],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnSelectionChanged(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[49109,49192],"source":"private void OnSelectionChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[49391,49468],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"pos":[49676,49695],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[49697,49737]},{"pos":[49794,49804],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[49806,49811]},{"content":"The new value for the property; optional.","pos":[49814,49855]},{"pos":[49862,49874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[49876,49932]},{"pos":[49939,49946],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[49948,50027]},{"pos":[50033,50049],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[50051,50118]},{"pos":[50172,50182],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[50184,50189]},{"content":"The value to assign to the allowEdit property.","pos":[50192,50238]},{"pos":[50245,50257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[50259,50311]},{"pos":[50318,50325],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[50327,50453]},{"pos":[50459,50479],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[50481,50564]},{"pos":[50607,50619],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[50621,50689]},{"pos":[50695,50712],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[50759,50769],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[50771,50776]},{"pos":[50785,50797],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[50803,50825],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[50827,50925]},{"pos":[50985,50995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[50997,51002]},{"content":"The value to assign to the property; optional.","pos":[51005,51051]},{"pos":[51058,51070],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[51072,51151]},{"pos":[51158,51165],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[51167,51204]},{"pos":[51210,51232],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[51234,51283]},{"pos":[51335,51345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[51347,51352]},{"pos":[51361,51373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[51375,51419]},{"pos":[51426,51433],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[51435,51503]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[51509,51579]},{"content":"The second byte contains a value for green.","pos":[51584,51627]},{"content":"The third byte contains a value for blue.","pos":[51632,51673]},{"content":"The high-order byte must be zero.","pos":[51678,51711]},{"content":"The maximum value for a single byte is 255.","pos":[51716,51759]},{"pos":[51765,51781],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[51783,51845]},{"pos":[51891,51901],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[51903,51908]},{"pos":[51917,51929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[51931,51992]},{"pos":[51998,52014],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[52016,52070]},{"pos":[52117,52127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[52129,52130]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[52133,52203]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[52204,52271]},{"content":"y","pos":[52283,52284]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[52287,52357]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[52358,52425]},{"pos":[52432,52444],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[52446,52485]},{"pos":[52492,52499],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[52501,52582]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[52583,52687]},{"pos":[52693,52704],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[52706,52773]},{"pos":[52814,52824],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[52826,52831]},{"pos":[52840,52852],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[52854,52904]},{"pos":[52911,52918],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[52920,52992]},{"content":"0 Use the default font weight.","pos":[52998,53028]},{"content":"1 Thin.","pos":[53033,53040]},{"content":"2 Extra-light.","pos":[53045,53059]},{"content":"3 Light.","pos":[53064,53072]},{"content":"4 Normal.","pos":[53077,53086]},{"content":"5 Medium.","pos":[53091,53100]},{"content":"6 Semibold.","pos":[53105,53116]},{"content":"7 Bold.","pos":[53121,53128]},{"content":"8 Extra-bold.","pos":[53133,53146]},{"content":"9 Heavy.","pos":[53151,53159]},{"pos":[53165,53178],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[53180,53236]},{"pos":[53279,53289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[53291,53296]},{"pos":[53305,53317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[53319,53363]},{"pos":[53370,53377],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[53379,53471]},{"content":"Value.","pos":[53475,53481]},{"content":"Description.","pos":[53484,53496]},{"content":"0","pos":[53527,53528]},{"content":"Auto.","pos":[53536,53541]},{"content":"1","pos":[53553,53554]},{"content":"3D.","pos":[53562,53565]},{"content":"2","pos":[53579,53580]},{"content":"Single line.","pos":[53588,53600]},{"content":"3","pos":[53605,53606]},{"content":"Flat.","pos":[53614,53619]},{"content":"4","pos":[53631,53632]},{"content":"None.","pos":[53640,53645]},{"pos":[53660,53682],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[53734,53744],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[53746,53751]},{"pos":[53760,53772],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[53778,53800],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[53802,53836]},{"pos":[53903,53913],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[53915,53920]},{"content":"The number of lines to use to determine the height.","pos":[53923,53974]},{"content":"lines","pos":[53986,53991]},{"content":"The number of lines to use to determine the height.","pos":[53994,54045]},{"pos":[54052,54064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[54066,54112]},{"pos":[54118,54137],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[54139,54182]},{"pos":[54231,54241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[54243,54248]},{"pos":[54257,54269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[54271,54333]},{"pos":[54340,54347],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[54349,54453]},{"content":"Value.","pos":[54457,54463]},{"content":"Description.","pos":[54466,54478]},{"content":"0","pos":[54525,54526]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54534,54547],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[54559,54560]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54568,54584],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[54593,54594]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54602,54617],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[54627,54629]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54636,54648],"source":"MAC\\_CHARSET"},{"content":"128","pos":[54661,54664]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54670,54687],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[54695,54698]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54704,54719],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[54729,54732]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54738,54753],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[54763,54766]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54772,54792],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[54797,54800]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54806,54820],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[54831,54834]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54840,54856],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[54865,54868]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54874,54893],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[54899,54902]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54908,54923],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[54933,54936]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54942,54958],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[54967,54970]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[54976,54995],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[55001,55004]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[55010,55022],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[55034,55122]},{"content":"Value.","pos":[55126,55132]},{"content":"Description.","pos":[55135,55147]},{"content":"130","pos":[55182,55185]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[55191,55205],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[55209,55295]},{"content":"Value.","pos":[55299,55305]},{"content":"Description.","pos":[55308,55320]},{"content":"177","pos":[55357,55360]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[55366,55381],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[55386,55389]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[55395,55410],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[55414,55491]},{"content":"Value.","pos":[55495,55501]},{"content":"Description.","pos":[55504,55516]},{"content":"222","pos":[55549,55552]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[55558,55571],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[55575,55654]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[55655,55746],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[55747,55861]},{"pos":[55867,55885],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[55887,55932]},{"pos":[55980,55990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[55992,55997]},{"pos":[56006,56018],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[56020,56063]},{"pos":[56070,56077],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[56079,56140]},{"content":"Value.","pos":[56144,56150]},{"content":"Style.","pos":[56153,56159]},{"content":"0","pos":[56216,56217]},{"content":"Default.","pos":[56225,56233]},{"content":"1","pos":[56252,56253]},{"content":"The Windows palette.","pos":[56261,56281]},{"content":"2","pos":[56288,56289]},{"content":"The true-color scheme.","pos":[56297,56319]},{"pos":[56327,56350],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[56352,56419]},{"pos":[56502,56512],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[56514,56519]},{"content":"The ID of the configuration key being assigned to the control; optional.","pos":[56522,56594]},{"pos":[56601,56613],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[56615,56687]},{"pos":[56694,56701],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[56703,56784]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[56785,56878]},{"pos":[56884,56909],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the names of configuration keys that are checked for the control.","pos":[56911,57007]},{"pos":[57052,57064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list of strings that contain the configuration key names.","pos":[57066,57125]},{"pos":[57132,57139],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The list that is retrieved does not contain duplicates.","pos":[57141,57196]},{"content":"It applies to all form controls.","pos":[57197,57229]},{"content":"If the control is data-bound, the list also contains the configuration key of the table and field.","pos":[57230,57328]},{"content":"The configuration keys on these elements are also added to the list if the control has non-empty values in the properties, extended data type, or Enumtype methods.","pos":[57329,57492]},{"content":"Because of implementation details for the FormBuildMenuButtonControl class, the list does not contain the configuration keys that found on the specified menu item.","pos":[57493,57656]},{"content":"However, the list does include these if the method is invoked on the FormMenuButtonControl class.","pos":[57657,57754]},{"pos":[57760,57772],"content":"Method count","linkify":"Method count","nodes":[{"content":"Method count","pos":[0,12]}]},{"pos":[57803,57815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57821,57846],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[57848,57926]},{"pos":[57981,57991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[57993,57998]},{"content":"The string that contains the country/region codes to set; optional.","pos":[58001,58068]},{"pos":[58075,58087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[58089,58154]},{"pos":[58160,58192],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[58262,58272],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[58274,58279]},{"pos":[58288,58300],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[58306,58322],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[58376,58386],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[58388,58393]},{"pos":[58402,58414],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[58420,58437],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[58484,58494],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[58496,58501]},{"pos":[58510,58522],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[58528,58551],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[58553,58678]},{"pos":[58731,58741],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[58743,58748]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[58751,58825]},{"pos":[58832,58844],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[58846,58958]},{"pos":[58965,58972],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[58974,59101]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[59102,59195]},{"pos":[59201,59218],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[59220,59285]},{"pos":[59336,59346],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[59348,59353]},{"pos":[59362,59374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[59376,59421]},{"pos":[59427,59447],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[59514,59524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[59526,59531]},{"content":"mode","pos":[59545,59549]},{"pos":[59558,59570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59576,59600],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[59663,59673],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[59675,59679]},{"pos":[59688,59700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59706,59731],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[59786,59796],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[59798,59803]},{"pos":[59812,59824],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59830,59850],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[59852,60019]},{"pos":[60069,60079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[60081,60086]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[60089,60163]},{"pos":[60170,60182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[60184,60312]},{"pos":[60318,60336],"content":"Method doubleClick","linkify":"Method doubleClick","nodes":[{"content":"Method doubleClick","pos":[0,18]}]},{"pos":[60373,60385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60391,60406],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[60408,60489]},{"pos":[60534,60544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[60546,60551]},{"content":"An integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[60554,60632]},{"pos":[60639,60651],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[60653,60713]},{"pos":[60720,60727],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave, the dragOver, and the dragOverEx to specify the behavior.","pos":[60729,60805]},{"pos":[60811,60826],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[60828,60922]},{"pos":[61016,61026],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[61028,61038]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[61041,61126]},{"content":"dragMode","pos":[61138,61146]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[61149,61234]},{"content":"x","pos":[61246,61247]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[61250,61335]},{"content":"y","pos":[61347,61348]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[61351,61436]},{"pos":[61443,61455],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[61457,61522]},{"pos":[61528,61545],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[61547,61643]},{"pos":[61733,61743],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[61745,61755]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[61758,61843]},{"content":"dragMode","pos":[61855,61863]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[61866,61951]},{"content":"x","pos":[61963,61964]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[61967,62052]},{"content":"y","pos":[62064,62065]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[62068,62153]},{"pos":[62160,62172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[62174,62239]},{"pos":[62245,62260],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[62262,62332]},{"pos":[62366,62378],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[62380,62511]},{"pos":[62517,62531],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[62533,62584]},{"pos":[62636,62646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[62648,62653]},{"content":"A Boolean value that indicates whether the control is enabled; optional.","pos":[62656,62728]},{"pos":[62735,62747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[62749,62797]},{"pos":[62804,62811],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[62813,62888]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[62889,62984]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[62985,63119]},{"pos":[63125,63140],"content":"Method enumType","linkify":"Method enumType","nodes":[{"content":"Method enumType","pos":[0,15]}]},{"pos":[63191,63201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63203,63208]},{"pos":[63217,63229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63235,63255],"content":"Method enumTypeValue","linkify":"Method enumTypeValue","nodes":[{"content":"Method enumTypeValue","pos":[0,20]}]},{"pos":[63297,63309],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63315,63338],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[63413,63423],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63425,63430]},{"pos":[63439,63451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63457,63468],"content":"Method find","linkify":"Method find","nodes":[{"content":"Method find","pos":[0,11]}]},{"pos":[63508,63518],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[63520,63526]},{"pos":[63535,63547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63553,63564],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[63566,63623]},{"pos":[63664,63674],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63676,63681]},{"pos":[63690,63702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[63704,63759]},{"pos":[63765,63780],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[63782,63839]},{"pos":[63884,63894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63896,63901]},{"pos":[63910,63922],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[63924,63957]},{"pos":[63963,63985],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[63987,64038]},{"pos":[64090,64100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[64102,64107]},{"pos":[64116,64128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[64130,64174]},{"pos":[64181,64188],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[64190,64258]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[64264,64334]},{"content":"The second byte contains a value for green.","pos":[64339,64382]},{"content":"The third byte contains a value for blue.","pos":[64387,64428]},{"content":"The high-order byte must be zero.","pos":[64433,64466]},{"content":"The maximum value for a single byte is 255.","pos":[64471,64514]},{"pos":[64520,64534],"content":"Method getText","linkify":"Method getText","nodes":[{"content":"Method getText","pos":[0,14]}]},{"pos":[64576,64586],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[64588,64593]},{"pos":[64602,64614],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[64620,64637],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[64639,64727]},{"pos":[64780,64790],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[64792,64795]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[64798,64868]},{"pos":[64875,64887],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[64889,64956]},{"pos":[64962,64983],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[64985,65040]},{"pos":[65084,65096],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[65098,65161]},{"pos":[65167,65180],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[65182,65221]},{"pos":[65274,65284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[65286,65291]},{"content":"An integer data type that specifies how the height is calculated; optional.","pos":[65294,65369]},{"content":"mode","pos":[65381,65385]},{"content":"An integer data type that specifies how the height is calculated; optional.","pos":[65388,65463]},{"pos":[65470,65482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[65484,65520]},{"pos":[65527,65534],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[65536,65589]},{"content":"Calculate the height according to the following table:","pos":[65590,65644]},{"content":"Mode.","pos":[65648,65653]},{"content":"Height calculation.","pos":[65667,65686]},{"content":"-1 Exact.","pos":[65874,65883]},{"content":"The exact height in pixels of the controls is used.","pos":[65893,65944]},{"content":"0 Auto.","pos":[65987,65994]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[66006,66095]},{"content":"1 Column height.","pos":[66100,66116]},{"content":"The layout of the form determines the height of the control.","pos":[66119,66179]},{"content":"The height and height calculation mode can be set separately.","pos":[66212,66273]},{"pos":[66279,66296],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[66298,66360]},{"pos":[66407,66417],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[66419,66424]},{"content":"An integer data type value that specifies how control height is calculated; optional.","pos":[66427,66512]},{"pos":[66519,66531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[66533,66554]},{"pos":[66561,66568],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[66570,66624]},{"content":"Mode.","pos":[66628,66633]},{"content":"Height Calculation.","pos":[66645,66664]},{"content":"Exact.","pos":[66850,66856]},{"content":"The exact height in pixels of the controls is used.","pos":[66867,66918]},{"content":"Auto.","pos":[66961,66966]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[66978,67067]},{"content":"Column height.","pos":[67072,67086]},{"content":"The layout of the form determines the height of the control.","pos":[67089,67149]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[67182,67267]},{"pos":[67273,67291],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[67293,67332]},{"pos":[67380,67390],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67392,67397]},{"content":"An integer data type that specifies the height in pixels; optional.","pos":[67400,67467]},{"pos":[67474,67486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[67488,67509]},{"pos":[67516,67523],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[67525,67615]},{"pos":[67621,67637],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[67639,67679]},{"pos":[67714,67726],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[67728,67816]},{"pos":[67823,67830],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[67832,67902]},{"content":"Use the helpText method to set the value of the Help text.","pos":[67903,67961]},{"pos":[67967,67982],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[67984,68088]},{"pos":[68133,68143],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68145,68150]},{"content":"The value that is assigned as the Help text for the control.","pos":[68153,68213]},{"pos":[68220,68232],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[68234,68289]},{"pos":[68296,68303],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[68305,68373]},{"content":"The Help text must not exceed 250 characters.","pos":[68374,68419]},{"pos":[68425,68446],"content":"Method hideFirstEntry","linkify":"Method hideFirstEntry","nodes":[{"content":"Method hideFirstEntry","pos":[0,21]}]},{"pos":[68505,68515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68517,68522]},{"pos":[68531,68543],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68549,68571],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[68573,68636]},{"pos":[68688,68698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68700,68705]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[68708,68775]},{"pos":[68782,68794],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[68796,68846]},{"pos":[68852,68863],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Returns the Windows handle (hWnd) of the control.","pos":[68865,68914]},{"pos":[68944,68956],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A 32-bit handle (hWnd).","pos":[68958,68981]},{"pos":[68988,68995],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This handle applies to all controls.","pos":[68997,69033]},{"content":"This is useful when you work with the Windows API.","pos":[69034,69084]},{"pos":[69090,69108],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[69149,69161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69167,69185],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[69187,69253]},{"pos":[69294,69306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[69308,69359]},{"pos":[69366,69373],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[69375,69443]},{"pos":[69449,69468],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[69470,69537]},{"pos":[69579,69591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[69593,69645]},{"pos":[69651,69676],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[69678,69777]},{"pos":[69846,69856],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[69858,69875]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[69878,70006]},{"pos":[70013,70025],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise false.","pos":[70027,70185]},{"content":"For this method to return true, the AllowUserSetup property of the design and all parent containers must permit the level of access that is specified by the neededSetupRights parameter.","pos":[70186,70371]},{"pos":[70378,70385],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[70387,70464]},{"content":"FormAllowUserSetup::No 0","pos":[70804,70828]},{"content":"No changes can be made to the control.","pos":[70839,70877]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[70878,70967]},{"content":"FormAllowUserSetup::Restricted 1","pos":[70972,71004]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[71007,71099]},{"content":"The user cannot move the control.","pos":[71100,71133]},{"content":"FormAllowUserSetup::Yes 2","pos":[71140,71165]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[71175,71267]},{"content":"The user can also move the control.","pos":[71268,71303]},{"pos":[71311,71325],"content":"Method isValid","linkify":"Method isValid","nodes":[{"content":"Method isValid","pos":[0,14]}]},{"pos":[71362,71374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71380,71393],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[71444,71454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71456,71461]},{"pos":[71470,71482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71488,71499],"content":"Method item","linkify":"Method item","nodes":[{"content":"Method item","pos":[0,11]}]},{"pos":[71540,71550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71552,71557]},{"pos":[71566,71578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71584,71596],"content":"Method items","linkify":"Method items","nodes":[{"content":"Method items","pos":[0,12]}]},{"pos":[71638,71648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71650,71655]},{"pos":[71664,71676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71682,71694],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[71696,71733]},{"pos":[71775,71785],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71787,71792]},{"pos":[71801,71813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[71815,71853]},{"pos":[71860,71867],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[71869,71947]},{"content":"The label property value cannot exceed 250 characters.","pos":[71948,72002]},{"pos":[72008,72029],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[72080,72090],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72092,72097]},{"pos":[72106,72118],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72124,72140],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[72186,72196],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72198,72203]},{"pos":[72212,72224],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72230,72254],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[72308,72318],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72320,72325]},{"pos":[72334,72346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72352,72368],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[72414,72424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72426,72431]},{"pos":[72440,72452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72458,72478],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[72528,72538],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72540,72545]},{"pos":[72554,72566],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72572,72599],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[72656,72666],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72668,72673]},{"pos":[72682,72694],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72700,72717],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[72764,72774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72776,72781]},{"pos":[72790,72802],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72808,72826],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[72884,72894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72896,72901]},{"content":"mode","pos":[72915,72919]},{"pos":[72928,72940],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[72946,72968],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[73020,73030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73032,73037]},{"pos":[73046,73058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73064,73087],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[73140,73150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73152,73157]},{"pos":[73166,73178],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73184,73202],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[73258,73268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73270,73275]},{"pos":[73284,73296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73302,73327],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"pos":[73424,73434],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[73436,73437]},{"content":"y","pos":[73451,73452]},{"content":"button","pos":[73466,73472]},{"content":"Ctrl","pos":[73486,73490]},{"content":"Shift","pos":[73504,73509]},{"pos":[73518,73530],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73536,73557],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"pos":[73650,73660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[73662,73663]},{"content":"y","pos":[73677,73678]},{"content":"button","pos":[73692,73698]},{"content":"Ctrl","pos":[73712,73716]},{"content":"Shift","pos":[73730,73735]},{"pos":[73744,73756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73762,73781],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"pos":[73872,73882],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[73884,73885]},{"content":"y","pos":[73899,73900]},{"content":"button","pos":[73914,73920]},{"content":"Ctrl","pos":[73934,73938]},{"content":"Shift","pos":[73952,73957]},{"pos":[73966,73978],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73984,74004],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[74054,74064],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74066,74071]},{"pos":[74080,74092],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74098,74119],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[74178,74188],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74190,74195]},{"pos":[74204,74216],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74222,74239],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[74296,74306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74308,74313]},{"content":"mode","pos":[74327,74331]},{"pos":[74340,74352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74358,74379],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[74430,74440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74442,74447]},{"pos":[74456,74468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74474,74496],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[74548,74558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74560,74565]},{"pos":[74574,74586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74592,74604],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[74639,74651],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74657,74668],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[74670,74734]},{"pos":[74785,74795],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74797,74802]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[74805,74891]},{"content":"mode","pos":[74903,74907]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[74910,74996]},{"pos":[75003,75015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[75017,75068]},{"pos":[75074,75089],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[75091,75152]},{"pos":[75197,75207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75209,75214]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[75217,75303]},{"pos":[75310,75322],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[75324,75380]},{"pos":[75386,75402],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[75404,75468]},{"pos":[75514,75524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75526,75531]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[75534,75615]},{"pos":[75622,75634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[75636,75687]},{"pos":[75693,75713],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[75715,75768]},{"pos":[75826,75836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75838,75843]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[75846,75940]},{"pos":[75947,75959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[75961,76034]},{"pos":[76040,76055],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[76093,76105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76111,76131],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[76133,76190]},{"pos":[76282,76292],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[76294,76295]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[76298,76359]},{"content":"y","pos":[76371,76372]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[76375,76436]},{"content":"button","pos":[76448,76454]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[76457,76518]},{"content":"Ctrl","pos":[76530,76534]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[76537,76598]},{"content":"Shift","pos":[76610,76615]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[76618,76679]},{"pos":[76686,76698],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[76700,76739]},{"pos":[76746,76753],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[76755,76859]},{"pos":[76865,76881],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[76883,76948]},{"pos":[77036,77046],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[77048,77049]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[77052,77113]},{"content":"y","pos":[77125,77126]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[77129,77190]},{"content":"button","pos":[77202,77208]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[77211,77272]},{"content":"Ctrl","pos":[77284,77288]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[77291,77352]},{"content":"Shift","pos":[77364,77369]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[77372,77433]},{"pos":[77440,77452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[77454,77493]},{"pos":[77500,77507],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[77509,77613]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[77614,77749]},{"pos":[77755,77771],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[77773,77838]},{"pos":[77926,77936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[77938,77939]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[77942,78003]},{"content":"y","pos":[78015,78016]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[78019,78080]},{"content":"button","pos":[78092,78098]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[78101,78162]},{"content":"Ctrl","pos":[78174,78178]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[78181,78242]},{"content":"Shift","pos":[78254,78259]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[78262,78323]},{"pos":[78330,78342],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[78344,78383]},{"pos":[78390,78397],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[78399,78503]},{"pos":[78509,78523],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[78525,78597]},{"pos":[78683,78693],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[78695,78696]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[78699,78760]},{"content":"y","pos":[78772,78773]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[78776,78837]},{"content":"button","pos":[78849,78855]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[78858,78919]},{"content":"Ctrl","pos":[78931,78935]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[78938,78999]},{"content":"Shift","pos":[79011,79016]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[79019,79080]},{"pos":[79087,79099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[79101,79140]},{"pos":[79147,79154],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[79156,79260]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[79261,79396]},{"pos":[79402,79413],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[79415,79550]},{"pos":[79591,79601],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79603,79608]},{"content":"The name to assign to the control; optional.","pos":[79611,79655]},{"pos":[79662,79674],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[79676,79740]},{"pos":[79747,79754],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[79756,79850]},{"content":"It must start with a letter.","pos":[79856,79884]},{"content":"It cannot exceed 250 characters.","pos":[79889,79921]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[79926,79980],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[79985,80025]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[80030,80140]},{"pos":[80146,80169],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[80222,80232],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80234,80239]},{"pos":[80248,80260],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80266,80293],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[80345,80357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80363,80383],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[80385,80430]},{"pos":[80477,80489],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[80491,80526]},{"pos":[80532,80553],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[80604,80614],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80616,80621]},{"pos":[80630,80642],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80648,80665],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[80712,80722],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80724,80729]},{"pos":[80738,80750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80756,80774],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[80776,80835]},{"pos":[80903,80913],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80915,80920]},{"content":"The ID of the security key to assign to the control; optional.","pos":[80923,80985]},{"pos":[80992,81004],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[81006,81105]},{"pos":[81111,81127],"content":"Method selection","linkify":"Method selection","nodes":[{"content":"Method selection","pos":[0,16]}]},{"pos":[81173,81183],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81185,81190]},{"pos":[81199,81211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81217,81239],"content":"Method selectionChange","linkify":"Method selectionChange","nodes":[{"content":"Method selectionChange","pos":[0,22]}]},{"pos":[81280,81292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81298,81315],"content":"Method selectText","linkify":"Method selectText","nodes":[{"content":"Method selectText","pos":[0,17]}]},{"pos":[81361,81371],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[81373,81379]},{"pos":[81388,81400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81406,81428],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[81430,81470]},{"pos":[81525,81535],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[81537,81547]},{"content":"The ID of the menu to show.","pos":[81550,81577]},{"pos":[81584,81596],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[81598,81657]},{"pos":[81663,81679],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[81733,81743],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81745,81750]},{"pos":[81759,81771],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81777,81788],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[81790,81917]},{"pos":[81966,81976],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81978,81983]},{"content":"The value to assign to the skip property of the control; optional.","pos":[81986,82052]},{"pos":[82059,82071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise false.","pos":[82073,82178]},{"pos":[82184,82195],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[82250,82260],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[82262,82275]},{"pos":[82284,82296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82302,82313],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[82354,82364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82366,82371]},{"pos":[82380,82392],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82398,82412],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves a tooltip for the control.","pos":[82414,82450]},{"pos":[82483,82495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text to show in the tooltip.","pos":[82497,82529]},{"pos":[82536,82543],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Whenever the pointer hovers over the control, the tooltip is displayed to the user.","pos":[82545,82628]},{"content":"This method can be overridden to present instructive text to the user about the values that are entered in the control.","pos":[82629,82748]},{"pos":[82755,82763],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[82872,82882],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[82884,82946]},{"pos":[82996,83006],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83008,83013]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[83016,83100]},{"content":"mode","pos":[83112,83116]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[83119,83203]},{"pos":[83210,83222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[83224,83273]},{"pos":[83279,83293],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[83295,83354]},{"pos":[83398,83408],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83410,83415]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[83418,83502]},{"pos":[83509,83521],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[83523,83577]},{"pos":[83583,83598],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[83600,83662]},{"pos":[83707,83717],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83719,83724]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[83727,83806]},{"pos":[83813,83825],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[83827,83876]},{"pos":[83882,83893],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[83934,83944],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83946,83951]},{"pos":[83960,83972],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83978,83994],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[83996,84063]},{"pos":[84117,84127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84129,84134]},{"content":"The value to assign to the underline property of the control.","pos":[84137,84198]},{"pos":[84205,84217],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise false.","pos":[84219,84282]},{"pos":[84288,84315],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[84379,84389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[84391,84395]},{"pos":[84404,84416],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84422,84437],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[84439,84482]},{"pos":[84527,84537],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84539,84544]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[84547,84619]},{"pos":[84626,84638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[84640,84670]},{"pos":[84676,84695],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[84697,84745]},{"pos":[84794,84804],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84806,84811]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[84814,84891]},{"pos":[84898,84910],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[84912,84947]},{"pos":[84953,84973],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[84975,85034]},{"pos":[85084,85094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85096,85101]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[85104,85192]},{"pos":[85199,85211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[85213,85259]},{"pos":[85265,85283],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[85285,85368]},{"pos":[85416,85426],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85428,85433]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[85436,85516]},{"pos":[85523,85535],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[85537,85593]},{"pos":[85599,85616],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[85618,85670]},{"pos":[85717,85727],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85729,85734]},{"content":"The user height for the control; optional.","pos":[85737,85779]},{"pos":[85786,85798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[85800,85839]},{"pos":[85845,85860],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[85862,85944]},{"pos":[85989,85999],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86001,86006]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[86009,86088]},{"pos":[86095,86107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[86109,86164]},{"pos":[86171,86178],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[86180,86350]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[86351,86426]},{"content":"This method lets you programmatically determine and set the value.","pos":[86427,86493]},{"pos":[86499,86522],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[86524,86580]},{"pos":[86633,86643],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86645,86650]},{"content":"The organization container to set for the control; optional.","pos":[86653,86713]},{"pos":[86720,86732],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[86734,86777]},{"pos":[86783,86804],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[86806,86860]},{"pos":[86911,86921],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86923,86928]},{"content":"The organization sibling to set for the control; optional.","pos":[86931,86989]},{"pos":[86996,87008],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[87010,87051]},{"pos":[87057,87078],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[87080,87129]},{"pos":[87180,87190],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87192,87197]},{"content":"The user label text to set for the control; optional.","pos":[87200,87253]},{"pos":[87260,87272],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[87274,87310]},{"pos":[87316,87340],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[87342,87395]},{"pos":[87449,87459],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87461,87466]},{"content":"The user security level to set for the control; optional.","pos":[87469,87526]},{"pos":[87533,87545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[87547,87587]},{"pos":[87593,87608],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[87610,87758]},{"pos":[87803,87813],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87815,87820]},{"content":"The value to assign to the userSkip property; optional.","pos":[87823,87878]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[87879,87974]},{"pos":[87981,87993],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[87995,88064]},{"pos":[88070,88086],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[88088,88139]},{"pos":[88185,88195],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88197,88202]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[88205,88271]},{"pos":[88278,88290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[88292,88421]},{"pos":[88428,88435],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[88437,88531]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[88532,88648],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[88649,88799]},{"pos":[88805,88820],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[88858,88870],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88876,88898],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[88900,88961]},{"pos":[89030,89040],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89042,89047]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[89050,89127]},{"content":"mode","pos":[89139,89143]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[89146,89223]},{"pos":[89230,89242],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[89244,89292]},{"pos":[89298,89324],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[89326,89385]},{"pos":[89450,89460],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[89462,89466]},{"pos":[89475,89487],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[89489,89543]},{"pos":[89549,89576],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[89578,89639]},{"pos":[89696,89706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89708,89713]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[89716,89794]},{"pos":[89801,89813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[89815,89863]},{"pos":[89869,89888],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[89937,89947],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89949,89954]},{"pos":[89963,89975],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[89981,89995],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[89997,90067]},{"pos":[90119,90129],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90131,90136]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[90139,90211]},{"pos":[90218,90230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[90232,90281]},{"pos":[90287,90299],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[90301,90339]},{"pos":[90391,90401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[90403,90408]},{"content":"An integer data type that indicates how the width is calculated; optional.","pos":[90411,90485]},{"content":"mode","pos":[90497,90501]},{"content":"An integer data type that indicates how the width is calculated; optional.","pos":[90504,90578]},{"pos":[90585,90597],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[90599,90634]},{"pos":[90641,90648],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[90650,90703]},{"content":"Calculate the width according to the following table:","pos":[90704,90757]},{"content":"Mode.","pos":[90761,90766]},{"content":"Width calculation.","pos":[90779,90797]},{"content":"-1 Exact.","pos":[90983,90992]},{"content":"The exact width in pixels of the controls is used.","pos":[91001,91051]},{"content":"0 Auto.","pos":[91094,91101]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[91112,91200]},{"content":"1 Column width.","pos":[91205,91220]},{"content":"The layout of the form determines the width of the control.","pos":[91223,91282]},{"content":"The width and width calculation mode can be set separately.","pos":[91315,91374]},{"pos":[91380,91396],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[91398,91460]},{"pos":[91506,91516],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[91518,91523]},{"content":"An integer data type value that indicates how control width is calculated; optional.","pos":[91526,91610]},{"pos":[91617,91629],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[91631,91692]},{"pos":[91699,91706],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[91708,91761]},{"content":"Mode.","pos":[91765,91770]},{"content":"Width Calculation.","pos":[91781,91799]},{"content":"Exact.","pos":[91983,91989]},{"content":"The exact width in pixels of the controls is used.","pos":[91999,92049]},{"content":"Auto.","pos":[92092,92097]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[92108,92196]},{"content":"Column width.","pos":[92201,92214]},{"content":"The layout of the form determines the width of the control.","pos":[92217,92276]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[92309,92392]},{"pos":[92398,92415],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[92417,92455]},{"pos":[92502,92512],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92514,92519]},{"content":"An integer data type that specifies the width in pixels; optional.","pos":[92522,92588]},{"pos":[92595,92607],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[92609,92644]},{"pos":[92651,92658],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[92660,92733]},{"pos":[92739,92755],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[92757,92853]},{"pos":[92888,92901],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[92949,92959],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[92961,92970]},{"pos":[92978,92994],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[93077,93087],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[93089,93095]},{"content":"e","pos":[93109,93110]},{"pos":[93118,93134],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[93136,93178]},{"pos":[93213,93224],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[93226,93278]},{"pos":[93308,93318],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[93320,93353]},{"pos":[93382,93395],"content":"Method insert","linkify":"Method insert","nodes":[{"content":"Method insert","pos":[0,13]}]},{"pos":[93449,93459],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[93461,93467]},{"content":"index","pos":[93481,93486]},{"pos":[93494,93507],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[93550,93560],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[93562,93568]},{"pos":[93576,93590],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[93592,93632]},{"pos":[93665,93677],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[93708,93722],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[93724,93785]},{"pos":[93819,93826],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[93828,93956]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[93957,94061]},{"pos":[94067,94090],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[94092,94133]},{"pos":[94175,94196],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[94198,94267]},{"pos":[94329,94339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[94341,94346]},{"content":"The preferred height of the control.","pos":[94349,94385]},{"content":"height","pos":[94397,94403]},{"content":"The preferred height of the control.","pos":[94406,94442]},{"pos":[94448,94465],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[94467,94537]},{"pos":[94627,94637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[94639,94640]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[94643,94704]},{"content":"y","pos":[94716,94717]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[94720,94781]},{"content":"button","pos":[94793,94799]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[94802,94863]},{"content":"Ctrl","pos":[94875,94879]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[94882,94943]},{"content":"Shift","pos":[94955,94960]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[94963,95024]},{"pos":[95030,95041],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[95043,95141]},{"pos":[95227,95237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[95239,95249]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[95252,95337]},{"content":"dragMode","pos":[95349,95357]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[95360,95445]},{"content":"x","pos":[95457,95458]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[95461,95546]},{"content":"y","pos":[95558,95559]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[95562,95647]},{"pos":[95653,95668],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[95670,95700]},{"pos":[95734,95746],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[95748,95802]},{"pos":[95833,95862],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[95980,95990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[95992,96008]},{"content":"objectMethodToCall","pos":[96022,96040]},{"content":"overrideObject","pos":[96054,96068]},{"pos":[96076,96086],"content":"Method add","linkify":"Method add","nodes":[{"content":"Method add","pos":[0,10]}]},{"pos":[96126,96136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[96138,96144]},{"pos":[96152,96170],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[96255,96265],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[96267,96273]},{"content":"e","pos":[96287,96288]},{"pos":[96296,96313],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[96397,96407],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[96409,96415]},{"content":"e","pos":[96429,96430]},{"pos":[96438,96451],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[96453,96553]},{"pos":[96635,96645],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[96647,96657]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[96660,96745]},{"content":"dragMode","pos":[96757,96765]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[96768,96853]},{"content":"x","pos":[96865,96866]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[96869,96954]},{"content":"y","pos":[96966,96967]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[96970,97055]},{"pos":[97061,97072],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[97102,97118],"content":"Method endUpdate","linkify":"Method endUpdate","nodes":[{"content":"Method endUpdate","pos":[0,16]}]},{"pos":[97153,97165],"content":"Method clear","linkify":"Method clear","nodes":[{"content":"Method clear","pos":[0,12]}]},{"pos":[97196,97214],"content":"Method beginUpdate","linkify":"Method beginUpdate","nodes":[{"content":"Method beginUpdate","pos":[0,18]}]},{"pos":[97251,97265],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[97298,97313],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[97395,97405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[97407,97413]},{"content":"e","pos":[97427,97428]},{"pos":[97436,97454],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[97539,97549],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[97551,97557]},{"content":"e","pos":[97571,97572]},{"pos":[97580,97598],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[97600,97671]},{"pos":[97722,97732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[97734,97743]},{"content":"The string value to use to filter data; optional.","pos":[97746,97795]},{"pos":[97801,97827],"content":"Method OnSelectionChanging","linkify":"Method OnSelectionChanging","nodes":[{"content":"Method OnSelectionChanging","pos":[0,26]}]},{"pos":[97920,97930],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[97932,97938]},{"content":"e","pos":[97952,97953]},{"pos":[97961,97974],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[98006,98023],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[98025,98079]},{"pos":[98115,98130],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[98132,98178]},{"pos":[98212,98233],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[98235,98256]},{"pos":[98296,98310],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[98391,98401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[98403,98409]},{"content":"e","pos":[98423,98424]},{"pos":[98432,98449],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[98533,98543],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[98545,98551]},{"content":"e","pos":[98565,98566]},{"pos":[98574,98599],"content":"Method OnSelectionChanged","linkify":"Method OnSelectionChanged","nodes":[{"content":"Method OnSelectionChanged","pos":[0,25]}]},{"pos":[98691,98701],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[98703,98709]},{"content":"e","pos":[98723,98724]},{"pos":[98732,98751],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[98837,98847],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[98849,98855]},{"content":"e","pos":[98869,98870]},{"pos":[98877,98897],"content":"Class FormListColumn","linkify":"Class FormListColumn","nodes":[{"content":"Class FormListColumn","pos":[0,20]}]},{"content":"The FormListColumn class provides list column functionality for a form.","pos":[98939,99010]},{"pos":[99016,99023],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[99029,99037],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[99043,99050],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[99054,99060]},{"content":"Description","pos":[99116,99127]},{"content":"public FormListFormat format(<ph id=\"ph1\">\\[</ph>FormListFormat value<ph id=\"ph2\">\\]</ph>)","pos":[99302,99356],"source":"public FormListFormat format(\\[FormListFormat value\\])"},{"content":"public int image(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[99426,99457],"source":"public int image(\\[int value\\])"},{"content":"public int order(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[99550,99581],"source":"public int order(\\[int value\\])"},{"content":"public int subItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[99674,99707],"source":"public int subItem(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[99798,99828],"source":"public str text(\\[str value\\])"},{"content":"public str toString()","pos":[99922,99943]},{"content":"Returns a string that contains the class handle and name.","pos":[99984,100041]},{"content":"public int width(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[100046,100077],"source":"public int width(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[100108,100146]},{"content":"public void new(<ph id=\"ph1\">\\[</ph>str Text<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int ColNo<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int Width<ph id=\"ph6\">\\]</ph>)","pos":[100170,100229],"source":"public void new(\\[str Text\\], \\[int ColNo\\], \\[int Width\\])"},{"content":"Initializes a new instance of the Object class.","pos":[100232,100279]},{"content":"public void finalize()","pos":[100294,100316]},{"pos":[100421,100434],"content":"Method format","linkify":"Method format","nodes":[{"content":"Method format","pos":[0,13]}]},{"pos":[100499,100509],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100511,100516]},{"pos":[100525,100537],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[100543,100555],"content":"Method image","linkify":"Method image","nodes":[{"content":"Method image","pos":[0,12]}]},{"pos":[100597,100607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100609,100614]},{"pos":[100623,100635],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[100641,100653],"content":"Method order","linkify":"Method order","nodes":[{"content":"Method order","pos":[0,12]}]},{"pos":[100695,100705],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100707,100712]},{"pos":[100721,100733],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[100739,100753],"content":"Method subItem","linkify":"Method subItem","nodes":[{"content":"Method subItem","pos":[0,14]}]},{"pos":[100797,100807],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100809,100814]},{"pos":[100823,100835],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[100841,100852],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[100893,100903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100905,100910]},{"pos":[100919,100931],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[100937,100952],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that contains the class handle and name.","pos":[100954,101011]},{"pos":[101045,101057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A text representation of the class.","pos":[101059,101094]},{"pos":[101100,101112],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[101114,101152]},{"pos":[101194,101204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101206,101211]},{"content":"The value to assign as the width of the list column; optional.","pos":[101214,101276]},{"pos":[101283,101295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[101297,101332]},{"pos":[101339,101346],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[101348,101401]},{"content":"Calculate the width according to the following table.","pos":[101402,101455]},{"content":"Mode","pos":[101459,101463]},{"content":"Width calculation","pos":[101478,101495]},{"content":"-1 – Exact","pos":[101685,101695]},{"content":"The exact width of the control in pixels is used.","pos":[101704,101753]},{"content":"0 – Auto","pos":[101798,101806]},{"content":"The width of the control is calculated automatically, and the value parameter is ignored.","pos":[101817,101906]},{"content":"1 – Column width","pos":[101911,101927]},{"content":"The layout of the form determines the width of the control.","pos":[101930,101989]},{"content":"The width and the width calculation mode can be set separately.","pos":[102023,102086]},{"pos":[102092,102102],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[102104,102151]},{"pos":[102217,102227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Text","pos":[102229,102233]},{"content":"ColNo","pos":[102247,102252]},{"content":"Width","pos":[102266,102271]},{"pos":[102279,102294],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[102327,102348],"content":"Class FormListControl","linkify":"Class FormListControl","nodes":[{"content":"Class FormListControl","pos":[0,21]}]},{"pos":[102400,102407],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[102413,102421],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[102427,102434],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[102438,102444]},{"content":"Description","pos":[102548,102559]},{"content":"public int add(str Text, <ph id=\"ph1\">\\[</ph>int image<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int index<ph id=\"ph4\">\\]</ph>)","pos":[103002,103056],"source":"public int add(str Text, \\[int image\\], \\[int index\\])"},{"content":"public boolean addColumn(int Idx, FormListColumn Column)","pos":[103284,103340]},{"content":"public int addItem(FormListItem item)","pos":[103566,103603]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[103848,103894],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether the control is aligned with other controls.","pos":[103958,104020]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[104130,104173],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can modify the contents of the control.","pos":[104240,104307]},{"content":"public boolean allowSysSetup()","pos":[104412,104442]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[104522,104605]},{"content":"public boolean arrangeItem(FormListArrange ArrangeMethod)","pos":[104694,104751]},{"content":"public boolean autoArrange(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[104976,105021],"source":"public boolean autoArrange(\\[boolean value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[105258,105307],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[105368,105466]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[105540,105581],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[105650,105699]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[105822,105857],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[105932,105993]},{"content":"public int beginDrag(int x, int y)","pos":[106104,106138]},{"content":"Identifies when the user starts to move a form list control or an item in a form list control.","pos":[106214,106308]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[106386,106416],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the font weight that is used fort text in the control.","pos":[106496,106563]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[106668,106700],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[106778,106834]},{"content":"public container calcControlSize(int chars, int lines)","pos":[106950,107004]},{"content":"Calculates the font size that is used for a form list control, based on the number of characters and the number of lines.","pos":[107060,107181]},{"content":"public boolean canScroll(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[107232,107275],"source":"public boolean canScroll(\\[boolean value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[107514,107552],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[107624,107667]},{"content":"public boolean checkBox(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[107796,107838],"source":"public boolean checkBox(\\[boolean value\\])"},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[108078,108115],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[108188,108233]},{"content":"public boolean columnHeader(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[108360,108406],"source":"public boolean columnHeader(\\[boolean value\\])"},{"content":"Sets or gets a Boolean data type value that indicates whether a form list control has a column header.","pos":[108470,108572]},{"content":"public boolean columnHeaderButton(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[108642,108694],"source":"public boolean columnHeaderButton(\\[boolean value\\])"},{"content":"Sets or gets a Boolean data type value that indicates whether a form list control has a column header button.","pos":[108752,108861]},{"content":"public boolean columnImages(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[108924,108970],"source":"public boolean columnImages(\\[boolean value\\])"},{"content":"Sets or gets a Boolean data type value that indicates whether a form list control has column images.","pos":[109034,109134]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[109206,109278],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[109316,109383]},{"content":"public List configurationKeyEx()","pos":[109488,109520]},{"content":"Retrieves a list that contains the IDs of configuration keys that are activated for a form list control.","pos":[109598,109702]},{"content":"public int copyItem(int Item, int InsertAt)","pos":[109770,109813]},{"content":"Copies a specified item in a form list control.","pos":[109880,109927]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[110052,110096],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[110162,110240]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[110334,110376],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[110444,110569]},{"content":"public boolean delete(int Idx)","pos":[110616,110646]},{"content":"Deletes a specified item from a form list control.","pos":[110726,110776]},{"content":"public boolean deleteAll()","pos":[110898,110924]},{"content":"Deletes all the items from a form list control.","pos":[111008,111055]},{"content":"public boolean deleteColumn(int Idx)","pos":[111180,111216]},{"content":"Deletes a specified column in a form list control.","pos":[111290,111340]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[111462,111501],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[111572,111739]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[111744,111778],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[111854,111935]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[112026,112107]},{"content":"Identifies when a user drags an object over an item within the bounds of a form list control.","pos":[112136,112229]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[112308,112385]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[112418,112514]},{"content":"public str dragText()","pos":[112590,112611]},{"content":"Retrieves the text that is displayed when a user drags an item in a form list control.","pos":[112700,112786]},{"content":"public boolean editLabels(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[112872,112916],"source":"public boolean editLabels(\\[boolean value\\])"},{"content":"Indicates whether users can modify item names in a form list control.","pos":[112982,113051]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[113154,113195],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[113264,113315]},{"content":"public int ensureVisible(int Idx)","pos":[113436,113469]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[113718,113748],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[113828,113885]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114000,114034],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[114110,114167]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114282,114323],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control.","pos":[114392,114436]},{"content":"public FormListColumn getColumn(int Idx)","pos":[114564,114604]},{"content":"Retrieves a FormListColumn object for a specified column in a form list control.","pos":[114674,114754]},{"content":"public int getColumnCount()","pos":[114846,114873]},{"content":"Retrieves the number of columns in a form list control.","pos":[114956,115011]},{"content":"public int getColumnWidth(int Idx)","pos":[115128,115162]},{"content":"Retrieves the width of a column in a form list control.","pos":[115238,115293]},{"content":"public int getCount()","pos":[115410,115431]},{"content":"Retrieves the number of items that are contained in a form list control.","pos":[115520,115592]},{"content":"public int getCountPerPage()","pos":[115692,115720]},{"content":"public Imagelist getImagelist(<ph id=\"ph1\">\\[</ph>boolean GetLarge<ph id=\"ph2\">\\]</ph>)","pos":[115974,116025],"source":"public Imagelist getImagelist(\\[boolean GetLarge\\])"},{"content":"public FormListItem getItem(int Idx, <ph id=\"ph1\">\\[</ph>int SubItem<ph id=\"ph2\">\\]</ph>)","pos":[116256,116309],"source":"public FormListItem getItem(int Idx, \\[int SubItem\\])"},{"content":"Retrieves a FormListItem object for an item in a form list control.","pos":[116366,116433]},{"content":"public container getItemPos(int Item)","pos":[116538,116575]},{"content":"Retrieves the position of an item in a form list control.","pos":[116648,116705]},{"content":"public int getNextItem(FormListNext nextType, <ph id=\"ph1\">\\[</ph>int startIdx<ph id=\"ph2\">\\]</ph>)","pos":[116820,116883],"source":"public int getNextItem(FormListNext nextType, \\[int startIdx\\])"},{"content":"Retrieves the number of the next item in a form list control.","pos":[116930,116991]},{"content":"public int getSelectedCount()","pos":[117102,117131]},{"content":"Retrieves the number of items that are selected in a form list control.","pos":[117212,117283]},{"content":"public int getStringWidth(str Text)","pos":[117384,117419]},{"content":"public int getTopIndex()","pos":[117666,117690]},{"content":"public boolean gridLines(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[117948,117991],"source":"public boolean gridLines(\\[boolean value\\])"},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[118230,118272],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[118340,118428]},{"content":"public boolean hasUserSetting()","pos":[118512,118543]},{"content":"Indicates whether the control has custom user settings.","pos":[118622,118677]},{"content":"public boolean headerdragdrop(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[118794,118842],"source":"public boolean headerdragdrop(\\[boolean value\\])"},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[119076,119118],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[119186,119225]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119358,119394],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[119468,119530]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119640,119677],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[119750,119789]},{"content":"public str helpField()","pos":[119922,119944]},{"content":"Retrieves the Help text for the control.","pos":[120032,120072]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[120204,120238],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[120314,120418]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[120486,120527],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[120596,120659]},{"content":"public container hitTest(int x, int y)","pos":[120768,120806]},{"content":"public container hitTestSubItem(int x, int y)","pos":[121050,121095]},{"content":"public int hWnd()","pos":[121332,121349]},{"content":"Retrieves the Windows handle for the control.","pos":[121442,121487]},{"content":"public boolean isContainer()","pos":[121614,121642]},{"content":"public boolean isDisplayed()","pos":[121896,121924]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[122006,122072]},{"content":"public boolean isRestricted()","pos":[122178,122207]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[122288,122355]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[122460,122516]},{"content":"Gets a value that indicates whether the control allows for the specified level of customization.","pos":[122570,122666]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[122742,122782],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public int itemAlign(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[123024,123059],"source":"public int itemAlign(\\[int value\\])"},{"content":"public boolean itemChanging(int Idx, AnyType Data)","pos":[123306,123356]},{"content":"public boolean keyDown(int vKey, boolean Ctrl, boolean Shift)","pos":[123588,123649]},{"content":"public boolean leave()","pos":[123870,123892]},{"content":"Identifies when a user moves focus away from a form list control.","pos":[123980,124045]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[124152,124192],"source":"public int left(int value, \\[int mode\\])"},{"content":"Sets or returns the horizontal position of a form list control in pixels, and specifies how the position is calculated.","pos":[124262,124381]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[124434,124468],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets or returns a value that indicates how the horizontal position of a form list control is calculated.","pos":[124544,124648]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[124716,124751],"source":"public int leftValue(\\[int value\\])"},{"content":"Sets or returns the horizontal position of a form list control in pixels.","pos":[124826,124899]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[124998,125045],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[125108,125161]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[125280,125359]},{"content":"Is called when the control is double-clicked by the user.","pos":[125390,125447]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[125562,125637]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[125672,125737]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[125844,125919]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[125954,126019]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[126126,126199]},{"content":"Identifies when a user presses the left mouse button.","pos":[126236,126289]},{"content":"public int moveItem(int Item, int InsertAt)","pos":[126408,126451]},{"content":"Moves a specified item in a form list control.","pos":[126518,126564]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[126690,126720],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[126800,126935]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[126972,127014],"source":"public int neededPermission(\\[int value\\])"},{"content":"public boolean oneClickActivate(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[127254,127304],"source":"public boolean oneClickActivate(\\[boolean value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[127536,127575]},{"content":"public FormControl parentControl()","pos":[127818,127852]},{"content":"Retrieves the parent control for the control.","pos":[127928,127973]},{"content":"public boolean redrawItems(int idxFirst, int idxLast)","pos":[128100,128153]},{"content":"Updates a range of items in a form list control.","pos":[128210,128258]},{"content":"public boolean rowSelect(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[128382,128425],"source":"public boolean rowSelect(\\[boolean value\\])"},{"content":"Sets or gets a Boolean data type value that indicates whether a row in a form list control is selected when the row is clicked.","pos":[128492,128619]},{"content":"public boolean scroll(int dx, int dy)","pos":[128664,128701]},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[128946,129003],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[129056,129115]},{"content":"public boolean selectionChanging(int Idx, AnyType Data)","pos":[129228,129283]},{"content":"public boolean setColumn(int Idx, FormListColumn Column)","pos":[129510,129566]},{"content":"public boolean setColumnWidth(int Idx, int Width)","pos":[129792,129841]},{"content":"Specifies the width of a column in a form list control.","pos":[129902,129957]},{"content":"public boolean setItem(FormListItem item)","pos":[130074,130115]},{"content":"Indicates whether an item is contained in a form list control.","pos":[130184,130246]},{"content":"public Imagelist setStateImagelist(Imagelist imageList)","pos":[130356,130411]},{"content":"public int showContextMenu(int menuHandle)","pos":[130638,130680]},{"content":"Identifies when a shortcut menu appears.","pos":[130748,130788]},{"content":"public boolean showSelAlways(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[130920,130967],"source":"public boolean showSelAlways(\\[boolean value\\])"},{"content":"public boolean singleSelection(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[131202,131251],"source":"public boolean singleSelection(\\[boolean value\\])"},{"content":"Indicates whether multiple items can be selected in a form list control.","pos":[131312,131384]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[131484,131522],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[131594,131721]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[131766,131796],"source":"public int sort(\\[int value\\])"},{"content":"public boolean sortTextItems(<ph id=\"ph1\">\\[</ph>int column<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean ascending<ph id=\"ph4\">\\]</ph>)","pos":[132048,132115],"source":"public boolean sortTextItems(\\[int column\\], \\[boolean ascending\\])"},{"content":"public str toolTip()","pos":[132330,132350]},{"content":"Retrieves the tooltip text for the control.","pos":[132440,132483]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[132612,132651],"source":"public int top(int value, \\[int mode\\])"},{"content":"Sets or returns the vertical position of a form list control in pixels, and specifies how the position is calculated.","pos":[132722,132839]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[132894,132927],"source":"public int topMode(\\[int value\\])"},{"content":"Sets or returns a value that indicates how the vertical position for a form list control is calculated.","pos":[133004,133107]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[133176,133210],"source":"public int topValue(\\[int value\\])"},{"content":"Sets or returns the vertical position of a form list control in pixels.","pos":[133286,133357]},{"content":"public boolean trackSelect(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[133458,133503],"source":"public boolean trackSelect(\\[boolean value\\])"},{"content":"public boolean twoClickActivate(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[133740,133790],"source":"public boolean twoClickActivate(\\[boolean value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[134022,134052],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[134304,134347],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the value of the underline property for the text in the control.","pos":[134414,134494]},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[134586,134637]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[134868,134902],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[134978,135021]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[135150,135188],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[135260,135308]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[135432,135471],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[135542,135601]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[135714,135751],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[135824,135907]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[135996,136032],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[136106,136158]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[136278,136312],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[136388,136470]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[136560,136602],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[136670,136726]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[136842,136882],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[136952,137006]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[137124,137164],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[137234,137283]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[137406,137449],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[137516,137569]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[137688,137722],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[137798,137946]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[137970,138005],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[138080,138157]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[138252,138312],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Sets or gets the amount of space above and below a form list control in pixels, and specifies how the space is calculated.","pos":[138362,138484]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[138534,138588],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets or returns a value that indicates how the space above and below a form list control is calculated.","pos":[138644,138747]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[138816,138862],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Sets or returns the amount of space above and below a form list control in pixels.","pos":[138926,139008]},{"content":"public int viewType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[139098,139132],"source":"public int viewType(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[139380,139421],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[139490,139560]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[139662,139703],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[139772,139810]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[139944,139979],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[140054,140116]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[140226,140262],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[140336,140374]},{"content":"public void selectionChanged(int Idx, AnyType Data)","pos":[140508,140559]},{"content":"public void activateItem(int Idx)","pos":[140790,140823]},{"content":"public void inputSearch(str searchStr)","pos":[141072,141110]},{"content":"Identifies when the search begins for a specified text string.","pos":[141182,141244]},{"content":"public void displayControl()","pos":[141354,141382]},{"content":"Displays the control.","pos":[141464,141485]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[141636,141710],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void update(<ph id=\"ph1\">\\[</ph>int idx<ph id=\"ph2\">\\]</ph>)","pos":[141918,141949],"source":"public void update(\\[int idx\\])"},{"content":"Updates the control.","pos":[142028,142048]},{"content":"public void endDrag()","pos":[142200,142221]},{"content":"Identifies when the user has finished moving a form list control.","pos":[142310,142375]},{"content":"public void mouseLeave()","pos":[142482,142506]},{"content":"Indicates that the mouse pointer has left the control.","pos":[142592,142646]},{"content":"public void setImagelist(Imagelist imageList, <ph id=\"ph1\">\\[</ph>boolean SetLarge<ph id=\"ph2\">\\]</ph>)","pos":[142764,142831],"source":"public void setImagelist(Imagelist imageList, \\[boolean SetLarge\\])"},{"content":"public void copy()","pos":[143046,143064]},{"content":"Identifies when a user performs a copy operation.","pos":[143156,143205]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[143328,143397]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[143438,143538]},{"content":"public void itemCopy(int Idx, int newIdx)","pos":[143610,143651]},{"content":"public void cut()","pos":[143892,143909]},{"content":"Identifies when the user performs a cut operation.","pos":[144002,144052]},{"content":"public void itemMoved(int Idx, int newIdx)","pos":[144174,144216]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[144456,144563],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void paste()","pos":[144738,144757]},{"content":"Pastes the contents of the clipboard into the control.","pos":[144848,144902]},{"content":"public void lostFocus()","pos":[145020,145043]},{"content":"Indicates that the control has lost focus.","pos":[145130,145172]},{"content":"private void OnSelectionChanged(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[145302,145385],"source":"private void OnSelectionChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void hotTrackItem(int Idx)","pos":[145584,145617]},{"content":"Identifies when a user moves the mouse pointer over a form list control.","pos":[145694,145766]},{"content":"public void setCount(int count)","pos":[145866,145897]},{"content":"public void dragLeave()","pos":[146148,146171]},{"content":"Identifies when a user drags an object out of the bounds of a form list control.","pos":[146258,146338]},{"content":"public void itemDeleted(int Idx, AnyType Data)","pos":[146430,146476]},{"content":"public void prefColumnSize(int width, int height)","pos":[146712,146761]},{"content":"Specifies the preferred column width and height for the form control.","pos":[146822,146891]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[146994,147069],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setText(int Idx, str Text, <ph id=\"ph1\">\\[</ph>int SubItem<ph id=\"ph2\">\\]</ph>)","pos":[147276,147331],"source":"public void setText(int Idx, str Text, \\[int SubItem\\])"},{"content":"public void itemChanged(int Idx, AnyType Data)","pos":[147558,147604]},{"content":"public void doubleClick()","pos":[147840,147865]},{"content":"Identifies when a user double-clicks an item in a form list control.","pos":[147950,148018]},{"content":"public void resetUserSetting()","pos":[148122,148152]},{"content":"Resets the user settings for the control.","pos":[148232,148273]},{"content":"public void setFocus()","pos":[148404,148426]},{"content":"Sets the focus on the control.","pos":[148514,148544]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[148686,148763]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[148796,148866]},{"content":"public void allItemsDeleted()","pos":[148968,148997]},{"content":"Identifies when all the items in a form list control are deleted.","pos":[149078,149143]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[149250,149323]},{"content":"Identifies when a user drops a form list control or an item in a form list control into a new position.","pos":[149360,149463]},{"content":"public void columnClicked(int Column)","pos":[149532,149569]},{"content":"Identifies when a user clicks a column in a list view control in a form.","pos":[149642,149714]},{"content":"public void getStateImagelist()","pos":[149814,149845]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[150096,150172],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setItemPos(int Item, int x, int y)","pos":[150378,150424]},{"content":"Sets the position of an item in a form list control.","pos":[150488,150540]},{"content":"public void gotFocus()","pos":[150660,150682]},{"content":"Indicates that the control has received focus.","pos":[150770,150816]},{"content":"public void enter()","pos":[150942,150961]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[151224,151296],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void context()","pos":[151506,151527]},{"content":"Identifies when the user opens a shortcut menu in a form list control.","pos":[151616,151686]},{"content":"public void beginEditLabel(int Idx)","pos":[151788,151823]},{"content":"public void itemInserted(int Idx, AnyType Data)","pos":[152070,152117]},{"pos":[152355,152365],"content":"Method add","linkify":"Method add","nodes":[{"content":"Method add","pos":[0,10]}]},{"pos":[152428,152438],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Text","pos":[152440,152444]},{"content":"image","pos":[152458,152463]},{"content":"index","pos":[152477,152482]},{"pos":[152491,152503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[152509,152525],"content":"Method addColumn","linkify":"Method addColumn","nodes":[{"content":"Method addColumn","pos":[0,16]}]},{"pos":[152594,152604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[152606,152609]},{"content":"Column","pos":[152623,152629]},{"pos":[152638,152650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[152656,152670],"content":"Method addItem","linkify":"Method addItem","nodes":[{"content":"Method addItem","pos":[0,14]}]},{"pos":[152720,152730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"item","pos":[152732,152736]},{"pos":[152745,152757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[152763,152782],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether the control is aligned with other controls.","pos":[152784,152846]},{"pos":[152903,152913],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[152915,152920]},{"content":"A Boolean value that indicates whether a form list control is aligned with other controls.","pos":[152923,153013]},{"pos":[153020,153032],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[153034,153090]},{"pos":[153097,153104],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned based on the longest label.","pos":[153106,153181]},{"pos":[153187,153203],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can modify the contents of the control.","pos":[153205,153272]},{"pos":[153326,153336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[153338,153343]},{"content":"A Boolean data type that indicates whether data can be modified.","pos":[153346,153410]},{"pos":[153417,153429],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be modified; otherwise, false.","pos":[153431,153485]},{"pos":[153492,153499],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[153501,153621]},{"pos":[153627,153647],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[153649,153732]},{"pos":[153775,153787],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[153789,153857]},{"pos":[153863,153881],"content":"Method arrangeItem","linkify":"Method arrangeItem","nodes":[{"content":"Method arrangeItem","pos":[0,18]}]},{"pos":[153951,153961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ArrangeMethod","pos":[153963,153976]},{"pos":[153985,153997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154003,154021],"content":"Method autoArrange","linkify":"Method autoArrange","nodes":[{"content":"Method autoArrange","pos":[0,18]}]},{"pos":[154077,154087],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154089,154094]},{"pos":[154103,154115],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154121,154143],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[154145,154243]},{"pos":[154303,154313],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154315,154320]},{"content":"A Boolean data type that indicates whether the system can declare a variable of the same name as a form list control.","pos":[154323,154440]},{"pos":[154447,154459],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[154461,154540]},{"pos":[154547,154554],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[154556,154593]},{"pos":[154600,154608],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the autoDeclaration method that specifies that the system can declare a variable that has the same name as a form list control.","pos":[154610,154775]},{"pos":[156059,156081],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[156083,156132]},{"pos":[156184,156194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156196,156201]},{"content":"An Integer data type that specifies the background color.","pos":[156204,156261]},{"pos":[156268,156280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[156282,156326]},{"pos":[156333,156340],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[156342,156410]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[156416,156486]},{"content":"The second byte contains a value for green.","pos":[156491,156534]},{"content":"The third byte contains a value for blue.","pos":[156539,156580]},{"content":"The high-order byte must be 0 (zero).","pos":[156585,156622]},{"content":"The maximum value for a single byte is 255.","pos":[156627,156670]},{"pos":[156676,156692],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[156694,156755]},{"pos":[156801,156811],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156813,156818]},{"content":"An Integer data type that indicates the background style.","pos":[156821,156878]},{"pos":[156885,156897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[156899,156960]},{"pos":[156966,156982],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Identifies when the user starts to move a form list control or an item in a form list control.","pos":[156984,157078]},{"pos":[157125,157135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[157137,157138]},{"content":"An Integer data type that indicates the y-coordinate for the move event.","pos":[157141,157213]},{"content":"y","pos":[157225,157226]},{"content":"An Integer data type that indicates the y-coordinate for the move event.","pos":[157229,157301]},{"pos":[157308,157320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[157322,157361]},{"pos":[157368,157375],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click beginDrag.","pos":[157377,157524]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[157525,157603]},{"pos":[157609,157620],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the font weight that is used fort text in the control.","pos":[157622,157689]},{"pos":[157730,157740],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157742,157747]},{"content":"An Integer data type that specifies the font weight.","pos":[157750,157802]},{"pos":[157809,157821],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between 0 (zero) and 9, inclusive.","pos":[157823,157874]},{"pos":[157881,157888],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[157890,157962]},{"content":"0 – Use the default font weight.","pos":[157968,158000]},{"content":"1 – Thin.","pos":[158005,158014]},{"content":"2 – Extra-light.","pos":[158019,158035]},{"content":"3 – Light.","pos":[158040,158050]},{"content":"4 – Normal.","pos":[158055,158066]},{"content":"5 – Medium.","pos":[158071,158082]},{"content":"6 – Semibold.","pos":[158087,158100]},{"content":"7 – Bold.","pos":[158105,158114]},{"content":"8 – Extra-bold.","pos":[158119,158134]},{"content":"9 – Heavy.","pos":[158139,158149]},{"pos":[158156,158164],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the bold method to set the font weight to 9, which indicates heavy.","pos":[158166,158271]},{"pos":[159577,159590],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[159592,159648]},{"pos":[159691,159701],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[159703,159708]},{"pos":[159717,159729],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[159731,159775]},{"pos":[159782,159789],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[159791,159883]},{"content":"Value","pos":[159887,159892]},{"content":"Description","pos":[159895,159906]},{"content":"0","pos":[159935,159936]},{"content":"Auto","pos":[159943,159947]},{"content":"1","pos":[159959,159960]},{"content":"3D","pos":[159967,159969]},{"content":"2","pos":[159983,159984]},{"content":"Single line","pos":[159991,160002]},{"content":"3","pos":[160007,160008]},{"content":"Flat","pos":[160015,160019]},{"content":"4","pos":[160031,160032]},{"content":"None","pos":[160039,160043]},{"pos":[160058,160080],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Calculates the font size that is used for a form list control, based on the number of characters and the number of lines.","pos":[160082,160203]},{"pos":[160270,160280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[160282,160287]},{"content":"An Integer data type that specifies the number of lines.","pos":[160290,160346]},{"content":"lines","pos":[160358,160363]},{"content":"An Integer data type that specifies the number of lines.","pos":[160366,160422]},{"pos":[160429,160441],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Container data type value that specifies the size of a form list control.","pos":[160443,160518]},{"pos":[160524,160540],"content":"Method canScroll","linkify":"Method canScroll","nodes":[{"content":"Method canScroll","pos":[0,16]}]},{"pos":[160594,160604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[160606,160611]},{"pos":[160620,160632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[160638,160657],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[160659,160702]},{"pos":[160751,160761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[160763,160768]},{"content":"An Integer data type that specifies the character set for the text font.","pos":[160771,160843]},{"pos":[160850,160862],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[160864,160926]},{"pos":[160933,160940],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set, according to the following table.","pos":[160942,161047]},{"content":"Value","pos":[161051,161056]},{"content":"Description","pos":[161059,161070]},{"content":"0","pos":[161117,161118]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161125,161138],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[161150,161151]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161158,161174],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[161183,161184]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161191,161206],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[161216,161218]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161224,161236],"source":"MAC\\_CHARSET"},{"content":"128","pos":[161249,161252]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161257,161274],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[161282,161285]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161290,161305],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[161315,161318]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161323,161338],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[161348,161351]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161356,161376],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[161381,161384]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161389,161403],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[161414,161417]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161422,161438],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[161447,161450]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161455,161474],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[161480,161483]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161488,161503],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[161513,161516]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161521,161537],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[161546,161549]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161554,161573],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[161579,161582]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161587,161599],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[161611,161699]},{"content":"Value","pos":[161703,161708]},{"content":"Description","pos":[161711,161722]},{"content":"130","pos":[161757,161760]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161765,161779],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[161783,161869]},{"content":"Value","pos":[161873,161878]},{"content":"Description","pos":[161881,161892]},{"content":"177","pos":[161929,161932]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161937,161952],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[161957,161960]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161965,161980],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[161984,162061]},{"content":"Value.","pos":[162065,162071]},{"content":"Description.","pos":[162074,162086]},{"content":"222","pos":[162119,162122]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162128,162141],"source":"THAI\\_CHARSET"},{"content":"The default character set is set based on the current system locale.","pos":[162145,162213]},{"content":"For example, if the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[162214,162303],"source":" For example, if the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[162304,162418]},{"pos":[162424,162439],"content":"Method checkBox","linkify":"Method checkBox","nodes":[{"content":"Method checkBox","pos":[0,15]}]},{"pos":[162492,162502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[162504,162509]},{"pos":[162518,162530],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[162536,162554],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[162556,162601]},{"pos":[162649,162659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[162661,162666]},{"content":"An Integer data type that specifies the color palette for a form list control.","pos":[162669,162747]},{"pos":[162754,162766],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between 0 (zero) and 2, inclusive.","pos":[162768,162813]},{"pos":[162820,162827],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[162829,162890]},{"content":"Value","pos":[162894,162899]},{"content":"Style","pos":[162902,162907]},{"content":"0","pos":[162962,162963]},{"content":"Default","pos":[162970,162977]},{"content":"1","pos":[162996,162997]},{"content":"The Windows palette","pos":[163004,163023]},{"content":"2","pos":[163030,163031]},{"content":"The true-color scheme","pos":[163038,163059]},{"pos":[163067,163086],"content":"Method columnHeader","linkify":"Method columnHeader","nodes":[{"content":"Method columnHeader","pos":[0,19]}]},{"content":"Sets or gets a Boolean data type value that indicates whether a form list control has a column header.","pos":[163088,163190]},{"pos":[163247,163257],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[163259,163264]},{"content":"A Boolean data type that indicates whether a form list control has a column header.","pos":[163267,163350]},{"pos":[163357,163369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has a column header; otherwise, false.","pos":[163371,163429]},{"pos":[163436,163443],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value.","pos":[163445,163591]},{"content":"You must call the columnHeader method before you add a column to the form; otherwise, the column does not appear in the form list control.","pos":[163592,163730]},{"pos":[163737,163745],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the columnHeader method to indicate that the form list control does not have a column header.","pos":[163747,163878]},{"content":"The FormListControl.addColumn method adds the column to the form list control.","pos":[163879,163957]},{"pos":[165605,165630],"content":"Method columnHeaderButton","linkify":"Method columnHeaderButton","nodes":[{"content":"Method columnHeaderButton","pos":[0,25]}]},{"content":"Sets or gets a Boolean data type value that indicates whether a form list control has a column header button.","pos":[165632,165741]},{"pos":[165804,165814],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[165816,165821]},{"content":"A Boolean data type that indicates whether a form list control has a column header button.","pos":[165824,165914]},{"pos":[165921,165933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has a column header button; otherwise, false.","pos":[165935,166000]},{"pos":[166007,166014],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value.","pos":[166016,166162]},{"content":"You must call the columnHeaderButton method before you add a column to the form; otherwise, the column does not appear in the form list control.","pos":[166163,166307]},{"pos":[166314,166322],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the columnHeaderButton method to indicate that the form list control has a column header button.","pos":[166324,166458]},{"content":"The FormListControl.addColumn method adds the column to the form list control.","pos":[166459,166537]},{"pos":[168196,168215],"content":"Method columnImages","linkify":"Method columnImages","nodes":[{"content":"Method columnImages","pos":[0,19]}]},{"content":"Sets or gets a Boolean data type value that indicates whether a form list control has column images.","pos":[168217,168317]},{"pos":[168374,168384],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168386,168391]},{"content":"A Boolean data type that indicates whether a form list control has column images.","pos":[168394,168475]},{"pos":[168482,168494],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the form list control has column images; otherwise, false.","pos":[168496,168562]},{"pos":[168569,168576],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value.","pos":[168578,168724]},{"pos":[168731,168739],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the columnImages method to indicate that the form list control has column images.","pos":[168741,168860]},{"content":"The FormListControl.addColumn method adds the column to the form list control.","pos":[168861,168939]},{"pos":[170546,170569],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[170571,170638]},{"pos":[170721,170731],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170733,170738]},{"content":"A configurationKeyId system data type that specifies the configuration key ID.","pos":[170741,170819]},{"pos":[170826,170838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[170840,170912]},{"pos":[170919,170926],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[170928,171009]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[171010,171103]},{"pos":[171110,171118],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the configurationKey method to assign the Bank configuration key to the form list control.","pos":[171120,171248]},{"pos":[172591,172616],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are activated for a form list control.","pos":[172618,172722]},{"pos":[172767,172779],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A List object that contains the IDs of configuration keys that are activated for a form list control.","pos":[172781,172882]},{"pos":[172889,172896],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the control is bound to a data source, the retrieved list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[172898,173047]},{"content":"In addition, the retrieved list contains any configuration key IDs that are applied to the extended data type.","pos":[173048,173158]},{"content":"The list does not contain duplicate IDs.","pos":[173159,173199]},{"pos":[173206,173214],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the configurationKeyEx method.","pos":[173216,173284]},{"content":"The ListEnumerator object is used to traverse the elements throughout a list.","pos":[173285,173362]},{"pos":[175304,175319],"content":"Method copyItem","linkify":"Method copyItem","nodes":[{"content":"Method copyItem","pos":[0,15]}]},{"content":"Copies a specified item in a form list control.","pos":[175321,175368]},{"pos":[175424,175434],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Item","pos":[175436,175440]},{"content":"An Integer data type that specifies the position in the list that the item is copied to.","pos":[175443,175531]},{"content":"InsertAt","pos":[175543,175551]},{"content":"An Integer data type that specifies the position in the list that the item is copied to.","pos":[175554,175642]},{"pos":[175649,175661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type that specifies the position in the list that the item is copied to.","pos":[175663,175751]},{"pos":[175758,175765],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value.","pos":[175767,175913]},{"pos":[175920,175928],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the copyItem method to copy an item to the tenth position in the form list control.","pos":[175930,176051]},{"content":"The FormListControl.getCount method returns the number of items in the control.","pos":[176052,176131]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[176132,176250]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[176251,176358]},{"pos":[178686,178711],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[178713,178791]},{"pos":[178846,178856],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178858,178863]},{"content":"The string that contains the country/region codes to set; optional.","pos":[178866,178933]},{"pos":[178940,178952],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[178954,179019]},{"pos":[179025,179048],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[179050,179175]},{"pos":[179228,179238],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179240,179245]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[179248,179322]},{"pos":[179329,179341],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[179343,179455]},{"pos":[179462,179469],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[179471,179598]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[179599,179692]},{"pos":[179698,179711],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"content":"Deletes a specified item from a form list control.","pos":[179713,179763]},{"pos":[179806,179816],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[179818,179821]},{"content":"The zero-based index for the item that is being deleted.","pos":[179824,179880]},{"pos":[179887,179899],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the item is deleted; otherwise, false.","pos":[179901,179947]},{"pos":[179954,179962],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the delete method to delete an item from the form list control.","pos":[179964,180065]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[180066,180184]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[180185,180292]},{"pos":[182317,182333],"content":"Method deleteAll","linkify":"Method deleteAll","nodes":[{"content":"Method deleteAll","pos":[0,16]}]},{"content":"Deletes all the items from a form list control.","pos":[182335,182382]},{"pos":[182421,182433],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if all the items are deleted; otherwise, false.","pos":[182435,182487]},{"pos":[182494,182502],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the deleteAll method to delete all the items from the form list control.","pos":[182504,182614]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[182615,182733]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[182734,182841]},{"pos":[184872,184891],"content":"Method deleteColumn","linkify":"Method deleteColumn","nodes":[{"content":"Method deleteColumn","pos":[0,19]}]},{"content":"Deletes a specified column in a form list control.","pos":[184893,184943]},{"pos":[184992,185002],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[185004,185007]},{"content":"An Integer data type that specifies a column in a form list control.","pos":[185010,185078]},{"pos":[185085,185097],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the column is deleted; otherwise, false.","pos":[185099,185147]},{"pos":[185154,185162],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the deleteColumn method to delete the first column in the form list control.","pos":[185164,185278]},{"content":"The FormListControl.addColumn method adds two columns to the form list control.","pos":[185279,185358]},{"pos":[187105,187125],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[187127,187294]},{"pos":[187344,187354],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[187356,187361]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[187364,187438]},{"pos":[187445,187457],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[187459,187587]},{"pos":[187593,187608],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[187610,187691]},{"pos":[187736,187746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[187748,187753]},{"content":"An Integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[187756,187834]},{"pos":[187841,187853],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[187855,187915]},{"pos":[187922,187929],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave, the dragOver, and the dragOverEx to specify the behavior.","pos":[187931,188007]},{"pos":[188013,188028],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Identifies when a user drags an object over an item within the bounds of a form list control.","pos":[188030,188123]},{"pos":[188217,188227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[188229,188239]},{"content":"An Integer data type that indicates the y-coordinate of the object's position.","pos":[188242,188320]},{"content":"dragMode","pos":[188332,188340]},{"content":"An Integer data type that indicates the y-coordinate of the object's position.","pos":[188343,188421]},{"content":"x","pos":[188433,188434]},{"content":"An Integer data type that indicates the y-coordinate of the object's position.","pos":[188437,188515]},{"content":"y","pos":[188527,188528]},{"content":"An Integer data type that indicates the y-coordinate of the object's position.","pos":[188531,188609]},{"pos":[188616,188628],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag system enumeration value that specifies whether the object is moved, copied, or not moved to a specified position.","pos":[188630,188755]},{"pos":[188762,188769],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called only if the DragDrop property is set to Manual for the control and a beginDrag event has already been started.","pos":[188771,188903]},{"content":"For more information about the event, see beginDrag.","pos":[188904,188956]},{"content":"To override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click dragOver.","pos":[188957,189103]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[189104,189182]},{"pos":[189188,189205],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[189207,189303]},{"pos":[189393,189403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[189405,189415]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[189418,189503]},{"content":"dragMode","pos":[189515,189523]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[189526,189611]},{"content":"x","pos":[189623,189624]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[189627,189712]},{"content":"y","pos":[189724,189725]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[189728,189813]},{"pos":[189820,189832],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[189834,189899]},{"pos":[189905,189920],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when a user drags an item in a form list control.","pos":[189922,190008]},{"pos":[190042,190054],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A String data type value that specifies the text that is displayed when a user drags a form list control.","pos":[190056,190161]},{"pos":[190168,190175],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click dragText.","pos":[190177,190323]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[190324,190402]},{"pos":[190408,190425],"content":"Method editLabels","linkify":"Method editLabels","nodes":[{"content":"Method editLabels","pos":[0,17]}]},{"content":"Indicates whether users can modify item names in a form list control.","pos":[190427,190496]},{"pos":[190551,190561],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190563,190568]},{"content":"A Boolean data type that specifies whether users can modify item names in a form list control.","pos":[190571,190665]},{"pos":[190672,190684],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if users can modify item names; otherwise, false.","pos":[190686,190740]},{"pos":[190747,190754],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must call the editLabels method before you add columns to a form list control; otherwise, the columns do not appear in the control.","pos":[190756,190891]},{"pos":[190898,190906],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the editLabels method to enable users to modify item names in the form list control.","pos":[190908,191030]},{"content":"The DictField.label method returns a label for a specified table field that is added as an item to the form list control.","pos":[191031,191152]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[191153,191271]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[191272,191379]},{"pos":[193879,193893],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[193895,193946]},{"pos":[193998,194008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194010,194015]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[194018,194090]},{"pos":[194097,194109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[194111,194159]},{"pos":[194166,194173],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[194175,194250]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[194251,194346]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[194347,194481]},{"pos":[194487,194507],"content":"Method ensureVisible","linkify":"Method ensureVisible","nodes":[{"content":"Method ensureVisible","pos":[0,20]}]},{"pos":[194553,194563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[194565,194568]},{"pos":[194577,194589],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194595,194606],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[194608,194665]},{"pos":[194706,194716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194718,194723]},{"pos":[194732,194744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[194746,194801]},{"pos":[194807,194822],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[194824,194881]},{"pos":[194926,194936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194938,194943]},{"pos":[194952,194964],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[194966,194999]},{"pos":[195005,195027],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control.","pos":[195029,195073]},{"pos":[195125,195135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195137,195142]},{"content":"An Integer data type that specifies the foreground color.","pos":[195145,195202]},{"pos":[195209,195221],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[195223,195267]},{"pos":[195274,195281],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[195283,195351]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[195357,195427]},{"content":"The second byte contains a value for green.","pos":[195432,195475]},{"content":"The third byte contains a value for blue.","pos":[195480,195521]},{"content":"The high-order byte must be 0 (zero).","pos":[195526,195563]},{"content":"The maximum value for a single byte is 255.","pos":[195568,195611]},{"pos":[195618,195626],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the foregroundColor method to set the foreground color to the color of the menu text on the desktop.","pos":[195628,195766]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[195767,195885]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[195886,195993]},{"pos":[198312,198328],"content":"Method getColumn","linkify":"Method getColumn","nodes":[{"content":"Method getColumn","pos":[0,16]}]},{"content":"Retrieves a FormListColumn object for a specified column in a form list control.","pos":[198330,198410]},{"pos":[198463,198473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[198475,198478]},{"content":"An Integer data type that specifies a column in a form list control.","pos":[198481,198549]},{"pos":[198556,198568],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormListColumn object for a specified column in a form list control.","pos":[198570,198640]},{"pos":[198647,198654],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value.","pos":[198656,198802]},{"pos":[198809,198817],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the getColumn method to return a FormListColumn object for the column in the form list control.","pos":[198819,198952]},{"content":"The FormListControl.addColumn method adds the column to the form list control.","pos":[198953,199031]},{"pos":[200802,200823],"content":"Method getColumnCount","linkify":"Method getColumnCount","nodes":[{"content":"Method getColumnCount","pos":[0,21]}]},{"content":"Retrieves the number of columns in a form list control.","pos":[200825,200880]},{"pos":[200920,200932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that specifies the number of columns in a form list control.","pos":[200934,201021]},{"pos":[201028,201035],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To display columns in a form list control, call the FormListControl.viewType method and then pass the FormListViewType::Report enumeration value.","pos":[201037,201182]},{"pos":[201189,201197],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the getColumnCount method to return the number of columns in the form list control.","pos":[201199,201320]},{"content":"The FormListControl.addColumn method adds the column to the form list control.","pos":[201321,201399]},{"pos":[203040,203061],"content":"Method getColumnWidth","linkify":"Method getColumnWidth","nodes":[{"content":"Method getColumnWidth","pos":[0,21]}]},{"content":"Retrieves the width of a column in a form list control.","pos":[203063,203118]},{"pos":[203165,203175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[203177,203180]},{"content":"An Integer data type that specifies a column in a form list control.","pos":[203183,203251]},{"pos":[203258,203270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type that specifies the width of a column in a form list control.","pos":[203272,203353]},{"pos":[203360,203367],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value.","pos":[203369,203515]},{"pos":[203522,203530],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the getColumnWidth method to return the width of a column in the form list control.","pos":[203532,203653]},{"content":"The FormListControl.setColumnWidth method specifies the column width.","pos":[203654,203723]},{"content":"The FormListControl.addColumn method adds the column to the form list control.","pos":[203724,203802]},{"pos":[205557,205572],"content":"Method getCount","linkify":"Method getCount","nodes":[{"content":"Method getCount","pos":[0,15]}]},{"content":"Retrieves the number of items that are contained in a form list control.","pos":[205574,205646]},{"pos":[205680,205692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that specifies the number of items that are contained in a form list control.","pos":[205694,205798]},{"pos":[205805,205813],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the getCount method.","pos":[205815,205873]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[205874,205992]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[205993,206100]},{"pos":[208079,208101],"content":"Method getCountPerPage","linkify":"Method getCountPerPage","nodes":[{"content":"Method getCountPerPage","pos":[0,22]}]},{"pos":[208142,208154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208160,208179],"content":"Method getImagelist","linkify":"Method getImagelist","nodes":[{"content":"Method getImagelist","pos":[0,19]}]},{"pos":[208241,208251],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"GetLarge","pos":[208253,208261]},{"pos":[208270,208282],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208288,208302],"content":"Method getItem","linkify":"Method getItem","nodes":[{"content":"Method getItem","pos":[0,14]}]},{"content":"Retrieves a FormListItem object for an item in a form list control.","pos":[208304,208371]},{"pos":[208435,208445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[208447,208450]},{"content":"An Integer data type that specifies a sub-item in a form list control.","pos":[208453,208523]},{"content":"SubItem","pos":[208535,208542]},{"content":"An Integer data type that specifies a sub-item in a form list control.","pos":[208545,208615]},{"pos":[208622,208634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormListItem object for an item in a form list control.","pos":[208636,208693]},{"pos":[208700,208708],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the getItem method to return a FormListItem object for each item in the form list control.","pos":[208710,208838]},{"content":"The FormListItem.toString method returns a text string for each item.","pos":[208839,208908]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[208909,209027]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[209028,209135]},{"pos":[211213,211230],"content":"Method getItemPos","linkify":"Method getItemPos","nodes":[{"content":"Method getItemPos","pos":[0,17]}]},{"content":"Retrieves the position of an item in a form list control.","pos":[211232,211289]},{"pos":[211339,211349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Item","pos":[211351,211355]},{"content":"An Integer data type that specifies an item in a form list control.","pos":[211358,211425]},{"pos":[211432,211444],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Container data type that contains the position of an item in a form list control.","pos":[211446,211529]},{"content":"The position of an item is specified by an x-coordinate and a y-coordinate.","pos":[211530,211605]},{"pos":[211612,211619],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the conPeek function to extract an item from a container.","pos":[211621,211682]},{"pos":[211689,211697],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the getItemPos method to return the position of each item in the form list control.","pos":[211699,211820]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[211821,211939]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[211940,212047]},{"pos":[214290,214308],"content":"Method getNextItem","linkify":"Method getNextItem","nodes":[{"content":"Method getNextItem","pos":[0,18]}]},{"content":"Retrieves the number of the next item in a form list control.","pos":[214310,214371]},{"pos":[214445,214455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"nextType","pos":[214457,214465]},{"content":"An Integer data type that specifies the item that is before the next item.","pos":[214468,214542]},{"content":"startIdx","pos":[214554,214562]},{"content":"An Integer data type that specifies the item that is before the next item.","pos":[214565,214639]},{"pos":[214646,214658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that indicates which item is the next item in a form list control.","pos":[214660,214753]},{"pos":[214760,214768],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the getNextItem method to retrieve the number of the next item in the form list control.","pos":[214770,214896]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[214897,215015]},{"content":"The items in the variable are added to the form list control.","pos":[215016,215077]},{"pos":[217044,217067],"content":"Method getSelectedCount","linkify":"Method getSelectedCount","nodes":[{"content":"Method getSelectedCount","pos":[0,23]}]},{"content":"Retrieves the number of items that are selected in a form list control.","pos":[217069,217140]},{"pos":[217182,217194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that indicates the number of items that are selected in a form list control.","pos":[217196,217299]},{"pos":[217306,217314],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the getSelectedCount method to return the number of items that are selected in the form list control.","pos":[217316,217455]},{"content":"The FormListControl.singleSelection method indicates whether multiple items can be selected.","pos":[217456,217548]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[217549,217667]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[217668,217775]},{"pos":[220165,220186],"content":"Method getStringWidth","linkify":"Method getStringWidth","nodes":[{"content":"Method getStringWidth","pos":[0,21]}]},{"pos":[220234,220244],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Text","pos":[220246,220250]},{"pos":[220259,220271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[220277,220295],"content":"Method getTopIndex","linkify":"Method getTopIndex","nodes":[{"content":"Method getTopIndex","pos":[0,18]}]},{"pos":[220332,220344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[220350,220366],"content":"Method gridLines","linkify":"Method gridLines","nodes":[{"content":"Method gridLines","pos":[0,16]}]},{"pos":[220420,220430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[220432,220437]},{"pos":[220446,220458],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[220464,220481],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[220483,220571]},{"pos":[220624,220634],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[220636,220639]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[220642,220712]},{"pos":[220719,220731],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[220733,220800]},{"pos":[220806,220827],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[220829,220884]},{"pos":[220928,220940],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[220942,221005]},{"pos":[221011,221032],"content":"Method headerdragdrop","linkify":"Method headerdragdrop","nodes":[{"content":"Method headerdragdrop","pos":[0,21]}]},{"pos":[221091,221101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221103,221108]},{"pos":[221117,221129],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[221135,221148],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[221150,221189]},{"pos":[221242,221252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[221254,221259]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[221262,221327]},{"content":"This can be one of the following values:","pos":[221328,221368]},{"content":"mode","pos":[221380,221384]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[221387,221452]},{"content":"This can be one of the following values:","pos":[221453,221493]},{"pos":[221500,221512],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[221514,221550]},{"pos":[221557,221564],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[221566,221619]},{"content":"Calculate the height according to the following table.","pos":[221620,221674]},{"content":"Mode","pos":[221678,221682]},{"content":"Height calculation","pos":[221698,221716]},{"content":"-1 – Exact","pos":[221908,221918]},{"content":"The exact height of the control in pixels is used.","pos":[221928,221978]},{"content":"0 – Auto","pos":[222023,222031]},{"content":"The height of the control is calculated automatically, and the value parameter is ignored.","pos":[222043,222133]},{"content":"1 – Column height","pos":[222138,222155]},{"content":"The layout of the form determines the height of the control.","pos":[222158,222218]},{"content":"The height and the height calculation mode can be set separately.","pos":[222252,222317]},{"pos":[222324,222332],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the height method to the set the height of the control to 120 pixels.","pos":[222334,222441]},{"pos":[223755,223772],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[223774,223836]},{"pos":[223883,223893],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[223895,223900]},{"content":"An integer that indicates how the height of the control is calculated; optional.","pos":[223903,223983]},{"content":"This value can be -1 for Exact mode, 0 for Auto mode, or 1 for Column height width.","pos":[223984,224067]},{"pos":[224074,224086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height calculation mode.","pos":[224088,224116]},{"pos":[224123,224130],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[224132,224186]},{"content":"Mode","pos":[224190,224194]},{"content":"Height calculation","pos":[224206,224224]},{"content":"Exact","pos":[224412,224417]},{"content":"The exact height of the control in pixels is used.","pos":[224428,224478]},{"content":"Auto","pos":[224523,224527]},{"content":"The height of the control is calculated automatically, and the value parameter is ignored.","pos":[224539,224629]},{"content":"Column height","pos":[224634,224647]},{"content":"The layout of the form determines the height of the control.","pos":[224650,224710]},{"content":"The height of the control might change when the calculation mode is set to Auto or Column height.","pos":[224744,224841]},{"pos":[224848,224856],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the heightMode method to adjust the height of the control, based on an exact pixel value.","pos":[224858,224985]},{"pos":[226342,226360],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[226362,226401]},{"pos":[226449,226459],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[226461,226466]},{"content":"An Integer data type that specifies the height in pixels.","pos":[226469,226526]},{"pos":[226533,226545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[226547,226568]},{"pos":[226575,226582],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the Exact height calculation mode is used.","pos":[226584,226674]},{"pos":[226681,226689],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the heightValue method that sets the height to 120 pixels.","pos":[226691,226787]},{"pos":[228144,228160],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[228162,228202]},{"pos":[228237,228249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[228251,228339]},{"pos":[228346,228353],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[228355,228425]},{"content":"Use the helpText method to set the value of the Help text.","pos":[228426,228484]},{"pos":[228490,228505],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[228507,228611]},{"pos":[228656,228666],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[228668,228673]},{"content":"The value that is assigned as the Help text for the control.","pos":[228676,228736]},{"pos":[228743,228755],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[228757,228812]},{"pos":[228819,228826],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[228828,228896]},{"content":"The Help text must not exceed 250 characters.","pos":[228897,228942]},{"pos":[228948,228970],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[228972,229035]},{"pos":[229087,229097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[229099,229104]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[229107,229174]},{"pos":[229181,229193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[229195,229245]},{"pos":[229251,229265],"content":"Method hitTest","linkify":"Method hitTest","nodes":[{"content":"Method hitTest","pos":[0,14]}]},{"pos":[229316,229326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[229328,229329]},{"content":"y","pos":[229343,229344]},{"pos":[229353,229365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[229371,229392],"content":"Method hitTestSubItem","linkify":"Method hitTestSubItem","nodes":[{"content":"Method hitTestSubItem","pos":[0,21]}]},{"pos":[229450,229460],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[229462,229463]},{"content":"y","pos":[229477,229478]},{"pos":[229487,229499],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[229505,229516],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[229518,229563]},{"pos":[229593,229605],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[229607,229634]},{"pos":[229641,229648],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[229650,229694]},{"pos":[229700,229718],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[229759,229771],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[229777,229795],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[229797,229863]},{"pos":[229904,229916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[229918,229969]},{"pos":[229976,229983],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[229985,230053]},{"pos":[230059,230078],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[230080,230147]},{"pos":[230189,230201],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[230203,230255]},{"pos":[230261,230286],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Gets a value that indicates whether the control allows for the specified level of customization.","pos":[230288,230384]},{"pos":[230453,230463],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[230465,230482]},{"content":"A FormAllowUserSetup enumeration value that specifies the level of customization that is being queried for the control.","pos":[230485,230604]},{"pos":[230611,230623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[230625,230784]},{"pos":[230791,230798],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[230800,230989]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[230990,231067]},{"content":"FormAllowUserSetup::No 0","pos":[231407,231431]},{"content":"No changes can be made to the control.","pos":[231442,231480]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[231481,231570]},{"content":"FormAllowUserSetup::Restricted 1","pos":[231575,231607]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[231610,231702]},{"content":"The user cannot move the control.","pos":[231703,231736]},{"content":"FormAllowUserSetup::Yes 2","pos":[231743,231768]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[231778,231870]},{"content":"The user can also move the control.","pos":[231871,231906]},{"pos":[231915,231923],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to determine the user setup rights for a control.","pos":[231925,232006]},{"pos":[232620,232633],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[232684,232694],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[232696,232701]},{"pos":[232710,232722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[232728,232744],"content":"Method itemAlign","linkify":"Method itemAlign","nodes":[{"content":"Method itemAlign","pos":[0,16]}]},{"pos":[232790,232800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[232802,232807]},{"pos":[232816,232828],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[232834,232853],"content":"Method itemChanging","linkify":"Method itemChanging","nodes":[{"content":"Method itemChanging","pos":[0,19]}]},{"pos":[232916,232926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[232928,232931]},{"content":"Data","pos":[232945,232949]},{"pos":[232958,232970],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[232976,232990],"content":"Method keyDown","linkify":"Method keyDown","nodes":[{"content":"Method keyDown","pos":[0,14]}]},{"pos":[233064,233074],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"vKey","pos":[233076,233080]},{"content":"Ctrl","pos":[233094,233098]},{"content":"Shift","pos":[233112,233117]},{"pos":[233126,233138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[233144,233156],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"content":"Identifies when a user moves focus away from a form list control.","pos":[233158,233223]},{"pos":[233258,233270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if focus is moved away from the control; otherwise, false.","pos":[233272,233335]},{"pos":[233342,233349],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click leave.","pos":[233351,233494]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[233495,233573]},{"pos":[233579,233590],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Sets or returns the horizontal position of a form list control in pixels, and specifies how the position is calculated.","pos":[233592,233711]},{"pos":[233762,233772],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[233774,233779]},{"content":"An integer that indicates how the position is calculated; optional.","pos":[233782,233849]},{"content":"This can be one of the following values:","pos":[233850,233890]},{"content":"mode","pos":[233902,233906]},{"content":"An integer that indicates how the position is calculated; optional.","pos":[233909,233976]},{"content":"This can be one of the following values:","pos":[233977,234017]},{"pos":[234024,234036],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates the horizontal position of a form list control in pixels.","pos":[234038,234121]},{"pos":[234128,234136],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the left method that sets the horizontal position to 50 pixels.","pos":[234138,234239]},{"pos":[235512,235527],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets or returns a value that indicates how the horizontal position of a form list control is calculated.","pos":[235529,235633]},{"pos":[235678,235688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235690,235695]},{"content":"An integer that indicates how the horizontal position is calculated; optional.","pos":[235698,235776]},{"pos":[235783,235795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates how the horizontal position is calculated.","pos":[235797,235865]},{"content":"The return value can be -1 or a FormLeft enumeration value.","pos":[235866,235925]},{"pos":[235932,235939],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The value parameter and the return value are integer values that specify how the horizontal position is calculated.","pos":[235941,236056]},{"content":"This value can be either -1 for an exact pixel value or a FormLeft enumeration value.","pos":[236057,236142]},{"content":"For more information, see FormLeft Enumeration.","pos":[236143,236190]},{"pos":[236197,236205],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the leftMode method that calculates the horizontal position of a form list control, based on an exact pixel value.","pos":[236207,236359]},{"pos":[237675,237691],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Sets or returns the horizontal position of a form list control in pixels.","pos":[237693,237766]},{"pos":[237812,237822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237824,237829]},{"content":"An integer that indicates the horizontal position in pixels; optional.","pos":[237832,237902]},{"pos":[237909,237921],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates the horizontal position in pixels.","pos":[237923,237983]},{"pos":[237990,237997],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The horizontal position is not changed unless the left mode is set for an exact pixel value.","pos":[237999,238091]},{"content":"For more information, see leftMode.","pos":[238092,238127]},{"pos":[238134,238142],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the leftValue method that sets the horizontal position to 100 pixels.","pos":[238144,238251]},{"pos":[239604,239624],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[239626,239679]},{"pos":[239737,239747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[239749,239754]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[239757,239851]},{"pos":[239858,239870],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[239872,239945]},{"pos":[239951,239971],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[239973,240030]},{"pos":[240122,240132],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[240134,240135]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[240138,240199]},{"content":"y","pos":[240211,240212]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[240215,240276]},{"content":"button","pos":[240288,240294]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[240297,240358]},{"content":"Ctrl","pos":[240370,240374]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[240377,240438]},{"content":"Shift","pos":[240450,240455]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[240458,240519]},{"pos":[240526,240538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[240540,240579]},{"pos":[240586,240593],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[240595,240699]},{"pos":[240705,240721],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[240723,240788]},{"pos":[240876,240886],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[240888,240889]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[240892,240953]},{"content":"y","pos":[240965,240966]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[240969,241030]},{"content":"button","pos":[241042,241048]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[241051,241112]},{"content":"Ctrl","pos":[241124,241128]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[241131,241192]},{"content":"Shift","pos":[241204,241209]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[241212,241273]},{"pos":[241280,241292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[241294,241333]},{"pos":[241340,241347],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[241349,241453]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[241454,241589]},{"pos":[241595,241611],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[241613,241678]},{"pos":[241766,241776],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[241778,241779]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[241782,241843]},{"content":"y","pos":[241855,241856]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[241859,241920]},{"content":"button","pos":[241932,241938]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[241941,242002]},{"content":"Ctrl","pos":[242014,242018]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[242021,242082]},{"content":"Shift","pos":[242094,242099]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[242102,242163]},{"pos":[242170,242182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[242184,242223]},{"pos":[242230,242237],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[242239,242343]},{"pos":[242349,242363],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Identifies when a user presses the left mouse button.","pos":[242365,242418]},{"pos":[242504,242514],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[242516,242517]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[242520,242581]},{"content":"y","pos":[242593,242594]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[242597,242658]},{"content":"button","pos":[242670,242676]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[242679,242740]},{"content":"Ctrl","pos":[242752,242756]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[242759,242820]},{"content":"Shift","pos":[242832,242837]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[242840,242901]},{"pos":[242908,242920],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[242922,242961]},{"pos":[242968,242975],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click mouseUp.","pos":[242977,243122]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[243123,243201]},{"pos":[243207,243222],"content":"Method moveItem","linkify":"Method moveItem","nodes":[{"content":"Method moveItem","pos":[0,15]}]},{"content":"Moves a specified item in a form list control.","pos":[243224,243270]},{"pos":[243326,243336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Item","pos":[243338,243342]},{"content":"An Integer data type that specifies the position in the list that the item is moved to.","pos":[243345,243432]},{"content":"InsertAt","pos":[243444,243452]},{"content":"An Integer data type that specifies the position in the list that the item is moved to.","pos":[243455,243542]},{"pos":[243549,243561],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type that specifies the position in the list that the item is moved to.","pos":[243563,243650]},{"pos":[243657,243665],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the moveItem method to move an item to the tenth position in the form list control.","pos":[243667,243788]},{"content":"The FormListControl.getCount method returns the number of items in the control.","pos":[243789,243868]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[243869,243987]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[243988,244095]},{"pos":[246417,246428],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[246430,246565]},{"pos":[246606,246616],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[246618,246623]},{"content":"The name to assign to the control; optional.","pos":[246626,246670]},{"pos":[246677,246689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[246691,246755]},{"pos":[246762,246769],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[246771,246865]},{"content":"It must start with a letter.","pos":[246871,246899]},{"content":"It cannot exceed 250 characters.","pos":[246904,246936]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[246941,246995],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[247000,247040]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[247045,247155]},{"pos":[247161,247184],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[247237,247247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[247249,247254]},{"pos":[247263,247275],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247281,247304],"content":"Method oneClickActivate","linkify":"Method oneClickActivate","nodes":[{"content":"Method oneClickActivate","pos":[0,23]}]},{"pos":[247365,247375],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[247377,247382]},{"pos":[247391,247403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247409,247436],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[247488,247500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247506,247526],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[247528,247573]},{"pos":[247620,247632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[247634,247669]},{"pos":[247675,247693],"content":"Method redrawItems","linkify":"Method redrawItems","nodes":[{"content":"Method redrawItems","pos":[0,18]}]},{"content":"Updates a range of items in a form list control.","pos":[247695,247743]},{"pos":[247809,247819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"idxFirst","pos":[247821,247829]},{"content":"An Integer data type that specifies the zero-based index for the last item in the range.","pos":[247832,247920]},{"content":"idxLast","pos":[247932,247939]},{"content":"An Integer data type that specifies the zero-based index for the last item in the range.","pos":[247942,248030]},{"pos":[248037,248049],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the items are updated; otherwise, false.","pos":[248051,248099]},{"pos":[248106,248114],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the redrawItems method to update a range of items in the form list control.","pos":[248116,248229]},{"content":"The FormListControl.moveItem method moves a specified item.","pos":[248230,248289]},{"content":"The FormListControl.getCount method retrieves the number of items in the control.","pos":[248290,248371]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[248372,248490]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[248491,248598]},{"pos":[250960,250976],"content":"Method rowSelect","linkify":"Method rowSelect","nodes":[{"content":"Method rowSelect","pos":[0,16]}]},{"content":"Sets or gets a Boolean data type value that indicates whether a row in a form list control is selected when the row is clicked.","pos":[250978,251105]},{"pos":[251159,251169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[251171,251176]},{"content":"A Boolean data type that indicates whether a row in a form list control is selected when the row is clicked.","pos":[251179,251287]},{"pos":[251294,251306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the row in a form list control is selected; otherwise, false.","pos":[251308,251377]},{"pos":[251384,251392],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the rowSelect method to specify that a row in the form list control is selected when the row is clicked.","pos":[251394,251536]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[251537,251655]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[251656,251763]},{"content":"The columns are added to the form list control by calling the FormListControl.addItem method.","pos":[251764,251857]},{"pos":[254307,254320],"content":"Method scroll","linkify":"Method scroll","nodes":[{"content":"Method scroll","pos":[0,13]}]},{"pos":[254370,254380],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dx","pos":[254382,254384]},{"content":"dy","pos":[254398,254400]},{"pos":[254409,254421],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[254427,254445],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[254447,254506]},{"pos":[254574,254584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[254586,254591]},{"content":"The ID of the security key to assign to the control; optional.","pos":[254594,254656]},{"pos":[254663,254675],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[254677,254776]},{"pos":[254782,254806],"content":"Method selectionChanging","linkify":"Method selectionChanging","nodes":[{"content":"Method selectionChanging","pos":[0,24]}]},{"pos":[254874,254884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[254886,254889]},{"content":"Data","pos":[254903,254907]},{"pos":[254916,254928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[254934,254950],"content":"Method setColumn","linkify":"Method setColumn","nodes":[{"content":"Method setColumn","pos":[0,16]}]},{"pos":[255019,255029],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[255031,255034]},{"content":"Column","pos":[255048,255054]},{"pos":[255063,255075],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[255081,255102],"content":"Method setColumnWidth","linkify":"Method setColumnWidth","nodes":[{"content":"Method setColumnWidth","pos":[0,21]}]},{"content":"Specifies the width of a column in a form list control.","pos":[255104,255159]},{"pos":[255221,255231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[255233,255236]},{"content":"An Integer data type that specifies the width of the column in a form list control.","pos":[255239,255322]},{"content":"Width","pos":[255334,255339]},{"content":"An Integer data type that specifies the width of the column in a form list control.","pos":[255342,255425]},{"pos":[255432,255444],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the width is set; otherwise, false.","pos":[255446,255489]},{"pos":[255496,255503],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value.","pos":[255505,255651]},{"pos":[255658,255666],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the setColumnWidth method to specify the width of the column in the form list control.","pos":[255668,255792]},{"content":"The FormListControl.addColumn method adds the column to the form list control.","pos":[255793,255871]},{"pos":[257542,257556],"content":"Method setItem","linkify":"Method setItem","nodes":[{"content":"Method setItem","pos":[0,14]}]},{"content":"Indicates whether an item is contained in a form list control.","pos":[257558,257620]},{"pos":[257674,257684],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"item","pos":[257686,257690]},{"content":"A FormListItem object for an item in a form list control.","pos":[257693,257750]},{"pos":[257757,257769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if an item is contained in a form list control; otherwise, false.","pos":[257771,257841]},{"pos":[257848,257856],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the setItem method to determine whether each item is contained in the form list control.","pos":[257858,257984]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[257985,258103]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[258104,258211]},{"pos":[260218,260242],"content":"Method setStateImagelist","linkify":"Method setStateImagelist","nodes":[{"content":"Method setStateImagelist","pos":[0,24]}]},{"pos":[260310,260320],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"imageList","pos":[260322,260331]},{"pos":[260340,260352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260358,260380],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Identifies when a shortcut menu appears.","pos":[260382,260422]},{"pos":[260477,260487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[260489,260499]},{"content":"An Integer data type that specifies the menu handle.","pos":[260502,260554]},{"pos":[260561,260573],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type that specifies the menu handle.","pos":[260575,260627]},{"pos":[260634,260641],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click showContextMenu.","pos":[260643,260796]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[260797,260875]},{"pos":[260881,260901],"content":"Method showSelAlways","linkify":"Method showSelAlways","nodes":[{"content":"Method showSelAlways","pos":[0,20]}]},{"pos":[260959,260969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[260971,260976]},{"pos":[260985,260997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[261003,261025],"content":"Method singleSelection","linkify":"Method singleSelection","nodes":[{"content":"Method singleSelection","pos":[0,22]}]},{"content":"Indicates whether multiple items can be selected in a form list control.","pos":[261027,261099]},{"pos":[261159,261169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[261171,261176]},{"content":"A Boolean data type that indicates whether multiple items can be selected in a form list control.","pos":[261179,261276]},{"pos":[261283,261295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if multiple items cannot be selected; otherwise, false.","pos":[261297,261357]},{"pos":[261364,261371],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Call the singleSelection method before you add items to a form list control; otherwise, the items do not appear in the control.","pos":[261373,261500]},{"pos":[261507,261515],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the singleSelection method to specify that multiple items can be selected.","pos":[261517,261629]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[261630,261748]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[261749,261856]},{"pos":[264102,264113],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[264115,264242]},{"pos":[264291,264301],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264303,264308]},{"content":"A Boolean value to assign to the skip property of the control; optional.","pos":[264311,264383]},{"pos":[264390,264402],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[264404,264510]},{"pos":[264516,264527],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[264568,264578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264580,264585]},{"pos":[264594,264606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264612,264632],"content":"Method sortTextItems","linkify":"Method sortTextItems","nodes":[{"content":"Method sortTextItems","pos":[0,20]}]},{"pos":[264708,264718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"column","pos":[264720,264726]},{"content":"ascending","pos":[264740,264749]},{"pos":[264758,264770],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264776,264790],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[264792,264835]},{"pos":[264868,264880],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[264882,264984]},{"pos":[264991,264998],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[265000,265072]},{"pos":[265078,265088],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Sets or returns the vertical position of a form list control in pixels, and specifies how the position is calculated.","pos":[265090,265207]},{"pos":[265257,265267],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[265269,265274]},{"content":"An integer that indicates how the vertical position is calculated; optional.","pos":[265277,265353]},{"content":"This parameter can be one of the following values:","pos":[265354,265404]},{"content":"mode","pos":[265416,265420]},{"content":"An integer that indicates how the vertical position is calculated; optional.","pos":[265423,265499]},{"content":"This parameter can be one of the following values:","pos":[265500,265550]},{"pos":[265557,265569],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates the vertical position of a form list control in pixels.","pos":[265571,265652]},{"pos":[265659,265667],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the top method to set the vertical position to 50 pixels.","pos":[265669,265764]},{"pos":[267036,267050],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets or returns a value that indicates how the vertical position for a form list control is calculated.","pos":[267052,267155]},{"pos":[267199,267209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[267211,267216]},{"content":"An integer that indicates how the vertical position is calculated; optional.","pos":[267219,267295]},{"pos":[267302,267314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that indicates how the vertical position is calculated.","pos":[267316,267398]},{"content":"The return value can be -1 or a FormTop enumeration value.","pos":[267399,267457]},{"pos":[267464,267471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The value parameter and return value are integer values that can be either -1 for an exact pixel value or a FormTop enumeration value.","pos":[267473,267607]},{"content":"For more information, see FormTop Enumeration.","pos":[267608,267654]},{"pos":[267661,267669],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the topMode method that calculates the vertical position based on an exact pixel value.","pos":[267671,267796]},{"pos":[269108,269123],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Sets or returns the vertical position of a form list control in pixels.","pos":[269125,269196]},{"pos":[269241,269251],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[269253,269258]},{"content":"An integer that specifies the vertical position; optional.","pos":[269261,269319]},{"pos":[269326,269338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that specifies the vertical position of a form list control.","pos":[269340,269411]},{"pos":[269418,269425],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The vertical position is not changed unless the top mode is set for an exact pixel value.","pos":[269427,269516]},{"content":"For more information, see topMode.","pos":[269517,269551]},{"pos":[269558,269566],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the topValue method that sets the vertical position to 50 pixels.","pos":[269568,269671]},{"pos":[270983,271001],"content":"Method trackSelect","linkify":"Method trackSelect","nodes":[{"content":"Method trackSelect","pos":[0,18]}]},{"pos":[271057,271067],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[271069,271074]},{"pos":[271083,271095],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[271101,271124],"content":"Method twoClickActivate","linkify":"Method twoClickActivate","nodes":[{"content":"Method twoClickActivate","pos":[0,23]}]},{"pos":[271185,271195],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[271197,271202]},{"pos":[271211,271223],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[271229,271240],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[271281,271291],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[271293,271298]},{"pos":[271307,271319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[271325,271341],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the value of the underline property for the text in the control.","pos":[271343,271423]},{"pos":[271477,271487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[271489,271494]},{"content":"The value to assign to the underline property of the control; optional.","pos":[271497,271568]},{"pos":[271575,271587],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[271589,271653]},{"pos":[271659,271686],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[271750,271760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[271762,271766]},{"pos":[271775,271787],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[271793,271808],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[271810,271853]},{"pos":[271898,271908],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[271910,271915]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[271918,271990]},{"pos":[271997,272009],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[272011,272041]},{"pos":[272047,272066],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[272068,272116]},{"pos":[272165,272175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272177,272182]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[272185,272262]},{"pos":[272269,272281],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[272283,272318]},{"pos":[272324,272344],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[272346,272405]},{"pos":[272455,272465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272467,272472]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[272475,272563]},{"pos":[272570,272582],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[272584,272630]},{"pos":[272636,272654],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[272656,272739]},{"pos":[272787,272797],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272799,272804]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[272807,272887]},{"pos":[272894,272906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[272908,272964]},{"pos":[272970,272987],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[272989,273041]},{"pos":[273088,273098],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273100,273105]},{"content":"The user height for the control; optional.","pos":[273108,273150]},{"pos":[273157,273169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[273171,273210]},{"pos":[273216,273231],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[273233,273315]},{"pos":[273360,273370],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273372,273377]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[273380,273459]},{"pos":[273466,273478],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[273480,273535]},{"pos":[273542,273549],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[273551,273721]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[273722,273797]},{"content":"This method lets you programmatically determine and set the value.","pos":[273798,273864]},{"pos":[273870,273893],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[273895,273951]},{"pos":[274004,274014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274016,274021]},{"content":"The organization container to set for the control; optional.","pos":[274024,274084]},{"pos":[274091,274103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[274105,274148]},{"pos":[274154,274175],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[274177,274231]},{"pos":[274282,274292],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274294,274299]},{"content":"The organization sibling to set for the control; optional.","pos":[274302,274360]},{"pos":[274367,274379],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[274381,274422]},{"pos":[274428,274449],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[274451,274500]},{"pos":[274551,274561],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274563,274568]},{"content":"The user label text to set for the control; optional.","pos":[274571,274624]},{"pos":[274631,274643],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[274645,274681]},{"pos":[274687,274711],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[274713,274766]},{"pos":[274820,274830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274832,274837]},{"content":"The user security level to set for the control; optional.","pos":[274840,274897]},{"pos":[274904,274916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[274918,274958]},{"pos":[274964,274979],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[274981,275129]},{"pos":[275174,275184],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275186,275191]},{"content":"The value to assign to the userSkip property; optional.","pos":[275194,275249]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[275250,275332]},{"pos":[275339,275351],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[275353,275422]},{"pos":[275428,275444],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[275446,275523]},{"pos":[275569,275579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275581,275586]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[275589,275655]},{"pos":[275662,275674],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[275676,275805]},{"pos":[275812,275819],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[275821,275915]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[275916,276032],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[276033,276183]},{"pos":[276189,276211],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Sets or gets the amount of space above and below a form list control in pixels, and specifies how the space is calculated.","pos":[276213,276335]},{"pos":[276404,276414],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276416,276421]},{"content":"An AutoMode system enumeration value that indicates how the space is calculated; optional.","pos":[276424,276514]},{"content":"mode","pos":[276526,276530]},{"content":"An AutoMode system enumeration value that indicates how the space is calculated; optional.","pos":[276533,276623]},{"pos":[276630,276642],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates the amount of space above and below a control.","pos":[276644,276716]},{"pos":[276722,276748],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets or returns a value that indicates how the space above and below a form list control is calculated.","pos":[276750,276853]},{"pos":[276918,276928],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[276930,276934]},{"content":"An AutoMode system enumeration value that indicates how the space is calculated; optional.","pos":[276937,277027]},{"pos":[277034,277046],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Auto if the space is automatically adjusted based on other form settings, such as the font size; otherwise, Fixed.","pos":[277048,277162]},{"pos":[277168,277195],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Sets or returns the amount of space above and below a form list control in pixels.","pos":[277197,277279]},{"pos":[277336,277346],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277348,277353]},{"content":"An integer that indicates the amount of space above and below a control; optional.","pos":[277356,277438]},{"pos":[277445,277457],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that indicates the amount of space above and below a control.","pos":[277459,277531]},{"pos":[277537,277552],"content":"Method viewType","linkify":"Method viewType","nodes":[{"content":"Method viewType","pos":[0,15]}]},{"pos":[277597,277607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277609,277614]},{"pos":[277623,277635],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277641,277655],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[277657,277727]},{"pos":[277779,277789],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277791,277796]},{"content":"The value to be assigned to the visible setting for the control; optional.","pos":[277799,277873]},{"pos":[277880,277892],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[277894,277943]},{"pos":[277949,277961],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[277963,278001]},{"pos":[278053,278063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278065,278070]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[278073,278137]},{"content":"This parameter can be one of the following values:","pos":[278138,278188]},{"content":"mode","pos":[278200,278204]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[278207,278271]},{"content":"This parameter can be one of the following values:","pos":[278272,278322]},{"pos":[278329,278341],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[278343,278378]},{"pos":[278385,278392],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[278394,278447]},{"content":"Calculate the width according to the following table.","pos":[278448,278501]},{"content":"Mode","pos":[278505,278509]},{"content":"Width calculation","pos":[278524,278541]},{"content":"-1 – Exact","pos":[278731,278741]},{"content":"The exact width of the control in pixels is used.","pos":[278750,278799]},{"content":"0 – Auto","pos":[278844,278852]},{"content":"The width of the control is calculated automatically, and the value parameter is ignored.","pos":[278863,278952]},{"content":"1 – Column width","pos":[278957,278973]},{"content":"The layout of the form determines the width of the control.","pos":[278976,279035]},{"content":"The width and the width calculation mode can be set separately.","pos":[279069,279132]},{"pos":[279139,279147],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the width method to set the width of the control to 120 pixels.","pos":[279149,279250]},{"pos":[280525,280541],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[280543,280605]},{"pos":[280651,280661],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[280663,280668]},{"content":"An integer that indicates how the width of the control is calculated; optional.","pos":[280671,280750]},{"pos":[280757,280769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current width calculation mode.","pos":[280771,280838]},{"pos":[280845,280852],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[280854,280907]},{"content":"Mode","pos":[280911,280915]},{"content":"Width calculation","pos":[280926,280943]},{"content":"Exact","pos":[281129,281134]},{"content":"The exact width of the control in pixels is used.","pos":[281144,281193]},{"content":"Auto","pos":[281238,281242]},{"content":"The width of the control is calculated automatically, and the value parameter is ignored.","pos":[281253,281342]},{"content":"Column width","pos":[281347,281359]},{"content":"The layout of the form determines the width of the control.","pos":[281362,281421]},{"content":"The width of the control might change when the calculation mode is set to Auto or Column width.","pos":[281455,281550]},{"pos":[281557,281565],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the widthMode method to calculate the width of the control, based on an exact pixel value.","pos":[281567,281695]},{"pos":[283012,283029],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[283031,283069]},{"pos":[283116,283126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[283128,283133]},{"content":"An integer that specifies the width of the control in pixels; optional.","pos":[283136,283207]},{"pos":[283214,283226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[283228,283263]},{"pos":[283270,283277],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the Exact width calculation mode.","pos":[283279,283352]},{"pos":[283359,283367],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the widthValue method that sets the width of the control to 120 pixels.","pos":[283369,283478]},{"pos":[284795,284818],"content":"Method selectionChanged","linkify":"Method selectionChanged","nodes":[{"content":"Method selectionChanged","pos":[0,23]}]},{"pos":[284882,284892],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[284894,284897]},{"content":"Data","pos":[284911,284915]},{"pos":[284923,284942],"content":"Method activateItem","linkify":"Method activateItem","nodes":[{"content":"Method activateItem","pos":[0,19]}]},{"pos":[284988,284998],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[285000,285003]},{"pos":[285011,285029],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Identifies when the search begins for a specified text string.","pos":[285031,285093]},{"pos":[285144,285154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[285156,285165]},{"content":"A String data type that specifies a text string.","pos":[285168,285216]},{"pos":[285223,285230],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click inputSearch.","pos":[285232,285381]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[285382,285460]},{"pos":[285466,285487],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[285489,285510]},{"pos":[285550,285566],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[285649,285659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[285661,285667]},{"content":"e","pos":[285681,285682]},{"pos":[285690,285703],"content":"Method update","linkify":"Method update","nodes":[{"content":"Method update","pos":[0,13]}]},{"content":"Updates the control.","pos":[285705,285725]},{"pos":[285767,285777],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"idx","pos":[285779,285782]},{"pos":[285790,285804],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Identifies when the user has finished moving a form list control.","pos":[285806,285871]},{"pos":[285905,285912],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click endDrag.","pos":[285914,286059]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[286060,286138]},{"pos":[286144,286161],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[286163,286217]},{"pos":[286253,286272],"content":"Method setImagelist","linkify":"Method setImagelist","nodes":[{"content":"Method setImagelist","pos":[0,19]}]},{"pos":[286350,286360],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"imageList","pos":[286362,286371]},{"content":"SetLarge","pos":[286385,286393]},{"pos":[286401,286412],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Identifies when a user performs a copy operation.","pos":[286414,286463]},{"pos":[286494,286501],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click copy.","pos":[286503,286645]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[286646,286724]},{"pos":[286730,286743],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[286745,286845]},{"pos":[286927,286937],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[286939,286949]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[286952,287037]},{"content":"dragMode","pos":[287049,287057]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[287060,287145]},{"content":"x","pos":[287157,287158]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[287161,287246]},{"content":"y","pos":[287258,287259]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[287262,287347]},{"pos":[287353,287368],"content":"Method itemCopy","linkify":"Method itemCopy","nodes":[{"content":"Method itemCopy","pos":[0,15]}]},{"pos":[287422,287432],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[287434,287437]},{"content":"newIdx","pos":[287451,287457]},{"pos":[287465,287475],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Identifies when the user performs a cut operation.","pos":[287477,287527]},{"pos":[287557,287564],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click cut.","pos":[287566,287707]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[287708,287786]},{"pos":[287792,287808],"content":"Method itemMoved","linkify":"Method itemMoved","nodes":[{"content":"Method itemMoved","pos":[0,16]}]},{"pos":[287863,287873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[287875,287878]},{"content":"newIdx","pos":[287892,287898]},{"pos":[287906,287935],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[288053,288063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[288065,288081]},{"content":"objectMethodToCall","pos":[288095,288113]},{"content":"overrideObject","pos":[288127,288141]},{"pos":[288149,288161],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[288163,288217]},{"pos":[288248,288264],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[288266,288308]},{"pos":[288343,288368],"content":"Method OnSelectionChanged","linkify":"Method OnSelectionChanged","nodes":[{"content":"Method OnSelectionChanged","pos":[0,25]}]},{"pos":[288460,288470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[288472,288478]},{"content":"e","pos":[288492,288493]},{"pos":[288501,288520],"content":"Method hotTrackItem","linkify":"Method hotTrackItem","nodes":[{"content":"Method hotTrackItem","pos":[0,19]}]},{"content":"Identifies when a user moves the mouse pointer over a form list control.","pos":[288522,288594]},{"pos":[288640,288650],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[288652,288655]},{"content":"An Integer data type that specifies the index for a form list control.","pos":[288658,288728]},{"pos":[288735,288742],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click hotTrackItem.","pos":[288744,288894]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[288895,288973]},{"pos":[288979,288994],"content":"Method setCount","linkify":"Method setCount","nodes":[{"content":"Method setCount","pos":[0,15]}]},{"pos":[289038,289048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"count","pos":[289050,289055]},{"pos":[289063,289079],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Identifies when a user drags an object out of the bounds of a form list control.","pos":[289081,289161]},{"pos":[289197,289204],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click dragLeave.","pos":[289206,289353]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[289354,289432]},{"pos":[289438,289456],"content":"Method itemDeleted","linkify":"Method itemDeleted","nodes":[{"content":"Method itemDeleted","pos":[0,18]}]},{"pos":[289515,289525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[289527,289530]},{"content":"Data","pos":[289544,289548]},{"pos":[289556,289577],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[289579,289648]},{"pos":[289710,289720],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[289722,289727]},{"content":"The preferred height of the control.","pos":[289730,289766]},{"content":"height","pos":[289778,289784]},{"content":"The preferred height of the control.","pos":[289787,289823]},{"pos":[289829,289846],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[289930,289940],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[289942,289948]},{"content":"e","pos":[289962,289963]},{"pos":[289971,289985],"content":"Method setText","linkify":"Method setText","nodes":[{"content":"Method setText","pos":[0,14]}]},{"pos":[290051,290061],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[290063,290066]},{"content":"Text","pos":[290080,290084]},{"content":"SubItem","pos":[290098,290105]},{"pos":[290113,290131],"content":"Method itemChanged","linkify":"Method itemChanged","nodes":[{"content":"Method itemChanged","pos":[0,18]}]},{"pos":[290190,290200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[290202,290205]},{"content":"Data","pos":[290219,290223]},{"pos":[290231,290249],"content":"Method doubleClick","linkify":"Method doubleClick","nodes":[{"content":"Method doubleClick","pos":[0,18]}]},{"content":"Identifies when a user double-clicks an item in a form list control.","pos":[290251,290319]},{"pos":[290357,290364],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click doubleClick.","pos":[290366,290515]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[290516,290594]},{"pos":[290600,290623],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[290625,290666]},{"pos":[290708,290723],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[290725,290755]},{"pos":[290789,290806],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[290808,290878]},{"pos":[290968,290978],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[290980,290981]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[290984,291045]},{"content":"y","pos":[291057,291058]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291061,291122]},{"content":"button","pos":[291134,291140]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291143,291204]},{"content":"Ctrl","pos":[291216,291220]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291223,291284]},{"content":"Shift","pos":[291296,291301]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291304,291365]},{"pos":[291371,291393],"content":"Method allItemsDeleted","linkify":"Method allItemsDeleted","nodes":[{"content":"Method allItemsDeleted","pos":[0,22]}]},{"content":"Identifies when all the items in a form list control are deleted.","pos":[291395,291460]},{"pos":[291502,291509],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click allItemsDeleted.","pos":[291511,291664]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[291665,291743]},{"pos":[291749,291760],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Identifies when a user drops a form list control or an item in a form list control into a new position.","pos":[291762,291865]},{"pos":[291951,291961],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[291963,291973]},{"content":"An Integer data type that indicates the y-coordinate of the object's position.","pos":[291976,292054]},{"content":"dragMode","pos":[292066,292074]},{"content":"An Integer data type that indicates the y-coordinate of the object's position.","pos":[292077,292155]},{"content":"x","pos":[292167,292168]},{"content":"An Integer data type that indicates the y-coordinate of the object's position.","pos":[292171,292249]},{"content":"y","pos":[292261,292262]},{"content":"An Integer data type that indicates the y-coordinate of the object's position.","pos":[292265,292343]},{"pos":[292350,292357],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called only if the DragDrop property is set to Manual for the control and a beginDrag event has already been started.","pos":[292359,292491]},{"content":"For more information about the event, see beginDrag.","pos":[292492,292544]},{"content":"To override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click drop.","pos":[292545,292687]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[292688,292766]},{"pos":[292772,292792],"content":"Method columnClicked","linkify":"Method columnClicked","nodes":[{"content":"Method columnClicked","pos":[0,20]}]},{"content":"Identifies when a user clicks a column in a list view control in a form.","pos":[292794,292866]},{"pos":[292916,292926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Column","pos":[292928,292934]},{"content":"An Integer data type that specifies a form column.","pos":[292937,292987]},{"pos":[292994,293001],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method on a list view control, right-click the Methods node below the control, click Override Method, and then click columnClicked.","pos":[293003,293151]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[293152,293230]},{"pos":[293236,293260],"content":"Method getStateImagelist","linkify":"Method getStateImagelist","nodes":[{"content":"Method getStateImagelist","pos":[0,24]}]},{"pos":[293303,293321],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[293406,293416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[293418,293424]},{"content":"e","pos":[293438,293439]},{"pos":[293447,293464],"content":"Method setItemPos","linkify":"Method setItemPos","nodes":[{"content":"Method setItemPos","pos":[0,17]}]},{"content":"Sets the position of an item in a form list control.","pos":[293466,293518]},{"pos":[293577,293587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Item","pos":[293589,293593]},{"content":"An Integer data type that specifies the y-coordinate of the position of an item.","pos":[293596,293676]},{"content":"x","pos":[293688,293689]},{"content":"An Integer data type that specifies the y-coordinate of the position of an item.","pos":[293692,293772]},{"content":"y","pos":[293784,293785]},{"content":"An Integer data type that specifies the y-coordinate of the position of an item.","pos":[293788,293868]},{"pos":[293875,293883],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the setItemPos method to specify the position of each item in the form list control.","pos":[293885,294007]},{"content":"The while select statement retrieves account numbers from the CustTable table and then stores the data in a container.","pos":[294008,294126]},{"content":"The items in the variable are added to the form list control by calling the FormListControl.addItem method.","pos":[294127,294234]},{"pos":[296193,296208],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[296210,296256]},{"pos":[296290,296302],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[296333,296347],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[296428,296438],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[296440,296446]},{"content":"e","pos":[296460,296461]},{"pos":[296469,296483],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Identifies when the user opens a shortcut menu in a form list control.","pos":[296485,296555]},{"pos":[296589,296596],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click context.","pos":[296598,296743]},{"content":"For information about best practices for forms and code, see No Code in Forms.","pos":[296744,296822]},{"pos":[296828,296849],"content":"Method beginEditLabel","linkify":"Method beginEditLabel","nodes":[{"content":"Method beginEditLabel","pos":[0,21]}]},{"pos":[296897,296907],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[296909,296912]},{"pos":[296920,296939],"content":"Method itemInserted","linkify":"Method itemInserted","nodes":[{"content":"Method itemInserted","pos":[0,19]}]},{"pos":[296999,297009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Idx","pos":[297011,297014]},{"content":"Data","pos":[297028,297032]},{"pos":[297039,297057],"content":"Class FormListItem","linkify":"Class FormListItem","nodes":[{"content":"Class FormListItem","pos":[0,18]}]},{"pos":[297101,297108],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[297114,297122],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[297128,297135],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[297139,297145]},{"content":"Description","pos":[297204,297215]},{"content":"public AnyType data(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[297383,297421],"source":"public AnyType data(\\[AnyType value\\])"},{"content":"public int idx(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[297505,297534],"source":"public int idx(\\[int value\\])"},{"content":"public int image(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[297627,297658],"source":"public int image(\\[int value\\])"},{"content":"public int indent(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[297749,297781],"source":"public int indent(\\[int value\\])"},{"content":"public int overlayImage(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[297871,297909],"source":"public int overlayImage(\\[int value\\])"},{"content":"public boolean stateChecked(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[297993,298039],"source":"public boolean stateChecked(\\[boolean value\\])"},{"content":"public boolean stateCut(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[298115,298157],"source":"public boolean stateCut(\\[boolean value\\])"},{"content":"public boolean stateDropHilited(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[298237,298287],"source":"public boolean stateDropHilited(\\[boolean value\\])"},{"content":"public boolean stateFocus(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[298359,298403],"source":"public boolean stateFocus(\\[boolean value\\])"},{"content":"public int stateImage(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[298481,298517],"source":"public int stateImage(\\[int value\\])"},{"content":"public boolean stateSelected(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[298603,298650],"source":"public boolean stateSelected(\\[boolean value\\])"},{"content":"public int subItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[298725,298758],"source":"public int subItem(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[298847,298877],"source":"public str text(\\[str value\\])"},{"content":"public str toString()","pos":[298969,298990]},{"content":"Returns a string that represents the current object.","pos":[299034,299086]},{"content":"public void finalize()","pos":[299091,299113]},{"content":"public void new(<ph id=\"ph1\">\\[</ph>str Text<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int Image<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>AnyType Data<ph id=\"ph6\">\\]</ph>)","pos":[299213,299275],"source":"public void new(\\[str Text\\], \\[int Image\\], \\[AnyType Data\\])"},{"content":"Initializes a new instance of the Object class.","pos":[299278,299325]},{"pos":[299338,299349],"content":"Method data","linkify":"Method data","nodes":[{"content":"Method data","pos":[0,11]}]},{"pos":[299398,299408],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299410,299415]},{"pos":[299424,299436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[299442,299452],"content":"Method idx","linkify":"Method idx","nodes":[{"content":"Method idx","pos":[0,10]}]},{"pos":[299492,299502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299504,299509]},{"pos":[299518,299530],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[299536,299548],"content":"Method image","linkify":"Method image","nodes":[{"content":"Method image","pos":[0,12]}]},{"pos":[299590,299600],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299602,299607]},{"pos":[299616,299628],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[299634,299647],"content":"Method indent","linkify":"Method indent","nodes":[{"content":"Method indent","pos":[0,13]}]},{"pos":[299690,299700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299702,299707]},{"pos":[299716,299728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[299734,299753],"content":"Method overlayImage","linkify":"Method overlayImage","nodes":[{"content":"Method overlayImage","pos":[0,19]}]},{"pos":[299802,299812],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299814,299819]},{"pos":[299828,299840],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[299846,299865],"content":"Method stateChecked","linkify":"Method stateChecked","nodes":[{"content":"Method stateChecked","pos":[0,19]}]},{"pos":[299922,299932],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299934,299939]},{"pos":[299948,299960],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[299966,299981],"content":"Method stateCut","linkify":"Method stateCut","nodes":[{"content":"Method stateCut","pos":[0,15]}]},{"pos":[300034,300044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300046,300051]},{"pos":[300060,300072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300078,300101],"content":"Method stateDropHilited","linkify":"Method stateDropHilited","nodes":[{"content":"Method stateDropHilited","pos":[0,23]}]},{"pos":[300162,300172],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300174,300179]},{"pos":[300188,300200],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300206,300223],"content":"Method stateFocus","linkify":"Method stateFocus","nodes":[{"content":"Method stateFocus","pos":[0,17]}]},{"pos":[300278,300288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300290,300295]},{"pos":[300304,300316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300322,300339],"content":"Method stateImage","linkify":"Method stateImage","nodes":[{"content":"Method stateImage","pos":[0,17]}]},{"pos":[300386,300396],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300398,300403]},{"pos":[300412,300424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300430,300450],"content":"Method stateSelected","linkify":"Method stateSelected","nodes":[{"content":"Method stateSelected","pos":[0,20]}]},{"pos":[300508,300518],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300520,300525]},{"pos":[300534,300546],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300552,300566],"content":"Method subItem","linkify":"Method subItem","nodes":[{"content":"Method subItem","pos":[0,14]}]},{"pos":[300610,300620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300622,300627]},{"pos":[300636,300648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300654,300665],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[300706,300716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300718,300723]},{"pos":[300732,300744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300750,300765],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that represents the current object.","pos":[300767,300819]},{"pos":[300853,300865],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that represents the current object.","pos":[300867,300911]},{"pos":[300918,300925],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation returns the class name of the object.","pos":[300927,300991]},{"content":"The method can be overridden in a derived class to return values that are meaningful for that type.","pos":[300992,301091]},{"content":"For example, an instance of the SysMethodInfo class returns the method name and type of the method, such as instance or static.","pos":[301092,301219]},{"pos":[301225,301240],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[301274,301284],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[301286,301333]},{"pos":[301402,301412],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Text","pos":[301414,301418]},{"content":"Image","pos":[301432,301437]},{"content":"Data","pos":[301451,301455]},{"pos":[301462,301490],"content":"Class FormManagedHostControl","linkify":"Class FormManagedHostControl","nodes":[{"content":"Class FormManagedHostControl","pos":[0,28]}]},{"pos":[301549,301556],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[301562,301570],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[301576,301583],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[301587,301593]},{"content":"Description","pos":[301697,301708]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[302151,302197],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[302261,302301]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[302433,302476],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[302543,302610]},{"content":"public boolean allowSysSetup()","pos":[302715,302745]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[302825,302908]},{"content":"public str assemblyName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[302997,303035],"source":"public str assemblyName(\\[str value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[303279,303328],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[303389,303487]},{"content":"public int beginDrag(int x, int y)","pos":[303561,303595]},{"content":"Is called when the user starts to drag a form control.","pos":[303671,303725]},{"content":"public container calcControlSize(int chars, int lines)","pos":[303843,303897]},{"content":"Retrieves the size of the control.","pos":[303953,303987]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[304125,304197],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[304235,304302]},{"content":"public List configurationKeyEx()","pos":[304407,304439]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[304517,304613]},{"content":"public CLRObject control()","pos":[304689,304715]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[304971,305015],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[305081,305159]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[305253,305295],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[305363,305488]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[305535,305574],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[305645,305812]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[305817,305851],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[305927,306008]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[306099,306180]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[306209,306303]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[306381,306458]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[306491,306587]},{"content":"public str dragText()","pos":[306663,306684]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[306773,306843]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[306945,306986],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[307055,307106]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[307227,307269],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[307337,307425]},{"content":"public boolean hasUserSetting()","pos":[307509,307540]},{"content":"Indicates whether the control has custom user settings.","pos":[307619,307674]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[307791,307833],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[307901,307940]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[308073,308109],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[308183,308245]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[308355,308392],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[308465,308504]},{"content":"public str helpField()","pos":[308637,308659]},{"content":"Retrieves the Help text for the control.","pos":[308747,308787]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[308919,308953],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[309029,309133]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[309201,309246],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[309483,309524],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[309593,309656]},{"content":"public int hWnd()","pos":[309765,309782]},{"content":"Retrieves the Windows handle for the control.","pos":[309875,309920]},{"content":"public boolean isContainer()","pos":[310047,310075]},{"content":"public boolean isDisplayed()","pos":[310329,310357]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[310439,310505]},{"content":"public boolean isRestricted()","pos":[310611,310640]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[310721,310788]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[310893,310949]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[311003,311104]},{"content":"public boolean leave()","pos":[311175,311197]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[311457,311497],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[311567,311631]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[311739,311773],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[311849,311910]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[312021,312056],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[312131,312195]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[312303,312350],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[312413,312466]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[312585,312664]},{"content":"Is called when the control is double-clicked by the user.","pos":[312695,312752]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[312867,312942]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[312977,313042]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[313149,313224]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[313259,313324]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[313431,313504]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[313541,313613]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[313713,313743],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[313823,313958]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[313995,314037],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[314277,314316]},{"content":"public FormControl parentControl()","pos":[314559,314593]},{"content":"Retrieves the parent control for the control.","pos":[314669,314714]},{"content":"public boolean rTLCapable(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[314841,314885],"source":"public boolean rTLCapable(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[315123,315180],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[315233,315292]},{"content":"public int showContextMenu(int menuHandle)","pos":[315405,315447]},{"content":"Shows the shortcut menu for the control.","pos":[315515,315555]},{"content":"public int sizing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[315687,315719],"source":"public int sizing(\\[int value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[315969,316007],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[316079,316206]},{"content":"public str toolTip()","pos":[316251,316271]},{"content":"Retrieves the tooltip text for the control.","pos":[316361,316404]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[316533,316572],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[316643,316705]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[316815,316848],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[316925,316984]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[317097,317131],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[317207,317269]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[317379,317409],"source":"public int type(\\[int value\\])"},{"content":"public str typeName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[317661,317695],"source":"public str typeName(\\[str value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[317943,317994]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[318225,318259],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[318335,318378]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[318507,318545],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[318617,318665]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[318789,318828],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[318899,318958]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[319071,319108],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[319181,319264]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[319353,319389],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[319463,319515]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[319635,319669],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[319745,319827]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[319917,319959],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[320027,320083]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[320199,320239],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[320309,320363]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[320481,320521],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[320591,320640]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[320763,320806],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[320873,320926]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[321045,321079],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[321155,321303]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[321327,321362],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[321437,321514]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[321609,321669],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[321719,321780]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[321891,321945],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[322001,322060]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[322173,322219],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[322283,322344]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[322455,322496],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[322565,322635]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[322737,322778],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[322847,322885]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[323019,323054],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[323129,323191]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[323301,323337],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[323411,323449]},{"content":"public void enter()","pos":[323583,323602]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[323865,323940],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[324147,324216]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[324257,324357]},{"content":"public void lostFocus()","pos":[324429,324452]},{"content":"Indicates that the control has lost focus.","pos":[324539,324581]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[324711,324787],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void paste()","pos":[324993,325012]},{"content":"Pastes the contents of the clipboard into the control.","pos":[325103,325157]},{"content":"public void mouseLeave()","pos":[325275,325299]},{"content":"Indicates that the mouse pointer has left the control.","pos":[325385,325439]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[325557,325630]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[325667,325765]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[325839,325913],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[326121,326193],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dragLeave()","pos":[326403,326426]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[326513,326609]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[326685,326792],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void endDrag()","pos":[326967,326988]},{"content":"Is called when the user has finished dragging a form control.","pos":[327077,327138]},{"content":"public void copy()","pos":[327249,327267]},{"content":"Copies the contents of the control to the clipboard.","pos":[327359,327411]},{"content":"public void cut()","pos":[327531,327548]},{"content":"Cuts the contents of the control.","pos":[327641,327674]},{"content":"public void displayControl()","pos":[327813,327841]},{"content":"Displays the control.","pos":[327923,327944]},{"content":"public void prefColumnSize(int width, int height)","pos":[328095,328144]},{"content":"Specifies the preferred column width and height for the form control.","pos":[328205,328274]},{"content":"public void context()","pos":[328377,328398]},{"content":"Shows the shortcut menu for the control.","pos":[328487,328527]},{"content":"public void resetUserSetting()","pos":[328659,328689]},{"content":"Resets the user settings for the control.","pos":[328769,328810]},{"content":"public void inputSearch(str searchStr)","pos":[328941,328979]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[329051,329122]},{"content":"public void gotFocus()","pos":[329223,329245]},{"content":"Indicates that the control has received focus.","pos":[329333,329379]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[329505,329582]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[329615,329685]},{"content":"public void setFocus()","pos":[329787,329809]},{"content":"Sets the focus on the control.","pos":[329897,329927]},{"pos":[330072,330091],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[330093,330133]},{"pos":[330190,330200],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[330202,330207]},{"content":"The new value for the property; optional.","pos":[330210,330251]},{"pos":[330258,330270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[330272,330328]},{"pos":[330335,330342],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[330344,330423]},{"pos":[330429,330445],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[330447,330514]},{"pos":[330568,330578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[330580,330585]},{"content":"The value to assign to the allowEdit property.","pos":[330588,330634]},{"pos":[330641,330653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[330655,330707]},{"pos":[330714,330721],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[330723,330849]},{"pos":[330855,330875],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[330877,330960]},{"pos":[331003,331015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[331017,331085]},{"pos":[331091,331110],"content":"Method assemblyName","linkify":"Method assemblyName","nodes":[{"content":"Method assemblyName","pos":[0,19]}]},{"pos":[331159,331169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[331171,331176]},{"pos":[331185,331197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[331203,331225],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[331227,331325]},{"pos":[331385,331395],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[331397,331402]},{"content":"The new value for the property; optional.","pos":[331405,331446]},{"pos":[331453,331465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[331467,331546]},{"pos":[331553,331560],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[331562,331599]},{"pos":[331605,331621],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[331623,331677]},{"pos":[331724,331734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[331736,331737]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[331740,331810]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[331811,331878]},{"content":"y","pos":[331890,331891]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[331894,331964]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[331965,332032]},{"pos":[332039,332051],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[332053,332092]},{"pos":[332099,332106],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[332108,332189]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[332190,332294]},{"pos":[332300,332322],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[332324,332358]},{"pos":[332425,332435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[332437,332442]},{"content":"The number of lines to use to determine the height.","pos":[332445,332496]},{"content":"lines","pos":[332508,332513]},{"content":"The number of lines to use to determine the height.","pos":[332516,332567]},{"pos":[332574,332586],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[332588,332634]},{"pos":[332640,332663],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[332665,332732]},{"pos":[332815,332825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[332827,332832]},{"content":"The ID of the configuration key to assign to the control; optional.","pos":[332835,332902]},{"pos":[332909,332921],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[332923,332995]},{"pos":[333002,333009],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[333011,333092]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[333093,333186]},{"pos":[333192,333217],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[333219,333315]},{"pos":[333360,333372],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[333374,333460]},{"pos":[333467,333474],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[333476,333525]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[333526,333674]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[333675,333809]},{"pos":[333815,333829],"content":"Method control","linkify":"Method control","nodes":[{"content":"Method control","pos":[0,14]}]},{"pos":[333868,333880],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[333886,333911],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[333913,333991]},{"pos":[334046,334056],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[334058,334063]},{"content":"The string that contains the country/region codes to set; optional.","pos":[334066,334133]},{"pos":[334140,334152],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[334154,334219]},{"pos":[334225,334248],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[334250,334375]},{"pos":[334428,334438],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[334440,334445]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[334448,334522]},{"pos":[334529,334541],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[334543,334655]},{"pos":[334662,334669],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[334671,334798]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[334799,334892]},{"pos":[334898,334918],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[334920,335087]},{"pos":[335137,335147],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[335149,335154]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[335157,335231]},{"pos":[335238,335250],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[335252,335380]},{"pos":[335386,335401],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[335403,335484]},{"pos":[335529,335539],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[335541,335546]},{"content":"An Integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[335549,335627]},{"pos":[335634,335646],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[335648,335708]},{"pos":[335715,335722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the FormControl.dragLeave, FormControl.dragOver, and the FormControl.dragOverEx methods to specify the behavior.","pos":[335724,335840]},{"pos":[335846,335861],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[335863,335957]},{"pos":[336051,336061],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[336063,336073]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[336076,336161]},{"content":"dragMode","pos":[336173,336181]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[336184,336269]},{"content":"x","pos":[336281,336282]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[336285,336370]},{"content":"y","pos":[336382,336383]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[336386,336471]},{"pos":[336478,336490],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[336492,336557]},{"pos":[336563,336580],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[336582,336678]},{"pos":[336768,336778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[336780,336790]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[336793,336878]},{"content":"dragMode","pos":[336890,336898]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[336901,336986]},{"content":"x","pos":[336998,336999]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[337002,337087]},{"content":"y","pos":[337099,337100]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[337103,337188]},{"pos":[337195,337207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[337209,337274]},{"pos":[337280,337295],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[337297,337367]},{"pos":[337401,337413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[337415,337546]},{"pos":[337552,337566],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[337568,337619]},{"pos":[337671,337681],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[337683,337688]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[337691,337763]},{"pos":[337770,337782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[337784,337832]},{"pos":[337839,337846],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[337848,337923]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[337924,338019]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[338020,338154]},{"pos":[338160,338177],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[338179,338267]},{"pos":[338320,338330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[338332,338335]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[338338,338408]},{"pos":[338415,338427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[338429,338496]},{"pos":[338502,338523],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[338525,338580]},{"pos":[338624,338636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[338638,338701]},{"pos":[338707,338720],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[338722,338761]},{"pos":[338814,338824],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[338826,338831]},{"content":"An Integer that indicates how the height is calculated; optional.","pos":[338834,338899]},{"content":"mode","pos":[338911,338915]},{"content":"An Integer that indicates how the height is calculated; optional.","pos":[338918,338983]},{"pos":[338990,339002],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[339004,339040]},{"pos":[339047,339054],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[339056,339109]},{"content":"Calculate the height according to the following table:","pos":[339110,339164]},{"content":"Mode","pos":[339168,339172]},{"content":"Height calculation","pos":[339186,339204]},{"content":"-1 Exact","pos":[339392,339400]},{"content":"The exact height in pixels of the controls is used.","pos":[339410,339461]},{"content":"0 Auto","pos":[339504,339510]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[339522,339611]},{"content":"1 Column height","pos":[339616,339631]},{"content":"The layout of the form determines the height of the control.","pos":[339634,339694]},{"content":"The height and height calculation mode can be set separately.","pos":[339727,339788]},{"pos":[339794,339811],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[339813,339875]},{"pos":[339922,339932],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[339934,339939]},{"content":"An integer value that indicates how control height is calculated; optional.","pos":[339942,340017]},{"pos":[340024,340036],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[340038,340059]},{"pos":[340066,340073],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[340075,340129]},{"content":"Mode","pos":[340133,340137]},{"content":"Height calculation","pos":[340149,340167]},{"content":"Exact","pos":[340353,340358]},{"content":"The exact height in pixels of the controls is used.","pos":[340369,340420]},{"content":"Auto","pos":[340463,340467]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[340479,340568]},{"content":"Column height","pos":[340573,340586]},{"content":"The layout of the form determines the height of the control.","pos":[340589,340649]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[340682,340767]},{"pos":[340773,340791],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[340793,340832]},{"pos":[340880,340890],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[340892,340897]},{"content":"An Integer that specifies the height in pixels; optional.","pos":[340900,340957]},{"pos":[340964,340976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[340978,340999]},{"pos":[341006,341013],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[341015,341105]},{"pos":[341111,341127],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[341129,341169]},{"pos":[341204,341216],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[341218,341306]},{"pos":[341313,341320],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[341322,341392]},{"content":"Use the helpText method to set the value of the Help text.","pos":[341393,341451]},{"pos":[341457,341472],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[341474,341578]},{"pos":[341623,341633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341635,341640]},{"content":"The value to set as the Help text for the control.","pos":[341643,341693]},{"pos":[341700,341712],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[341714,341769]},{"pos":[341776,341783],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[341785,341853]},{"content":"The Help text must not exceed 250 characters.","pos":[341854,341899]},{"pos":[341905,341923],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[341979,341989],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[341991,341996]},{"pos":[342005,342017],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[342023,342045],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[342047,342110]},{"pos":[342162,342172],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[342174,342179]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[342182,342249]},{"pos":[342256,342268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[342270,342320]},{"pos":[342326,342337],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[342339,342384]},{"pos":[342414,342426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[342428,342455]},{"pos":[342462,342469],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[342471,342515]},{"pos":[342521,342539],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[342580,342592],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[342598,342616],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[342618,342684]},{"pos":[342725,342737],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[342739,342790]},{"pos":[342797,342804],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[342806,342874]},{"pos":[342880,342899],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[342901,342968]},{"pos":[343010,343022],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[343024,343076]},{"pos":[343082,343107],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[343109,343210]},{"pos":[343279,343289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[343291,343308]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[343311,343439]},{"pos":[343446,343458],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[343460,343619]},{"pos":[343626,343633],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[343635,343712]},{"content":"FormAllowUserSetup::No 0","pos":[344052,344076]},{"content":"No changes can be made to the control.","pos":[344087,344125]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[344126,344215]},{"content":"FormAllowUserSetup::Restricted 1","pos":[344220,344252]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[344255,344347]},{"content":"The user cannot move the control.","pos":[344348,344381]},{"content":"FormAllowUserSetup::Yes 2","pos":[344388,344413]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[344423,344515]},{"content":"The user can also move the control.","pos":[344516,344551]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[344555,344744]},{"pos":[344750,344762],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[344797,344809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[344815,344826],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[344828,344892]},{"pos":[344943,344953],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[344955,344960]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[344963,345049]},{"content":"mode","pos":[345061,345065]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[345068,345154]},{"pos":[345161,345173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[345175,345226]},{"pos":[345232,345247],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[345249,345310]},{"pos":[345355,345365],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345367,345372]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[345375,345461]},{"pos":[345468,345480],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[345482,345538]},{"pos":[345544,345560],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[345562,345626]},{"pos":[345672,345682],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345684,345689]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[345692,345773]},{"pos":[345780,345792],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[345794,345845]},{"pos":[345851,345871],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[345873,345926]},{"pos":[345984,345994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[345996,346001]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[346004,346098]},{"pos":[346105,346117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[346119,346192]},{"pos":[346198,346218],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[346220,346277]},{"pos":[346369,346379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[346381,346382]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[346385,346446]},{"content":"y","pos":[346458,346459]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[346462,346523]},{"content":"button","pos":[346535,346541]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[346544,346605]},{"content":"Ctrl","pos":[346617,346621]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[346624,346685]},{"content":"Shift","pos":[346697,346702]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[346705,346766]},{"pos":[346773,346785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[346787,346826]},{"pos":[346833,346840],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[346842,346946]},{"pos":[346952,346968],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[346970,347035]},{"pos":[347123,347133],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[347135,347136]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[347139,347200]},{"content":"y","pos":[347212,347213]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[347216,347277]},{"content":"button","pos":[347289,347295]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[347298,347359]},{"content":"Ctrl","pos":[347371,347375]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[347378,347439]},{"content":"Shift","pos":[347451,347456]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[347459,347520]},{"pos":[347527,347539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[347541,347580]},{"pos":[347587,347594],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[347596,347700]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[347701,347836]},{"pos":[347842,347858],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[347860,347925]},{"pos":[348013,348023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[348025,348026]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348029,348090]},{"content":"y","pos":[348102,348103]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348106,348167]},{"content":"button","pos":[348179,348185]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348188,348249]},{"content":"Ctrl","pos":[348261,348265]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348268,348329]},{"content":"Shift","pos":[348341,348346]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348349,348410]},{"pos":[348417,348429],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[348431,348470]},{"pos":[348477,348484],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[348486,348590]},{"pos":[348596,348610],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[348612,348684]},{"pos":[348770,348780],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[348782,348783]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348786,348847]},{"content":"y","pos":[348859,348860]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348863,348924]},{"content":"button","pos":[348936,348942]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[348945,349006]},{"content":"Ctrl","pos":[349018,349022]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[349025,349086]},{"content":"Shift","pos":[349098,349103]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[349106,349167]},{"pos":[349174,349186],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[349188,349227]},{"pos":[349234,349241],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[349243,349347]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[349348,349483]},{"pos":[349489,349500],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[349502,349637]},{"pos":[349678,349688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[349690,349695]},{"content":"The name to assign to the control.","pos":[349698,349732]},{"pos":[349739,349751],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[349753,349817]},{"pos":[349824,349831],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[349833,349927]},{"content":"It must start with a letter.","pos":[349933,349961]},{"content":"It cannot exceed 250 characters.","pos":[349966,349998]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[350003,350057],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[350062,350102]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[350107,350217]},{"pos":[350223,350246],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[350299,350309],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[350311,350316]},{"pos":[350325,350337],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[350343,350370],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[350422,350434],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[350440,350460],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[350462,350507]},{"pos":[350554,350566],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[350568,350603]},{"pos":[350609,350626],"content":"Method rTLCapable","linkify":"Method rTLCapable","nodes":[{"content":"Method rTLCapable","pos":[0,17]}]},{"pos":[350681,350691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[350693,350698]},{"pos":[350707,350719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[350725,350743],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[350745,350804]},{"pos":[350872,350882],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[350884,350889]},{"content":"The ID of the security key to assign to the control; optional.","pos":[350892,350954]},{"pos":[350961,350973],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[350975,351074]},{"pos":[351080,351102],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[351104,351144]},{"pos":[351199,351209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[351211,351221]},{"content":"The ID of the menu to show.","pos":[351224,351251]},{"pos":[351258,351270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[351272,351331]},{"pos":[351337,351350],"content":"Method sizing","linkify":"Method sizing","nodes":[{"content":"Method sizing","pos":[0,13]}]},{"pos":[351393,351403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351405,351410]},{"pos":[351419,351431],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351437,351448],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[351450,351577]},{"pos":[351626,351636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351638,351643]},{"content":"The value to assign to the skip property of the control; optional.","pos":[351646,351712]},{"pos":[351719,351731],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[351733,351839]},{"pos":[351846,351853],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[351855,352050]},{"pos":[352056,352070],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[352072,352115]},{"pos":[352148,352160],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[352162,352264]},{"pos":[352271,352278],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[352280,352352]},{"pos":[352358,352368],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[352370,352432]},{"pos":[352482,352492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[352494,352499]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[352502,352586]},{"content":"mode","pos":[352598,352602]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[352605,352689]},{"pos":[352696,352708],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[352710,352759]},{"pos":[352765,352779],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[352781,352840]},{"pos":[352884,352894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[352896,352901]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[352904,352988]},{"pos":[352995,353007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[353009,353063]},{"pos":[353069,353084],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[353086,353148]},{"pos":[353193,353203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353205,353210]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[353213,353292]},{"pos":[353299,353311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[353313,353362]},{"pos":[353368,353379],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[353420,353430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353432,353437]},{"pos":[353446,353458],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353464,353479],"content":"Method typeName","linkify":"Method typeName","nodes":[{"content":"Method typeName","pos":[0,15]}]},{"pos":[353524,353534],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353536,353541]},{"pos":[353550,353562],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353568,353595],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[353659,353669],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[353671,353675]},{"pos":[353684,353696],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[353702,353717],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[353719,353762]},{"pos":[353807,353817],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353819,353824]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[353827,353899]},{"pos":[353906,353918],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[353920,353950]},{"pos":[353956,353975],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[353977,354025]},{"pos":[354074,354084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354086,354091]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[354094,354171]},{"pos":[354178,354190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[354192,354227]},{"pos":[354233,354253],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[354255,354314]},{"pos":[354364,354374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354376,354381]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[354384,354472]},{"pos":[354479,354491],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[354493,354539]},{"pos":[354545,354563],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[354565,354648]},{"pos":[354696,354706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354708,354713]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[354716,354796]},{"pos":[354803,354815],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[354817,354873]},{"pos":[354879,354896],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[354898,354950]},{"pos":[354997,355007],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355009,355014]},{"content":"The user height for the control; optional.","pos":[355017,355059]},{"pos":[355066,355078],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[355080,355119]},{"pos":[355125,355140],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[355142,355224]},{"pos":[355269,355279],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355281,355286]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[355289,355368]},{"pos":[355375,355387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[355389,355444]},{"pos":[355451,355458],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[355460,355630]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[355631,355706]},{"content":"This method lets you programmatically determine and set the value.","pos":[355707,355773]},{"pos":[355779,355802],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[355804,355860]},{"pos":[355913,355923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355925,355930]},{"content":"The organization container to set for the control; optional.","pos":[355933,355993]},{"pos":[356000,356012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[356014,356057]},{"pos":[356063,356084],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[356086,356140]},{"pos":[356191,356201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356203,356208]},{"content":"The organization sibling to set for the control; optional.","pos":[356211,356269]},{"pos":[356276,356288],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[356290,356331]},{"pos":[356337,356358],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[356360,356409]},{"pos":[356460,356470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356472,356477]},{"content":"The user label text to set for the control; optional.","pos":[356480,356533]},{"pos":[356540,356552],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[356554,356590]},{"pos":[356596,356620],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[356622,356675]},{"pos":[356729,356739],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356741,356746]},{"content":"The user security level to set for the control; optional.","pos":[356749,356806]},{"pos":[356813,356825],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[356827,356867]},{"pos":[356873,356888],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[356890,357038]},{"pos":[357083,357093],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357095,357100]},{"content":"The value to assign to the userSkip property; optional.","pos":[357103,357158]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[357159,357254]},{"pos":[357261,357273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[357275,357344]},{"pos":[357350,357366],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[357368,357445]},{"pos":[357491,357501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357503,357508]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[357511,357577]},{"pos":[357584,357596],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[357598,357727]},{"pos":[357734,357741],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[357743,357837]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[357838,357954],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[357955,358105]},{"pos":[358111,358133],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[358135,358196]},{"pos":[358265,358275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[358277,358282]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[358285,358362]},{"content":"mode","pos":[358374,358378]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[358381,358458]},{"pos":[358465,358477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[358479,358527]},{"pos":[358533,358559],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[358561,358620]},{"pos":[358685,358695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[358697,358701]},{"pos":[358710,358722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[358724,358778]},{"pos":[358784,358811],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[358813,358874]},{"pos":[358931,358941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[358943,358948]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[358951,359029]},{"pos":[359036,359048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[359050,359098]},{"pos":[359104,359118],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[359120,359190]},{"pos":[359242,359252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359254,359259]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[359262,359334]},{"pos":[359341,359353],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[359355,359404]},{"pos":[359410,359422],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[359424,359462]},{"pos":[359514,359524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359526,359531]},{"content":"An Integer that indicates how the width is calculated; optional.","pos":[359534,359598]},{"content":"mode","pos":[359610,359614]},{"content":"An Integer that indicates how the width is calculated; optional.","pos":[359617,359681]},{"pos":[359688,359700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[359702,359737]},{"pos":[359744,359751],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[359753,359806]},{"content":"Calculate the width according to the following table.","pos":[359807,359860]},{"content":"Mode","pos":[359864,359868]},{"content":"Width calculation","pos":[359881,359898]},{"content":"-1 Exact","pos":[360084,360092]},{"content":"The exact width in pixels of the controls is used.","pos":[360101,360151]},{"content":"0 Auto","pos":[360194,360200]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[360211,360299]},{"content":"1 Column width","pos":[360304,360318]},{"content":"The layout of the form determines the width of the control.","pos":[360321,360380]},{"content":"The width and width calculation mode can be set separately.","pos":[360413,360472]},{"pos":[360478,360494],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[360496,360558]},{"pos":[360604,360614],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[360616,360621]},{"content":"An integer value that indicates how control width is calculated; optional.","pos":[360624,360698]},{"pos":[360705,360717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[360719,360780]},{"pos":[360787,360794],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[360796,360849]},{"content":"Mode","pos":[360853,360857]},{"content":"Width calculation","pos":[360868,360885]},{"content":"Exact","pos":[361069,361074]},{"content":"The exact width in pixels of the controls is used.","pos":[361084,361134]},{"content":"Auto","pos":[361177,361181]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[361192,361280]},{"content":"Column width","pos":[361285,361297]},{"content":"The layout of the form determines the width of the control.","pos":[361300,361359]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[361392,361475]},{"pos":[361481,361498],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[361500,361538]},{"pos":[361585,361595],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361597,361602]},{"content":"An Integer that specifies the width in pixels; optional.","pos":[361605,361661]},{"pos":[361668,361680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[361682,361717]},{"pos":[361724,361731],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[361733,361806]},{"pos":[361812,361824],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[361855,361872],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[361956,361966],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[361968,361974]},{"content":"e","pos":[361988,361989]},{"pos":[361997,362010],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[362012,362112]},{"pos":[362194,362204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[362206,362216]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[362219,362304]},{"content":"dragMode","pos":[362316,362324]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[362327,362412]},{"content":"x","pos":[362424,362425]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[362428,362513]},{"content":"y","pos":[362525,362526]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[362529,362614]},{"pos":[362620,362636],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[362638,362680]},{"pos":[362715,362733],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[362818,362828],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[362830,362836]},{"content":"e","pos":[362850,362851]},{"pos":[362859,362871],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[362873,362927]},{"pos":[362958,362975],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[362977,363031]},{"pos":[363067,363078],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[363080,363178]},{"pos":[363264,363274],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[363276,363286]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[363289,363374]},{"content":"dragMode","pos":[363386,363394]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[363397,363482]},{"content":"x","pos":[363494,363495]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[363498,363583]},{"content":"y","pos":[363595,363596]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[363599,363684]},{"pos":[363690,363706],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[363789,363799],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[363801,363807]},{"content":"e","pos":[363821,363822]},{"pos":[363830,363844],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[363925,363935],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[363937,363943]},{"content":"e","pos":[363957,363958]},{"pos":[363966,363982],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[363984,364080]},{"pos":[364115,364144],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[364262,364272],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[364274,364290]},{"content":"objectMethodToCall","pos":[364304,364322]},{"content":"overrideObject","pos":[364336,364350]},{"pos":[364358,364372],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[364374,364435]},{"pos":[364469,364476],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[364478,364606]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[364607,364711]},{"pos":[364717,364728],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[364730,364782]},{"pos":[364812,364822],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[364824,364857]},{"pos":[364886,364907],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[364909,364930]},{"pos":[364970,364991],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[364993,365062]},{"pos":[365124,365134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[365136,365141]},{"content":"The preferred height of the control.","pos":[365144,365180]},{"content":"height","pos":[365192,365198]},{"content":"The preferred height of the control.","pos":[365201,365237]},{"pos":[365243,365257],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[365259,365299]},{"pos":[365332,365355],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[365357,365398]},{"pos":[365440,365458],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[365460,365531]},{"pos":[365582,365592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[365594,365603]},{"content":"The string value to use to filter data; optional.","pos":[365606,365655]},{"pos":[365661,365676],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[365678,365724]},{"pos":[365758,365775],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[365777,365847]},{"pos":[365937,365947],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[365949,365950]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[365953,366014]},{"content":"y","pos":[366026,366027]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[366030,366091]},{"content":"button","pos":[366103,366109]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[366112,366173]},{"content":"Ctrl","pos":[366185,366189]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[366192,366253]},{"content":"Shift","pos":[366265,366270]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[366273,366334]},{"pos":[366340,366355],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[366357,366387]},{"pos":[366420,366447],"content":"Class FormMenuButtonControl","linkify":"Class FormMenuButtonControl","nodes":[{"content":"Class FormMenuButtonControl","pos":[0,27]}]},{"pos":[366505,366512],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[366518,366526],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[366532,366539],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[366543,366549]},{"content":"Description","pos":[366661,366672]},{"content":"public int acquireFocus(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[367123,367161],"source":"public int acquireFocus(\\[int value\\])"},{"content":"public FormControl addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[367413,367517],"source":"public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[367703,367798],"source":"public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>)","pos":[367993,368108],"source":"public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[368283,368329],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[368401,368441]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[368573,368608],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[368863,368906],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[368981,369048]},{"content":"public boolean allowSysSetup()","pos":[369153,369183]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[369271,369354]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[369443,369492],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[369561,369659]},{"content":"public boolean autoRefreshData(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[369733,369782],"source":"public boolean autoRefreshData(\\[boolean value\\])"},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[370023,370064],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[370141,370190]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[370313,370348],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[370431,370493]},{"content":"public int beginDrag(int x, int y)","pos":[370603,370637]},{"content":"Is called when the user starts to drag a form control.","pos":[370721,370775]},{"content":"public boolean big(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[370893,370930],"source":"public boolean big(\\[boolean value\\])"},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[371183,371213],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[371301,371368]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[371473,371505],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[371591,371647]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[371763,371801],"source":"public int bottomMargin(\\[int value\\])"},{"content":"public int buttonDisplay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[372053,372092],"source":"public int buttonDisplay(\\[int value\\])"},{"content":"Gets or sets the appearance of the button control.","pos":[372171,372221]},{"content":"public container calcControlSize(int chars, int lines)","pos":[372343,372397]},{"content":"Retrieves the size of the control.","pos":[372461,372495]},{"content":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[372633,372718],"source":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"public boolean canContain(FormControl control)","pos":[372923,372969]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[373213,373251],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[373331,373374]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[373503,373540],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[373621,373666]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[373793,373865],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[373911,373978]},{"content":"public List configurationKeyEx()","pos":[374083,374115]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[374201,374297]},{"content":"public boolean contains(FormControl control)","pos":[374373,374417]},{"content":"public int controlCount()","pos":[374663,374688]},{"content":"public FormControl controlNum(int controlNo)","pos":[374953,374997]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[375243,375287],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[375361,375439]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[375533,375575],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[375651,375776]},{"content":"public boolean defaultButton(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[375823,375870],"source":"public boolean defaultButton(\\[boolean value\\])"},{"content":"Determines whether the button should be the default button in the form.","pos":[375941,376012]},{"content":"public str disabledImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[376113,376152],"source":"public str disabledImage(\\[str value\\])"},{"content":"Gets or sets the disabled image of the button.","pos":[376231,376277]},{"content":"public int disabledImageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[376403,376450],"source":"public int disabledImageLocation(\\[int value\\])"},{"content":"public int disabledResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[376693,376735],"source":"public int disabledResource(\\[int value\\])"},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[376811,376889]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[376983,377022],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[377101,377268]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[377273,377307],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[377391,377472]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[377563,377644]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[377681,377775]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[377853,377930]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[377971,378067]},{"content":"public str dragText()","pos":[378143,378164]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[378261,378331]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[378433,378474],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[378551,378602]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[378723,378753],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[378841,378898]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[379013,379047],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[379131,379188]},{"content":"public boolean forcedToOverflow(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[379303,379353],"source":"public boolean forcedToOverflow(\\[boolean value\\])"},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[379593,379634],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[379711,379762]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[379883,379925],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[380001,380089]},{"content":"public boolean hasUserSetting()","pos":[380173,380204]},{"content":"Indicates whether the control has custom user settings.","pos":[380291,380346]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[380463,380505],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[380581,380620]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[380753,380789],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[380871,380933]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[381043,381080],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[381161,381200]},{"content":"public str helpField()","pos":[381333,381355]},{"content":"Retrieves the Help text for the control.","pos":[381451,381491]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[381623,381657],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[381741,381845]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[381913,381954],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[382031,382094]},{"content":"public int hWnd()","pos":[382203,382220]},{"content":"Retrieves the Windows handle for the control.","pos":[382321,382366]},{"content":"public int imageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[382493,382532],"source":"public int imageLocation(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[382783,382811]},{"content":"public boolean isDisplayed()","pos":[383073,383101]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[383191,383257]},{"content":"public boolean isRestricted()","pos":[383363,383392]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[383481,383548]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[383653,383709]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[383771,383870]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[383943,383983],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str keyTip(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[384233,384265],"source":"public str keyTip(\\[str value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[384523,384563],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[384641,384705]},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[384813,384849],"source":"public int leftMargin(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[385103,385137],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[385221,385282]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[385393,385428],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[385511,385575]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[385683,385730],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[385801,385854]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[385973,386052]},{"content":"Is called when the control is double-clicked by the user.","pos":[386091,386148]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[386263,386338]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[386381,386446]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[386553,386628]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[386671,386736]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[386843,386916]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[386961,387033]},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterId<ph id=\"ph2\">\\]</ph>)","pos":[387133,387193],"source":"public int moveControl(int controlId, \\[int insertAfterId\\])"},{"content":"public int multiSelect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[387423,387460],"source":"public int multiSelect(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[387713,387743],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[387831,387966]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[388003,388045],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int needsRecord(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[388293,388330],"source":"public int needsRecord(\\[int value\\])"},{"content":"public str normalImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[388583,388620],"source":"public str normalImage(\\[str value\\])"},{"content":"public int normalResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[388873,388913],"source":"public int normalResource(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[389163,389202]},{"content":"public FormControl parentControl()","pos":[389453,389487]},{"content":"Retrieves the parent control for the control.","pos":[389571,389616]},{"content":"public boolean primary(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[389743,389784],"source":"public boolean primary(\\[boolean value\\])"},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[390033,390070],"source":"public int rightMargin(\\[int value\\])"},{"content":"public boolean saveRecord(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[390323,390367],"source":"public boolean saveRecord(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[390613,390670],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[390731,390790]},{"content":"public int shortkey(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[390903,390937],"source":"public int shortkey(\\[int value\\])"},{"content":"public int showContextMenu(int menuHandle)","pos":[391193,391235]},{"content":"Shows the shortcut menu for the control.","pos":[391311,391351]},{"content":"public boolean showShortCut(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[391483,391529],"source":"public boolean showShortCut(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[391773,391811],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[391891,392018]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[392063,392094],"source":"public int style(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[392353,392383],"source":"public str text(\\[str value\\])"},{"content":"public str toolTip()","pos":[392643,392663]},{"content":"Retrieves the tooltip text for the control.","pos":[392761,392804]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[392933,392972],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[393051,393113]},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[393223,393258],"source":"public int topMargin(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[393513,393546],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[393631,393690]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[393803,393837],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[393921,393983]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[394093,394123],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[394383,394426],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[394501,394568]},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[394673,394724]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[394963,394997],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[395081,395124]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[395253,395291],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[395371,395419]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[395543,395582],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[395661,395720]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[395833,395870],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[395951,396034]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[396123,396159],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[396241,396293]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[396413,396447],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[396531,396613]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[396703,396745],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[396821,396877]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[396993,397033],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[397111,397165]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[397283,397323],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[397401,397450]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[397573,397616],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[397691,397744]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[397863,397897],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[397981,398129]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[398153,398188],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[398271,398348]},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[398443,398490],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public boolean value(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[398733,398772],"source":"public boolean value(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[399023,399083],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[399141,399202]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[399313,399367],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[399431,399490]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[399603,399649],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[399721,399782]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[399893,399934],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[400011,400081]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[400183,400224],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[400301,400339]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[400473,400508],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[400591,400653]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[400763,400799],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[400881,400919]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[401053,401126]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[401171,401269]},{"content":"public void prefColumnSize(int width, int height)","pos":[401343,401392]},{"content":"Specifies the preferred column width and height for the form control.","pos":[401461,401530]},{"content":"public void resetUserSetting()","pos":[401633,401663]},{"content":"Resets the user settings for the control.","pos":[401751,401792]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[401923,401992]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[402041,402141]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[402213,402288],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[402503,402610],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void arrange()","pos":[402793,402814]},{"content":"public void inputSearch(str searchStr)","pos":[403083,403121]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[403201,403272]},{"content":"public void gotFocus()","pos":[403373,403395]},{"content":"Indicates that the control has received focus.","pos":[403491,403537]},{"content":"public void clicked()","pos":[403663,403684]},{"content":"public void copy()","pos":[403953,403971]},{"content":"Copies the contents of the control to the clipboard.","pos":[404071,404123]},{"content":"public void setFocus()","pos":[404243,404265]},{"content":"Sets the focus on the control.","pos":[404361,404391]},{"content":"public void cut()","pos":[404533,404550]},{"content":"Cuts the contents of the control.","pos":[404651,404684]},{"content":"private void OnClicked(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[404823,404897],"source":"private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[405113,405189],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dragLeave()","pos":[405403,405426]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[405521,405617]},{"content":"public void context()","pos":[405693,405714]},{"content":"Shows the shortcut menu for the control.","pos":[405811,405851]},{"content":"public void endDrag()","pos":[405983,406004]},{"content":"Is called when the user has finished dragging a form control.","pos":[406101,406162]},{"content":"public void mouseLeave()","pos":[406273,406297]},{"content":"Indicates that the mouse pointer has left the control.","pos":[406391,406445]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[406563,406640]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[406681,406751]},{"content":"public void lostFocus()","pos":[406853,406876]},{"content":"Indicates that the control has lost focus.","pos":[406971,407013]},{"content":"public void paste()","pos":[407143,407162]},{"content":"Pastes the contents of the clipboard into the control.","pos":[407261,407315]},{"content":"public void displayControl()","pos":[407433,407461]},{"content":"Displays the control.","pos":[407551,407572]},{"pos":[407726,407745],"content":"Method acquireFocus","linkify":"Method acquireFocus","nodes":[{"content":"Method acquireFocus","pos":[0,19]}]},{"pos":[407794,407804],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[407806,407811]},{"pos":[407820,407832],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[407838,407855],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"pos":[407970,407980],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[407982,407993]},{"content":"controlName","pos":[408007,408018]},{"content":"insertAfter","pos":[408032,408043]},{"pos":[408052,408064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408070,408089],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[408195,408205],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[408207,408219]},{"content":"controlName","pos":[408233,408244]},{"content":"insertAfter","pos":[408258,408269]},{"pos":[408278,408290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408296,408315],"content":"Method addDataField","linkify":"Method addDataField","nodes":[{"content":"Method addDataField","pos":[0,19]}]},{"pos":[408439,408449],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[408451,408463]},{"content":"fieldId","pos":[408477,408484]},{"content":"insertAfter","pos":[408498,408509]},{"content":"arrayIndex","pos":[408523,408533]},{"pos":[408542,408554],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[408560,408579],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[408581,408621]},{"pos":[408678,408688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408690,408695]},{"content":"The new value for the property; optional.","pos":[408698,408739]},{"pos":[408746,408758],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[408760,408816]},{"pos":[408823,408830],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[408832,408911]},{"pos":[408917,408933],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[408979,408989],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408991,408996]},{"pos":[409005,409017],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[409023,409039],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[409041,409108]},{"pos":[409162,409172],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409174,409179]},{"content":"The value to assign to the allowEdit property.","pos":[409182,409228]},{"pos":[409235,409247],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[409249,409301]},{"pos":[409308,409315],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[409317,409443]},{"pos":[409449,409469],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[409471,409554]},{"pos":[409597,409609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[409611,409679]},{"pos":[409685,409707],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[409709,409807]},{"pos":[409867,409877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409879,409884]},{"content":"The new value for the property; optional.","pos":[409887,409928]},{"pos":[409935,409947],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[409949,410028]},{"pos":[410035,410042],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[410044,410081]},{"pos":[410087,410109],"content":"Method autoRefreshData","linkify":"Method autoRefreshData","nodes":[{"content":"Method autoRefreshData","pos":[0,22]}]},{"pos":[410169,410179],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410181,410186]},{"pos":[410195,410207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[410213,410235],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[410237,410286]},{"pos":[410338,410348],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410350,410355]},{"pos":[410364,410376],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[410378,410422]},{"pos":[410429,410436],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[410438,410506]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[410512,410582]},{"content":"The second byte contains a value for green.","pos":[410587,410630]},{"content":"The third byte contains a value for blue.","pos":[410635,410676]},{"content":"The high-order byte must be zero.","pos":[410681,410714]},{"content":"The maximum value for a single byte is 255.","pos":[410719,410762]},{"pos":[410768,410784],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[410786,410848]},{"pos":[410894,410904],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410906,410911]},{"pos":[410920,410932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[410934,410995]},{"pos":[411001,411017],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[411019,411073]},{"pos":[411120,411130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[411132,411133]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[411136,411206]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[411207,411274]},{"content":"y","pos":[411286,411287]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[411290,411360]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[411361,411428]},{"pos":[411435,411447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[411449,411488]},{"pos":[411495,411502],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[411504,411585]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[411586,411690]},{"pos":[411696,411706],"content":"Method big","linkify":"Method big","nodes":[{"content":"Method big","pos":[0,10]}]},{"pos":[411754,411764],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411766,411771]},{"pos":[411780,411792],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[411798,411809],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[411811,411878]},{"pos":[411919,411929],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411931,411936]},{"pos":[411945,411957],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[411959,412009]},{"pos":[412016,412023],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[412025,412097]},{"content":"0 Use the default font weight.","pos":[412103,412133]},{"content":"1 Thin.","pos":[412138,412145]},{"content":"2 Extra-light.","pos":[412150,412164]},{"content":"3 Light.","pos":[412169,412177]},{"content":"4 Normal.","pos":[412182,412191]},{"content":"5 Medium.","pos":[412196,412205]},{"content":"6 Semibold.","pos":[412210,412221]},{"content":"7 Bold.","pos":[412226,412233]},{"content":"8 Extra-bold.","pos":[412238,412251]},{"content":"9 Heavy.","pos":[412256,412264]},{"pos":[412270,412283],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[412285,412341]},{"pos":[412384,412394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[412396,412401]},{"pos":[412410,412422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[412424,412468]},{"pos":[412475,412482],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[412484,412576]},{"content":"Value","pos":[412580,412585]},{"content":"Description","pos":[412588,412599]},{"content":"0","pos":[412628,412629]},{"content":"Auto","pos":[412636,412640]},{"content":"1","pos":[412652,412653]},{"content":"3D","pos":[412660,412662]},{"content":"2","pos":[412676,412677]},{"content":"Single line","pos":[412684,412695]},{"content":"3","pos":[412700,412701]},{"content":"Flat","pos":[412708,412712]},{"content":"4","pos":[412724,412725]},{"content":"None","pos":[412732,412736]},{"pos":[412751,412770],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[412819,412829],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[412831,412836]},{"pos":[412845,412857],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[412863,412883],"content":"Method buttonDisplay","linkify":"Method buttonDisplay","nodes":[{"content":"Method buttonDisplay","pos":[0,20]}]},{"content":"Gets or sets the appearance of the button control.","pos":[412885,412935]},{"pos":[412985,412995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[412997,413002]},{"pos":[413011,413023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and five, inclusive.","pos":[413025,413069]},{"pos":[413076,413083],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The value of the property defines whether the text, the image, or both should be displayed on the button.","pos":[413085,413190]},{"content":"This property also controls relative positions of text and image if both are displayed.The integer value that is returned contains the appearace of the button control as follows:","pos":[413191,413369]},{"content":"Value","pos":[413373,413378]},{"content":"Description","pos":[413381,413392]},{"content":"0","pos":[413527,413528]},{"content":"Text only","pos":[413535,413544]},{"content":"1","pos":[413604,413605]},{"content":"Image Only","pos":[413612,413622]},{"content":"2","pos":[413681,413682]},{"content":"Text and image; the image is displayed below the text.","pos":[413689,413743]},{"content":"3","pos":[413758,413759]},{"content":"Text and image; the image is displayed above the text.","pos":[413766,413820]},{"content":"4","pos":[413835,413836]},{"content":"Text and image; the image is displayed to the left of the text.","pos":[413843,413906]},{"content":"5","pos":[413912,413913]},{"content":"Text and image; the image is displayed to the right of the text.","pos":[413920,413984]},{"pos":[413992,414014],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[414016,414050]},{"pos":[414117,414127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[414129,414134]},{"content":"The number of lines to use to determine the height.","pos":[414137,414188]},{"content":"lines","pos":[414200,414205]},{"content":"The number of lines to use to determine the height.","pos":[414208,414259]},{"pos":[414266,414278],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[414280,414326]},{"pos":[414332,414354],"content":"Method canAddDataField","linkify":"Method canAddDataField","nodes":[{"content":"Method canAddDataField","pos":[0,22]}]},{"pos":[414450,414460],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[414462,414474]},{"content":"fieldId","pos":[414488,414495]},{"content":"arrayIndex","pos":[414509,414519]},{"pos":[414528,414540],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[414546,414563],"content":"Method canContain","linkify":"Method canContain","nodes":[{"content":"Method canContain","pos":[0,17]}]},{"pos":[414622,414632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[414634,414641]},{"pos":[414650,414662],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[414668,414687],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[414689,414732]},{"pos":[414781,414791],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[414793,414798]},{"pos":[414807,414819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[414821,414883]},{"pos":[414890,414897],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[414899,415003]},{"content":"Value","pos":[415007,415012]},{"content":"Description","pos":[415015,415026]},{"content":"0","pos":[415073,415074]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415081,415094],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[415106,415107]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415114,415130],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[415139,415140]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415147,415162],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[415172,415174]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415180,415192],"source":"MAC\\_CHARSET"},{"content":"128","pos":[415205,415208]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415213,415230],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[415238,415241]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415246,415261],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[415271,415274]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415279,415294],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[415304,415307]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415312,415332],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[415337,415340]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415345,415359],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[415370,415373]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415378,415394],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[415403,415406]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415411,415430],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[415436,415439]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415444,415459],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[415469,415472]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415477,415493],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[415502,415505]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415510,415529],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[415535,415538]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415543,415555],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[415567,415655]},{"content":"Value","pos":[415659,415664]},{"content":"Description","pos":[415667,415678]},{"content":"130","pos":[415713,415716]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415721,415735],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[415739,415825]},{"content":"Value","pos":[415829,415834]},{"content":"Description","pos":[415837,415848]},{"content":"177","pos":[415885,415888]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415893,415908],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[415913,415916]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[415921,415936],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[415940,416017]},{"content":"Value","pos":[416021,416026]},{"content":"Description","pos":[416029,416040]},{"content":"222","pos":[416073,416076]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[416081,416094],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[416098,416177]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[416178,416269],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[416270,416384]},{"pos":[416390,416408],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[416410,416455]},{"pos":[416503,416513],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[416515,416520]},{"pos":[416529,416541],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[416543,416586]},{"pos":[416593,416600],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[416602,416663]},{"content":"Value","pos":[416667,416672]},{"content":"Style","pos":[416675,416680]},{"content":"0","pos":[416735,416736]},{"content":"Default","pos":[416743,416750]},{"content":"1","pos":[416769,416770]},{"content":"The Windows palette","pos":[416777,416796]},{"content":"2","pos":[416803,416804]},{"content":"The true-color scheme","pos":[416811,416832]},{"pos":[416840,416863],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[416865,416932]},{"pos":[417015,417025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[417027,417032]},{"content":"The ID of the configuration key to assign to the control; optional.","pos":[417035,417102]},{"pos":[417109,417121],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[417123,417195]},{"pos":[417202,417209],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[417211,417292]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[417293,417386]},{"pos":[417392,417417],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[417419,417515]},{"pos":[417560,417572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[417574,417660]},{"pos":[417667,417674],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[417676,417725]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[417726,417874]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[417875,418009]},{"pos":[418015,418030],"content":"Method contains","linkify":"Method contains","nodes":[{"content":"Method contains","pos":[0,15]}]},{"pos":[418087,418097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[418099,418106]},{"pos":[418115,418127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[418133,418152],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[418190,418202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[418208,418225],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"pos":[418282,418292],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[418294,418303]},{"pos":[418312,418324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[418330,418355],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[418357,418435]},{"pos":[418490,418500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[418502,418507]},{"content":"The string that contains the country/region codes to set; optional.","pos":[418510,418577]},{"pos":[418584,418596],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[418598,418663]},{"pos":[418669,418692],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[418694,418819]},{"pos":[418872,418882],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[418884,418889]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[418892,418966]},{"pos":[418973,418985],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[418987,419099]},{"pos":[419106,419113],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[419115,419242]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[419243,419336]},{"pos":[419342,419362],"content":"Method defaultButton","linkify":"Method defaultButton","nodes":[{"content":"Method defaultButton","pos":[0,20]}]},{"content":"Determines whether the button should be the default button in the form.","pos":[419364,419435]},{"pos":[419493,419503],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419505,419510]},{"pos":[419519,419531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the button should be the default button; otherwise, false.","pos":[419533,419599]},{"pos":[419605,419625],"content":"Method disabledImage","linkify":"Method disabledImage","nodes":[{"content":"Method disabledImage","pos":[0,20]}]},{"content":"Gets or sets the disabled image of the button.","pos":[419627,419673]},{"pos":[419723,419733],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[419735,419740]},{"pos":[419749,419761],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The full name of an image file.","pos":[419763,419794]},{"content":"The system supports all of the GDI-supported image formats.","pos":[419795,419854]},{"pos":[419861,419868],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property has precedence over the disabledResource property.","pos":[419870,419934]},{"content":"It is used if both of these properties are set.","pos":[419935,419982]},{"pos":[419988,420016],"content":"Method disabledImageLocation","linkify":"Method disabledImageLocation","nodes":[{"content":"Method disabledImageLocation","pos":[0,28]}]},{"pos":[420074,420084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420086,420091]},{"pos":[420100,420112],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[420118,420141],"content":"Method disabledResource","linkify":"Method disabledResource","nodes":[{"content":"Method disabledResource","pos":[0,23]}]},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[420143,420221]},{"pos":[420274,420284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420286,420291]},{"pos":[420300,420312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resource ID of the image to use as the disabled button image.","pos":[420314,420379]},{"content":"Both icon and bitmap images are supported.","pos":[420380,420422]},{"pos":[420428,420448],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[420450,420617]},{"pos":[420667,420677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[420679,420684]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[420687,420761]},{"pos":[420768,420780],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[420782,420910]},{"pos":[420916,420931],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[420933,421014]},{"pos":[421059,421069],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[421071,421076]},{"content":"An Integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[421079,421157]},{"pos":[421164,421176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[421178,421238]},{"pos":[421245,421252],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave, the dragOver, and the dragOverEx to specify the behavior.","pos":[421254,421330]},{"pos":[421336,421351],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[421353,421447]},{"pos":[421541,421551],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[421553,421563]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[421566,421651]},{"content":"dragMode","pos":[421663,421671]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[421674,421759]},{"content":"x","pos":[421771,421772]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[421775,421860]},{"content":"y","pos":[421872,421873]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[421876,421961]},{"pos":[421968,421980],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[421982,422047]},{"pos":[422053,422070],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[422072,422168]},{"pos":[422258,422268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[422270,422280]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[422283,422368]},{"content":"dragMode","pos":[422380,422388]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[422391,422476]},{"content":"x","pos":[422488,422489]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[422492,422577]},{"content":"y","pos":[422589,422590]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[422593,422678]},{"pos":[422685,422697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[422699,422764]},{"pos":[422770,422785],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[422787,422857]},{"pos":[422891,422903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[422905,423036]},{"pos":[423042,423056],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[423058,423109]},{"pos":[423161,423171],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423173,423178]},{"content":"A Boolean value that indicates whether the control is enabled; optional.","pos":[423181,423253]},{"pos":[423260,423272],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[423274,423322]},{"pos":[423329,423336],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[423338,423413]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[423414,423509]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[423510,423644]},{"pos":[423650,423661],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[423663,423720]},{"pos":[423761,423771],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423773,423778]},{"pos":[423787,423799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[423801,423856]},{"pos":[423862,423877],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[423879,423936]},{"pos":[423981,423991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[423993,423998]},{"pos":[424007,424019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[424021,424054]},{"pos":[424060,424083],"content":"Method forcedToOverflow","linkify":"Method forcedToOverflow","nodes":[{"content":"Method forcedToOverflow","pos":[0,23]}]},{"pos":[424144,424154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424156,424161]},{"pos":[424170,424182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[424188,424210],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[424212,424263]},{"pos":[424315,424325],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424327,424332]},{"pos":[424341,424353],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[424355,424399]},{"pos":[424406,424413],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[424415,424483]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[424489,424559]},{"content":"The second byte contains a value for green.","pos":[424564,424607]},{"content":"The third byte contains a value for blue.","pos":[424612,424653]},{"content":"The high-order byte must be zero.","pos":[424658,424691]},{"content":"The maximum value for a single byte is 255.","pos":[424696,424739]},{"pos":[424745,424762],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[424764,424852]},{"pos":[424905,424915],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[424917,424920]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[424923,424993]},{"pos":[425000,425012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[425014,425081]},{"pos":[425087,425108],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[425110,425165]},{"pos":[425209,425221],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[425223,425286]},{"pos":[425292,425305],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[425307,425346]},{"pos":[425399,425409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[425411,425416]},{"content":"An Integer that indicates how the height is calculated; optional.","pos":[425419,425484]},{"content":"mode","pos":[425496,425500]},{"content":"An Integer that indicates how the height is calculated; optional.","pos":[425503,425568]},{"pos":[425575,425587],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[425589,425625]},{"pos":[425632,425639],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[425641,425694]},{"content":"Calculate the height according to the following table:","pos":[425695,425749]},{"content":"Mode","pos":[425753,425757]},{"content":"Height calculation","pos":[425771,425789]},{"content":"-1 Exact","pos":[425977,425985]},{"content":"The exact height in pixels of the controls is used.","pos":[425995,426046]},{"content":"0 Auto","pos":[426089,426095]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[426107,426196]},{"content":"1 Column height","pos":[426201,426216]},{"content":"The layout of the form determines the height of the control.","pos":[426219,426279]},{"content":"The height and height calculation mode can be set separately.","pos":[426312,426373]},{"pos":[426379,426396],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[426398,426460]},{"pos":[426507,426517],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426519,426524]},{"content":"An integer value that indicates how control height is calculated; optional.","pos":[426527,426602]},{"pos":[426609,426621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[426623,426644]},{"pos":[426651,426658],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[426660,426714]},{"content":"Mode","pos":[426718,426722]},{"content":"Height calculation","pos":[426734,426752]},{"content":"Exact","pos":[426938,426943]},{"content":"The exact height in pixels of the controls is used.","pos":[426954,427005]},{"content":"Auto","pos":[427048,427052]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[427064,427153]},{"content":"Column height","pos":[427158,427171]},{"content":"The layout of the form determines the height of the control.","pos":[427174,427234]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[427267,427352]},{"pos":[427358,427376],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[427378,427417]},{"pos":[427465,427475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427477,427482]},{"content":"An Integer that specifies the height in pixels; optional.","pos":[427485,427542]},{"pos":[427549,427561],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[427563,427584]},{"pos":[427591,427598],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[427600,427690]},{"pos":[427696,427712],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[427714,427754]},{"pos":[427789,427801],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[427803,427891]},{"pos":[427898,427905],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[427907,427977]},{"content":"Use the helpText method to set the value of the Help text.","pos":[427978,428036]},{"pos":[428042,428057],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[428059,428163]},{"pos":[428208,428218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428220,428225]},{"content":"The value that is assigned as the Help text for the control.","pos":[428228,428288]},{"pos":[428295,428307],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[428309,428364]},{"pos":[428371,428378],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[428380,428448]},{"content":"The Help text must not exceed 250 characters.","pos":[428449,428494]},{"pos":[428500,428522],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[428524,428587]},{"pos":[428639,428649],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428651,428656]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[428659,428726]},{"pos":[428733,428745],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[428747,428797]},{"pos":[428803,428814],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[428816,428861]},{"pos":[428891,428903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[428905,428932]},{"pos":[428939,428946],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[428948,428992]},{"pos":[428998,429018],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[429068,429078],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[429080,429085]},{"pos":[429094,429106],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[429112,429130],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[429171,429183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[429189,429207],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[429209,429275]},{"pos":[429316,429328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[429330,429381]},{"pos":[429388,429395],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[429397,429465]},{"pos":[429471,429490],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[429492,429559]},{"pos":[429601,429613],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[429615,429667]},{"pos":[429673,429698],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[429700,429799]},{"pos":[429868,429878],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[429880,429897]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[429900,430028]},{"pos":[430035,430047],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[430049,430208]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[430209,430398]},{"pos":[430405,430412],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[430414,430491]},{"content":"FormAllowUserSetup::No 0","pos":[430831,430855]},{"content":"No changes can be made to the control.","pos":[430866,430904]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[430905,430994]},{"content":"FormAllowUserSetup::Restricted 1","pos":[430999,431031]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[431034,431126]},{"content":"The user cannot move the control.","pos":[431127,431160]},{"content":"FormAllowUserSetup::Yes 2","pos":[431167,431192]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[431202,431294]},{"content":"The user can also move the control.","pos":[431295,431330]},{"content":"If the clicked method is overridden, the user is limited to only restricted customization.","pos":[431334,431424]},{"pos":[431430,431443],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[431494,431504],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[431506,431511]},{"pos":[431520,431532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[431538,431551],"content":"Method keyTip","linkify":"Method keyTip","nodes":[{"content":"Method keyTip","pos":[0,13]}]},{"pos":[431594,431604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[431606,431611]},{"pos":[431620,431632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[431638,431649],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[431651,431715]},{"pos":[431766,431776],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[431778,431783]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[431786,431872]},{"content":"mode","pos":[431884,431888]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[431891,431977]},{"pos":[431984,431996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[431998,432049]},{"pos":[432055,432072],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[432119,432129],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432131,432136]},{"pos":[432145,432157],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[432163,432178],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[432180,432241]},{"pos":[432286,432296],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432298,432303]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[432306,432392]},{"pos":[432399,432411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[432413,432469]},{"pos":[432475,432491],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[432493,432557]},{"pos":[432603,432613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432615,432620]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[432623,432704]},{"pos":[432711,432723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[432725,432776]},{"pos":[432782,432802],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[432804,432857]},{"pos":[432915,432925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432927,432932]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[432935,433029]},{"pos":[433036,433048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[433050,433123]},{"pos":[433129,433149],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[433151,433208]},{"pos":[433300,433310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[433312,433313]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[433316,433377]},{"content":"y","pos":[433389,433390]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[433393,433454]},{"content":"button","pos":[433466,433472]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[433475,433536]},{"content":"Ctrl","pos":[433548,433552]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[433555,433616]},{"content":"Shift","pos":[433628,433633]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[433636,433697]},{"pos":[433704,433716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[433718,433757]},{"pos":[433764,433771],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[433773,433877]},{"pos":[433883,433899],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[433901,433966]},{"pos":[434054,434064],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[434066,434067]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[434070,434131]},{"content":"y","pos":[434143,434144]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[434147,434208]},{"content":"button","pos":[434220,434226]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[434229,434290]},{"content":"Ctrl","pos":[434302,434306]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[434309,434370]},{"content":"Shift","pos":[434382,434387]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[434390,434451]},{"pos":[434458,434470],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[434472,434511]},{"pos":[434518,434525],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[434527,434631]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[434632,434767]},{"pos":[434773,434789],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[434791,434856]},{"pos":[434944,434954],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[434956,434957]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[434960,435021]},{"content":"y","pos":[435033,435034]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435037,435098]},{"content":"button","pos":[435110,435116]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435119,435180]},{"content":"Ctrl","pos":[435192,435196]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435199,435260]},{"content":"Shift","pos":[435272,435277]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435280,435341]},{"pos":[435348,435360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[435362,435401]},{"pos":[435408,435415],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[435417,435521]},{"pos":[435527,435541],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[435543,435615]},{"pos":[435701,435711],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[435713,435714]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435717,435778]},{"content":"y","pos":[435790,435791]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435794,435855]},{"content":"button","pos":[435867,435873]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435876,435937]},{"content":"Ctrl","pos":[435949,435953]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[435956,436017]},{"content":"Shift","pos":[436029,436034]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[436037,436098]},{"pos":[436105,436117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[436119,436158]},{"pos":[436165,436172],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[436174,436278]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[436279,436414]},{"pos":[436420,436438],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"pos":[436509,436519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[436521,436530]},{"content":"insertAfterId","pos":[436544,436557]},{"pos":[436566,436578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[436584,436602],"content":"Method multiSelect","linkify":"Method multiSelect","nodes":[{"content":"Method multiSelect","pos":[0,18]}]},{"pos":[436650,436660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[436662,436667]},{"pos":[436676,436688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[436694,436705],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[436707,436842]},{"pos":[436883,436893],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[436895,436900]},{"content":"The name to assign to the control.","pos":[436903,436937]},{"pos":[436944,436956],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[436958,437022]},{"pos":[437029,437036],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[437038,437132]},{"content":"It must start with a letter.","pos":[437138,437166]},{"content":"It cannot exceed 250 characters.","pos":[437171,437203]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[437208,437262],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[437267,437307]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[437312,437422]},{"pos":[437428,437451],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[437504,437514],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437516,437521]},{"pos":[437530,437542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437548,437566],"content":"Method needsRecord","linkify":"Method needsRecord","nodes":[{"content":"Method needsRecord","pos":[0,18]}]},{"pos":[437614,437624],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437626,437631]},{"pos":[437640,437652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437658,437676],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[437724,437734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437736,437741]},{"pos":[437750,437762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437768,437789],"content":"Method normalResource","linkify":"Method normalResource","nodes":[{"content":"Method normalResource","pos":[0,21]}]},{"pos":[437840,437850],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437852,437857]},{"pos":[437866,437878],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437884,437911],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[437963,437975],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437981,438001],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[438003,438048]},{"pos":[438095,438107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[438109,438144]},{"pos":[438150,438164],"content":"Method primary","linkify":"Method primary","nodes":[{"content":"Method primary","pos":[0,14]}]},{"pos":[438216,438226],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438228,438233]},{"pos":[438242,438254],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438260,438278],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[438326,438336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438338,438343]},{"pos":[438352,438364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438370,438387],"content":"Method saveRecord","linkify":"Method saveRecord","nodes":[{"content":"Method saveRecord","pos":[0,17]}]},{"pos":[438442,438452],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438454,438459]},{"pos":[438468,438480],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438486,438504],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[438506,438565]},{"pos":[438633,438643],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438645,438650]},{"content":"The ID of the security key to assign to the control; optional.","pos":[438653,438715]},{"pos":[438722,438734],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[438736,438835]},{"pos":[438841,438856],"content":"Method shortkey","linkify":"Method shortkey","nodes":[{"content":"Method shortkey","pos":[0,15]}]},{"pos":[438901,438911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438913,438918]},{"pos":[438927,438939],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438945,438967],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[438969,439009]},{"pos":[439064,439074],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[439076,439086]},{"content":"The ID of the menu to show.","pos":[439089,439116]},{"pos":[439123,439135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[439137,439196]},{"pos":[439202,439221],"content":"Method showShortCut","linkify":"Method showShortCut","nodes":[{"content":"Method showShortCut","pos":[0,19]}]},{"pos":[439278,439288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[439290,439295]},{"pos":[439304,439316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[439322,439333],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[439335,439462]},{"pos":[439511,439521],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[439523,439528]},{"content":"The value to assign to the skip property of the control; optional.","pos":[439531,439597]},{"pos":[439604,439616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise false.","pos":[439618,439723]},{"pos":[439730,439737],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[439739,439934]},{"pos":[439940,439952],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[439994,440004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[440006,440011]},{"pos":[440020,440032],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[440038,440049],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[440090,440100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[440102,440107]},{"pos":[440116,440128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[440134,440148],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[440150,440193]},{"pos":[440226,440238],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[440240,440342]},{"pos":[440349,440356],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[440358,440430]},{"pos":[440436,440446],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[440448,440510]},{"pos":[440560,440570],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[440572,440577]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[440580,440664]},{"content":"mode","pos":[440676,440680]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[440683,440767]},{"pos":[440774,440786],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[440788,440837]},{"pos":[440843,440859],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[440905,440915],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[440917,440922]},{"pos":[440931,440943],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[440949,440963],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[440965,441024]},{"pos":[441068,441078],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[441080,441085]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[441088,441172]},{"pos":[441179,441191],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[441193,441247]},{"pos":[441253,441268],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[441270,441332]},{"pos":[441377,441387],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[441389,441394]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[441397,441476]},{"pos":[441483,441495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[441497,441546]},{"pos":[441552,441563],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[441604,441614],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[441616,441621]},{"pos":[441630,441642],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[441648,441664],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[441666,441733]},{"pos":[441787,441797],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[441799,441804]},{"content":"The value to assign to the underline property of the control; optional.","pos":[441807,441878]},{"pos":[441885,441897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise false.","pos":[441899,441962]},{"pos":[441968,441995],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[442059,442069],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[442071,442075]},{"pos":[442084,442096],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[442102,442117],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[442119,442162]},{"pos":[442207,442217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[442219,442224]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[442227,442299]},{"pos":[442306,442318],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[442320,442350]},{"pos":[442356,442375],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[442377,442425]},{"pos":[442474,442484],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[442486,442491]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[442494,442571]},{"pos":[442578,442590],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[442592,442627]},{"pos":[442633,442653],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[442655,442714]},{"pos":[442764,442774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[442776,442781]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[442784,442872]},{"pos":[442879,442891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[442893,442939]},{"pos":[442945,442963],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[442965,443048]},{"pos":[443096,443106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[443108,443113]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[443116,443196]},{"pos":[443203,443215],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[443217,443273]},{"pos":[443279,443296],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[443298,443350]},{"pos":[443397,443407],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[443409,443414]},{"content":"The user height for the control; optional.","pos":[443417,443459]},{"pos":[443466,443478],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[443480,443519]},{"pos":[443525,443540],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[443542,443624]},{"pos":[443669,443679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[443681,443686]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[443689,443768]},{"pos":[443775,443787],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[443789,443844]},{"pos":[443851,443858],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[443860,444030]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[444031,444106]},{"content":"This method lets you programmatically determine and set the value.","pos":[444107,444173]},{"pos":[444179,444202],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[444204,444260]},{"pos":[444313,444323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[444325,444330]},{"content":"The organization container to set for the control; optional.","pos":[444333,444393]},{"pos":[444400,444412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[444414,444457]},{"pos":[444463,444484],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[444486,444540]},{"pos":[444591,444601],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[444603,444608]},{"content":"The organization sibling to set for the control; optional.","pos":[444611,444669]},{"pos":[444676,444688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[444690,444731]},{"pos":[444737,444758],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[444760,444809]},{"pos":[444860,444870],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[444872,444877]},{"content":"The user label text to set for the control; optional.","pos":[444880,444933]},{"pos":[444940,444952],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[444954,444990]},{"pos":[444996,445020],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[445022,445075]},{"pos":[445129,445139],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[445141,445146]},{"content":"The user security level to set for the control; optional.","pos":[445149,445206]},{"pos":[445213,445225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[445227,445267]},{"pos":[445273,445288],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[445290,445438]},{"pos":[445483,445493],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[445495,445500]},{"content":"The value to assign to the userSkip property; optional.","pos":[445503,445558]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[445559,445654]},{"pos":[445661,445673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[445675,445744]},{"pos":[445750,445766],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[445768,445845]},{"pos":[445891,445901],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[445903,445908]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[445911,445977]},{"pos":[445984,445996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[445998,446127]},{"pos":[446134,446141],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[446143,446237]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[446238,446354],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[446355,446505]},{"pos":[446511,446531],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[446589,446599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[446601,446606]},{"pos":[446615,446627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[446633,446645],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[446695,446705],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[446707,446712]},{"pos":[446721,446733],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[446739,446761],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[446763,446824]},{"pos":[446893,446903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[446905,446910]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[446913,446990]},{"content":"mode","pos":[447002,447006]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[447009,447086]},{"pos":[447093,447105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[447107,447155]},{"pos":[447161,447187],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[447189,447248]},{"pos":[447313,447323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[447325,447329]},{"pos":[447338,447350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[447352,447406]},{"pos":[447412,447439],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[447441,447502]},{"pos":[447559,447569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[447571,447576]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[447579,447657]},{"pos":[447664,447676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[447678,447726]},{"pos":[447732,447746],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[447748,447818]},{"pos":[447870,447880],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[447882,447887]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[447890,447962]},{"pos":[447969,447981],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[447983,448032]},{"pos":[448038,448050],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[448052,448090]},{"pos":[448142,448152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[448154,448159]},{"content":"An Integer that indicates how the width is calculated; optional.","pos":[448162,448226]},{"content":"mode","pos":[448238,448242]},{"content":"An Integer that indicates how the width is calculated; optional.","pos":[448245,448309]},{"pos":[448316,448328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[448330,448365]},{"pos":[448372,448379],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[448381,448434]},{"content":"Calculate the width according to the following table:","pos":[448435,448488]},{"content":"Mode","pos":[448492,448496]},{"content":"Width calculation","pos":[448509,448526]},{"content":"-1 Exact","pos":[448712,448720]},{"content":"The exact width in pixels of the controls is used.","pos":[448729,448779]},{"content":"0 Auto","pos":[448822,448828]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[448839,448927]},{"content":"1 Column width","pos":[448932,448946]},{"content":"The layout of the form determines the width of the control.","pos":[448949,449008]},{"content":"The width and width calculation mode can be set separately.","pos":[449041,449100]},{"pos":[449106,449122],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[449124,449186]},{"pos":[449232,449242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[449244,449249]},{"content":"An integer value that indicates how control width is calculated; optional.","pos":[449252,449326]},{"pos":[449333,449345],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[449347,449408]},{"pos":[449415,449422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[449424,449477]},{"content":"Mode","pos":[449481,449485]},{"content":"Width calculation","pos":[449496,449513]},{"content":"Exact","pos":[449697,449702]},{"content":"The exact width in pixels of the controls is used.","pos":[449712,449762]},{"content":"Auto","pos":[449805,449809]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[449820,449908]},{"content":"Column width","pos":[449913,449925]},{"content":"The layout of the form determines the width of the control.","pos":[449928,449987]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[450020,450103]},{"pos":[450109,450126],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[450128,450166]},{"pos":[450213,450223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[450225,450230]},{"content":"An integer value that specifies the width in pixels; optional.","pos":[450233,450295]},{"pos":[450302,450314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[450316,450351]},{"pos":[450358,450365],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[450367,450440]},{"pos":[450446,450457],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[450459,450557]},{"pos":[450643,450653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[450655,450665]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[450668,450753]},{"content":"dragMode","pos":[450765,450773]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[450776,450861]},{"content":"x","pos":[450873,450874]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[450877,450962]},{"content":"y","pos":[450974,450975]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[450978,451063]},{"pos":[451069,451090],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[451092,451161]},{"pos":[451223,451233],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[451235,451240]},{"content":"The preferred height of the control.","pos":[451243,451279]},{"content":"height","pos":[451291,451297]},{"content":"The preferred height of the control.","pos":[451300,451336]},{"pos":[451342,451365],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[451367,451408]},{"pos":[451450,451463],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[451465,451565]},{"pos":[451647,451657],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[451659,451669]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[451672,451757]},{"content":"dragMode","pos":[451769,451777]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[451780,451865]},{"content":"x","pos":[451877,451878]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[451881,451966]},{"content":"y","pos":[451978,451979]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[451982,452067]},{"pos":[452073,452090],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[452174,452184],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[452186,452192]},{"content":"e","pos":[452206,452207]},{"pos":[452215,452244],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[452362,452372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[452374,452390]},{"content":"objectMethodToCall","pos":[452404,452422]},{"content":"overrideObject","pos":[452436,452450]},{"pos":[452458,452472],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[452505,452523],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[452525,452596]},{"pos":[452647,452657],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[452659,452668]},{"content":"The string value to use to filter data; optional.","pos":[452671,452720]},{"pos":[452726,452741],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[452743,452789]},{"pos":[452823,452837],"content":"Method clicked","linkify":"Method clicked","nodes":[{"content":"Method clicked","pos":[0,14]}]},{"pos":[452870,452881],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[452883,452935]},{"pos":[452965,452980],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[452982,453012]},{"pos":[453046,453056],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[453058,453091]},{"pos":[453120,453136],"content":"Method OnClicked","linkify":"Method OnClicked","nodes":[{"content":"Method OnClicked","pos":[0,16]}]},{"pos":[453219,453229],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[453231,453237]},{"content":"e","pos":[453251,453252]},{"pos":[453260,453278],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[453363,453373],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[453375,453381]},{"content":"e","pos":[453395,453396]},{"pos":[453404,453420],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[453422,453518]},{"pos":[453553,453567],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[453569,453609]},{"pos":[453642,453656],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[453658,453719]},{"pos":[453753,453760],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[453762,453890]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[453891,453995]},{"pos":[454001,454018],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[454020,454074]},{"pos":[454110,454127],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[454129,454199]},{"pos":[454289,454299],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[454301,454302]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[454305,454366]},{"content":"y","pos":[454378,454379]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[454382,454443]},{"content":"button","pos":[454455,454461]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[454464,454525]},{"content":"Ctrl","pos":[454537,454541]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[454544,454605]},{"content":"Shift","pos":[454617,454622]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[454625,454686]},{"pos":[454692,454708],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[454710,454752]},{"pos":[454787,454799],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[454801,454855]},{"pos":[454886,454907],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[454909,454930]},{"pos":[454969,454994],"content":"Class FormNotifyEventArgs","linkify":"Class FormNotifyEventArgs","nodes":[{"content":"Class FormNotifyEventArgs","pos":[0,25]}]},{"pos":[455045,455052],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[455058,455066],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[455072,455079],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[455083,455089]},{"content":"Description","pos":[455157,455168]},{"content":"public FormDataSource formDataSource(<ph id=\"ph1\">\\[</ph>FormDataSource formDataSource<ph id=\"ph2\">\\]</ph>)","pos":[455361,455432],"source":"public FormDataSource formDataSource(\\[FormDataSource formDataSource\\])"},{"content":"public void new()","pos":[455500,455517]},{"content":"Initializes a new instance of the FormNotifyEventArgs class.","pos":[455574,455634]},{"pos":[455642,455663],"content":"Method formDataSource","linkify":"Method formDataSource","nodes":[{"content":"Method formDataSource","pos":[0,21]}]},{"pos":[455745,455755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formDataSource","pos":[455757,455771]},{"pos":[455780,455792],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[455798,455808],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the FormNotifyEventArgs class.","pos":[455810,455870]}],"content":"---\n# required metadata\n\ntitle: F Classes - FormListBoxControl to FormNotifyEventArgs | Microsoft Docs\ndescription: API reference for classes from FormListBoxControl to FormNotifyEventArgs.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 2016-03-08 23:44:57\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 63763\nms.assetid: 40223b06-435e-45c8-862d-9f419c5bcec6\nms.region: Global\n# ms.industry: \nms.author: robinr\n\n---\n\n# F Classes - FormListBoxControl to FormNotifyEventArgs\n\nAPI reference for classes from FormListBoxControl to FormNotifyEventArgs.\n\nClass FormListBoxControl\n------------------------\n\n    class FormListBoxControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font used to output text in the control.                                                                                                     |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the names of configuration keys that are checked for the control.                                                                        |\n| public int count()                                                                                          |                                                                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source to be used by the control or the form.                                                                                                       |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int doubleClick()                                                                                    |                                                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public EnumId enumType(\\[EnumId value\\])                                                                    |                                                                                                                                                                         |\n| public EnumId enumTypeValue()                                                                               |                                                                                                                                                                         |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                                                         |\n| public int find(str string)                                                                                 |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public str getText(int index)                                                                               |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public boolean hideFirstEntry(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Returns the Windows handle (hWnd) of the control.                                                                                                                       |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Returns a value that indicates whether the control allows for the specified level of customization.                                                                     |\n| public boolean isValid()                                                                                    |                                                                                                                                                                         |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public int item(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public int items(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                        |                                                                                                                                                                         |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                            |                                                                                                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                              |                                                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public boolean modified()                                                                                   |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public str previewPartRef(\\[str value\\])                                                                    |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int selection(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int selectionChange()                                                                                |                                                                                                                                                                         |\n| public int selectText(str string)                                                                           |                                                                                                                                                                         |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves a tooltip for the control.                                                                                                                                    |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                                                     |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels.                                                                                                                     |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void insert(str string, int index)                                                                   |                                                                                                                                                                         |\n| public void delete(str string)                                                                              |                                                                                                                                                                         |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void add(str string)                                                                                 |                                                                                                                                                                         |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void undo()                                                                                          |                                                                                                                                                                         |\n| public void endUpdate()                                                                                     |                                                                                                                                                                         |\n| public void clear()                                                                                         |                                                                                                                                                                         |\n| public void beginUpdate()                                                                                   |                                                                                                                                                                         |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                   |                                                                                                                                                                         |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| private void OnSelectionChanging(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                        |                                                                                                                                                                         |\n| public void lookup()                                                                                        |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| private void OnSelectionChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                         |                                                                                                                                                                         |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                               |                                                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the property; optional.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key being assigned to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the names of configuration keys that are checked for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list of strings that contain the configuration key names.\n\n#### Remarks\n\nThe list that is retrieved does not contain duplicates. It applies to all form controls. If the control is data-bound, the list also contains the configuration key of the table and field. The configuration keys on these elements are also added to the list if the control has non-empty values in the properties, extended data type, or Enumtype methods. Because of implementation details for the FormBuildMenuButtonControl class, the list does not contain the configuration keys that found on the specified menu item. However, the list does include these if the method is invoked on the FormMenuButtonControl class.\n\n### Method count\n\n    public int count()\n\n#### Return Value\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method doubleClick\n\n    public int doubleClick()\n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave, the dragOver, and the dragOverEx to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method enumType\n\n    public EnumId enumType([EnumId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method enumTypeValue\n\n    public EnumId enumTypeValue()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method find\n\n    public int find(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method getText\n\n    public str getText(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer data type that specifies how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer data type that specifies how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer data type value that specifies how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer data type that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hideFirstEntry\n\n    public boolean hideFirstEntry([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nReturns the Windows handle (hWnd) of the control.\n\n    public int hWnd()\n\n#### Return Value\n\nA 32-bit handle (hWnd).\n\n#### Remarks\n\nThis handle applies to all controls. This is useful when you work with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise false. For this method to return true, the AllowUserSetup property of the design and all parent containers must permit the level of access that is specified by the neededSetupRights parameter.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\n### Method isValid\n\n    public boolean isValid()\n\n#### Return Value\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method item\n\n    public int item([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method items\n\n    public int items([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelMouseDblClick\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseDown\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseUp\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method selection\n\n    public int selection([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method selectionChange\n\n    public int selectionChange()\n\n#### Return Value\n\n### Method selectText\n\n    public int selectText(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise false.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves a tooltip for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe text to show in the tooltip.\n\n#### Remarks\n\nWhenever the pointer hovers over the control, the tooltip is displayed to the user. This method can be overridden to present instructive text to the user about the values that are entered in the control.\n\n#### Examples\n\n    str tooltip() \n    { \n        return \"Account numbers of customers eligible for discount\"; \n    }\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise false.\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer data type that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer data type that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer data type value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer data type that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method insert\n\n    public void insert(str string, int index)\n\n#### Parameters\n\nstring  \n\n<!-- -->\n\nindex  \n\n### Method delete\n\n    public void delete(str string)\n\n#### Parameters\n\nstring  \n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method enter\n\n    public void enter()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method add\n\n    public void add(str string)\n\n#### Parameters\n\nstring  \n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method undo\n\n    public void undo()\n\n### Method endUpdate\n\n    public void endUpdate()\n\n### Method clear\n\n    public void clear()\n\n### Method beginUpdate\n\n    public void beginUpdate()\n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method OnSelectionChanging\n\n    private void OnSelectionChanging([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method lookup\n\n    public void lookup()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnSelectionChanged\n\n    private void OnSelectionChanged([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n## Class FormListColumn\n    class FormListColumn extends Object\n\nThe FormListColumn class provides list column functionality for a form.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                      | Description                                               |\n|-------------------------------------------------------------|-----------------------------------------------------------|\n| public FormListFormat format(\\[FormListFormat value\\])      |                                                           |\n| public int image(\\[int value\\])                             |                                                           |\n| public int order(\\[int value\\])                             |                                                           |\n| public int subItem(\\[int value\\])                           |                                                           |\n| public str text(\\[str value\\])                              |                                                           |\n| public str toString()                                       | Returns a string that contains the class handle and name. |\n| public int width(\\[int value\\])                             | Gets or sets the width of the control.                    |\n| public void new(\\[str Text\\], \\[int ColNo\\], \\[int Width\\]) | Initializes a new instance of the Object class.           |\n| public void finalize()                                      |                                                           |\n\n### Method format\n\n    public FormListFormat format([FormListFormat value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method image\n\n    public int image([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method order\n\n    public int order([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method subItem\n\n    public int subItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toString\n\nReturns a string that contains the class handle and name.\n\n    public str toString()\n\n#### Return Value\n\nA text representation of the class.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the width of the list column; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode             | Width calculation                                                                         |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 – Exact       | The exact width of the control in pixels is used.                                         |\n| 0 – Auto         | The width of the control is calculated automatically, and the value parameter is ignored. |\n| 1 – Column width | The layout of the form determines the width of the control.                               |\n\nThe width and the width calculation mode can be set separately.\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new([str Text], [int ColNo], [int Width])\n\n#### Parameters\n\nText  \n\n<!-- -->\n\nColNo  \n\n<!-- -->\n\nWidth  \n\n### Method finalize\n\n    public void finalize()\n\n## Class FormListControl\n    class FormListControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public int add(str Text, \\[int image\\], \\[int index\\])                                                      |                                                                                                                                                                         |\n| public boolean addColumn(int Idx, FormListColumn Column)                                                    |                                                                                                                                                                         |\n| public int addItem(FormListItem item)                                                                       |                                                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether the control is aligned with other controls.                                                                                                          |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can modify the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean arrangeItem(FormListArrange ArrangeMethod)                                                   |                                                                                                                                                                         |\n| public boolean autoArrange(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control background can be transparent.                                                                                                           |\n| public int beginDrag(int x, int y)                                                                          | Identifies when the user starts to move a form list control or an item in a form list control.                                                                          |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the font weight that is used fort text in the control.                                                                                                     |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public container calcControlSize(int chars, int lines)                                                      | Calculates the font size that is used for a form list control, based on the number of characters and the number of lines.                                               |\n| public boolean canScroll(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public boolean checkBox(\\[boolean value\\])                                                                  |                                                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public boolean columnHeader(\\[boolean value\\])                                                              | Sets or gets a Boolean data type value that indicates whether a form list control has a column header.                                                                  |\n| public boolean columnHeaderButton(\\[boolean value\\])                                                        | Sets or gets a Boolean data type value that indicates whether a form list control has a column header button.                                                           |\n| public boolean columnImages(\\[boolean value\\])                                                              | Sets or gets a Boolean data type value that indicates whether a form list control has column images.                                                                    |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are activated for a form list control.                                                                |\n| public int copyItem(int Item, int InsertAt)                                                                 | Copies a specified item in a form list control.                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public boolean delete(int Idx)                                                                              | Deletes a specified item from a form list control.                                                                                                                      |\n| public boolean deleteAll()                                                                                  | Deletes all the items from a form list control.                                                                                                                         |\n| public boolean deleteColumn(int Idx)                                                                        | Deletes a specified column in a form list control.                                                                                                                      |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Identifies when a user drags an object over an item within the bounds of a form list control.                                                                           |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when a user drags an item in a form list control.                                                                                  |\n| public boolean editLabels(\\[boolean value\\])                                                                | Indicates whether users can modify item names in a form list control.                                                                                                   |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public int ensureVisible(int Idx)                                                                           |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control.                                                                                                                            |\n| public FormListColumn getColumn(int Idx)                                                                    | Retrieves a FormListColumn object for a specified column in a form list control.                                                                                        |\n| public int getColumnCount()                                                                                 | Retrieves the number of columns in a form list control.                                                                                                                 |\n| public int getColumnWidth(int Idx)                                                                          | Retrieves the width of a column in a form list control.                                                                                                                 |\n| public int getCount()                                                                                       | Retrieves the number of items that are contained in a form list control.                                                                                                |\n| public int getCountPerPage()                                                                                |                                                                                                                                                                         |\n| public Imagelist getImagelist(\\[boolean GetLarge\\])                                                         |                                                                                                                                                                         |\n| public FormListItem getItem(int Idx, \\[int SubItem\\])                                                       | Retrieves a FormListItem object for an item in a form list control.                                                                                                     |\n| public container getItemPos(int Item)                                                                       | Retrieves the position of an item in a form list control.                                                                                                               |\n| public int getNextItem(FormListNext nextType, \\[int startIdx\\])                                             | Retrieves the number of the next item in a form list control.                                                                                                           |\n| public int getSelectedCount()                                                                               | Retrieves the number of items that are selected in a form list control.                                                                                                 |\n| public int getStringWidth(str Text)                                                                         |                                                                                                                                                                         |\n| public int getTopIndex()                                                                                    |                                                                                                                                                                         |\n| public boolean gridLines(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public boolean headerdragdrop(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public container hitTest(int x, int y)                                                                      |                                                                                                                                                                         |\n| public container hitTestSubItem(int x, int y)                                                               |                                                                                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Gets a value that indicates whether the control allows for the specified level of customization.                                                                        |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public int itemAlign(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public boolean itemChanging(int Idx, AnyType Data)                                                          |                                                                                                                                                                         |\n| public boolean keyDown(int vKey, boolean Ctrl, boolean Shift)                                               |                                                                                                                                                                         |\n| public boolean leave()                                                                                      | Identifies when a user moves focus away from a form list control.                                                                                                       |\n| public int left(int value, \\[int mode\\])                                                                    | Sets or returns the horizontal position of a form list control in pixels, and specifies how the position is calculated.                                                 |\n| public int leftMode(\\[int value\\])                                                                          | Sets or returns a value that indicates how the horizontal position of a form list control is calculated.                                                                |\n| public int leftValue(\\[int value\\])                                                                         | Sets or returns the horizontal position of a form list control in pixels.                                                                                               |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Identifies when a user presses the left mouse button.                                                                                                                   |\n| public int moveItem(int Item, int InsertAt)                                                                 | Moves a specified item in a form list control.                                                                                                                          |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean oneClickActivate(\\[boolean value\\])                                                          |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public boolean redrawItems(int idxFirst, int idxLast)                                                       | Updates a range of items in a form list control.                                                                                                                        |\n| public boolean rowSelect(\\[boolean value\\])                                                                 | Sets or gets a Boolean data type value that indicates whether a row in a form list control is selected when the row is clicked.                                         |\n| public boolean scroll(int dx, int dy)                                                                       |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public boolean selectionChanging(int Idx, AnyType Data)                                                     |                                                                                                                                                                         |\n| public boolean setColumn(int Idx, FormListColumn Column)                                                    |                                                                                                                                                                         |\n| public boolean setColumnWidth(int Idx, int Width)                                                           | Specifies the width of a column in a form list control.                                                                                                                 |\n| public boolean setItem(FormListItem item)                                                                   | Indicates whether an item is contained in a form list control.                                                                                                          |\n| public Imagelist setStateImagelist(Imagelist imageList)                                                     |                                                                                                                                                                         |\n| public int showContextMenu(int menuHandle)                                                                  | Identifies when a shortcut menu appears.                                                                                                                                |\n| public boolean showSelAlways(\\[boolean value\\])                                                             |                                                                                                                                                                         |\n| public boolean singleSelection(\\[boolean value\\])                                                           | Indicates whether multiple items can be selected in a form list control.                                                                                                |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean sortTextItems(\\[int column\\], \\[boolean ascending\\])                                         |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Sets or returns the vertical position of a form list control in pixels, and specifies how the position is calculated.                                                   |\n| public int topMode(\\[int value\\])                                                                           | Sets or returns a value that indicates how the vertical position for a form list control is calculated.                                                                 |\n| public int topValue(\\[int value\\])                                                                          | Sets or returns the vertical position of a form list control in pixels.                                                                                                 |\n| public boolean trackSelect(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public boolean twoClickActivate(\\[boolean value\\])                                                          |                                                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the value of the underline property for the text in the control.                                                                                        |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Sets or gets the amount of space above and below a form list control in pixels, and specifies how the space is calculated.                                              |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets or returns a value that indicates how the space above and below a form list control is calculated.                                                                 |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Sets or returns the amount of space above and below a form list control in pixels.                                                                                      |\n| public int viewType(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void selectionChanged(int Idx, AnyType Data)                                                         |                                                                                                                                                                         |\n| public void activateItem(int Idx)                                                                           |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                      | Identifies when the search begins for a specified text string.                                                                                                          |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void update(\\[int idx\\])                                                                             | Updates the control.                                                                                                                                                    |\n| public void endDrag()                                                                                       | Identifies when the user has finished moving a form list control.                                                                                                       |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void setImagelist(Imagelist imageList, \\[boolean SetLarge\\])                                         |                                                                                                                                                                         |\n| public void copy()                                                                                          | Identifies when a user performs a copy operation.                                                                                                                       |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void itemCopy(int Idx, int newIdx)                                                                   |                                                                                                                                                                         |\n| public void cut()                                                                                           | Identifies when the user performs a cut operation.                                                                                                                      |\n| public void itemMoved(int Idx, int newIdx)                                                                  |                                                                                                                                                                         |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| private void OnSelectionChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                         |                                                                                                                                                                         |\n| public void hotTrackItem(int Idx)                                                                           | Identifies when a user moves the mouse pointer over a form list control.                                                                                                |\n| public void setCount(int count)                                                                             |                                                                                                                                                                         |\n| public void dragLeave()                                                                                     | Identifies when a user drags an object out of the bounds of a form list control.                                                                                        |\n| public void itemDeleted(int Idx, AnyType Data)                                                              |                                                                                                                                                                         |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void setText(int Idx, str Text, \\[int SubItem\\])                                                     |                                                                                                                                                                         |\n| public void itemChanged(int Idx, AnyType Data)                                                              |                                                                                                                                                                         |\n| public void doubleClick()                                                                                   | Identifies when a user double-clicks an item in a form list control.                                                                                                    |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void allItemsDeleted()                                                                               | Identifies when all the items in a form list control are deleted.                                                                                                       |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Identifies when a user drops a form list control or an item in a form list control into a new position.                                                                 |\n| public void columnClicked(int Column)                                                                       | Identifies when a user clicks a column in a list view control in a form.                                                                                                |\n| public void getStateImagelist()                                                                             |                                                                                                                                                                         |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void setItemPos(int Item, int x, int y)                                                              | Sets the position of an item in a form list control.                                                                                                                    |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void context()                                                                                       | Identifies when the user opens a shortcut menu in a form list control.                                                                                                  |\n| public void beginEditLabel(int Idx)                                                                         |                                                                                                                                                                         |\n| public void itemInserted(int Idx, AnyType Data)                                                             |                                                                                                                                                                         |\n\n### Method add\n\n    public int add(str Text, [int image], [int index])\n\n#### Parameters\n\nText  \n\n<!-- -->\n\nimage  \n\n<!-- -->\n\nindex  \n\n#### Return Value\n\n### Method addColumn\n\n    public boolean addColumn(int Idx, FormListColumn Column)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nColumn  \n\n#### Return Value\n\n### Method addItem\n\n    public int addItem(FormListItem item)\n\n#### Parameters\n\nitem  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether the control is aligned with other controls.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether a form list control is aligned with other controls.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned based on the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can modify the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean data type that indicates whether data can be modified.\n\n#### Return Value\n\ntrue if the control can be modified; otherwise, false.\n\n#### Remarks\n\nIf this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method arrangeItem\n\n    public boolean arrangeItem(FormListArrange ArrangeMethod)\n\n#### Parameters\n\nArrangeMethod  \n\n#### Return Value\n\n### Method autoArrange\n\n    public boolean autoArrange([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean data type that indicates whether the system can declare a variable of the same name as a form list control.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n#### Examples\n\nThe following example shows a call to the autoDeclaration method that specifies that the system can declare a variable that has the same name as a form list control.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.autoDeclaration(true); \n    }\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the background color.\n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be 0 (zero).\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates the background style.\n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIdentifies when the user starts to move a form list control or an item in a form list control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn Integer data type that indicates the y-coordinate for the move event.\n\n<!-- -->\n\ny  \nAn Integer data type that indicates the y-coordinate for the move event.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTo override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click beginDrag. For information about best practices for forms and code, see No Code in Forms.\n\n### Method bold\n\nGets or sets the font weight that is used fort text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the font weight.\n\n#### Return Value\n\nAn integer value between 0 (zero) and 9, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 – Use the default font weight.\n-   1 – Thin.\n-   2 – Extra-light.\n-   3 – Light.\n-   4 – Normal.\n-   5 – Medium.\n-   6 – Semibold.\n-   7 – Bold.\n-   8 – Extra-bold.\n-   9 – Heavy.\n\n#### Examples\n\nThe following example shows a call to the bold method to set the font weight to 9, which indicates heavy.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        int boldLevel; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        boldLevel = formListControl.bold(9); \n    }\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value | Description |\n|-------|-------------|\n| 0     | Auto        |\n| 1     | 3D          |\n| 2     | Single line |\n| 3     | Flat        |\n| 4     | None        |\n\n### Method calcControlSize\n\nCalculates the font size that is used for a form list control, based on the number of characters and the number of lines.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nAn Integer data type that specifies the number of lines.\n\n<!-- -->\n\nlines  \nAn Integer data type that specifies the number of lines.\n\n#### Return Value\n\nA Container data type value that specifies the size of a form list control.\n\n### Method canScroll\n\n    public boolean canScroll([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the character set for the text font.\n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set, according to the following table.\n\n| Value | Description          |\n|-------|----------------------|\n| 0     | ANSI\\_CHARSET        |\n| 1     | DEFAULT\\_CHARSET     |\n| 2     | SYMBOL\\_CHARSET      |\n| 77    | MAC\\_CHARSET         |\n| 128   | SHIFTJIS\\_CHARSET    |\n| 129   | HANGUL\\_CHARSET      |\n| 134   | GB2312\\_CHARSET      |\n| 136   | CHINESEBIG5\\_CHARSET |\n| 161   | GREEK\\_CHARSET       |\n| 162   | TURKISH\\_CHARSET     |\n| 163   | VIETNAMESE\\_CHARSET  |\n| 186   | BALTIC\\_CHARSET      |\n| 204   | RUSSIAN\\_CHARSET     |\n| 238   | EASTEUROPE\\_CHARSET  |\n| 255   | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value | Description    |\n|-------|----------------|\n| 130   | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value | Description     |\n|-------|-----------------|\n| 177   | HEBREW\\_CHARSET |\n| 178   | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set based on the current system locale. For example, if the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method checkBox\n\n    public boolean checkBox([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the color palette for a form list control.\n\n#### Return Value\n\nAn integer between 0 (zero) and 2, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                 |\n|-------|-----------------------|\n| 0     | Default               |\n| 1     | The Windows palette   |\n| 2     | The true-color scheme |\n\n### Method columnHeader\n\nSets or gets a Boolean data type value that indicates whether a form list control has a column header.\n\n    public boolean columnHeader([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean data type that indicates whether a form list control has a column header.\n\n#### Return Value\n\ntrue if the control has a column header; otherwise, false.\n\n#### Remarks\n\nTo display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value. You must call the columnHeader method before you add a column to the form; otherwise, the column does not appear in the form list control.\n\n#### Examples\n\nThe following example shows a call to the columnHeader method to indicate that the form list control does not have a column header. The FormListControl.addColumn method adds the column to the form list control.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListColumn formListColumn; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        boolean columnHeader; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        columnHeader = formListControl.columnHeader(false); \n        // Add a column to the form list control. \n        formListControl.addColumn(1, new FormListColumn(\"Column1\")); \n    }\n\n### Method columnHeaderButton\n\nSets or gets a Boolean data type value that indicates whether a form list control has a column header button.\n\n    public boolean columnHeaderButton([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean data type that indicates whether a form list control has a column header button.\n\n#### Return Value\n\ntrue if the control has a column header button; otherwise, false.\n\n#### Remarks\n\nTo display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value. You must call the columnHeaderButton method before you add a column to the form; otherwise, the column does not appear in the form list control.\n\n#### Examples\n\nThe following example shows a call to the columnHeaderButton method to indicate that the form list control has a column header button. The FormListControl.addColumn method adds the column to the form list control.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListColumn formListColumn; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        boolean columnHeaderBtn; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        columnHeaderBtn = formListControl.columnHeaderButton(true); \n        // Add a column to the form list control. \n        formListControl.addColumn(1, new FormListColumn(\"Column1\")); \n    }\n\n### Method columnImages\n\nSets or gets a Boolean data type value that indicates whether a form list control has column images.\n\n    public boolean columnImages([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean data type that indicates whether a form list control has column images.\n\n#### Return Value\n\ntrue if the form list control has column images; otherwise, false.\n\n#### Remarks\n\nTo display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value.\n\n#### Examples\n\nThe following example shows a call to the columnImages method to indicate that the form list control has column images. The FormListControl.addColumn method adds the column to the form list control.\n\n     \n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListColumn formListColumn; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        formListControl.columnImages(true); \n        // Add a column to the form list control. \n        formListControl.addColumn(1, new FormListColumn(\"Column1\")); \n    }\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nA configurationKeyId system data type that specifies the configuration key ID.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n#### Examples\n\nThe following example shows a call to the configurationKey method to assign the Bank configuration key to the form list control.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        configurationKeyId ID; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run time-form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        ID = formListControl.configurationKey(configurationKeyNum(Bank)); \n    }\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are activated for a form list control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA List object that contains the IDs of configuration keys that are activated for a form list control.\n\n#### Remarks\n\nIf the control is bound to a data source, the retrieved list of configuration key IDs also includes the configuration key ID for the table and field. In addition, the retrieved list contains any configuration key IDs that are applied to the extended data type. The list does not contain duplicate IDs.\n\n#### Examples\n\nThe following example shows a call to the configurationKeyEx method. The ListEnumerator object is used to traverse the elements throughout a list.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        configurationKeyId ID; \n        List list; \n        ListEnumerator enum; \n        DictConfigurationKey dck; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        ID = formListControl.configurationKey(configurationKeyNum(Bank)); \n        list = formListControl.configurationKeyEx(); \n        if (0 != list.elements()) \n        { \n            enum = list.getEnumerator(); \n            while (enum.moveNext()) \n            { \n                dck = new DictConfigurationKey(enum.current()); \n                if (dck) \n                { \n                    print strfmt(\"Configuration Key ID: %1\" \n                      + \"Configuration Key Name: %2\",enum.current(),dck.name()); \n                    pause; \n                } \n            } \n        } \n    }\n\n### Method copyItem\n\nCopies a specified item in a form list control.\n\n    public int copyItem(int Item, int InsertAt)\n\n#### Parameters\n\nItem  \nAn Integer data type that specifies the position in the list that the item is copied to.\n\n<!-- -->\n\nInsertAt  \nAn Integer data type that specifies the position in the list that the item is copied to.\n\n#### Return Value\n\nAn Integer data type that specifies the position in the list that the item is copied to.\n\n#### Remarks\n\nTo display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value.\n\n#### Examples\n\nThe following example shows a call to the copyItem method to copy an item to the tenth position in the form list control. The FormListControl.getCount method returns the number of items in the control. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        FormListColumn formListColumn; \n        int idx4; \n        str string; \n        container conAccountNum; \n        DictTable dictTable; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        int numItems; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        // Add a column to the form list control. \n        formListControl.addColumn(1, new FormListColumn(\"Column1\")); \n        // Add items to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \n     \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n       } \n        formListControl.getCount(); \n        formListControl.copyItem(2,10); \n    }\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method delete\n\nDeletes a specified item from a form list control.\n\n    public boolean delete(int Idx)\n\n#### Parameters\n\nIdx  \nThe zero-based index for the item that is being deleted.\n\n#### Return Value\n\ntrue if the item is deleted; otherwise, false.\n\n#### Examples\n\nThe following example shows a call to the delete method to delete an item from the form list control. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        int idx4; \n        str string; \n        container conAccountNum; \n        DictTable dictTable; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        int numItems; \n        boolean itemDel; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        // Add items to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n        } \n        // Delete an item. \n        itemDel = formListControl.delete(2); \n    }\n\n### Method deleteAll\n\nDeletes all the items from a form list control.\n\n    public boolean deleteAll()\n\n#### Return Value\n\ntrue if all the items are deleted; otherwise, false.\n\n#### Examples\n\nThe following example shows a call to the deleteAll method to delete all the items from the form list control. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        int idx4; \n        str string; \n        container conAccountNum; \n        DictTable dictTable; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        int numItems; \n        boolean itemsDel; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        // Add items to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n        } \n        // Delete all items. \n        itemsDel = formListControl.deleteAll(); \n    }\n\n### Method deleteColumn\n\nDeletes a specified column in a form list control.\n\n    public boolean deleteColumn(int Idx)\n\n#### Parameters\n\nIdx  \nAn Integer data type that specifies a column in a form list control.\n\n#### Return Value\n\ntrue if the column is deleted; otherwise, false.\n\n#### Examples\n\nThe following example shows a call to the deleteColumn method to delete the first column in the form list control. The FormListControl.addColumn method adds two columns to the form list control.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListColumn formListColumn; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        boolean columnDel; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        // Add columns to the form list control. \n        formListControl.addColumn(0, new FormListColumn(\"Column1\",1,120)); \n        formListControl.addColumn(1, new FormListColumn(\"Column2\",2,120)); \n        // Delete a column. \n        columnDel = formListControl.deleteColumn(0); \n    }\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave, the dragOver, and the dragOverEx to specify the behavior.\n\n### Method dragOver\n\nIdentifies when a user drags an object over an item within the bounds of a form list control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn Integer data type that indicates the y-coordinate of the object's position.\n\n<!-- -->\n\ndragMode  \nAn Integer data type that indicates the y-coordinate of the object's position.\n\n<!-- -->\n\nx  \nAn Integer data type that indicates the y-coordinate of the object's position.\n\n<!-- -->\n\ny  \nAn Integer data type that indicates the y-coordinate of the object's position.\n\n#### Return Value\n\nA FormDrag system enumeration value that specifies whether the object is moved, copied, or not moved to a specified position.\n\n#### Remarks\n\nThis method is called only if the DragDrop property is set to Manual for the control and a beginDrag event has already been started. For more information about the event, see beginDrag. To override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click dragOver. For information about best practices for forms and code, see No Code in Forms.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when a user drags an item in a form list control.\n\n    public str dragText()\n\n#### Return Value\n\nA String data type value that specifies the text that is displayed when a user drags a form list control.\n\n#### Remarks\n\nTo override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click dragText. For information about best practices for forms and code, see No Code in Forms.\n\n### Method editLabels\n\nIndicates whether users can modify item names in a form list control.\n\n    public boolean editLabels([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean data type that specifies whether users can modify item names in a form list control.\n\n#### Return Value\n\ntrue if users can modify item names; otherwise, false.\n\n#### Remarks\n\nYou must call the editLabels method before you add columns to a form list control; otherwise, the columns do not appear in the control.\n\n#### Examples\n\nThe following example shows a call to the editLabels method to enable users to modify item names in the form list control. The DictField.label method returns a label for a specified table field that is added as an item to the form list control. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        FormListColumn formListColumn; \n        DictTable dictTable; \n        int idx4; \n        str string; \n        container conAccountNum; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        int numItems; \n        DictField dictField; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        formListControl.editLabels(true); \n        // Add a column to the form list control. \n        formListControl.addColumn(1, new FormListColumn(\"Column1\",1,120)); \n        // Add items to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \n     \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n            dictField = new DictField(77,1); \n            formListItem = new FormListItem(dictField.label()); \n            item = formListControl.addItem(formListItem); \n        } \n    }\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method ensureVisible\n\n    public int ensureVisible(int Idx)\n\n#### Parameters\n\nIdx  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the foreground color.\n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be 0 (zero).\n-   The maximum value for a single byte is 255.\n\n#### Examples\n\nThe following example shows a call to the foregroundColor method to set the foreground color to the color of the menu text on the desktop. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        FormListColumn formListColumn; \n        int idx4; \n        str string; \n        container conAccountNum; \n        DictTable dictTable; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        int numItems; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.foregroundColor(WindowsPalette::MenuText); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        // Add a column to the form list control. \n        formListControl.addColumn(1, new FormListColumn(\"Column1\")); \n        // Add items to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \n     \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n        } \n    }\n\n### Method getColumn\n\nRetrieves a FormListColumn object for a specified column in a form list control.\n\n    public FormListColumn getColumn(int Idx)\n\n#### Parameters\n\nIdx  \nAn Integer data type that specifies a column in a form list control.\n\n#### Return Value\n\nA FormListColumn object for a specified column in a form list control.\n\n#### Remarks\n\nTo display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value.\n\n#### Examples\n\nThe following example shows a call to the getColumn method to return a FormListColumn object for the column in the form list control. The FormListControl.addColumn method adds the column to the form list control.\n\n     \n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        FormListColumn formListColumn; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        str columnName; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        // Add a column to the form list control, \n        // and then set the column width. \n        formListControl.addColumn(1, new FormListColumn(\"Column1\")); \n        formListColumn = formListControl.getColumn(0); \n        columnName = formListColumn.toString(); \n    }\n\n### Method getColumnCount\n\nRetrieves the number of columns in a form list control.\n\n    public int getColumnCount()\n\n#### Return Value\n\nAn Integer data type value that specifies the number of columns in a form list control.\n\n#### Remarks\n\nTo display columns in a form list control, call the FormListControl.viewType method and then pass the FormListViewType::Report enumeration value.\n\n#### Examples\n\nThe following example shows a call to the getColumnCount method to return the number of columns in the form list control. The FormListControl.addColumn method adds the column to the form list control.\n\n     \n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListColumn formListColumn; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        int columnCnt; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        // Add a column to the form list control. \n        formListControl.addColumn(1, new FormListColumn(\"Column1\")); \n        columnCnt = formListControl.getColumnCount(); \n    }\n\n### Method getColumnWidth\n\nRetrieves the width of a column in a form list control.\n\n    public int getColumnWidth(int Idx)\n\n#### Parameters\n\nIdx  \nAn Integer data type that specifies a column in a form list control.\n\n#### Return Value\n\nAn Integer data type that specifies the width of a column in a form list control.\n\n#### Remarks\n\nTo display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value.\n\n#### Examples\n\nThe following example shows a call to the getColumnWidth method to return the width of a column in the form list control. The FormListControl.setColumnWidth method specifies the column width. The FormListControl.addColumn method adds the column to the form list control.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        FormListColumn formListColumn; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        int width; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        // Add a column to the form list control, \n        // and then set the column width. \n        formListControl.addColumn(1, new FormListColumn(\"Column1\")); \n        formListControl.setColumnWidth(0,100); \n        width = formListControl.getColumnWidth(0); \n    }\n\n### Method getCount\n\nRetrieves the number of items that are contained in a form list control.\n\n    public int getCount()\n\n#### Return Value\n\nAn Integer data type value that specifies the number of items that are contained in a form list control.\n\n#### Examples\n\nThe following example shows a call to the getCount method. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        DictTable dictTable; \n        int idx4; \n        str string; \n        container conAccountNum; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        int numItems; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        // Add items to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \n     \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n        } \n        numItems = formListControl.getCount(); \n    }\n\n### Method getCountPerPage\n\n    public int getCountPerPage()\n\n#### Return Value\n\n### Method getImagelist\n\n    public Imagelist getImagelist([boolean GetLarge])\n\n#### Parameters\n\nGetLarge  \n\n#### Return Value\n\n### Method getItem\n\nRetrieves a FormListItem object for an item in a form list control.\n\n    public FormListItem getItem(int Idx, [int SubItem])\n\n#### Parameters\n\nIdx  \nAn Integer data type that specifies a sub-item in a form list control.\n\n<!-- -->\n\nSubItem  \nAn Integer data type that specifies a sub-item in a form list control.\n\n#### Return Value\n\nA FormListItem object for an item in a form list control.\n\n#### Examples\n\nThe following example shows a call to the getItem method to return a FormListItem object for each item in the form list control. The FormListItem.toString method returns a text string for each item. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        DictTable dictTable; \n        int idx4; \n        boolean columnadd; \n        str string; \n        str itemTxt; \n        container conAccountNum; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        // Add an item to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \n                \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n            formListItem = formListControl.getItem(item); \n            itemTxt = formListItem.toString(); \n        } \n    }\n\n### Method getItemPos\n\nRetrieves the position of an item in a form list control.\n\n    public container getItemPos(int Item)\n\n#### Parameters\n\nItem  \nAn Integer data type that specifies an item in a form list control.\n\n#### Return Value\n\nA Container data type that contains the position of an item in a form list control. The position of an item is specified by an x-coordinate and a y-coordinate.\n\n#### Remarks\n\nUse the conPeek function to extract an item from a container.\n\n#### Examples\n\nThe following example shows a call to the getItemPos method to return the position of each item in the form list control. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        DictTable dictTable; \n        int idx4; \n        boolean columnadd; \n        str string; \n        container conAccountNum; \n        container itemPos; \n        CustTable custTable; \n        int numAccounts; \n        int numItems; \n        int i; \n        int x; \n        int item; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        // Add an item to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \n     \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n            itemPos = formListControl.getItemPos(item); \n            numItems = conlen(itemPos); \n            for(x = 1; x<= numItems; x++) \n            { \n                print conpeek(itemPos,x); \n                pause; \n            } \n        } \n    }\n\n### Method getNextItem\n\nRetrieves the number of the next item in a form list control.\n\n    public int getNextItem(FormListNext nextType, [int startIdx])\n\n#### Parameters\n\nnextType  \nAn Integer data type that specifies the item that is before the next item.\n\n<!-- -->\n\nstartIdx  \nAn Integer data type that specifies the item that is before the next item.\n\n#### Return Value\n\nAn Integer data type value that indicates which item is the next item in a form list control.\n\n#### Examples\n\nThe following example shows a call to the getNextItem method to retrieve the number of the next item in the form list control. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        DictTable dictTable; \n        int idx4; \n        boolean columnadd; \n        str string; \n        container conAccountNum; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(77); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = new FormRun(Args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        // Add an item to the form list control. \n        while select custTable \n           where custTable.AccountNum >= \n     \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            formListControl.addItem(formListItem); \n        } \n        item = formListControl.getNextItem(FormListNext::ToRight); \n    }\n\n### Method getSelectedCount\n\nRetrieves the number of items that are selected in a form list control.\n\n    public int getSelectedCount()\n\n#### Return Value\n\nAn Integer data type value that indicates the number of items that are selected in a form list control.\n\n#### Examples\n\nThe following example shows a call to the getSelectedCount method to return the number of items that are selected in the form list control. The FormListControl.singleSelection method indicates whether multiple items can be selected. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        FormListColumn formListColumn; \n        DictTable dictTable; \n        int idx4; \n        str string; \n        container conAccountNum; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        int numItems; \n        int numItemsSel; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        formListControl.singleSelection(false); \n        // Add columns to the form list control. \n        formListControl.addColumn(1, new FormListColumn(\"Column1\",1,120)); \n        // Add items to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \n     \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n        } \n        numItemsSel = formListControl.getSelectedCount(); \n    }\n\n### Method getStringWidth\n\n    public int getStringWidth(str Text)\n\n#### Parameters\n\nText  \n\n#### Return Value\n\n### Method getTopIndex\n\n    public int getTopIndex()\n\n#### Return Value\n\n### Method gridLines\n\n    public boolean gridLines([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method headerdragdrop\n\n    public boolean headerdragdrop([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the height is calculated; optional. This can be one of the following values:\n\n<!-- -->\n\nmode  \nAn integer that indicates how the height is calculated; optional. This can be one of the following values:\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode              | Height calculation                                                                         |\n|-------------------|--------------------------------------------------------------------------------------------|\n| -1 – Exact        | The exact height of the control in pixels is used.                                         |\n| 0 – Auto          | The height of the control is calculated automatically, and the value parameter is ignored. |\n| 1 – Column height | The layout of the form determines the height of the control.                               |\n\nThe height and the height calculation mode can be set separately.\n\n#### Examples\n\nThe following example shows a call to the height method to the set the height of the control to 120 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form, and then specifiy the control height. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.height(120,-1); \n    }\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the height of the control is calculated; optional. This value can be -1 for Exact mode, 0 for Auto mode, or 1 for Column height width.\n\n#### Return Value\n\nThe height calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                         |\n|---------------|--------------------------------------------------------------------------------------------|\n| Exact         | The exact height of the control in pixels is used.                                         |\n| Auto          | The height of the control is calculated automatically, and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                               |\n\nThe height of the control might change when the calculation mode is set to Auto or Column height.\n\n#### Examples\n\nThe following example shows a call to the heightMode method to adjust the height of the control, based on an exact pixel value.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form, and then specifiy the control height. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.heightMode(-1); \n        formListControl.heightValue(120); \n    }\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the height in pixels.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the Exact height calculation mode is used.\n\n#### Examples\n\nThe following example shows a call to the heightValue method that sets the height to 120 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form, and then specifiy the control height. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.heightMode(-1); \n        formListControl.heightValue(120); \n    }\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hitTest\n\n    public container hitTest(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n#### Return Value\n\n### Method hitTestSubItem\n\n    public container hitTestSubItem(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n#### Return Value\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nGets a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA FormAllowUserSetup enumeration value that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter. The following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\n#### Examples\n\nThe following example shows how to determine the user setup rights for a control.\n\n    FormAllowUserSetup formAllowUserSetup = FormAllowUserSetup::No; \n    switch (true) \n    { \n        case this.isUserSetupEnabled(FormAllowUserSetup::Yes): \n            formAllowUserSetup = FormAllowUserSetup::Yes; \n            break; \n        case this.isUserSetupEnabled(FormAllowUserSetup::Restricted): \n            formAllowUserSetup = FormAllowUserSetup::Restricted; \n            break; \n        case this.isUserSetupEnabled(FormAllowUserSetup::No): \n           formAllowUserSetup = FormAllowUserSetup::No; \n            break; \n    } \n    info (strfmt(\"formAllowUserSetup: %1\", formAllowUserSetup));\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method itemAlign\n\n    public int itemAlign([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method itemChanging\n\n    public boolean itemChanging(int Idx, AnyType Data)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nData  \n\n#### Return Value\n\n### Method keyDown\n\n    public boolean keyDown(int vKey, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nvKey  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method leave\n\nIdentifies when a user moves focus away from a form list control.\n\n    public boolean leave()\n\n#### Return Value\n\ntrue if focus is moved away from the control; otherwise, false.\n\n#### Remarks\n\nTo override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click leave. For information about best practices for forms and code, see No Code in Forms.\n\n### Method left\n\nSets or returns the horizontal position of a form list control in pixels, and specifies how the position is calculated.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the position is calculated; optional. This can be one of the following values:\n\n<!-- -->\n\nmode  \nAn integer that indicates how the position is calculated; optional. This can be one of the following values:\n\n#### Return Value\n\nAn integer that indicates the horizontal position of a form list control in pixels.\n\n#### Examples\n\nThe following example shows a call to the left method that sets the horizontal position to 50 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.left(50,-1); \n    }\n\n### Method leftMode\n\nSets or returns a value that indicates how the horizontal position of a form list control is calculated.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the horizontal position is calculated; optional.\n\n#### Return Value\n\nAn integer that indicates how the horizontal position is calculated. The return value can be -1 or a FormLeft enumeration value.\n\n#### Remarks\n\nThe value parameter and the return value are integer values that specify how the horizontal position is calculated. This value can be either -1 for an exact pixel value or a FormLeft enumeration value. For more information, see FormLeft Enumeration.\n\n#### Examples\n\nThe following example shows a call to the leftMode method that calculates the horizontal position of a form list control, based on an exact pixel value.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form.  \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.leftMode(-1); \n        formListControl.leftValue(100); \n    }\n\n### Method leftValue\n\nSets or returns the horizontal position of a form list control in pixels.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates the horizontal position in pixels; optional.\n\n#### Return Value\n\nAn integer that indicates the horizontal position in pixels.\n\n#### Remarks\n\nThe horizontal position is not changed unless the left mode is set for an exact pixel value. For more information, see leftMode.\n\n#### Examples\n\nThe following example shows a call to the leftValue method that sets the horizontal position to 100 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form, and then specifiy the control height. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.leftMode(-1); \n        formListControl.leftValue(100); \n    }\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIdentifies when a user presses the left mouse button.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTo override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click mouseUp. For information about best practices for forms and code, see No Code in Forms.\n\n### Method moveItem\n\nMoves a specified item in a form list control.\n\n    public int moveItem(int Item, int InsertAt)\n\n#### Parameters\n\nItem  \nAn Integer data type that specifies the position in the list that the item is moved to.\n\n<!-- -->\n\nInsertAt  \nAn Integer data type that specifies the position in the list that the item is moved to.\n\n#### Return Value\n\nAn Integer data type that specifies the position in the list that the item is moved to.\n\n#### Examples\n\nThe following example shows a call to the moveItem method to move an item to the tenth position in the form list control. The FormListControl.getCount method returns the number of items in the control. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        FormListColumn formListColumn; \n        int idx4; \n        str string; \n        container conAccountNum; \n        DictTable dictTable; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        int numItems; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(77); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = new FormRun(Args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        // Add columns to the form list control. \n        formListControl.addColumn(1, new FormListColumn(\"Account Numbers\",1,120)); \n        // Add items to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \n                \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n        } \n        formListControl.getCount(); \n        formListControl.moveItem(2,10); \n    }\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method oneClickActivate\n\n    public boolean oneClickActivate([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method redrawItems\n\nUpdates a range of items in a form list control.\n\n    public boolean redrawItems(int idxFirst, int idxLast)\n\n#### Parameters\n\nidxFirst  \nAn Integer data type that specifies the zero-based index for the last item in the range.\n\n<!-- -->\n\nidxLast  \nAn Integer data type that specifies the zero-based index for the last item in the range.\n\n#### Return Value\n\ntrue if the items are updated; otherwise, false.\n\n#### Examples\n\nThe following example shows a call to the redrawItems method to update a range of items in the form list control. The FormListControl.moveItem method moves a specified item. The FormListControl.getCount method retrieves the number of items in the control. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        FormListColumn formListColumn; \n        int idx4; \n        str string; \n        container conAccountNum; \n        DictTable dictTable; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        int numItems; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(77); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = new FormRun(Args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        // Add columns to form list control. \n        formListControl.addColumn(1, new FormListColumn(\"Account Numbers\",1,120)); \n        // Add items to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \"4000\" \n                && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n        } \n        formListControl.getCount(); \n        formListControl.moveItem(2,10); \n        formListControl.redrawItems(0,20); \n    }\n\n### Method rowSelect\n\nSets or gets a Boolean data type value that indicates whether a row in a form list control is selected when the row is clicked.\n\n    public boolean rowSelect([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean data type that indicates whether a row in a form list control is selected when the row is clicked.\n\n#### Return Value\n\ntrue if the row in a form list control is selected; otherwise, false.\n\n#### Examples\n\nThe following example shows a call to the rowSelect method to specify that a row in the form list control is selected when the row is clicked. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method. The columns are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        FormListColumn formListColumn1; \n        FormListColumn formListColumn2; \n        FormListColumn formListColumn; \n        DictTable dictTable; \n        int idx4; \n        str string; \n        container conAccountNum; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        int numItems; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        formListControl.rowSelect(true); \n        // Add columns to the form list control. \n        formListControl.addColumn(1, new FormListColumn(\"Column1\",1,120)); \n        formListControl.addColumn(2, new FormListColumn(\"Column2\",2,120)); \n        // Add items to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \n     \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n        }}\n\n### Method scroll\n\n    public boolean scroll(int dx, int dy)\n\n#### Parameters\n\ndx  \n\n<!-- -->\n\ndy  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method selectionChanging\n\n    public boolean selectionChanging(int Idx, AnyType Data)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nData  \n\n#### Return Value\n\n### Method setColumn\n\n    public boolean setColumn(int Idx, FormListColumn Column)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nColumn  \n\n#### Return Value\n\n### Method setColumnWidth\n\nSpecifies the width of a column in a form list control.\n\n    public boolean setColumnWidth(int Idx, int Width)\n\n#### Parameters\n\nIdx  \nAn Integer data type that specifies the width of the column in a form list control.\n\n<!-- -->\n\nWidth  \nAn Integer data type that specifies the width of the column in a form list control.\n\n#### Return Value\n\ntrue if the width is set; otherwise, false.\n\n#### Remarks\n\nTo display columns in a form list control, call the FormListControl.viewType method, and then pass the FormListViewType::Report enumeration value.\n\n#### Examples\n\nThe following example shows a call to the setColumnWidth method to specify the width of the column in the form list control. The FormListControl.addColumn method adds the column to the form list control.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        FormListColumn formListColumn; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::Report); \n        formListControl.height(120); \n        formListControl.widthMode(FormWidth::ColumnWidth); \n        // Add a column to the form list control, and then set the column width. \n        formListControl.addColumn(1, new FormListColumn(\"Column1\")); \n        formListControl.setColumnWidth(0,100); \n    }\n\n### Method setItem\n\nIndicates whether an item is contained in a form list control.\n\n    public boolean setItem(FormListItem item)\n\n#### Parameters\n\nitem  \nA FormListItem object for an item in a form list control.\n\n#### Return Value\n\ntrue if an item is contained in a form list control; otherwise, false.\n\n#### Examples\n\nThe following example shows a call to the setItem method to determine whether each item is contained in the form list control. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        DictTable dictTable; \n        int idx4; \n        str string; \n        container conAccountNum; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        boolean itemSet; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        // Add items to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \n                \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n            itemSet = formListControl.setItem(formListItem); \n        } \n    }\n\n### Method setStateImagelist\n\n    public Imagelist setStateImagelist(Imagelist imageList)\n\n#### Parameters\n\nimageList  \n\n#### Return Value\n\n### Method showContextMenu\n\nIdentifies when a shortcut menu appears.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nAn Integer data type that specifies the menu handle.\n\n#### Return Value\n\nAn Integer data type that specifies the menu handle.\n\n#### Remarks\n\nTo override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click showContextMenu. For information about best practices for forms and code, see No Code in Forms.\n\n### Method showSelAlways\n\n    public boolean showSelAlways([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method singleSelection\n\nIndicates whether multiple items can be selected in a form list control.\n\n    public boolean singleSelection([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean data type that indicates whether multiple items can be selected in a form list control.\n\n#### Return Value\n\ntrue if multiple items cannot be selected; otherwise, false.\n\n#### Remarks\n\nCall the singleSelection method before you add items to a form list control; otherwise, the items do not appear in the control.\n\n#### Examples\n\nThe following example shows a call to the singleSelection method to specify that multiple items can be selected. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void testFormListControl(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        FormListColumn formListColumn1; \n        FormListColumn formListColumn2; \n        FormListColumn formListColumn; \n        DictTable dictTable; \n        int idx4; \n        str string; \n        container conAccountNum; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        int numItems; \n        boolean columnAdd; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.viewType(FormListViewType::List); \n        formListControl.height(120); \n        formListControl.singleSelection(false); \n        // Add items to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \n                \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n        } \n    }\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method sort\n\n    public int sort([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method sortTextItems\n\n    public boolean sortTextItems([int column], [boolean ascending])\n\n#### Parameters\n\ncolumn  \n\n<!-- -->\n\nascending  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nSets or returns the vertical position of a form list control in pixels, and specifies how the position is calculated.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the vertical position is calculated; optional. This parameter can be one of the following values:\n\n<!-- -->\n\nmode  \nAn integer that indicates how the vertical position is calculated; optional. This parameter can be one of the following values:\n\n#### Return Value\n\nAn integer that indicates the vertical position of a form list control in pixels.\n\n#### Examples\n\nThe following example shows a call to the top method to set the vertical position to 50 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.top(50,-1); \n    }\n\n### Method topMode\n\nSets or returns a value that indicates how the vertical position for a form list control is calculated.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the vertical position is calculated; optional.\n\n#### Return Value\n\nAn Integer data type value that indicates how the vertical position is calculated. The return value can be -1 or a FormTop enumeration value.\n\n#### Remarks\n\nThe value parameter and return value are integer values that can be either -1 for an exact pixel value or a FormTop enumeration value. For more information, see FormTop Enumeration.\n\n#### Examples\n\nThe following example shows a call to the topMode method that calculates the vertical position based on an exact pixel value.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.topMode(-1); \n        formListControl.topValue(50); \n    }\n\n### Method topValue\n\nSets or returns the vertical position of a form list control in pixels.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the vertical position; optional.\n\n#### Return Value\n\nAn integer that specifies the vertical position of a form list control.\n\n#### Remarks\n\nThe vertical position is not changed unless the top mode is set for an exact pixel value. For more information, see topMode.\n\n#### Examples\n\nThe following example shows a call to the topValue method that sets the vertical position to 50 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.topMode(-1); \n        formListControl.topValue(50); \n    }\n\n### Method trackSelect\n\n    public boolean trackSelect([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method twoClickActivate\n\n    public boolean twoClickActivate([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the value of the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method verticalSpacing\n\nSets or gets the amount of space above and below a form list control in pixels, and specifies how the space is calculated.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn AutoMode system enumeration value that indicates how the space is calculated; optional.\n\n<!-- -->\n\nmode  \nAn AutoMode system enumeration value that indicates how the space is calculated; optional.\n\n#### Return Value\n\nAn integer that indicates the amount of space above and below a control.\n\n### Method verticalSpacingMode\n\nSets or returns a value that indicates how the space above and below a form list control is calculated.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \nAn AutoMode system enumeration value that indicates how the space is calculated; optional.\n\n#### Return Value\n\nAuto if the space is automatically adjusted based on other form settings, such as the font size; otherwise, Fixed.\n\n### Method verticalSpacingValue\n\nSets or returns the amount of space above and below a form list control in pixels.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates the amount of space above and below a control; optional.\n\n#### Return Value\n\nAn integer that indicates the amount of space above and below a control.\n\n### Method viewType\n\n    public int viewType([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to be assigned to the visible setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the width is calculated; optional. This parameter can be one of the following values:\n\n<!-- -->\n\nmode  \nAn integer that indicates how the width is calculated; optional. This parameter can be one of the following values:\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode             | Width calculation                                                                         |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 – Exact       | The exact width of the control in pixels is used.                                         |\n| 0 – Auto         | The width of the control is calculated automatically, and the value parameter is ignored. |\n| 1 – Column width | The layout of the form determines the width of the control.                               |\n\nThe width and the width calculation mode can be set separately.\n\n#### Examples\n\nThe following example shows a call to the width method to set the width of the control to 120 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.width(120,-1); \n    }\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the width of the control is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current width calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                         |\n|--------------|-------------------------------------------------------------------------------------------|\n| Exact        | The exact width of the control in pixels is used.                                         |\n| Auto         | The width of the control is calculated automatically, and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                               |\n\nThe width of the control might change when the calculation mode is set to Auto or Column width.\n\n#### Examples\n\nThe following example shows a call to the widthMode method to calculate the width of the control, based on an exact pixel value.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.widthMode(-1); \n        formListControl.widthValue(120); \n    }\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the width of the control in pixels; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nTo change the width of the control, use the Exact width calculation mode.\n\n#### Examples\n\nThe following example shows a call to the widthValue method that sets the width of the control to 120 pixels.\n\n    static void createForm(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        int idx4; \n        DictTable dictTable; \n        CustTable custTable; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        formListControl.widthMode(-1); \n        formListControl.widthValue(120); \n    }\n\n### Method selectionChanged\n\n    public void selectionChanged(int Idx, AnyType Data)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nData  \n\n### Method activateItem\n\n    public void activateItem(int Idx)\n\n#### Parameters\n\nIdx  \n\n### Method inputSearch\n\nIdentifies when the search begins for a specified text string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nA String data type that specifies a text string.\n\n#### Remarks\n\nTo override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click inputSearch. For information about best practices for forms and code, see No Code in Forms.\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method update\n\nUpdates the control.\n\n    public void update([int idx])\n\n#### Parameters\n\nidx  \n\n### Method endDrag\n\nIdentifies when the user has finished moving a form list control.\n\n    public void endDrag()\n\n#### Remarks\n\nTo override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click endDrag. For information about best practices for forms and code, see No Code in Forms.\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method setImagelist\n\n    public void setImagelist(Imagelist imageList, [boolean SetLarge])\n\n#### Parameters\n\nimageList  \n\n<!-- -->\n\nSetLarge  \n\n### Method copy\n\nIdentifies when a user performs a copy operation.\n\n    public void copy()\n\n#### Remarks\n\nTo override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click copy. For information about best practices for forms and code, see No Code in Forms.\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method itemCopy\n\n    public void itemCopy(int Idx, int newIdx)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nnewIdx  \n\n### Method cut\n\nIdentifies when the user performs a cut operation.\n\n    public void cut()\n\n#### Remarks\n\nTo override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click cut. For information about best practices for forms and code, see No Code in Forms.\n\n### Method itemMoved\n\n    public void itemMoved(int Idx, int newIdx)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nnewIdx  \n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method OnSelectionChanged\n\n    private void OnSelectionChanged([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method hotTrackItem\n\nIdentifies when a user moves the mouse pointer over a form list control.\n\n    public void hotTrackItem(int Idx)\n\n#### Parameters\n\nIdx  \nAn Integer data type that specifies the index for a form list control.\n\n#### Remarks\n\nTo override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click hotTrackItem. For information about best practices for forms and code, see No Code in Forms.\n\n### Method setCount\n\n    public void setCount(int count)\n\n#### Parameters\n\ncount  \n\n### Method dragLeave\n\nIdentifies when a user drags an object out of the bounds of a form list control.\n\n    public void dragLeave()\n\n#### Remarks\n\nTo override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click dragLeave. For information about best practices for forms and code, see No Code in Forms.\n\n### Method itemDeleted\n\n    public void itemDeleted(int Idx, AnyType Data)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nData  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setText\n\n    public void setText(int Idx, str Text, [int SubItem])\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nText  \n\n<!-- -->\n\nSubItem  \n\n### Method itemChanged\n\n    public void itemChanged(int Idx, AnyType Data)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nData  \n\n### Method doubleClick\n\nIdentifies when a user double-clicks an item in a form list control.\n\n    public void doubleClick()\n\n#### Remarks\n\nTo override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click doubleClick. For information about best practices for forms and code, see No Code in Forms.\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method allItemsDeleted\n\nIdentifies when all the items in a form list control are deleted.\n\n    public void allItemsDeleted()\n\n#### Remarks\n\nTo override this method in a form list control, right-click the Methods node below the control, point to Override Method, and then click allItemsDeleted. For information about best practices for forms and code, see No Code in Forms.\n\n### Method drop\n\nIdentifies when a user drops a form list control or an item in a form list control into a new position.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn Integer data type that indicates the y-coordinate of the object's position.\n\n<!-- -->\n\ndragMode  \nAn Integer data type that indicates the y-coordinate of the object's position.\n\n<!-- -->\n\nx  \nAn Integer data type that indicates the y-coordinate of the object's position.\n\n<!-- -->\n\ny  \nAn Integer data type that indicates the y-coordinate of the object's position.\n\n#### Remarks\n\nThis method is called only if the DragDrop property is set to Manual for the control and a beginDrag event has already been started. For more information about the event, see beginDrag. To override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click drop. For information about best practices for forms and code, see No Code in Forms.\n\n### Method columnClicked\n\nIdentifies when a user clicks a column in a list view control in a form.\n\n    public void columnClicked(int Column)\n\n#### Parameters\n\nColumn  \nAn Integer data type that specifies a form column.\n\n#### Remarks\n\nTo override this method on a list view control, right-click the Methods node below the control, click Override Method, and then click columnClicked. For information about best practices for forms and code, see No Code in Forms.\n\n### Method getStateImagelist\n\n    public void getStateImagelist()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setItemPos\n\nSets the position of an item in a form list control.\n\n    public void setItemPos(int Item, int x, int y)\n\n#### Parameters\n\nItem  \nAn Integer data type that specifies the y-coordinate of the position of an item.\n\n<!-- -->\n\nx  \nAn Integer data type that specifies the y-coordinate of the position of an item.\n\n<!-- -->\n\ny  \nAn Integer data type that specifies the y-coordinate of the position of an item.\n\n#### Examples\n\nThe following example shows a call to the setItemPos method to specify the position of each item in the form list control. The while select statement retrieves account numbers from the CustTable table and then stores the data in a container. The items in the variable are added to the form list control by calling the FormListControl.addItem method.\n\n    static void createForm2(Args _args) \n    { \n        Args args; \n        Form form; \n        FormRun formRun; \n        FormBuildDesign formBuildDesign; \n        FormBuildDataSource formBuildDataSource; \n        FormBuildListControl formBuildListControl; \n        FormListControl formListControl; \n        FormListItem formListItem; \n        DictTable dictTable; \n        int idx4; \n        str string; \n        container conAccountNum; \n        CustTable custTable; \n        int numAccounts; \n        int i; \n        int item; \n        // Create the form header. \n        form = new Form(); \n        // Add data sources to the form. \n        dictTable = new DictTable(tableNum(custTable)); \n        formBuildDataSource = form.addDataSource(dictTable.name()); \n        formBuildDataSource.table(dictTable.id()); \n        // Create the form design. \n        formBuildDesign = form.addDesign(\"Design\"); \n        formBuildDesign.caption(\"myForm\"); \n        // Add a form list control. \n        formBuildListControl = \n     formBuildDesign.addControl(FormControlType::ListView,\"List\"); \n        idx4 = formBuildListControl.id(); \n        args = new Args(); \n        args.object(form); \n        // Create the run-time form. \n        formRun = classfactory.formRunClass(args); \n        formRun.run(); \n        formRun.detach(); \n        formListControl = formRun.control(idx4); \n        // Add items to the form list control. \n        while select custTable \n            where custTable.AccountNum >= \n     \"4000\" && custTable.AccountNum <= \"4040\" \n        { \n            conAccountNum += [[custTable.AccountNum]]; \n        } \n        numAccounts = conlen(conAccountNum); \n        for(i = 1; i <= numAccounts; i++) \n        { \n            string = conPeek(conAccountNum,i); \n            formListItem = new FormListItem(string); \n            item = formListControl.addItem(formListItem); \n            formListControl.setItemPos(item,1,5); \n        } \n    }\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method enter\n\n    public void enter()\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method context\n\nIdentifies when the user opens a shortcut menu in a form list control.\n\n    public void context()\n\n#### Remarks\n\nTo override this method on a list view control, right-click the Methods node below the control, point to Override Method, and then click context. For information about best practices for forms and code, see No Code in Forms.\n\n### Method beginEditLabel\n\n    public void beginEditLabel(int Idx)\n\n#### Parameters\n\nIdx  \n\n### Method itemInserted\n\n    public void itemInserted(int Idx, AnyType Data)\n\n#### Parameters\n\nIdx  \n\n<!-- -->\n\nData  \n\n## Class FormListItem\n    class FormListItem extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                         | Description                                          |\n|----------------------------------------------------------------|------------------------------------------------------|\n| public AnyType data(\\[AnyType value\\])                         |                                                      |\n| public int idx(\\[int value\\])                                  |                                                      |\n| public int image(\\[int value\\])                                |                                                      |\n| public int indent(\\[int value\\])                               |                                                      |\n| public int overlayImage(\\[int value\\])                         |                                                      |\n| public boolean stateChecked(\\[boolean value\\])                 |                                                      |\n| public boolean stateCut(\\[boolean value\\])                     |                                                      |\n| public boolean stateDropHilited(\\[boolean value\\])             |                                                      |\n| public boolean stateFocus(\\[boolean value\\])                   |                                                      |\n| public int stateImage(\\[int value\\])                           |                                                      |\n| public boolean stateSelected(\\[boolean value\\])                |                                                      |\n| public int subItem(\\[int value\\])                              |                                                      |\n| public str text(\\[str value\\])                                 |                                                      |\n| public str toString()                                          | Returns a string that represents the current object. |\n| public void finalize()                                         |                                                      |\n| public void new(\\[str Text\\], \\[int Image\\], \\[AnyType Data\\]) | Initializes a new instance of the Object class.      |\n\n### Method data\n\n    public AnyType data([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method idx\n\n    public int idx([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method image\n\n    public int image([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method indent\n\n    public int indent([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method overlayImage\n\n    public int overlayImage([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateChecked\n\n    public boolean stateChecked([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateCut\n\n    public boolean stateCut([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateDropHilited\n\n    public boolean stateDropHilited([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateFocus\n\n    public boolean stateFocus([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateImage\n\n    public int stateImage([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method stateSelected\n\n    public boolean stateSelected([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method subItem\n\n    public int subItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toString\n\nReturns a string that represents the current object.\n\n    public str toString()\n\n#### Return Value\n\nA string that represents the current object.\n\n#### Remarks\n\nThe default implementation returns the class name of the object. The method can be overridden in a derived class to return values that are meaningful for that type. For example, an instance of the SysMethodInfo class returns the method name and type of the method, such as instance or static.\n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new([str Text], [int Image], [AnyType Data])\n\n#### Parameters\n\nText  \n\n<!-- -->\n\nImage  \n\n<!-- -->\n\nData  \n\n## Class FormManagedHostControl\n    class FormManagedHostControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public str assemblyName(\\[str value\\])                                                                      |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public CLRObject control()                                                                                  |                                                                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public boolean rTLCapable(\\[boolean value\\])                                                                |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public int sizing(\\[int value\\])                                                                            |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public str typeName(\\[str value\\])                                                                          |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method assemblyName\n\n    public str assemblyName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method control\n\n    public CLRObject control()\n\n#### Return Value\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the FormControl.dragLeave, FormControl.dragOver, and the FormControl.dragOverEx methods to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value to set as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method rTLCapable\n\n    public boolean rTLCapable([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method sizing\n\n    public int sizing([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method typeName\n\n    public str typeName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method enter\n\n    public void enter()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n## Class FormMenuButtonControl\n    class FormMenuButtonControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                              | Description                                                                                                                                                             |\n|---------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public int acquireFocus(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])            |                                                                                                                                                                         |\n| public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])                     |                                                                                                                                                                         |\n| public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\]) |                                                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                                      | Determines whether to align the control.                                                                                                                                |\n| public int alignment(\\[int value\\])                                                                                 |                                                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                         | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                                      | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                   | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public boolean autoRefreshData(\\[boolean value\\])                                                                   |                                                                                                                                                                         |\n| public int backgroundColor(\\[int value\\])                                                                           | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                                 | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                                  | Is called when the user starts to drag a form control.                                                                                                                  |\n| public boolean big(\\[boolean value\\])                                                                               |                                                                                                                                                                         |\n| public int bold(\\[int value\\])                                                                                      | Gets or sets the weight of font used to output text in the control.                                                                                                     |\n| public int border(\\[int value\\])                                                                                    | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public int bottomMargin(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public int buttonDisplay(\\[int value\\])                                                                             | Gets or sets the appearance of the button control.                                                                                                                      |\n| public container calcControlSize(int chars, int lines)                                                              | Retrieves the size of the control.                                                                                                                                      |\n| public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                               |                                                                                                                                                                         |\n| public boolean canContain(FormControl control)                                                                      |                                                                                                                                                                         |\n| public int characterSet(\\[int value\\])                                                                              | Gets or sets the character set of the font.                                                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                               | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                            | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                                    | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public boolean contains(FormControl control)                                                                        |                                                                                                                                                                         |\n| public int controlCount()                                                                                           |                                                                                                                                                                         |\n| public FormControl controlNum(int controlNo)                                                                        |                                                                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                        | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public str dataRelationPath(\\[str value\\])                                                                          | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public boolean defaultButton(\\[boolean value\\])                                                                     | Determines whether the button should be the default button in the form.                                                                                                 |\n| public str disabledImage(\\[str value\\])                                                                             | Gets or sets the disabled image of the button.                                                                                                                          |\n| public int disabledImageLocation(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int disabledResource(\\[int value\\])                                                                          | Gets or sets the resource ID of the image to use as the disabled button image.                                                                                          |\n| public int displayTarget(\\[int value\\])                                                                             | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                                  | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                               | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                           | Determines whether to enable or disable the object.                                                                                                                     |\n| public str font(\\[str value\\])                                                                                      | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                                  | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public boolean forcedToOverflow(\\[boolean value\\])                                                                  |                                                                                                                                                                         |\n| public int foregroundColor(\\[int value\\])                                                                           | Gets or sets the text color for the control to use.                                                                                                                     |\n| public boolean hasChanged(\\[boolean val\\])                                                                          | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                                     | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                          | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                                | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                               | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                              | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                                  | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                           | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                                   | Retrieves the Windows handle for the control.                                                                                                                           |\n| public int imageLocation(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public boolean isContainer()                                                                                        |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                        | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                                       | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                            | Returns a value that indicates whether the control allows for the specified level of customization.                                                                     |\n| public boolean italic(\\[boolean value\\])                                                                            |                                                                                                                                                                         |\n| public str keyTip(\\[str value\\])                                                                                    |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                            | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMargin(\\[int value\\])                                                                                |                                                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                                  | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                                 | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                     | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                     | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                           | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public int moveControl(int controlId, \\[int insertAfterId\\])                                                        |                                                                                                                                                                         |\n| public int multiSelect(\\[int value\\])                                                                               |                                                                                                                                                                         |\n| public str name(\\[str value\\])                                                                                      | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public int needsRecord(\\[int value\\])                                                                               |                                                                                                                                                                         |\n| public str normalImage(\\[str value\\])                                                                               |                                                                                                                                                                         |\n| public int normalResource(\\[int value\\])                                                                            |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                             |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                                  | Retrieves the parent control for the control.                                                                                                                           |\n| public boolean primary(\\[boolean value\\])                                                                           |                                                                                                                                                                         |\n| public int rightMargin(\\[int value\\])                                                                               |                                                                                                                                                                         |\n| public boolean saveRecord(\\[boolean value\\])                                                                        |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                           | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int shortkey(\\[int value\\])                                                                                  |                                                                                                                                                                         |\n| public int showContextMenu(int menuHandle)                                                                          | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showShortCut(\\[boolean value\\])                                                                      |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                              | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int style(\\[int value\\])                                                                                     |                                                                                                                                                                         |\n| public str text(\\[str value\\])                                                                                      |                                                                                                                                                                         |\n| public str toolTip()                                                                                                | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                             | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMargin(\\[int value\\])                                                                                 |                                                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                                   | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                                  | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                                      |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                         | Sets or returns the underline property for the text in the control.                                                                                                     |\n| public boolean SysObsoleteAttribute(container data)                                                                 |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                                  | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                              | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                             | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                               | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                                | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                                  | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                          | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                            | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                            | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                         | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                                  | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                                 | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public boolean useUserLayout(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public boolean value(\\[boolean value\\])                                                                             |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                        | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                              | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                                      | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                           | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                           | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                                 | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                                | Gets or sets the width of the control.                                                                                                                                  |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                           | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void prefColumnSize(int width, int height)                                                                   | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void resetUserSetting()                                                                                      | Resets the user settings for the control.                                                                                                                               |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                               | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                         |                                                                                                                                                                         |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])         |                                                                                                                                                                         |\n| public void arrange()                                                                                               |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                              | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void gotFocus()                                                                                              | Indicates that the control has received focus.                                                                                                                          |\n| public void clicked()                                                                                               |                                                                                                                                                                         |\n| public void copy()                                                                                                  | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void setFocus()                                                                                              | Sets the focus on the control.                                                                                                                                          |\n| public void cut()                                                                                                   | Cuts the contents of the control.                                                                                                                                       |\n| private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                          |                                                                                                                                                                         |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                        |                                                                                                                                                                         |\n| public void dragLeave()                                                                                             | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void context()                                                                                               | Shows the shortcut menu for the control.                                                                                                                                |\n| public void endDrag()                                                                                               | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void mouseLeave()                                                                                            | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                                       | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void lostFocus()                                                                                             | Indicates that the control has lost focus.                                                                                                                              |\n| public void paste()                                                                                                 | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void displayControl()                                                                                        | Displays the control.                                                                                                                                                   |\n\n### Method acquireFocus\n\n    public int acquireFocus([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method addControl\n\n    public FormControl addControl(FormControlType controlType, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolType  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addControlEx\n\n    public FormControl addControlEx(str controlClass, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addDataField\n\n    public FormControl addDataField(int dataSourceId, FieldId fieldId, [FormControl insertAfter], [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoRefreshData\n\n    public boolean autoRefreshData([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method big\n\n    public boolean big([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value | Description |\n|-------|-------------|\n| 0     | Auto        |\n| 1     | 3D          |\n| 2     | Single line |\n| 3     | Flat        |\n| 4     | None        |\n\n### Method bottomMargin\n\n    public int bottomMargin([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method buttonDisplay\n\nGets or sets the appearance of the button control.\n\n    public int buttonDisplay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and five, inclusive.\n\n#### Remarks\n\nThe value of the property defines whether the text, the image, or both should be displayed on the button. This property also controls relative positions of text and image if both are displayed.The integer value that is returned contains the appearace of the button control as follows:\n\n| Value | Description                                                      |\n|-------|------------------------------------------------------------------|\n| 0     | Text only                                                        |\n| 1     | Image Only                                                       |\n| 2     | Text and image; the image is displayed below the text.           |\n| 3     | Text and image; the image is displayed above the text.           |\n| 4     | Text and image; the image is displayed to the left of the text.  |\n| 5     | Text and image; the image is displayed to the right of the text. |\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method canAddDataField\n\n    public boolean canAddDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method canContain\n\n    public boolean canContain(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value | Description          |\n|-------|----------------------|\n| 0     | ANSI\\_CHARSET        |\n| 1     | DEFAULT\\_CHARSET     |\n| 2     | SYMBOL\\_CHARSET      |\n| 77    | MAC\\_CHARSET         |\n| 128   | SHIFTJIS\\_CHARSET    |\n| 129   | HANGUL\\_CHARSET      |\n| 134   | GB2312\\_CHARSET      |\n| 136   | CHINESEBIG5\\_CHARSET |\n| 161   | GREEK\\_CHARSET       |\n| 162   | TURKISH\\_CHARSET     |\n| 163   | VIETNAMESE\\_CHARSET  |\n| 186   | BALTIC\\_CHARSET      |\n| 204   | RUSSIAN\\_CHARSET     |\n| 238   | EASTEUROPE\\_CHARSET  |\n| 255   | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value | Description    |\n|-------|----------------|\n| 130   | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value | Description     |\n|-------|-----------------|\n| 177   | HEBREW\\_CHARSET |\n| 178   | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value | Description   |\n|-------|---------------|\n| 222   | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value | Style                 |\n|-------|-----------------------|\n| 0     | Default               |\n| 1     | The Windows palette   |\n| 2     | The true-color scheme |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method contains\n\n    public boolean contains(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlNum\n\n    public FormControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \n\n#### Return Value\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method defaultButton\n\nDetermines whether the button should be the default button in the form.\n\n    public boolean defaultButton([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the button should be the default button; otherwise, false.\n\n### Method disabledImage\n\nGets or sets the disabled image of the button.\n\n    public str disabledImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe full name of an image file. The system supports all of the GDI-supported image formats.\n\n#### Remarks\n\nThis property has precedence over the disabledResource property. It is used if both of these properties are set.\n\n### Method disabledImageLocation\n\n    public int disabledImageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method disabledResource\n\nGets or sets the resource ID of the image to use as the disabled button image.\n\n    public int disabledResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe resource ID of the image to use as the disabled button image. Both icon and bitmap images are supported.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave, the dragOver, and the dragOverEx to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method forcedToOverflow\n\n    public boolean forcedToOverflow([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method imageLocation\n\n    public int imageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false. For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nIf the clicked method is overridden, the user is limited to only restricted customization.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method keyTip\n\n    public str keyTip([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMargin\n\n    public int leftMargin([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method moveControl\n\n    public int moveControl(int controlId, [int insertAfterId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterId  \n\n#### Return Value\n\n### Method multiSelect\n\n    public int multiSelect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method needsRecord\n\n    public int needsRecord([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalImage\n\n    public str normalImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalResource\n\n    public int normalResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method primary\n\n    public boolean primary([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method saveRecord\n\n    public boolean saveRecord([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method shortkey\n\n    public int shortkey([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showShortCut\n\n    public boolean showShortCut([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMargin\n\n    public int topMargin([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise false.\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method value\n\n    public boolean value([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method arrange\n\n    public void arrange()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method clicked\n\n    public void clicked()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method OnClicked\n\n    private void OnClicked([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n## Class FormNotifyEventArgs\n    class FormNotifyEventArgs extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                  | Description                                                  |\n|-------------------------------------------------------------------------|--------------------------------------------------------------|\n| public FormDataSource formDataSource(\\[FormDataSource formDataSource\\]) |                                                              |\n| public void new()                                                       | Initializes a new instance of the FormNotifyEventArgs class. |\n\n### Method formDataSource\n\n    public FormDataSource formDataSource([FormDataSource formDataSource])\n\n#### Parameters\n\nformDataSource  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the FormNotifyEventArgs class.\n\n    public void new()\n\n"}