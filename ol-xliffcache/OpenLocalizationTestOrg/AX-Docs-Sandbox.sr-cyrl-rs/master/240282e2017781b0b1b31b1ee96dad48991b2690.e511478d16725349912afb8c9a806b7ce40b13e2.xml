{"nodes":[{"pos":[6,23],"content":"required metadata","linkify":"required metadata","nodes":[{"content":"required metadata","pos":[0,17]}]},{"content":"title: F Classes: FormBuildReferenceControl to FormButtonSeparatorControl | Microsoft Docs description: API reference for classes from FormBuildReferenceControl to FormButtonSeparatorControl.","pos":[25,216],"source":"title: F Classes: FormBuildReferenceControl to FormButtonSeparatorControl | Microsoft Docs\ndescription: API reference for classes from FormBuildReferenceControl to FormButtonSeparatorControl."},{"content":"author: annbe manager: AnnBe ms.date: 2016-03-08 23:03:54 ms.topic: article ms.prod: ms.service: Dynamics365Operations ms.technology:","pos":[217,351],"source":"\nauthor: annbe\nmanager: AnnBe\nms.date: 2016-03-08 23:03:54\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology:"},{"pos":[356,373],"content":"optional metadata","linkify":"optional metadata","nodes":[{"content":"optional metadata","pos":[0,17]}]},{"pos":[377,386],"content":"keywords:","linkify":"keywords:","nodes":[{"content":"keywords:","pos":[0,9]}]},{"pos":[390,397],"content":"ROBOTS:","linkify":"ROBOTS:","nodes":[{"content":"ROBOTS:","pos":[0,7]}]},{"content":"audience: Developer","pos":[399,418]},{"pos":[421,432],"content":"ms.devlang:","linkify":"ms.devlang:","nodes":[{"content":"ms.devlang:","pos":[0,11]}]},{"pos":[436,448],"content":"ms.reviewer:","linkify":"ms.reviewer:","nodes":[{"content":"ms.reviewer:","pos":[0,12]}]},{"content":"ms.suite: Released- Dynamics AX 7.0.0","pos":[450,487]},{"pos":[490,504],"content":"ms.tgt_pltfrm:","linkify":"ms.tgt_pltfrm:","nodes":[{"content":"ms.tgt_pltfrm:","pos":[0,14]}]},{"pos":[506,571],"content":"ms.custom: 63613 ms.assetid: ec4d2ee5-bef6-4dbe-9a2e-7d2aebfa7c96","source":"ms.custom: 63613\nms.assetid: ec4d2ee5-bef6-4dbe-9a2e-7d2aebfa7c96"},{"pos":[574,584],"content":"ms.region:","linkify":"ms.region:","nodes":[{"content":"ms.region:","pos":[0,10]}]},{"pos":[588,600],"content":"ms.industry:","linkify":"ms.industry:","nodes":[{"content":"ms.industry:","pos":[0,12]}]},{"content":"ms.author: RobinARH","pos":[602,621]},{"pos":[630,696],"content":"F Classes: FormBuildReferenceControl to FormButtonSeparatorControl","linkify":"F Classes: FormBuildReferenceControl to FormButtonSeparatorControl","nodes":[{"content":"F Classes: FormBuildReferenceControl to FormButtonSeparatorControl","pos":[0,66]}]},{"pos":[698,729],"content":"Class FormBuildReferenceControl","linkify":"Class FormBuildReferenceControl","nodes":[{"content":"Class FormBuildReferenceControl","pos":[0,31]}]},{"pos":[829,836],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[842,850],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[856,863],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[867,873]},{"content":"Description","pos":[910,921]},{"content":"public void new(FormContainer container)","pos":[985,1025]},{"pos":[1047,1057],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[1110,1120],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[1122,1131]},{"pos":[1138,1174],"content":"Class FormBuildReferenceGroupControl","linkify":"Class FormBuildReferenceGroupControl","nodes":[{"content":"Class FormBuildReferenceGroupControl","pos":[0,36]}]},{"pos":[1246,1253],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1259,1267],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[1273,1280],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[1284,1290]},{"content":"Description","pos":[1394,1405]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[1788,1834],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[1898,1938]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2040,2083],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[2150,2217]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2292,2341],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[2402,2500]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[2544,2585],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[2654,2703]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[2796,2831],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[2906,2967]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3048,3078],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[3158,3233]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3300,3332],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[3410,3466]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3552,3590],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[3662,3705]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3804,3841],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[3914,3959]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[4056,4128],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[4166,4233]},{"content":"public int containerId()","pos":[4308,4332]},{"content":"Retrieves the ID of the parent container for the control.","pos":[4418,4475]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[4560,4604],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[4812,4871],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[5064,5106],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[5316,5356],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[5426,5498]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[5568,5607],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[5820,5854],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[5930,6011]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[6072,6113],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[6182,6233]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[6324,6388],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[6576,6606],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[6686,6743]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[6828,6862],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[6938,6995]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[7080,7121],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[7190,7241]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[7332,7374],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[7442,7481]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[7584,7620],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[7694,7756]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[7836,7873],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[7946,7985]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[8088,8122],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[8198,8302]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[8340,8385],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[8592,8633],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[8844,8859]},{"content":"Retrieves the ID of the control.","pos":[8954,8986]},{"content":"public boolean isContainer()","pos":[9096,9124]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[9206,9282]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[9348,9388],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[9600,9631],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[9710,9747]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[9852,9892],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10104,10139],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10356,10399],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[10608,10643],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10860,10899],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[11112,11158],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[11364,11400],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[11616,11663],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[11868,11909],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[12120,12162],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[12372,12417],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[12624,12663],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[12876,12924],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[13128,13174],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[13380,13420],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[13632,13673],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[13884,13924],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[14136,14170],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[14388,14423],"source":"public int leftValue(\\[int value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[14640,14683],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterControlId<ph id=\"ph2\">\\]</ph>)","pos":[14892,14959],"source":"public int moveControl(int controlId, \\[int insertAfterControlId\\])"},{"content":"Moves a specified control to the control.","pos":[15002,15043]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[15144,15174],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[15254,15391]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[15396,15438],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[15648,15684],"source":"public int promptrect(\\[int value\\])"},{"content":"public FieldId referenceField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[15900,15948],"source":"public FieldId referenceField(\\[FieldId value\\])"},{"content":"public str replacementFieldGroup(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[16152,16199],"source":"public str replacementFieldGroup(\\[str value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[16404,16461],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[16656,16699],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[16908,16946],"source":"public boolean skip(\\[boolean value\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[17160,17191],"source":"public int style(\\[int value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[17412,17451],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[17664,17697],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[17916,17950],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[18168,18198],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[18420,18463],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[18672,18706],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[18924,18962],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[19176,19215],"source":"public int userDataItems(\\[int value\\])"},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[19428,19475],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public Int64 value(<ph id=\"ph1\">\\[</ph>Int64 value<ph id=\"ph2\">\\]</ph>)","pos":[19680,19715],"source":"public Int64 value(\\[Int64 value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[19932,19992],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[20184,20238],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[20436,20482],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[20688,20726],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[20940,20981],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[21192,21233],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[21302,21340]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[21444,21479],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[21554,21616]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[21696,21732],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[21806,21844]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[21948,22055],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[22203,22222],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[22224,22264]},{"pos":[22321,22331],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[22333,22338]},{"pos":[22347,22359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[22361,22417]},{"pos":[22424,22431],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[22433,22512]},{"pos":[22518,22534],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[22536,22603]},{"pos":[22657,22667],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[22669,22674]},{"pos":[22683,22695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[22697,22749]},{"pos":[22756,22763],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[22765,22887]},{"pos":[22893,22915],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[22917,23015]},{"pos":[23075,23085],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[23087,23092]},{"pos":[23101,23113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[23115,23194]},{"pos":[23201,23208],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[23210,23247]},{"pos":[23253,23275],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[23277,23326]},{"pos":[23378,23388],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[23390,23395]},{"pos":[23404,23416],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[23418,23462]},{"pos":[23469,23476],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[23478,23546]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[23552,23622]},{"content":"The second byte contains a value for green.","pos":[23627,23670]},{"content":"The third byte contains a value for blue.","pos":[23675,23716]},{"content":"The high-order byte must be zero.","pos":[23721,23754]},{"content":"The maximum value for a single byte is 255.","pos":[23759,23802]},{"pos":[23808,23824],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[23826,23887]},{"pos":[23933,23943],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[23945,23950]},{"pos":[23959,23971],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[23973,24034]},{"pos":[24040,24051],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[24053,24128]},{"pos":[24169,24179],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[24181,24186]},{"pos":[24195,24207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[24209,24259]},{"pos":[24266,24273],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[24275,24347]},{"content":"0 Use the default font weight.","pos":[24353,24383]},{"content":"1 Thin.","pos":[24388,24395]},{"content":"2 Extra-light.","pos":[24400,24414]},{"content":"3 Light.","pos":[24419,24427]},{"content":"4 Normal.","pos":[24432,24441]},{"content":"5 Medium.","pos":[24446,24455]},{"content":"6 Semibold.","pos":[24460,24471]},{"content":"7 Bold.","pos":[24476,24483]},{"content":"8 Extra-bold.","pos":[24488,24501]},{"content":"9 Heavy.","pos":[24506,24514]},{"pos":[24520,24533],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[24535,24591]},{"pos":[24634,24644],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[24646,24651]},{"pos":[24660,24672],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[24674,24718]},{"pos":[24725,24732],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[24734,24826]},{"content":"Value.","pos":[24830,24836]},{"content":"Description.","pos":[24839,24851]},{"content":"0","pos":[24882,24883]},{"content":"Auto.","pos":[24891,24896]},{"content":"1","pos":[24908,24909]},{"content":"3D.","pos":[24917,24920]},{"content":"2","pos":[24934,24935]},{"content":"Single line.","pos":[24943,24955]},{"content":"3","pos":[24960,24961]},{"content":"Flat.","pos":[24969,24974]},{"content":"4","pos":[24986,24987]},{"content":"None.","pos":[24995,25000]},{"pos":[25015,25034],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[25036,25079]},{"pos":[25128,25138],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[25140,25145]},{"pos":[25154,25166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[25168,25230]},{"pos":[25237,25244],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[25246,25350]},{"content":"Value.","pos":[25354,25360]},{"content":"Description.","pos":[25363,25375]},{"content":"0","pos":[25422,25423]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25431,25444],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[25456,25457]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25465,25481],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[25490,25491]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25499,25514],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[25524,25526]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25533,25545],"source":"MAC\\_CHARSET"},{"content":"128","pos":[25558,25561]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25567,25584],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[25592,25595]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25601,25616],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[25626,25629]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25635,25650],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[25660,25663]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25669,25689],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[25694,25697]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25703,25717],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[25728,25731]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25737,25753],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[25762,25765]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25771,25790],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[25796,25799]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25805,25820],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[25830,25833]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25839,25855],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[25864,25867]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25873,25892],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[25898,25901]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[25907,25919],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[25931,26019]},{"content":"Value.","pos":[26023,26029]},{"content":"Description.","pos":[26032,26044]},{"content":"130","pos":[26079,26082]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[26088,26102],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of MicrosoftWindows.","pos":[26106,26201]},{"content":"Value.","pos":[26205,26211]},{"content":"Description.","pos":[26214,26226]},{"content":"177","pos":[26263,26266]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[26272,26287],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[26292,26295]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[26301,26316],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of MicrosoftWindows.","pos":[26320,26406]},{"content":"Value.","pos":[26410,26416]},{"content":"Description.","pos":[26419,26431]},{"content":"222","pos":[26464,26467]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[26473,26486],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value that is based on the current system locale.","pos":[26490,26577]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[26578,26669],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[26670,26785]},{"pos":[26791,26809],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[26811,26856]},{"pos":[26904,26914],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[26916,26921]},{"pos":[26930,26942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[26944,26987]},{"pos":[26994,27001],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[27003,27064]},{"content":"Value.","pos":[27068,27074]},{"content":"Style.","pos":[27077,27083]},{"content":"0","pos":[27154,27155]},{"content":"Default.","pos":[27163,27171]},{"content":"1","pos":[27197,27198]},{"content":"The MicrosoftWindows palette.","pos":[27206,27235]},{"content":"2","pos":[27240,27241]},{"content":"The true-color scheme.","pos":[27249,27271]},{"pos":[27286,27309],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[27311,27378]},{"pos":[27461,27471],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[27473,27478]},{"pos":[27487,27499],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[27501,27573]},{"pos":[27580,27587],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[27589,27670]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[27671,27764]},{"pos":[27770,27788],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[27790,27847]},{"pos":[27884,27896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[27898,27929]},{"pos":[27935,27960],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[28015,28025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[28027,28032]},{"pos":[28041,28053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28059,28091],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[28161,28171],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[28173,28178]},{"pos":[28187,28199],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28205,28228],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[28281,28291],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[28293,28298]},{"pos":[28307,28319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28325,28342],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[28344,28416]},{"pos":[28467,28477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[28479,28484]},{"pos":[28493,28505],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[28507,28559]},{"pos":[28565,28585],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[28635,28645],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[28647,28652]},{"pos":[28661,28673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[28679,28694],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[28696,28777]},{"pos":[28822,28832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[28834,28839]},{"pos":[28848,28860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[28862,28922]},{"pos":[28928,28942],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[28944,28995]},{"pos":[29047,29057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[29059,29064]},{"pos":[29073,29085],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[29087,29135]},{"pos":[29142,29149],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[29151,29230]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[29231,29326]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[29327,29461]},{"pos":[29467,29490],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[29565,29575],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[29577,29582]},{"pos":[29591,29603],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[29609,29620],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[29622,29679]},{"pos":[29720,29730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[29732,29737]},{"pos":[29746,29758],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[29760,29815]},{"pos":[29821,29836],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[29838,29895]},{"pos":[29940,29950],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[29952,29957]},{"pos":[29966,29978],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[29980,30013]},{"pos":[30019,30041],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[30043,30094]},{"pos":[30146,30156],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[30158,30163]},{"pos":[30172,30184],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[30186,30230]},{"pos":[30237,30244],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[30246,30314]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[30320,30390]},{"content":"The second byte contains a value for green.","pos":[30395,30438]},{"content":"The third byte contains a value for blue.","pos":[30443,30484]},{"content":"The high-order byte must be zero.","pos":[30489,30522]},{"content":"The maximum value for a single byte is 255.","pos":[30527,30570]},{"pos":[30576,30589],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[30591,30630]},{"pos":[30683,30693],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[30695,30700]},{"content":"mode","pos":[30714,30718]},{"pos":[30727,30739],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[30741,30777]},{"pos":[30784,30791],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[30793,30846]},{"content":"Calculate the height according to the following table:","pos":[30847,30901]},{"content":"Mode.","pos":[30905,30910]},{"content":"Height calculation.","pos":[30924,30943]},{"content":"-1 Exact.","pos":[31131,31140]},{"content":"The exact height in pixels of the controls is used.","pos":[31150,31201]},{"content":"0 Auto.","pos":[31244,31251]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[31263,31352]},{"content":"1 Column height.","pos":[31357,31373]},{"content":"The layout of the form determines the height of the control.","pos":[31376,31436]},{"content":"The height and height calculation mode can be set separately.","pos":[31469,31530]},{"pos":[31536,31553],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[31555,31617]},{"pos":[31664,31674],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[31676,31681]},{"pos":[31690,31702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[31704,31725]},{"pos":[31732,31739],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[31741,31795]},{"content":"Mode.","pos":[31799,31804]},{"content":"Height Calculation.","pos":[31816,31835]},{"content":"Exact.","pos":[32021,32027]},{"content":"The exact height in pixels of the controls is used.","pos":[32038,32089]},{"content":"Auto.","pos":[32132,32137]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[32149,32238]},{"content":"Column height.","pos":[32243,32257]},{"content":"The layout of the form determines the height of the control.","pos":[32260,32320]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[32353,32438]},{"pos":[32444,32462],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[32464,32503]},{"pos":[32551,32561],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[32563,32568]},{"pos":[32577,32589],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[32591,32612]},{"pos":[32619,32626],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[32628,32718]},{"pos":[32724,32739],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[32741,32845]},{"pos":[32890,32900],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[32902,32907]},{"pos":[32916,32928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[32930,32985]},{"pos":[32992,32999],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialogue box.The help text must not exceed 250 characters.","pos":[33001,33121]},{"pos":[33127,33145],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[33201,33211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[33213,33218]},{"pos":[33227,33239],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33245,33267],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[33319,33329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[33331,33336]},{"pos":[33345,33357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33363,33372],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[33374,33406]},{"pos":[33434,33446],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[33448,33470]},{"pos":[33476,33494],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[33496,33572]},{"pos":[33613,33625],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[33627,33701]},{"pos":[33707,33720],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[33771,33781],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[33783,33788]},{"pos":[33797,33809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[33815,33827],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[33829,33866]},{"pos":[33908,33918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[33920,33925]},{"pos":[33934,33946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[33948,33986]},{"pos":[33993,34000],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[34002,34080]},{"content":"The label property value cannot exceed 250 characters.","pos":[34081,34135]},{"pos":[34141,34162],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[34213,34223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[34225,34230]},{"pos":[34239,34251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34257,34273],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[34319,34329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[34331,34336]},{"pos":[34345,34357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34363,34387],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[34441,34451],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[34453,34458]},{"pos":[34467,34479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34485,34501],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[34547,34557],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[34559,34564]},{"pos":[34573,34585],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34591,34611],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[34661,34671],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[34673,34678]},{"pos":[34687,34699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34705,34732],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[34789,34799],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[34801,34806]},{"pos":[34815,34827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34833,34850],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[34897,34907],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[34909,34914]},{"pos":[34923,34935],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[34941,34959],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[35017,35027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35029,35034]},{"content":"mode","pos":[35048,35052]},{"pos":[35061,35073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35079,35101],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[35153,35163],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35165,35170]},{"pos":[35179,35191],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35197,35220],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[35273,35283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35285,35290]},{"pos":[35299,35311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35317,35335],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[35391,35401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35403,35408]},{"pos":[35417,35429],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35435,35455],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[35505,35515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35517,35522]},{"pos":[35531,35543],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35549,35570],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[35629,35639],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35641,35646]},{"pos":[35655,35667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35673,35690],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[35747,35757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35759,35764]},{"content":"mode","pos":[35778,35782]},{"pos":[35791,35803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35809,35830],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[35881,35891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[35893,35898]},{"pos":[35907,35919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[35925,35947],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[35999,36009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[36011,36016]},{"pos":[36025,36037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36043,36054],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[36105,36115],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[36117,36122]},{"content":"mode","pos":[36136,36140]},{"pos":[36149,36161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36167,36182],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[36227,36237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[36239,36244]},{"pos":[36253,36265],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36271,36287],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[36333,36343],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[36345,36350]},{"pos":[36359,36371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36377,36393],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[36447,36457],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[36459,36464]},{"pos":[36473,36485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36491,36509],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"content":"Moves a specified control to the control.","pos":[36511,36552]},{"pos":[36630,36640],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[36642,36651]},{"content":"insertAfterControlId","pos":[36665,36685]},{"pos":[36694,36706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control was moved successfully; otherwise, 0.","pos":[36708,36762]},{"pos":[36769,36776],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed.","pos":[36778,36935]},{"content":"However, in some cases, such as for the reference group control instance, controls cannot be moved.","pos":[36936,37035]},{"pos":[37041,37052],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[37054,37191]},{"pos":[37232,37242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[37244,37249]},{"pos":[37258,37270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[37272,37336]},{"pos":[37343,37350],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[37352,37446]},{"content":"Begins with a letter.","pos":[37452,37473]},{"content":"Doesn't exceed 250 characters.","pos":[37478,37508]},{"content":"Can include numbers and underscore characters.","pos":[37513,37559]},{"content":"Cannot include punctuation or spaces.","pos":[37564,37601]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[37606,37724]},{"pos":[37730,37753],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[37806,37816],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[37818,37823]},{"pos":[37832,37844],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37850,37867],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[37914,37924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[37926,37931]},{"pos":[37940,37952],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[37958,37979],"content":"Method referenceField","linkify":"Method referenceField","nodes":[{"content":"Method referenceField","pos":[0,21]}]},{"pos":[38038,38048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38050,38055]},{"pos":[38064,38076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38082,38110],"content":"Method replacementFieldGroup","linkify":"Method replacementFieldGroup","nodes":[{"content":"Method replacementFieldGroup","pos":[0,28]}]},{"pos":[38168,38178],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38180,38185]},{"pos":[38194,38206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38212,38230],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[38298,38308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38310,38315]},{"pos":[38324,38336],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38342,38358],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[38412,38422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38424,38429]},{"pos":[38438,38450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38456,38467],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"pos":[38516,38526],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38528,38533]},{"pos":[38542,38554],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38560,38572],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[38614,38624],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38626,38631]},{"pos":[38640,38652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38658,38668],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[38718,38728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38730,38735]},{"content":"mode","pos":[38749,38753]},{"pos":[38762,38774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38780,38794],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[38838,38848],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38850,38855]},{"pos":[38864,38876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38882,38897],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[38942,38952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[38954,38959]},{"pos":[38968,38980],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[38986,38997],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[39038,39048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39050,39055]},{"pos":[39064,39076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39082,39098],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[39152,39162],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39164,39169]},{"pos":[39178,39190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39196,39211],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[39256,39266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39268,39273]},{"pos":[39282,39294],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39300,39319],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[39368,39378],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39380,39385]},{"pos":[39394,39406],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39412,39432],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[39482,39492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39494,39499]},{"pos":[39508,39520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39526,39546],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[39604,39614],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39616,39621]},{"pos":[39630,39642],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39648,39660],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[39706,39716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39718,39723]},{"pos":[39732,39744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39750,39772],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[39841,39851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[39853,39858]},{"content":"mode","pos":[39872,39876]},{"pos":[39885,39897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39903,39929],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[39994,40004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[40006,40010]},{"pos":[40019,40031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40037,40064],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[40121,40131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[40133,40138]},{"pos":[40147,40159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40165,40184],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[40233,40243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[40245,40250]},{"pos":[40259,40271],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40277,40291],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[40343,40353],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[40355,40360]},{"pos":[40369,40381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[40387,40399],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[40401,40439]},{"pos":[40491,40501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[40503,40508]},{"content":"mode","pos":[40522,40526]},{"pos":[40535,40547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[40549,40584]},{"pos":[40591,40598],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[40600,40653]},{"content":"Calculate the width according to the following table:","pos":[40654,40707]},{"content":"Mode.","pos":[40711,40716]},{"content":"Width calculation.","pos":[40729,40747]},{"content":"-1 Exact.","pos":[40933,40942]},{"content":"The exact width in pixels of the controls is used.","pos":[40951,41001]},{"content":"0 Auto.","pos":[41044,41051]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[41062,41150]},{"content":"1 Column width.","pos":[41155,41170]},{"content":"The layout of the form determines the width of the control.","pos":[41173,41232]},{"content":"The width and width calculation mode can be set separately.","pos":[41265,41324]},{"pos":[41330,41346],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[41348,41410]},{"pos":[41456,41466],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[41468,41473]},{"pos":[41482,41494],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[41496,41557]},{"pos":[41564,41571],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[41573,41626]},{"content":"Mode.","pos":[41630,41635]},{"content":"Width Calculation.","pos":[41646,41664]},{"content":"Exact.","pos":[41848,41854]},{"content":"The exact width in pixels of the controls is used.","pos":[41864,41914]},{"content":"Auto.","pos":[41957,41962]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[41973,42061]},{"content":"Column width.","pos":[42066,42079]},{"content":"The layout of the form determines the width of the control.","pos":[42082,42141]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[42174,42257]},{"pos":[42263,42280],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[42282,42320]},{"pos":[42367,42377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[42379,42384]},{"pos":[42393,42405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[42407,42442]},{"pos":[42449,42456],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[42458,42531]},{"pos":[42537,42566],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[42684,42694],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[42696,42712]},{"content":"objectMethodToCall","pos":[42726,42744]},{"content":"overrideObject","pos":[42758,42772]},{"pos":[42779,42809],"content":"Class FormBuildRichTextControl","linkify":"Class FormBuildRichTextControl","nodes":[{"content":"Class FormBuildRichTextControl","pos":[0,30]}]},{"pos":[42875,42882],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[42888,42896],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[42902,42909],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[42913,42919]},{"content":"Description","pos":[43023,43034]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[43417,43463],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[43527,43567]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[43669,43712],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[43779,43846]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[43921,43957],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[44173,44222],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[44283,44381]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[44425,44466],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[44535,44584]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[44677,44712],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[44787,44849]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[44929,44959],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[45039,45114]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[45181,45213],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[45291,45347]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[45433,45474],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[45685,45723],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[45795,45838]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[45937,45974],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[46047,46092]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[46189,46261],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[46299,46366]},{"content":"public int containerId()","pos":[46441,46465]},{"content":"Retrieves the ID of the parent container for the control.","pos":[46551,46608]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[46693,46737],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[46945,47004],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[47197,47240],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[47449,47485],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[47701,47743],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[47953,47993],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that is used by the control or the form.","pos":[48063,48130]},{"content":"public int direction(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[48205,48240],"source":"public int direction(\\[int value\\])"},{"content":"public int displayHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[48457,48515],"source":"public int displayHeight(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayHeightMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[48709,48761],"source":"public AutoMode displayHeightMode(\\[AutoMode mode\\])"},{"content":"public int displayHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[48961,49005],"source":"public int displayHeightValue(\\[int value\\])"},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[49213,49271],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[49465,49517],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[49717,49761],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[49969,50008],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[50221,50255],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[50331,50412]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[50473,50514],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[50583,50634]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[50725,50789],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[50977,51017],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[51229,51259],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[51339,51396]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[51481,51515],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[51591,51648]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[51733,51774],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[51843,51894]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[51985,52027],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[52095,52134]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[52237,52273],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[52347,52409]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[52489,52526],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[52599,52638]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[52741,52775],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[52851,52955]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[52993,53034],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[53245,53260]},{"content":"Retrieves the ID of the control.","pos":[53355,53387]},{"content":"public int iMEMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[53497,53530],"source":"public int iMEMode(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[53749,53777]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[53859,53935]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[54001,54041],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[54253,54284],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[54363,54400]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[54505,54545],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[54757,54792],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[55009,55052],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[55261,55296],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[55513,55552],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[55765,55811],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[56017,56053],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[56269,56316],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[56521,56562],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[56773,56815],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[57025,57070],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[57277,57316],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[57529,57577],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[57781,57827],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[58033,58073],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[58285,58326],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[58537,58577],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[58789,58823],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[59041,59076],"source":"public int leftValue(\\[int value\\])"},{"content":"public int limitText(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[59293,59347],"source":"public int limitText(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode limitTextMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[59545,59593],"source":"public AutoMode limitTextMode(\\[AutoMode mode\\])"},{"content":"public int limitTextValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[59797,59837],"source":"public int limitTextValue(\\[int value\\])"},{"content":"public int lookupButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[60049,60087],"source":"public int lookupButton(\\[int value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[60301,60344],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public boolean multiLine(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[60553,60596],"source":"public boolean multiLine(\\[boolean value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[60805,60835],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[60915,61052]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[61057,61099],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[61309,61345],"source":"public int promptrect(\\[int value\\])"},{"content":"public boolean replaceOnLookup(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[61561,61610],"source":"public boolean replaceOnLookup(\\[boolean value\\])"},{"content":"public int searchAfterInput(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[61813,61855],"source":"public int searchAfterInput(\\[int value\\])"},{"content":"public int searchMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[62065,62101],"source":"public int searchMode(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[62317,62374],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[62569,62612],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[62821,62859],"source":"public boolean skip(\\[boolean value\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[63073,63104],"source":"public int style(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[63325,63355],"source":"public str text(\\[str value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[63577,63616],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[63829,63862],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[64081,64115],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[64333,64363],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[64585,64628],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[64837,64871],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[65089,65127],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[65341,65380],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[65593,65653],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[65845,65899],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[66097,66143],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[66349,66387],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[66601,66642],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[66853,66894],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[66963,67001]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[67105,67140],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[67215,67277]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[67357,67393],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[67467,67505]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[67609,67716],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[67864,67883],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[67885,67925]},{"pos":[67982,67992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67994,67999]},{"pos":[68008,68020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[68022,68078]},{"pos":[68085,68092],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[68094,68173]},{"pos":[68179,68195],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[68197,68264]},{"pos":[68318,68328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68330,68335]},{"pos":[68344,68356],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[68358,68410]},{"pos":[68417,68424],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[68426,68548]},{"pos":[68554,68571],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[68618,68628],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68630,68635]},{"pos":[68644,68656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68662,68684],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[68686,68784]},{"pos":[68844,68854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68856,68861]},{"pos":[68870,68882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[68884,68963]},{"pos":[68970,68977],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[68979,69016]},{"pos":[69022,69044],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[69046,69095]},{"pos":[69147,69157],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[69159,69164]},{"pos":[69173,69185],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[69187,69231]},{"pos":[69238,69245],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[69247,69315]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[69321,69391]},{"content":"The second byte contains a value for green.","pos":[69396,69439]},{"content":"The third byte contains a value for blue.","pos":[69444,69485]},{"content":"The high-order byte must be zero.","pos":[69490,69523]},{"content":"The maximum value for a single byte is 255.","pos":[69528,69571]},{"pos":[69577,69593],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[69595,69657]},{"pos":[69703,69713],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[69715,69720]},{"pos":[69729,69741],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[69743,69804]},{"pos":[69810,69821],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[69823,69898]},{"pos":[69939,69949],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[69951,69956]},{"pos":[69965,69977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[69979,70029]},{"pos":[70036,70043],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[70045,70117]},{"content":"0 Use the default font weight.","pos":[70123,70153]},{"content":"1 Thin.","pos":[70158,70165]},{"content":"2 Extra-light.","pos":[70170,70184]},{"content":"3 Light.","pos":[70189,70197]},{"content":"4 Normal.","pos":[70202,70211]},{"content":"5 Medium.","pos":[70216,70225]},{"content":"6 Semibold.","pos":[70230,70241]},{"content":"7 Bold.","pos":[70246,70253]},{"content":"8 Extra-bold.","pos":[70258,70271]},{"content":"9 Heavy.","pos":[70276,70284]},{"pos":[70290,70303],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[70305,70361]},{"pos":[70404,70414],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70416,70421]},{"pos":[70430,70442],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[70444,70488]},{"pos":[70495,70502],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[70504,70596]},{"content":"Value.","pos":[70600,70606]},{"content":"Description.","pos":[70609,70621]},{"content":"0","pos":[70652,70653]},{"content":"Auto.","pos":[70661,70666]},{"content":"1","pos":[70678,70679]},{"content":"3D.","pos":[70687,70690]},{"content":"2","pos":[70704,70705]},{"content":"Single line.","pos":[70713,70725]},{"content":"3","pos":[70730,70731]},{"content":"Flat.","pos":[70739,70744]},{"content":"4","pos":[70756,70757]},{"content":"None.","pos":[70765,70770]},{"pos":[70785,70807],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[70859,70869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70871,70876]},{"pos":[70885,70897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70903,70922],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[70924,70967]},{"pos":[71016,71026],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71028,71033]},{"pos":[71042,71054],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[71056,71118]},{"pos":[71125,71132],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[71134,71238]},{"content":"Value.","pos":[71242,71248]},{"content":"Description.","pos":[71251,71263]},{"content":"0","pos":[71310,71311]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71319,71332],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[71344,71345]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71353,71369],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[71378,71379]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71387,71402],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[71412,71414]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71421,71433],"source":"MAC\\_CHARSET"},{"content":"128","pos":[71446,71449]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71455,71472],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[71480,71483]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71489,71504],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[71514,71517]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71523,71538],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[71548,71551]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71557,71577],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[71582,71585]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71591,71605],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[71616,71619]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71625,71641],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[71650,71653]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71659,71678],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[71684,71687]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71693,71708],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[71718,71721]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71727,71743],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[71752,71755]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71761,71780],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[71786,71789]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71795,71807],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[71819,71907]},{"content":"Value.","pos":[71911,71917]},{"content":"Description.","pos":[71920,71932]},{"content":"130","pos":[71967,71970]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[71976,71990],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of MicrosoftWindows.","pos":[71994,72089]},{"content":"Value.","pos":[72093,72099]},{"content":"Description.","pos":[72102,72114]},{"content":"177","pos":[72151,72154]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[72160,72175],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[72180,72183]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[72189,72204],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of MicrosoftWindows.","pos":[72208,72294]},{"content":"Value.","pos":[72298,72304]},{"content":"Description.","pos":[72307,72319]},{"content":"222","pos":[72352,72355]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[72361,72374],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value that is based on the current system locale.","pos":[72378,72465]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[72466,72557],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[72558,72673]},{"pos":[72679,72697],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[72699,72744]},{"pos":[72792,72802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72804,72809]},{"pos":[72818,72830],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[72832,72875]},{"pos":[72882,72889],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[72891,72952]},{"content":"Value.","pos":[72956,72962]},{"content":"Style.","pos":[72965,72971]},{"content":"0","pos":[73042,73043]},{"content":"Default.","pos":[73051,73059]},{"content":"1","pos":[73085,73086]},{"content":"The MicrosoftWindows palette.","pos":[73094,73123]},{"content":"2","pos":[73128,73129]},{"content":"The true-color scheme.","pos":[73137,73159]},{"pos":[73174,73197],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[73199,73266]},{"pos":[73349,73359],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73361,73366]},{"pos":[73375,73387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[73389,73461]},{"pos":[73468,73475],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[73477,73558]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[73559,73652]},{"pos":[73658,73676],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[73678,73735]},{"pos":[73772,73784],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[73786,73817]},{"pos":[73823,73848],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[73903,73913],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73915,73920]},{"pos":[73929,73941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[73947,73979],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[74049,74059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74061,74066]},{"pos":[74075,74087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74093,74109],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[74163,74173],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74175,74180]},{"pos":[74189,74201],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74207,74224],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[74271,74281],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74283,74288]},{"pos":[74297,74309],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74315,74338],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[74391,74401],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74403,74408]},{"pos":[74417,74429],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74435,74452],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that is used by the control or the form.","pos":[74454,74521]},{"pos":[74572,74582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74584,74589]},{"pos":[74598,74610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that is used.","pos":[74612,74659]},{"pos":[74665,74681],"content":"Method direction","linkify":"Method direction","nodes":[{"content":"Method direction","pos":[0,16]}]},{"pos":[74727,74737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74739,74744]},{"pos":[74753,74765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74771,74791],"content":"Method displayHeight","linkify":"Method displayHeight","nodes":[{"content":"Method displayHeight","pos":[0,20]}]},{"pos":[74858,74868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74870,74875]},{"content":"mode","pos":[74889,74893]},{"pos":[74902,74914],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[74920,74944],"content":"Method displayHeightMode","linkify":"Method displayHeightMode","nodes":[{"content":"Method displayHeightMode","pos":[0,24]}]},{"pos":[75007,75017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[75019,75023]},{"pos":[75032,75044],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75050,75075],"content":"Method displayHeightValue","linkify":"Method displayHeightValue","nodes":[{"content":"Method displayHeightValue","pos":[0,25]}]},{"pos":[75130,75140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75142,75147]},{"pos":[75156,75168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75174,75194],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[75261,75271],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75273,75278]},{"content":"mode","pos":[75292,75296]},{"pos":[75305,75317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75323,75347],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[75410,75420],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[75422,75426]},{"pos":[75435,75447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75453,75478],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[75533,75543],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75545,75550]},{"pos":[75559,75571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75577,75597],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[75647,75657],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75659,75664]},{"pos":[75673,75685],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[75691,75706],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[75708,75789]},{"pos":[75834,75844],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75846,75851]},{"pos":[75860,75872],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[75874,75934]},{"pos":[75940,75954],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[75956,76007]},{"pos":[76059,76069],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76071,76076]},{"pos":[76085,76097],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[76099,76147]},{"pos":[76154,76161],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[76163,76242]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[76243,76338]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[76339,76473]},{"pos":[76479,76502],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[76577,76587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76589,76594]},{"pos":[76603,76615],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76621,76642],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[76693,76703],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76705,76710]},{"pos":[76719,76731],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76737,76748],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[76750,76807]},{"pos":[76848,76858],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76860,76865]},{"pos":[76874,76886],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[76888,76943]},{"pos":[76949,76964],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[76966,77023]},{"pos":[77068,77078],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77080,77085]},{"pos":[77094,77106],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[77108,77141]},{"pos":[77147,77169],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[77171,77222]},{"pos":[77274,77284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77286,77291]},{"pos":[77300,77312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[77314,77358]},{"pos":[77365,77372],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[77374,77442]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[77448,77518]},{"content":"The second byte contains a value for green.","pos":[77523,77566]},{"content":"The third byte contains a value for blue.","pos":[77571,77612]},{"content":"The high-order byte must be zero.","pos":[77617,77650]},{"content":"The maximum value for a single byte is 255.","pos":[77655,77698]},{"pos":[77704,77717],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[77719,77758]},{"pos":[77811,77821],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77823,77828]},{"content":"mode","pos":[77842,77846]},{"pos":[77855,77867],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[77869,77905]},{"pos":[77912,77919],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[77921,77974]},{"content":"Calculate the height according to the following table:","pos":[77975,78029]},{"content":"Mode.","pos":[78033,78038]},{"content":"Height calculation.","pos":[78052,78071]},{"content":"-1 Exact.","pos":[78259,78268]},{"content":"The exact height in pixels of the controls is used.","pos":[78278,78329]},{"content":"0 Auto.","pos":[78372,78379]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[78391,78480]},{"content":"1 Column height.","pos":[78485,78501]},{"content":"The layout of the form determines the height of the control.","pos":[78504,78564]},{"content":"The height and height calculation mode can be set separately.","pos":[78597,78658]},{"pos":[78664,78681],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[78683,78745]},{"pos":[78792,78802],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78804,78809]},{"pos":[78818,78830],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[78832,78853]},{"pos":[78860,78867],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[78869,78923]},{"content":"Mode.","pos":[78927,78932]},{"content":"Height Calculation.","pos":[78944,78963]},{"content":"Exact.","pos":[79149,79155]},{"content":"The exact height in pixels of the controls is used.","pos":[79166,79217]},{"content":"Auto.","pos":[79260,79265]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[79277,79366]},{"content":"Column height.","pos":[79371,79385]},{"content":"The layout of the form determines the height of the control.","pos":[79388,79448]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[79481,79566]},{"pos":[79572,79590],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[79592,79631]},{"pos":[79679,79689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79691,79696]},{"pos":[79705,79717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[79719,79740]},{"pos":[79747,79754],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[79756,79846]},{"pos":[79852,79867],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[79869,79973]},{"pos":[80018,80028],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80030,80035]},{"pos":[80044,80056],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[80058,80113]},{"pos":[80120,80127],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialogue box.The help text must not exceed 250 characters.","pos":[80129,80249]},{"pos":[80255,80277],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[80329,80339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80341,80346]},{"pos":[80355,80367],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80373,80382],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[80384,80416]},{"pos":[80444,80456],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[80458,80480]},{"pos":[80486,80500],"content":"Method iMEMode","linkify":"Method iMEMode","nodes":[{"content":"Method iMEMode","pos":[0,14]}]},{"pos":[80544,80554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80556,80561]},{"pos":[80570,80582],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80588,80606],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[80608,80684]},{"pos":[80725,80737],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[80739,80813]},{"pos":[80819,80832],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[80883,80893],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80895,80900]},{"pos":[80909,80921],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80927,80939],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[80941,80978]},{"pos":[81020,81030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81032,81037]},{"pos":[81046,81058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[81060,81098]},{"pos":[81105,81112],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[81114,81192]},{"content":"The label property value cannot exceed 250 characters.","pos":[81193,81247]},{"pos":[81253,81274],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[81325,81335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81337,81342]},{"pos":[81351,81363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81369,81385],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[81431,81441],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81443,81448]},{"pos":[81457,81469],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81475,81499],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[81553,81563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81565,81570]},{"pos":[81579,81591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81597,81613],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[81659,81669],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81671,81676]},{"pos":[81685,81697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81703,81723],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[81773,81783],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81785,81790]},{"pos":[81799,81811],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81817,81844],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[81901,81911],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81913,81918]},{"pos":[81927,81939],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[81945,81962],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[82009,82019],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82021,82026]},{"pos":[82035,82047],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82053,82071],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[82129,82139],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82141,82146]},{"content":"mode","pos":[82160,82164]},{"pos":[82173,82185],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82191,82213],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[82265,82275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82277,82282]},{"pos":[82291,82303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82309,82332],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[82385,82395],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82397,82402]},{"pos":[82411,82423],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82429,82447],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[82503,82513],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82515,82520]},{"pos":[82529,82541],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82547,82567],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[82617,82627],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82629,82634]},{"pos":[82643,82655],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82661,82682],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[82741,82751],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82753,82758]},{"pos":[82767,82779],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82785,82802],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[82859,82869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82871,82876]},{"content":"mode","pos":[82890,82894]},{"pos":[82903,82915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[82921,82942],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[82993,83003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83005,83010]},{"pos":[83019,83031],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83037,83059],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[83111,83121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83123,83128]},{"pos":[83137,83149],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83155,83166],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[83217,83227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83229,83234]},{"content":"mode","pos":[83248,83252]},{"pos":[83261,83273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83279,83294],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[83339,83349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83351,83356]},{"pos":[83365,83377],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83383,83399],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[83445,83455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83457,83462]},{"pos":[83471,83483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83489,83505],"content":"Method limitText","linkify":"Method limitText","nodes":[{"content":"Method limitText","pos":[0,16]}]},{"pos":[83568,83578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83580,83585]},{"content":"mode","pos":[83599,83603]},{"pos":[83612,83624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83630,83650],"content":"Method limitTextMode","linkify":"Method limitTextMode","nodes":[{"content":"Method limitTextMode","pos":[0,20]}]},{"pos":[83709,83719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[83721,83725]},{"pos":[83734,83746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83752,83773],"content":"Method limitTextValue","linkify":"Method limitTextValue","nodes":[{"content":"Method limitTextValue","pos":[0,21]}]},{"pos":[83824,83834],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83836,83841]},{"pos":[83850,83862],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83868,83887],"content":"Method lookupButton","linkify":"Method lookupButton","nodes":[{"content":"Method lookupButton","pos":[0,19]}]},{"pos":[83936,83946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83948,83953]},{"pos":[83962,83974],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[83980,83996],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[84050,84060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84062,84067]},{"pos":[84076,84088],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84094,84110],"content":"Method multiLine","linkify":"Method multiLine","nodes":[{"content":"Method multiLine","pos":[0,16]}]},{"pos":[84164,84174],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84176,84181]},{"pos":[84190,84202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[84208,84219],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[84221,84358]},{"pos":[84399,84409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84411,84416]},{"pos":[84425,84437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[84439,84503]},{"pos":[84510,84517],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[84519,84613]},{"content":"Begins with a letter.","pos":[84619,84640]},{"content":"Doesn't exceed 250 characters.","pos":[84645,84675]},{"content":"Can include numbers and underscore characters.","pos":[84680,84726]},{"content":"Cannot include punctuation or spaces.","pos":[84731,84768]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[84773,84891]},{"pos":[84897,84920],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[84973,84983],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84985,84990]},{"pos":[84999,85011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85017,85034],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[85081,85091],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85093,85098]},{"pos":[85107,85119],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85125,85147],"content":"Method replaceOnLookup","linkify":"Method replaceOnLookup","nodes":[{"content":"Method replaceOnLookup","pos":[0,22]}]},{"pos":[85207,85217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85219,85224]},{"pos":[85233,85245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85251,85274],"content":"Method searchAfterInput","linkify":"Method searchAfterInput","nodes":[{"content":"Method searchAfterInput","pos":[0,23]}]},{"pos":[85327,85337],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85339,85344]},{"pos":[85353,85365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85371,85388],"content":"Method searchMode","linkify":"Method searchMode","nodes":[{"content":"Method searchMode","pos":[0,17]}]},{"pos":[85435,85445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85447,85452]},{"pos":[85461,85473],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85479,85497],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[85565,85575],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85577,85582]},{"pos":[85591,85603],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85609,85625],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[85679,85689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85691,85696]},{"pos":[85705,85717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85723,85734],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"pos":[85783,85793],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85795,85800]},{"pos":[85809,85821],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85827,85839],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[85881,85891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85893,85898]},{"pos":[85907,85919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85925,85936],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[85977,85987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85989,85994]},{"pos":[86003,86015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86021,86031],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[86081,86091],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86093,86098]},{"content":"mode","pos":[86112,86116]},{"pos":[86125,86137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86143,86157],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[86201,86211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86213,86218]},{"pos":[86227,86239],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86245,86260],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[86305,86315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86317,86322]},{"pos":[86331,86343],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86349,86360],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[86401,86411],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86413,86418]},{"pos":[86427,86439],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86445,86461],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[86515,86525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86527,86532]},{"pos":[86541,86553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86559,86574],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[86619,86629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86631,86636]},{"pos":[86645,86657],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86663,86682],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[86731,86741],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86743,86748]},{"pos":[86757,86769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86775,86795],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[86845,86855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86857,86862]},{"pos":[86871,86883],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[86889,86911],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[86980,86990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[86992,86997]},{"content":"mode","pos":[87011,87015]},{"pos":[87024,87036],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87042,87068],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[87133,87143],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[87145,87149]},{"pos":[87158,87170],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87176,87203],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[87260,87270],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87272,87277]},{"pos":[87286,87298],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87304,87323],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[87372,87382],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87384,87389]},{"pos":[87398,87410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87416,87430],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[87482,87492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87494,87499]},{"pos":[87508,87520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[87526,87538],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[87540,87578]},{"pos":[87630,87640],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[87642,87647]},{"content":"mode","pos":[87661,87665]},{"pos":[87674,87686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[87688,87723]},{"pos":[87730,87737],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[87739,87845]},{"content":"Mode.","pos":[87849,87854]},{"content":"Width calculation.","pos":[87867,87885]},{"content":"-1 Exact.","pos":[88071,88080]},{"content":"The exact width in pixels of the controls is used.","pos":[88089,88139]},{"content":"0 Auto.","pos":[88182,88189]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[88200,88288]},{"content":"1 Column width.","pos":[88293,88308]},{"content":"The layout of the form determines the width of the control.","pos":[88311,88370]},{"content":"The width and width calculation mode can be set separately.","pos":[88403,88462]},{"pos":[88468,88484],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[88486,88548]},{"pos":[88594,88604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88606,88611]},{"pos":[88620,88632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[88634,88695]},{"pos":[88702,88709],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[88711,88764]},{"content":"Mode.","pos":[88768,88773]},{"content":"Width Calculation.","pos":[88784,88802]},{"content":"Exact.","pos":[88986,88992]},{"content":"The exact width in pixels of the controls is used.","pos":[89002,89052]},{"content":"Auto.","pos":[89095,89100]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[89111,89199]},{"content":"Column width.","pos":[89204,89217]},{"content":"The layout of the form determines the width of the control.","pos":[89220,89279]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[89312,89395]},{"pos":[89401,89418],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[89420,89458]},{"pos":[89505,89515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89517,89522]},{"pos":[89531,89543],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[89545,89580]},{"pos":[89587,89594],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[89596,89669]},{"pos":[89675,89704],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[89822,89832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[89834,89850]},{"content":"objectMethodToCall","pos":[89864,89882]},{"content":"overrideObject","pos":[89896,89910]},{"pos":[89917,89953],"content":"Class FormBuildSegmentedEntryControl","linkify":"Class FormBuildSegmentedEntryControl","nodes":[{"content":"Class FormBuildSegmentedEntryControl","pos":[0,36]}]},{"pos":[90025,90032],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[90038,90046],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[90052,90059],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[90063,90069]},{"content":"Description","pos":[90173,90184]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[90567,90613],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[90677,90717]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[90819,90862],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[90929,90996]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[91071,91120],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[91181,91279]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[91323,91364],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[91433,91482]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[91575,91610],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[91685,91746]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[91827,91859],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[91937,91993]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[92079,92116],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[92189,92234]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[92331,92403],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[92441,92508]},{"content":"public int containerId()","pos":[92583,92607]},{"content":"Retrieves the ID of the parent container for the control.","pos":[92693,92750]},{"content":"public boolean contextFlyout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[92835,92882],"source":"public boolean contextFlyout(\\[boolean value\\])"},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[93087,93131],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[93339,93398],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[93591,93633],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[93843,93883],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[93953,94025]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[94095,94134],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[94347,94381],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[94457,94538]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[94599,94640],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[94709,94760]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[94851,94915],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[95103,95144],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[95213,95264]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[95355,95397],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[95465,95504]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[95607,95643],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[95717,95779]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[95859,95896],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[95969,96008]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[96111,96145],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[96221,96325]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[96363,96404],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[96615,96630]},{"content":"Retrieves the ID of the control.","pos":[96725,96757]},{"content":"public boolean isContainer()","pos":[96867,96895]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[96977,97053]},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[97119,97150],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[97229,97266]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[97371,97411],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[97623,97658],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[97875,97918],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[98127,98162],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[98379,98418],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[98631,98677],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[98883,98919],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[99135,99182],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[99387,99428],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[99639,99681],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[99891,99936],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[100143,100182],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[100395,100443],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[100647,100693],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[100899,100939],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[101151,101192],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[101403,101443],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[101655,101689],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[101907,101942],"source":"public int leftValue(\\[int value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[102159,102202],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[102411,102441],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[102521,102658]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[102663,102705],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[102915,102951],"source":"public int promptrect(\\[int value\\])"},{"content":"public FieldId referenceField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[103167,103215],"source":"public FieldId referenceField(\\[FieldId value\\])"},{"content":"public str replacementFieldGroup(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[103419,103466],"source":"public str replacementFieldGroup(\\[str value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[103671,103728],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[103923,103966],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[104175,104213],"source":"public boolean skip(\\[boolean value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[104427,104466],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[104679,104712],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[104931,104965],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[105183,105213],"source":"public int type(\\[int value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[105435,105469],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[105687,105725],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[105939,105978],"source":"public int userDataItems(\\[int value\\])"},{"content":"public Int64 value(<ph id=\"ph1\">\\[</ph>Int64 value<ph id=\"ph2\">\\]</ph>)","pos":[106191,106226],"source":"public Int64 value(\\[Int64 value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[106443,106503],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[106695,106749],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[106947,106993],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[107199,107237],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[107451,107492],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[107703,107744],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[107813,107851]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[107955,107990],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[108065,108127]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[108207,108243],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[108317,108355]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[108459,108566],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[108714,108733],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[108735,108775]},{"pos":[108832,108842],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[108844,108849]},{"pos":[108858,108870],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[108872,108928]},{"pos":[108935,108942],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[108944,109023]},{"pos":[109029,109045],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[109047,109114]},{"pos":[109168,109178],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[109180,109185]},{"pos":[109194,109206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[109208,109260]},{"pos":[109267,109274],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[109276,109398]},{"pos":[109404,109426],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[109428,109526]},{"pos":[109586,109596],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[109598,109603]},{"pos":[109612,109624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[109626,109705]},{"pos":[109712,109719],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[109721,109758]},{"pos":[109764,109786],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[109788,109837]},{"pos":[109889,109899],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[109901,109906]},{"pos":[109915,109927],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[109929,109973]},{"pos":[109980,109987],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[109989,110057]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[110063,110133]},{"content":"The second byte contains a value for green.","pos":[110138,110181]},{"content":"The third byte contains a value for blue.","pos":[110186,110227]},{"content":"The high-order byte must be zero.","pos":[110232,110265]},{"content":"The maximum value for a single byte is 255.","pos":[110270,110313]},{"pos":[110319,110335],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[110337,110398]},{"pos":[110444,110454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[110456,110461]},{"pos":[110470,110482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[110484,110545]},{"pos":[110551,110564],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[110566,110622]},{"pos":[110665,110675],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[110677,110682]},{"pos":[110691,110703],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[110705,110749]},{"pos":[110756,110763],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[110765,110857]},{"content":"Value.","pos":[110861,110867]},{"content":"Description.","pos":[110870,110882]},{"content":"0","pos":[110913,110914]},{"content":"Auto.","pos":[110922,110927]},{"content":"1","pos":[110939,110940]},{"content":"3D.","pos":[110948,110951]},{"content":"2","pos":[110965,110966]},{"content":"Single line.","pos":[110974,110986]},{"content":"3","pos":[110991,110992]},{"content":"Flat.","pos":[111000,111005]},{"content":"4","pos":[111017,111018]},{"content":"None.","pos":[111026,111031]},{"pos":[111046,111064],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[111066,111111]},{"pos":[111159,111169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[111171,111176]},{"pos":[111185,111197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[111199,111242]},{"pos":[111249,111256],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[111258,111319]},{"content":"Value.","pos":[111323,111329]},{"content":"Style.","pos":[111332,111338]},{"content":"0","pos":[111409,111410]},{"content":"Default.","pos":[111418,111426]},{"content":"1","pos":[111452,111453]},{"content":"The MicrosoftWindows palette.","pos":[111461,111490]},{"content":"2","pos":[111495,111496]},{"content":"The true-color scheme.","pos":[111504,111526]},{"pos":[111541,111564],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[111566,111633]},{"pos":[111716,111726],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[111728,111733]},{"pos":[111742,111754],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[111756,111828]},{"pos":[111835,111842],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[111844,111925]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[111926,112019]},{"pos":[112025,112043],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[112045,112102]},{"pos":[112139,112151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[112153,112184]},{"pos":[112190,112210],"content":"Method contextFlyout","linkify":"Method contextFlyout","nodes":[{"content":"Method contextFlyout","pos":[0,20]}]},{"pos":[112268,112278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[112280,112285]},{"pos":[112294,112306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[112312,112337],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[112392,112402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[112404,112409]},{"pos":[112418,112430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[112436,112468],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[112538,112548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[112550,112555]},{"pos":[112564,112576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[112582,112605],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[112658,112668],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[112670,112675]},{"pos":[112684,112696],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[112702,112719],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[112721,112793]},{"pos":[112844,112854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[112856,112861]},{"pos":[112870,112882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[112884,112936]},{"pos":[112942,112962],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[113012,113022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[113024,113029]},{"pos":[113038,113050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[113056,113071],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[113073,113154]},{"pos":[113199,113209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[113211,113216]},{"pos":[113225,113237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[113239,113299]},{"pos":[113305,113319],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[113321,113372]},{"pos":[113424,113434],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[113436,113441]},{"pos":[113450,113462],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[113464,113512]},{"pos":[113519,113526],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[113528,113607]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[113608,113703]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[113704,113838]},{"pos":[113844,113867],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[113942,113952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[113954,113959]},{"pos":[113968,113980],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[113986,114008],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[114010,114061]},{"pos":[114113,114123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[114125,114130]},{"pos":[114139,114151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[114153,114197]},{"pos":[114204,114211],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[114213,114281]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[114287,114357]},{"content":"The second byte contains a value for green.","pos":[114362,114405]},{"content":"The third byte contains a value for blue.","pos":[114410,114451]},{"content":"The high-order byte must be zero.","pos":[114456,114489]},{"content":"The maximum value for a single byte is 255.","pos":[114494,114537]},{"pos":[114543,114556],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[114558,114597]},{"pos":[114650,114660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[114662,114667]},{"content":"mode","pos":[114681,114685]},{"pos":[114694,114706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[114708,114744]},{"pos":[114751,114758],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[114760,114813]},{"content":"Calculate the height according to the following table:","pos":[114814,114868]},{"content":"Mode.","pos":[114872,114877]},{"content":"Height calculation.","pos":[114891,114910]},{"content":"-1 Exact.","pos":[115098,115107]},{"content":"The exact height in pixels of the controls is used.","pos":[115117,115168]},{"content":"0 Auto.","pos":[115211,115218]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[115230,115319]},{"content":"1 Column height.","pos":[115324,115340]},{"content":"The layout of the form determines the height of the control.","pos":[115343,115403]},{"content":"The height and height calculation mode can be set separately.","pos":[115436,115497]},{"pos":[115503,115520],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[115522,115584]},{"pos":[115631,115641],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[115643,115648]},{"pos":[115657,115669],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[115671,115692]},{"pos":[115699,115706],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[115708,115762]},{"content":"Mode.","pos":[115766,115771]},{"content":"Height Calculation.","pos":[115783,115802]},{"content":"Exact.","pos":[115988,115994]},{"content":"The exact height in pixels of the controls is used.","pos":[116005,116056]},{"content":"Auto.","pos":[116099,116104]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[116116,116205]},{"content":"Column height.","pos":[116210,116224]},{"content":"The layout of the form determines the height of the control.","pos":[116227,116287]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[116320,116405]},{"pos":[116411,116429],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[116431,116470]},{"pos":[116518,116528],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[116530,116535]},{"pos":[116544,116556],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[116558,116579]},{"pos":[116586,116593],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[116595,116685]},{"pos":[116691,116706],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[116708,116812]},{"pos":[116857,116867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[116869,116874]},{"pos":[116883,116895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[116897,116952]},{"pos":[116959,116966],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialogue box.The help text must not exceed 250 characters.","pos":[116968,117088]},{"pos":[117094,117116],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[117168,117178],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[117180,117185]},{"pos":[117194,117206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[117212,117221],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[117223,117255]},{"pos":[117283,117295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[117297,117319]},{"pos":[117325,117343],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[117345,117421]},{"pos":[117462,117474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[117476,117550]},{"pos":[117556,117568],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[117570,117607]},{"pos":[117649,117659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[117661,117666]},{"pos":[117675,117687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[117689,117727]},{"pos":[117734,117741],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[117743,117821]},{"content":"The label property value cannot exceed 250 characters.","pos":[117822,117876]},{"pos":[117882,117903],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[117954,117964],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[117966,117971]},{"pos":[117980,117992],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[117998,118014],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[118060,118070],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[118072,118077]},{"pos":[118086,118098],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[118104,118128],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[118182,118192],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[118194,118199]},{"pos":[118208,118220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[118226,118242],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[118288,118298],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[118300,118305]},{"pos":[118314,118326],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[118332,118352],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[118402,118412],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[118414,118419]},{"pos":[118428,118440],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[118446,118473],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[118530,118540],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[118542,118547]},{"pos":[118556,118568],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[118574,118591],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[118638,118648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[118650,118655]},{"pos":[118664,118676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[118682,118700],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[118758,118768],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[118770,118775]},{"content":"mode","pos":[118789,118793]},{"pos":[118802,118814],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[118820,118842],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[118894,118904],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[118906,118911]},{"pos":[118920,118932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[118938,118961],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[119014,119024],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[119026,119031]},{"pos":[119040,119052],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[119058,119076],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[119132,119142],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[119144,119149]},{"pos":[119158,119170],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[119176,119196],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[119246,119256],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[119258,119263]},{"pos":[119272,119284],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[119290,119311],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[119370,119380],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[119382,119387]},{"pos":[119396,119408],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[119414,119431],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[119488,119498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[119500,119505]},{"content":"mode","pos":[119519,119523]},{"pos":[119532,119544],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[119550,119571],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[119622,119632],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[119634,119639]},{"pos":[119648,119660],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[119666,119688],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[119740,119750],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[119752,119757]},{"pos":[119766,119778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[119784,119795],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[119846,119856],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[119858,119863]},{"content":"mode","pos":[119877,119881]},{"pos":[119890,119902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[119908,119923],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[119968,119978],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[119980,119985]},{"pos":[119994,120006],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[120012,120028],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[120074,120084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[120086,120091]},{"pos":[120100,120112],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[120118,120134],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[120188,120198],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[120200,120205]},{"pos":[120214,120226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[120232,120243],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[120245,120382]},{"pos":[120423,120433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[120435,120440]},{"pos":[120449,120461],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[120463,120527]},{"pos":[120534,120541],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[120543,120637]},{"content":"Begins with a letter.","pos":[120643,120664]},{"content":"Doesn't exceed 250 characters.","pos":[120669,120699]},{"content":"Can include numbers and underscore characters.","pos":[120704,120750]},{"content":"Cannot include punctuation or spaces.","pos":[120755,120792]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumerations, classes, and so on.","pos":[120797,120922]},{"pos":[120928,120951],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[121004,121014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[121016,121021]},{"pos":[121030,121042],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[121048,121065],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[121112,121122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[121124,121129]},{"pos":[121138,121150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[121156,121177],"content":"Method referenceField","linkify":"Method referenceField","nodes":[{"content":"Method referenceField","pos":[0,21]}]},{"pos":[121236,121246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[121248,121253]},{"pos":[121262,121274],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[121280,121308],"content":"Method replacementFieldGroup","linkify":"Method replacementFieldGroup","nodes":[{"content":"Method replacementFieldGroup","pos":[0,28]}]},{"pos":[121366,121376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[121378,121383]},{"pos":[121392,121404],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[121410,121428],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[121496,121506],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[121508,121513]},{"pos":[121522,121534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[121540,121556],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[121610,121620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[121622,121627]},{"pos":[121636,121648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[121654,121665],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"pos":[121714,121724],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[121726,121731]},{"pos":[121740,121752],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[121758,121768],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[121818,121828],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[121830,121835]},{"content":"mode","pos":[121849,121853]},{"pos":[121862,121874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[121880,121894],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[121938,121948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[121950,121955]},{"pos":[121964,121976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[121982,121997],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[122042,122052],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[122054,122059]},{"pos":[122068,122080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[122086,122097],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[122138,122148],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[122150,122155]},{"pos":[122164,122176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[122182,122197],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[122242,122252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[122254,122259]},{"pos":[122268,122280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[122286,122305],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[122354,122364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[122366,122371]},{"pos":[122380,122392],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[122398,122418],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[122468,122478],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[122480,122485]},{"pos":[122494,122506],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[122512,122524],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[122570,122580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[122582,122587]},{"pos":[122596,122608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[122614,122636],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[122705,122715],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[122717,122722]},{"content":"mode","pos":[122736,122740]},{"pos":[122749,122761],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[122767,122793],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[122858,122868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[122870,122874]},{"pos":[122883,122895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[122901,122928],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[122985,122995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[122997,123002]},{"pos":[123011,123023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[123029,123048],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[123097,123107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[123109,123114]},{"pos":[123123,123135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[123141,123155],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[123207,123217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[123219,123224]},{"pos":[123233,123245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[123251,123263],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[123265,123303]},{"pos":[123355,123365],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[123367,123372]},{"content":"mode","pos":[123386,123390]},{"pos":[123399,123411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[123413,123448]},{"pos":[123455,123462],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[123464,123570]},{"content":"Mode.","pos":[123574,123579]},{"content":"Width calculation.","pos":[123592,123610]},{"content":"-1 Exact.","pos":[123796,123805]},{"content":"The exact width in pixels of the controls is used.","pos":[123814,123864]},{"content":"0 Auto.","pos":[123907,123914]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[123925,124013]},{"content":"1 Column width.","pos":[124018,124033]},{"content":"The layout of the form determines the width of the control.","pos":[124036,124095]},{"content":"The width and width calculation mode can be set separately.","pos":[124128,124187]},{"pos":[124193,124209],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[124211,124273]},{"pos":[124319,124329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[124331,124336]},{"pos":[124345,124357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[124359,124420]},{"pos":[124427,124434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[124436,124489]},{"content":"Mode.","pos":[124493,124498]},{"content":"Width Calculation.","pos":[124509,124527]},{"content":"Exact.","pos":[124711,124717]},{"content":"The exact width in pixels of the controls is used.","pos":[124727,124777]},{"content":"Auto.","pos":[124820,124825]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[124836,124924]},{"content":"Column width.","pos":[124929,124942]},{"content":"The layout of the form determines the width of the control.","pos":[124945,125004]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[125037,125120]},{"pos":[125126,125143],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[125145,125183]},{"pos":[125230,125240],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[125242,125247]},{"pos":[125256,125268],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[125270,125305]},{"pos":[125312,125319],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[125321,125394]},{"pos":[125400,125429],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[125547,125557],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[125559,125575]},{"content":"objectMethodToCall","pos":[125589,125607]},{"content":"overrideObject","pos":[125621,125635]},{"pos":[125642,125674],"content":"Class FormBuildStaticTextControl","linkify":"Class FormBuildStaticTextControl","nodes":[{"content":"Class FormBuildStaticTextControl","pos":[0,32]}]},{"content":"The FormBuildStaticTextControl class lets you create, read, update, and delete X++ code and metadata.","pos":[125738,125839]},{"pos":[125845,125852],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[125854,125964]},{"pos":[125970,125978],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[125984,125991],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[125995,126001]},{"content":"Description","pos":[126105,126116]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[126495,126541],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[126605,126645]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[126745,126780],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[126995,127038],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[127105,127172]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[127245,127294],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[127355,127453]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[127495,127536],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[127605,127654]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[127745,127780],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[127855,127917]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[127995,128025],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that was used to output text in the control.","pos":[128105,128181]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[128245,128286],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[128495,128533],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[128605,128648]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[128745,128782],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[128855,128900]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[128995,129067],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[129105,129172]},{"content":"public int containerId()","pos":[129245,129269]},{"content":"Retrieves the ID of the parent container for the control.","pos":[129355,129412]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[129495,129539],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[129745,129804],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[129995,130038],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[130245,130281],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[130495,130537],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[130745,130785],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[130855,130920]},{"content":"public int displayHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[130995,131053],"source":"public int displayHeight(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayHeightMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[131245,131297],"source":"public AutoMode displayHeightMode(\\[AutoMode mode\\])"},{"content":"public int displayHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[131495,131539],"source":"public int displayHeightValue(\\[int value\\])"},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[131745,131803],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[131995,132047],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[132245,132289],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[132495,132534],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[132745,132779],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[132855,132936]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[132995,133036],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[133105,133156]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[133245,133275],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[133355,133412]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[133495,133529],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[133605,133662]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[133745,133786],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[133855,133906]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[133995,134037],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[134105,134144]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[134245,134281],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[134355,134417]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[134495,134532],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[134605,134644]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[134745,134779],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[134855,134959]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[134995,135036],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[135245,135260]},{"content":"Retrieves the ID of the control.","pos":[135355,135387]},{"content":"public boolean isContainer()","pos":[135495,135523]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[135605,135681]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[135745,135785],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[135995,136035],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[136245,136279],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[136495,136530],"source":"public int leftValue(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[136745,136775],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[136855,136990]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[136995,137037],"source":"public int neededPermission(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[137245,137302],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[137495,137533],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[137605,137732]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[137745,137776],"source":"public int style(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[137995,138025],"source":"public str text(\\[str value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[138245,138284],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[138495,138528],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[138745,138779],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[138995,139025],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[139245,139288],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[139355,139422]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[139495,139529],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[139745,139783],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[139995,140034],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[140245,140305],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[140495,140549],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[140745,140791],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[140995,141036],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[141245,141286],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[141355,141393]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[141495,141530],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[141605,141667]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[141745,141781],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[141855,141893]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[141995,142102],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[142248,142267],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[142269,142309]},{"pos":[142366,142376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[142378,142383]},{"pos":[142392,142404],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[142406,142462]},{"pos":[142469,142476],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[142478,142557]},{"pos":[142563,142579],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[142625,142635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[142637,142642]},{"pos":[142651,142663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[142669,142685],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[142687,142754]},{"pos":[142808,142818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[142820,142825]},{"pos":[142834,142846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[142848,142900]},{"pos":[142907,142914],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[142916,143038]},{"pos":[143044,143066],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[143068,143166]},{"pos":[143226,143236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[143238,143243]},{"pos":[143252,143264],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[143266,143345]},{"pos":[143352,143359],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[143361,143398]},{"pos":[143404,143426],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[143428,143477]},{"pos":[143529,143539],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[143541,143546]},{"pos":[143555,143567],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[143569,143613]},{"pos":[143620,143627],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[143629,143697]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[143703,143773]},{"content":"The second byte contains a value for green.","pos":[143778,143821]},{"content":"The third byte contains a value for blue.","pos":[143826,143867]},{"content":"The high-order byte must be zero.","pos":[143872,143905]},{"content":"The maximum value for a single byte is 255.","pos":[143910,143953]},{"pos":[143959,143975],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[143977,144039]},{"pos":[144085,144095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[144097,144102]},{"pos":[144111,144123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[144125,144186]},{"pos":[144192,144203],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that was used to output text in the control.","pos":[144205,144281]},{"pos":[144322,144332],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[144334,144339]},{"pos":[144348,144360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[144362,144412]},{"pos":[144419,144426],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[144428,144500]},{"content":"0 Use the default font weight.","pos":[144506,144536]},{"content":"1 Thin.","pos":[144541,144548]},{"content":"2 Extra-light.","pos":[144553,144567]},{"content":"3 Light.","pos":[144572,144580]},{"content":"4 Normal.","pos":[144585,144594]},{"content":"5 Medium.","pos":[144599,144608]},{"content":"6 Semibold.","pos":[144613,144624]},{"content":"7 Bold.","pos":[144629,144636]},{"content":"8 Extra-bold.","pos":[144641,144654]},{"content":"9 Heavy.","pos":[144659,144667]},{"pos":[144673,144695],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[144747,144757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[144759,144764]},{"pos":[144773,144785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[144791,144810],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[144812,144855]},{"pos":[144904,144914],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[144916,144921]},{"pos":[144930,144942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[144944,145006]},{"pos":[145013,145020],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[145022,145126]},{"content":"Value.","pos":[145130,145136]},{"content":"Description.","pos":[145139,145151]},{"content":"0","pos":[145198,145199]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145207,145220],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[145232,145233]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145241,145257],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[145266,145267]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145275,145290],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[145300,145302]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145309,145321],"source":"MAC\\_CHARSET"},{"content":"128","pos":[145334,145337]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145343,145360],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[145368,145371]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145377,145392],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[145402,145405]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145411,145426],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[145436,145439]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145445,145465],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[145470,145473]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145479,145493],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[145504,145507]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145513,145529],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[145538,145541]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145547,145566],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[145572,145575]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145581,145596],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[145606,145609]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145615,145631],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[145640,145643]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145649,145668],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[145674,145677]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145683,145695],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[145707,145795]},{"content":"Value.","pos":[145799,145805]},{"content":"Description.","pos":[145808,145820]},{"content":"130","pos":[145855,145858]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[145864,145878],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of MicrosoftWindows.","pos":[145882,145977]},{"content":"Value.","pos":[145981,145987]},{"content":"Description.","pos":[145990,146002]},{"content":"177","pos":[146039,146042]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[146048,146063],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[146068,146071]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[146077,146092],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of MicrosoftWindows.","pos":[146096,146182]},{"content":"Value.","pos":[146186,146192]},{"content":"Description.","pos":[146195,146207]},{"content":"222","pos":[146240,146243]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[146249,146262],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[146266,146345]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[146346,146552],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[146558,146576],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[146578,146623]},{"pos":[146671,146681],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[146683,146688]},{"pos":[146697,146709],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[146711,146754]},{"pos":[146761,146768],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[146770,146831]},{"content":"Value.","pos":[146835,146841]},{"content":"Style.","pos":[146844,146850]},{"content":"0","pos":[146921,146922]},{"content":"Default.","pos":[146930,146938]},{"content":"1","pos":[146964,146965]},{"content":"The MicrosoftWindows palette.","pos":[146973,147002]},{"content":"2","pos":[147007,147008]},{"content":"The true-color scheme.","pos":[147016,147038]},{"pos":[147053,147076],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[147078,147145]},{"pos":[147228,147238],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[147240,147245]},{"pos":[147254,147266],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[147268,147340]},{"pos":[147347,147354],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[147356,147437]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[147438,147531]},{"pos":[147537,147555],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[147557,147614]},{"pos":[147651,147663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[147665,147696]},{"pos":[147702,147727],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[147782,147792],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[147794,147799]},{"pos":[147808,147820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[147826,147858],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[147928,147938],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[147940,147945]},{"pos":[147954,147966],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[147972,147988],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[148042,148052],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148054,148059]},{"pos":[148068,148080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148086,148103],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[148150,148160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148162,148167]},{"pos":[148176,148188],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148194,148217],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[148270,148280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148282,148287]},{"pos":[148296,148308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148314,148331],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[148333,148398]},{"pos":[148449,148459],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148461,148466]},{"pos":[148475,148487],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[148489,148534]},{"pos":[148540,148560],"content":"Method displayHeight","linkify":"Method displayHeight","nodes":[{"content":"Method displayHeight","pos":[0,20]}]},{"pos":[148627,148637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148639,148644]},{"content":"mode","pos":[148658,148662]},{"pos":[148671,148683],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148689,148713],"content":"Method displayHeightMode","linkify":"Method displayHeightMode","nodes":[{"content":"Method displayHeightMode","pos":[0,24]}]},{"pos":[148776,148786],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[148788,148792]},{"pos":[148801,148813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148819,148844],"content":"Method displayHeightValue","linkify":"Method displayHeightValue","nodes":[{"content":"Method displayHeightValue","pos":[0,25]}]},{"pos":[148899,148909],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148911,148916]},{"pos":[148925,148937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148943,148963],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[149030,149040],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149042,149047]},{"content":"mode","pos":[149061,149065]},{"pos":[149074,149086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149092,149116],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[149179,149189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[149191,149195]},{"pos":[149204,149216],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149222,149247],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[149302,149312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149314,149319]},{"pos":[149328,149340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149346,149366],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[149416,149426],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149428,149433]},{"pos":[149442,149454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149460,149475],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[149477,149558]},{"pos":[149603,149613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149615,149620]},{"pos":[149629,149641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[149643,149703]},{"pos":[149709,149723],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[149725,149776]},{"pos":[149828,149838],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149840,149845]},{"pos":[149854,149866],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[149868,149916]},{"pos":[149923,149930],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property gives controls to be enabled or disabled at run time.","pos":[149932,150006]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[150007,150102]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[150103,150237]},{"pos":[150243,150254],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[150256,150313]},{"pos":[150354,150364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[150366,150371]},{"pos":[150380,150392],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[150394,150449]},{"pos":[150455,150470],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[150472,150529]},{"pos":[150574,150584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[150586,150591]},{"pos":[150600,150612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[150614,150647]},{"pos":[150653,150675],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[150677,150728]},{"pos":[150780,150790],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[150792,150797]},{"pos":[150806,150818],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[150820,150864]},{"pos":[150871,150878],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[150880,150948]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[150954,151024]},{"content":"The second byte contains a value for green.","pos":[151029,151072]},{"content":"The third byte contains a value for blue.","pos":[151077,151118]},{"content":"The high-order byte must be zero.","pos":[151123,151156]},{"content":"The maximum value for a single byte is 255.","pos":[151161,151204]},{"pos":[151210,151223],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[151225,151264]},{"pos":[151317,151327],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[151329,151334]},{"content":"mode","pos":[151348,151352]},{"pos":[151361,151373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[151375,151411]},{"pos":[151418,151425],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[151427,151534]},{"content":"Mode.","pos":[151538,151543]},{"content":"Height calculation.","pos":[151557,151576]},{"content":"-1 Exact.","pos":[151764,151773]},{"content":"The exact height in pixels of the controls is used.","pos":[151783,151834]},{"content":"0 Auto.","pos":[151877,151884]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[151896,151985]},{"content":"1 Column height.","pos":[151990,152006]},{"content":"The layout of the form determines the height of the control.","pos":[152009,152069]},{"content":"The height and height calculation mode can be set separately.","pos":[152102,152163]},{"pos":[152169,152186],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[152188,152250]},{"pos":[152297,152307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[152309,152314]},{"pos":[152323,152335],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[152337,152358]},{"pos":[152365,152372],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[152374,152428]},{"content":"Mode.","pos":[152432,152437]},{"content":"Height Calculation.","pos":[152449,152468]},{"content":"Exact.","pos":[152654,152660]},{"content":"The exact height in pixels of the controls is used.","pos":[152671,152722]},{"content":"Auto.","pos":[152765,152770]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[152782,152871]},{"content":"Column height.","pos":[152876,152890]},{"content":"The layout of the form determines the height of the control.","pos":[152893,152953]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[152986,153071]},{"pos":[153077,153095],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[153097,153136]},{"pos":[153184,153194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[153196,153201]},{"pos":[153210,153222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[153224,153245]},{"pos":[153252,153259],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[153261,153351]},{"pos":[153357,153372],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[153374,153478]},{"pos":[153523,153533],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[153535,153540]},{"pos":[153549,153561],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[153563,153618]},{"pos":[153625,153632],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.","pos":[153634,153747]},{"pos":[153753,153775],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[153827,153837],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[153839,153844]},{"pos":[153853,153865],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[153871,153880],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[153882,153914]},{"pos":[153942,153954],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[153956,153978]},{"pos":[153984,154002],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[154004,154080]},{"pos":[154121,154133],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[154135,154209]},{"pos":[154215,154228],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[154279,154289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154291,154296]},{"pos":[154305,154317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154323,154334],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[154385,154395],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154397,154402]},{"content":"mode","pos":[154416,154420]},{"pos":[154429,154441],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154447,154462],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[154507,154517],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154519,154524]},{"pos":[154533,154545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154551,154567],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[154613,154623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154625,154630]},{"pos":[154639,154651],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[154657,154668],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[154670,154805]},{"pos":[154846,154856],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154858,154863]},{"content":"The name to assign to the control.","pos":[154866,154900]},{"pos":[154907,154919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[154921,154985]},{"pos":[154992,154999],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[155001,155095]},{"content":"It must start with a letter.","pos":[155101,155129]},{"content":"It cannot exceed 250 characters.","pos":[155134,155166]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[155171,155225],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[155230,155270]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[155275,155385]},{"pos":[155391,155414],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[155467,155477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155479,155484]},{"pos":[155493,155505],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155511,155529],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[155597,155607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155609,155614]},{"pos":[155623,155635],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155641,155652],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[155654,155781]},{"pos":[155830,155840],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155842,155847]},{"content":"The value to assign to the skip property of the control; optional.","pos":[155850,155916]},{"pos":[155923,155935],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[155937,156043]},{"pos":[156049,156061],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[156103,156113],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156115,156120]},{"pos":[156129,156141],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[156147,156158],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[156199,156209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156211,156216]},{"pos":[156225,156237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[156243,156253],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[156303,156313],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156315,156320]},{"content":"mode","pos":[156334,156338]},{"pos":[156347,156359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[156365,156379],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[156423,156433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156435,156440]},{"pos":[156449,156461],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[156467,156482],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[156527,156537],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156539,156544]},{"pos":[156553,156565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[156571,156582],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[156623,156633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156635,156640]},{"pos":[156649,156661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[156667,156683],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[156685,156752]},{"pos":[156806,156816],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156818,156823]},{"content":"The value to assign to the underline property of the control; optional.","pos":[156826,156897]},{"pos":[156904,156916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[156918,156982]},{"pos":[156988,157003],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[157048,157058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157060,157065]},{"pos":[157074,157086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157092,157111],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[157160,157170],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157172,157177]},{"pos":[157186,157198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157204,157224],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[157274,157284],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157286,157291]},{"pos":[157300,157312],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157318,157340],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[157409,157419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157421,157426]},{"content":"mode","pos":[157440,157444]},{"pos":[157453,157465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157471,157497],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[157562,157572],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[157574,157578]},{"pos":[157587,157599],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157605,157632],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[157689,157699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157701,157706]},{"pos":[157715,157727],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157733,157747],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[157799,157809],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157811,157816]},{"pos":[157825,157837],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157843,157855],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[157857,157895]},{"pos":[157947,157957],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157959,157964]},{"content":"mode","pos":[157978,157982]},{"pos":[157991,158003],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[158005,158040]},{"pos":[158047,158054],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[158056,158109]},{"content":"Calculate the width according to the following table:","pos":[158110,158163]},{"content":"Mode.","pos":[158167,158172]},{"content":"Width calculation.","pos":[158185,158203]},{"content":"-1 Exact.","pos":[158389,158398]},{"content":"The exact width in pixels of the controls is used.","pos":[158407,158457]},{"content":"0 Auto.","pos":[158500,158507]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[158518,158606]},{"content":"1 Column width.","pos":[158611,158626]},{"content":"The layout of the form determines the width of the control.","pos":[158629,158688]},{"content":"The width and width calculation mode can be set separately.","pos":[158721,158780]},{"pos":[158786,158802],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[158804,158866]},{"pos":[158912,158922],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[158924,158929]},{"pos":[158938,158950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[158952,159013]},{"pos":[159020,159027],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[159029,159082]},{"content":"Mode.","pos":[159086,159091]},{"content":"Width Calculation.","pos":[159102,159120]},{"content":"Exact.","pos":[159304,159310]},{"content":"The exact width in pixels of the controls is used.","pos":[159320,159370]},{"content":"Auto.","pos":[159413,159418]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[159429,159517]},{"content":"Column width.","pos":[159522,159535]},{"content":"The layout of the form determines the width of the control.","pos":[159538,159597]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[159630,159713]},{"pos":[159719,159736],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[159738,159776]},{"pos":[159823,159833],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[159835,159840]},{"pos":[159849,159861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[159863,159898]},{"pos":[159905,159912],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[159914,159987]},{"pos":[159993,160022],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[160140,160150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[160152,160168]},{"content":"objectMethodToCall","pos":[160182,160200]},{"content":"overrideObject","pos":[160214,160228]},{"pos":[160235,160263],"content":"Class FormBuildStringControl","linkify":"Class FormBuildStringControl","nodes":[{"content":"Class FormBuildStringControl","pos":[0,28]}]},{"content":"The FormBuildStringControl class lets you create, read, update, and delete X++ code and metadata.","pos":[160323,160420]},{"pos":[160426,160433],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[160435,160545]},{"pos":[160551,160559],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[160565,160572],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[160576,160582]},{"content":"Description","pos":[160686,160697]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[161076,161122],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Indicates whether to align the control.","pos":[161186,161225]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[161326,161361],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[161576,161619],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[161686,161753]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[161826,161862],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[162076,162125],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[162186,162284]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[162326,162367],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[162436,162485]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[162576,162611],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[162686,162748]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[162826,162856],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[162936,163011]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[163076,163108],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[163186,163242]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[163326,163367],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public int changeCase(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[163576,163612],"source":"public int changeCase(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[163826,163864],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[163936,163979]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[164076,164113],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[164186,164231]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[164326,164398],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[164436,164503]},{"content":"public int containerId()","pos":[164576,164600]},{"content":"Retrieves the ID of the parent container for the control.","pos":[164686,164743]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[164826,164870],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[165076,165135],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[165326,165369],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[165576,165612],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[165826,165868],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[166076,166116],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[166186,166258]},{"content":"public int direction(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[166326,166361],"source":"public int direction(\\[int value\\])"},{"content":"public int displayHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[166576,166634],"source":"public int displayHeight(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayHeightMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[166826,166878],"source":"public AutoMode displayHeightMode(\\[AutoMode mode\\])"},{"content":"public int displayHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[167076,167120],"source":"public int displayHeightValue(\\[int value\\])"},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[167326,167384],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[167576,167628],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[167826,167870],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[168076,168115],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[168326,168360],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[168436,168517]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[168576,168617],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[168686,168737]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[168826,168890],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[169076,169116],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[169326,169356],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[169436,169493]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[169576,169610],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[169686,169743]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[169826,169867],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[169936,169987]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[170076,170118],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[170186,170225]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[170326,170362],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[170436,170498]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[170576,170613],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[170686,170725]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[170826,170860],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[170936,171040]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[171076,171117],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[171326,171341]},{"content":"Retrieves the ID of the control.","pos":[171436,171468]},{"content":"public int iMEMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[171576,171609],"source":"public int iMEMode(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[171826,171854]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[171936,172012]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[172076,172116],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[172326,172357],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[172436,172473]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[172576,172616],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[172826,172861],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[173076,173119],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[173326,173361],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[173576,173615],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[173826,173872],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[174076,174112],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[174326,174373],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[174576,174617],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[174826,174868],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[175076,175121],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[175326,175365],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[175576,175624],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[175826,175872],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[176076,176116],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[176326,176367],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[176576,176616],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[176826,176860],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[177076,177111],"source":"public int leftValue(\\[int value\\])"},{"content":"public int limitText(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[177326,177380],"source":"public int limitText(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode limitTextMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[177576,177624],"source":"public AutoMode limitTextMode(\\[AutoMode mode\\])"},{"content":"public int limitTextValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[177826,177866],"source":"public int limitTextValue(\\[int value\\])"},{"content":"public int lookupButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[178076,178114],"source":"public int lookupButton(\\[int value\\])"},{"content":"public boolean lookupOnly(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[178326,178370],"source":"public boolean lookupOnly(\\[boolean value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[178576,178619],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public boolean multiLine(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[178826,178869],"source":"public boolean multiLine(\\[boolean value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[179076,179106],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[179186,179321]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[179326,179368],"source":"public int neededPermission(\\[int value\\])"},{"content":"public boolean passwordStyle(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[179576,179623],"source":"public boolean passwordStyle(\\[boolean value\\])"},{"content":"public FieldId presenceDataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[179826,179877],"source":"public FieldId presenceDataField(\\[FieldId value\\])"},{"content":"public int presenceDataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[180076,180124],"source":"public int presenceDataSource(\\[AnyType value\\])"},{"content":"public int presenceIndicatorAllowed(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[180326,180376],"source":"public int presenceIndicatorAllowed(\\[int value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[180576,180612],"source":"public int promptrect(\\[int value\\])"},{"content":"public boolean replaceOnLookup(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[180826,180875],"source":"public boolean replaceOnLookup(\\[boolean value\\])"},{"content":"public int searchAfterInput(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[181076,181118],"source":"public int searchAfterInput(\\[int value\\])"},{"content":"public int searchMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[181326,181362],"source":"public int searchMode(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[181576,181633],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[181826,181869],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[182076,182114],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[182186,182313]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[182326,182357],"source":"public int style(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[182576,182606],"source":"public str text(\\[str value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[182826,182865],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[183076,183109],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[183326,183360],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[183576,183606],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[183826,183869],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[183936,184003]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[184076,184110],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[184326,184364],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[184576,184615],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[184826,184886],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[185076,185130],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[185326,185372],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[185576,185614],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[185826,185867],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[186076,186117],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[186186,186224]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[186326,186361],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[186436,186498]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[186576,186612],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[186686,186724]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[186826,186933],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[187079,187098],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Indicates whether to align the control.","pos":[187100,187139]},{"pos":[187196,187206],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[187208,187213]},{"pos":[187222,187234],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[187236,187292]},{"pos":[187299,187306],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[187308,187387]},{"pos":[187393,187409],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[187455,187465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[187467,187472]},{"pos":[187481,187493],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[187499,187515],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[187517,187584]},{"pos":[187638,187648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[187650,187655]},{"pos":[187664,187676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[187678,187730]},{"pos":[187737,187744],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[187746,187868]},{"pos":[187874,187891],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[187938,187948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[187950,187955]},{"pos":[187964,187976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[187982,188004],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[188006,188104]},{"pos":[188164,188174],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[188176,188181]},{"pos":[188190,188202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[188204,188283]},{"pos":[188290,188297],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[188299,188336]},{"pos":[188342,188364],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[188366,188415]},{"pos":[188467,188477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[188479,188484]},{"pos":[188493,188505],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[188507,188551]},{"pos":[188558,188565],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[188567,188635]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[188641,188711]},{"content":"The second byte contains a value for green.","pos":[188716,188759]},{"content":"The third byte contains a value for blue.","pos":[188764,188805]},{"content":"The high-order byte must be zero.","pos":[188810,188843]},{"content":"The maximum value for a single byte is 255.","pos":[188848,188891]},{"pos":[188897,188913],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[188915,188977]},{"pos":[189023,189033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189035,189040]},{"pos":[189049,189061],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[189063,189124]},{"pos":[189130,189141],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[189143,189218]},{"pos":[189259,189269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189271,189276]},{"pos":[189285,189297],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[189299,189349]},{"pos":[189356,189363],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[189365,189437]},{"content":"0 Use the default font weight.","pos":[189443,189473]},{"content":"1 Thin.","pos":[189478,189485]},{"content":"2 Extra-light.","pos":[189490,189504]},{"content":"3 Light.","pos":[189509,189517]},{"content":"4 Normal.","pos":[189522,189531]},{"content":"5 Medium.","pos":[189536,189545]},{"content":"6 Semibold.","pos":[189550,189561]},{"content":"7 Bold.","pos":[189566,189573]},{"content":"8 Extra-bold.","pos":[189578,189591]},{"content":"9 Heavy.","pos":[189596,189604]},{"pos":[189610,189623],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[189625,189681]},{"pos":[189724,189734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189736,189741]},{"pos":[189750,189762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[189764,189808]},{"pos":[189815,189822],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[189824,189916]},{"content":"Value.","pos":[189920,189926]},{"content":"Description.","pos":[189929,189941]},{"content":"0","pos":[189972,189973]},{"content":"Auto.","pos":[189981,189986]},{"content":"1","pos":[189998,189999]},{"content":"3D.","pos":[190007,190010]},{"content":"2","pos":[190024,190025]},{"content":"Single line.","pos":[190033,190045]},{"content":"3","pos":[190050,190051]},{"content":"Flat.","pos":[190059,190064]},{"content":"4","pos":[190076,190077]},{"content":"None.","pos":[190085,190090]},{"pos":[190105,190127],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[190179,190189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190191,190196]},{"pos":[190205,190217],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190223,190240],"content":"Method changeCase","linkify":"Method changeCase","nodes":[{"content":"Method changeCase","pos":[0,17]}]},{"pos":[190287,190297],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190299,190304]},{"pos":[190313,190325],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190331,190350],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[190352,190395]},{"pos":[190444,190454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190456,190461]},{"pos":[190470,190482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[190484,190546]},{"pos":[190553,190560],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[190562,190666]},{"content":"Value.","pos":[190670,190676]},{"content":"Description.","pos":[190679,190691]},{"content":"0","pos":[190738,190739]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[190747,190760],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[190772,190773]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[190781,190797],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[190806,190807]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[190815,190830],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[190840,190842]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[190849,190861],"source":"MAC\\_CHARSET"},{"content":"128","pos":[190874,190877]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[190883,190900],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[190908,190911]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[190917,190932],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[190942,190945]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[190951,190966],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[190976,190979]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[190985,191005],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[191010,191013]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[191019,191033],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[191044,191047]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[191053,191069],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[191078,191081]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[191087,191106],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[191112,191115]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[191121,191136],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[191146,191149]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[191155,191171],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[191180,191183]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[191189,191208],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[191214,191217]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[191223,191235],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[191247,191335]},{"content":"Value.","pos":[191339,191345]},{"content":"Description.","pos":[191348,191360]},{"content":"130","pos":[191395,191398]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[191404,191418],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of MicrosoftWindows.","pos":[191422,191517]},{"content":"Value.","pos":[191521,191527]},{"content":"Description.","pos":[191530,191542]},{"content":"177","pos":[191579,191582]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[191588,191603],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[191608,191611]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[191617,191632],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of MicrosoftWindows.","pos":[191636,191722]},{"content":"Value.","pos":[191726,191732]},{"content":"Description.","pos":[191735,191747]},{"content":"222","pos":[191780,191783]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[191789,191802],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a values that are based on the current system locale.","pos":[191806,191895]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[191896,192102],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[192108,192126],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[192128,192173]},{"pos":[192221,192231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192233,192238]},{"pos":[192247,192259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[192261,192304]},{"pos":[192311,192318],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[192320,192381]},{"content":"Value.","pos":[192385,192391]},{"content":"Style.","pos":[192394,192400]},{"content":"0","pos":[192471,192472]},{"content":"Default.","pos":[192480,192488]},{"content":"1","pos":[192514,192515]},{"content":"The MicrosoftWindows palette.","pos":[192523,192552]},{"content":"2","pos":[192557,192558]},{"content":"The true-color scheme.","pos":[192566,192588]},{"pos":[192603,192626],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[192628,192695]},{"pos":[192778,192788],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192790,192795]},{"pos":[192804,192816],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[192818,192890]},{"pos":[192897,192904],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[192906,192987]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[192988,193081]},{"pos":[193087,193105],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[193107,193164]},{"pos":[193201,193213],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[193215,193246]},{"pos":[193252,193277],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[193332,193342],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[193344,193349]},{"pos":[193358,193370],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[193376,193408],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[193478,193488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[193490,193495]},{"pos":[193504,193516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[193522,193538],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[193592,193602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[193604,193609]},{"pos":[193618,193630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[193636,193653],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[193700,193710],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[193712,193717]},{"pos":[193726,193738],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[193744,193767],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[193820,193830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[193832,193837]},{"pos":[193846,193858],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[193864,193881],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[193883,193955]},{"pos":[194006,194016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194018,194023]},{"pos":[194032,194044],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[194046,194098]},{"pos":[194104,194120],"content":"Method direction","linkify":"Method direction","nodes":[{"content":"Method direction","pos":[0,16]}]},{"pos":[194166,194176],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194178,194183]},{"pos":[194192,194204],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194210,194230],"content":"Method displayHeight","linkify":"Method displayHeight","nodes":[{"content":"Method displayHeight","pos":[0,20]}]},{"pos":[194297,194307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194309,194314]},{"content":"mode","pos":[194328,194332]},{"pos":[194341,194353],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194359,194383],"content":"Method displayHeightMode","linkify":"Method displayHeightMode","nodes":[{"content":"Method displayHeightMode","pos":[0,24]}]},{"pos":[194446,194456],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[194458,194462]},{"pos":[194471,194483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194489,194514],"content":"Method displayHeightValue","linkify":"Method displayHeightValue","nodes":[{"content":"Method displayHeightValue","pos":[0,25]}]},{"pos":[194569,194579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194581,194586]},{"pos":[194595,194607],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194613,194633],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[194700,194710],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194712,194717]},{"content":"mode","pos":[194731,194735]},{"pos":[194744,194756],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194762,194786],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[194849,194859],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[194861,194865]},{"pos":[194874,194886],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194892,194917],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[194972,194982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194984,194989]},{"pos":[194998,195010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[195016,195036],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[195086,195096],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195098,195103]},{"pos":[195112,195124],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[195130,195145],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[195147,195228]},{"pos":[195273,195283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195285,195290]},{"pos":[195299,195311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[195313,195373]},{"pos":[195379,195393],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[195395,195446]},{"pos":[195498,195508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195510,195515]},{"pos":[195524,195536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[195538,195586]},{"pos":[195593,195600],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[195602,195677]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[195678,195773]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[195774,195908]},{"pos":[195914,195937],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[196012,196022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196024,196029]},{"pos":[196038,196050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196056,196077],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[196128,196138],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196140,196145]},{"pos":[196154,196166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[196172,196183],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[196185,196242]},{"pos":[196283,196293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196295,196300]},{"pos":[196309,196321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[196323,196378]},{"pos":[196384,196399],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[196401,196458]},{"pos":[196503,196513],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196515,196520]},{"pos":[196529,196541],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[196543,196576]},{"pos":[196582,196604],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[196606,196657]},{"pos":[196709,196719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196721,196726]},{"pos":[196735,196747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[196749,196793]},{"pos":[196800,196807],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[196809,196877]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[196883,196953]},{"content":"The second byte contains a value for green.","pos":[196958,197001]},{"content":"The third byte contains a value for blue.","pos":[197006,197047]},{"content":"The high-order byte must be zero.","pos":[197052,197085]},{"content":"The maximum value for a single byte is 255.","pos":[197090,197133]},{"pos":[197139,197152],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[197154,197193]},{"pos":[197246,197256],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[197258,197263]},{"content":"mode","pos":[197277,197281]},{"pos":[197290,197302],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[197304,197340]},{"pos":[197347,197354],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[197356,197463]},{"content":"Mode.","pos":[197467,197472]},{"content":"Height calculation.","pos":[197486,197505]},{"content":"-1 Exact.","pos":[197693,197702]},{"content":"The exact height in pixels of the controls is used.","pos":[197712,197763]},{"content":"0 Auto.","pos":[197806,197813]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[197825,197914]},{"content":"1 Column height.","pos":[197919,197935]},{"content":"The layout of the form determines the height of the control.","pos":[197938,197998]},{"content":"The height and height calculation mode can be set separately.","pos":[198031,198092]},{"pos":[198098,198115],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[198117,198179]},{"pos":[198226,198236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[198238,198243]},{"pos":[198252,198264],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[198266,198287]},{"pos":[198294,198301],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[198303,198357]},{"content":"Mode.","pos":[198361,198366]},{"content":"Height Calculation.","pos":[198378,198397]},{"content":"Exact.","pos":[198583,198589]},{"content":"The exact height in pixels of the controls is used.","pos":[198600,198651]},{"content":"Auto.","pos":[198694,198699]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[198711,198800]},{"content":"Column height.","pos":[198805,198819]},{"content":"The layout of the form determines the height of the control.","pos":[198822,198882]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[198915,199000]},{"pos":[199006,199024],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[199026,199065]},{"pos":[199113,199123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[199125,199130]},{"pos":[199139,199151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[199153,199174]},{"pos":[199181,199188],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[199190,199280]},{"pos":[199286,199301],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[199303,199407]},{"pos":[199452,199462],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[199464,199469]},{"pos":[199478,199490],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[199492,199547]},{"pos":[199554,199561],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.","pos":[199563,199676]},{"pos":[199682,199704],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[199756,199766],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[199768,199773]},{"pos":[199782,199794],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[199800,199809],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[199811,199843]},{"pos":[199871,199883],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[199885,199907]},{"pos":[199913,199927],"content":"Method iMEMode","linkify":"Method iMEMode","nodes":[{"content":"Method iMEMode","pos":[0,14]}]},{"pos":[199971,199981],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[199983,199988]},{"pos":[199997,200009],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[200015,200033],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[200035,200111]},{"pos":[200152,200164],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[200166,200240]},{"pos":[200246,200259],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[200310,200320],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200322,200327]},{"pos":[200336,200348],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[200354,200366],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[200368,200405]},{"pos":[200447,200457],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200459,200464]},{"pos":[200473,200485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[200487,200525]},{"pos":[200532,200539],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[200541,200673]},{"pos":[200679,200700],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[200751,200761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200763,200768]},{"pos":[200777,200789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[200795,200811],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[200857,200867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200869,200874]},{"pos":[200883,200895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[200901,200925],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[200979,200989],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200991,200996]},{"pos":[201005,201017],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201023,201039],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[201085,201095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201097,201102]},{"pos":[201111,201123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201129,201149],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[201199,201209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201211,201216]},{"pos":[201225,201237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201243,201270],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[201327,201337],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201339,201344]},{"pos":[201353,201365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201371,201388],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[201435,201445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201447,201452]},{"pos":[201461,201473],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201479,201497],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[201555,201565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201567,201572]},{"content":"mode","pos":[201586,201590]},{"pos":[201599,201611],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201617,201639],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[201691,201701],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201703,201708]},{"pos":[201717,201729],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201735,201758],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[201811,201821],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201823,201828]},{"pos":[201837,201849],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201855,201873],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[201929,201939],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201941,201946]},{"pos":[201955,201967],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[201973,201993],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[202043,202053],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202055,202060]},{"pos":[202069,202081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202087,202108],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[202167,202177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202179,202184]},{"pos":[202193,202205],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202211,202228],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[202285,202295],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202297,202302]},{"content":"mode","pos":[202316,202320]},{"pos":[202329,202341],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202347,202368],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[202419,202429],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202431,202436]},{"pos":[202445,202457],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202463,202485],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[202537,202547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202549,202554]},{"pos":[202563,202575],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202581,202592],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[202643,202653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202655,202660]},{"content":"mode","pos":[202674,202678]},{"pos":[202687,202699],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202705,202720],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[202765,202775],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202777,202782]},{"pos":[202791,202803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202809,202825],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[202871,202881],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[202883,202888]},{"pos":[202897,202909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[202915,202931],"content":"Method limitText","linkify":"Method limitText","nodes":[{"content":"Method limitText","pos":[0,16]}]},{"pos":[202994,203004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203006,203011]},{"content":"mode","pos":[203025,203029]},{"pos":[203038,203050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203056,203076],"content":"Method limitTextMode","linkify":"Method limitTextMode","nodes":[{"content":"Method limitTextMode","pos":[0,20]}]},{"pos":[203135,203145],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[203147,203151]},{"pos":[203160,203172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203178,203199],"content":"Method limitTextValue","linkify":"Method limitTextValue","nodes":[{"content":"Method limitTextValue","pos":[0,21]}]},{"pos":[203250,203260],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203262,203267]},{"pos":[203276,203288],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203294,203313],"content":"Method lookupButton","linkify":"Method lookupButton","nodes":[{"content":"Method lookupButton","pos":[0,19]}]},{"pos":[203362,203372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203374,203379]},{"pos":[203388,203400],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203406,203423],"content":"Method lookupOnly","linkify":"Method lookupOnly","nodes":[{"content":"Method lookupOnly","pos":[0,17]}]},{"pos":[203478,203488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203490,203495]},{"pos":[203504,203516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203522,203538],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[203592,203602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203604,203609]},{"pos":[203618,203630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203636,203652],"content":"Method multiLine","linkify":"Method multiLine","nodes":[{"content":"Method multiLine","pos":[0,16]}]},{"pos":[203706,203716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203718,203723]},{"pos":[203732,203744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[203750,203761],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[203763,203898]},{"pos":[203939,203949],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203951,203956]},{"content":"The name to assign to the control.","pos":[203959,203993]},{"pos":[204000,204012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[204014,204078]},{"pos":[204085,204092],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[204094,204188]},{"content":"It must start with a letter.","pos":[204194,204222]},{"content":"It cannot exceed 250 characters.","pos":[204227,204259]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[204264,204318],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[204323,204363]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[204368,204478]},{"pos":[204484,204507],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[204560,204570],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204572,204577]},{"pos":[204586,204598],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[204604,204624],"content":"Method passwordStyle","linkify":"Method passwordStyle","nodes":[{"content":"Method passwordStyle","pos":[0,20]}]},{"pos":[204682,204692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204694,204699]},{"pos":[204708,204720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[204726,204750],"content":"Method presenceDataField","linkify":"Method presenceDataField","nodes":[{"content":"Method presenceDataField","pos":[0,24]}]},{"pos":[204812,204822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204824,204829]},{"pos":[204838,204850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[204856,204881],"content":"Method presenceDataSource","linkify":"Method presenceDataSource","nodes":[{"content":"Method presenceDataSource","pos":[0,25]}]},{"pos":[204940,204950],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[204952,204957]},{"pos":[204966,204978],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[204984,205015],"content":"Method presenceIndicatorAllowed","linkify":"Method presenceIndicatorAllowed","nodes":[{"content":"Method presenceIndicatorAllowed","pos":[0,31]}]},{"pos":[205076,205086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[205088,205093]},{"pos":[205102,205114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[205120,205137],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[205184,205194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[205196,205201]},{"pos":[205210,205222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[205228,205250],"content":"Method replaceOnLookup","linkify":"Method replaceOnLookup","nodes":[{"content":"Method replaceOnLookup","pos":[0,22]}]},{"pos":[205310,205320],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[205322,205327]},{"pos":[205336,205348],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[205354,205377],"content":"Method searchAfterInput","linkify":"Method searchAfterInput","nodes":[{"content":"Method searchAfterInput","pos":[0,23]}]},{"pos":[205430,205440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[205442,205447]},{"pos":[205456,205468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[205474,205491],"content":"Method searchMode","linkify":"Method searchMode","nodes":[{"content":"Method searchMode","pos":[0,17]}]},{"pos":[205538,205548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[205550,205555]},{"pos":[205564,205576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[205582,205600],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[205668,205678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[205680,205685]},{"pos":[205694,205706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[205712,205728],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[205782,205792],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[205794,205799]},{"pos":[205808,205820],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[205826,205837],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[205839,205966]},{"pos":[206015,206025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206027,206032]},{"content":"The value to assign to the skip property of the control.","pos":[206035,206091]},{"pos":[206098,206110],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[206112,206218]},{"pos":[206224,206236],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[206278,206288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206290,206295]},{"pos":[206304,206316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206322,206333],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[206374,206384],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206386,206391]},{"pos":[206400,206412],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206418,206428],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[206478,206488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206490,206495]},{"content":"mode","pos":[206509,206513]},{"pos":[206522,206534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206540,206554],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[206598,206608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206610,206615]},{"pos":[206624,206636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206642,206657],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[206702,206712],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206714,206719]},{"pos":[206728,206740],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206746,206757],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[206798,206808],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206810,206815]},{"pos":[206824,206836],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[206842,206858],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[206860,206927]},{"pos":[206981,206991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[206993,206998]},{"content":"The value to assign to the underline property of the control.","pos":[207001,207062]},{"pos":[207069,207081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[207083,207147]},{"pos":[207153,207168],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[207213,207223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207225,207230]},{"pos":[207239,207251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207257,207276],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[207325,207335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207337,207342]},{"pos":[207351,207363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207369,207389],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[207439,207449],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207451,207456]},{"pos":[207465,207477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207483,207505],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[207574,207584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207586,207591]},{"content":"mode","pos":[207605,207609]},{"pos":[207618,207630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207636,207662],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[207727,207737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[207739,207743]},{"pos":[207752,207764],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207770,207797],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[207854,207864],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207866,207871]},{"pos":[207880,207892],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[207898,207917],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[207966,207976],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[207978,207983]},{"pos":[207992,208004],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208010,208024],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[208076,208086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208088,208093]},{"pos":[208102,208114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[208120,208132],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[208134,208172]},{"pos":[208224,208234],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[208236,208241]},{"content":"mode","pos":[208255,208259]},{"pos":[208268,208280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[208282,208317]},{"pos":[208324,208331],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[208333,208439]},{"content":"Mode.","pos":[208443,208448]},{"content":"Width calculation.","pos":[208461,208479]},{"content":"-1 Exact.","pos":[208665,208674]},{"content":"The exact width in pixels of the controls is used.","pos":[208683,208733]},{"content":"0 Auto.","pos":[208776,208783]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[208794,208882]},{"content":"1 Column width.","pos":[208887,208902]},{"content":"The layout of the form determines the width of the control.","pos":[208905,208964]},{"content":"The width and width calculation mode can be set separately.","pos":[208997,209056]},{"pos":[209062,209078],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[209080,209142]},{"pos":[209188,209198],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[209200,209205]},{"pos":[209214,209226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[209228,209289]},{"pos":[209296,209303],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[209305,209358]},{"content":"Mode.","pos":[209362,209367]},{"content":"Width Calculation.","pos":[209378,209396]},{"content":"Exact.","pos":[209580,209586]},{"content":"The exact width in pixels of the controls is used.","pos":[209596,209646]},{"content":"Auto.","pos":[209689,209694]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[209705,209793]},{"content":"Column width.","pos":[209798,209811]},{"content":"The layout of the form determines the width of the control.","pos":[209814,209873]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[209906,209989]},{"pos":[209995,210012],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[210014,210052]},{"pos":[210099,210109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[210111,210116]},{"pos":[210125,210137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[210139,210174]},{"pos":[210181,210188],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[210190,210263]},{"pos":[210269,210298],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[210416,210426],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[210428,210444]},{"content":"objectMethodToCall","pos":[210458,210476]},{"content":"overrideObject","pos":[210490,210504]},{"pos":[210511,210536],"content":"Class FormBuildTabControl","linkify":"Class FormBuildTabControl","nodes":[{"content":"Class FormBuildTabControl","pos":[0,25]}]},{"content":"The FormBuildTabControl class lets you create, read, update, and delete X++ code and metadata.","pos":[210593,210687]},{"pos":[210693,210700],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[210702,210812]},{"pos":[210818,210826],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[210832,210839],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[210843,210849]},{"content":"Description","pos":[210953,210964]},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[211343,211387],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[211593,211640],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[211843,211889],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[211953,211993]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[212093,212136],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[212203,212270]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[212343,212383],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[212593,212631],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[212843,212882],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[213093,213130],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[213343,213392],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[213453,213551]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[213593,213634],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[213703,213752]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[213843,213878],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[213953,214015]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[214093,214150],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[214343,214394],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[214593,214636],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[214843,214880],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[214953,214998]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[215093,215148],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[215343,215395],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[215593,215649],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[215843,215893],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[216093,216135],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[216343,216381],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[216593,216665],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[216703,216770]},{"content":"public int containerId()","pos":[216843,216867]},{"content":"Retrieves the ID of the parent container for the control.","pos":[216953,217010]},{"content":"public int containerScrollHorizontalOffset(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[217093,217150],"source":"public int containerScrollHorizontalOffset(\\[int value\\])"},{"content":"public int containerScrollVerticalOffset(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[217343,217398],"source":"public int containerScrollVerticalOffset(\\[int value\\])"},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[217593,217637],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[217843,217902],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[218093,218135],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[218343,218383],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[218453,218518]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[218593,218632],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[218843,218877],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[218953,219034]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[219093,219134],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[219203,219254]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[219343,219385],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[219453,219492]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[219593,219629],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[219703,219765]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[219843,219880],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[219953,219992]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[220093,220127],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[220203,220307]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[220343,220388],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[220593,220634],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public boolean horizontalScrollBarVisible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[220843,220903],"source":"public boolean horizontalScrollBarVisible(\\[boolean value\\])"},{"content":"public int id()","pos":[221093,221108]},{"content":"Retrieves the ID of the control.","pos":[221203,221235]},{"content":"public boolean isContainer()","pos":[221343,221371]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[221453,221529]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[221593,221633],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[221843,221898],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[222093,222142],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[222343,222384],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[222593,222627],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[222843,222878],"source":"public int leftValue(\\[int value\\])"},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterControlId<ph id=\"ph2\">\\]</ph>)","pos":[223093,223160],"source":"public int moveControl(int controlId, \\[int insertAfterControlId\\])"},{"content":"Moves a specified control to the control.","pos":[223203,223244]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[223343,223373],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[223453,223588]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[223593,223635],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[223843,223899],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[224093,224143],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[224343,224385],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public int scrollbars(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[224593,224629],"source":"public int scrollbars(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[224843,224900],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean selectControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[225093,225140],"source":"public boolean selectControl(\\[boolean value\\])"},{"content":"public boolean showTabs(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[225343,225385],"source":"public boolean showTabs(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[225593,225631],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[225703,225830]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[225843,225874],"source":"public int style(\\[int value\\])"},{"content":"public int tab(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[226093,226141],"source":"public int tab(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public int tabAppearance(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[226343,226382],"source":"public int tabAppearance(\\[int value\\])"},{"content":"public boolean tabAutoChange(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[226593,226640],"source":"public boolean tabAutoChange(\\[boolean value\\])"},{"content":"public int tabLayout(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[226843,226878],"source":"public int tabLayout(\\[int value\\])"},{"content":"public AutoMode tabMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[227093,227135],"source":"public AutoMode tabMode(\\[AutoMode mode\\])"},{"content":"public int tabPlacement(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[227343,227381],"source":"public int tabPlacement(\\[int value\\])"},{"content":"public int tabs(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[227593,227623],"source":"public int tabs(\\[int value\\])"},{"content":"public int tabValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[227843,227877],"source":"public int tabValue(\\[int value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[228093,228132],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[228343,228397],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[228593,228641],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[228843,228883],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[229093,229126],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[229343,229377],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[229593,229623],"source":"public int type(\\[int value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[229843,229877],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[230093,230131],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[230343,230382],"source":"public int userDataItems(\\[int value\\])"},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[230593,230640],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public boolean verticalScrollBarVisible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[230843,230901],"source":"public boolean verticalScrollBarVisible(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[231093,231153],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[231343,231397],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[231593,231639],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[231843,231881],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[232093,232134],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[232343,232384],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[232453,232491]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[232593,232628],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[232703,232765]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[232843,232879],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[232953,232991]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[233093,233200],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[233346,233363],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[233418,233428],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[233430,233435]},{"pos":[233444,233456],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[233462,233482],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[233540,233550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[233552,233557]},{"pos":[233566,233578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[233584,233603],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[233605,233645]},{"pos":[233702,233712],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[233714,233719]},{"pos":[233728,233740],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[233742,233798]},{"pos":[233805,233812],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[233814,233893]},{"pos":[233899,233915],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[233917,233984]},{"pos":[234038,234048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234050,234055]},{"pos":[234064,234076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[234078,234130]},{"pos":[234137,234144],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[234146,234268]},{"pos":[234274,234295],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[234346,234356],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234358,234363]},{"pos":[234372,234384],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234390,234409],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[234458,234468],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234470,234475]},{"pos":[234484,234496],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234502,234522],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[234572,234582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234584,234589]},{"pos":[234598,234610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234616,234634],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[234682,234692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234694,234699]},{"pos":[234708,234720],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[234726,234748],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[234750,234848]},{"pos":[234908,234918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[234920,234925]},{"pos":[234934,234946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[234948,235027]},{"pos":[235034,235041],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[235043,235080]},{"pos":[235086,235108],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[235110,235159]},{"pos":[235211,235221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235223,235228]},{"pos":[235237,235249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[235251,235295]},{"pos":[235302,235309],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[235311,235379]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[235385,235455]},{"content":"The second byte contains a value for green.","pos":[235460,235503]},{"content":"The third byte contains a value for blue.","pos":[235508,235549]},{"content":"The high-order byte must be zero.","pos":[235554,235587]},{"content":"The maximum value for a single byte is 255.","pos":[235592,235635]},{"pos":[235641,235657],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[235659,235721]},{"pos":[235767,235777],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235779,235784]},{"pos":[235793,235805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[235807,235868]},{"pos":[235874,235893],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[235959,235969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[235971,235976]},{"content":"mode","pos":[235990,235994]},{"pos":[236003,236015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236021,236044],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[236106,236116],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[236118,236122]},{"pos":[236131,236143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236149,236173],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[236227,236237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236239,236244]},{"pos":[236253,236265],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236271,236289],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[236291,236336]},{"pos":[236384,236394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236396,236401]},{"pos":[236410,236422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[236424,236467]},{"pos":[236474,236481],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[236483,236544]},{"content":"Value.","pos":[236548,236554]},{"content":"Style.","pos":[236557,236563]},{"content":"0","pos":[236634,236635]},{"content":"Default.","pos":[236643,236651]},{"content":"1","pos":[236677,236678]},{"content":"The MicrosoftWindows palette.","pos":[236686,236715]},{"content":"2","pos":[236720,236721]},{"content":"The true-color scheme.","pos":[236729,236751]},{"pos":[236766,236780],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[236844,236854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[236856,236861]},{"content":"mode","pos":[236875,236879]},{"pos":[236888,236900],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[236906,236924],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[236987,236997],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[236999,237003]},{"pos":[237012,237024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237030,237048],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[237113,237123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237125,237130]},{"content":"mode","pos":[237144,237148]},{"pos":[237157,237169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237175,237197],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[237258,237268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[237270,237274]},{"pos":[237283,237295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237301,237324],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[237377,237387],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237389,237394]},{"pos":[237403,237415],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237421,237440],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[237489,237499],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237501,237506]},{"pos":[237515,237527],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[237533,237556],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[237558,237625]},{"pos":[237708,237718],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[237720,237725]},{"pos":[237734,237746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[237748,237820]},{"pos":[237827,237834],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[237836,237917]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[237918,238011]},{"pos":[238017,238035],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[238037,238094]},{"pos":[238131,238143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[238145,238176]},{"pos":[238182,238220],"content":"Method containerScrollHorizontalOffset","linkify":"Method containerScrollHorizontalOffset","nodes":[{"content":"Method containerScrollHorizontalOffset","pos":[0,38]}]},{"pos":[238288,238298],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238300,238305]},{"pos":[238314,238326],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238332,238368],"content":"Method containerScrollVerticalOffset","linkify":"Method containerScrollVerticalOffset","nodes":[{"content":"Method containerScrollVerticalOffset","pos":[0,36]}]},{"pos":[238434,238444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238446,238451]},{"pos":[238460,238472],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238478,238503],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[238558,238568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238570,238575]},{"pos":[238584,238596],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238602,238634],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[238704,238714],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238716,238721]},{"pos":[238730,238742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238748,238771],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[238824,238834],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[238836,238841]},{"pos":[238850,238862],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[238868,238885],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[238887,238952]},{"pos":[239003,239013],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[239015,239020]},{"pos":[239029,239041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[239043,239088]},{"pos":[239094,239114],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[239164,239174],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[239176,239181]},{"pos":[239190,239202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[239208,239223],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[239225,239306]},{"pos":[239351,239361],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[239363,239368]},{"pos":[239377,239389],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[239391,239451]},{"pos":[239457,239471],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[239473,239524]},{"pos":[239576,239586],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[239588,239593]},{"pos":[239602,239614],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[239616,239664]},{"pos":[239671,239678],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[239680,239755]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[239756,239851]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[239852,239986]},{"pos":[239992,240005],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[240007,240046]},{"pos":[240099,240109],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[240111,240116]},{"content":"mode","pos":[240130,240134]},{"pos":[240143,240155],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[240157,240193]},{"pos":[240200,240207],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[240209,240262]},{"content":"Calculate the height according to the following table:","pos":[240263,240317]},{"content":"Mode.","pos":[240321,240326]},{"content":"Height calculation.","pos":[240340,240359]},{"content":"-1 Exact.","pos":[240547,240556]},{"content":"The exact height in pixels of the controls is used.","pos":[240566,240617]},{"content":"0 Auto.","pos":[240660,240667]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[240679,240768]},{"content":"1 Column height.","pos":[240773,240789]},{"content":"The layout of the form determines the height of the control.","pos":[240792,240852]},{"content":"The height and height calculation mode can be set separately.","pos":[240885,240946]},{"pos":[240952,240969],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[240971,241033]},{"pos":[241080,241090],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[241092,241097]},{"pos":[241106,241118],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[241120,241141]},{"pos":[241148,241155],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[241157,241211]},{"content":"Mode.","pos":[241215,241220]},{"content":"Height Calculation.","pos":[241232,241251]},{"content":"Exact.","pos":[241437,241443]},{"content":"The exact height in pixels of the controls is used.","pos":[241454,241505]},{"content":"Auto.","pos":[241548,241553]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[241565,241654]},{"content":"Column height.","pos":[241659,241673]},{"content":"The layout of the form determines the height of the control.","pos":[241676,241736]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[241769,241854]},{"pos":[241860,241878],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[241880,241919]},{"pos":[241967,241977],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[241979,241984]},{"pos":[241993,242005],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[242007,242028]},{"pos":[242035,242042],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[242044,242134]},{"pos":[242140,242155],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[242157,242261]},{"pos":[242306,242316],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[242318,242323]},{"pos":[242332,242344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[242346,242401]},{"pos":[242408,242415],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.","pos":[242417,242530]},{"pos":[242536,242554],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[242610,242620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[242622,242627]},{"pos":[242636,242648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[242654,242676],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[242728,242738],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[242740,242745]},{"pos":[242754,242766],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[242772,242805],"content":"Method horizontalScrollBarVisible","linkify":"Method horizontalScrollBarVisible","nodes":[{"content":"Method horizontalScrollBarVisible","pos":[0,33]}]},{"pos":[242876,242886],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[242888,242893]},{"pos":[242902,242914],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[242920,242929],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[242931,242963]},{"pos":[242991,243003],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[243005,243027]},{"pos":[243033,243051],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[243053,243129]},{"pos":[243170,243182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[243184,243258]},{"pos":[243264,243275],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[243326,243336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[243338,243343]},{"content":"mode","pos":[243357,243361]},{"pos":[243370,243382],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[243388,243405],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[243469,243479],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[243481,243486]},{"content":"mode","pos":[243500,243504]},{"pos":[243513,243525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[243531,243552],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[243612,243622],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[243624,243628]},{"pos":[243637,243649],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[243655,243677],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[243729,243739],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[243741,243746]},{"pos":[243755,243767],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[243773,243788],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[243833,243843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[243845,243850]},{"pos":[243859,243871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[243877,243893],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[243939,243949],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[243951,243956]},{"pos":[243965,243977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[243983,244001],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"content":"Moves a specified control to the control.","pos":[244003,244044]},{"pos":[244122,244132],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[244134,244143]},{"content":"insertAfterControlId","pos":[244157,244177]},{"pos":[244186,244198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control was moved successfully; otherwise, 0.","pos":[244200,244254]},{"pos":[244261,244268],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed.","pos":[244270,244427]},{"content":"However, in some cases, such as for the reference group control instance, controls cannot be moved.","pos":[244428,244527]},{"pos":[244533,244544],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[244546,244681]},{"pos":[244722,244732],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[244734,244739]},{"content":"The name to assign to the control.","pos":[244742,244776]},{"pos":[244783,244795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[244797,244861]},{"pos":[244868,244875],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[244877,244971]},{"content":"It must start with a letter.","pos":[244977,245005]},{"content":"It cannot exceed 250 characters.","pos":[245010,245042]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[245047,245101],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[245106,245146]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[245151,245261]},{"pos":[245267,245290],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[245343,245353],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[245355,245360]},{"pos":[245369,245381],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[245387,245405],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[245470,245480],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[245482,245487]},{"content":"mode","pos":[245501,245505]},{"pos":[245514,245526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[245532,245554],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[245615,245625],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[245627,245631]},{"pos":[245640,245652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[245658,245681],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[245734,245744],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[245746,245751]},{"pos":[245760,245772],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[245778,245795],"content":"Method scrollbars","linkify":"Method scrollbars","nodes":[{"content":"Method scrollbars","pos":[0,17]}]},{"pos":[245842,245852],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[245854,245859]},{"pos":[245868,245880],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[245886,245904],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[245972,245982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[245984,245989]},{"pos":[245998,246010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[246016,246036],"content":"Method selectControl","linkify":"Method selectControl","nodes":[{"content":"Method selectControl","pos":[0,20]}]},{"pos":[246094,246104],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[246106,246111]},{"pos":[246120,246132],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[246138,246153],"content":"Method showTabs","linkify":"Method showTabs","nodes":[{"content":"Method showTabs","pos":[0,15]}]},{"pos":[246206,246216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[246218,246223]},{"pos":[246232,246244],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[246250,246261],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[246263,246390]},{"pos":[246439,246449],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[246451,246456]},{"content":"The value to assign to the skip property of the control.","pos":[246459,246515]},{"pos":[246522,246534],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[246536,246642]},{"pos":[246648,246660],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[246702,246712],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[246714,246719]},{"pos":[246728,246740],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[246746,246756],"content":"Method tab","linkify":"Method tab","nodes":[{"content":"Method tab","pos":[0,10]}]},{"pos":[246813,246823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[246825,246830]},{"content":"mode","pos":[246844,246848]},{"pos":[246857,246869],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[246875,246895],"content":"Method tabAppearance","linkify":"Method tabAppearance","nodes":[{"content":"Method tabAppearance","pos":[0,20]}]},{"pos":[246945,246955],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[246957,246962]},{"pos":[246971,246983],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[246989,247009],"content":"Method tabAutoChange","linkify":"Method tabAutoChange","nodes":[{"content":"Method tabAutoChange","pos":[0,20]}]},{"pos":[247067,247077],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[247079,247084]},{"pos":[247093,247105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247111,247127],"content":"Method tabLayout","linkify":"Method tabLayout","nodes":[{"content":"Method tabLayout","pos":[0,16]}]},{"pos":[247173,247183],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[247185,247190]},{"pos":[247199,247211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247217,247231],"content":"Method tabMode","linkify":"Method tabMode","nodes":[{"content":"Method tabMode","pos":[0,14]}]},{"pos":[247284,247294],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[247296,247300]},{"pos":[247309,247321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247327,247346],"content":"Method tabPlacement","linkify":"Method tabPlacement","nodes":[{"content":"Method tabPlacement","pos":[0,19]}]},{"pos":[247395,247405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[247407,247412]},{"pos":[247421,247433],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247439,247450],"content":"Method tabs","linkify":"Method tabs","nodes":[{"content":"Method tabs","pos":[0,11]}]},{"pos":[247491,247501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[247503,247508]},{"pos":[247517,247529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247535,247550],"content":"Method tabValue","linkify":"Method tabValue","nodes":[{"content":"Method tabValue","pos":[0,15]}]},{"pos":[247595,247605],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[247607,247612]},{"pos":[247621,247633],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247639,247649],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[247699,247709],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[247711,247716]},{"content":"mode","pos":[247730,247734]},{"pos":[247743,247755],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247761,247777],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[247840,247850],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[247852,247857]},{"content":"mode","pos":[247871,247875]},{"pos":[247884,247896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[247902,247922],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[247981,247991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[247993,247997]},{"pos":[248006,248018],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[248024,248045],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[248096,248106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[248108,248113]},{"pos":[248122,248134],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[248140,248154],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[248198,248208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[248210,248215]},{"pos":[248224,248236],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[248242,248257],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[248302,248312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[248314,248319]},{"pos":[248328,248340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[248346,248357],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[248398,248408],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[248410,248415]},{"pos":[248424,248436],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[248442,248457],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[248502,248512],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[248514,248519]},{"pos":[248528,248540],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[248546,248565],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[248614,248624],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[248626,248631]},{"pos":[248640,248652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[248658,248678],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[248728,248738],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[248740,248745]},{"pos":[248754,248766],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[248772,248792],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[248850,248860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[248862,248867]},{"pos":[248876,248888],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[248894,248925],"content":"Method verticalScrollBarVisible","linkify":"Method verticalScrollBarVisible","nodes":[{"content":"Method verticalScrollBarVisible","pos":[0,31]}]},{"pos":[248994,249004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249006,249011]},{"pos":[249020,249032],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249038,249060],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[249129,249139],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249141,249146]},{"content":"mode","pos":[249160,249164]},{"pos":[249173,249185],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249191,249217],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[249282,249292],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[249294,249298]},{"pos":[249307,249319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249325,249352],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[249409,249419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249421,249426]},{"pos":[249435,249447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249453,249472],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[249521,249531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249533,249538]},{"pos":[249547,249559],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249565,249579],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[249631,249641],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249643,249648]},{"pos":[249657,249669],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249675,249687],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[249689,249727]},{"pos":[249779,249789],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249791,249796]},{"content":"mode","pos":[249810,249814]},{"pos":[249823,249835],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[249837,249872]},{"pos":[249879,249886],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[249888,249941]},{"content":"Calculate the width according to the following table:","pos":[249942,249995]},{"content":"Mode.","pos":[249999,250004]},{"content":"Width calculation.","pos":[250017,250035]},{"content":"-1 Exact.","pos":[250221,250230]},{"content":"The exact width in pixels of the controls is used.","pos":[250239,250289]},{"content":"0 Auto.","pos":[250332,250339]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[250350,250438]},{"content":"1 Column width.","pos":[250443,250458]},{"content":"The layout of the form determines the width of the control.","pos":[250461,250520]},{"content":"The width and width calculation mode can be set separately.","pos":[250553,250612]},{"pos":[250618,250634],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[250636,250698]},{"pos":[250744,250754],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[250756,250761]},{"pos":[250770,250782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[250784,250845]},{"pos":[250852,250859],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[250861,250914]},{"content":"Mode.","pos":[250918,250923]},{"content":"Width Calculation.","pos":[250934,250952]},{"content":"Exact.","pos":[251136,251142]},{"content":"The exact width in pixels of the controls is used.","pos":[251152,251202]},{"content":"Auto.","pos":[251245,251250]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[251261,251349]},{"content":"Column width.","pos":[251354,251367]},{"content":"The layout of the form determines the width of the control.","pos":[251370,251429]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[251462,251545]},{"pos":[251551,251568],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[251570,251608]},{"pos":[251655,251665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[251667,251672]},{"pos":[251681,251693],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[251695,251730]},{"pos":[251737,251744],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[251746,251819]},{"pos":[251825,251854],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[251972,251982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[251984,252000]},{"content":"objectMethodToCall","pos":[252014,252032]},{"content":"overrideObject","pos":[252046,252060]},{"pos":[252067,252094],"content":"Class FormBuildTableControl","linkify":"Class FormBuildTableControl","nodes":[{"content":"Class FormBuildTableControl","pos":[0,27]}]},{"content":"The FormBuildTableControl class lets you create, read, update, and delete X++ code and metadata.","pos":[252153,252249]},{"pos":[252255,252262],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[252264,252374]},{"pos":[252380,252388],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[252394,252401],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[252405,252411]},{"content":"Description","pos":[252515,252526]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[252905,252951],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[253015,253055]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[253155,253198],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[253265,253332]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[253405,253454],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[253515,253613]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[253655,253696],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[253765,253814]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[253905,253943],"source":"public int bottomMargin(\\[int value\\])"},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[254155,254192],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[254265,254310]},{"content":"public int column(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[254405,254437],"source":"public int column(\\[int value\\])"},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[254655,254688],"source":"public int columns(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[254905,254977],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[255015,255082]},{"content":"public int containerId()","pos":[255155,255179]},{"content":"Retrieves the ID of the parent container for the control.","pos":[255265,255322]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[255405,255449],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[255655,255697],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[255905,255944],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[256155,256189],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[256265,256346]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[256405,256446],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[256515,256566]},{"content":"public boolean gridLines(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[256655,256698],"source":"public boolean gridLines(\\[boolean value\\])"},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[256905,256947],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[257015,257054]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[257155,257191],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[257265,257327]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[257405,257442],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[257515,257554]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[257655,257689],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[257765,257869]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[257905,257946],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public boolean highlightActive(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[258155,258204],"source":"public boolean highlightActive(\\[boolean value\\])"},{"content":"public int id()","pos":[258405,258420]},{"content":"Retrieves the ID of the control.","pos":[258515,258547]},{"content":"public boolean isContainer()","pos":[258655,258683]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[258765,258841]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[258905,258945],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[259155,259191],"source":"public int leftMargin(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[259405,259439],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[259655,259690],"source":"public int leftValue(\\[int value\\])"},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterControlId<ph id=\"ph2\">\\]</ph>)","pos":[259905,259972],"source":"public int moveControl(int controlId, \\[int insertAfterControlId\\])"},{"content":"Moves a specified control to the control.","pos":[260015,260056]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[260155,260185],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[260265,260400]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[260405,260447],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[260655,260692],"source":"public int rightMargin(\\[int value\\])"},{"content":"public int row(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[260905,260934],"source":"public int row(\\[int value\\])"},{"content":"public int rows(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[261155,261185],"source":"public int rows(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[261405,261462],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean showColLabels(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[261655,261702],"source":"public boolean showColLabels(\\[boolean value\\])"},{"content":"public boolean showRowLabels(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[261905,261952],"source":"public boolean showRowLabels(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[262155,262193],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[262265,262392]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[262405,262444],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[262655,262690],"source":"public int topMargin(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[262905,262938],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[263155,263189],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[263405,263435],"source":"public int type(\\[int value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[263655,263689],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[263905,263943],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[264155,264194],"source":"public int userDataItems(\\[int value\\])"},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[264405,264452],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[264655,264715],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[264905,264959],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[265155,265201],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[265405,265446],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[265655,265696],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[265765,265803]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[265905,265940],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[266015,266077]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[266155,266191],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[266265,266303]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[266405,266512],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[266658,266677],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[266679,266719]},{"pos":[266776,266786],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[266788,266793]},{"pos":[266802,266814],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[266816,266872]},{"pos":[266879,266886],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[266888,266967]},{"pos":[266973,266989],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[266991,267058]},{"pos":[267112,267122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[267124,267129]},{"pos":[267138,267150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[267152,267204]},{"pos":[267211,267218],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[267220,267342]},{"pos":[267348,267370],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[267372,267470]},{"pos":[267530,267540],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[267542,267547]},{"pos":[267556,267568],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[267570,267649]},{"pos":[267656,267663],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[267665,267702]},{"pos":[267708,267730],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[267732,267781]},{"pos":[267833,267843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[267845,267850]},{"pos":[267859,267871],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[267873,267917]},{"pos":[267924,267931],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[267933,268001]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[268007,268077]},{"content":"The second byte contains a value for green.","pos":[268082,268125]},{"content":"The third byte contains a value for blue.","pos":[268130,268171]},{"content":"The high-order byte must be zero.","pos":[268176,268209]},{"content":"The maximum value for a single byte is 255.","pos":[268214,268257]},{"pos":[268263,268282],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[268331,268341],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[268343,268348]},{"pos":[268357,268369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[268375,268393],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[268395,268440]},{"pos":[268488,268498],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[268500,268505]},{"pos":[268514,268526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[268528,268571]},{"pos":[268578,268585],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[268587,268648]},{"content":"Value.","pos":[268652,268658]},{"content":"Style.","pos":[268661,268667]},{"content":"0","pos":[268740,268741]},{"content":"Default.","pos":[268749,268757]},{"content":"1","pos":[268784,268785]},{"content":"The Microsoft Windows palette.","pos":[268793,268823]},{"content":"2","pos":[268828,268829]},{"content":"The true-color scheme.","pos":[268837,268859]},{"pos":[268875,268888],"content":"Method column","linkify":"Method column","nodes":[{"content":"Method column","pos":[0,13]}]},{"pos":[268931,268941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[268943,268948]},{"pos":[268957,268969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[268975,268989],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[269033,269043],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[269045,269050]},{"pos":[269059,269071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[269077,269100],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[269102,269169]},{"pos":[269252,269262],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[269264,269269]},{"pos":[269278,269290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[269292,269364]},{"pos":[269371,269378],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[269380,269461]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[269462,269555]},{"pos":[269561,269579],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[269581,269638]},{"pos":[269675,269687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[269689,269720]},{"pos":[269726,269751],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[269806,269816],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[269818,269823]},{"pos":[269832,269844],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[269850,269873],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[269926,269936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[269938,269943]},{"pos":[269952,269964],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[269970,269990],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[270040,270050],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[270052,270057]},{"pos":[270066,270078],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[270084,270099],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[270101,270182]},{"pos":[270227,270237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[270239,270244]},{"pos":[270253,270265],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[270267,270327]},{"pos":[270333,270347],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[270349,270400]},{"pos":[270452,270462],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[270464,270469]},{"pos":[270478,270490],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[270492,270540]},{"pos":[270547,270554],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[270556,270635]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[270636,270731]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[270732,270866]},{"pos":[270872,270888],"content":"Method gridLines","linkify":"Method gridLines","nodes":[{"content":"Method gridLines","pos":[0,16]}]},{"pos":[270942,270952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[270954,270959]},{"pos":[270968,270980],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[270986,270999],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[271001,271040]},{"pos":[271093,271103],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[271105,271110]},{"content":"mode","pos":[271124,271128]},{"pos":[271137,271149],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[271151,271187]},{"pos":[271194,271201],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[271203,271256]},{"content":"Calculate the height according to the following table:","pos":[271257,271311]},{"content":"Mode.","pos":[271315,271320]},{"content":"Height calculation.","pos":[271334,271353]},{"content":"-1 Exact.","pos":[271541,271550]},{"content":"The exact height in pixels of the controls is used.","pos":[271560,271611]},{"content":"0 Auto.","pos":[271654,271661]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[271673,271762]},{"content":"1 Column height.","pos":[271767,271783]},{"content":"The layout of the form determines the height of the control.","pos":[271786,271846]},{"content":"The height and height calculation mode can be set separately.","pos":[271879,271940]},{"pos":[271946,271963],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[271965,272027]},{"pos":[272074,272084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272086,272091]},{"pos":[272100,272112],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[272114,272135]},{"pos":[272142,272149],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[272151,272205]},{"content":"Mode.","pos":[272209,272214]},{"content":"Height Calculation.","pos":[272226,272245]},{"content":"Exact.","pos":[272431,272437]},{"content":"The exact height in pixels of the controls is used.","pos":[272448,272499]},{"content":"Auto.","pos":[272542,272547]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[272559,272648]},{"content":"Column height.","pos":[272653,272667]},{"content":"The layout of the form determines the height of the control.","pos":[272670,272730]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[272763,272848]},{"pos":[272854,272872],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[272874,272913]},{"pos":[272961,272971],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272973,272978]},{"pos":[272987,272999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[273001,273022]},{"pos":[273029,273036],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[273038,273128]},{"pos":[273134,273149],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[273151,273255]},{"pos":[273300,273310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273312,273317]},{"pos":[273326,273338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[273340,273395]},{"pos":[273402,273409],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[273411,273479]},{"content":"The help text must not exceed 250 characters.","pos":[273480,273525]},{"pos":[273531,273553],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[273605,273615],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273617,273622]},{"pos":[273631,273643],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273649,273671],"content":"Method highlightActive","linkify":"Method highlightActive","nodes":[{"content":"Method highlightActive","pos":[0,22]}]},{"pos":[273731,273741],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273743,273748]},{"pos":[273757,273769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273775,273784],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[273786,273818]},{"pos":[273846,273858],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[273860,273882]},{"pos":[273888,273906],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[273908,273984]},{"pos":[274025,274037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[274039,274113]},{"pos":[274119,274130],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[274181,274191],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274193,274198]},{"content":"mode","pos":[274212,274216]},{"pos":[274225,274237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[274243,274260],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[274307,274317],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274319,274324]},{"pos":[274333,274345],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[274351,274366],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[274411,274421],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274423,274428]},{"pos":[274437,274449],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[274455,274471],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[274517,274527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274529,274534]},{"pos":[274543,274555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[274561,274579],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"content":"Moves a specified control to the control.","pos":[274581,274622]},{"pos":[274700,274710],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[274712,274721]},{"content":"insertAfterControlId","pos":[274735,274755]},{"pos":[274764,274776],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control was moved successfully; otherwise, 0.","pos":[274778,274832]},{"pos":[274839,274846],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed.","pos":[274848,275005]},{"content":"However, in some cases, such as for the reference group control instance, controls cannot be moved.","pos":[275006,275105]},{"pos":[275111,275122],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[275124,275259]},{"pos":[275300,275310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275312,275317]},{"content":"The name to assign to the control.","pos":[275320,275354]},{"pos":[275361,275373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[275375,275439]},{"pos":[275446,275453],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[275455,275549]},{"content":"It must start with a letter.","pos":[275555,275583]},{"content":"It cannot exceed 250 characters.","pos":[275588,275620]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[275625,275679],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[275684,275724]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[275729,275839]},{"pos":[275845,275868],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[275921,275931],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[275933,275938]},{"pos":[275947,275959],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[275965,275983],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[276031,276041],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276043,276048]},{"pos":[276057,276069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276075,276085],"content":"Method row","linkify":"Method row","nodes":[{"content":"Method row","pos":[0,10]}]},{"pos":[276125,276135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276137,276142]},{"pos":[276151,276163],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276169,276180],"content":"Method rows","linkify":"Method rows","nodes":[{"content":"Method rows","pos":[0,11]}]},{"pos":[276221,276231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276233,276238]},{"pos":[276247,276259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276265,276283],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[276351,276361],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276363,276368]},{"pos":[276377,276389],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276395,276415],"content":"Method showColLabels","linkify":"Method showColLabels","nodes":[{"content":"Method showColLabels","pos":[0,20]}]},{"pos":[276473,276483],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276485,276490]},{"pos":[276499,276511],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276517,276537],"content":"Method showRowLabels","linkify":"Method showRowLabels","nodes":[{"content":"Method showRowLabels","pos":[0,20]}]},{"pos":[276595,276605],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276607,276612]},{"pos":[276621,276633],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276639,276650],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[276652,276779]},{"pos":[276828,276838],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276840,276845]},{"content":"The value to assign to the skip property of the control; optional.","pos":[276848,276914]},{"pos":[276921,276933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[276935,277041]},{"pos":[277047,277057],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[277107,277117],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277119,277124]},{"content":"mode","pos":[277138,277142]},{"pos":[277151,277163],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277169,277185],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[277231,277241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277243,277248]},{"pos":[277257,277269],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277275,277289],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[277333,277343],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277345,277350]},{"pos":[277359,277371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277377,277392],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[277437,277447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277449,277454]},{"pos":[277463,277475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277481,277492],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[277533,277543],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277545,277550]},{"pos":[277559,277571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277577,277592],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[277637,277647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277649,277654]},{"pos":[277663,277675],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277681,277700],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[277749,277759],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277761,277766]},{"pos":[277775,277787],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277793,277813],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[277863,277873],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277875,277880]},{"pos":[277889,277901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277907,277927],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[277985,277995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277997,278002]},{"pos":[278011,278023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278029,278051],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[278120,278130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278132,278137]},{"content":"mode","pos":[278151,278155]},{"pos":[278164,278176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278182,278208],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[278273,278283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[278285,278289]},{"pos":[278298,278310],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278316,278343],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[278400,278410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278412,278417]},{"pos":[278426,278438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278444,278458],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[278510,278520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278522,278527]},{"pos":[278536,278548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278554,278566],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[278568,278606]},{"pos":[278658,278668],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278670,278675]},{"content":"mode","pos":[278689,278693]},{"pos":[278702,278714],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[278716,278751]},{"pos":[278758,278765],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[278767,278820]},{"content":"Calculate the width according to the following table:","pos":[278821,278874]},{"content":"Mode.","pos":[278878,278883]},{"content":"Width calculation.","pos":[278896,278914]},{"content":"-1 Exact.","pos":[279100,279109]},{"content":"The exact width in pixels of the controls is used.","pos":[279118,279168]},{"content":"0 Auto.","pos":[279211,279218]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[279229,279317]},{"content":"1 Column width.","pos":[279322,279337]},{"content":"The layout of the form determines the width of the control.","pos":[279340,279399]},{"content":"The width and width calculation mode can be set separately.","pos":[279432,279491]},{"pos":[279497,279513],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[279515,279577]},{"pos":[279623,279633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[279635,279640]},{"pos":[279649,279661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[279663,279724]},{"pos":[279731,279738],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[279740,279793]},{"content":"Mode.","pos":[279797,279802]},{"content":"Width Calculation.","pos":[279813,279831]},{"content":"Exact.","pos":[280015,280021]},{"content":"The exact width in pixels of the controls is used.","pos":[280031,280081]},{"content":"Auto.","pos":[280124,280129]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[280140,280228]},{"content":"Column width.","pos":[280233,280246]},{"content":"The layout of the form determines the width of the control.","pos":[280249,280308]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[280341,280424]},{"pos":[280430,280447],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[280449,280487]},{"pos":[280534,280544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[280546,280551]},{"pos":[280560,280572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[280574,280609]},{"pos":[280616,280623],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[280625,280698]},{"pos":[280704,280733],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[280851,280861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[280863,280879]},{"content":"objectMethodToCall","pos":[280893,280911]},{"content":"overrideObject","pos":[280925,280939]},{"pos":[280946,280975],"content":"Class FormBuildTabPageControl","linkify":"Class FormBuildTabPageControl","nodes":[{"content":"Class FormBuildTabPageControl","pos":[0,29]}]},{"content":"The FormBuildTabPageControl class lets you create, read, update, and delete X++ code and metadata.","pos":[281036,281134]},{"pos":[281140,281147],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[281149,281259]},{"pos":[281265,281273],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[281279,281286],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[281290,281296]},{"content":"Description","pos":[281400,281411]},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[281790,281834],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[282040,282087],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[282290,282336],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[282400,282440]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[282540,282583],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[282650,282717]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[282790,282830],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[283040,283078],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[283290,283329],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[283540,283577],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[283790,283839],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[283900,283998]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[284040,284081],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[284150,284199]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[284290,284325],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[284400,284461]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[284540,284597],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[284790,284841],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[285040,285083],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[285290,285323],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[285400,285439]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[285540,285577],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[285650,285695]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[285790,285845],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[286040,286092],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[286290,286346],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[286540,286590],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[286790,286832],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[287040,287078],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[287290,287362],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[287400,287467]},{"content":"public int containerId()","pos":[287540,287564]},{"content":"Retrieves the ID of the parent container for the control.","pos":[287650,287707]},{"content":"public int containerScrollHorizontalOffset(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[287790,287847],"source":"public int containerScrollHorizontalOffset(\\[int value\\])"},{"content":"public int containerScrollVerticalOffset(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[288040,288095],"source":"public int containerScrollVerticalOffset(\\[int value\\])"},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[288290,288334],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[288540,288599],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[288790,288832],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[289040,289080],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[289150,289222]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[289290,289329],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[289540,289574],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[289650,289731]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[289790,289831],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[289900,289951]},{"content":"public int fastTabExpanded(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[290040,290081],"source":"public int fastTabExpanded(\\[int value\\])"},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[290290,290332],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[290400,290439]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[290540,290576],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[290650,290712]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[290790,290827],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[290900,290939]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[291040,291074],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[291150,291254]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[291290,291335],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[291540,291581],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public boolean horizontalScrollBarVisible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[291790,291850],"source":"public boolean horizontalScrollBarVisible(\\[boolean value\\])"},{"content":"public int id()","pos":[292040,292055]},{"content":"Retrieves the ID of the control.","pos":[292150,292182]},{"content":"public boolean isContainer()","pos":[292290,292318]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[292400,292476]},{"content":"public str labelAction(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[292540,292577],"source":"public str labelAction(\\[str value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[292790,292830],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[293040,293095],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[293290,293339],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[293540,293581],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[293790,293824],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[294040,294075],"source":"public int leftValue(\\[int value\\])"},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterControlId<ph id=\"ph2\">\\]</ph>)","pos":[294290,294357],"source":"public int moveControl(int controlId, \\[int insertAfterControlId\\])"},{"content":"Moves a specified control to the control.","pos":[294400,294441]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[294540,294570],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[294650,294785]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[294790,294832],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int panelStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[295040,295076],"source":"public int panelStyle(\\[int value\\])"},{"content":"public str parentPage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[295290,295326],"source":"public str parentPage(\\[str value\\])"},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[295540,295596],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[295790,295840],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[296040,296082],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public int scrollbars(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[296290,296326],"source":"public int scrollbars(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[296540,296597],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[296790,296828],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[296900,297027]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[297040,297071],"source":"public int style(\\[int value\\])"},{"content":"public int tabAppearance(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[297290,297329],"source":"public int tabAppearance(\\[int value\\])"},{"content":"public boolean tabAutoChange(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[297540,297587],"source":"public boolean tabAutoChange(\\[boolean value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[297790,297829],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[298040,298094],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[298290,298338],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[298540,298580],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[298790,298823],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[299040,299074],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[299290,299320],"source":"public int type(\\[int value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[299540,299574],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[299790,299828],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[300040,300079],"source":"public int userDataItems(\\[int value\\])"},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[300290,300337],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public boolean verticalScrollBarVisible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[300540,300598],"source":"public boolean verticalScrollBarVisible(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[300790,300850],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[301040,301094],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[301290,301336],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[301540,301578],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[301790,301831],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[302040,302081],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[302150,302188]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[302290,302325],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[302400,302462]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[302540,302576],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[302650,302688]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[302790,302897],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[303043,303060],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[303115,303125],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303127,303132]},{"pos":[303141,303153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[303159,303179],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[303237,303247],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303249,303254]},{"pos":[303263,303275],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[303281,303300],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[303302,303342]},{"pos":[303399,303409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303411,303416]},{"pos":[303425,303437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[303439,303495]},{"pos":[303502,303509],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[303511,303590]},{"pos":[303596,303612],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[303614,303681]},{"pos":[303735,303745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303747,303752]},{"pos":[303761,303773],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[303775,303827]},{"pos":[303834,303841],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[303843,303965]},{"pos":[303971,303992],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[304043,304053],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304055,304060]},{"pos":[304069,304081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304087,304106],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[304155,304165],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304167,304172]},{"pos":[304181,304193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304199,304219],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[304269,304279],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304281,304286]},{"pos":[304295,304307],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304313,304331],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[304379,304389],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304391,304396]},{"pos":[304405,304417],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304423,304445],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[304447,304545]},{"pos":[304605,304615],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304617,304622]},{"pos":[304631,304643],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[304645,304724]},{"pos":[304731,304738],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[304740,304777]},{"pos":[304783,304805],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[304807,304856]},{"pos":[304908,304918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304920,304925]},{"pos":[304934,304946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[304948,304992]},{"pos":[304999,305006],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[305008,305076]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[305082,305152]},{"content":"The second byte contains a value for green.","pos":[305157,305200]},{"content":"The third byte contains a value for blue.","pos":[305205,305246]},{"content":"The high-order byte must be zero.","pos":[305251,305284]},{"content":"The maximum value for a single byte is 255.","pos":[305289,305332]},{"pos":[305338,305354],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[305356,305417]},{"pos":[305463,305473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305475,305480]},{"pos":[305489,305501],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[305503,305564]},{"pos":[305570,305589],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[305655,305665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305667,305672]},{"content":"mode","pos":[305686,305690]},{"pos":[305699,305711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305717,305740],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[305802,305812],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[305814,305818]},{"pos":[305827,305839],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305845,305869],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[305923,305933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305935,305940]},{"pos":[305949,305961],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305967,305981],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[305983,306022]},{"pos":[306066,306076],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306078,306083]},{"pos":[306092,306104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[306106,306160]},{"pos":[306166,306184],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[306186,306231]},{"pos":[306279,306289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306291,306296]},{"pos":[306305,306317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[306319,306362]},{"pos":[306369,306376],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[306378,306439]},{"content":"Value.","pos":[306443,306449]},{"content":"Style.","pos":[306452,306458]},{"content":"0","pos":[306531,306532]},{"content":"Default.","pos":[306540,306548]},{"content":"1","pos":[306575,306576]},{"content":"The Microsoft Windows palette.","pos":[306584,306614]},{"content":"2","pos":[306619,306620]},{"content":"The true-color scheme.","pos":[306628,306650]},{"pos":[306666,306680],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[306744,306754],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306756,306761]},{"content":"mode","pos":[306775,306779]},{"pos":[306788,306800],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[306806,306824],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[306887,306897],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[306899,306903]},{"pos":[306912,306924],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[306930,306948],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[307013,307023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[307025,307030]},{"content":"mode","pos":[307044,307048]},{"pos":[307057,307069],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[307075,307097],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[307158,307168],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[307170,307174]},{"pos":[307183,307195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[307201,307224],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[307277,307287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[307289,307294]},{"pos":[307303,307315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[307321,307340],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[307389,307399],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[307401,307406]},{"pos":[307415,307427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[307433,307456],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[307458,307525]},{"pos":[307608,307618],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[307620,307625]},{"pos":[307634,307646],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[307648,307720]},{"pos":[307727,307734],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[307736,307817]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[307818,307911]},{"pos":[307917,307935],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[307937,307994]},{"pos":[308031,308043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[308045,308076]},{"pos":[308082,308120],"content":"Method containerScrollHorizontalOffset","linkify":"Method containerScrollHorizontalOffset","nodes":[{"content":"Method containerScrollHorizontalOffset","pos":[0,38]}]},{"pos":[308188,308198],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308200,308205]},{"pos":[308214,308226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[308232,308268],"content":"Method containerScrollVerticalOffset","linkify":"Method containerScrollVerticalOffset","nodes":[{"content":"Method containerScrollVerticalOffset","pos":[0,36]}]},{"pos":[308334,308344],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308346,308351]},{"pos":[308360,308372],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[308378,308403],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[308458,308468],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308470,308475]},{"pos":[308484,308496],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[308502,308534],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[308604,308614],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308616,308621]},{"pos":[308630,308642],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[308648,308671],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[308724,308734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308736,308741]},{"pos":[308750,308762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[308768,308785],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[308787,308859]},{"pos":[308910,308920],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308922,308927]},{"pos":[308936,308948],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[308950,309002]},{"pos":[309008,309028],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[309078,309088],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309090,309095]},{"pos":[309104,309116],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[309122,309137],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[309139,309220]},{"pos":[309265,309275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309277,309282]},{"pos":[309291,309303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[309305,309365]},{"pos":[309371,309385],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[309387,309438]},{"pos":[309490,309500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309502,309507]},{"pos":[309516,309528],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[309530,309578]},{"pos":[309585,309592],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[309594,309673]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[309674,309769]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[309770,309904]},{"pos":[309910,309932],"content":"Method fastTabExpanded","linkify":"Method fastTabExpanded","nodes":[{"content":"Method fastTabExpanded","pos":[0,22]}]},{"pos":[309984,309994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[309996,310001]},{"pos":[310010,310022],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[310028,310041],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[310043,310082]},{"pos":[310135,310145],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[310147,310152]},{"content":"mode","pos":[310166,310170]},{"pos":[310179,310191],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[310193,310229]},{"pos":[310236,310243],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[310245,310298]},{"content":"Calculate the height according to the following table:","pos":[310299,310353]},{"content":"Mode.","pos":[310357,310362]},{"content":"Height calculation.","pos":[310376,310395]},{"content":"-1 Exact.","pos":[310583,310592]},{"content":"The exact height in pixels of the controls is used.","pos":[310602,310653]},{"content":"0 Auto.","pos":[310696,310703]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[310715,310804]},{"content":"1 Column height.","pos":[310809,310825]},{"content":"The layout of the form determines the height of the control.","pos":[310828,310888]},{"content":"The height and height calculation mode can be set separately.","pos":[310921,310982]},{"pos":[310988,311005],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[311007,311069]},{"pos":[311116,311126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[311128,311133]},{"pos":[311142,311154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[311156,311177]},{"pos":[311184,311191],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[311193,311247]},{"content":"Mode.","pos":[311251,311256]},{"content":"Height Calculation.","pos":[311268,311287]},{"content":"Exact.","pos":[311473,311479]},{"content":"The exact height in pixels of the controls is used.","pos":[311490,311541]},{"content":"Auto.","pos":[311584,311589]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[311601,311690]},{"content":"Column height.","pos":[311695,311709]},{"content":"The layout of the form determines the height of the control.","pos":[311712,311772]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[311805,311890]},{"pos":[311896,311914],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[311916,311955]},{"pos":[312003,312013],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312015,312020]},{"pos":[312029,312041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[312043,312064]},{"pos":[312071,312078],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[312080,312170]},{"pos":[312176,312191],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[312193,312297]},{"pos":[312342,312352],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312354,312359]},{"pos":[312368,312380],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[312382,312437]},{"pos":[312444,312451],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[312453,312521]},{"content":"The help text must not exceed 250 characters.","pos":[312522,312567]},{"pos":[312573,312591],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[312647,312657],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312659,312664]},{"pos":[312673,312685],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312691,312713],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[312765,312775],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312777,312782]},{"pos":[312791,312803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312809,312842],"content":"Method horizontalScrollBarVisible","linkify":"Method horizontalScrollBarVisible","nodes":[{"content":"Method horizontalScrollBarVisible","pos":[0,33]}]},{"pos":[312913,312923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[312925,312930]},{"pos":[312939,312951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312957,312966],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[312968,313000]},{"pos":[313028,313040],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[313042,313064]},{"pos":[313070,313088],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[313090,313166]},{"pos":[313207,313219],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[313221,313295]},{"pos":[313301,313319],"content":"Method labelAction","linkify":"Method labelAction","nodes":[{"content":"Method labelAction","pos":[0,18]}]},{"pos":[313367,313377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313379,313384]},{"pos":[313393,313405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313411,313422],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[313473,313483],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313485,313490]},{"content":"mode","pos":[313504,313508]},{"pos":[313517,313529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313535,313552],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[313616,313626],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313628,313633]},{"content":"mode","pos":[313647,313651]},{"pos":[313660,313672],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313678,313699],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[313759,313769],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[313771,313775]},{"pos":[313784,313796],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313802,313824],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[313876,313886],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313888,313893]},{"pos":[313902,313914],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313920,313935],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[313980,313990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313992,313997]},{"pos":[314006,314018],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314024,314040],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[314086,314096],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314098,314103]},{"pos":[314112,314124],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314130,314148],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"content":"Moves a specified control to the control.","pos":[314150,314191]},{"pos":[314269,314279],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[314281,314290]},{"content":"insertAfterControlId","pos":[314304,314324]},{"pos":[314333,314345],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control was moved successfully; otherwise, 0.","pos":[314347,314401]},{"pos":[314408,314415],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed.","pos":[314417,314574]},{"content":"However, in some cases, such as for the reference group control instance, controls cannot be moved.","pos":[314575,314674]},{"pos":[314680,314691],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[314693,314828]},{"pos":[314869,314879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314881,314886]},{"content":"The name to assign to the control.","pos":[314889,314923]},{"pos":[314930,314942],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[314944,315008]},{"pos":[315015,315022],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[315024,315118]},{"content":"It must start with a letter.","pos":[315124,315152]},{"content":"It cannot exceed 250 characters.","pos":[315157,315189]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[315194,315248],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[315253,315293]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[315298,315408]},{"pos":[315414,315437],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[315490,315500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315502,315507]},{"pos":[315516,315528],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315534,315551],"content":"Method panelStyle","linkify":"Method panelStyle","nodes":[{"content":"Method panelStyle","pos":[0,17]}]},{"pos":[315598,315608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315610,315615]},{"pos":[315624,315636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315642,315659],"content":"Method parentPage","linkify":"Method parentPage","nodes":[{"content":"Method parentPage","pos":[0,17]}]},{"pos":[315706,315716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315718,315723]},{"pos":[315732,315744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315750,315768],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[315833,315843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315845,315850]},{"content":"mode","pos":[315864,315868]},{"pos":[315877,315889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315895,315917],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[315978,315988],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[315990,315994]},{"pos":[316003,316015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316021,316044],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[316097,316107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316109,316114]},{"pos":[316123,316135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316141,316158],"content":"Method scrollbars","linkify":"Method scrollbars","nodes":[{"content":"Method scrollbars","pos":[0,17]}]},{"pos":[316205,316215],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316217,316222]},{"pos":[316231,316243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316249,316267],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[316335,316345],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316347,316352]},{"pos":[316361,316373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316379,316390],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[316392,316519]},{"pos":[316568,316578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316580,316585]},{"content":"The value to assign to the skip property of the control; optional.","pos":[316588,316654]},{"pos":[316661,316673],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[316675,316781]},{"pos":[316787,316799],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[316841,316851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316853,316858]},{"pos":[316867,316879],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316885,316905],"content":"Method tabAppearance","linkify":"Method tabAppearance","nodes":[{"content":"Method tabAppearance","pos":[0,20]}]},{"pos":[316955,316965],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316967,316972]},{"pos":[316981,316993],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316999,317019],"content":"Method tabAutoChange","linkify":"Method tabAutoChange","nodes":[{"content":"Method tabAutoChange","pos":[0,20]}]},{"pos":[317077,317087],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317089,317094]},{"pos":[317103,317115],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317121,317131],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[317181,317191],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317193,317198]},{"content":"mode","pos":[317212,317216]},{"pos":[317225,317237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317243,317259],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[317322,317332],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317334,317339]},{"content":"mode","pos":[317353,317357]},{"pos":[317366,317378],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317384,317404],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[317463,317473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[317475,317479]},{"pos":[317488,317500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317506,317527],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[317578,317588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317590,317595]},{"pos":[317604,317616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317622,317636],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[317680,317690],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317692,317697]},{"pos":[317706,317718],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317724,317739],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[317784,317794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317796,317801]},{"pos":[317810,317822],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317828,317839],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[317880,317890],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317892,317897]},{"pos":[317906,317918],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317924,317939],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[317984,317994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317996,318001]},{"pos":[318010,318022],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318028,318047],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[318096,318106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318108,318113]},{"pos":[318122,318134],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318140,318160],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[318210,318220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318222,318227]},{"pos":[318236,318248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318254,318274],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[318332,318342],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318344,318349]},{"pos":[318358,318370],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318376,318407],"content":"Method verticalScrollBarVisible","linkify":"Method verticalScrollBarVisible","nodes":[{"content":"Method verticalScrollBarVisible","pos":[0,31]}]},{"pos":[318476,318486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318488,318493]},{"pos":[318502,318514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318520,318542],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[318611,318621],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318623,318628]},{"content":"mode","pos":[318642,318646]},{"pos":[318655,318667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318673,318699],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[318764,318774],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[318776,318780]},{"pos":[318789,318801],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318807,318834],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[318891,318901],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318903,318908]},{"pos":[318917,318929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318935,318954],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[319003,319013],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319015,319020]},{"pos":[319029,319041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319047,319061],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[319113,319123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319125,319130]},{"pos":[319139,319151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319157,319169],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[319171,319209]},{"pos":[319261,319271],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319273,319278]},{"content":"mode","pos":[319292,319296]},{"pos":[319305,319317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[319319,319354]},{"pos":[319361,319368],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[319370,319423]},{"content":"Calculate the width according to the following table:","pos":[319424,319477]},{"content":"Mode.","pos":[319481,319486]},{"content":"Width calculation.","pos":[319499,319517]},{"content":"-1 Exact.","pos":[319703,319712]},{"content":"The exact width in pixels of the controls is used.","pos":[319721,319771]},{"content":"0 Auto.","pos":[319814,319821]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[319832,319920]},{"content":"1 Column width.","pos":[319925,319940]},{"content":"The layout of the form determines the width of the control.","pos":[319943,320002]},{"content":"The width and width calculation mode can be set separately.","pos":[320035,320094]},{"pos":[320100,320116],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[320118,320180]},{"pos":[320226,320236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320238,320243]},{"pos":[320252,320264],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[320266,320327]},{"pos":[320334,320341],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[320343,320396]},{"content":"Mode.","pos":[320400,320405]},{"content":"Width Calculation.","pos":[320416,320434]},{"content":"Exact.","pos":[320618,320624]},{"content":"The exact width in pixels of the controls is used.","pos":[320634,320684]},{"content":"Auto.","pos":[320727,320732]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[320743,320831]},{"content":"Column width.","pos":[320836,320849]},{"content":"The layout of the form determines the width of the control.","pos":[320852,320911]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[320944,321027]},{"pos":[321033,321050],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[321052,321090]},{"pos":[321137,321147],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321149,321154]},{"pos":[321163,321175],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[321177,321212]},{"pos":[321219,321226],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[321228,321301]},{"pos":[321307,321336],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[321454,321464],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[321466,321482]},{"content":"objectMethodToCall","pos":[321496,321514]},{"content":"overrideObject","pos":[321528,321542]},{"pos":[321549,321575],"content":"Class FormBuildTimeControl","linkify":"Class FormBuildTimeControl","nodes":[{"content":"Class FormBuildTimeControl","pos":[0,26]}]},{"content":"The FormBuildTimeControl class lets you create, read, update, and delete X++ code and metadata.","pos":[321633,321728]},{"pos":[321734,321741],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[321743,321853]},{"pos":[321859,321867],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[321873,321880],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[321884,321890]},{"content":"Description","pos":[321994,322005]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[322384,322430],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[322494,322534]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[322634,322669],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[322884,322927],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[322994,323061]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[323134,323170],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[323384,323433],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[323494,323592]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[323634,323675],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[323744,323793]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[323884,323919],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[323994,324055]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[324134,324164],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[324244,324319]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[324384,324416],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[324494,324550]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[324634,324675],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[324884,324922],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[324994,325037]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[325134,325171],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[325244,325289]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[325384,325456],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[325494,325561]},{"content":"public int containerId()","pos":[325634,325658]},{"content":"Retrieves the ID of the parent container for the control.","pos":[325744,325801]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[325884,325928],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[326134,326193],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[326384,326427],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[326634,326670],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[326884,326926],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[327134,327174],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[327244,327316]},{"content":"public int direction(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[327384,327419],"source":"public int direction(\\[int value\\])"},{"content":"public int displayHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[327634,327692],"source":"public int displayHeight(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayHeightMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[327884,327936],"source":"public AutoMode displayHeightMode(\\[AutoMode mode\\])"},{"content":"public int displayHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[328134,328178],"source":"public int displayHeightValue(\\[int value\\])"},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[328384,328442],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[328634,328686],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[328884,328928],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[329134,329173],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[329384,329418],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[329494,329575]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[329634,329675],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[329744,329795]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[329884,329948],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[330134,330174],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[330384,330414],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[330494,330551]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[330634,330668],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[330744,330801]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[330884,330925],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[330994,331045]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[331134,331176],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[331244,331283]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[331384,331420],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[331494,331556]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[331634,331671],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[331744,331783]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[331884,331918],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[331994,332098]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[332134,332175],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[332384,332399]},{"content":"Retrieves the ID of the control.","pos":[332494,332526]},{"content":"public int iMEMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[332634,332667],"source":"public int iMEMode(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[332884,332912]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[332994,333070]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[333134,333174],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[333384,333415],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[333494,333531]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[333634,333674],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[333884,333919],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[334134,334177],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[334384,334419],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[334634,334673],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[334884,334930],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[335134,335170],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[335384,335431],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[335634,335675],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[335884,335926],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[336134,336179],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[336384,336423],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[336634,336682],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[336884,336930],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[337134,337174],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[337384,337425],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[337634,337674],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[337884,337918],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[338134,338169],"source":"public int leftValue(\\[int value\\])"},{"content":"public int limitText(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[338384,338438],"source":"public int limitText(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode limitTextMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[338634,338682],"source":"public AutoMode limitTextMode(\\[AutoMode mode\\])"},{"content":"public int limitTextValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[338884,338924],"source":"public int limitTextValue(\\[int value\\])"},{"content":"public int lookupButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[339134,339172],"source":"public int lookupButton(\\[int value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[339384,339427],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[339634,339664],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[339744,339879]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[339884,339926],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[340134,340170],"source":"public int promptrect(\\[int value\\])"},{"content":"public boolean replaceOnLookup(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[340384,340433],"source":"public boolean replaceOnLookup(\\[boolean value\\])"},{"content":"public int searchAfterInput(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[340634,340676],"source":"public int searchAfterInput(\\[int value\\])"},{"content":"public int searchMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[340884,340920],"source":"public int searchMode(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[341134,341191],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[341384,341427],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[341634,341672],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[341744,341871]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[341884,341915],"source":"public int style(\\[int value\\])"},{"content":"public int timeFormat(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[342134,342170],"source":"public int timeFormat(\\[int value\\])"},{"content":"public int timeHours(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[342384,342419],"source":"public int timeHours(\\[int value\\])"},{"content":"public int timeMinute(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[342634,342670],"source":"public int timeMinute(\\[int value\\])"},{"content":"public int timeSeconds(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[342884,342921],"source":"public int timeSeconds(\\[int value\\])"},{"content":"public int timeSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[343134,343173],"source":"public int timeSeparator(\\[int value\\])"},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[343384,343423],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[343634,343667],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[343884,343918],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[344134,344164],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[344384,344427],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[344494,344561]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[344634,344668],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[344884,344922],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[345134,345173],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int value(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[345384,345415],"source":"public int value(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[345634,345694],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[345884,345938],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[346134,346180],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[346384,346422],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[346634,346675],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[346884,346925],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[346994,347032]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[347134,347169],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[347244,347306]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[347384,347420],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[347494,347532]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[347634,347741],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[347887,347906],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[347908,347948]},{"pos":[348005,348015],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[348017,348022]},{"pos":[348031,348043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[348045,348101]},{"pos":[348108,348115],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[348117,348196]},{"pos":[348202,348218],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[348264,348274],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[348276,348281]},{"pos":[348290,348302],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[348308,348324],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[348326,348393]},{"pos":[348447,348457],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[348459,348464]},{"pos":[348473,348485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[348487,348539]},{"pos":[348546,348553],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[348555,348677]},{"pos":[348683,348700],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[348747,348757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[348759,348764]},{"pos":[348773,348785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[348791,348813],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[348815,348913]},{"pos":[348973,348983],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[348985,348990]},{"pos":[348999,349011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[349013,349092]},{"pos":[349099,349106],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[349108,349145]},{"pos":[349151,349173],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[349175,349224]},{"pos":[349276,349286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[349288,349293]},{"pos":[349302,349314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[349316,349360]},{"pos":[349367,349374],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[349376,349444]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[349450,349520]},{"content":"The second byte contains a value for green.","pos":[349525,349568]},{"content":"The third byte contains a value for blue.","pos":[349573,349614]},{"content":"The high-order byte must be zero.","pos":[349619,349652]},{"content":"The maximum value for a single byte is 255.","pos":[349657,349700]},{"pos":[349706,349722],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[349724,349785]},{"pos":[349831,349841],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[349843,349848]},{"pos":[349857,349869],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[349871,349932]},{"pos":[349938,349949],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[349951,350026]},{"pos":[350067,350077],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[350079,350084]},{"pos":[350093,350105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[350107,350157]},{"pos":[350164,350171],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[350173,350245]},{"content":"0 Use the default font weight.","pos":[350251,350281]},{"content":"1 Thin.","pos":[350286,350293]},{"content":"2 Extra-light.","pos":[350298,350312]},{"content":"3 Light.","pos":[350317,350325]},{"content":"4 Normal.","pos":[350330,350339]},{"content":"5 Medium.","pos":[350344,350353]},{"content":"6 Semibold.","pos":[350358,350369]},{"content":"7 Bold.","pos":[350374,350381]},{"content":"8 Extra-bold.","pos":[350386,350399]},{"content":"9 Heavy.","pos":[350404,350412]},{"pos":[350418,350431],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[350433,350489]},{"pos":[350532,350542],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[350544,350549]},{"pos":[350558,350570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[350572,350616]},{"pos":[350623,350630],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[350632,350724]},{"content":"Value.","pos":[350728,350734]},{"content":"Description.","pos":[350737,350749]},{"content":"0","pos":[350780,350781]},{"content":"Auto.","pos":[350789,350794]},{"content":"1","pos":[350806,350807]},{"content":"3D.","pos":[350815,350818]},{"content":"2","pos":[350832,350833]},{"content":"Single line.","pos":[350841,350853]},{"content":"3","pos":[350858,350859]},{"content":"Flat.","pos":[350867,350872]},{"content":"4","pos":[350884,350885]},{"content":"None.","pos":[350893,350898]},{"pos":[350913,350935],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[350987,350997],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[350999,351004]},{"pos":[351013,351025],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[351031,351050],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[351052,351095]},{"pos":[351144,351154],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[351156,351161]},{"pos":[351170,351182],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[351184,351246]},{"pos":[351253,351260],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[351262,351366]},{"content":"Value.","pos":[351370,351376]},{"content":"Description.","pos":[351379,351391]},{"content":"0","pos":[351438,351439]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351447,351460],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[351472,351473]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351481,351497],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[351506,351507]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351515,351530],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[351540,351542]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351549,351561],"source":"MAC\\_CHARSET"},{"content":"128","pos":[351574,351577]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351583,351600],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[351608,351611]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351617,351632],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[351642,351645]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351651,351666],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[351676,351679]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351685,351705],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[351710,351713]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351719,351733],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[351744,351747]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351753,351769],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[351778,351781]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351787,351806],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[351812,351815]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351821,351836],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[351846,351849]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351855,351871],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[351880,351883]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351889,351908],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[351914,351917]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[351923,351935],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of Microsoft Windows.","pos":[351947,352036]},{"content":"Value.","pos":[352040,352046]},{"content":"Description.","pos":[352049,352061]},{"content":"130","pos":[352096,352099]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[352105,352119],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Microsoft Windows.","pos":[352123,352219]},{"content":"Value.","pos":[352223,352229]},{"content":"Description.","pos":[352232,352244]},{"content":"177","pos":[352281,352284]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[352290,352305],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[352310,352313]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[352319,352334],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Microsoft Windows.","pos":[352338,352425]},{"content":"Value.","pos":[352429,352435]},{"content":"Description.","pos":[352438,352450]},{"content":"222","pos":[352483,352486]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[352492,352505],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[352509,352593]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[352594,352685],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[352686,352801]},{"pos":[352807,352825],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[352827,352872]},{"pos":[352920,352930],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[352932,352937]},{"pos":[352946,352958],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[352960,353003]},{"pos":[353010,353017],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[353019,353080]},{"content":"Value.","pos":[353084,353090]},{"content":"Style.","pos":[353093,353099]},{"content":"0","pos":[353172,353173]},{"content":"Default.","pos":[353181,353189]},{"content":"1","pos":[353216,353217]},{"content":"The Microsoft Windows palette.","pos":[353225,353255]},{"content":"2","pos":[353260,353261]},{"content":"The true-color scheme.","pos":[353269,353291]},{"pos":[353307,353330],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[353332,353399]},{"pos":[353482,353492],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[353494,353499]},{"pos":[353508,353520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[353522,353594]},{"pos":[353601,353608],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[353610,353691]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[353692,353785]},{"pos":[353791,353809],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[353811,353868]},{"pos":[353905,353917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[353919,353950]},{"pos":[353956,353981],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[354036,354046],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354048,354053]},{"pos":[354062,354074],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354080,354112],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[354182,354192],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354194,354199]},{"pos":[354208,354220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354226,354242],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[354296,354306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354308,354313]},{"pos":[354322,354334],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354340,354357],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[354404,354414],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354416,354421]},{"pos":[354430,354442],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354448,354471],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[354524,354534],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354536,354541]},{"pos":[354550,354562],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354568,354585],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[354587,354659]},{"pos":[354710,354720],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354722,354727]},{"pos":[354736,354748],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[354750,354802]},{"pos":[354808,354824],"content":"Method direction","linkify":"Method direction","nodes":[{"content":"Method direction","pos":[0,16]}]},{"pos":[354870,354880],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[354882,354887]},{"pos":[354896,354908],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[354914,354934],"content":"Method displayHeight","linkify":"Method displayHeight","nodes":[{"content":"Method displayHeight","pos":[0,20]}]},{"pos":[355001,355011],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355013,355018]},{"content":"mode","pos":[355032,355036]},{"pos":[355045,355057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355063,355087],"content":"Method displayHeightMode","linkify":"Method displayHeightMode","nodes":[{"content":"Method displayHeightMode","pos":[0,24]}]},{"pos":[355150,355160],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[355162,355166]},{"pos":[355175,355187],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355193,355218],"content":"Method displayHeightValue","linkify":"Method displayHeightValue","nodes":[{"content":"Method displayHeightValue","pos":[0,25]}]},{"pos":[355273,355283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355285,355290]},{"pos":[355299,355311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355317,355337],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[355404,355414],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355416,355421]},{"content":"mode","pos":[355435,355439]},{"pos":[355448,355460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355466,355490],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[355553,355563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[355565,355569]},{"pos":[355578,355590],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355596,355621],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[355676,355686],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355688,355693]},{"pos":[355702,355714],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355720,355740],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[355790,355800],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355802,355807]},{"pos":[355816,355828],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[355834,355849],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[355851,355932]},{"pos":[355977,355987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[355989,355994]},{"pos":[356003,356015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[356017,356077]},{"pos":[356083,356097],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[356099,356150]},{"pos":[356202,356212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356214,356219]},{"pos":[356228,356240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[356242,356290]},{"pos":[356297,356304],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[356306,356385]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[356386,356481]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[356482,356616]},{"pos":[356622,356645],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[356720,356730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356732,356737]},{"pos":[356746,356758],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[356764,356785],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[356836,356846],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[356848,356853]},{"pos":[356862,356874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[356880,356891],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[356893,356950]},{"pos":[356991,357001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357003,357008]},{"pos":[357017,357029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[357031,357086]},{"pos":[357092,357107],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[357109,357166]},{"pos":[357211,357221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357223,357228]},{"pos":[357237,357249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[357251,357284]},{"pos":[357290,357312],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[357314,357365]},{"pos":[357417,357427],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357429,357434]},{"pos":[357443,357455],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[357457,357501]},{"pos":[357508,357515],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[357517,357585]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[357591,357661]},{"content":"The second byte contains a value for green.","pos":[357666,357709]},{"content":"The third byte contains a value for blue.","pos":[357714,357755]},{"content":"The high-order byte must be zero.","pos":[357760,357793]},{"content":"The maximum value for a single byte is 255.","pos":[357798,357841]},{"pos":[357847,357860],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[357862,357901]},{"pos":[357954,357964],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[357966,357971]},{"content":"mode","pos":[357985,357989]},{"pos":[357998,358010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[358012,358048]},{"pos":[358055,358062],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[358064,358117]},{"content":"Calculate the height according to the following table:","pos":[358118,358172]},{"content":"Mode.","pos":[358176,358181]},{"content":"Height calculation.","pos":[358195,358214]},{"content":"-1 Exact.","pos":[358402,358411]},{"content":"The exact height in pixels of the controls is used.","pos":[358421,358472]},{"content":"0 Auto.","pos":[358515,358522]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[358534,358623]},{"content":"1 Column height.","pos":[358628,358644]},{"content":"The layout of the form determines the height of the control.","pos":[358647,358707]},{"content":"The height and height calculation mode can be set separately.","pos":[358740,358801]},{"pos":[358807,358824],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[358826,358888]},{"pos":[358935,358945],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[358947,358952]},{"pos":[358961,358973],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[358975,358996]},{"pos":[359003,359010],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[359012,359066]},{"content":"Mode.","pos":[359070,359075]},{"content":"Height Calculation.","pos":[359087,359106]},{"content":"Exact.","pos":[359292,359298]},{"content":"The exact height in pixels of the controls is used.","pos":[359309,359360]},{"content":"Auto.","pos":[359403,359408]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[359420,359509]},{"content":"Column height.","pos":[359514,359528]},{"content":"The layout of the form determines the height of the control.","pos":[359531,359591]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[359624,359709]},{"pos":[359715,359733],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[359735,359774]},{"pos":[359822,359832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[359834,359839]},{"pos":[359848,359860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[359862,359883]},{"pos":[359890,359897],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[359899,359989]},{"pos":[359995,360010],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[360012,360116]},{"pos":[360161,360171],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[360173,360178]},{"pos":[360187,360199],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[360201,360256]},{"pos":[360263,360270],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[360272,360340]},{"content":"The help text must not exceed 250 characters.","pos":[360341,360386]},{"pos":[360392,360414],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[360466,360476],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[360478,360483]},{"pos":[360492,360504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[360510,360519],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[360521,360553]},{"pos":[360581,360593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[360595,360617]},{"pos":[360623,360637],"content":"Method iMEMode","linkify":"Method iMEMode","nodes":[{"content":"Method iMEMode","pos":[0,14]}]},{"pos":[360681,360691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[360693,360698]},{"pos":[360707,360719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[360725,360743],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[360745,360821]},{"pos":[360862,360874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[360876,360950]},{"pos":[360956,360969],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[361020,361030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361032,361037]},{"pos":[361046,361058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361064,361076],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[361078,361115]},{"pos":[361157,361167],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361169,361174]},{"pos":[361183,361195],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[361197,361235]},{"pos":[361242,361249],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[361251,361329]},{"content":"The label property value cannot exceed 250 characters.","pos":[361330,361384]},{"pos":[361390,361411],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[361462,361472],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361474,361479]},{"pos":[361488,361500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361506,361522],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[361568,361578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361580,361585]},{"pos":[361594,361606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361612,361636],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[361690,361700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361702,361707]},{"pos":[361716,361728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361734,361750],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[361796,361806],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361808,361813]},{"pos":[361822,361834],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361840,361860],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[361910,361920],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[361922,361927]},{"pos":[361936,361948],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[361954,361981],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[362038,362048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362050,362055]},{"pos":[362064,362076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362082,362099],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[362146,362156],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362158,362163]},{"pos":[362172,362184],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362190,362208],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[362266,362276],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362278,362283]},{"content":"mode","pos":[362297,362301]},{"pos":[362310,362322],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362328,362350],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[362402,362412],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362414,362419]},{"pos":[362428,362440],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362446,362469],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[362522,362532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362534,362539]},{"pos":[362548,362560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362566,362584],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[362640,362650],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362652,362657]},{"pos":[362666,362678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362684,362704],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[362754,362764],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362766,362771]},{"pos":[362780,362792],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362798,362819],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[362878,362888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[362890,362895]},{"pos":[362904,362916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[362922,362939],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[362996,363006],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363008,363013]},{"content":"mode","pos":[363027,363031]},{"pos":[363040,363052],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363058,363079],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[363130,363140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363142,363147]},{"pos":[363156,363168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363174,363196],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[363248,363258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363260,363265]},{"pos":[363274,363286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363292,363303],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[363354,363364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363366,363371]},{"content":"mode","pos":[363385,363389]},{"pos":[363398,363410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363416,363431],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[363476,363486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363488,363493]},{"pos":[363502,363514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363520,363536],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[363582,363592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363594,363599]},{"pos":[363608,363620],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363626,363642],"content":"Method limitText","linkify":"Method limitText","nodes":[{"content":"Method limitText","pos":[0,16]}]},{"pos":[363705,363715],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363717,363722]},{"content":"mode","pos":[363736,363740]},{"pos":[363749,363761],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363767,363787],"content":"Method limitTextMode","linkify":"Method limitTextMode","nodes":[{"content":"Method limitTextMode","pos":[0,20]}]},{"pos":[363846,363856],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[363858,363862]},{"pos":[363871,363883],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[363889,363910],"content":"Method limitTextValue","linkify":"Method limitTextValue","nodes":[{"content":"Method limitTextValue","pos":[0,21]}]},{"pos":[363961,363971],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[363973,363978]},{"pos":[363987,363999],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[364005,364024],"content":"Method lookupButton","linkify":"Method lookupButton","nodes":[{"content":"Method lookupButton","pos":[0,19]}]},{"pos":[364073,364083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364085,364090]},{"pos":[364099,364111],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[364117,364133],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[364187,364197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364199,364204]},{"pos":[364213,364225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[364231,364242],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[364244,364379]},{"pos":[364420,364430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[364432,364437]},{"content":"The name to assign to the control.","pos":[364440,364474]},{"pos":[364481,364493],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[364495,364559]},{"pos":[364566,364573],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[364575,364669]},{"content":"It must start with a letter.","pos":[364675,364703]},{"content":"It cannot exceed 250 characters.","pos":[364708,364740]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[364745,364799],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[364804,364844]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[364849,364959]},{"pos":[364965,364988],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[365041,365051],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365053,365058]},{"pos":[365067,365079],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365085,365102],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[365149,365159],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365161,365166]},{"pos":[365175,365187],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365193,365215],"content":"Method replaceOnLookup","linkify":"Method replaceOnLookup","nodes":[{"content":"Method replaceOnLookup","pos":[0,22]}]},{"pos":[365275,365285],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365287,365292]},{"pos":[365301,365313],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365319,365342],"content":"Method searchAfterInput","linkify":"Method searchAfterInput","nodes":[{"content":"Method searchAfterInput","pos":[0,23]}]},{"pos":[365395,365405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365407,365412]},{"pos":[365421,365433],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365439,365456],"content":"Method searchMode","linkify":"Method searchMode","nodes":[{"content":"Method searchMode","pos":[0,17]}]},{"pos":[365503,365513],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365515,365520]},{"pos":[365529,365541],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365547,365565],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[365633,365643],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365645,365650]},{"pos":[365659,365671],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365677,365693],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[365747,365757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365759,365764]},{"pos":[365773,365785],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[365791,365802],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[365804,365931]},{"pos":[365980,365990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[365992,365997]},{"content":"The value to assign to the skip property of the control.","pos":[366000,366056]},{"pos":[366063,366075],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[366077,366183]},{"pos":[366189,366201],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[366243,366253],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366255,366260]},{"pos":[366269,366281],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366287,366304],"content":"Method timeFormat","linkify":"Method timeFormat","nodes":[{"content":"Method timeFormat","pos":[0,17]}]},{"pos":[366351,366361],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366363,366368]},{"pos":[366377,366389],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366395,366411],"content":"Method timeHours","linkify":"Method timeHours","nodes":[{"content":"Method timeHours","pos":[0,16]}]},{"pos":[366457,366467],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366469,366474]},{"pos":[366483,366495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366501,366518],"content":"Method timeMinute","linkify":"Method timeMinute","nodes":[{"content":"Method timeMinute","pos":[0,17]}]},{"pos":[366565,366575],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366577,366582]},{"pos":[366591,366603],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366609,366627],"content":"Method timeSeconds","linkify":"Method timeSeconds","nodes":[{"content":"Method timeSeconds","pos":[0,18]}]},{"pos":[366675,366685],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366687,366692]},{"pos":[366701,366713],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366719,366739],"content":"Method timeSeparator","linkify":"Method timeSeparator","nodes":[{"content":"Method timeSeparator","pos":[0,20]}]},{"pos":[366789,366799],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366801,366806]},{"pos":[366815,366827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366833,366843],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[366893,366903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[366905,366910]},{"content":"mode","pos":[366924,366928]},{"pos":[366937,366949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[366955,366969],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[367013,367023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367025,367030]},{"pos":[367039,367051],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367057,367072],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[367117,367127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367129,367134]},{"pos":[367143,367155],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367161,367172],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[367213,367223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367225,367230]},{"pos":[367239,367251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367257,367273],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[367275,367342]},{"pos":[367396,367406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367408,367413]},{"content":"The value to assign to the underline property of the control; optional.","pos":[367416,367487]},{"pos":[367494,367506],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[367508,367572]},{"pos":[367578,367593],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[367638,367648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367650,367655]},{"pos":[367664,367676],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367682,367701],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[367750,367760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367762,367767]},{"pos":[367776,367788],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367794,367814],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[367864,367874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367876,367881]},{"pos":[367890,367902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[367908,367920],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[367962,367972],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367974,367979]},{"pos":[367988,368000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368006,368028],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[368097,368107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368109,368114]},{"content":"mode","pos":[368128,368132]},{"pos":[368141,368153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368159,368185],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[368250,368260],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[368262,368266]},{"pos":[368275,368287],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368293,368320],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[368377,368387],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368389,368394]},{"pos":[368403,368415],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368421,368440],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[368489,368499],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368501,368506]},{"pos":[368515,368527],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368533,368547],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[368599,368609],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368611,368616]},{"pos":[368625,368637],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[368643,368655],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[368657,368695]},{"pos":[368747,368757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368759,368764]},{"content":"mode","pos":[368778,368782]},{"pos":[368791,368803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[368805,368840]},{"pos":[368847,368854],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[368856,368909]},{"content":"Calculate the width according to the following table:","pos":[368910,368963]},{"content":"Mode.","pos":[368967,368972]},{"content":"Width calculation.","pos":[368985,369003]},{"content":"-1 Exact.","pos":[369189,369198]},{"content":"The exact width in pixels of the controls is used.","pos":[369207,369257]},{"content":"0 Auto.","pos":[369300,369307]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[369318,369406]},{"content":"1 Column width.","pos":[369411,369426]},{"content":"The layout of the form determines the width of the control.","pos":[369429,369488]},{"content":"The width and width calculation mode can be set separately.","pos":[369521,369580]},{"pos":[369586,369602],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[369604,369666]},{"pos":[369712,369722],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[369724,369729]},{"pos":[369738,369750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[369752,369813]},{"pos":[369820,369827],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[369829,369882]},{"content":"Mode.","pos":[369886,369891]},{"content":"Width Calculation.","pos":[369902,369920]},{"content":"Exact.","pos":[370104,370110]},{"content":"The exact width in pixels of the controls is used.","pos":[370120,370170]},{"content":"Auto.","pos":[370213,370218]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[370229,370317]},{"content":"Column width.","pos":[370322,370335]},{"content":"The layout of the form determines the width of the control.","pos":[370338,370397]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[370430,370513]},{"pos":[370519,370536],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[370538,370576]},{"pos":[370623,370633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370635,370640]},{"pos":[370649,370661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[370663,370698]},{"pos":[370705,370712],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[370714,370787]},{"pos":[370793,370822],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[370940,370950],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[370952,370968]},{"content":"objectMethodToCall","pos":[370982,371000]},{"content":"overrideObject","pos":[371014,371028]},{"pos":[371035,371061],"content":"Class FormBuildTreeControl","linkify":"Class FormBuildTreeControl","nodes":[{"content":"Class FormBuildTreeControl","pos":[0,26]}]},{"content":"The FormBuildTreeControl class lets you create, read, update, and delete X++ code and metadata.","pos":[371119,371214]},{"pos":[371220,371227],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[371229,371339]},{"pos":[371345,371353],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[371359,371366],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[371370,371376]},{"content":"Description","pos":[371480,371491]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[371870,371916],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[371980,372020]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[372120,372163],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[372230,372297]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[372370,372419],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[372480,372578]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[372620,372661],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[372730,372779]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[372870,372905],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[372980,373041]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[373120,373150],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[373230,373305]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[373370,373402],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[373480,373536]},{"content":"public boolean canScroll(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[373620,373663],"source":"public boolean canScroll(\\[boolean value\\])"},{"content":"public boolean cascadeSelect(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[373870,373917],"source":"public boolean cascadeSelect(\\[boolean value\\])"},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[374120,374158],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[374230,374273]},{"content":"public boolean checkBox(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[374370,374412],"source":"public boolean checkBox(\\[boolean value\\])"},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[374620,374657],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[374730,374775]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[374870,374942],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[374980,375047]},{"content":"public int containerId()","pos":[375120,375144]},{"content":"Retrieves the ID of the parent container for the control.","pos":[375230,375287]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[375370,375414],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[375620,375662],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[375870,375909],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[376120,376154],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[376230,376311]},{"content":"public boolean editLabels(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[376370,376414],"source":"public boolean editLabels(\\[boolean value\\])"},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[376620,376661],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[376730,376781]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[376870,376900],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[376980,377037]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[377120,377154],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[377230,377287]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[377370,377411],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[377480,377531]},{"content":"public boolean hasButtons(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[377620,377664],"source":"public boolean hasButtons(\\[boolean value\\])"},{"content":"public boolean hasLines(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[377870,377912],"source":"public boolean hasLines(\\[boolean value\\])"},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[378120,378162],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[378230,378269]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[378370,378406],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[378480,378542]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[378620,378657],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[378730,378769]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[378870,378904],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[378980,379084]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[379120,379161],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[379370,379385]},{"content":"Retrieves the ID of the control.","pos":[379480,379512]},{"content":"public boolean isContainer()","pos":[379620,379648]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[379730,379806]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[379870,379910],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[380120,380160],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[380370,380404],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[380620,380655],"source":"public int leftValue(\\[int value\\])"},{"content":"public boolean linesAtRoot(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[380870,380915],"source":"public boolean linesAtRoot(\\[boolean value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[381120,381150],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[381230,381365]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[381370,381412],"source":"public int neededPermission(\\[int value\\])"},{"content":"public boolean rowSelect(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[381620,381663],"source":"public boolean rowSelect(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[381870,381927],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean showSelAlways(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[382120,382167],"source":"public boolean showSelAlways(\\[boolean value\\])"},{"content":"public boolean singleSelection(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[382370,382419],"source":"public boolean singleSelection(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[382620,382658],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[382730,382857]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[382870,382909],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[383120,383153],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[383370,383404],"source":"public int topValue(\\[int value\\])"},{"content":"public boolean trackSelect(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[383620,383665],"source":"public boolean trackSelect(\\[boolean value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[383870,383900],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[384120,384163],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[384230,384297]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[384370,384404],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[384620,384658],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[384870,384909],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[385120,385180],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[385370,385424],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[385620,385666],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[385870,385911],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[386120,386161],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[386230,386268]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[386370,386405],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[386480,386542]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[386620,386656],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[386730,386768]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[386870,386977],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[387123,387142],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[387144,387184]},{"pos":[387241,387251],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[387253,387258]},{"pos":[387267,387279],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[387281,387337]},{"pos":[387344,387351],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[387353,387432]},{"pos":[387438,387454],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[387456,387523]},{"pos":[387577,387587],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[387589,387594]},{"pos":[387603,387615],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[387617,387669]},{"pos":[387676,387683],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[387685,387807]},{"pos":[387813,387835],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[387837,387935]},{"pos":[387995,388005],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[388007,388012]},{"pos":[388021,388033],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[388035,388114]},{"pos":[388121,388128],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[388130,388167]},{"pos":[388173,388195],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[388197,388246]},{"pos":[388298,388308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[388310,388315]},{"pos":[388324,388336],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[388338,388382]},{"pos":[388389,388396],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[388398,388466]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[388472,388542]},{"content":"The second byte contains a value for green.","pos":[388547,388590]},{"content":"The third byte contains a value for blue.","pos":[388595,388636]},{"content":"The high-order byte must be zero.","pos":[388641,388674]},{"content":"The maximum value for a single byte is 255.","pos":[388679,388722]},{"pos":[388728,388744],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[388746,388807]},{"pos":[388853,388863],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[388865,388870]},{"pos":[388879,388891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[388893,388954]},{"pos":[388960,388971],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[388973,389048]},{"pos":[389089,389099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[389101,389106]},{"pos":[389115,389127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[389129,389179]},{"pos":[389186,389193],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[389195,389267]},{"content":"0 Use the default font weight.","pos":[389273,389303]},{"content":"1 Thin.","pos":[389308,389315]},{"content":"2 Extra-light.","pos":[389320,389334]},{"content":"3 Light.","pos":[389339,389347]},{"content":"4 Normal.","pos":[389352,389361]},{"content":"5 Medium.","pos":[389366,389375]},{"content":"6 Semibold.","pos":[389380,389391]},{"content":"7 Bold.","pos":[389396,389403]},{"content":"8 Extra-bold.","pos":[389408,389421]},{"content":"9 Heavy.","pos":[389426,389434]},{"pos":[389440,389453],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[389455,389511]},{"pos":[389554,389564],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[389566,389571]},{"pos":[389580,389592],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[389594,389638]},{"pos":[389645,389652],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[389654,389746]},{"content":"Value.","pos":[389750,389756]},{"content":"Description.","pos":[389759,389771]},{"content":"0","pos":[389802,389803]},{"content":"Auto.","pos":[389811,389816]},{"content":"1","pos":[389828,389829]},{"content":"3D.","pos":[389837,389840]},{"content":"2","pos":[389854,389855]},{"content":"Single line.","pos":[389863,389875]},{"content":"3","pos":[389880,389881]},{"content":"Flat.","pos":[389889,389894]},{"content":"4","pos":[389906,389907]},{"content":"None.","pos":[389915,389920]},{"pos":[389935,389951],"content":"Method canScroll","linkify":"Method canScroll","nodes":[{"content":"Method canScroll","pos":[0,16]}]},{"pos":[390005,390015],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[390017,390022]},{"pos":[390031,390043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390049,390069],"content":"Method cascadeSelect","linkify":"Method cascadeSelect","nodes":[{"content":"Method cascadeSelect","pos":[0,20]}]},{"pos":[390127,390137],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[390139,390144]},{"pos":[390153,390165],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[390171,390190],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[390192,390235]},{"pos":[390284,390294],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[390296,390301]},{"pos":[390310,390322],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[390324,390386]},{"pos":[390393,390400],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[390402,390506]},{"content":"Value.","pos":[390510,390516]},{"content":"Description.","pos":[390519,390531]},{"content":"0","pos":[390578,390579]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[390587,390600],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[390612,390613]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[390621,390637],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[390646,390647]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[390655,390670],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[390680,390682]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[390689,390701],"source":"MAC\\_CHARSET"},{"content":"128","pos":[390714,390717]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[390723,390740],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[390748,390751]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[390757,390772],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[390782,390785]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[390791,390806],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[390816,390819]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[390825,390845],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[390850,390853]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[390859,390873],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[390884,390887]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[390893,390909],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[390918,390921]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[390927,390946],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[390952,390955]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[390961,390976],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[390986,390989]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[390995,391011],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[391020,391023]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[391029,391048],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[391054,391057]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[391063,391075],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of Microsoft Windows.","pos":[391087,391176]},{"content":"Value.","pos":[391180,391186]},{"content":"Description.","pos":[391189,391201]},{"content":"130","pos":[391236,391239]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[391245,391259],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Microsoft Windows.","pos":[391263,391359]},{"content":"Value.","pos":[391363,391369]},{"content":"Description.","pos":[391372,391384]},{"content":"177","pos":[391421,391424]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[391430,391445],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[391450,391453]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[391459,391474],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Microsoft Windows.","pos":[391478,391565]},{"content":"Value.","pos":[391569,391575]},{"content":"Description.","pos":[391578,391590]},{"content":"222","pos":[391623,391626]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[391632,391645],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a values that are based on the current system locale.","pos":[391649,391738]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[391739,391830],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[391831,391946]},{"pos":[391952,391967],"content":"Method checkBox","linkify":"Method checkBox","nodes":[{"content":"Method checkBox","pos":[0,15]}]},{"pos":[392020,392030],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[392032,392037]},{"pos":[392046,392058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[392064,392082],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[392084,392129]},{"pos":[392177,392187],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[392189,392194]},{"pos":[392203,392215],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[392217,392260]},{"pos":[392267,392274],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[392276,392337]},{"content":"Value.","pos":[392341,392347]},{"content":"Style.","pos":[392350,392356]},{"content":"0","pos":[392429,392430]},{"content":"Default.","pos":[392438,392446]},{"content":"1","pos":[392473,392474]},{"content":"The Microsoft Windows palette.","pos":[392482,392512]},{"content":"2","pos":[392517,392518]},{"content":"The true-color scheme.","pos":[392526,392548]},{"pos":[392564,392587],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[392589,392656]},{"pos":[392739,392749],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[392751,392756]},{"pos":[392765,392777],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[392779,392851]},{"pos":[392858,392865],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[392867,392948]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[392949,393042]},{"pos":[393048,393066],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[393068,393125]},{"pos":[393162,393174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[393176,393207]},{"pos":[393213,393238],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[393293,393303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393305,393310]},{"pos":[393319,393331],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[393337,393360],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[393413,393423],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393425,393430]},{"pos":[393439,393451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[393457,393477],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[393527,393537],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393539,393544]},{"pos":[393553,393565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[393571,393586],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[393588,393669]},{"pos":[393714,393724],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393726,393731]},{"pos":[393740,393752],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[393754,393814]},{"pos":[393820,393837],"content":"Method editLabels","linkify":"Method editLabels","nodes":[{"content":"Method editLabels","pos":[0,17]}]},{"pos":[393892,393902],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[393904,393909]},{"pos":[393918,393930],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[393936,393950],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[393952,394003]},{"pos":[394055,394065],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[394067,394072]},{"pos":[394081,394093],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[394095,394143]},{"pos":[394150,394157],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[394159,394238]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[394239,394334]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[394335,394469]},{"pos":[394475,394486],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[394488,394545]},{"pos":[394586,394596],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[394598,394603]},{"pos":[394612,394624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[394626,394681]},{"pos":[394687,394702],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[394704,394761]},{"pos":[394806,394816],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[394818,394823]},{"pos":[394832,394844],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[394846,394879]},{"pos":[394885,394907],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[394909,394960]},{"pos":[395012,395022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[395024,395029]},{"pos":[395038,395050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[395052,395096]},{"pos":[395103,395110],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[395112,395180]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[395186,395256]},{"content":"The second byte contains a value for green.","pos":[395261,395304]},{"content":"The third byte contains a value for blue.","pos":[395309,395350]},{"content":"The high-order byte must be zero.","pos":[395355,395388]},{"content":"The maximum value for a single byte is 255.","pos":[395393,395436]},{"pos":[395442,395459],"content":"Method hasButtons","linkify":"Method hasButtons","nodes":[{"content":"Method hasButtons","pos":[0,17]}]},{"pos":[395514,395524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[395526,395531]},{"pos":[395540,395552],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[395558,395573],"content":"Method hasLines","linkify":"Method hasLines","nodes":[{"content":"Method hasLines","pos":[0,15]}]},{"pos":[395626,395636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[395638,395643]},{"pos":[395652,395664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[395670,395683],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[395685,395724]},{"pos":[395777,395787],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[395789,395794]},{"content":"mode","pos":[395808,395812]},{"pos":[395821,395833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[395835,395871]},{"pos":[395878,395885],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[395887,395940]},{"content":"Calculate the height according to the following table:","pos":[395941,395995]},{"content":"Mode.","pos":[395999,396004]},{"content":"Height calculation.","pos":[396018,396037]},{"content":"-1 Exact.","pos":[396225,396234]},{"content":"The exact height in pixels of the controls is used.","pos":[396244,396295]},{"content":"0 Auto.","pos":[396338,396345]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[396357,396446]},{"content":"1 Column height.","pos":[396451,396467]},{"content":"The layout of the form determines the height of the control.","pos":[396470,396530]},{"content":"The height and height calculation mode can be set separately.","pos":[396563,396624]},{"pos":[396630,396647],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[396649,396711]},{"pos":[396758,396768],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[396770,396775]},{"pos":[396784,396796],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[396798,396819]},{"pos":[396826,396833],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[396835,396889]},{"content":"Mode.","pos":[396893,396898]},{"content":"Height Calculation.","pos":[396910,396929]},{"content":"Exact.","pos":[397115,397121]},{"content":"The exact height in pixels of the controls is used.","pos":[397132,397183]},{"content":"Auto.","pos":[397226,397231]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[397243,397332]},{"content":"Column height.","pos":[397337,397351]},{"content":"The layout of the form determines the height of the control.","pos":[397354,397414]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[397447,397532]},{"pos":[397538,397556],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[397558,397597]},{"pos":[397645,397655],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397657,397662]},{"pos":[397671,397683],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[397685,397706]},{"pos":[397713,397720],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[397722,397812]},{"pos":[397818,397833],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[397835,397939]},{"pos":[397984,397994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397996,398001]},{"pos":[398010,398022],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[398024,398079]},{"pos":[398086,398093],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[398095,398163]},{"content":"The help text must not exceed 250 characters.","pos":[398164,398209]},{"pos":[398215,398237],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[398289,398299],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[398301,398306]},{"pos":[398315,398327],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[398333,398342],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[398344,398376]},{"pos":[398404,398416],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[398418,398440]},{"pos":[398446,398464],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[398466,398542]},{"pos":[398583,398595],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[398597,398671]},{"pos":[398677,398690],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[398741,398751],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[398753,398758]},{"pos":[398767,398779],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[398785,398796],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[398847,398857],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[398859,398864]},{"content":"mode","pos":[398878,398882]},{"pos":[398891,398903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[398909,398924],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[398969,398979],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[398981,398986]},{"pos":[398995,399007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[399013,399029],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[399075,399085],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[399087,399092]},{"pos":[399101,399113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[399119,399137],"content":"Method linesAtRoot","linkify":"Method linesAtRoot","nodes":[{"content":"Method linesAtRoot","pos":[0,18]}]},{"pos":[399193,399203],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[399205,399210]},{"pos":[399219,399231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[399237,399248],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[399250,399385]},{"pos":[399426,399436],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[399438,399443]},{"content":"The name to assign to the control.","pos":[399446,399480]},{"pos":[399487,399499],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[399501,399565]},{"pos":[399572,399579],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[399581,399675]},{"content":"It must start with a letter.","pos":[399681,399709]},{"content":"It cannot exceed 250 characters.","pos":[399714,399746]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[399751,399805],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[399810,399850]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[399855,399965]},{"pos":[399971,399994],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[400047,400057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400059,400064]},{"pos":[400073,400085],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[400091,400107],"content":"Method rowSelect","linkify":"Method rowSelect","nodes":[{"content":"Method rowSelect","pos":[0,16]}]},{"pos":[400161,400171],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400173,400178]},{"pos":[400187,400199],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[400205,400223],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[400291,400301],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400303,400308]},{"pos":[400317,400329],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[400335,400355],"content":"Method showSelAlways","linkify":"Method showSelAlways","nodes":[{"content":"Method showSelAlways","pos":[0,20]}]},{"pos":[400413,400423],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400425,400430]},{"pos":[400439,400451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[400457,400479],"content":"Method singleSelection","linkify":"Method singleSelection","nodes":[{"content":"Method singleSelection","pos":[0,22]}]},{"pos":[400539,400549],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400551,400556]},{"pos":[400565,400577],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[400583,400594],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[400596,400723]},{"pos":[400772,400782],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400784,400789]},{"content":"The value to assign to the skip property of the control; optional.","pos":[400792,400858]},{"pos":[400865,400877],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[400879,400985]},{"pos":[400991,401001],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[401051,401061],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401063,401068]},{"content":"mode","pos":[401082,401086]},{"pos":[401095,401107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401113,401127],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[401171,401181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401183,401188]},{"pos":[401197,401209],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401215,401230],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[401275,401285],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401287,401292]},{"pos":[401301,401313],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401319,401337],"content":"Method trackSelect","linkify":"Method trackSelect","nodes":[{"content":"Method trackSelect","pos":[0,18]}]},{"pos":[401393,401403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401405,401410]},{"pos":[401419,401431],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401437,401448],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[401489,401499],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401501,401506]},{"pos":[401515,401527],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401533,401549],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[401551,401618]},{"pos":[401672,401682],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401684,401689]},{"content":"The value to assign to the underline property of the control; optional.","pos":[401692,401763]},{"pos":[401770,401782],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[401784,401848]},{"pos":[401854,401869],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[401914,401924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401926,401931]},{"pos":[401940,401952],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401958,401977],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[402026,402036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[402038,402043]},{"pos":[402052,402064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[402070,402090],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[402140,402150],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[402152,402157]},{"pos":[402166,402178],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[402184,402206],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[402275,402285],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[402287,402292]},{"content":"mode","pos":[402306,402310]},{"pos":[402319,402331],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[402337,402363],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[402428,402438],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[402440,402444]},{"pos":[402453,402465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[402471,402498],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[402555,402565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[402567,402572]},{"pos":[402581,402593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[402599,402613],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[402665,402675],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[402677,402682]},{"pos":[402691,402703],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[402709,402721],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[402723,402761]},{"pos":[402813,402823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[402825,402830]},{"content":"mode","pos":[402844,402848]},{"pos":[402857,402869],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[402871,402906]},{"pos":[402913,402920],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[402922,402975]},{"content":"Calculate the width according to the following table:","pos":[402976,403029]},{"content":"Mode.","pos":[403033,403038]},{"content":"Width calculation.","pos":[403051,403069]},{"content":"-1 Exact.","pos":[403255,403264]},{"content":"The exact width in pixels of the controls is used.","pos":[403273,403323]},{"content":"0 Auto.","pos":[403366,403373]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[403384,403472]},{"content":"1 Column width.","pos":[403477,403492]},{"content":"The layout of the form determines the width of the control.","pos":[403495,403554]},{"content":"The width and width calculation mode can be set separately.","pos":[403587,403646]},{"pos":[403652,403668],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[403670,403732]},{"pos":[403778,403788],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403790,403795]},{"pos":[403804,403816],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[403818,403879]},{"pos":[403886,403893],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[403895,403948]},{"content":"Mode.","pos":[403952,403957]},{"content":"Width Calculation.","pos":[403968,403986]},{"content":"Exact.","pos":[404170,404176]},{"content":"The exact width in pixels of the controls is used.","pos":[404186,404236]},{"content":"Auto.","pos":[404279,404284]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[404295,404383]},{"content":"Column width.","pos":[404388,404401]},{"content":"The layout of the form determines the width of the control.","pos":[404404,404463]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[404496,404579]},{"pos":[404585,404602],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[404604,404642]},{"pos":[404689,404699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404701,404706]},{"pos":[404715,404727],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[404729,404764]},{"pos":[404771,404778],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[404780,404853]},{"pos":[404859,404888],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[405006,405016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[405018,405034]},{"content":"objectMethodToCall","pos":[405048,405066]},{"content":"overrideObject","pos":[405080,405094]},{"pos":[405101,405129],"content":"Class FormBuildWindowControl","linkify":"Class FormBuildWindowControl","nodes":[{"content":"Class FormBuildWindowControl","pos":[0,28]}]},{"content":"The FormBuildWindoControl class lets you create, read, update, and delete X++ code and metadata.","pos":[405189,405285]},{"pos":[405291,405298],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[405300,405410]},{"pos":[405416,405424],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[405430,405437],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[405441,405447]},{"content":"Description","pos":[405551,405562]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[405941,405987],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[406051,406091]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[406191,406234],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[406301,406368]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[406441,406490],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[406551,406649]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[406691,406732],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[406801,406850]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[406941,406976],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[407051,407112]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[407191,407232],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[407441,407478],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[407551,407596]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[407691,407763],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[407801,407868]},{"content":"public int containerId()","pos":[407941,407965]},{"content":"Retrieves the ID of the parent container for the control.","pos":[408051,408108]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[408191,408235],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[408441,408500],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[408691,408734],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[408941,408977],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[409191,409233],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[409441,409481],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that is used by the control or the form.","pos":[409551,409618]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[409691,409730],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[409941,409975],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[410051,410132]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[410191,410232],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[410301,410352]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[410441,410482],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[410551,410602]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[410691,410733],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[410801,410840]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[410941,410977],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[411051,411113]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[411191,411228],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[411301,411340]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[411441,411475],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[411551,411655]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[411691,411732],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int id()","pos":[411941,411956]},{"content":"Retrieves the ID of the control.","pos":[412051,412083]},{"content":"public int imageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[412191,412230],"source":"public int imageLocation(\\[int value\\])"},{"content":"public int imagemode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[412441,412476],"source":"public int imagemode(\\[int value\\])"},{"content":"public str imageName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[412691,412726],"source":"public str imageName(\\[str value\\])"},{"content":"public int imageResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[412941,412980],"source":"public int imageResource(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[413191,413219]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[413301,413377]},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[413441,413472],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[413551,413588]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[413691,413731],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[413941,413976],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[414191,414234],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[414441,414476],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[414691,414730],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[414941,414987],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[415191,415227],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[415441,415488],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[415691,415732],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[415941,415983],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[416191,416236],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[416441,416480],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[416691,416739],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[416941,416987],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[417191,417231],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[417441,417482],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[417691,417731],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[417941,417975],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[418191,418226],"source":"public int leftValue(\\[int value\\])"},{"content":"public str location(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[418441,418475],"source":"public str location(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[418691,418721],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[418801,418936]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[418941,418983],"source":"public int neededPermission(\\[int value\\])"},{"content":"public str normalImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[419191,419228],"source":"public str normalImage(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[419441,419477],"source":"public int promptrect(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[419691,419748],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[419941,419984],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[420191,420229],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[420301,420428]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[420441,420480],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[420691,420724],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[420941,420975],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[421191,421221],"source":"public int type(\\[int value\\])"},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[421441,421475],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[421691,421729],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[421941,421980],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[422191,422251],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[422441,422495],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[422691,422737],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[422941,422982],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[423191,423232],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[423301,423339]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[423441,423476],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[423551,423613]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[423691,423727],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[423801,423839]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[423941,424048],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"pos":[424194,424213],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[424215,424255]},{"pos":[424312,424322],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424324,424329]},{"pos":[424338,424350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[424352,424408]},{"pos":[424415,424422],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[424424,424503]},{"pos":[424509,424525],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[424527,424594]},{"pos":[424648,424658],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[424660,424665]},{"pos":[424674,424686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[424688,424740]},{"pos":[424747,424754],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[424756,424878]},{"pos":[424884,424906],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[424908,425006]},{"pos":[425066,425076],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[425078,425083]},{"pos":[425092,425104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[425106,425185]},{"pos":[425192,425199],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[425201,425238]},{"pos":[425244,425266],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[425268,425317]},{"pos":[425369,425379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[425381,425386]},{"pos":[425395,425407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[425409,425453]},{"pos":[425460,425467],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[425469,425537]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[425543,425613]},{"content":"The second byte contains a value for green.","pos":[425618,425661]},{"content":"The third byte contains a value for blue.","pos":[425666,425707]},{"content":"The high-order byte must be zero.","pos":[425712,425745]},{"content":"The maximum value for a single byte is 255.","pos":[425750,425793]},{"pos":[425799,425815],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[425817,425878]},{"pos":[425924,425934],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[425936,425941]},{"pos":[425950,425962],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[425964,426025]},{"pos":[426031,426053],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[426105,426115],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426117,426122]},{"pos":[426131,426143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[426149,426167],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[426169,426214]},{"pos":[426262,426272],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426274,426279]},{"pos":[426288,426300],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[426302,426345]},{"pos":[426352,426359],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[426361,426422]},{"content":"Value.","pos":[426426,426432]},{"content":"Style.","pos":[426435,426441]},{"content":"0","pos":[426512,426513]},{"content":"Default.","pos":[426521,426529]},{"content":"1","pos":[426555,426556]},{"content":"The MicrosoftWindows palette.","pos":[426564,426593]},{"content":"2","pos":[426598,426599]},{"content":"The true-color scheme.","pos":[426607,426629]},{"pos":[426644,426667],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[426669,426736]},{"pos":[426819,426829],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[426831,426836]},{"pos":[426845,426857],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[426859,426931]},{"pos":[426938,426945],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[426947,427028]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[427029,427122]},{"pos":[427128,427146],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[427148,427205]},{"pos":[427242,427254],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[427256,427287]},{"pos":[427293,427318],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[427373,427383],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427385,427390]},{"pos":[427399,427411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427417,427449],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[427519,427529],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427531,427536]},{"pos":[427545,427557],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427563,427579],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[427633,427643],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427645,427650]},{"pos":[427659,427671],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427677,427694],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[427741,427751],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427753,427758]},{"pos":[427767,427779],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427785,427808],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[427861,427871],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[427873,427878]},{"pos":[427887,427899],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[427905,427922],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that is used by the control or the form.","pos":[427924,427991]},{"pos":[428042,428052],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428054,428059]},{"pos":[428068,428080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to use.","pos":[428082,428123]},{"pos":[428129,428149],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[428199,428209],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428211,428216]},{"pos":[428225,428237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[428243,428258],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[428260,428341]},{"pos":[428386,428396],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428398,428403]},{"pos":[428412,428424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[428426,428486]},{"pos":[428492,428506],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[428508,428559]},{"pos":[428611,428621],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[428623,428628]},{"pos":[428637,428649],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[428651,428699]},{"pos":[428706,428713],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[428715,428794]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[428795,428890]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[428891,429025]},{"pos":[429031,429053],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[429055,429106]},{"pos":[429158,429168],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[429170,429175]},{"pos":[429184,429196],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[429198,429242]},{"pos":[429249,429256],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[429258,429326]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[429332,429402]},{"content":"The second byte contains a value for green.","pos":[429407,429450]},{"content":"The third byte contains a value for blue.","pos":[429455,429496]},{"content":"The high-order byte must be zero.","pos":[429501,429534]},{"content":"The maximum value for a single byte is 255.","pos":[429539,429582]},{"pos":[429588,429601],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[429603,429642]},{"pos":[429695,429705],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[429707,429712]},{"content":"mode","pos":[429726,429730]},{"pos":[429739,429751],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[429753,429789]},{"pos":[429796,429803],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[429805,429858]},{"content":"Calculate the height according to the following table:","pos":[429859,429913]},{"content":"Mode.","pos":[429917,429922]},{"content":"Height calculation.","pos":[429936,429955]},{"content":"-1 Exact.","pos":[430143,430152]},{"content":"The exact height in pixels of the controls is used.","pos":[430162,430213]},{"content":"0 Auto.","pos":[430256,430263]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[430275,430364]},{"content":"1 Column height.","pos":[430369,430385]},{"content":"The layout of the form determines the height of the control.","pos":[430388,430448]},{"content":"The height and height calculation mode can be set separately.","pos":[430481,430542]},{"pos":[430548,430565],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[430567,430629]},{"pos":[430676,430686],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[430688,430693]},{"pos":[430702,430714],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[430716,430737]},{"pos":[430744,430751],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[430753,430807]},{"content":"Mode.","pos":[430811,430816]},{"content":"Height Calculation.","pos":[430828,430847]},{"content":"Exact.","pos":[431033,431039]},{"content":"The exact height in pixels of the controls is used.","pos":[431050,431101]},{"content":"Auto.","pos":[431144,431149]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[431161,431250]},{"content":"Column height.","pos":[431255,431269]},{"content":"The layout of the form determines the height of the control.","pos":[431272,431332]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[431365,431450]},{"pos":[431456,431474],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[431476,431515]},{"pos":[431563,431573],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[431575,431580]},{"pos":[431589,431601],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[431603,431624]},{"pos":[431631,431638],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[431640,431730]},{"pos":[431736,431751],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[431753,431857]},{"pos":[431902,431912],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[431914,431919]},{"pos":[431928,431940],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[431942,431997]},{"pos":[432004,432011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[432013,432081]},{"content":"The help text must not exceed 250 characters.","pos":[432082,432127]},{"pos":[432133,432155],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[432207,432217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432219,432224]},{"pos":[432233,432245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[432251,432260],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[432262,432294]},{"pos":[432322,432334],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[432336,432358]},{"pos":[432364,432384],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[432434,432444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432446,432451]},{"pos":[432460,432472],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[432478,432494],"content":"Method imagemode","linkify":"Method imagemode","nodes":[{"content":"Method imagemode","pos":[0,16]}]},{"pos":[432540,432550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432552,432557]},{"pos":[432566,432578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[432584,432600],"content":"Method imageName","linkify":"Method imageName","nodes":[{"content":"Method imageName","pos":[0,16]}]},{"pos":[432646,432656],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432658,432663]},{"pos":[432672,432684],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[432690,432710],"content":"Method imageResource","linkify":"Method imageResource","nodes":[{"content":"Method imageResource","pos":[0,20]}]},{"pos":[432760,432770],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[432772,432777]},{"pos":[432786,432798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[432804,432822],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is a container control.","pos":[432824,432900]},{"pos":[432941,432953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A Boolean value that indicates whether the control is a container control.","pos":[432955,433029]},{"pos":[433035,433047],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[433049,433086]},{"pos":[433128,433138],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[433140,433145]},{"pos":[433154,433166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[433168,433206]},{"pos":[433213,433220],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to the label property value cannot exceed 250 characters.","pos":[433222,433351]},{"pos":[433357,433378],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[433429,433439],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[433441,433446]},{"pos":[433455,433467],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[433473,433489],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[433535,433545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[433547,433552]},{"pos":[433561,433573],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[433579,433603],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[433657,433667],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[433669,433674]},{"pos":[433683,433695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[433701,433717],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[433763,433773],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[433775,433780]},{"pos":[433789,433801],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[433807,433827],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[433877,433887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[433889,433894]},{"pos":[433903,433915],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[433921,433948],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[434005,434015],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[434017,434022]},{"pos":[434031,434043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434049,434066],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[434113,434123],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[434125,434130]},{"pos":[434139,434151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434157,434175],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[434233,434243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[434245,434250]},{"content":"mode","pos":[434264,434268]},{"pos":[434277,434289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434295,434317],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[434369,434379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[434381,434386]},{"pos":[434395,434407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434413,434436],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[434489,434499],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[434501,434506]},{"pos":[434515,434527],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434533,434551],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[434607,434617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[434619,434624]},{"pos":[434633,434645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434651,434671],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[434721,434731],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[434733,434738]},{"pos":[434747,434759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434765,434786],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[434845,434855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[434857,434862]},{"pos":[434871,434883],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[434889,434906],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[434963,434973],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[434975,434980]},{"content":"mode","pos":[434994,434998]},{"pos":[435007,435019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[435025,435046],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[435097,435107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[435109,435114]},{"pos":[435123,435135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[435141,435163],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[435215,435225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[435227,435232]},{"pos":[435241,435253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[435259,435270],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[435321,435331],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[435333,435338]},{"content":"mode","pos":[435352,435356]},{"pos":[435365,435377],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[435383,435398],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[435443,435453],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[435455,435460]},{"pos":[435469,435481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[435487,435503],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[435549,435559],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[435561,435566]},{"pos":[435575,435587],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[435593,435608],"content":"Method location","linkify":"Method location","nodes":[{"content":"Method location","pos":[0,15]}]},{"pos":[435653,435663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[435665,435670]},{"pos":[435679,435691],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[435697,435708],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[435710,435845]},{"pos":[435886,435896],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[435898,435903]},{"content":"The name to assign to the control; optional.","pos":[435906,435950]},{"pos":[435957,435969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[435971,436035]},{"pos":[436042,436049],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[436051,436145]},{"content":"It must start with a letter.","pos":[436151,436179]},{"content":"It cannot exceed 250 characters.","pos":[436184,436216]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[436221,436275],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[436280,436320]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[436325,436435]},{"pos":[436441,436464],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[436517,436527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[436529,436534]},{"pos":[436543,436555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[436561,436579],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[436627,436637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[436639,436644]},{"pos":[436653,436665],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[436671,436688],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[436735,436745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[436747,436752]},{"pos":[436761,436773],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[436779,436797],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[436865,436875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[436877,436882]},{"pos":[436891,436903],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[436909,436925],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[436979,436989],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[436991,436996]},{"pos":[437005,437017],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437023,437034],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[437036,437163]},{"pos":[437212,437222],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437224,437229]},{"content":"The value to assign to the skip property of the control; optional.","pos":[437232,437298]},{"pos":[437305,437317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[437319,437425]},{"pos":[437431,437441],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[437491,437501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437503,437508]},{"content":"mode","pos":[437522,437526]},{"pos":[437535,437547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437553,437567],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[437611,437621],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437623,437628]},{"pos":[437637,437649],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437655,437670],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[437715,437725],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437727,437732]},{"pos":[437741,437753],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437759,437770],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[437811,437821],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437823,437828]},{"pos":[437837,437849],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437855,437870],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[437915,437925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[437927,437932]},{"pos":[437941,437953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[437959,437978],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[438027,438037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438039,438044]},{"pos":[438053,438065],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438071,438091],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[438141,438151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438153,438158]},{"pos":[438167,438179],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438185,438207],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[438276,438286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438288,438293]},{"content":"mode","pos":[438307,438311]},{"pos":[438320,438332],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438338,438364],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[438429,438439],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[438441,438445]},{"pos":[438454,438466],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438472,438499],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[438556,438566],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438568,438573]},{"pos":[438582,438594],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438600,438614],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[438666,438676],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438678,438683]},{"pos":[438692,438704],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[438710,438722],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[438724,438762]},{"pos":[438814,438824],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[438826,438831]},{"content":"mode","pos":[438845,438849]},{"pos":[438858,438870],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[438872,438907]},{"pos":[438914,438921],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[438923,438976]},{"content":"Calculate the width according to the following table:","pos":[438977,439030]},{"content":"Mode.","pos":[439034,439039]},{"content":"Width calculation.","pos":[439052,439070]},{"content":"-1 Exact.","pos":[439256,439265]},{"content":"The exact width in pixels of the controls is used.","pos":[439274,439324]},{"content":"0 Auto.","pos":[439367,439374]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[439385,439473]},{"content":"1 Column width.","pos":[439478,439493]},{"content":"The layout of the form determines the width of the control.","pos":[439496,439555]},{"content":"The width and width calculation mode can be set separately.","pos":[439588,439647]},{"pos":[439653,439669],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[439671,439733]},{"pos":[439779,439789],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[439791,439796]},{"pos":[439805,439817],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[439819,439880]},{"pos":[439887,439894],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[439896,439949]},{"content":"Mode.","pos":[439953,439958]},{"content":"Width Calculation.","pos":[439969,439987]},{"content":"Exact.","pos":[440171,440177]},{"content":"The exact width in pixels of the controls is used.","pos":[440187,440237]},{"content":"Auto.","pos":[440280,440285]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[440296,440384]},{"content":"Column width.","pos":[440389,440402]},{"content":"The layout of the form determines the width of the control.","pos":[440405,440464]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[440497,440580]},{"pos":[440586,440603],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[440605,440643]},{"pos":[440690,440700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[440702,440707]},{"pos":[440716,440728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[440730,440765]},{"pos":[440772,440779],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[440781,440854]},{"pos":[440860,440889],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[441007,441017],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[441019,441035]},{"content":"objectMethodToCall","pos":[441049,441067]},{"content":"overrideObject","pos":[441081,441095]},{"pos":[441102,441125],"content":"Class FormButtonControl","linkify":"Class FormButtonControl","nodes":[{"content":"Class FormButtonControl","pos":[0,23]}]},{"pos":[441179,441186],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[441192,441200],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[441206,441213],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[441217,441223]},{"content":"Description","pos":[441327,441338]},{"content":"public int acquireFocus(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[441781,441819],"source":"public int acquireFocus(\\[int value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[442063,442109],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[442173,442213]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[442345,442380],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[442627,442670],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[442737,442804]},{"content":"public boolean allowSysSetup()","pos":[442909,442939]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[443019,443102]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[443191,443240],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[443301,443399]},{"content":"public boolean autoRefreshData(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[443473,443522],"source":"public boolean autoRefreshData(\\[boolean value\\])"},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[443755,443796],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[443865,443914]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[444037,444072],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control background can be transparent.","pos":[444147,444208]},{"content":"public int beginDrag(int x, int y)","pos":[444319,444353]},{"content":"Is called when the user starts to drag a form control.","pos":[444429,444483]},{"content":"public boolean big(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[444601,444638],"source":"public boolean big(\\[boolean value\\])"},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[444883,444913],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[444993,445068]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[445165,445197],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[445275,445331]},{"content":"public int buttonDisplay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[445447,445486],"source":"public int buttonDisplay(\\[int value\\])"},{"content":"Gets or sets the appearance of the button control.","pos":[445557,445607]},{"content":"public container calcControlSize(int chars, int lines)","pos":[445729,445783]},{"content":"Retrieves the size of the control.","pos":[445839,445873]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[446011,446049],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[446121,446164]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[446293,446330],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[446403,446448]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[446575,446647],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[446685,446752]},{"content":"public List configurationKeyEx()","pos":[446857,446889]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[446967,447063]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[447139,447183],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[447249,447327]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[447421,447463],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[447531,447656]},{"content":"public boolean defaultButton(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[447703,447750],"source":"public boolean defaultButton(\\[boolean value\\])"},{"content":"Determines whether the button should be the default button on the form.","pos":[447813,447884]},{"content":"public str disabledImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[447985,448024],"source":"public str disabledImage(\\[str value\\])"},{"content":"Gets or sets the disabled image of the button.","pos":[448095,448141]},{"content":"public int disabledImageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[448267,448314],"source":"public int disabledImageLocation(\\[int value\\])"},{"content":"public int disabledResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[448549,448591],"source":"public int disabledResource(\\[int value\\])"},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[448659,448737]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[448831,448870],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[448941,449108]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[449113,449147],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[449223,449304]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[449395,449476]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[449505,449599]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[449677,449754]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[449787,449883]},{"content":"public str dragText()","pos":[449959,449980]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[450069,450139]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[450241,450282],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[450351,450402]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[450523,450553],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[450633,450690]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[450805,450839],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[450915,450972]},{"content":"public boolean forcedToOverflow(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[451087,451137],"source":"public boolean forcedToOverflow(\\[boolean value\\])"},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[451369,451410],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[451479,451530]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[451651,451693],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[451761,451849]},{"content":"public boolean hasUserSetting()","pos":[451933,451964]},{"content":"Indicates whether the control has custom user settings.","pos":[452043,452098]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[452215,452257],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[452325,452364]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[452497,452533],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[452607,452669]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[452779,452816],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[452889,452928]},{"content":"public str helpField()","pos":[453061,453083]},{"content":"Retrieves the Help text for the control.","pos":[453171,453211]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[453343,453377],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[453453,453557]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[453625,453666],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[453735,453798]},{"content":"public int hWnd()","pos":[453907,453924]},{"content":"Retrieves the Windows handle for the control.","pos":[454017,454062]},{"content":"public int imageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[454189,454228],"source":"public int imageLocation(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[454471,454499]},{"content":"public boolean isDisplayed()","pos":[454753,454781]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[454863,454929]},{"content":"public boolean isRestricted()","pos":[455035,455064]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[455145,455212]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[455317,455373]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[455427,455528]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[455599,455639],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str keyTip(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[455881,455913],"source":"public str keyTip(\\[str value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[456163,456203],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[456273,456337]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[456445,456479],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[456555,456616]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[456727,456762],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[456837,456901]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[457009,457056],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[457119,457172]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[457291,457370]},{"content":"Is called when the control is double-clicked by the user.","pos":[457401,457458]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[457573,457648]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[457683,457748]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[457855,457930]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[457965,458030]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[458137,458210]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[458247,458319]},{"content":"public int multiSelect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[458419,458456],"source":"public int multiSelect(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[458701,458731],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[458811,458952]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[458983,459025],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int needsRecord(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[459265,459302],"source":"public int needsRecord(\\[int value\\])"},{"content":"public str normalImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[459547,459584],"source":"public str normalImage(\\[str value\\])"},{"content":"public int normalResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[459829,459869],"source":"public int normalResource(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[460111,460150]},{"content":"public FormControl parentControl()","pos":[460393,460427]},{"content":"Retrieves the parent control for the control.","pos":[460503,460548]},{"content":"public boolean primary(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[460675,460716],"source":"public boolean primary(\\[boolean value\\])"},{"content":"public boolean saveRecord(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[460957,461001],"source":"public boolean saveRecord(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[461239,461296],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[461349,461408]},{"content":"public int shortkey(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[461521,461555],"source":"public int shortkey(\\[int value\\])"},{"content":"public int showContextMenu(int menuHandle)","pos":[461803,461845]},{"content":"Shows the shortcut menu for the control.","pos":[461913,461953]},{"content":"public boolean showShortCut(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[462085,462131],"source":"public boolean showShortCut(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[462367,462405],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[462477,462604]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[462649,462680],"source":"public int style(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[462931,462961],"source":"public str text(\\[str value\\])"},{"content":"public int toggleButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[463213,463251],"source":"public int toggleButton(\\[int value\\])"},{"content":"public int toggleValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[463495,463532],"source":"public int toggleValue(\\[int value\\])"},{"content":"public str toolTip()","pos":[463777,463797]},{"content":"Retrieves the tooltip text for the control.","pos":[463887,463930]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[464059,464098],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[464169,464231]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[464341,464374],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[464451,464510]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[464623,464657],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[464733,464795]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[464905,464935],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[465187,465230],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[465469,465520]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[465751,465785],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[465861,465904]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[466033,466071],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[466143,466191]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[466315,466354],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[466425,466484]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[466597,466634],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[466707,466790]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[466879,466915],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[466989,467041]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[467161,467195],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[467271,467353]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[467443,467485],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[467553,467609]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[467725,467765],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[467835,467889]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[468007,468047],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[468117,468166]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[468289,468332],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[468399,468452]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[468571,468605],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[468681,468829]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[468853,468888],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[468963,469014]},{"content":"public boolean value(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[469135,469174],"source":"public boolean value(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[469417,469477],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[469527,469588]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[469699,469753],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[469809,469868]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[469981,470027],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[470091,470152]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[470263,470304],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[470373,470443]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[470545,470586],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[470655,470693]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[470827,470862],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[470937,470999]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[471109,471145],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[471219,471257]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[471391,471498],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void copy()","pos":[471673,471691]},{"content":"Copies the contents of the control to the clipboard.","pos":[471783,471835]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[471955,472031],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void gotFocus()","pos":[472237,472259]},{"content":"Indicates that the control has received focus.","pos":[472347,472393]},{"content":"public void mouseLeave()","pos":[472519,472543]},{"content":"Indicates that the mouse pointer has left the control.","pos":[472629,472683]},{"content":"public void prefColumnSize(int width, int height)","pos":[472801,472850]},{"content":"Specifies the preferred column width and height for the form control.","pos":[472911,472980]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[473083,473156]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[473193,473291]},{"content":"public void endDrag()","pos":[473365,473386]},{"content":"Is called when the user has finished dragging a form control.","pos":[473475,473536]},{"content":"public void clicked()","pos":[473647,473668]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[473929,474004],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void lostFocus()","pos":[474211,474234]},{"content":"Indicates that the control has lost focus.","pos":[474321,474363]},{"content":"public void setFocus()","pos":[474493,474515]},{"content":"Sets the focus on the control.","pos":[474603,474633]},{"content":"public void resetUserSetting()","pos":[474775,474805]},{"content":"Resets the user settings for the control.","pos":[474885,474926]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[475057,475126]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[475167,475267]},{"content":"private void OnClicked(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[475339,475413],"source":"private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void cut()","pos":[475621,475638]},{"content":"Cuts the contents of the control.","pos":[475731,475764]},{"content":"public void context()","pos":[475903,475924]},{"content":"Shows the shortcut menu for the control.","pos":[476013,476053]},{"content":"public void dragLeave()","pos":[476185,476208]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[476295,476391]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[476467,476544]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[476577,476647]},{"content":"public void displayControl()","pos":[476749,476777]},{"content":"Displays the control.","pos":[476859,476880]},{"content":"public void paste()","pos":[477031,477050]},{"content":"Pastes the contents of the clipboard into the control.","pos":[477141,477195]},{"content":"public void inputSearch(str searchStr)","pos":[477313,477351]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[477423,477494]},{"pos":[477598,477617],"content":"Method acquireFocus","linkify":"Method acquireFocus","nodes":[{"content":"Method acquireFocus","pos":[0,19]}]},{"pos":[477666,477676],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[477678,477683]},{"pos":[477692,477704],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[477710,477729],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[477731,477771]},{"pos":[477828,477838],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[477840,477845]},{"pos":[477854,477866],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[477868,477924]},{"pos":[477931,477938],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[477940,478019]},{"pos":[478025,478041],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[478087,478097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[478099,478104]},{"pos":[478113,478125],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[478131,478147],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[478149,478216]},{"pos":[478270,478280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[478282,478287]},{"pos":[478296,478308],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[478310,478362]},{"pos":[478369,478376],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[478378,478500]},{"pos":[478506,478526],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[478528,478611]},{"pos":[478654,478666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[478668,478736]},{"pos":[478742,478764],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[478766,478864]},{"pos":[478924,478934],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[478936,478941]},{"pos":[478950,478962],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[478964,479043]},{"pos":[479050,479057],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[479059,479096]},{"pos":[479102,479124],"content":"Method autoRefreshData","linkify":"Method autoRefreshData","nodes":[{"content":"Method autoRefreshData","pos":[0,22]}]},{"pos":[479184,479194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[479196,479201]},{"pos":[479210,479222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[479228,479250],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[479252,479301]},{"pos":[479353,479363],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[479365,479370]},{"pos":[479379,479391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[479393,479437]},{"pos":[479444,479451],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[479453,479521]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[479527,479597]},{"content":"The second byte contains a value for green.","pos":[479602,479645]},{"content":"The third byte contains a value for blue.","pos":[479650,479691]},{"content":"The high-order byte must be zero.","pos":[479696,479729]},{"content":"The maximum value for a single byte is 255.","pos":[479734,479777]},{"pos":[479783,479799],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control background can be transparent.","pos":[479801,479862]},{"pos":[479908,479918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[479920,479925]},{"pos":[479934,479946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[479948,480009]},{"pos":[480015,480031],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[480033,480087]},{"pos":[480134,480144],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[480146,480147]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[480150,480220]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[480221,480288]},{"content":"y","pos":[480300,480301]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[480304,480374]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[480375,480442]},{"pos":[480449,480461],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[480463,480502]},{"pos":[480509,480516],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[480518,480599]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[480600,480704]},{"pos":[480710,480720],"content":"Method big","linkify":"Method big","nodes":[{"content":"Method big","pos":[0,10]}]},{"pos":[480768,480778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[480780,480785]},{"pos":[480794,480806],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[480812,480823],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[480825,480900]},{"pos":[480941,480951],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[480953,480958]},{"pos":[480967,480979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[480981,481031]},{"pos":[481038,481045],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[481047,481119]},{"content":"0 Use the default font weight.","pos":[481125,481155]},{"content":"1 Thin.","pos":[481160,481167]},{"content":"2 Extra-light.","pos":[481172,481186]},{"content":"3 Light.","pos":[481191,481199]},{"content":"4 Normal.","pos":[481204,481213]},{"content":"5 Medium.","pos":[481218,481227]},{"content":"6 Semibold.","pos":[481232,481243]},{"content":"7 Bold.","pos":[481248,481255]},{"content":"8 Extra-bold.","pos":[481260,481273]},{"content":"9 Heavy.","pos":[481278,481286]},{"pos":[481292,481305],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[481307,481363]},{"pos":[481406,481416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[481418,481423]},{"pos":[481432,481444],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[481446,481490]},{"pos":[481497,481504],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Integer value that is returned contains the style of the borderline of the control as follows:","pos":[481506,481604]},{"content":"Value.","pos":[481608,481614]},{"content":"Description.","pos":[481617,481629]},{"content":"0","pos":[481660,481661]},{"content":"Auto.","pos":[481669,481674]},{"content":"1","pos":[481686,481687]},{"content":"3D.","pos":[481695,481698]},{"content":"2","pos":[481712,481713]},{"content":"Single line.","pos":[481721,481733]},{"content":"3","pos":[481738,481739]},{"content":"Flat.","pos":[481747,481752]},{"content":"4","pos":[481764,481765]},{"content":"None.","pos":[481773,481778]},{"pos":[481793,481813],"content":"Method buttonDisplay","linkify":"Method buttonDisplay","nodes":[{"content":"Method buttonDisplay","pos":[0,20]}]},{"content":"Gets or sets the appearance of the button control.","pos":[481815,481865]},{"pos":[481915,481925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[481927,481932]},{"pos":[481941,481953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and five, inclusive.","pos":[481955,481999]},{"pos":[482006,482013],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The value of the property defines whether the text, the image, or both should be displayed on the button.","pos":[482015,482120]},{"content":"This property also controls relative positions of text and image if both are displayed.","pos":[482121,482208]},{"content":"The integer value that is returned contains the appearance of the button control as follows:","pos":[482209,482301]},{"content":"Value.","pos":[482305,482311]},{"content":"Description.","pos":[482314,482326]},{"content":"0","pos":[482461,482462]},{"content":"Text only.","pos":[482470,482480]},{"content":"1","pos":[482539,482540]},{"content":"Image Only.","pos":[482548,482559]},{"content":"2","pos":[482617,482618]},{"content":"Text and image; the image is displayed under the text.","pos":[482626,482680]},{"content":"3","pos":[482695,482696]},{"content":"Text and image; the image is displayed above the text.","pos":[482704,482758]},{"content":"4","pos":[482773,482774]},{"content":"Text and image; the image is displayed to the left of the text.","pos":[482782,482845]},{"content":"5","pos":[482851,482852]},{"content":"Text and image; the image is displayed to the right of the text.","pos":[482860,482924]},{"pos":[482932,482954],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[482956,482990]},{"pos":[483057,483067],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[483069,483074]},{"content":"The number of lines to use to determine the height.","pos":[483077,483128]},{"content":"lines","pos":[483140,483145]},{"content":"The number of lines to use to determine the height.","pos":[483148,483199]},{"pos":[483206,483218],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that has the width and height.","pos":[483220,483264]},{"pos":[483270,483289],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[483291,483334]},{"pos":[483383,483393],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[483395,483400]},{"pos":[483409,483421],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[483423,483485]},{"pos":[483492,483499],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[483501,483605]},{"content":"Value.","pos":[483609,483615]},{"content":"Description.","pos":[483618,483630]},{"content":"0","pos":[483677,483678]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483686,483699],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[483711,483712]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483720,483736],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[483745,483746]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483754,483769],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[483779,483781]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483788,483800],"source":"MAC\\_CHARSET"},{"content":"128","pos":[483813,483816]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483822,483839],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[483847,483850]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483856,483871],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[483881,483884]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483890,483905],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[483915,483918]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483924,483944],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[483949,483952]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483958,483972],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[483983,483986]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[483992,484008],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[484017,484020]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[484026,484045],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[484051,484054]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[484060,484075],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[484085,484088]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[484094,484110],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[484119,484122]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[484128,484147],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[484153,484156]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[484162,484174],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[484186,484274]},{"content":"Value.","pos":[484278,484284]},{"content":"Description.","pos":[484287,484299]},{"content":"130","pos":[484334,484337]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[484343,484357],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of MicrosoftWindows.","pos":[484361,484456]},{"content":"Value.","pos":[484460,484466]},{"content":"Description.","pos":[484469,484481]},{"content":"177","pos":[484518,484521]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[484527,484542],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[484547,484550]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[484556,484571],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of MicrosoftWindows.","pos":[484575,484661]},{"content":"Value.","pos":[484665,484671]},{"content":"Description.","pos":[484674,484686]},{"content":"222","pos":[484719,484722]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[484728,484741],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value, depending on the current system locale.","pos":[484745,484829]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[484830,484921],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[484922,485037]},{"pos":[485043,485061],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[485063,485108]},{"pos":[485156,485166],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[485168,485173]},{"pos":[485182,485194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[485196,485239]},{"pos":[485246,485253],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[485255,485316]},{"content":"Value.","pos":[485320,485326]},{"content":"Style.","pos":[485329,485335]},{"content":"0","pos":[485406,485407]},{"content":"Default.","pos":[485415,485423]},{"content":"1","pos":[485449,485450]},{"content":"The MicrosoftWindows palette.","pos":[485458,485487]},{"content":"2","pos":[485492,485493]},{"content":"The true-color scheme.","pos":[485501,485523]},{"pos":[485538,485561],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[485563,485630]},{"pos":[485713,485723],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[485725,485730]},{"pos":[485739,485751],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[485753,485825]},{"pos":[485832,485839],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[485841,485922]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[485923,486016]},{"pos":[486022,486047],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[486049,486145]},{"pos":[486190,486202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[486204,486290]},{"pos":[486297,486304],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[486306,486355]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[486356,486504]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[486505,486639]},{"pos":[486645,486670],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[486672,486750]},{"pos":[486805,486815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[486817,486822]},{"content":"The string that contains the country/region codes to set; optional.","pos":[486825,486892]},{"pos":[486899,486911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[486913,486978]},{"pos":[486984,487007],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[487009,487134]},{"pos":[487187,487197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487199,487204]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[487207,487281]},{"pos":[487288,487300],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[487302,487414]},{"pos":[487421,487428],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[487430,487557]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[487558,487651]},{"pos":[487657,487677],"content":"Method defaultButton","linkify":"Method defaultButton","nodes":[{"content":"Method defaultButton","pos":[0,20]}]},{"content":"Determines whether the button should be the default button on the form.","pos":[487679,487750]},{"pos":[487808,487818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[487820,487825]},{"pos":[487834,487846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the button should be the default button; otherwise, false.","pos":[487848,487914]},{"pos":[487920,487940],"content":"Method disabledImage","linkify":"Method disabledImage","nodes":[{"content":"Method disabledImage","pos":[0,20]}]},{"content":"Gets or sets the disabled image of the button.","pos":[487942,487988]},{"pos":[488038,488048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488050,488055]},{"pos":[488064,488076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The full name of an image file.","pos":[488078,488109]},{"content":"The system supports all of the GDI-supported image formats.","pos":[488110,488169]},{"pos":[488176,488183],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property has precedence over the disabledResource property.","pos":[488185,488249]},{"content":"It is used if both of these properties are set.","pos":[488250,488297]},{"pos":[488303,488331],"content":"Method disabledImageLocation","linkify":"Method disabledImageLocation","nodes":[{"content":"Method disabledImageLocation","pos":[0,28]}]},{"pos":[488389,488399],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488401,488406]},{"pos":[488415,488427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[488433,488456],"content":"Method disabledResource","linkify":"Method disabledResource","nodes":[{"content":"Method disabledResource","pos":[0,23]}]},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[488458,488536]},{"pos":[488589,488599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488601,488606]},{"pos":[488615,488627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resource ID of the image to use as the disabled button image.","pos":[488629,488694]},{"content":"Both icon and bitmap images are supported.","pos":[488695,488737]},{"pos":[488743,488763],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[488765,488932]},{"pos":[488982,488992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[488994,488999]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[489002,489076]},{"pos":[489083,489095],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both","pos":[489097,489224]},{"pos":[489230,489245],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[489247,489328]},{"pos":[489373,489383],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[489385,489390]},{"pos":[489399,489411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[489413,489473]},{"pos":[489479,489494],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[489496,489590]},{"pos":[489684,489694],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[489696,489706]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[489709,489794]},{"content":"dragMode","pos":[489806,489814]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[489817,489902]},{"content":"x","pos":[489914,489915]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[489918,490003]},{"content":"y","pos":[490015,490016]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[490019,490104]},{"pos":[490111,490123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[490125,490190]},{"pos":[490196,490213],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[490215,490311]},{"pos":[490401,490411],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[490413,490423]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[490426,490511]},{"content":"dragMode","pos":[490523,490531]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[490534,490619]},{"content":"x","pos":[490631,490632]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[490635,490720]},{"content":"y","pos":[490732,490733]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[490736,490821]},{"pos":[490828,490840],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[490842,490907]},{"pos":[490913,490928],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[490930,491000]},{"pos":[491034,491046],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[491048,491179]},{"pos":[491185,491199],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[491201,491252]},{"pos":[491304,491314],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[491316,491321]},{"pos":[491330,491342],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[491344,491392]},{"pos":[491399,491406],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[491408,491487]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[491488,491583]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[491584,491718]},{"pos":[491724,491735],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[491737,491794]},{"pos":[491835,491845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[491847,491852]},{"pos":[491861,491873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[491875,491930]},{"pos":[491936,491951],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[491953,492010]},{"pos":[492055,492065],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[492067,492072]},{"pos":[492081,492093],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[492095,492128]},{"pos":[492134,492157],"content":"Method forcedToOverflow","linkify":"Method forcedToOverflow","nodes":[{"content":"Method forcedToOverflow","pos":[0,23]}]},{"pos":[492218,492228],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[492230,492235]},{"pos":[492244,492256],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[492262,492284],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[492286,492337]},{"pos":[492389,492399],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[492401,492406]},{"pos":[492415,492427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[492429,492473]},{"pos":[492480,492487],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[492489,492557]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[492563,492633]},{"content":"The second byte contains a value for green.","pos":[492638,492681]},{"content":"The third byte contains a value for blue.","pos":[492686,492727]},{"content":"The high-order byte must be zero.","pos":[492732,492765]},{"content":"The maximum value for a single byte is 255.","pos":[492770,492813]},{"pos":[492819,492836],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[492838,492926]},{"pos":[492979,492989],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[492991,492994]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[492997,493067]},{"pos":[493074,493086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[493088,493155]},{"pos":[493161,493182],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[493184,493239]},{"pos":[493283,493295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[493297,493360]},{"pos":[493366,493379],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[493381,493420]},{"pos":[493473,493483],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[493485,493490]},{"content":"mode","pos":[493504,493508]},{"pos":[493517,493529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[493531,493567]},{"pos":[493574,493581],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[493583,493690]},{"content":"Mode.","pos":[493694,493699]},{"content":"Height calculation.","pos":[493713,493732]},{"content":"-1 Exact.","pos":[493920,493929]},{"content":"The exact height in pixels of the controls is used.","pos":[493939,493990]},{"content":"0 Auto.","pos":[494033,494040]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[494052,494141]},{"content":"1 Column height.","pos":[494146,494162]},{"content":"The layout of the form determines the height of the control.","pos":[494165,494225]},{"content":"The height and height calculation mode can be set separately.","pos":[494258,494319]},{"pos":[494325,494342],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[494344,494406]},{"pos":[494453,494463],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[494465,494470]},{"pos":[494479,494491],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[494493,494514]},{"pos":[494521,494528],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[494530,494584]},{"content":"Mode.","pos":[494588,494593]},{"content":"Height Calculation.","pos":[494605,494624]},{"content":"Exact.","pos":[494810,494816]},{"content":"The exact height in pixels of the controls is used.","pos":[494827,494878]},{"content":"Auto.","pos":[494921,494926]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[494938,495027]},{"content":"Column height.","pos":[495032,495046]},{"content":"The layout of the form determines the height of the control.","pos":[495049,495109]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[495142,495227]},{"pos":[495233,495251],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[495253,495292]},{"pos":[495340,495350],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[495352,495357]},{"pos":[495366,495378],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[495380,495401]},{"pos":[495408,495415],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[495417,495507]},{"pos":[495513,495529],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[495531,495571]},{"pos":[495606,495618],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[495620,495708]},{"pos":[495715,495722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[495724,495794]},{"content":"Use the helpText method to set the value of the Help text.","pos":[495795,495853]},{"pos":[495859,495874],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[495876,495980]},{"pos":[496025,496035],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[496037,496042]},{"pos":[496051,496063],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[496065,496120]},{"pos":[496127,496134],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialog box.","pos":[496136,496209]},{"content":"The help text must not exceed 250 characters.","pos":[496210,496255]},{"pos":[496261,496283],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[496285,496348]},{"pos":[496400,496410],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[496412,496417]},{"content":"The value to assign as the HierarchyParent value of the control.","pos":[496420,496484]},{"pos":[496491,496503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[496505,496555]},{"pos":[496561,496572],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[496574,496619]},{"pos":[496649,496661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[496663,496690]},{"pos":[496697,496704],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[496706,496750]},{"pos":[496756,496776],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[496826,496836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[496838,496843]},{"pos":[496852,496864],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[496870,496888],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[496929,496941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[496947,496965],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[496967,497033]},{"pos":[497074,497086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[497088,497139]},{"pos":[497146,497153],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[497155,497223]},{"pos":[497229,497248],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[497250,497317]},{"pos":[497359,497371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[497373,497425]},{"pos":[497431,497456],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[497458,497559]},{"pos":[497628,497638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[497640,497657]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[497660,497788]},{"pos":[497795,497807],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[497809,497968]},{"pos":[497975,497982],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[497984,498061]},{"content":"FormAllowUserSetup::No 0","pos":[498403,498427]},{"content":"No changes can be made to the control.","pos":[498438,498476]},{"content":"If this value is used for the neededSetupRights parameter, the method always returns true.","pos":[498477,498567]},{"content":"FormAllowUserSetup::Restricted 1","pos":[498572,498604]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[498607,498699]},{"content":"The user cannot move the control.","pos":[498700,498733]},{"content":"FormAllowUserSetup::Yes 2","pos":[498741,498766]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[498776,498868]},{"content":"The user can also move the control.","pos":[498869,498904]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[498909,499098]},{"pos":[499104,499117],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[499168,499178],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499180,499185]},{"pos":[499194,499206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[499212,499225],"content":"Method keyTip","linkify":"Method keyTip","nodes":[{"content":"Method keyTip","pos":[0,13]}]},{"pos":[499268,499278],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499280,499285]},{"pos":[499294,499306],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[499312,499323],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[499325,499389]},{"pos":[499440,499450],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499452,499457]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[499460,499546]},{"content":"mode","pos":[499558,499562]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[499565,499651]},{"pos":[499658,499670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[499672,499723]},{"pos":[499729,499744],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[499746,499807]},{"pos":[499852,499862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[499864,499869]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[499872,499958]},{"pos":[499965,499977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[499979,500035]},{"pos":[500041,500057],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[500059,500123]},{"pos":[500169,500179],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500181,500186]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[500189,500270]},{"pos":[500277,500289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[500291,500342]},{"pos":[500348,500368],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[500370,500423]},{"pos":[500481,500491],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[500493,500498]},{"content":"A Boolean value that indicates whether the control should be marked as a user-added control.","pos":[500501,500593]},{"pos":[500600,500612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[500614,500687]},{"pos":[500693,500713],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[500715,500772]},{"pos":[500864,500874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[500876,500877]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[500880,500941]},{"content":"y","pos":[500953,500954]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[500957,501018]},{"content":"button","pos":[501030,501036]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[501039,501100]},{"content":"Ctrl","pos":[501112,501116]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[501119,501180]},{"content":"Shift","pos":[501192,501197]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[501200,501261]},{"pos":[501268,501280],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[501282,501321]},{"pos":[501328,501335],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[501337,501430]},{"pos":[501436,501452],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[501454,501519]},{"pos":[501607,501617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[501619,501620]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[501623,501684]},{"content":"y","pos":[501696,501697]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[501700,501761]},{"content":"button","pos":[501773,501779]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[501782,501843]},{"content":"Ctrl","pos":[501855,501859]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[501862,501923]},{"content":"Shift","pos":[501935,501940]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[501943,502004]},{"pos":[502011,502023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[502025,502064]},{"pos":[502071,502078],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[502080,502173]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[502174,502309]},{"pos":[502315,502331],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[502333,502398]},{"pos":[502486,502496],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[502498,502499]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[502502,502563]},{"content":"y","pos":[502575,502576]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[502579,502640]},{"content":"button","pos":[502652,502658]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[502661,502722]},{"content":"Ctrl","pos":[502734,502738]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[502741,502802]},{"content":"Shift","pos":[502814,502819]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[502822,502883]},{"pos":[502890,502902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[502904,502943]},{"pos":[502950,502957],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[502959,503052]},{"pos":[503058,503072],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[503074,503146]},{"pos":[503232,503242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[503244,503245]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[503248,503309]},{"content":"y","pos":[503321,503322]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[503325,503386]},{"content":"button","pos":[503398,503404]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[503407,503468]},{"content":"Ctrl","pos":[503480,503484]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[503487,503548]},{"content":"Shift","pos":[503560,503565]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[503568,503629]},{"pos":[503636,503648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[503650,503689]},{"pos":[503696,503703],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[503705,503798]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[503799,503934]},{"pos":[503940,503958],"content":"Method multiSelect","linkify":"Method multiSelect","nodes":[{"content":"Method multiSelect","pos":[0,18]}]},{"pos":[504006,504016],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504018,504023]},{"pos":[504032,504044],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504050,504061],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.","pos":[504063,504204]},{"pos":[504245,504255],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504257,504262]},{"pos":[504271,504283],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[504285,504353]},{"pos":[504360,504367],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[504369,504463]},{"content":"Begins with a letter.","pos":[504469,504490]},{"content":"Doesn't exceed 250 characters.","pos":[504495,504525]},{"content":"Can include numbers and underscore characters.","pos":[504530,504576]},{"content":"Cannot include punctuation or spaces.","pos":[504581,504618]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[504623,504741]},{"pos":[504747,504770],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[504823,504833],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504835,504840]},{"pos":[504849,504861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504867,504885],"content":"Method needsRecord","linkify":"Method needsRecord","nodes":[{"content":"Method needsRecord","pos":[0,18]}]},{"pos":[504933,504943],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[504945,504950]},{"pos":[504959,504971],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[504977,504995],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[505043,505053],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[505055,505060]},{"pos":[505069,505081],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[505087,505108],"content":"Method normalResource","linkify":"Method normalResource","nodes":[{"content":"Method normalResource","pos":[0,21]}]},{"pos":[505159,505169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[505171,505176]},{"pos":[505185,505197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[505203,505230],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[505282,505294],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[505300,505320],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[505322,505367]},{"pos":[505414,505426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[505428,505463]},{"pos":[505469,505483],"content":"Method primary","linkify":"Method primary","nodes":[{"content":"Method primary","pos":[0,14]}]},{"pos":[505535,505545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[505547,505552]},{"pos":[505561,505573],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[505579,505596],"content":"Method saveRecord","linkify":"Method saveRecord","nodes":[{"content":"Method saveRecord","pos":[0,17]}]},{"pos":[505651,505661],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[505663,505668]},{"pos":[505677,505689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[505695,505713],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[505715,505774]},{"pos":[505842,505852],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[505854,505859]},{"content":"The ID of the security key to assign to the control; optional.","pos":[505862,505924]},{"pos":[505931,505943],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[505945,506044]},{"pos":[506050,506065],"content":"Method shortkey","linkify":"Method shortkey","nodes":[{"content":"Method shortkey","pos":[0,15]}]},{"pos":[506110,506120],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[506122,506127]},{"pos":[506136,506148],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[506154,506176],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[506178,506218]},{"pos":[506273,506283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[506285,506295]},{"content":"The ID of the menu to show.","pos":[506298,506325]},{"pos":[506332,506344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[506346,506405]},{"pos":[506411,506430],"content":"Method showShortCut","linkify":"Method showShortCut","nodes":[{"content":"Method showShortCut","pos":[0,19]}]},{"pos":[506487,506497],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[506499,506504]},{"pos":[506513,506525],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[506531,506542],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[506544,506671]},{"pos":[506720,506730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[506732,506737]},{"content":"The value to assign to the skip property of the control; optional.","pos":[506740,506806]},{"pos":[506813,506825],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[506827,506933]},{"pos":[506940,506947],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[506949,507144]},{"pos":[507150,507162],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[507204,507214],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[507216,507221]},{"pos":[507230,507242],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[507248,507259],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[507300,507310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[507312,507317]},{"pos":[507326,507338],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[507344,507363],"content":"Method toggleButton","linkify":"Method toggleButton","nodes":[{"content":"Method toggleButton","pos":[0,19]}]},{"pos":[507412,507422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[507424,507429]},{"pos":[507438,507450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[507456,507474],"content":"Method toggleValue","linkify":"Method toggleValue","nodes":[{"content":"Method toggleValue","pos":[0,18]}]},{"pos":[507522,507532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[507534,507539]},{"pos":[507548,507560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[507566,507580],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[507582,507625]},{"pos":[507658,507670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[507672,507774]},{"pos":[507781,507788],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[507790,507862]},{"pos":[507868,507878],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[507880,507942]},{"pos":[507992,508002],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508004,508009]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[508012,508096]},{"content":"mode","pos":[508108,508112]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[508115,508199]},{"pos":[508206,508218],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[508220,508269]},{"pos":[508275,508289],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[508291,508350]},{"pos":[508394,508404],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508406,508411]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[508414,508498]},{"pos":[508505,508517],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[508519,508573]},{"pos":[508579,508594],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[508596,508658]},{"pos":[508703,508713],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508715,508720]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[508723,508802]},{"pos":[508809,508821],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[508823,508872]},{"pos":[508878,508889],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[508930,508940],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[508942,508947]},{"pos":[508956,508968],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[508974,508990],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[509044,509054],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[509056,509061]},{"pos":[509070,509082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[509088,509115],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[509179,509189],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[509191,509195]},{"pos":[509204,509216],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[509222,509237],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[509239,509282]},{"pos":[509327,509337],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[509339,509344]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[509347,509419]},{"pos":[509426,509438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[509440,509470]},{"pos":[509476,509495],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[509497,509545]},{"pos":[509594,509604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[509606,509611]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[509614,509691]},{"pos":[509698,509710],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[509712,509747]},{"pos":[509753,509773],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[509775,509834]},{"pos":[509884,509894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[509896,509901]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[509904,509992]},{"pos":[509999,510011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[510013,510059]},{"pos":[510065,510083],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[510085,510168]},{"pos":[510216,510226],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[510228,510233]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[510236,510316]},{"pos":[510323,510335],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[510337,510393]},{"pos":[510399,510416],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[510418,510470]},{"pos":[510517,510527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[510529,510534]},{"content":"The user height for the control; optional.","pos":[510537,510579]},{"pos":[510586,510598],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[510600,510639]},{"pos":[510645,510660],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[510662,510744]},{"pos":[510789,510799],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[510801,510806]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[510809,510888]},{"pos":[510895,510907],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[510909,510964]},{"pos":[510971,510978],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[510980,511150]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[511151,511226]},{"content":"This method lets you programmatically determine and set the value.","pos":[511227,511293]},{"pos":[511299,511322],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[511324,511380]},{"pos":[511433,511443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[511445,511450]},{"content":"The organization container to set for the control; optional.","pos":[511453,511513]},{"pos":[511520,511532],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[511534,511577]},{"pos":[511583,511604],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[511606,511660]},{"pos":[511711,511721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[511723,511728]},{"content":"The organization sibling to set for the control; optional.","pos":[511731,511789]},{"pos":[511796,511808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[511810,511851]},{"pos":[511857,511878],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[511880,511929]},{"pos":[511980,511990],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[511992,511997]},{"content":"The user label text to set for the control; optional.","pos":[512000,512053]},{"pos":[512060,512072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[512074,512110]},{"pos":[512116,512140],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[512142,512195]},{"pos":[512249,512259],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[512261,512266]},{"content":"The user security level to set for the control; optional.","pos":[512269,512326]},{"pos":[512333,512345],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[512347,512387]},{"pos":[512393,512408],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[512410,512558]},{"pos":[512603,512613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[512615,512620]},{"content":"The value to assign to the userSkip property; optional.","pos":[512623,512678]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[512679,512774]},{"pos":[512781,512793],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[512795,512864]},{"pos":[512870,512886],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[512888,512939]},{"pos":[512985,512995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[512997,513002]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[513005,513071]},{"pos":[513078,513090],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[513092,513221]},{"pos":[513228,513235],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[513237,513331]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[513332,513448],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[513449,513599]},{"pos":[513605,513617],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[513667,513677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[513679,513684]},{"pos":[513693,513705],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[513711,513733],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[513735,513796]},{"pos":[513865,513875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[513877,513882]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[513885,513962]},{"content":"mode","pos":[513974,513978]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[513981,514058]},{"pos":[514065,514077],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[514079,514127]},{"pos":[514133,514159],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[514161,514220]},{"pos":[514285,514295],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[514297,514301]},{"pos":[514310,514322],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[514324,514378]},{"pos":[514384,514411],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[514413,514474]},{"pos":[514531,514541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[514543,514548]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[514551,514629]},{"pos":[514636,514648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[514650,514698]},{"pos":[514704,514718],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[514720,514790]},{"pos":[514842,514852],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[514854,514859]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[514862,514934]},{"pos":[514941,514953],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[514955,515004]},{"pos":[515010,515022],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[515024,515062]},{"pos":[515114,515124],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[515126,515131]},{"content":"mode","pos":[515145,515149]},{"pos":[515158,515170],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[515172,515207]},{"pos":[515214,515221],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[515223,515276]},{"content":"Calculate the width according to the following table:","pos":[515277,515330]},{"content":"Mode.","pos":[515334,515339]},{"content":"Width calculation.","pos":[515352,515370]},{"content":"-1 Exact.","pos":[515556,515565]},{"content":"The exact width in pixels of the controls is used.","pos":[515574,515624]},{"content":"0 Auto.","pos":[515667,515674]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[515685,515773]},{"content":"1 Column width.","pos":[515778,515793]},{"content":"The layout of the form determines the width of the control.","pos":[515796,515855]},{"content":"The width and width calculation mode can be set separately.","pos":[515888,515947]},{"pos":[515953,515969],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[515971,516033]},{"pos":[516079,516089],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[516091,516096]},{"pos":[516105,516117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[516119,516180]},{"pos":[516187,516194],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[516196,516249]},{"content":"Mode.","pos":[516253,516258]},{"content":"Width Calculation.","pos":[516269,516287]},{"content":"Exact.","pos":[516471,516477]},{"content":"The exact width in pixels of the controls is used.","pos":[516487,516537]},{"content":"Auto.","pos":[516580,516585]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[516596,516684]},{"content":"Column width.","pos":[516689,516702]},{"content":"The layout of the form determines the width of the control.","pos":[516705,516764]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[516797,516880]},{"pos":[516886,516903],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[516905,516943]},{"pos":[516990,517000],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[517002,517007]},{"pos":[517016,517028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[517030,517065]},{"pos":[517072,517079],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[517081,517154]},{"pos":[517160,517189],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[517307,517317],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[517319,517335]},{"content":"objectMethodToCall","pos":[517349,517367]},{"content":"overrideObject","pos":[517381,517395]},{"pos":[517403,517414],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[517416,517468]},{"pos":[517498,517516],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[517601,517611],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[517613,517619]},{"content":"e","pos":[517633,517634]},{"pos":[517642,517657],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[517659,517705]},{"pos":[517739,517756],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[517758,517812]},{"pos":[517848,517869],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[517871,517940]},{"pos":[518002,518012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[518014,518019]},{"content":"The preferred height of the control.","pos":[518022,518058]},{"content":"height","pos":[518070,518076]},{"content":"The preferred height of the control.","pos":[518079,518115]},{"pos":[518121,518132],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[518134,518232]},{"pos":[518318,518328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[518330,518340]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[518343,518428]},{"content":"dragMode","pos":[518440,518448]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[518451,518536]},{"content":"x","pos":[518548,518549]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[518552,518637]},{"content":"y","pos":[518649,518650]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[518653,518738]},{"pos":[518744,518758],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[518760,518821]},{"pos":[518855,518862],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[518864,518992]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[518993,519097]},{"pos":[519103,519117],"content":"Method clicked","linkify":"Method clicked","nodes":[{"content":"Method clicked","pos":[0,14]}]},{"pos":[519150,519167],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[519251,519261],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[519263,519269]},{"content":"e","pos":[519283,519284]},{"pos":[519292,519308],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[519310,519352]},{"pos":[519387,519402],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[519404,519434]},{"pos":[519468,519491],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[519493,519534]},{"pos":[519576,519589],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[519591,519691]},{"pos":[519773,519783],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[519785,519795]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[519798,519883]},{"content":"dragMode","pos":[519895,519903]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[519906,519991]},{"content":"x","pos":[520003,520004]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[520007,520092]},{"content":"y","pos":[520104,520105]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[520108,520193]},{"pos":[520199,520215],"content":"Method OnClicked","linkify":"Method OnClicked","nodes":[{"content":"Method OnClicked","pos":[0,16]}]},{"pos":[520298,520308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[520310,520316]},{"content":"e","pos":[520330,520331]},{"pos":[520339,520349],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[520351,520384]},{"pos":[520413,520427],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[520429,520469]},{"pos":[520502,520518],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[520520,520616]},{"pos":[520651,520668],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[520670,520740]},{"pos":[520830,520840],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[520842,520843]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[520846,520907]},{"content":"y","pos":[520919,520920]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[520923,520984]},{"content":"button","pos":[520996,521002]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[521005,521066]},{"content":"Ctrl","pos":[521078,521082]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[521085,521146]},{"content":"Shift","pos":[521158,521163]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[521166,521227]},{"pos":[521233,521254],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[521256,521277]},{"pos":[521317,521329],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[521331,521385]},{"pos":[521416,521434],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[521436,521507]},{"pos":[521558,521568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[521570,521579]},{"content":"The string value to use to filter data; optional.","pos":[521582,521631]},{"pos":[521636,521664],"content":"Class FormButtonGroupControl","linkify":"Class FormButtonGroupControl","nodes":[{"content":"Class FormButtonGroupControl","pos":[0,28]}]},{"pos":[521723,521730],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[521736,521744],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[521750,521757],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[521761,521767]},{"content":"Description","pos":[521879,521890]},{"content":"public FormControl addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[522341,522445],"source":"public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[522631,522726],"source":"public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>)","pos":[522921,523036],"source":"public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\])"},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[523211,523255],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[523501,523548],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[523791,523837],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[523909,523949]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[524081,524124],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[524199,524266]},{"content":"public boolean allowSysSetup()","pos":[524371,524401]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[524489,524572]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[524661,524701],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[524951,524989],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[525241,525280],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[525531,525568],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[525821,525870],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[525939,526037]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[526111,526152],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[526229,526278]},{"content":"public Image backgroundImage(<ph id=\"ph1\">\\[</ph>Image image<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int drawMode<ph id=\"ph4\">\\]</ph>)","pos":[526401,526464],"source":"public Image backgroundImage(\\[Image image\\], \\[int drawMode\\])"},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[526691,526726],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[526809,526871]},{"content":"public int beginDrag(int x, int y)","pos":[526981,527015]},{"content":"Is called when the user starts to drag a form control.","pos":[527099,527153]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[527271,527301],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[527389,527456]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[527561,527618],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[527851,527902],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[528141,528184],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[528431,528485]},{"content":"Retrieves the size of the control.","pos":[528549,528583]},{"content":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[528721,528806],"source":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"public boolean canContain(FormControl control)","pos":[529011,529057]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[529301,529334],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[529419,529458]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[529591,529629],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[529709,529752]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[529881,529918],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[529999,530044]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[530171,530226],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[530461,530513],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[530751,530807],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[531041,531091],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[531331,531373],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[531621,531659],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[531911,531983],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[532029,532096]},{"content":"public List configurationKeyEx()","pos":[532201,532233]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[532319,532415]},{"content":"public boolean contains(FormControl control)","pos":[532491,532535]},{"content":"public int controlCount()","pos":[532781,532806]},{"content":"public FormControl controlNum(int controlNo)","pos":[533071,533115]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[533361,533405],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[533479,533557]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[533651,533710],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[533941,533983],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[534059,534184]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[534231,534271],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[534349,534414]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[534521,534560],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[534639,534806]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[534811,534845],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[534929,535010]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[535101,535182]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[535219,535313]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[535391,535468]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[535509,535605]},{"content":"public str dragText()","pos":[535681,535702]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[535799,535869]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[535971,536012],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[536089,536140]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[536261,536291],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[536379,536436]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[536551,536585],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[536669,536726]},{"content":"public int framePosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[536841,536880],"source":"public int framePosition(\\[int value\\])"},{"content":"public int frameType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[537131,537166],"source":"public int frameType(\\[int value\\])"},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[537421,537463],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[537539,537627]},{"content":"public boolean hasUserSetting()","pos":[537711,537742]},{"content":"Indicates whether the control has custom user settings.","pos":[537829,537884]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[538001,538043],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[538119,538158]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[538291,538327],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[538409,538471]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[538581,538618],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[538699,538738]},{"content":"public str helpField()","pos":[538871,538893]},{"content":"Retrieves the Help text for the control.","pos":[538989,539029]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[539161,539195],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[539279,539383]},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[539451,539496],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[539741,539782],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[539859,539922]},{"content":"public int hWnd()","pos":[540031,540048]},{"content":"Retrieves the Windows handle for the control.","pos":[540149,540194]},{"content":"public boolean isContainer()","pos":[540321,540349]},{"content":"public boolean isDisplayed()","pos":[540611,540639]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[540729,540795]},{"content":"public boolean isRestricted()","pos":[540901,540930]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[541019,541086]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[541191,541247]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[541309,541410]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[541481,541521],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str keyTip(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[541771,541803],"source":"public str keyTip(\\[str value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[542061,542101],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[542179,542243]},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[542351,542406],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[542641,542690],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[542931,542972],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[543221,543255],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[543339,543400]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[543511,543546],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[543629,543693]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[543801,543848],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[543919,543972]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[544091,544170]},{"content":"Is called when the control is double-clicked by the user.","pos":[544209,544266]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[544381,544456]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[544499,544564]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[544671,544746]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[544789,544854]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[544961,545034]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[545079,545151]},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterId<ph id=\"ph2\">\\]</ph>)","pos":[545251,545311],"source":"public int moveControl(int controlId, \\[int insertAfterId\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[545541,545571],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[545659,545794]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[545831,545873],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[546121,546160]},{"content":"public FormControl parentControl()","pos":[546411,546445]},{"content":"Retrieves the parent control for the control.","pos":[546529,546574]},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[546701,546757],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[546991,547041],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[547281,547323],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[547571,547628],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[547689,547748]},{"content":"public int showContextMenu(int menuHandle)","pos":[547861,547903]},{"content":"Shows the shortcut menu for the control.","pos":[547979,548019]},{"content":"public boolean sizeHeight(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[548151,548195],"source":"public boolean sizeHeight(\\[boolean value\\])"},{"content":"public boolean sizeWidth(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[548441,548484],"source":"public boolean sizeWidth(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[548731,548769],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[548849,548976]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[549021,549065],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[549311,549342],"source":"public int style(\\[int value\\])"},{"content":"public str toolTip()","pos":[549601,549621]},{"content":"Retrieves the tooltip text for the control.","pos":[549719,549762]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[549891,549930],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[550009,550071]},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[550181,550235],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[550471,550519],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[550761,550801],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[551051,551084],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[551169,551228]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[551341,551375],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[551459,551521]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[551631,551661],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[551921,551964],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[552039,552106]},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[552211,552262]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[552501,552535],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[552619,552662]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[552791,552829],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[552909,552957]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[553081,553120],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[553199,553258]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[553371,553408],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[553489,553572]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[553661,553697],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[553779,553831]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[553951,553985],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[554069,554151]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[554241,554283],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[554359,554415]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[554531,554571],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[554649,554703]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[554821,554861],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[554939,554988]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[555111,555154],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[555229,555282]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[555401,555435],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls on the form.","pos":[555519,555667]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[555691,555726],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[555809,555860]},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[555981,556028],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[556271,556331],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[556389,556450]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[556561,556615],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[556679,556738]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[556851,556897],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[556969,557030]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[557141,557182],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[557259,557329]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[557431,557472],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[557549,557587]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[557721,557756],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[557839,557901]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[558011,558047],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[558129,558167]},{"content":"public void resetUserSetting()","pos":[558301,558331]},{"content":"Resets the user settings for the control.","pos":[558419,558460]},{"content":"public void cut()","pos":[558591,558608]},{"content":"Cuts the contents of the control.","pos":[558709,558742]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[558881,558956],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void copy()","pos":[559171,559189]},{"content":"Copies the contents of the control to the clipboard.","pos":[559289,559341]},{"content":"public void arrange()","pos":[559461,559482]},{"content":"public void dragLeave()","pos":[559751,559774]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[559869,559965]},{"content":"public void mouseLeave()","pos":[560041,560065]},{"content":"Indicates that the mouse pointer has left the control.","pos":[560159,560213]},{"content":"public void displayControl()","pos":[560331,560359]},{"content":"Displays the control.","pos":[560449,560470]},{"content":"public void prefColumnSize(int width, int height)","pos":[560621,560670]},{"content":"Specifies the preferred column width and height for the form control.","pos":[560739,560808]},{"content":"public void lostFocus()","pos":[560911,560934]},{"content":"Indicates that the control has lost focus.","pos":[561029,561071]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[561201,561274]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[561319,561417]},{"content":"public void endDrag()","pos":[561491,561512]},{"content":"Is called when the user has finished dragging a form control.","pos":[561609,561670]},{"content":"public void inputSearch(str searchStr)","pos":[561781,561819]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[561899,561970]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[562071,562147],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void gotFocus()","pos":[562361,562383]},{"content":"Indicates that the control has received focus.","pos":[562479,562525]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[562651,562758],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void jumpRef()","pos":[562941,562962]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[563231,563308]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[563349,563419]},{"content":"public void setFocus()","pos":[563521,563543]},{"content":"Sets the focus on the control.","pos":[563639,563669]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[563811,563848],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[564101,564170]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[564219,564319]},{"content":"public void paste()","pos":[564391,564410]},{"content":"Pastes the contents of the clipboard into the control.","pos":[564509,564563]},{"content":"public void context()","pos":[564681,564702]},{"content":"Shows the shortcut menu for the control.","pos":[564799,564839]},{"pos":[564974,564991],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"pos":[565106,565116],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[565118,565129]},{"content":"controlName","pos":[565143,565154]},{"content":"insertAfter","pos":[565168,565179]},{"pos":[565188,565200],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565206,565225],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[565331,565341],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[565343,565355]},{"content":"controlName","pos":[565369,565380]},{"content":"insertAfter","pos":[565394,565405]},{"pos":[565414,565426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565432,565451],"content":"Method addDataField","linkify":"Method addDataField","nodes":[{"content":"Method addDataField","pos":[0,19]}]},{"pos":[565575,565585],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[565587,565599]},{"content":"fieldId","pos":[565613,565620]},{"content":"insertAfter","pos":[565634,565645]},{"content":"arrayIndex","pos":[565659,565669]},{"pos":[565678,565690],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565696,565713],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[565768,565778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[565780,565785]},{"pos":[565794,565806],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565812,565832],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[565890,565900],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[565902,565907]},{"pos":[565916,565928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[565934,565953],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[565955,565995]},{"pos":[566052,566062],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[566064,566069]},{"content":"The new value for the property; optional.","pos":[566072,566113]},{"pos":[566120,566132],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[566134,566190]},{"pos":[566197,566204],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[566206,566285]},{"pos":[566291,566307],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[566309,566376]},{"pos":[566430,566440],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[566442,566447]},{"content":"The value to be assigned to the allowEdit property.","pos":[566450,566501]},{"pos":[566508,566520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[566522,566574]},{"pos":[566581,566588],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[566590,566716]},{"pos":[566722,566742],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[566744,566827]},{"pos":[566870,566882],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[566884,566952]},{"pos":[566958,566979],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[567030,567040],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[567042,567047]},{"pos":[567056,567068],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[567074,567093],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[567142,567152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[567154,567159]},{"pos":[567168,567180],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[567186,567206],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[567256,567266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[567268,567273]},{"pos":[567282,567294],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[567300,567318],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[567366,567376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[567378,567383]},{"pos":[567392,567404],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[567410,567432],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[567434,567532]},{"pos":[567592,567602],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[567604,567609]},{"content":"The property is set to this value, if supplied.","pos":[567612,567659]},{"pos":[567666,567678],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[567680,567759]},{"pos":[567766,567773],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[567775,567812]},{"pos":[567818,567840],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[567842,567891]},{"pos":[567943,567953],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[567955,567960]},{"pos":[567969,567981],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[567983,568027]},{"pos":[568034,568041],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[568043,568111]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[568117,568187]},{"content":"The second byte contains a value for green.","pos":[568192,568235]},{"content":"The third byte contains a value for blue.","pos":[568240,568281]},{"content":"The high-order byte must be zero.","pos":[568286,568319]},{"content":"The maximum value for a single byte is 255.","pos":[568324,568367]},{"pos":[568373,568395],"content":"Method backgroundImage","linkify":"Method backgroundImage","nodes":[{"content":"Method backgroundImage","pos":[0,22]}]},{"pos":[568467,568477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"image","pos":[568479,568484]},{"content":"drawMode","pos":[568498,568506]},{"pos":[568515,568527],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[568533,568549],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[568551,568613]},{"pos":[568659,568669],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[568671,568676]},{"pos":[568685,568697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[568699,568760]},{"pos":[568766,568782],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[568784,568838]},{"pos":[568885,568895],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[568897,568898]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[568901,568971]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[568972,569039]},{"content":"y","pos":[569051,569052]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[569055,569125]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[569126,569193]},{"pos":[569200,569212],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[569214,569253]},{"pos":[569260,569267],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[569269,569350]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[569351,569455]},{"pos":[569461,569472],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[569474,569541]},{"pos":[569582,569592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[569594,569599]},{"pos":[569608,569620],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[569622,569672]},{"pos":[569679,569686],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[569688,569760]},{"content":"0 Use the default font weight.","pos":[569766,569796]},{"content":"1 Thin.","pos":[569801,569808]},{"content":"2 Extra-light.","pos":[569813,569827]},{"content":"3 Light.","pos":[569832,569840]},{"content":"4 Normal.","pos":[569845,569854]},{"content":"5 Medium.","pos":[569859,569868]},{"content":"6 Semibold.","pos":[569873,569884]},{"content":"7 Bold.","pos":[569889,569896]},{"content":"8 Extra-bold.","pos":[569901,569914]},{"content":"9 Heavy.","pos":[569919,569927]},{"pos":[569933,569952],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[570018,570028],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[570030,570035]},{"content":"mode","pos":[570049,570053]},{"pos":[570062,570074],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[570080,570103],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[570165,570175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[570177,570181]},{"pos":[570190,570202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[570208,570232],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[570286,570296],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[570298,570303]},{"pos":[570312,570324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[570330,570352],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[570354,570388]},{"pos":[570455,570465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[570467,570472]},{"content":"The number of lines to use to determine the height.","pos":[570475,570526]},{"content":"lines","pos":[570538,570543]},{"content":"The number of lines to use to determine the height.","pos":[570546,570597]},{"pos":[570604,570616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[570618,570664]},{"pos":[570670,570692],"content":"Method canAddDataField","linkify":"Method canAddDataField","nodes":[{"content":"Method canAddDataField","pos":[0,22]}]},{"pos":[570788,570798],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[570800,570812]},{"content":"fieldId","pos":[570826,570833]},{"content":"arrayIndex","pos":[570847,570857]},{"pos":[570866,570878],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[570884,570901],"content":"Method canContain","linkify":"Method canContain","nodes":[{"content":"Method canContain","pos":[0,17]}]},{"pos":[570960,570970],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[570972,570979]},{"pos":[570988,571000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[571006,571020],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[571022,571061]},{"pos":[571105,571115],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[571117,571122]},{"pos":[571131,571143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[571145,571199]},{"pos":[571205,571224],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[571226,571269]},{"pos":[571318,571328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[571330,571335]},{"pos":[571344,571356],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[571358,571420]},{"pos":[571427,571434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[571436,571540]},{"content":"Value.","pos":[571544,571550]},{"content":"Description.","pos":[571553,571565]},{"content":"0","pos":[571612,571613]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[571621,571634],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[571646,571647]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[571655,571671],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[571680,571681]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[571689,571704],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[571714,571716]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[571723,571735],"source":"MAC\\_CHARSET"},{"content":"128","pos":[571748,571751]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[571757,571774],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[571782,571785]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[571791,571806],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[571816,571819]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[571825,571840],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[571850,571853]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[571859,571879],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[571884,571887]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[571893,571907],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[571918,571921]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[571927,571943],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[571952,571955]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[571961,571980],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[571986,571989]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[571995,572010],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[572020,572023]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[572029,572045],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[572054,572057]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[572063,572082],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[572088,572091]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[572097,572109],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of Microsoft Windows.","pos":[572121,572210]},{"content":"Value.","pos":[572214,572220]},{"content":"Description.","pos":[572223,572235]},{"content":"130","pos":[572270,572273]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[572279,572293],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Microsoft Windows.","pos":[572297,572393]},{"content":"Value.","pos":[572397,572403]},{"content":"Description.","pos":[572406,572418]},{"content":"177","pos":[572455,572458]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[572464,572479],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[572484,572487]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[572493,572508],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Microsoft Windows.","pos":[572512,572599]},{"content":"Value.","pos":[572603,572609]},{"content":"Description.","pos":[572612,572624]},{"content":"222","pos":[572657,572660]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[572666,572679],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[572683,572762]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[572763,572969],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972."},{"pos":[572975,572993],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[572995,573040]},{"pos":[573088,573098],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[573100,573105]},{"pos":[573114,573126],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[573128,573171]},{"pos":[573178,573185],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[573187,573248]},{"content":"Value.","pos":[573252,573258]},{"content":"Style.","pos":[573261,573267]},{"content":"0","pos":[573340,573341]},{"content":"Default.","pos":[573349,573357]},{"content":"1","pos":[573384,573385]},{"content":"The Microsoft Windows palette.","pos":[573393,573423]},{"content":"2","pos":[573428,573429]},{"content":"The true-color scheme.","pos":[573437,573459]},{"pos":[573475,573489],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[573553,573563],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[573565,573570]},{"content":"mode","pos":[573584,573588]},{"pos":[573597,573609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[573615,573633],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[573696,573706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[573708,573712]},{"pos":[573721,573733],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[573739,573757],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[573822,573832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[573834,573839]},{"content":"mode","pos":[573853,573857]},{"pos":[573866,573878],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[573884,573906],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[573967,573977],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[573979,573983]},{"pos":[573992,574004],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[574010,574033],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[574086,574096],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[574098,574103]},{"pos":[574112,574124],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[574130,574149],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[574198,574208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[574210,574215]},{"pos":[574224,574236],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[574242,574265],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[574267,574334]},{"pos":[574417,574427],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[574429,574434]},{"content":"The ID of the configuration key that is being assigned to the control; optional.","pos":[574437,574517]},{"pos":[574524,574536],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[574538,574610]},{"pos":[574617,574624],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[574626,574707]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[574708,574801]},{"pos":[574807,574832],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[574834,574930]},{"pos":[574975,574987],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[574989,575075]},{"pos":[575082,575089],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[575091,575140]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[575141,575289]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[575290,575424]},{"pos":[575430,575445],"content":"Method contains","linkify":"Method contains","nodes":[{"content":"Method contains","pos":[0,15]}]},{"pos":[575502,575512],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[575514,575521]},{"pos":[575530,575542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[575548,575567],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[575605,575617],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[575623,575640],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"pos":[575697,575707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[575709,575718]},{"pos":[575727,575739],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[575745,575770],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[575772,575850]},{"pos":[575905,575915],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[575917,575922]},{"content":"The string that contains the country region/codes to set; optional.","pos":[575925,575992]},{"pos":[575999,576011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[576013,576078]},{"pos":[576084,576116],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[576186,576196],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[576198,576203]},{"pos":[576212,576224],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[576230,576253],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[576255,576380]},{"pos":[576433,576443],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[576445,576450]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[576453,576527]},{"pos":[576534,576546],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[576548,576660]},{"pos":[576667,576674],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[576676,576803]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[576804,576897]},{"pos":[576903,576920],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[576922,576987]},{"pos":[577038,577048],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[577050,577055]},{"pos":[577064,577076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[577078,577123]},{"pos":[577129,577149],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[577151,577318]},{"pos":[577368,577378],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[577380,577385]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[577388,577462]},{"pos":[577469,577481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[577483,577611]},{"pos":[577617,577632],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[577634,577715]},{"pos":[577760,577770],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[577772,577777]},{"content":"An Integer data type that indicates whether the drag-and-drop behavior is enabled; optional.","pos":[577780,577872]},{"pos":[577879,577891],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[577893,577953]},{"pos":[577960,577967],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the FormControl::dragLeave, FormControl::dragOver, and FormControl::dragOverEx methods to specify the behavior.","pos":[577969,578084]},{"pos":[578090,578105],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[578107,578201]},{"pos":[578295,578305],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[578307,578317]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[578320,578405]},{"content":"dragMode","pos":[578417,578425]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[578428,578513]},{"content":"x","pos":[578525,578526]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[578529,578614]},{"content":"y","pos":[578626,578627]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[578630,578715]},{"pos":[578722,578734],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[578736,578801]},{"pos":[578807,578824],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[578826,578922]},{"pos":[579012,579022],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[579024,579034]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[579037,579122]},{"content":"dragMode","pos":[579134,579142]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[579145,579230]},{"content":"x","pos":[579242,579243]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[579246,579331]},{"content":"y","pos":[579343,579344]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[579347,579432]},{"pos":[579439,579451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[579453,579518]},{"pos":[579524,579539],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[579541,579611]},{"pos":[579645,579657],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[579659,579790]},{"pos":[579796,579810],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[579812,579863]},{"pos":[579915,579925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[579927,579932]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[579935,580007]},{"pos":[580014,580026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[580028,580076]},{"pos":[580083,580090],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[580092,580167]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[580168,580263]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[580264,580398]},{"pos":[580404,580415],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[580417,580474]},{"pos":[580515,580525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[580527,580532]},{"pos":[580541,580553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[580555,580610]},{"pos":[580616,580631],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[580633,580690]},{"pos":[580735,580745],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[580747,580752]},{"pos":[580761,580773],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[580775,580808]},{"pos":[580814,580834],"content":"Method framePosition","linkify":"Method framePosition","nodes":[{"content":"Method framePosition","pos":[0,20]}]},{"pos":[580884,580894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[580896,580901]},{"pos":[580910,580922],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[580928,580944],"content":"Method frameType","linkify":"Method frameType","nodes":[{"content":"Method frameType","pos":[0,16]}]},{"pos":[580990,581000],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[581002,581007]},{"pos":[581016,581028],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[581034,581051],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[581053,581141]},{"pos":[581194,581204],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[581206,581209]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[581212,581282]},{"pos":[581289,581301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[581303,581370]},{"pos":[581376,581397],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[581399,581454]},{"pos":[581498,581510],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[581512,581575]},{"pos":[581581,581594],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[581596,581635]},{"pos":[581688,581698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[581700,581705]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[581708,581783]},{"content":"mode","pos":[581795,581799]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[581802,581877]},{"pos":[581884,581896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[581898,581934]},{"pos":[581941,581948],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[581950,582057]},{"content":"Mode.","pos":[582061,582066]},{"content":"Height calculation.","pos":[582080,582099]},{"content":"-1 Exact.","pos":[582287,582296]},{"content":"The exact height in pixels of the controls is used.","pos":[582306,582357]},{"content":"0 Auto.","pos":[582400,582407]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[582419,582508]},{"content":"1 Column height.","pos":[582513,582529]},{"content":"The layout of the form determines the height of the control.","pos":[582532,582592]},{"content":"The height and height calculation mode can be set separately.","pos":[582625,582686]},{"pos":[582692,582709],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[582711,582773]},{"pos":[582820,582830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[582832,582837]},{"content":"An Integer data type value that indicates how control height is calculated; optional.","pos":[582840,582925]},{"pos":[582932,582944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[582946,582967]},{"pos":[582974,582981],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[582983,583037]},{"content":"Mode.","pos":[583041,583046]},{"content":"Height Calculation.","pos":[583058,583077]},{"content":"Exact.","pos":[583263,583269]},{"content":"The exact height in pixels of the controls is used.","pos":[583280,583331]},{"content":"Auto.","pos":[583374,583379]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[583391,583480]},{"content":"Column height.","pos":[583485,583499]},{"content":"The layout of the form determines the height of the control.","pos":[583502,583562]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[583595,583680]},{"pos":[583686,583704],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[583706,583745]},{"pos":[583793,583803],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[583805,583810]},{"content":"An Integer data type that specifies the height in pixels; optional.","pos":[583813,583880]},{"pos":[583887,583899],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[583901,583922]},{"pos":[583929,583936],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[583938,584028]},{"pos":[584034,584050],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[584052,584092]},{"pos":[584127,584139],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[584141,584229]},{"pos":[584236,584243],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[584245,584315]},{"content":"Use the helpText method to set the value of the Help text.","pos":[584316,584374]},{"pos":[584380,584395],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[584397,584501]},{"pos":[584546,584556],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[584558,584563]},{"content":"The value that is assigned as the help text for the control.","pos":[584566,584626]},{"pos":[584633,584645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[584647,584702]},{"pos":[584709,584716],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.","pos":[584718,584831]},{"pos":[584837,584855],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[584911,584921],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[584923,584928]},{"pos":[584937,584949],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[584955,584977],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[584979,585042]},{"pos":[585094,585104],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[585106,585111]},{"content":"The value to assign as the HierarchyParent value of the control.","pos":[585114,585178]},{"pos":[585185,585197],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[585199,585249]},{"pos":[585255,585266],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[585268,585313]},{"pos":[585343,585355],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[585357,585384]},{"pos":[585391,585398],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[585400,585444]},{"pos":[585450,585468],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[585509,585521],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[585527,585545],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[585547,585613]},{"pos":[585654,585666],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[585668,585719]},{"pos":[585726,585733],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[585735,585803]},{"pos":[585809,585828],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[585830,585897]},{"pos":[585939,585951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[585953,586005]},{"pos":[586011,586036],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[586038,586139]},{"pos":[586208,586218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[586220,586237]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[586240,586368]},{"pos":[586375,586387],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[586389,586548]},{"pos":[586555,586562],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[586564,586641]},{"content":"FormAllowUserSetup::No 0","pos":[586981,587005]},{"content":"No changes can be made to the control.","pos":[587016,587054]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[587055,587144]},{"content":"FormAllowUserSetup::Restricted 1","pos":[587149,587181]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[587184,587276]},{"content":"The user cannot move the control.","pos":[587277,587310]},{"content":"FormAllowUserSetup::Yes 2","pos":[587317,587342]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[587352,587444]},{"content":"The user can also move the control.","pos":[587445,587480]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[587484,587673]},{"pos":[587679,587692],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[587743,587753],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[587755,587760]},{"pos":[587769,587781],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[587787,587800],"content":"Method keyTip","linkify":"Method keyTip","nodes":[{"content":"Method keyTip","pos":[0,13]}]},{"pos":[587843,587853],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[587855,587860]},{"pos":[587869,587881],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[587887,587898],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[587900,587964]},{"pos":[588015,588025],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[588027,588032]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[588035,588121]},{"content":"mode","pos":[588133,588137]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[588140,588226]},{"pos":[588233,588245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[588247,588298]},{"pos":[588304,588321],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[588385,588395],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[588397,588402]},{"content":"mode","pos":[588416,588420]},{"pos":[588429,588441],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[588447,588468],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[588528,588538],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[588540,588544]},{"pos":[588553,588565],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[588571,588593],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[588645,588655],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[588657,588662]},{"pos":[588671,588683],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[588689,588704],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[588706,588767]},{"pos":[588812,588822],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[588824,588829]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[588832,588918]},{"pos":[588925,588937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[588939,588995]},{"pos":[589001,589017],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[589019,589083]},{"pos":[589129,589139],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[589141,589146]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[589149,589230]},{"pos":[589237,589249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[589251,589302]},{"pos":[589308,589328],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[589330,589383]},{"pos":[589441,589451],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[589453,589458]},{"content":"A Boolean value that indicates whether the control should be marked as a user-added control.","pos":[589461,589553]},{"pos":[589560,589572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[589574,589647]},{"pos":[589653,589673],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[589675,589732]},{"pos":[589824,589834],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[589836,589837]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[589840,589901]},{"content":"y","pos":[589913,589914]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[589917,589978]},{"content":"button","pos":[589990,589996]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[589999,590060]},{"content":"Ctrl","pos":[590072,590076]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[590079,590140]},{"content":"Shift","pos":[590152,590157]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[590160,590221]},{"pos":[590228,590240],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[590242,590281]},{"pos":[590288,590295],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[590297,590401]},{"pos":[590407,590423],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[590425,590490]},{"pos":[590578,590588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[590590,590591]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[590594,590655]},{"content":"y","pos":[590667,590668]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[590671,590732]},{"content":"button","pos":[590744,590750]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[590753,590814]},{"content":"Ctrl","pos":[590826,590830]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[590833,590894]},{"content":"Shift","pos":[590906,590911]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[590914,590975]},{"pos":[590982,590994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[590996,591035]},{"pos":[591042,591049],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[591051,591144]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[591145,591280]},{"pos":[591286,591302],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[591304,591369]},{"pos":[591457,591467],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[591469,591470]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[591473,591534]},{"content":"y","pos":[591546,591547]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[591550,591611]},{"content":"button","pos":[591623,591629]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[591632,591693]},{"content":"Ctrl","pos":[591705,591709]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[591712,591773]},{"content":"Shift","pos":[591785,591790]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[591793,591854]},{"pos":[591861,591873],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[591875,591914]},{"pos":[591921,591928],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[591930,592034]},{"pos":[592040,592054],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[592056,592128]},{"pos":[592214,592224],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[592226,592227]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[592230,592291]},{"content":"y","pos":[592303,592304]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[592307,592368]},{"content":"button","pos":[592380,592386]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[592389,592450]},{"content":"Ctrl","pos":[592462,592466]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[592469,592530]},{"content":"Shift","pos":[592542,592547]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[592550,592611]},{"pos":[592618,592630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[592632,592671]},{"pos":[592678,592685],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[592687,592780]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[592781,592916]},{"pos":[592922,592940],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"pos":[593011,593021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[593023,593032]},{"content":"insertAfterId","pos":[593046,593059]},{"pos":[593068,593080],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[593086,593097],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[593099,593234]},{"pos":[593275,593285],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[593287,593292]},{"content":"The name to assign to the control; optional.","pos":[593295,593339]},{"pos":[593346,593358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[593360,593424]},{"pos":[593431,593438],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[593440,593534]},{"content":"It must start with a letter.","pos":[593540,593568]},{"content":"It cannot exceed 250 characters.","pos":[593573,593605]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[593610,593664],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[593669,593709]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[593714,593824]},{"pos":[593830,593853],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[593906,593916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[593918,593923]},{"pos":[593932,593944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[593950,593977],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[594029,594041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[594047,594067],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[594069,594114]},{"pos":[594161,594173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[594175,594210]},{"pos":[594216,594234],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[594299,594309],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[594311,594316]},{"content":"mode","pos":[594330,594334]},{"pos":[594343,594355],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[594361,594383],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[594444,594454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[594456,594460]},{"pos":[594469,594481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[594487,594510],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[594563,594573],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[594575,594580]},{"pos":[594589,594601],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[594607,594625],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[594627,594686]},{"pos":[594754,594764],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[594766,594771]},{"content":"The ID of the security key to assign to the control; optional.","pos":[594774,594836]},{"pos":[594843,594855],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[594857,594956]},{"pos":[594962,594984],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[594986,595026]},{"pos":[595081,595091],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[595093,595103]},{"content":"The ID of the menu to show.","pos":[595106,595133]},{"pos":[595140,595152],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[595154,595213]},{"pos":[595219,595236],"content":"Method sizeHeight","linkify":"Method sizeHeight","nodes":[{"content":"Method sizeHeight","pos":[0,17]}]},{"pos":[595291,595301],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[595303,595308]},{"pos":[595317,595329],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[595335,595351],"content":"Method sizeWidth","linkify":"Method sizeWidth","nodes":[{"content":"Method sizeWidth","pos":[0,16]}]},{"pos":[595405,595415],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[595417,595422]},{"pos":[595431,595443],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[595449,595460],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[595462,595589]},{"pos":[595638,595648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[595650,595655]},{"content":"The value to assign to the skip property of the control; optional.","pos":[595658,595724]},{"pos":[595731,595743],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[595745,595851]},{"pos":[595857,595868],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[595923,595933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[595935,595948]},{"pos":[595957,595969],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[595975,595987],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[596029,596039],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[596041,596046]},{"pos":[596055,596067],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[596073,596087],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[596089,596132]},{"pos":[596165,596177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[596179,596281]},{"pos":[596288,596295],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[596297,596369]},{"pos":[596375,596385],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[596387,596449]},{"pos":[596499,596509],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[596511,596516]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[596519,596603]},{"content":"mode","pos":[596615,596619]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[596622,596706]},{"pos":[596713,596725],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[596727,596776]},{"pos":[596782,596798],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[596861,596871],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[596873,596878]},{"content":"mode","pos":[596892,596896]},{"pos":[596905,596917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[596923,596943],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[597002,597012],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[597014,597018]},{"pos":[597027,597039],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[597045,597066],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[597117,597127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[597129,597134]},{"pos":[597143,597155],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[597161,597175],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[597177,597236]},{"pos":[597280,597290],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[597292,597297]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[597300,597384]},{"pos":[597391,597403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[597405,597459]},{"pos":[597465,597480],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[597482,597544]},{"pos":[597589,597599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[597601,597606]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[597609,597688]},{"pos":[597695,597707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[597709,597758]},{"pos":[597764,597775],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[597816,597826],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[597828,597833]},{"pos":[597842,597854],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[597860,597876],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[597878,597945]},{"pos":[597999,598009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[598011,598016]},{"content":"The value to assign to the underline property of the control; optional.","pos":[598019,598090]},{"pos":[598097,598109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[598111,598175]},{"pos":[598181,598208],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[598272,598282],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[598284,598288]},{"pos":[598297,598309],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[598315,598330],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[598332,598375]},{"pos":[598420,598430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[598432,598437]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[598440,598512]},{"pos":[598519,598531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[598533,598563]},{"pos":[598569,598588],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[598590,598638]},{"pos":[598687,598697],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[598699,598704]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[598707,598784]},{"pos":[598791,598803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[598805,598840]},{"pos":[598846,598866],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[598868,598927]},{"pos":[598977,598987],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[598989,598994]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[598997,599085]},{"pos":[599092,599104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[599106,599152]},{"pos":[599158,599176],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[599178,599261]},{"pos":[599309,599319],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[599321,599326]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[599329,599409]},{"pos":[599416,599428],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[599430,599486]},{"pos":[599492,599509],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[599511,599563]},{"pos":[599610,599620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[599622,599627]},{"content":"The user height for the control; optional.","pos":[599630,599672]},{"pos":[599679,599691],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[599693,599732]},{"pos":[599738,599753],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[599755,599837]},{"pos":[599882,599892],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[599894,599899]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[599902,599981]},{"pos":[599988,600000],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[600002,600057]},{"pos":[600064,600071],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[600073,600243]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[600244,600319]},{"content":"This method lets you programmatically determine and set the value.","pos":[600320,600386]},{"pos":[600392,600415],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[600417,600473]},{"pos":[600526,600536],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[600538,600543]},{"content":"The organization container to set for the control; optional.","pos":[600546,600606]},{"pos":[600613,600625],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[600627,600670]},{"pos":[600676,600697],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[600699,600753]},{"pos":[600804,600814],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[600816,600821]},{"content":"The organization sibling to set for the control; optional.","pos":[600824,600882]},{"pos":[600889,600901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[600903,600944]},{"pos":[600950,600971],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[600973,601022]},{"pos":[601073,601083],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[601085,601090]},{"content":"The user label text to set for the control; optional.","pos":[601093,601146]},{"pos":[601153,601165],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[601167,601203]},{"pos":[601209,601233],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[601235,601288]},{"pos":[601342,601352],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[601354,601359]},{"content":"The user security level to set for the control; optional.","pos":[601362,601419]},{"pos":[601426,601438],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[601440,601480]},{"pos":[601486,601501],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls on the form.","pos":[601503,601651]},{"pos":[601696,601706],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[601708,601713]},{"content":"The value to assign to the userSkip property; optional.","pos":[601716,601771]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[601772,601867]},{"pos":[601874,601886],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[601888,601957]},{"pos":[601963,601979],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[601981,602032]},{"pos":[602078,602088],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[602090,602095]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[602098,602164]},{"pos":[602171,602183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[602185,602314]},{"pos":[602321,602328],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[602330,602424]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[602425,602541],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[602542,602692]},{"pos":[602698,602718],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[602776,602786],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[602788,602793]},{"pos":[602802,602814],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[602820,602842],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[602844,602905]},{"pos":[602974,602984],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[602986,602991]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[602994,603065]},{"content":"mode","pos":[603077,603081]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[603084,603155]},{"pos":[603162,603174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[603176,603224]},{"pos":[603230,603256],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[603258,603317]},{"pos":[603382,603392],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[603394,603398]},{"pos":[603407,603419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[603421,603475]},{"pos":[603481,603508],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[603510,603571]},{"pos":[603628,603638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[603640,603645]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[603648,603726]},{"pos":[603733,603745],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[603747,603795]},{"pos":[603801,603815],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[603817,603887]},{"pos":[603939,603949],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[603951,603956]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[603959,604031]},{"pos":[604038,604050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[604052,604101]},{"pos":[604107,604119],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[604121,604159]},{"pos":[604211,604221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[604223,604228]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[604231,604305]},{"content":"mode","pos":[604317,604321]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[604324,604398]},{"pos":[604405,604417],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[604419,604454]},{"pos":[604461,604468],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[604470,604576]},{"content":"Mode.","pos":[604580,604585]},{"content":"Width calculation.","pos":[604598,604616]},{"content":"-1 Exact.","pos":[604802,604811]},{"content":"The exact width in pixels of the controls is used.","pos":[604820,604870]},{"content":"0 Auto.","pos":[604913,604920]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[604931,605019]},{"content":"1 Column width.","pos":[605024,605039]},{"content":"The layout of the form determines the width of the control.","pos":[605042,605101]},{"content":"The width and width calculation mode can be set separately.","pos":[605134,605193]},{"pos":[605199,605215],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[605217,605279]},{"pos":[605325,605335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[605337,605342]},{"content":"An Integer data type value that indicates how control width is calculated; optional.","pos":[605345,605429]},{"pos":[605436,605448],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[605450,605511]},{"pos":[605518,605525],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[605527,605580]},{"content":"Mode.","pos":[605584,605589]},{"content":"Width Calculation.","pos":[605600,605618]},{"content":"Exact.","pos":[605802,605808]},{"content":"The exact width in pixels of the controls is used.","pos":[605818,605868]},{"content":"Auto.","pos":[605911,605916]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[605927,606015]},{"content":"Column width.","pos":[606020,606033]},{"content":"The layout of the form determines the width of the control.","pos":[606036,606095]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[606128,606211]},{"pos":[606217,606234],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[606236,606274]},{"pos":[606321,606331],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[606333,606338]},{"content":"An Integer data type that specifies the width in pixels; optional.","pos":[606341,606407]},{"pos":[606414,606426],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[606428,606463]},{"pos":[606470,606477],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[606479,606552]},{"pos":[606558,606581],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[606583,606624]},{"pos":[606666,606676],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[606678,606711]},{"pos":[606740,606757],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[606841,606851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[606853,606859]},{"content":"e","pos":[606873,606874]},{"pos":[606882,606893],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[606895,606947]},{"pos":[606977,606991],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[607024,607040],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[607042,607138]},{"pos":[607173,607190],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[607192,607246]},{"pos":[607282,607303],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[607305,607326]},{"pos":[607366,607387],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[607389,607458]},{"pos":[607520,607530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[607532,607537]},{"content":"The preferred height of the control.","pos":[607540,607576]},{"content":"height","pos":[607588,607594]},{"content":"The preferred height of the control.","pos":[607597,607633]},{"pos":[607639,607655],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[607657,607699]},{"pos":[607734,607745],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[607747,607845]},{"pos":[607931,607941],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[607943,607953]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[607956,608041]},{"content":"dragMode","pos":[608053,608061]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[608064,608149]},{"content":"x","pos":[608161,608162]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[608165,608250]},{"content":"y","pos":[608262,608263]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[608266,608351]},{"pos":[608357,608371],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[608373,608434]},{"pos":[608468,608475],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[608477,608605]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[608606,608710]},{"pos":[608716,608734],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[608736,608807]},{"pos":[608858,608868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[608870,608879]},{"content":"The string value to use to filter data; optional.","pos":[608882,608931]},{"pos":[608937,608955],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[609040,609050],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[609052,609058]},{"content":"e","pos":[609072,609073]},{"pos":[609081,609096],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[609098,609144]},{"pos":[609178,609207],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[609325,609335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[609337,609353]},{"content":"objectMethodToCall","pos":[609367,609385]},{"content":"overrideObject","pos":[609399,609413]},{"pos":[609421,609435],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[609468,609485],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[609487,609557]},{"pos":[609647,609657],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[609659,609660]},{"content":"A Booelan value of true if the SHIFT key is down.","pos":[609663,609712]},{"content":"y","pos":[609724,609725]},{"content":"A Booelan value of true if the SHIFT key is down.","pos":[609728,609777]},{"content":"button","pos":[609789,609795]},{"content":"A Booelan value of true if the SHIFT key is down.","pos":[609798,609847]},{"content":"Ctrl","pos":[609859,609863]},{"content":"A Booelan value of true if the SHIFT key is down.","pos":[609866,609915]},{"content":"Shift","pos":[609927,609932]},{"content":"A Booelan value of true if the SHIFT key is down.","pos":[609935,609984]},{"pos":[609990,610005],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[610007,610037]},{"pos":[610071,610084],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[610132,610142],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[610144,610153]},{"pos":[610161,610174],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[610176,610276]},{"pos":[610358,610368],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[610370,610380]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[610383,610468]},{"content":"dragMode","pos":[610480,610488]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[610491,610576]},{"content":"x","pos":[610588,610589]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[610592,610677]},{"content":"y","pos":[610689,610690]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[610693,610778]},{"pos":[610784,610796],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[610798,610852]},{"pos":[610883,610897],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[610899,610939]},{"pos":[610971,611003],"content":"Class FormButtonSeparatorControl","linkify":"Class FormButtonSeparatorControl","nodes":[{"content":"Class FormButtonSeparatorControl","pos":[0,32]}]},{"pos":[611066,611073],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[611079,611087],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[611093,611100],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[611104,611110]},{"content":"Description","pos":[611214,611225]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[611668,611714],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[611778,611818]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[611950,611993],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[612060,612127]},{"content":"public boolean allowSysSetup()","pos":[612232,612262]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[612342,612425]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[612514,612563],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[612624,612722]},{"content":"public int beginDrag(int x, int y)","pos":[612796,612830]},{"content":"Is called when the user starts to drag a form control.","pos":[612906,612960]},{"content":"public container calcControlSize(int chars, int lines)","pos":[613078,613132]},{"content":"Retrieves the size of the control.","pos":[613188,613222]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[613360,613432],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[613470,613537]},{"content":"public List configurationKeyEx()","pos":[613642,613674]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[613752,613848]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[613924,613968],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[614034,614112]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[614206,614248],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[614316,614441]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[614488,614527],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[614598,614765]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[614770,614804],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[614880,614961]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[615052,615133]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[615162,615256]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[615334,615411]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[615444,615540]},{"content":"public str dragText()","pos":[615616,615637]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[615726,615796]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[615898,615939],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[616008,616059]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[616180,616222],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[616290,616378]},{"content":"public boolean hasUserSetting()","pos":[616462,616493]},{"content":"Indicates whether the control has custom user settings.","pos":[616572,616627]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[616744,616786],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[616854,616893]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[617026,617062],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[617136,617198]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[617308,617345],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[617418,617457]},{"content":"public str helpField()","pos":[617590,617612]},{"content":"Retrieves the Help text for the control.","pos":[617700,617740]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[617872,617906],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[617982,618086]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[618154,618195],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[618264,618327]},{"content":"public int hWnd()","pos":[618436,618453]},{"content":"Retrieves the Windows handle for the control.","pos":[618546,618591]},{"content":"public boolean isContainer()","pos":[618718,618746]},{"content":"public boolean isDisplayed()","pos":[619000,619028]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[619110,619176]},{"content":"public boolean isRestricted()","pos":[619282,619311]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[619392,619459]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[619564,619620]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[619674,619775]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[619846,619886],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[619956,620020]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[620128,620162],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[620238,620299]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[620410,620445],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[620520,620584]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[620692,620739],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[620802,620855]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[620974,621053]},{"content":"Is called when the control is double-clicked by the user.","pos":[621084,621141]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[621256,621331]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[621366,621431]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[621538,621613]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[621648,621713]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[621820,621893]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[621930,622002]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[622102,622132],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[622212,622347]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[622384,622426],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[622666,622705]},{"content":"public FormControl parentControl()","pos":[622948,622982]},{"content":"Retrieves the parent control for the control.","pos":[623058,623103]},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[623230,623287],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[623340,623399]},{"content":"public int showContextMenu(int menuHandle)","pos":[623512,623554]},{"content":"Shows the shortcut menu for the control.","pos":[623622,623662]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[623794,623832],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[623904,624031]},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[624076,624106],"source":"public str text(\\[str value\\])"},{"content":"public str toolTip()","pos":[624358,624378]},{"content":"Retrieves the tooltip text for the control.","pos":[624468,624511]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[624640,624679],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[624750,624812]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[624922,624955],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[625032,625091]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[625204,625238],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[625314,625376]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[625486,625516],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[625768,625819]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[626050,626084],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[626160,626203]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[626332,626370],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[626442,626490]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[626614,626653],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[626724,626783]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[626896,626933],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[627006,627089]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[627178,627214],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[627288,627340]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[627460,627494],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[627570,627652]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[627742,627784],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[627852,627908]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[628024,628064],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[628134,628188]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[628306,628346],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[628416,628465]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[628588,628631],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[628698,628751]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[628870,628904],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[628980,629128]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[629152,629187],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[629262,629313]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[629434,629494],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[629544,629605]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[629716,629770],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[629826,629885]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[629998,630044],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[630108,630169]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[630280,630321],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[630390,630460]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[630562,630603],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[630672,630710]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[630844,630879],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[630954,631016]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[631126,631162],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[631236,631274]},{"content":"public void prefColumnSize(int width, int height)","pos":[631408,631457]},{"content":"Specifies the preferred column width and height for the form control.","pos":[631518,631587]},{"content":"public void gotFocus()","pos":[631690,631712]},{"content":"Indicates that the control has received focus.","pos":[631800,631846]},{"content":"public void endDrag()","pos":[631972,631993]},{"content":"Is called when the user has finished dragging a form control.","pos":[632082,632143]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[632254,632361],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void setFocus()","pos":[632536,632558]},{"content":"Sets the focus on the control.","pos":[632646,632676]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[632818,632891]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[632928,633026]},{"content":"public void paste()","pos":[633100,633119]},{"content":"Pastes the contents of the clipboard into the control.","pos":[633210,633264]},{"content":"public void resetUserSetting()","pos":[633382,633412]},{"content":"Resets the user settings for the control.","pos":[633492,633533]},{"content":"public void mouseLeave()","pos":[633664,633688]},{"content":"Indicates that the mouse pointer has left the control.","pos":[633774,633828]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[633946,634021],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void cut()","pos":[634228,634245]},{"content":"Cuts the contents of the control.","pos":[634338,634371]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[634510,634586],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dragLeave()","pos":[634792,634815]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[634902,634998]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[635074,635151]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[635184,635254]},{"content":"public void copy()","pos":[635356,635374]},{"content":"Copies the contents of the control to the clipboard.","pos":[635466,635518]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[635638,635707]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[635748,635848]},{"content":"public void lostFocus()","pos":[635920,635943]},{"content":"Indicates that the control has lost focus.","pos":[636030,636072]},{"content":"public void displayControl()","pos":[636202,636230]},{"content":"Displays the control.","pos":[636312,636333]},{"content":"public void context()","pos":[636484,636505]},{"content":"Shows the shortcut menu for the control.","pos":[636594,636634]},{"content":"public void inputSearch(str searchStr)","pos":[636766,636804]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[636876,636947]},{"pos":[637051,637070],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[637072,637112]},{"pos":[637169,637179],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[637181,637186]},{"content":"The new value for the property; optional.","pos":[637189,637230]},{"pos":[637237,637249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[637251,637307]},{"pos":[637314,637321],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[637323,637402]},{"pos":[637408,637424],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[637426,637493]},{"pos":[637547,637557],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[637559,637564]},{"content":"The value to assign to the allowEdit property.","pos":[637567,637613]},{"pos":[637620,637632],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[637634,637686]},{"pos":[637693,637700],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[637702,637828]},{"pos":[637834,637854],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[637856,637939]},{"pos":[637982,637994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[637996,638064]},{"pos":[638070,638092],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[638094,638192]},{"pos":[638252,638262],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[638264,638269]},{"content":"If specified, the property is set to this value.","pos":[638272,638320]},{"pos":[638327,638339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[638341,638420]},{"pos":[638427,638434],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[638436,638473]},{"pos":[638479,638495],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[638497,638551]},{"pos":[638598,638608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[638610,638611]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[638614,638684]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[638685,638752]},{"content":"y","pos":[638764,638765]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[638768,638838]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[638839,638906]},{"pos":[638913,638925],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[638927,638966]},{"pos":[638973,638980],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[638982,639063]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[639064,639168]},{"pos":[639174,639196],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[639198,639232]},{"pos":[639299,639309],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[639311,639316]},{"content":"The number of lines to use to determine the height.","pos":[639319,639370]},{"content":"lines","pos":[639382,639387]},{"content":"The number of lines to use to determine the height.","pos":[639390,639441]},{"pos":[639448,639460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[639462,639508]},{"pos":[639514,639537],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[639539,639606]},{"pos":[639689,639699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[639701,639706]},{"content":"The ID of the configuration key to assign to the control; optional.","pos":[639709,639776]},{"pos":[639783,639795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[639797,639869]},{"pos":[639876,639883],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[639885,639966]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[639967,640060]},{"pos":[640066,640091],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[640093,640189]},{"pos":[640234,640246],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[640248,640334]},{"pos":[640341,640348],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[640350,640399]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[640400,640548]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[640549,640683]},{"pos":[640689,640714],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[640716,640794]},{"pos":[640849,640859],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[640861,640866]},{"content":"The string that contains the country/region codes to set; optional.","pos":[640869,640936]},{"pos":[640943,640955],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[640957,641022]},{"pos":[641028,641051],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[641053,641178]},{"pos":[641231,641241],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[641243,641248]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[641251,641325]},{"pos":[641332,641344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[641346,641458]},{"pos":[641465,641472],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[641474,641601]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[641602,641695]},{"pos":[641701,641721],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[641723,641890]},{"pos":[641940,641950],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[641952,641957]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[641960,642034]},{"pos":[642041,642053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[642055,642183]},{"pos":[642189,642204],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[642206,642287]},{"pos":[642332,642342],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[642344,642349]},{"content":"An Integer data type that indicates whether drag-and-drop behavior is enabled; optional.","pos":[642352,642440]},{"pos":[642447,642459],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[642461,642521]},{"pos":[642528,642535],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave, the dragOver, and the dragOverEx to specify the behavior.","pos":[642537,642613]},{"pos":[642619,642634],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[642636,642730]},{"pos":[642824,642834],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[642836,642846]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[642849,642934]},{"content":"dragMode","pos":[642946,642954]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[642957,643042]},{"content":"x","pos":[643054,643055]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[643058,643143]},{"content":"y","pos":[643155,643156]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[643159,643244]},{"pos":[643251,643263],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[643265,643330]},{"pos":[643336,643353],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[643355,643451]},{"pos":[643541,643551],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[643553,643563]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[643566,643651]},{"content":"dragMode","pos":[643663,643671]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[643674,643759]},{"content":"x","pos":[643771,643772]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[643775,643860]},{"content":"y","pos":[643872,643873]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[643876,643961]},{"pos":[643968,643980],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[643982,644047]},{"pos":[644053,644068],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[644070,644140]},{"pos":[644174,644186],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[644188,644319]},{"pos":[644325,644339],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[644341,644392]},{"pos":[644444,644454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[644456,644461]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[644464,644536]},{"pos":[644543,644555],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[644557,644605]},{"pos":[644612,644619],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[644621,644696]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[644697,644792]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[644793,644927]},{"pos":[644933,644950],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[644952,645040]},{"pos":[645093,645103],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[645105,645108]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[645111,645181]},{"pos":[645188,645200],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[645202,645269]},{"pos":[645275,645296],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[645298,645353]},{"pos":[645397,645409],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[645411,645474]},{"pos":[645480,645493],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[645495,645534]},{"pos":[645587,645597],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[645599,645604]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[645607,645682]},{"content":"mode","pos":[645694,645698]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[645701,645776]},{"pos":[645783,645795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[645797,645833]},{"pos":[645840,645847],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[645849,645956]},{"content":"Mode.","pos":[645960,645965]},{"content":"Height calculation.","pos":[645979,645998]},{"content":"-1 Exact.","pos":[646186,646195]},{"content":"The exact height in pixels of the controls is used.","pos":[646205,646256]},{"content":"0 Auto.","pos":[646299,646306]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[646318,646407]},{"content":"1 Column height.","pos":[646412,646428]},{"content":"The layout of the form determines the height of the control.","pos":[646431,646491]},{"content":"The height and height calculation mode can be set separately.","pos":[646524,646585]},{"pos":[646591,646608],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[646610,646672]},{"pos":[646719,646729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[646731,646736]},{"content":"An Integer data type value that indicates how control height is calculated; optional.","pos":[646739,646824]},{"pos":[646831,646843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[646845,646866]},{"pos":[646873,646880],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[646882,646936]},{"content":"Mode.","pos":[646940,646945]},{"content":"Height Calculation.","pos":[646957,646976]},{"content":"Exact.","pos":[647162,647168]},{"content":"The exact height in pixels of the controls is used.","pos":[647179,647230]},{"content":"Auto.","pos":[647273,647278]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[647290,647379]},{"content":"Column height.","pos":[647384,647398]},{"content":"The layout of the form determines the height of the control.","pos":[647401,647461]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[647494,647579]},{"pos":[647585,647603],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[647605,647644]},{"pos":[647692,647702],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[647704,647709]},{"content":"An Integer data type that specifies the height in pixels; optional.","pos":[647712,647779]},{"pos":[647786,647798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[647800,647821]},{"pos":[647828,647835],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[647837,647927]},{"pos":[647933,647949],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[647951,647991]},{"pos":[648026,648038],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[648040,648128]},{"pos":[648135,648142],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[648144,648214]},{"content":"Use the helpText method to set the value of the Help text.","pos":[648215,648273]},{"pos":[648279,648294],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[648296,648400]},{"pos":[648445,648455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[648457,648462]},{"content":"The value that is assigned as the help text for the control.","pos":[648465,648525]},{"pos":[648532,648544],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[648546,648601]},{"pos":[648608,648615],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.","pos":[648617,648730]},{"pos":[648736,648758],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[648760,648823]},{"pos":[648875,648885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[648887,648892]},{"content":"The value to assign as the HierarchyParent value of the control.","pos":[648895,648959]},{"pos":[648966,648978],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[648980,649030]},{"pos":[649036,649047],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[649049,649094]},{"pos":[649124,649136],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[649138,649165]},{"pos":[649172,649179],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[649181,649225]},{"pos":[649231,649249],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[649290,649302],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[649308,649326],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[649328,649394]},{"pos":[649435,649447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[649449,649500]},{"pos":[649507,649514],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[649516,649584]},{"pos":[649590,649609],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[649611,649678]},{"pos":[649720,649732],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[649734,649786]},{"pos":[649792,649817],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[649819,649920]},{"pos":[649989,649999],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[650001,650018]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[650021,650149]},{"pos":[650156,650168],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[650170,650329]},{"pos":[650336,650343],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[650345,650422]},{"content":"FormAllowUserSetup::No 0","pos":[650762,650786]},{"content":"No changes can be made to the control.","pos":[650797,650835]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[650836,650925]},{"content":"FormAllowUserSetup::Restricted 1","pos":[650930,650962]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[650965,651057]},{"content":"The user cannot move the control.","pos":[651058,651091]},{"content":"FormAllowUserSetup::Yes 2","pos":[651098,651123]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[651133,651225]},{"content":"The user can also move the control.","pos":[651226,651261]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[651265,651454]},{"pos":[651460,651471],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[651473,651537]},{"pos":[651588,651598],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[651600,651605]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[651608,651694]},{"content":"mode","pos":[651706,651710]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[651713,651799]},{"pos":[651806,651818],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[651820,651871]},{"pos":[651877,651892],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[651894,651955]},{"pos":[652000,652010],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[652012,652017]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[652020,652106]},{"pos":[652113,652125],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[652127,652183]},{"pos":[652189,652205],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[652207,652271]},{"pos":[652317,652327],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[652329,652334]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[652337,652418]},{"pos":[652425,652437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[652439,652490]},{"pos":[652496,652516],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[652518,652571]},{"pos":[652629,652639],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[652641,652646]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[652649,652743]},{"pos":[652750,652762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[652764,652837]},{"pos":[652843,652863],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[652865,652922]},{"pos":[653014,653024],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[653026,653027]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[653030,653091]},{"content":"y","pos":[653103,653104]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[653107,653168]},{"content":"button","pos":[653180,653186]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[653189,653250]},{"content":"Ctrl","pos":[653262,653266]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[653269,653330]},{"content":"Shift","pos":[653342,653347]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[653350,653411]},{"pos":[653418,653430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[653432,653471]},{"pos":[653478,653485],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[653487,653580]},{"pos":[653586,653602],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[653604,653669]},{"pos":[653757,653767],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[653769,653770]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[653773,653834]},{"content":"y","pos":[653846,653847]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[653850,653911]},{"content":"button","pos":[653923,653929]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[653932,653993]},{"content":"Ctrl","pos":[654005,654009]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[654012,654073]},{"content":"Shift","pos":[654085,654090]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[654093,654154]},{"pos":[654161,654173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[654175,654214]},{"pos":[654221,654228],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[654230,654323]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[654324,654459]},{"pos":[654465,654481],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[654483,654548]},{"pos":[654636,654646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[654648,654649]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[654652,654713]},{"content":"y","pos":[654725,654726]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[654729,654790]},{"content":"button","pos":[654802,654808]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[654811,654872]},{"content":"Ctrl","pos":[654884,654888]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[654891,654952]},{"content":"Shift","pos":[654964,654969]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[654972,655033]},{"pos":[655040,655052],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[655054,655093]},{"pos":[655100,655107],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[655109,655202]},{"pos":[655208,655222],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[655224,655296]},{"pos":[655382,655392],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[655394,655395]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[655398,655459]},{"content":"y","pos":[655471,655472]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[655475,655536]},{"content":"button","pos":[655548,655554]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[655557,655618]},{"content":"Ctrl","pos":[655630,655634]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[655637,655698]},{"content":"Shift","pos":[655710,655715]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[655718,655779]},{"pos":[655786,655798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[655800,655839]},{"pos":[655846,655853],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to super is returned.","pos":[655855,655948]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[655949,656084]},{"pos":[656090,656101],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[656103,656238]},{"pos":[656279,656289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[656291,656296]},{"content":"The name to assign to the control; optional.","pos":[656299,656343]},{"pos":[656350,656362],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[656364,656428]},{"pos":[656435,656442],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[656444,656538]},{"content":"It must start with a letter.","pos":[656544,656572]},{"content":"It cannot exceed 250 characters.","pos":[656577,656609]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[656614,656668],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[656673,656713]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[656718,656828]},{"pos":[656834,656857],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[656910,656920],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[656922,656927]},{"pos":[656936,656948],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[656954,656981],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[657033,657045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[657051,657071],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[657073,657118]},{"pos":[657165,657177],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[657179,657214]},{"pos":[657220,657238],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[657240,657299]},{"pos":[657367,657377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[657379,657384]},{"content":"The ID of the security key to assign to the control; optional.","pos":[657387,657449]},{"pos":[657456,657468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[657470,657569]},{"pos":[657575,657597],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[657599,657639]},{"pos":[657694,657704],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[657706,657716]},{"content":"The ID of the menu to show.","pos":[657719,657746]},{"pos":[657753,657765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[657767,657826]},{"pos":[657832,657843],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[657845,657972]},{"pos":[658021,658031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[658033,658038]},{"content":"The value to assign to the skip property of the control; optional.","pos":[658041,658107]},{"pos":[658114,658126],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[658128,658234]},{"pos":[658240,658251],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[658292,658302],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[658304,658309]},{"pos":[658318,658330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[658336,658350],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[658352,658395]},{"pos":[658428,658440],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[658442,658544]},{"pos":[658551,658558],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[658560,658632]},{"pos":[658638,658648],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[658650,658712]},{"pos":[658762,658772],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[658774,658779]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[658782,658866]},{"content":"mode","pos":[658878,658882]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[658885,658969]},{"pos":[658976,658988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[658990,659039]},{"pos":[659045,659059],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[659061,659120]},{"pos":[659164,659174],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[659176,659181]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[659184,659268]},{"pos":[659275,659287],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[659289,659343]},{"pos":[659349,659364],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[659366,659428]},{"pos":[659473,659483],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[659485,659490]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[659493,659572]},{"pos":[659579,659591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[659593,659642]},{"pos":[659648,659659],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[659700,659710],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[659712,659717]},{"pos":[659726,659738],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[659744,659771],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[659835,659845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[659847,659851]},{"pos":[659860,659872],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[659878,659893],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[659895,659938]},{"pos":[659983,659993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[659995,660000]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[660003,660075]},{"pos":[660082,660094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[660096,660126]},{"pos":[660132,660151],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[660153,660201]},{"pos":[660250,660260],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[660262,660267]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[660270,660347]},{"pos":[660354,660366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[660368,660403]},{"pos":[660409,660429],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[660431,660490]},{"pos":[660540,660550],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[660552,660557]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[660560,660648]},{"pos":[660655,660667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[660669,660715]},{"pos":[660721,660739],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[660741,660824]},{"pos":[660872,660882],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[660884,660889]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[660892,660972]},{"pos":[660979,660991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[660993,661049]},{"pos":[661055,661072],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[661074,661126]},{"pos":[661173,661183],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[661185,661190]},{"content":"The user height for the control; optional.","pos":[661193,661235]},{"pos":[661242,661254],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[661256,661295]},{"pos":[661301,661316],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[661318,661400]},{"pos":[661445,661455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[661457,661462]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[661465,661544]},{"pos":[661551,661563],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[661565,661620]},{"pos":[661627,661634],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[661636,661806]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[661807,661882]},{"content":"This method lets you programmatically determine and set the value.","pos":[661883,661949]},{"pos":[661955,661978],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[661980,662036]},{"pos":[662089,662099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[662101,662106]},{"content":"The organization container to set for the control; optional.","pos":[662109,662169]},{"pos":[662176,662188],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[662190,662233]},{"pos":[662239,662260],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[662262,662316]},{"pos":[662367,662377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[662379,662384]},{"content":"The organization sibling to set for the control; optional.","pos":[662387,662445]},{"pos":[662452,662464],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[662466,662507]},{"pos":[662513,662534],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[662536,662585]},{"pos":[662636,662646],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[662648,662653]},{"content":"The user label text to set for the control; optional.","pos":[662656,662709]},{"pos":[662716,662728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[662730,662766]},{"pos":[662772,662796],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[662798,662851]},{"pos":[662905,662915],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[662917,662922]},{"content":"The user security level to set for the control; optional.","pos":[662925,662982]},{"pos":[662989,663001],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[663003,663043]},{"pos":[663049,663064],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[663066,663214]},{"pos":[663259,663269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[663271,663276]},{"content":"The value to assign to the userSkip property; optional.","pos":[663279,663334]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[663335,663430]},{"pos":[663437,663449],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[663451,663520]},{"pos":[663526,663542],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[663544,663595]},{"pos":[663641,663651],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[663653,663658]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[663661,663727]},{"pos":[663734,663746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[663748,663877]},{"pos":[663884,663891],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[663893,663987]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[663988,664104],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[664105,664255]},{"pos":[664261,664283],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[664285,664346]},{"pos":[664415,664425],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[664427,664432]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[664435,664512]},{"content":"mode","pos":[664524,664528]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[664531,664608]},{"pos":[664615,664627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[664629,664677]},{"pos":[664683,664709],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[664711,664770]},{"pos":[664835,664845],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[664847,664851]},{"pos":[664860,664872],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[664874,664928]},{"pos":[664934,664961],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[664963,665024]},{"pos":[665081,665091],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[665093,665098]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[665101,665179]},{"pos":[665186,665198],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[665200,665248]},{"pos":[665254,665268],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[665270,665340]},{"pos":[665392,665402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[665404,665409]},{"content":"The value to assign to the visible setting for the control; optional.","pos":[665412,665481]},{"pos":[665488,665500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[665502,665551]},{"pos":[665557,665569],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[665571,665609]},{"pos":[665661,665671],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[665673,665678]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[665681,665755]},{"content":"mode","pos":[665767,665771]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[665774,665848]},{"pos":[665855,665867],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[665869,665904]},{"pos":[665911,665918],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[665920,666026]},{"content":"Mode.","pos":[666030,666035]},{"content":"Width calculation.","pos":[666048,666066]},{"content":"-1 Exact.","pos":[666252,666261]},{"content":"The exact width in pixels of the controls is used.","pos":[666270,666320]},{"content":"0 Auto.","pos":[666363,666370]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[666381,666469]},{"content":"1 Column width.","pos":[666474,666489]},{"content":"The layout of the form determines the width of the control.","pos":[666492,666551]},{"content":"The width and width calculation mode can be set separately.","pos":[666584,666643]},{"pos":[666649,666665],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[666667,666729]},{"pos":[666775,666785],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[666787,666792]},{"content":"An Integer data type value that indicates how control width is calculated; optional.","pos":[666795,666879]},{"pos":[666886,666898],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[666900,666961]},{"pos":[666968,666975],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[666977,667030]},{"content":"Mode.","pos":[667034,667039]},{"content":"Width Calculation.","pos":[667050,667068]},{"content":"Exact.","pos":[667252,667258]},{"content":"The exact width in pixels of the controls is used.","pos":[667268,667318]},{"content":"Auto.","pos":[667361,667366]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[667377,667465]},{"content":"Column width.","pos":[667470,667483]},{"content":"The layout of the form determines the width of the control.","pos":[667486,667545]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[667578,667661]},{"pos":[667667,667684],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[667686,667724]},{"pos":[667771,667781],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[667783,667788]},{"content":"An Integer data type that specifies the width in pixels; optional.","pos":[667791,667857]},{"pos":[667864,667876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[667878,667913]},{"pos":[667920,667927],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[667929,668002]},{"pos":[668008,668029],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[668031,668100]},{"pos":[668162,668172],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[668174,668179]},{"content":"The preferred height of the control.","pos":[668182,668218]},{"content":"height","pos":[668230,668236]},{"content":"The preferred height of the control.","pos":[668239,668275]},{"pos":[668281,668296],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[668298,668344]},{"pos":[668378,668392],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[668394,668455]},{"pos":[668489,668496],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[668498,668626]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[668627,668731]},{"pos":[668737,668766],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[668884,668894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[668896,668912]},{"content":"objectMethodToCall","pos":[668926,668944]},{"content":"overrideObject","pos":[668958,668972]},{"pos":[668980,668995],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[668997,669027]},{"pos":[669061,669072],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[669074,669172]},{"pos":[669258,669268],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[669270,669280]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[669283,669368]},{"content":"dragMode","pos":[669380,669388]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[669391,669476]},{"content":"x","pos":[669488,669489]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[669492,669577]},{"content":"y","pos":[669589,669590]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[669593,669678]},{"pos":[669684,669696],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[669698,669752]},{"pos":[669783,669806],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[669808,669849]},{"pos":[669891,669908],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[669910,669964]},{"pos":[670000,670017],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[670101,670111],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[670113,670119]},{"content":"e","pos":[670133,670134]},{"pos":[670142,670152],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[670154,670187]},{"pos":[670216,670234],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[670319,670329],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[670331,670337]},{"content":"e","pos":[670351,670352]},{"pos":[670360,670376],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[670378,670474]},{"pos":[670509,670526],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[670528,670598]},{"pos":[670688,670698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[670700,670701]},{"content":"A Booelan value of true if the SHIFT key is down.","pos":[670704,670753]},{"content":"y","pos":[670765,670766]},{"content":"A Booelan value of true if the SHIFT key is down.","pos":[670769,670818]},{"content":"button","pos":[670830,670836]},{"content":"A Booelan value of true if the SHIFT key is down.","pos":[670839,670888]},{"content":"Ctrl","pos":[670900,670904]},{"content":"A Booelan value of true if the SHIFT key is down.","pos":[670907,670956]},{"content":"Shift","pos":[670968,670973]},{"content":"A Booelan value of true if the SHIFT key is down.","pos":[670976,671025]},{"pos":[671031,671042],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[671044,671096]},{"pos":[671126,671139],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[671141,671241]},{"pos":[671323,671333],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[671335,671345]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[671348,671433]},{"content":"dragMode","pos":[671445,671453]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[671456,671541]},{"content":"x","pos":[671553,671554]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[671557,671642]},{"content":"y","pos":[671654,671655]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[671658,671743]},{"pos":[671749,671765],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[671767,671809]},{"pos":[671844,671865],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[671867,671888]},{"pos":[671928,671942],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[671944,671984]},{"pos":[672017,672035],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[672037,672108]},{"pos":[672159,672169],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[672171,672180]},{"content":"The string value to use to filter data; optional.","pos":[672183,672232]}],"content":"---\n# required metadata\n\ntitle: F Classes: FormBuildReferenceControl to FormButtonSeparatorControl | Microsoft Docs\ndescription: API reference for classes from FormBuildReferenceControl to FormButtonSeparatorControl.\nauthor: annbe\nmanager: AnnBe\nms.date: 2016-03-08 23:03:54\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: \nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 63613\nms.assetid: ec4d2ee5-bef6-4dbe-9a2e-7d2aebfa7c96\n# ms.region: \n# ms.industry: \nms.author: RobinARH\n\n---\n\n# F Classes: FormBuildReferenceControl to FormButtonSeparatorControl\n\nClass FormBuildReferenceControl\n-------------------------------\n\n    class FormBuildReferenceControl extends FormBuildControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                   | Description |\n|------------------------------------------|-------------|\n| public void new(FormContainer container) |             |\n\n### Method new\n\n    public void new(FormContainer container)\n\n#### Parameters\n\ncontainer  \n\n## Class FormBuildReferenceGroupControl\n    class FormBuildReferenceGroupControl extends FormBuildControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                               |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                  |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                       |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control background can be transparent.                                                                             |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to output text in the control.                                                               |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                  |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                                 |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                           |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                           |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                  |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                       |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                           |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                 |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                 |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                       |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                   |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                   |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                  |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                               |                                                                                                                                           |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                           |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                          |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                              |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                           |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                     |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                           |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                           |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                           |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                           |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                           |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                           |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                           |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                           |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                           |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                           |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                           |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                           |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                           |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                           |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public int moveControl(int controlId, \\[int insertAfterControlId\\])                                         | Moves a specified control to the control.                                                                                                 |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                           |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                           |\n| public FieldId referenceField(\\[FieldId value\\])                                                            |                                                                                                                                           |\n| public str replacementFieldGroup(\\[str value\\])                                                             |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                           |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public boolean skip(\\[boolean value\\])                                                                      |                                                                                                                                           |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                           |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                           |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                           |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                           |\n| public boolean useUserLayout(\\[boolean value\\])                                                             |                                                                                                                                           |\n| public Int64 value(\\[Int64 value\\])                                                                         |                                                                                                                                           |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                           |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                           |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                    |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                    |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                           |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of MicrosoftWindows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of MicrosoftWindows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value that is based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialogue box.The help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method moveControl\n\nMoves a specified control to the control.\n\n    public int moveControl(int controlId, [int insertAfterControlId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterControlId  \n\n#### Return Value\n\n1 if the control was moved successfully; otherwise, 0.\n\n#### Remarks\n\nIn general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed. However, in some cases, such as for the reference group control instance, controls cannot be moved.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method referenceField\n\n    public FieldId referenceField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replacementFieldGroup\n\n    public str replacementFieldGroup([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method value\n\n    public Int64 value([Int64 value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildRichTextControl\n    class FormBuildRichTextControl extends FormBuildControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                               |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                  |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                       |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                           |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                            |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to output text in the control.                                                               |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                  |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                           |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                               |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                                 |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                           |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                           |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                           |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                           |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that is used by the control or the form.                                                                       |\n| public int direction(\\[int value\\])                                                                         |                                                                                                                                           |\n| public int displayHeight(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                           |\n| public AutoMode displayHeightMode(\\[AutoMode mode\\])                                                        |                                                                                                                                           |\n| public int displayHeightValue(\\[int value\\])                                                                |                                                                                                                                           |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                           |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                           |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                           |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                       |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                           |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                           |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                 |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                 |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                       |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                   |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                   |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                  |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                           |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                          |\n| public int iMEMode(\\[int value\\])                                                                           |                                                                                                                                           |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                              |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                           |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                     |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                           |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                           |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                           |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                           |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                           |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                           |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                           |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                           |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                           |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                           |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                           |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                           |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                           |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                           |\n| public int limitText(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                           |\n| public AutoMode limitTextMode(\\[AutoMode mode\\])                                                            |                                                                                                                                           |\n| public int limitTextValue(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int lookupButton(\\[int value\\])                                                                      |                                                                                                                                           |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public boolean multiLine(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                           |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                           |\n| public boolean replaceOnLookup(\\[boolean value\\])                                                           |                                                                                                                                           |\n| public int searchAfterInput(\\[int value\\])                                                                  |                                                                                                                                           |\n| public int searchMode(\\[int value\\])                                                                        |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                           |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public boolean skip(\\[boolean value\\])                                                                      |                                                                                                                                           |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                           |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                           |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                           |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                           |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                           |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                           |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                           |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                    |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                    |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                           |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of MicrosoftWindows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of MicrosoftWindows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value that is based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that is used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that is used.\n\n### Method direction\n\n    public int direction([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayHeight\n\n    public int displayHeight([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayHeightMode\n\n    public AutoMode displayHeightMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayHeightValue\n\n    public int displayHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialogue box.The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method iMEMode\n\n    public int iMEMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method limitText\n\n    public int limitText([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method limitTextMode\n\n    public AutoMode limitTextMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method limitTextValue\n\n    public int limitTextValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lookupButton\n\n    public int lookupButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method multiLine\n\n    public boolean multiLine([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replaceOnLookup\n\n    public boolean replaceOnLookup([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchAfterInput\n\n    public int searchAfterInput([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchMode\n\n    public int searchMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildSegmentedEntryControl\n    class FormBuildSegmentedEntryControl extends FormBuildControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                               |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                  |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                       |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                        |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                         |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control background can be transparent.                                                                             |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                  |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                       |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                                 |\n| public boolean contextFlyout(\\[boolean value\\])                                                             |                                                                                                                                           |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                           |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                           |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                  |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                       |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                           |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                       |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                   |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                            |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                   |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                  |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                           |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                          |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                              |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                     |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                           |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                           |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                           |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                           |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                           |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                           |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                           |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                           |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                           |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                           |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                           |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                           |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                           |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                           |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                           |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                           |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                           |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                           |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                           |\n| public FieldId referenceField(\\[FieldId value\\])                                                            |                                                                                                                                           |\n| public str replacementFieldGroup(\\[str value\\])                                                             |                                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                           |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                           |\n| public boolean skip(\\[boolean value\\])                                                                      |                                                                                                                                           |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                           |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                           |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                           |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                           |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                           |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                           |\n| public Int64 value(\\[Int64 value\\])                                                                         |                                                                                                                                           |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                           |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                           |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                    |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                            |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                    |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                           |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method contextFlyout\n\n    public boolean contextFlyout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialogue box.The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumerations, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method referenceField\n\n    public FieldId referenceField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replacementFieldGroup\n\n    public str replacementFieldGroup([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method value\n\n    public Int64 value([Int64 value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildStaticTextControl\n    class FormBuildStaticTextControl extends FormBuildControl\n\nThe FormBuildStaticTextControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                          |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that was used to output text in the control.                                                            |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source to be used by the control or the form.                                                                       |\n| public int displayHeight(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                         |\n| public AutoMode displayHeightMode(\\[AutoMode mode\\])                                                        |                                                                                                                                         |\n| public int displayHeightValue(\\[int value\\])                                                                |                                                                                                                                         |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                     |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                         |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                     |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that was used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of MicrosoftWindows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of MicrosoftWindows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method displayHeight\n\n    public int displayHeight([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayHeightMode\n\n    public AutoMode displayHeightMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayHeightValue\n\n    public int displayHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property gives controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildStringControl\n    class FormBuildStringControl extends FormBuildControl\n\nThe FormBuildStringControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Indicates whether to align the control.                                                                                                 |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                          |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to output text in the control.                                                             |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int changeCase(\\[int value\\])                                                                        |                                                                                                                                         |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                |\n| public int direction(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int displayHeight(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                         |\n| public AutoMode displayHeightMode(\\[AutoMode mode\\])                                                        |                                                                                                                                         |\n| public int displayHeightValue(\\[int value\\])                                                                |                                                                                                                                         |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                         |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                     |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public int iMEMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                         |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int limitText(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public AutoMode limitTextMode(\\[AutoMode mode\\])                                                            |                                                                                                                                         |\n| public int limitTextValue(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int lookupButton(\\[int value\\])                                                                      |                                                                                                                                         |\n| public boolean lookupOnly(\\[boolean value\\])                                                                |                                                                                                                                         |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                         |\n| public boolean multiLine(\\[boolean value\\])                                                                 |                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public boolean passwordStyle(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public FieldId presenceDataField(\\[FieldId value\\])                                                         |                                                                                                                                         |\n| public int presenceDataSource(\\[AnyType value\\])                                                            |                                                                                                                                         |\n| public int presenceIndicatorAllowed(\\[int value\\])                                                          |                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                         |\n| public boolean replaceOnLookup(\\[boolean value\\])                                                           |                                                                                                                                         |\n| public int searchAfterInput(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int searchMode(\\[int value\\])                                                                        |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                         |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                     |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method alignControl\n\nIndicates whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method changeCase\n\n    public int changeCase([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of MicrosoftWindows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of MicrosoftWindows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a values that are based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method direction\n\n    public int direction([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayHeight\n\n    public int displayHeight([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayHeightMode\n\n    public AutoMode displayHeightMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayHeightValue\n\n    public int displayHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method iMEMode\n\n    public int iMEMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method limitText\n\n    public int limitText([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method limitTextMode\n\n    public AutoMode limitTextMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method limitTextValue\n\n    public int limitTextValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lookupButton\n\n    public int lookupButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lookupOnly\n\n    public boolean lookupOnly([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method multiLine\n\n    public boolean multiLine([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method passwordStyle\n\n    public boolean passwordStyle([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method presenceDataField\n\n    public FieldId presenceDataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method presenceDataSource\n\n    public int presenceDataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method presenceIndicatorAllowed\n\n    public int presenceIndicatorAllowed([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replaceOnLookup\n\n    public boolean replaceOnLookup([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchAfterInput\n\n    public int searchAfterInput([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchMode\n\n    public int searchMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildTabControl\n    class FormBuildTabControl extends FormBuildControl\n\nThe FormBuildTabControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignChild(\\[boolean value\\])                                                                |                                                                                                                                         |\n| public boolean alignChildren(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public int allowUserSetup(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int arrangeGuide(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int arrangeMethod(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int arrangeWhen(\\[int value\\])                                                                       |                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                          |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                   |                                                                                                                                         |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                         |                                                                                                                                         |\n| public int bottomMarginValue(\\[int value\\])                                                                 |                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                           |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                     |                                                                                                                                         |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                        |                                                                                                                                         |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                    |                                                                                                                                         |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                          |                                                                                                                                         |\n| public int columnspaceValue(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int columnsValue(\\[int value\\])                                                                      |                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public int containerScrollHorizontalOffset(\\[int value\\])                                                   |                                                                                                                                         |\n| public int containerScrollVerticalOffset(\\[int value\\])                                                     |                                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source to be used by the control or the form.                                                                       |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                               |                                                                                                                                         |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public boolean horizontalScrollBarVisible(\\[boolean value\\])                                                |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                     |                                                                                                                                         |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                           |                                                                                                                                         |\n| public int leftMarginValue(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int moveControl(int controlId, \\[int insertAfterControlId\\])                                         | Moves a specified control to the control.                                                                                               |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                    |                                                                                                                                         |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                          |                                                                                                                                         |\n| public int rightMarginValue(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int scrollbars(\\[int value\\])                                                                        |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public boolean selectControl(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public boolean showTabs(\\[boolean value\\])                                                                  |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                         |\n| public int tab(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                                                                                         |\n| public int tabAppearance(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean tabAutoChange(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public int tabLayout(\\[int value\\])                                                                         |                                                                                                                                         |\n| public AutoMode tabMode(\\[AutoMode mode\\])                                                                  |                                                                                                                                         |\n| public int tabPlacement(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int tabs(\\[int value\\])                                                                              |                                                                                                                                         |\n| public int tabValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                            |                                                                                                                                         |\n| public int topMarginValue(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean useUserLayout(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public boolean verticalScrollBarVisible(\\[boolean value\\])                                                  |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method containerScrollHorizontalOffset\n\n    public int containerScrollHorizontalOffset([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method containerScrollVerticalOffset\n\n    public int containerScrollVerticalOffset([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method horizontalScrollBarVisible\n\n    public boolean horizontalScrollBarVisible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method moveControl\n\nMoves a specified control to the control.\n\n    public int moveControl(int controlId, [int insertAfterControlId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterControlId  \n\n#### Return Value\n\n1 if the control was moved successfully; otherwise, 0.\n\n#### Remarks\n\nIn general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed. However, in some cases, such as for the reference group control instance, controls cannot be moved.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method scrollbars\n\n    public int scrollbars([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method selectControl\n\n    public boolean selectControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showTabs\n\n    public boolean showTabs([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tab\n\n    public int tab([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method tabAppearance\n\n    public int tabAppearance([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabAutoChange\n\n    public boolean tabAutoChange([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabLayout\n\n    public int tabLayout([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabMode\n\n    public AutoMode tabMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method tabPlacement\n\n    public int tabPlacement([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabs\n\n    public int tabs([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabValue\n\n    public int tabValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalScrollBarVisible\n\n    public boolean verticalScrollBarVisible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildTableControl\n    class FormBuildTableControl extends FormBuildControl\n\nThe FormBuildTableControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                       |\n| public int bottomMargin(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                           |\n| public int column(\\[int value\\])                                                                            |                                                                                                                                         |\n| public int columns(\\[int value\\])                                                                           |                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public boolean gridLines(\\[boolean value\\])                                                                 |                                                                                                                                         |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public boolean highlightActive(\\[boolean value\\])                                                           |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMargin(\\[int value\\])                                                                        |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int moveControl(int controlId, \\[int insertAfterControlId\\])                                         | Moves a specified control to the control.                                                                                               |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int rightMargin(\\[int value\\])                                                                       |                                                                                                                                         |\n| public int row(\\[int value\\])                                                                               |                                                                                                                                         |\n| public int rows(\\[int value\\])                                                                              |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public boolean showColLabels(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public boolean showRowLabels(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMargin(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean useUserLayout(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method column\n\n    public int column([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columns\n\n    public int columns([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method gridLines\n\n    public boolean gridLines([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method highlightActive\n\n    public boolean highlightActive([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMargin\n\n    public int leftMargin([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method moveControl\n\nMoves a specified control to the control.\n\n    public int moveControl(int controlId, [int insertAfterControlId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterControlId  \n\n#### Return Value\n\n1 if the control was moved successfully; otherwise, 0.\n\n#### Remarks\n\nIn general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed. However, in some cases, such as for the reference group control instance, controls cannot be moved.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method row\n\n    public int row([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rows\n\n    public int rows([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showColLabels\n\n    public boolean showColLabels([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showRowLabels\n\n    public boolean showRowLabels([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMargin\n\n    public int topMargin([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildTabPageControl\n    class FormBuildTabPageControl extends FormBuildControl\n\nThe FormBuildTabPageControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignChild(\\[boolean value\\])                                                                |                                                                                                                                         |\n| public boolean alignChildren(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public int allowUserSetup(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int arrangeGuide(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int arrangeMethod(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int arrangeWhen(\\[int value\\])                                                                       |                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control background can be transparent.                                                                           |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                   |                                                                                                                                         |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                         |                                                                                                                                         |\n| public int bottomMarginValue(\\[int value\\])                                                                 |                                                                                                                                         |\n| public str caption(\\[str value\\])                                                                           | Gets or set the caption of the control.                                                                                                 |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                           |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                     |                                                                                                                                         |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                        |                                                                                                                                         |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                    |                                                                                                                                         |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                          |                                                                                                                                         |\n| public int columnspaceValue(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int columnsValue(\\[int value\\])                                                                      |                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public int containerScrollHorizontalOffset(\\[int value\\])                                                   |                                                                                                                                         |\n| public int containerScrollVerticalOffset(\\[int value\\])                                                     |                                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public int fastTabExpanded(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                               |                                                                                                                                         |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public boolean horizontalScrollBarVisible(\\[boolean value\\])                                                |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public str labelAction(\\[str value\\])                                                                       |                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                     |                                                                                                                                         |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                           |                                                                                                                                         |\n| public int leftMarginValue(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int moveControl(int controlId, \\[int insertAfterControlId\\])                                         | Moves a specified control to the control.                                                                                               |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int panelStyle(\\[int value\\])                                                                        |                                                                                                                                         |\n| public str parentPage(\\[str value\\])                                                                        |                                                                                                                                         |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                    |                                                                                                                                         |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                          |                                                                                                                                         |\n| public int rightMarginValue(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int scrollbars(\\[int value\\])                                                                        |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                         |\n| public int tabAppearance(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean tabAutoChange(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                            |                                                                                                                                         |\n| public int topMarginValue(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean useUserLayout(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public boolean verticalScrollBarVisible(\\[boolean value\\])                                                  |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method containerScrollHorizontalOffset\n\n    public int containerScrollHorizontalOffset([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method containerScrollVerticalOffset\n\n    public int containerScrollVerticalOffset([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method fastTabExpanded\n\n    public int fastTabExpanded([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method horizontalScrollBarVisible\n\n    public boolean horizontalScrollBarVisible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method labelAction\n\n    public str labelAction([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method moveControl\n\nMoves a specified control to the control.\n\n    public int moveControl(int controlId, [int insertAfterControlId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterControlId  \n\n#### Return Value\n\n1 if the control was moved successfully; otherwise, 0.\n\n#### Remarks\n\nIn general, if the specified control can be contained in the control and can be moved from the container that it is currently in, this method should succeed. However, in some cases, such as for the reference group control instance, controls cannot be moved.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method panelStyle\n\n    public int panelStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method parentPage\n\n    public str parentPage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method scrollbars\n\n    public int scrollbars([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabAppearance\n\n    public int tabAppearance([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method tabAutoChange\n\n    public boolean tabAutoChange([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalScrollBarVisible\n\n    public boolean verticalScrollBarVisible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildTimeControl\n    class FormBuildTimeControl extends FormBuildControl\n\nThe FormBuildTimeControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control background can be transparent.                                                                           |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to output text in the control.                                                             |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                |\n| public int direction(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int displayHeight(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                         |\n| public AutoMode displayHeightMode(\\[AutoMode mode\\])                                                        |                                                                                                                                         |\n| public int displayHeightValue(\\[int value\\])                                                                |                                                                                                                                         |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                         |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                     |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public int iMEMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                         |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int limitText(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public AutoMode limitTextMode(\\[AutoMode mode\\])                                                            |                                                                                                                                         |\n| public int limitTextValue(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int lookupButton(\\[int value\\])                                                                      |                                                                                                                                         |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                         |\n| public boolean replaceOnLookup(\\[boolean value\\])                                                           |                                                                                                                                         |\n| public int searchAfterInput(\\[int value\\])                                                                  |                                                                                                                                         |\n| public int searchMode(\\[int value\\])                                                                        |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                         |\n| public int timeFormat(\\[int value\\])                                                                        |                                                                                                                                         |\n| public int timeHours(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int timeMinute(\\[int value\\])                                                                        |                                                                                                                                         |\n| public int timeSeconds(\\[int value\\])                                                                       |                                                                                                                                         |\n| public int timeSeparator(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                     |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int value(\\[int value\\])                                                                             |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of Microsoft Windows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Microsoft Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Microsoft Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method direction\n\n    public int direction([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayHeight\n\n    public int displayHeight([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayHeightMode\n\n    public AutoMode displayHeightMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayHeightValue\n\n    public int displayHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method iMEMode\n\n    public int iMEMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method limitText\n\n    public int limitText([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method limitTextMode\n\n    public AutoMode limitTextMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method limitTextValue\n\n    public int limitTextValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lookupButton\n\n    public int lookupButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replaceOnLookup\n\n    public boolean replaceOnLookup([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchAfterInput\n\n    public int searchAfterInput([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchMode\n\n    public int searchMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeFormat\n\n    public int timeFormat([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeHours\n\n    public int timeHours([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeMinute\n\n    public int timeMinute([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeSeconds\n\n    public int timeSeconds([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method timeSeparator\n\n    public int timeSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method value\n\n    public int value([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildTreeControl\n    class FormBuildTreeControl extends FormBuildControl\n\nThe FormBuildTreeControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control background can be transparent.                                                                           |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to output text in the control.                                                             |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                |\n| public boolean canScroll(\\[boolean value\\])                                                                 |                                                                                                                                         |\n| public boolean cascadeSelect(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                             |\n| public boolean checkBox(\\[boolean value\\])                                                                  |                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean editLabels(\\[boolean value\\])                                                                |                                                                                                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                     |\n| public boolean hasButtons(\\[boolean value\\])                                                                |                                                                                                                                         |\n| public boolean hasLines(\\[boolean value\\])                                                                  |                                                                                                                                         |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public boolean linesAtRoot(\\[boolean value\\])                                                               |                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public boolean rowSelect(\\[boolean value\\])                                                                 |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public boolean showSelAlways(\\[boolean value\\])                                                             |                                                                                                                                         |\n| public boolean singleSelection(\\[boolean value\\])                                                           |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public boolean trackSelect(\\[boolean value\\])                                                               |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                     |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method canScroll\n\n    public boolean canScroll([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method cascadeSelect\n\n    public boolean cascadeSelect([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of Microsoft Windows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Microsoft Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Microsoft Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a values that are based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method checkBox\n\n    public boolean checkBox([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method editLabels\n\n    public boolean editLabels([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method hasButtons\n\n    public boolean hasButtons([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hasLines\n\n    public boolean hasLines([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method linesAtRoot\n\n    public boolean linesAtRoot([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rowSelect\n\n    public boolean rowSelect([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showSelAlways\n\n    public boolean showSelAlways([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method singleSelection\n\n    public boolean singleSelection([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method trackSelect\n\n    public boolean trackSelect([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormBuildWindowControl\n    class FormBuildWindowControl extends FormBuildControl\n\nThe FormBuildWindoControl class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control background can be transparent.                                                                           |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                     |\n| public int containerId()                                                                                    | Retrieves the ID of the parent container for the control.                                                                               |\n| public str countryRegionCodes(\\[str value\\])                                                                |                                                                                                                                         |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  |                                                                                                                                         |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that is used by the control or the form.                                                                     |\n| public int displayTarget(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                       |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                     |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                     |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                 |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                |\n| public str hierarchyParent(\\[str value\\])                                                                   |                                                                                                                                         |\n| public int id()                                                                                             | Retrieves the ID of the control.                                                                                                        |\n| public int imageLocation(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int imagemode(\\[int value\\])                                                                         |                                                                                                                                         |\n| public str imageName(\\[str value\\])                                                                         |                                                                                                                                         |\n| public int imageResource(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean isContainer()                                                                                | Retrieves a value that indicates whether the control is a container control.                                                            |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    |                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int leftValue(\\[int value\\])                                                                         |                                                                                                                                         |\n| public str location(\\[str value\\])                                                                          |                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object. |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                         |\n| public str normalImage(\\[str value\\])                                                                       |                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   |                                                                                                                                         |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.         |\n| public int top(int value, \\[int mode\\])                                                                     |                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           |                                                                                                                                         |\n| public int topValue(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          |                                                                                                                                         |\n| public int userDataItem(\\[int value\\])                                                                      |                                                                                                                                         |\n| public int userDataItems(\\[int value\\])                                                                     |                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                         |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      |                                                                                                                                         |\n| public int verticalSpacingValue(\\[int value\\])                                                              |                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   |                                                                                                                                         |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataSource\n\nGets or sets a data source that is used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to use.\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method imageLocation\n\n    public int imageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imagemode\n\n    public int imagemode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imageName\n\n    public str imageName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method imageResource\n\n    public int imageResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\nRetrieves a value that indicates whether the control is a container control.\n\n    public boolean isContainer()\n\n#### Return Value\n\nA Boolean value that indicates whether the control is a container control.\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to the label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method location\n\n    public str location([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalImage\n\n    public str normalImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n## Class FormButtonControl\n    class FormButtonControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public int acquireFocus(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public boolean autoRefreshData(\\[boolean value\\])                                                           |                                                                                                                                                                         |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control background can be transparent.                                                                                                           |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public boolean big(\\[boolean value\\])                                                                       |                                                                                                                                                                         |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to output text in the control.                                                                                             |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public int buttonDisplay(\\[int value\\])                                                                     | Gets or sets the appearance of the button control.                                                                                                                      |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public boolean defaultButton(\\[boolean value\\])                                                             | Determines whether the button should be the default button on the form.                                                                                                 |\n| public str disabledImage(\\[str value\\])                                                                     | Gets or sets the disabled image of the button.                                                                                                                          |\n| public int disabledImageLocation(\\[int value\\])                                                             |                                                                                                                                                                         |\n| public int disabledResource(\\[int value\\])                                                                  | Gets or sets the resource ID of the image to use as the disabled button image.                                                                                          |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public boolean forcedToOverflow(\\[boolean value\\])                                                          |                                                                                                                                                                         |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public int imageLocation(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public str keyTip(\\[str value\\])                                                                            |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public int multiSelect(\\[int value\\])                                                                       |                                                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.                           |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public int needsRecord(\\[int value\\])                                                                       |                                                                                                                                                                         |\n| public str normalImage(\\[str value\\])                                                                       |                                                                                                                                                                         |\n| public int normalResource(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public boolean primary(\\[boolean value\\])                                                                   |                                                                                                                                                                         |\n| public boolean saveRecord(\\[boolean value\\])                                                                |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int shortkey(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showShortCut(\\[boolean value\\])                                                              |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                                                         |\n| public int toggleButton(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public int toggleValue(\\[int value\\])                                                                       |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels.                                                                                                                     |\n| public boolean value(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void clicked()                                                                                       |                                                                                                                                                                         |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n\n### Method acquireFocus\n\n    public int acquireFocus([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoRefreshData\n\n    public boolean autoRefreshData([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDetermines whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method big\n\n    public boolean big([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe Integer value that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method buttonDisplay\n\nGets or sets the appearance of the button control.\n\n    public int buttonDisplay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and five, inclusive.\n\n#### Remarks\n\nThe value of the property defines whether the text, the image, or both should be displayed on the button. This property also controls relative positions of text and image if both are displayed. The integer value that is returned contains the appearance of the button control as follows:\n\n| Value. | Description.                                                     |\n|--------|------------------------------------------------------------------|\n| 0      | Text only.                                                       |\n| 1      | Image Only.                                                      |\n| 2      | Text and image; the image is displayed under the text.           |\n| 3      | Text and image; the image is displayed above the text.           |\n| 4      | Text and image; the image is displayed to the left of the text.  |\n| 5      | Text and image; the image is displayed to the right of the text. |\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that has the width and height.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of MicrosoftWindows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of MicrosoftWindows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value, depending on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method defaultButton\n\nDetermines whether the button should be the default button on the form.\n\n    public boolean defaultButton([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the button should be the default button; otherwise, false.\n\n### Method disabledImage\n\nGets or sets the disabled image of the button.\n\n    public str disabledImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe full name of an image file. The system supports all of the GDI-supported image formats.\n\n#### Remarks\n\nThis property has precedence over the disabledResource property. It is used if both of these properties are set.\n\n### Method disabledImageLocation\n\n    public int disabledImageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method disabledResource\n\nGets or sets the resource ID of the image to use as the disabled button image.\n\n    public int disabledResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe resource ID of the image to use as the disabled button image. Both icon and bitmap images are supported.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method forcedToOverflow\n\n    public boolean forcedToOverflow([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialog box. The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the HierarchyParent value of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method imageLocation\n\n    public int imageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                   |\n|----------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is used for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.    |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control.  |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method keyTip\n\n    public str keyTip([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method multiSelect\n\n    public int multiSelect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method needsRecord\n\n    public int needsRecord([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalImage\n\n    public str normalImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalResource\n\n    public int normalResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method primary\n\n    public boolean primary([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method saveRecord\n\n    public boolean saveRecord([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method shortkey\n\n    public int shortkey([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showShortCut\n\n    public boolean showShortCut([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toggleButton\n\n    public int toggleButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toggleValue\n\n    public int toggleValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method value\n\n    public boolean value([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method clicked\n\n    public void clicked()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnClicked\n\n    private void OnClicked([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n## Class FormButtonGroupControl\n    class FormButtonGroupControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                              | Description                                                                                                                                                             |\n|---------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])            |                                                                                                                                                                         |\n| public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])                     |                                                                                                                                                                         |\n| public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\]) |                                                                                                                                                                         |\n| public boolean alignChild(\\[boolean value\\])                                                                        |                                                                                                                                                                         |\n| public boolean alignChildren(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public boolean alignControl(\\[boolean value\\])                                                                      | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                         | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                                      | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int allowUserSetup(\\[int value\\])                                                                            |                                                                                                                                                                         |\n| public int arrangeGuide(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public int arrangeMethod(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public int arrangeWhen(\\[int value\\])                                                                               |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                   | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                           | Gets or sets the background color of the control.                                                                                                                       |\n| public Image backgroundImage(\\[Image image\\], \\[int drawMode\\])                                                     |                                                                                                                                                                         |\n| public int backStyle(\\[int value\\])                                                                                 | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                                  | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                                      | Gets or sets the weight of font used to output text in the control.                                                                                                     |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                           |                                                                                                                                                                         |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                                 |                                                                                                                                                                         |\n| public int bottomMarginValue(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                              | Retrieves the size of the control.                                                                                                                                      |\n| public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                               |                                                                                                                                                                         |\n| public boolean canContain(FormControl control)                                                                      |                                                                                                                                                                         |\n| public str caption(\\[str value\\])                                                                                   | Gets or set the caption of the control.                                                                                                                                 |\n| public int characterSet(\\[int value\\])                                                                              | Gets or sets the character set of the font.                                                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                               | Gets or sets the color scheme of the control.                                                                                                                           |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                             |                                                                                                                                                                         |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                                |                                                                                                                                                                         |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                                  |                                                                                                                                                                         |\n| public int columnspaceValue(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public int columnsValue(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                            | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                                    | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public boolean contains(FormControl control)                                                                        |                                                                                                                                                                         |\n| public int controlCount()                                                                                           |                                                                                                                                                                         |\n| public FormControl controlNum(int controlNo)                                                                        |                                                                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                        | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                         |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                          | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                            | Gets or sets a data source to be used by the control or the form.                                                                                                       |\n| public int displayTarget(\\[int value\\])                                                                             | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                                  | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                               | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                           | Determines whether to enable or disable the object.                                                                                                                     |\n| public str font(\\[str value\\])                                                                                      | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                                  | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public int framePosition(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public int frameType(\\[int value\\])                                                                                 |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                          | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                                     | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                          | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                                | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                               | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                              | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                                  | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                                       |                                                                                                                                                                         |\n| public str hierarchyParent(\\[str value\\])                                                                           | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                                   | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isContainer()                                                                                        |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                        | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                                       | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                            | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public boolean italic(\\[boolean value\\])                                                                            |                                                                                                                                                                         |\n| public str keyTip(\\[str value\\])                                                                                    |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                            | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                             |                                                                                                                                                                         |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                                   |                                                                                                                                                                         |\n| public int leftMarginValue(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                                  | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                                 | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                     | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                     | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                         | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                           | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public int moveControl(int controlId, \\[int insertAfterId\\])                                                        |                                                                                                                                                                         |\n| public str name(\\[str value\\])                                                                                      | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                             |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                                  | Retrieves the parent control for the control.                                                                                                                           |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                                  |                                                                                                                                                                         |\n| public int rightMarginValue(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                           | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                          | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean sizeHeight(\\[boolean value\\])                                                                        |                                                                                                                                                                         |\n| public boolean sizeWidth(\\[boolean value\\])                                                                         |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                              | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                        |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                                     |                                                                                                                                                                         |\n| public str toolTip()                                                                                                | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                             | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                              |                                                                                                                                                                         |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                                    |                                                                                                                                                                         |\n| public int topMarginValue(\\[int value\\])                                                                            |                                                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                                   | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                                  | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                                      |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                         | Sets or returns the underline property for the text in the control.                                                                                                     |\n| public boolean SysObsoleteAttribute(container data)                                                                 |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                                  | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                              | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                             | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                               | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                                | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                                  | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                          | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                            | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                            | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                         | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                                  | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls on the form.                    |\n| public int userWidth(\\[int value\\])                                                                                 | Sets or returns the width of the control in pixels.                                                                                                                     |\n| public boolean useUserLayout(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                        | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                              | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                                      | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                           | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                           | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                                 | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                                | Gets or sets the width of the control.                                                                                                                                  |\n| public void resetUserSetting()                                                                                      | Resets the user settings for the control.                                                                                                                               |\n| public void cut()                                                                                                   | Cuts the contents of the control.                                                                                                                                       |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                         |                                                                                                                                                                         |\n| public void copy()                                                                                                  | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void arrange()                                                                                               |                                                                                                                                                                         |\n| public void dragLeave()                                                                                             | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void mouseLeave()                                                                                            | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void displayControl()                                                                                        | Displays the control.                                                                                                                                                   |\n| public void prefColumnSize(int width, int height)                                                                   | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void lostFocus()                                                                                             | Indicates that the control has lost focus.                                                                                                                              |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                           | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void endDrag()                                                                                               | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void inputSearch(str searchStr)                                                                              | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                        |                                                                                                                                                                         |\n| public void gotFocus()                                                                                              | Indicates that the control has received focus.                                                                                                                          |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])         |                                                                                                                                                                         |\n| public void jumpRef()                                                                                               |                                                                                                                                                                         |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                                       | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void setFocus()                                                                                              | Sets the focus on the control.                                                                                                                                          |\n| public void filter(\\[str filterStr\\])                                                                               |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                               | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void paste()                                                                                                 | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void context()                                                                                               | Shows the shortcut menu for the control.                                                                                                                                |\n\n### Method addControl\n\n    public FormControl addControl(FormControlType controlType, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolType  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addControlEx\n\n    public FormControl addControlEx(str controlClass, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addDataField\n\n    public FormControl addDataField(int dataSourceId, FieldId fieldId, [FormControl insertAfter], [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to be assigned to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe property is set to this value, if supplied.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backgroundImage\n\n    public Image backgroundImage([Image image], [int drawMode])\n\n#### Parameters\n\nimage  \n\n<!-- -->\n\ndrawMode  \n\n#### Return Value\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method canAddDataField\n\n    public boolean canAddDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method canContain\n\n    public boolean canContain(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of Microsoft Windows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Microsoft Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Microsoft Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET.For more information, see the LOGFONT structure on the MSDN Web site, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key that is being assigned to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method contains\n\n    public boolean contains(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlNum\n\n    public FormControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \n\n#### Return Value\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country region/codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates whether the drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the FormControl::dragLeave, FormControl::dragOver, and FormControl::dragOverEx methods to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method framePosition\n\n    public int framePosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method frameType\n\n    public int frameType([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the HierarchyParent value of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method keyTip\n\n    public str keyTip([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method moveControl\n\n    public int moveControl(int controlId, [int insertAfterId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterId  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method sizeHeight\n\n    public boolean sizeHeight([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method sizeWidth\n\n    public boolean sizeWidth([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls on the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method arrange\n\n    public void arrange()\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Booelan value of true if the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Booelan value of true if the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Booelan value of true if the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Booelan value of true if the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Booelan value of true if the SHIFT key is down.\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n## Class FormButtonSeparatorControl\n    class FormButtonSeparatorControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels.                                                                                                                     |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nIf specified, the property is set to this value.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave, the dragOver, and the dragOverEx to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value that is assigned as the help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the HierarchyParent value of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to super is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visible setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Booelan value of true if the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Booelan value of true if the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Booelan value of true if the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Booelan value of true if the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Booelan value of true if the SHIFT key is down.\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n\n\n"}