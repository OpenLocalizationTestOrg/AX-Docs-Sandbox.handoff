{"content":"---\n# required metadata\n\ntitle: C Classes\ndescription: System API classes that start with the letter C.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 06/20/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: a:2:{s:4:\"name\";s:22:\"Robin Reynolds-Haertle\";s:2:\"id\";s:0:\"\";}\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 50962\nms.assetid: 53eb660c-9a11-4f59-9870-a24502588ebf\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# C Classes\n\n[!include[banner](../includes/banner.md)]\n\n\nSystem API classes that start with the letter C.\n\nClass ClassNode\n---------------\n\n    class ClassNode extends TreeNode\n\nThe ClassNode class is a specialization of the TreeNode class that represents a class in the Finance and Operations Application Object Tree (AOT).\n\n### Remarks\n\nThis class lets you create, read, update, and delete X++ code and metadata. Make sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                            | Description                                                                                                                                   |\n|---------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public TreeNode AOToverrideMethod(str methodName) |                                                                                                                                               |\n| public str changedBy(\\[str value\\])               | Gets or sets the name of the user who last changed the application object.                                                                    |\n| public Date changedDate(\\[Date value\\])           | Gets or sets the date an application object was last changed.                                                                                 |\n| public str changedTime(\\[str value\\])             | Gets or sets the time an application object was last changed.                                                                                 |\n| public str createdBy(\\[str value\\])               | Gets or sets the name of the user who created the application object.                                                                         |\n| public Date creationDate(\\[Date value\\])          | Gets or sets the date an application object was created.                                                                                      |\n| public str creationTime(\\[str value\\])            |                                                                                                                                               |\n| public str extends(\\[str value\\])                 |                                                                                                                                               |\n| public int iD(\\[int value\\])                      |                                                                                                                                               |\n| public boolean isDetached()                       |                                                                                                                                               |\n| public int legacyId(\\[int value\\])                |                                                                                                                                               |\n| public str name(\\[str value\\])                    | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public Guid origin(\\[Guid value\\])                |                                                                                                                                               |\n| public int runOn(\\[int value\\])                   |                                                                                                                                               |\n| public void AOTedit(\\[int Line\\], \\[int Column\\]) | Opens the class so that it can be modified in the editor.                                                                                     |\n\n### Method AOToverrideMethod\n\n    public TreeNode AOToverrideMethod(str methodName)\n\n#### Parameters\n\nmethodName  \n\n#### Return Value\n\n### Method changedBy\n\nGets or sets the name of the user who last changed the application object.\n\n    public str changedBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method changedDate\n\nGets or sets the date an application object was last changed.\n\n    public Date changedDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was last changed.\n\n### Method changedTime\n\nGets or sets the time an application object was last changed.\n\n    public str changedTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe time an application object was last changed.\n\n### Method createdBy\n\nGets or sets the name of the user who created the application object.\n\n    public str createdBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method creationDate\n\nGets or sets the date an application object was created.\n\n    public Date creationDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was created.\n\n### Method creationTime\n\n    public str creationTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method extends\n\n    public str extends([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method iD\n\n    public int iD([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isDetached\n\n    public boolean isDetached()\n\n#### Return Value\n\n### Method legacyId\n\n    public int legacyId([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Does not exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumerations, classes, and so on.\n\n### Method origin\n\n    public Guid origin([Guid value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method runOn\n\n    public int runOn([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method AOTedit\n\nOpens the class so that it can be modified in the editor.\n\n    public void AOTedit([int Line], [int Column])\n\n#### Parameters\n\nLine  \nA value that is ignored; optional.\n\n<!-- -->\n\nColumn  \nA value that is ignored; optional.\n\n#### Remarks\n\nAll methods are loaded into the editor. The arguments are included in the signature for backward compatibility only; they are ignored.\n\n#### Examples\n\n    static void example() \n    { \n        ClassNode classNode; \n     \n        classNode = infolog.findNode('\\Classes\\SysClassWizard'); \n        classNode.AOTedit(); \n    }\n\n## Class ClientPrintJobSettings\n    class ClientPrintJobSettings extends PrintJobSettings\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                  | Description                                     |\n|-------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------|\n| public container getFontDimension(container container)                                                                  |                                                 |\n| public container getInfoStrings()                                                                                       |                                                 |\n| public int getNextLineOffset(container container)                                                                       |                                                 |\n| public container getPageInfo()                                                                                          |                                                 |\n| public container getPrinterNames()                                                                                      |                                                 |\n| public int getTextWidth(str text, str fontName, int charSet, int fontHeight, int style, int weight)                     |                                                 |\n| public container getTextWidthExt(container container)                                                                   |                                                 |\n| public container getWordWrapInfo(str text, int width, str fontName, int charSet, int fontHeight, int style, int weight) |                                                 |\n| public container getWordWrapInfoExt(container container)                                                                |                                                 |\n| public container printerSettingsExt(str formName, \\[xArgs args\\], \\[ReportRun reportRun\\], \\[int showWhat\\])            |                                                 |\n| public container setOrientationGetPageInfo(PrinterOrientation orientation)                                              |                                                 |\n| public void new(\\[container Settings\\], \\[boolean infoOnly\\])                                                           | Initializes a new instance of the Object class. |\n\n### Method getFontDimension\n\n    public container getFontDimension(container container)\n\n#### Parameters\n\ncontainer  \n\n#### Return Value\n\n### Method getInfoStrings\n\n    public container getInfoStrings()\n\n#### Return Value\n\n### Method getNextLineOffset\n\n    public int getNextLineOffset(container container)\n\n#### Parameters\n\ncontainer  \n\n#### Return Value\n\n### Method getPageInfo\n\n    public container getPageInfo()\n\n#### Return Value\n\n### Method getPrinterNames\n\n    public container getPrinterNames()\n\n#### Return Value\n\n### Method getTextWidth\n\n    public int getTextWidth(str text, str fontName, int charSet, int fontHeight, int style, int weight)\n\n#### Parameters\n\ntext  \n\n<!-- -->\n\nfontName  \n\n<!-- -->\n\ncharSet  \n\n<!-- -->\n\nfontHeight  \n\n<!-- -->\n\nstyle  \n\n<!-- -->\n\nweight  \n\n#### Return Value\n\n### Method getTextWidthExt\n\n    public container getTextWidthExt(container container)\n\n#### Parameters\n\ncontainer  \n\n#### Return Value\n\n### Method getWordWrapInfo\n\n    public container getWordWrapInfo(str text, int width, str fontName, int charSet, int fontHeight, int style, int weight)\n\n#### Parameters\n\ntext  \n\n<!-- -->\n\nwidth  \n\n<!-- -->\n\nfontName  \n\n<!-- -->\n\ncharSet  \n\n<!-- -->\n\nfontHeight  \n\n<!-- -->\n\nstyle  \n\n<!-- -->\n\nweight  \n\n#### Return Value\n\n### Method getWordWrapInfoExt\n\n    public container getWordWrapInfoExt(container container)\n\n#### Parameters\n\ncontainer  \n\n#### Return Value\n\n### Method printerSettingsExt\n\n    public container printerSettingsExt(str formName, [xArgs args], [ReportRun reportRun], [int showWhat])\n\n#### Parameters\n\nformName  \n\n<!-- -->\n\nargs  \n\n<!-- -->\n\nreportRun  \n\n<!-- -->\n\nshowWhat  \n\n#### Return Value\n\n### Method setOrientationGetPageInfo\n\n    public container setOrientationGetPageInfo(PrinterOrientation orientation)\n\n#### Parameters\n\norientation  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new([container Settings], [boolean infoOnly])\n\n#### Parameters\n\nSettings  \n\n<!-- -->\n\ninfoOnly  \n\n## Class CLRInterop\n    class CLRInterop extends Object\n\nThe ClrInterop class is a utility class that provides functionality for type marshaling and exception handling. Because all the methods are static, no instantiation of the class is required.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                               | Description                                                                                                                              |\n|--------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------|\n| ::public static AnyType getAnyTypeForObject(CLRObject clrObject)                     | Converts a common language runtime (CLR) object to a value of the X++ anytype data type.                                                 |\n| ::public static CLRObject getLastException()                                         | Retrieves the most recent CLR exception.                                                                                                 |\n| ::public static CLRObject getObjectForAnyType(AnyType anyType)                       | Converts a value of the X++ anytype data type to a value of the CLRObject data type.                                                     |\n| ::public static CLRObject getType(str clrTypeName)                                   |                                                                                                                                          |\n| ::public static boolean isNull(CLRObject clrObject)                                  | Confirms whether the specified CLRObject instance is set to nullNothingnullptrunita null reference (Nothing in Visual Basic).            |\n| ::public static CLRObject Null(str clrTypeName)                                      | Returns a CLR data type that has a value of nullNothingnullptrunita null reference (Nothing in Visual Basic).                            |\n| ::public static CLRObject parseClrEnum(str clrEnumTypeName, str enumValues)          | Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent CLRObject instance. |\n| ::public static CLRObject staticInvoke(str className, str methodName, VarArg params) | Calls a static method on a CLR data type.                                                                                                |\n| ::public static void loadAssembly(str clrAssemblyName)                               |                                                                                                                                          |\n| public void new()                                                                    | Initializes a new instance of the CLRInterop class.                                                                                      |\n\n### Method getAnyTypeForObject\n\nConverts a common language runtime (CLR) object to a value of the X++ anytype data type.\n\n    public static AnyType getAnyTypeForObject(CLRObject clrObject)\n\n#### Parameters\n\nclrObject  \nThe CLR object to convert to an X++ data type.\n\n#### Return Value\n\nAn X++ anytype date type that has the value of the \\_object argument.\n\n#### Remarks\n\nIf an attacker can control input to the getAnyTypeForObject method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method. If the argument cannot be converted to an X++ data type, an exception of the Exception::ClrError type is thrown.\n\n#### Examples\n\nThe following example sets the value of a CLR string to an X++ str data type.\n\n    { \n        CLRObject clrObj; \n        InteropPermission perm; \n        System.String   clrStr = \"Calculate total\"; \n        str             s; \n         \n        perm = new InteropPermission(InteropKind::ClrInterop); \n        if (perm == null) \n        { \n            return; \n        } \n        perm.assert(); \n      \n        s = ClrInterop::getAnyTypeForObject(clrStr); \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Method getLastException\n\nRetrieves the most recent CLR exception.\n\n    public static CLRObject getLastException()\n\n#### Return Value\n\nThe most recent exception of the Exception::ClrError type; otherwise, nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n#### Remarks\n\nIf an attacker can control input to the getLastException method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.\n\n#### Examples\n\nThe following example tries to pass in a date that has an invalid format. The CLR exception that is thrown is converted to an X++ exception and then printed to the Infolog. Any nested exceptions are also printed to the Infolog.\n\n    static void Job2(Args _args) \n    { \n        CLRObject clrObj; \n        InteropPermission perm; \n         \n        try \n        { \n            System.DateTime::Parse( \"-1/-1/-1\"); \n        } \n        catch( Exception::CLRError ) \n        { \n            perm = new InteropPermission(InteropKind::ClrInterop); \n            if (perm == null) \n            { \n                return; \n            } \n            perm.assert(); \n      \n            e = ClrInterop::getLastException(); \n             \n            CodeAccessPermission::revertAssert(); \n      \n            while( e ) \n            { \n                info( e.get_Message() ); \n                e = e.get_InnerException(); \n            } \n        } \n         \n    }\n\n### Method getObjectForAnyType\n\nConverts a value of the X++ anytype data type to a value of the CLRObject data type.\n\n    public static CLRObject getObjectForAnyType(AnyType anyType)\n\n#### Parameters\n\nanyType  \nThe X++ value to convert to a value of the CLRObject data type.\n\n#### Return Value\n\nThe CLR object that has the value of the \\_anytype argument.\n\n#### Remarks\n\nIf an attacker can control input to the getObjectForAnyType method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method. If the argument cannot be converted to the CLRObject type, an exception of the Exception::CLRError type is thrown.\n\n#### Examples\n\nThe following example converts a string value to a CLR string object.\n\n    static void Job3(Args _args) \n    { \n        CLRObject clrObj; \n        InteropPermission perm; \n        System.String s; \n     \n        perm = new InteropPermission(InteropKind::ClrInterop); \n        if (perm == null) \n        { \n            return; \n        } \n        perm.assert(); \n         \n        s = CLRInterop::getObjectForAnyType(\"Calculate total\"); \n      \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Method getType\n\n    public static CLRObject getType(str clrTypeName)\n\n#### Parameters\n\nclrTypeName  \n\n#### Return Value\n\n### Method isNull\n\nConfirms whether the specified CLRObject instance is set to nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n    public static boolean isNull(CLRObject clrObject)\n\n#### Parameters\n\nclrObject  \nThe CLRObject instance to evaluate.\n\n#### Return Value\n\ntrue if the specified CLRObject instance is set to nullNothingnullptrunita null reference (Nothing in Visual Basic) or has not been initialized.\n\n#### Remarks\n\nThe isNull method should be used instead of the X++ nullNothingnullptrunita null reference (Nothing in Visual Basic) in conditional statements that evaluate whether a CLR data type is nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n#### Examples\n\nThe following example sets the CLR string data type to nullNothingnullptrunita null reference (Nothing in Visual Basic) and assigns the type value to the CLR object. It then calls the isNull method and prints the result in the Infolog.\n\n    static void Job5(Args _args) \n    { \n        System.String nullStr; \n         \n        nullStr = CLRInterop::Null(\"System.String\"); \n         \n        print CLRInterop::isNull(nullStr); \n    }\n\n### Method Null\n\nReturns a CLR data type that has a value of nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n    public static CLRObject Null(str clrTypeName)\n\n#### Parameters\n\nclrTypeName  \nThe CLR data type to set to nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n#### Return Value\n\nA CLRObject instance of the specified CLR data type.\n\n#### Remarks\n\nIf you directly set CLR data types to nullNothingnullptrunita null reference (Nothing in Visual Basic) in X++, you only set the kernel reference to nullNothingnullptrunita null reference (Nothing in Visual Basic). This will make it impossible to use the type as a CLR data type. If you assign the CLR data type to CLRInterop:null(\"yourType\"),, the type can be parsed at run time as a parameter of a static method invocation.\n\n#### Examples\n\nThe following example sets the CLR string type to nullNothingnullptrunita null reference (Nothing in Visual Basic) and assigns the type value to a CLR object.\n\n    static void Job5(Args _args) \n    { \n        System.String nullStr; \n         \n        nullStr = CLRInterop::Null(\"System.String\"); \n         \n        print CLRInterop::isInitialized(nullStr); \n        print CLRInterop::isNull(nullStr); \n    }\n\n### Method parseClrEnum\n\nConverts the string representation of the name or numeric value of one or more enumerated constants to an equivalent CLRObject instance.\n\n    public static CLRObject parseClrEnum(str clrEnumTypeName, str enumValues)\n\n#### Parameters\n\nclrEnumTypeName  \nA string that contains the name or value to convert.\n\n<!-- -->\n\nenumValues  \nA string that contains the name or value to convert.\n\n#### Return Value\n\nThe CLRObject instance that contains the specified CLR enumerator values.\n\n#### Remarks\n\nThe \\_enumValues parameter contains a value, a named constant, or a list of named constants that are delimited by commas (,). One or more blanks spaces can precede or follow each value, name, or comma in \\_enumValues. If \\_enumValues is a list, the return value is the value of the specified names combined with a bitwise OR operation.\n\n#### Examples\n\nThe following example converts the enumerator value to the string value of Monday and prints the value in the Infolog.\n\n    static void Job6(Args _args) \n    { \n        System.DayOfWeek    dayOfWeek; \n        System.Type         dayOfWeekType; \n         \n        dayOfWeek = CLRInterop::parseClrEnum( \"System.DayOfWeek\", \"Monday\"); \n         \n        dayOfWeekType = dayOfWeek.GetType(); \n     \n        info( dayOfWeek.ToString() ); \n    }\n\n### Method staticInvoke\n\nCalls a static method on a CLR data type.\n\n    public static CLRObject staticInvoke(str className, str methodName, VarArg params)\n\n#### Parameters\n\nclassName  \nThe arguments, if there are any, to the method that is specified in the \\_methodName parameter.\n\n<!-- -->\n\nmethodName  \nThe arguments, if there are any, to the method that is specified in the \\_methodName parameter.\n\n<!-- -->\n\nparams  \nThe arguments, if there are any, to the method that is specified in the \\_methodName parameter.\n\n#### Return Value\n\nThe CLRObject that contains the value that is returned by the static CLR method; otherwise, nullNothingnullptrunita null reference (Nothing in Visual Basic).\n\n#### Remarks\n\nIf an attacker can control input to the staticInvoke method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method. If an error occurs when you call the get\\_Now method, the Exception::ClrError exception is thrown.\n\n#### Examples\n\nThe following example calls the get\\_Now method on the System.DateTime CLR class and prints the results in the Infolog.\n\n    static void Job7(Args _args) \n    { \n        CLRObject clrObj; \n        InteropPermission perm; \n        System.DateTime dateTime; \n     \n        perm = new InteropPermission(InteropKind::ClrInterop); \n        if (perm == null) \n        { \n            return; \n        } \n        perm.assert(); \n     \n        dateTime = CLRInterop::staticInvoke( \n                       \"System.DateTime\", \n                       \"get_Now\" ); \n        info(dateTime.ToString()); \n        CodeAccessPermission::revertAssert(); \n         \n        pause; \n         \n        // This is the same code using CLR syntax. \n        // dateTime = System.DateTime::get_Now(); \n        // info(dateTime.ToString()); \n    }\n\n### Method loadAssembly\n\n    public static void loadAssembly(str clrAssemblyName)\n\n#### Parameters\n\nclrAssemblyName  \n\n### Method new\n\nInitializes a new instance of the CLRInterop class.\n\n    public void new()\n\n#### Remarks\n\nAll members of the CLRInterop class are static. There is no requirement to instantiate this class. If an attacker can control input to the new method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the InteropPermission class.\n\n## Class CLRObject\n    class CLRObject extends Object\n\nThe CLRObject class holds a reference to an instance of a common language runtime (CLR) object and dispatches calls from X++ to the corresponding wrapped managed instance.\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                            | Description                                   |\n|---------------------------------------------------|-----------------------------------------------|\n| private CLRObject dispatch(VarArg )               | Reserved: Do not explicitly call this method. |\n| public void new(str className, \\[VarArg params\\]) | Creates an instance of the CLRObject class.   |\n\n### Method dispatch\n\nReserved: Do not explicitly call this method.\n\n    private CLRObject dispatch(VarArg )\n\n#### Parameters\n\n  \n\n#### Return Value\n\n#### Remarks\n\nIf an attacker can control input to the dispatch method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the InteropPermission class.\n\n### Method new\n\nCreates an instance of the CLRObject class.\n\n    public void new(str className, [VarArg params])\n\n#### Parameters\n\nclassName  \nThe arguments for the constructor of the CLR class to instantiate.\n\n<!-- -->\n\nparams  \nThe arguments for the constructor of the CLR class to instantiate.\n\n#### Remarks\n\nInstances of the CLRObject class are used to wrap values that are returned from calls to CLR methods. If an attacker can control input to the new method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the InteropPermission class. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls the new method. If a new ClrObject object cannot be instantiated, the Exception:Internal exception is thrown. To obtain the original CLR exception, call the CLRInterop::getLastException method.\n\n#### Examples\n\nThis example creates a new System.Int32 CLR object.\n\n    void ClrObjectExample() \n    { \n        CLRObject clrObj; \n        InteropPermission perm; \n        anytype retVal; \n      \n        perm = new InteropPermission(InteropKind::ClrInterop); \n        if (perm == null) \n        { \n            return; \n        } \n      \n        perm.assert(); \n      \n        clrObj = new CLRObject(\"System.Int32\"); \n      \n        CodeAccessPermission::revertAssert(); \n    }\n\n## Class CodeAccessPermission\n    class CodeAccessPermission extends Object\n\nThe CodeAccessPermission class defines the underlying structure of code access permissions.\n\n### Remarks\n\nThe following classes extend the CodeAccessPermission class: ExecutePermission, FileIOPermission, InteropPermission, RunAsPermission, SkipAOSValidationPermission, SqlDataDictionaryPermission, SqlStatementExecutePermission, and SysDatabaseLogPermission.\n\n### Examples\n\nThe following code example shows a class that is derived from the CodeAccessPermission class.\n\n    final class SysTestCodeAccessPermission extends CodeAccessPermission \n    { \n        str data; \n    }\n\nThis code example illustrates a step in the process of protecting an API.\n\n### Methods\n\n| Method                                                 | Description                                                                                                                                       |\n|--------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|\n| public CodeAccessPermission copy()                     | Creates and returns a copy of a permission class object.                                                                                          |\n| public boolean isSubsetOf(CodeAccessPermission target) | Determines whether a current permission is a subset of the specified permission when it is overridden by a derived class.                         |\n| public void new()                                      | Initializes a new instance of the CodeAccessPermission class.                                                                                     |\n| public void assert()                                   | Declares that the calling code can invoke an API that is protected by a permission.                                                               |\n| public void demand()                                   | Checks the call stack to determine whether the permission that is required to invoke an API has been granted to the calling code.                 |\n| ::public static void revertAssert()                    | Causes a previous call to the CodeAccessPermission.assert and CodeAccessPermission::assertMultiple methods to be removed and no longer in effect. |\n| ::public static void assertMultiple(Set permissionSet) | Declares that the calling code can invoke an API that is protected by any of the permissions in a specified collection.                           |\n\n### Method copy\n\nCreates and returns a copy of a permission class object.\n\n    public CodeAccessPermission copy()\n\n#### Return Value\n\nA copy of the derived class object.\n\n#### Remarks\n\nYou can override this method as part of the process of making an API more secure.\n\n#### Examples\n\nThe following code example shows how to override the copy method to create and return a copy of a class that is derived from the CodeAccessPermission class.\n\n    public CodeAccessPermission copy() \n    { \n        return new SysTestCodeAccessPermission(_data); \n    }\n\n### Method isSubsetOf\n\nDetermines whether a current permission is a subset of the specified permission when it is overridden by a derived class.\n\n    public boolean isSubsetOf(CodeAccessPermission target)\n\n#### Parameters\n\ntarget  \nA CodeAccessPermission class object.\n\n#### Return Value\n\ntrue if a current permission is a subset of a specified permission; otherwise, false.\n\n#### Remarks\n\nYou can override the method as part of the process of making an API more secure.\n\n#### Examples\n\nThe following example shows how to override the isSubsetOf method to determine whether permissions that are stored in the current object are located in \\_target.\n\n    public boolean isSubsetOf(CodeAccessPermission _target) \n    { \n        SysTestCodeAccessPermission sysTarget = _target; \n        return this.handle() == _target.handle(); \n    }\n\n### Method new\n\nInitializes a new instance of the CodeAccessPermission class.\n\n    public void new()\n\n### Method assert\n\nDeclares that the calling code can invoke an API that is protected by a permission.\n\n    public void assert()\n\n#### Remarks\n\nYou must call the assert method in the derived class for a protected API before you invoke the API. For more information about APIs that are protected by permissions, see Secured APIs. You must call the assert method on the same tier, usually the server tier, that the corresponding CodeAccessPermission::demand method is called on before the protected API is executed. Call a method on the server tier from one of the following:\n\n-   A server static method\n-   A class instance method that is set to run on the server by using the RunOn class property\n\nFinance and Operations does not support multiple, successive calls to the assert method in the same calling code. Either call the CodeAccessPermission::revertAssert method between each call to the assert method, or call the CodeAccessPermission::assertMultiple method. If you make multiple, successive calls to the assertmethod, the Infolog displays an error when you execute the code.\n\n#### Examples\n\nThe following code example shows a call to the assert method before the AsciiIo Class class that is protected by a permission is invoked. The assert method is a member of the FileIOPermission class that is derived from the CodeAccessPermission class.\n\n    server static void main(Args args) \n    { \n        FileIoPermission _perm; \n        AsciiIo a; \n      \n         \n        _perm = new FileIoPermission(\"c:\\File.txt\",'r'); \n        _perm.assert(); \n      \n        // Invoke the protected API. \n        a = new AsciiIo(\"c:\\File.txt\",'r'); \n    }\n\n### Method demand\n\nChecks the call stack to determine whether the permission that is required to invoke an API has been granted to the calling code.\n\n    public void demand()\n\n#### Examples\n\nThe following code example shows a call to the demand method before the API functionality is executed, to determine whether permission to access the resource that is specified by the data variable has been granted to code that is calling the API.\n\n    public static void main(str data) \n    { \n        SysTestCodeAccessPermission p = new SysTestCodeAccessPermission(data); \n        p.demand(); \n     \n        //Add functionality \n    }\n\nThis code example illustrates a step in the process of protecting an API.\n\n### Method revertAssert\n\nCauses a previous call to the CodeAccessPermission.assert and CodeAccessPermission::assertMultiple methods to be removed and no longer in effect.\n\n    public static void revertAssert()\n\n#### Remarks\n\nWhen you have multiple calls to the assert method in the same calling code, you must call the revertAssert method between each call. Otherwise, the Infolog displays an error when you execute the code. When you call the assert method only one time, or when you call the CodeAccessPermission::assertMultiple method, we recommend that you still call the revertAssert method after you invoke the protected API to limit the scope of the assert.\n\n#### Examples\n\nThe following code example shows a call to the CodeAccessPermission::revertAssert method after the user calls the CodeAccessPermission.assert method and the AsciiIo class that is protected by a permission.\n\n    server static void main(Args args) \n    { \n        FileIoPermission _perm; \n        AsciiIo a; \n\n         \n        _perm = new FileIoPermission(\"c:\\File.txt\",'r'); \n        _perm.assert(); \n      \n        //invoke protected API \n        a = new AsciiIo(\"c:\\File.txt\",'r'); \n         \n        // Optionally call revertAssert() to limit scope of assert. \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Method assertMultiple\n\nDeclares that the calling code can invoke an API that is protected by any of the permissions in a specified collection.\n\n    public static void assertMultiple(Set permissionSet)\n\n#### Parameters\n\npermissionSet  \nA Set class object that contains a collection of permissions.\n\n#### Remarks\n\nYou call the assertMultple method instead of making multiple, successive calls to the CodeAccessPermission.assert and CodeAccessPermission::revertAssert methods in the same calling code.\n\n#### Examples\n\nThe following code example calls the CodeAccessPermission::assertMultple method. Then the code example calls the WinAPIServer::createFile method, which would fail without the previous call to the CodeAccessPermission::assertMultple method. The code example is a static method that you can add to a new class that you create. You can call this static method from an X++ job by using one line of code that resembles MyClass::RunOnServerPermissionTest. In the code example, the WinAPIServer class has several secure methods. The WinAPIServer class runs on the server tier, not on the client tier. Therefore the code example method must also run on the server tier. Otherwise, any permission asserts that are made on the client tier are ignored by methods that run on the server tier. This is why the server keyword is included in the method declaration of the code example. The server keyword on the method takes precedence over the RunOn property value that is specified on the class.\n\n    server\n        static public void RunOnServerPermissionTest()\n    {\n        Set permissionSet;\n        str fileName = @\"C:TestFile75a.txt\";\n        boolean boolFileDeleted;\n     \n        permissionSet =  new Set(Types::Class);\n        permissionSet.add(new FileIoPermission(fileName,'rw'));\n\n        CodeAccessPermission::assertMultiple(permissionSet);\n        //--- Permissions are set, now perform file operations.\n\n        WinAPIServer::createFile(fileName);\n        boolFileDeleted = WinAPI::deleteFile(fileName);\n\n        if (boolFileDeleted)\n        {\n            info(\"The file was deleted. Good.\");\n        }\n        else\n        {\n            error(\"The file was not deleted. Error.\");\n        }\n    }\n\n## Class COM\n    class COM\n\nThe COM class is use to create Component Object Model (COM) objects.\n\n### Remarks\n\nThe COM class also supports Distributed Component Object Model (DCOM). DCOM enables objects that support DCOM to run on remote computers. When a COM object has been instantiated by using the COM class, its methods and properties can be accessed by using either the COMDispFunction class or the extended syntax for the COM class. The extended syntax enables methods and properties to be directly called on the COM object, even though they don't appear in the Lookup list (for example, com.comMethod(\"Hello World\");). The extended syntax supports calls to methods and properties that take any number of arguments. Some COM objects support the concept of optional arguments. Only optional variant arguments can be omitted. If optional arguments are omitted, the COM object uses its default values. To omit an argument for the COM object and force it to use its default value, specify the COMArgument::NoValue enumeration, as shown in the following example.\n\n    com.comMethod(COMArgument::NoValue, \"Hello Another World\");\n\n \n\nIf the arguments to omit from the COM object appear at the end of the argument list, omit them from the code. The following types are supported for the extended syntax for the COM class argument type and return type:\n\n-   array\n-   COM\n-   COMVariant\n-   date\n-   enum\n-   int\n-   real\n-   str\n\nIf a COM object returns a date, and if the extended syntax is used, the return value of the COM method should be assigned to a COMVariant class variable. The actual date and time (format) can then be extracted from the COMVariant class by using the date and time properties. If the date return value is assigned to a date variable instead of a COMVariant class, the time component of the date is lost. When the extended syntax is used, you can still call the COM class methods (the methods that appear in the Lookup list) on the objects. The COM class methods have a higher priority than the methods on the actual COM object. If a method on the COM object has the same name as a method on the COM class (for example, attach), you cannot call that method on the COM object. To enable Finance and Operations to call the method on the COM object instead of the method that has the same name on the COM class, prefix the duplicate method name with an underscore (for example, com.\\_detach();). The extended syntax for the COM class is evaluated at run time, not compile time, which causes a slight decrease in performance. If high-performance code is required, consider using the COMDispFunction class. This class offers performance improvements over the extended syntax for the COM class.\n\n### Examples\n\nThis example calls the GetFileName method from the Scripting.FileSystemObject COM object.\n\n    void COMExample() \n    { \n        COM               com; \n        str               result; \n        InteropPermission perm; \n        ; \n      \n        // Set code access permission to help protect the use of the \n        // COM object. \n        perm = new InteropPermission(InteropKind::ComInterop); \n        if (perm == null) \n        { \n            return; \n        } \n        // Permission scope starts here. \n        perm.assert(); \n      \n        com = new COM(\"Scripting.FileSystemObject\"); \n        if (com != null) \n        { \n            result = com.GetFileName(@\"c:boot.ini\"); \n        } \n      \n        // Close code access permission scope. \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                  |\n|-------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------|\n| public AnyType dispatch(VarArg )                                                                            | Reserved. Do not explicitly call this method.                                                                                                |\n| public str documentationName()                                                                              | Returns the textual name of the COM object that is associated with the instance of the COM class.                                            |\n| public COMError error()                                                                                     | Returns a COMError object that is associated with the instance of the COM class.                                                             |\n| public ComInterface interface()                                                                             | Returns the interface that is associated with the COM object.                                                                                |\n| public int lcid(\\[int lcid\\])                                                                               |                                                                                                                                              |\n| public str toString()                                                                                       | Returns a string that represents the instance of the COM class.                                                                              |\n| ::public static COM createFromInterface(ComInterface interface)                                             | Creates an instance of the COM class by using the specified COM interface.                                                                   |\n| ::public static COM createFromObject(COM object)                                                            | Creates an instance of the COM class by using the specified COM object.                                                                      |\n| ::public static COM createFromVariant(COMVariant variant)                                                   | Creates an instance of the COM class by using the specified instance of the COMVariant class.                                                |\n| ::public static COM getObject(str className)                                                                | Returns an instance of a COM object that is running.                                                                                         |\n| ::public static COM getObjectEx(str fileName)                                                               | Returns an instance of a COM object that is specified by its file name.                                                                      |\n| ::public static AnyType unsupported(int action, \\[AnyType param1\\], \\[AnyType param2\\], \\[AnyType param3\\]) | Reserved.                                                                                                                                    |\n| public void finalize()                                                                                      | Frees resources that are associated with the instance of the COM class.                                                                      |\n| public void new(\\[str className\\], \\[str computerName\\])                                                    | Creates an instance of the COM class that can be attached to the COM class and optionally instantiates a COM object on a specified computer. |\n| public void attach(ComInterface interface)                                                                  | Attaches an instance of the COM class to a COM interface.                                                                                    |\n| public void detach()                                                                                        | Detaches a COM object from the class that it was associated with.                                                                            |\n\n### Method dispatch\n\nReserved. Do not explicitly call this method.\n\n    public AnyType dispatch(VarArg )\n\n#### Parameters\n\n  \n\n#### Return Value\n\n### Method documentationName\n\nReturns the textual name of the COM object that is associated with the instance of the COM class.\n\n    public str documentationName()\n\n#### Return Value\n\nThe textual name of the COM object that is associated with the instance of the COM class; an empty string if there is no documentation name for the COM object.\n\n#### Remarks\n\nThe textual name of a class is used by the class to describe itself. The textual name differs from the class name that is used to instantiate the class.\n\n#### Examples\n\nThe following example shows how to retrieve the documentation name for a COM object.\n\n    str docName; \n    ; \n    // The obj that was previously instantiated. \n    docName = obj.documentationName(); \n    info(strfmt(\"documentationName: %1\", docName));\n\n### Method error\n\nReturns a COMError object that is associated with the instance of the COM class.\n\n    public COMError error()\n\n#### Return Value\n\nA COMError value that represents the error that is associated with the instance of the COM class.\n\n#### Examples\n\nThe following example shows how to retrieve the error object that is associated with an instance of the COM class.\n\n    COMError err; \n     \n    // The obj variable was previously instantiated. \n    err = obj.error(); \n     \n    // Output the error number. \n    info(strfmt(\"Error: %1\", err.number()))\n\n### Method interface\n\nReturns the interface that is associated with the COM object.\n\n    public ComInterface interface()\n\n#### Return Value\n\nThe interface that is associated with the COM object; 0 (zero) if no interface is associated with the COM object.\n\n#### Examples\n\nThe following example shows how to retrieve the interface that is associated with a COM object.\n\n    // The obj variable was previously instantiated. \n    info(strfmt(\"Interface: %1\", obj.interface()));\n\n### Method lcid\n\n    public int lcid([int lcid])\n\n#### Parameters\n\nlcid  \n\n#### Return Value\n\n### Method toString\n\nReturns a string that represents the instance of the COM class.\n\n    public str toString()\n\n#### Return Value\n\nA string that contains a description of the instance of the COM class.\n\n#### Examples\n\nThe following example shows how to use the toString method.\n\n    print objCOM.toString();\n\n### Method createFromInterface\n\nCreates an instance of the COM class by using the specified COM interface.\n\n    public static COM createFromInterface(ComInterface interface)\n\n#### Parameters\n\ninterface  \nThe interface to use to create the new instance of the COM class.\n\n#### Return Value\n\nAn instance of the COM class for the COM interface that is specified by the interface parameter; nullNothingnullptrunita null reference (Nothing in Visual Basic) if the instance of the COM class could not be created.\n\n#### Remarks\n\nTo help reduce security risks that are associated with unmanaged code, make sure that you validate the objects that are passed to this method, and that all DLLs used for your COM objects are protected by access control lists.\n\n### Method createFromObject\n\nCreates an instance of the COM class by using the specified COM object.\n\n    public static COM createFromObject(COM object)\n\n#### Parameters\n\nobject  \nThe instance of the COM class to use to create the new instance of the COM class.\n\n#### Return Value\n\nAn instance of the COM class for the COM object that is specified by the object parameter; nullNothingnullptrunita null reference (Nothing in Visual Basic) if the instance of the COM class could not be created.\n\n#### Remarks\n\nTo help reduce security risks that are associated with unmanaged code, make sure that you validate the objects that are passed to this method, and that all DLLs used for your COM objects are protected by access control lists.\n\n### Method createFromVariant\n\nCreates an instance of the COM class by using the specified instance of the COMVariant class.\n\n    public static COM createFromVariant(COMVariant variant)\n\n#### Parameters\n\nvariant  \nThe instance of the COMVariant class to use to create the new instance of the COM class.\n\n#### Return Value\n\nAn instance of the COM class for the COM object that is specified by the variant parameter; nullNothingnullptrunita null reference (Nothing in Visual Basic) if the instance of the COM class could not be created.\n\n#### Remarks\n\nTo help reduce security risks that are associated with unmanaged code, make sure that you validate the objects that are passed to this method, and that all DLLs used for your COM objects are protected by access control lists.\n\n### Method getObject\n\nReturns an instance of a COM object that is running.\n\n    public static COM getObject(str className)\n\n#### Parameters\n\nclassName  \nThe ProgID value or class name of the COM object that is used to create the instance of the COM class.\n\n#### Return Value\n\nAn instance of the COM class for the class that is specified by the className parameter; nullNothingnullptrunita null reference (Nothing in Visual Basic) if the instance could not be created.\n\n#### Remarks\n\nIf multiple instances of the specified COM object are running, we cannot guarantee which instance will be returned by the getObject method. Some COM objects do not support the extended features that enable calls to this method.\n\n#### Examples\n\nThe following example shows how to retrieve an instance of a running COM object.\n\n    COM objExcel, objWorkBook, objWorkBooks; \n    InteropPermission perm; \n      \n    // Set code access permission to help protect the use of COM.new. \n    perm = new InteropPermission(InteropKind::ComInterop); \n    perm.assert(); \n      \n    objExcel = COM::getObject(\"Excel.Application\"); \n      \n    if (!objExcel) \n    { \n        // Unable to connect to a running instance of Microsoft Excel. \n        // Try starting it. \n        objExcel = new COM(\"Excel.Application\"); \n        if (!objExcel) \n        { \n            Info (\"Unable to find or create an instance of Excel\"); \n            return;  // Or other error action. \n        }  \n    } \n    // Close code access permission scope. \n    CodeAccessPermission::revertAssert(); \n      \n    objExcel.visible(true); \n    objWorkBooks = objExcel.workbooks(); \n    if (objWorkBooks) \n    { \n        objWorkBook = objWorkBooks.open(\"d:\\mydata\\book1.xls\"); \n    }\n\n### Method getObjectEx\n\nReturns an instance of a COM object that is specified by its file name.\n\n    public static COM getObjectEx(str fileName)\n\n#### Parameters\n\nfileName  \nThe name of the file that provides the functionality for the COM object that is used to create the instance of the COM class.\n\n#### Return Value\n\nAn instance of the COM class that is specified by the filename parameter; nullNothingnullptrunita null reference (Nothing in Visual Basic) if the instance could not be created.\n\n#### Remarks\n\nTo help reduce security risks that are associated with unmanaged code, make sure that you validate the objects that are passed to this method, and that all DLLs used for your COM objects are protected by access control lists.\n\n### Method unsupported\n\nReserved.\n\n    public static AnyType unsupported(int action, [AnyType param1], [AnyType param2], [AnyType param3])\n\n#### Parameters\n\naction  \n\n<!-- -->\n\nparam1  \n\n<!-- -->\n\nparam2  \n\n<!-- -->\n\nparam3  \n\n#### Return Value\n\n### Method finalize\n\nFrees resources that are associated with the instance of the COM class.\n\n    public void finalize()\n\n#### Examples\n\nThe following example how to use the finalize method.\n\n    objCOM.finalize();\n\n### Method new\n\nCreates an instance of the COM class that can be attached to the COM class and optionally instantiates a COM object on a specified computer.\n\n    public void new([str className], [str computerName])\n\n#### Parameters\n\nclassName  \nThe name of the remote computer on which to instantiate the COM object; optional. If this parameter is omitted, the COM object is instantiated on the local computer. If the computer name is specified, the DCOM system component must be installed on both the local computer and the remote computer. The specific COM object must support DCOM, and it must be correctly configured on both the local computer and the remote computer. The system component is a standard component of MicrosoftWindows 98, Windows NT, and later versions. In Windows 95, the DCOM system component must be installed.\n\n<!-- -->\n\ncomputerName  \nThe name of the remote computer on which to instantiate the COM object; optional. If this parameter is omitted, the COM object is instantiated on the local computer. If the computer name is specified, the DCOM system component must be installed on both the local computer and the remote computer. The specific COM object must support DCOM, and it must be correctly configured on both the local computer and the remote computer. The system component is a standard component of MicrosoftWindows 98, Windows NT, and later versions. In Windows 95, the DCOM system component must be installed.\n\n#### Remarks\n\nThe class name of a COM object is either its programmatic identifier (ProgID) or its class identifier (CLSID):\n\n-   ProgIDs have the following format: program.component.version\n-   CLSIDs are 128-bit values and have the following format: {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\n\nIf an attacker can control input to the new method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the InteropPermission class. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.\n\n#### Examples\n\nThis example calls the GetFileName method from the Scripting.FileSystemObject COM object.\n\n    void COMExample() \n    { \n        COM               com; \n        str               result; \n        InteropPermission perm; \n      \n        // Set the code access permission to help protect the use of the \n        // COM object. \n        perm = new InteropPermission(InteropKind::ComInterop); \n        if (perm == null) \n        { \n            return; \n        } \n        // Permission scope starts here. \n        perm.assert(); \n      \n        com = new COM(\"Scripting.FileSystemObject\"); \n        if (com != null) \n        { \n            result = com.GetFileName(@\"c:boot.ini\"); \n        } \n      \n        // Close the code access permission scope. \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Method attach\n\nAttaches an instance of the COM class to a COM interface.\n\n    public void attach(ComInterface interface)\n\n#### Parameters\n\ninterface  \nThe interface to attach to the instance of the COM class.\n\n#### Remarks\n\nThis method is provided because some COM objects can be instantiated only by other COM objects and cannot be instantiated directly by the COM class.\n\n### Method detach\n\nDetaches a COM object from the class that it was associated with.\n\n    public void detach()\n\n#### Remarks\n\nFor example, this method can be called to detach a COM object from a call to the attach or new method.\n\n## Class COMDispFunction\n    class COMDispFunction extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                   | Description                                                                                          |\n|--------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|\n| public int call(VarArg )                                                 |                                                                                                      |\n| public AnyType callContainerOfParms(container parms)                     |                                                                                                      |\n| public str toString()                                                    | Returns a string that represents the current object.                                                 |\n| public void finalize()                                                   |                                                                                                      |\n| public void new(COM comObject, str functionName, COMDispContext context) | Creates a COMDispFunction object, which is used to access the functionality in an Automation object. |\n\n### Method call\n\n    public int call(VarArg )\n\n#### Parameters\n\n  \n\n#### Return Value\n\n#### Remarks\n\nIf an attacker can control input to the call method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the InteropPermission class. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.\n\n### Method callContainerOfParms\n\n    public AnyType callContainerOfParms(container parms)\n\n#### Parameters\n\nparms  \n\n#### Return Value\n\n### Method toString\n\nReturns a string that represents the current object.\n\n    public str toString()\n\n#### Return Value\n\nA string that represents the current object.\n\n#### Remarks\n\nThe default implementation returns the class name of the object. The method can be overridden in a derived class to return values that are meaningful for that type. For example, an instance of the SysMethodInfo class returns the method name and type of the method, such as instance or static.\n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nCreates a COMDispFunction object, which is used to access the functionality in an Automation object.\n\n    public void new(COM comObject, str functionName, COMDispContext context)\n\n#### Parameters\n\ncomObject  \nThe context of the functionality to access. The following values are used: COMDispContext::METHOD, COMDispContext::PROPERTYGET, COMDispContext::PROPERTYPUT, and COMDispContext::PROPERTYPUTREF\n\n<!-- -->\n\nfunctionName  \nThe context of the functionality to access. The following values are used: COMDispContext::METHOD, COMDispContext::PROPERTYGET, COMDispContext::PROPERTYPUT, and COMDispContext::PROPERTYPUTREF\n\n<!-- -->\n\ncontext  \nThe context of the functionality to access. The following values are used: COMDispContext::METHOD, COMDispContext::PROPERTYGET, COMDispContext::PROPERTYPUT, and COMDispContext::PROPERTYPUTREF\n\n#### Remarks\n\nIt is important that you specify the correct context of the functionality in the COM object that you want to access, because a COM object can supply up to four functions that use the same name. Because of the possible name clashing, the context is used to distinguish the method or properties. To specify the correct context, see the documentation for the COM object that you want to access.\n\n#### Examples\n\n \n\n    { \n        InteropPermission perm; \n        COM com; \n        COMDispFunction funcShow; \n        COMDispFunction getValue; \n        COMDispFunction putValue; \n        ; \n      \n        perm = new InteropPermission(InteropKind::ComInterop); \n        perm.assert(); \n        com = new COM(\"MyCOM.Object\"); \n        funcShow = \n            new COMDispFunction(com, \"show\",  COMDispContext::METHOD); \n        getValue = \n            new COMDispFunction(com, \"value\", COMDispContext::PROPERTYGET); \n        putValue = \n            new COMDispFunction(com, \"value\", COMDispContext::PROPERTYPUT); \n    }\n\n## Class COMError\n    class COMError extends Object\n\nThe COMError class wraps any COM errors that occur during a COM method call.\n\n### Remarks\n\nWhen an error occurs during a COM method call, the error code and the error description are stored in the COMError object. The COMError object that is associated with a COM class is retrieved from the COM class by using the COM.error method.\n\n### Examples\n\n### Methods\n\n| Method                   | Description                                                                                                               |\n|--------------------------|---------------------------------------------------------------------------------------------------------------------------|\n| public str description() | Returns a description of the error that occurred when the COM object was called.                                          |\n| public int helpContext() | Returns the Help context ID for the error that occurred when the COM object was called.                                   |\n| public str helpFile()    | Returns the name of the Help file that contains information about the error that occurred when the COM object was called. |\n| public int number()      | Returns the error code of the error that occurred when the COM object was called.                                         |\n| public str source()      | Returns the name of the component that caused the error that occurred when the COM object was called.                     |\n| public str toString()    | Returns a string that contains the class handle and name, and sometimes additional information.                           |\n| public void clear()      | Clears the properties of the COMError object.                                                                             |\n| public void new()        | Initializes an instance of the COMError class.                                                                            |\n| public void finalize()   |                                                                                                                           |\n\n### Method description\n\nReturns a description of the error that occurred when the COM object was called.\n\n    public str description()\n\n#### Return Value\n\nThe error description.\n\n#### Remarks\n\nThe description might be empty if the COM object does not support handing out textual error messages. The description property is read-only.\n\n### Method helpContext\n\nReturns the Help context ID for the error that occurred when the COM object was called.\n\n    public int helpContext()\n\n#### Return Value\n\nThe Help context ID.\n\n#### Remarks\n\nThe Help context ID might be 0 (zero) if the COM object does not support Help for its errors. The helpContext property is read-only.\n\n### Method helpFile\n\nReturns the name of the Help file that contains information about the error that occurred when the COM object was called.\n\n    public str helpFile()\n\n#### Return Value\n\nThe name of the Help file.\n\n#### Remarks\n\nThe Help file might be empty if the COM object does not support Help for its errors. The helpFile property is read-only.\n\n### Method number\n\nReturns the error code of the error that occurred when the COM object was called.\n\n    public int number()\n\n#### Return Value\n\nThe error code; 0 (zero) if no error occurred when the COM object was called.\n\n#### Remarks\n\nThe number property is read-only.\n\n### Method source\n\nReturns the name of the component that caused the error that occurred when the COM object was called.\n\n    public str source()\n\n#### Return Value\n\nThe source of the error.\n\n#### Remarks\n\nThe source might be empty if the COM object does not support handing out the source of the error. The source property is read-only.\n\n### Method toString\n\nReturns a string that contains the class handle and name, and sometimes additional information.\n\n    public str toString()\n\n#### Return Value\n\nA textual description of the class.\n\n#### Remarks\n\nFor most classes, the string that is returned contains the class handle and name. However, for some classes, additional information is included in the string.\n\n### Method clear\n\nClears the properties of the COMError object.\n\n    public void clear()\n\n#### Remarks\n\nThe properties of the COMError object are usually read-only, but they can be cleared by using this method.\n\n### Method new\n\nInitializes an instance of the COMError class.\n\n    public void new()\n\n### Method finalize\n\n    public void finalize()\n\n## Class CommaIo\n    class CommaIo extends Io\n\nThe CommaIo class provides functionality for reading and writing comma-separated files.\n\n### Remarks\n\nThis class has been replaced by the CommaTextIo class.\n\n### Examples\n\n### Methods\n\n| Method                                       | Description                                                                                                                  |\n|----------------------------------------------|------------------------------------------------------------------------------------------------------------------------------|\n| public int filePosition()                    |                                                                                                                              |\n| public str inFieldDelimiter(\\[str value\\])   | Determines the delimiter used to separate fields in records accessed by the \\*Io classes.                                    |\n| public str inRecordDelimiter(\\[str value\\])  | Determines to the \\*Io classes what character or characters to search for to determine whether a full record has been read.  |\n| public int inRecordLength(\\[int value\\])     | Gets or sets the number of characters to read for each record in a file.                                                     |\n| public str outFieldDelimiter(\\[str value\\])  | Gets or sets the sequence of characters that are written to a file that is used to separate the fields of a record.          |\n| public str outRecordDelimiter(\\[str value\\]) | Gets or sets the sequence of characters that is written to the output files, which separate the records in the output files. |\n| public container read()                      | Reads the next full record from the Io object.                                                                               |\n| public IO\\_Status status()                   | Retrieves the status of the last operation that was performed on the Io object.                                              |\n| public boolean write(VarArg values)          | Writes values of a simple type.                                                                                              |\n| public boolean writeExp(container data)      | Writes the content of a container to a file.                                                                                 |\n| public void new(str filename, str mode)      | Creates a new object of the CommaIo class.                                                                                   |\n| public void finalize()                       | Closes the file and, if data was written, flushes the file buffers to disk.                                                  |\n\n### Method filePosition\n\n    public int filePosition()\n\n#### Return Value\n\n### Method inFieldDelimiter\n\nDetermines the delimiter used to separate fields in records accessed by the \\*Io classes.\n\n    public str inFieldDelimiter([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe delimiter used to separate fields in records accessed by the \\*Io classes.\n\n### Method inRecordDelimiter\n\nDetermines to the \\*Io classes what character or characters to search for to determine whether a full record has been read.\n\n    public str inRecordDelimiter([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe character or characters that indicate whether a full record has been read.\n\n#### Remarks\n\nFor standard text, the delimiter is a newline character.\n\n### Method inRecordLength\n\nGets or sets the number of characters to read for each record in a file.\n\n    public int inRecordLength([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe number of characters to read for each record in the file.\n\n#### Remarks\n\nFor files that have a fixed-length format, use the inRecordLength property to guarantee that no more than the specified number of characters are read for each record.If the record format is overruled by a specified inRecordDelimiter property value , that is the inRecordDelimiter value is met before the fixed length is read, the record is accepted, and no additional data is read. To ensure that a fixed number of characters are read, set the inRecordDelimiter property value to an empty string. When no inRecordDelimiter property value is found, the inRecordDelimiter property value is the maximum limit of characters to read. Set the inRecordDelimiter property value to zero to disable the record length check.\n\n### Method outFieldDelimiter\n\nGets or sets the sequence of characters that are written to a file that is used to separate the fields of a record.\n\n    public str outFieldDelimiter([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe sequence of characters that are written to a file that is used to separate the fields of a record.\n\n### Method outRecordDelimiter\n\nGets or sets the sequence of characters that is written to the output files, which separate the records in the output files.\n\n    public str outRecordDelimiter([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe sequence of characters that is written to the output files.\n\n#### Remarks\n\nFor standard text files, the delimiter is a newline character.\n\n### Method read\n\nReads the next full record from the Io object.\n\n    public container read()\n\n#### Return Value\n\nThe next full record from the Io object.\n\n#### Remarks\n\nThe definition of the next full record is controlled by the inFieldDelimiter, inRecordDelimiter, and inRecordLength properties. The record is returned as a container. Each entry in the container equals one field in the record. Each specialized Io class has default settings for the inFieldDelimiter, inRecordDelimiter, and inRecordLength properties to enable input and output in the most common formats. However, you might have to adjust these settings to support the desired format.\n\n### Method status\n\nRetrieves the status of the last operation that was performed on the Io object.\n\n    public IO_Status status()\n\n#### Return Value\n\nThe status of the last operation, in the form of a system enumeration.\n\n#### Remarks\n\nThe return value is represented by the IO\\_Status system enumeration. The range of possible IO\\_Status values varies among Io classes.\n\n#### Examples\n\nThis example shows how to use the status method. However, this example will not compile in a job, because it must be run in the context of a class, form, or other object.\n\n    { \n        // Create an Io object and perform some operations. \n        if (myIo.status() == IO_Status::OK) \n        { \n            // Go ahead - the last operation was successful. \n        } \n    }\n\n### Method write\n\nWrites values of a simple type.\n\n    public boolean write(VarArg values)\n\n#### Parameters\n\nvalues  \nOne or more values, each of a simple type, separated by a field delimiter. The simple types are string, integer, real, enum, and date.\n\n#### Return Value\n\ntrue if the write operation succeeds; otherwise, false. If the operation fails, you can check the status to learn the cause of the failure.\n\n#### Remarks\n\nThe method accepts a variable number of arguments. Each value that is specified is put into the output record as a field. The first argument becomes the first field, the second argument becomes the second field, and so on. Fields are separated by the field delimiter that is specified in the outFieldDelimiter method. Records are separated by the delimiter that is specified by using the outRecordDelimiter method. To write complete containers, use the writeExp method.\n\n### Method writeExp\n\nWrites the content of a container to a file.\n\n    public boolean writeExp(container data)\n\n#### Parameters\n\ndata  \nThe container that holds data for the record.\n\n#### Return Value\n\ntrue if the operation succeeds; otherwise, false. If the operation fails, you can check the status to learn the cause of the failure.\n\n#### Remarks\n\nThe entries in the container are treated as fields. The container itself is treated as a full record. Fields are separated by the delimiter that is specified by using the outFieldDelimiter method. Records are separated by the delimiter that is specified by using the outRecordDelimiter method.\n\n#### Examples\n\nThis example uses a CommaIO object to read from the example file.\n\n    { \n        container c; \n        CommaIo myfile; \n        FileIoPermission perm; \n      \n        #define.ExampleFile(@\"c:myfile.txt\") \n        #define.ExampleOpenMode(\"w\") \n      \n        // Set code access permission to help protect the use \n        // of CommaIO.new \n        perm = new FileIoPermission(#ExampleFile, #ExampleOpenMode); \n        perm.assert(); \n      \n        myfile = new CommaIo(#ExampleFile, #ExampleOpenMode); \n      \n        // Assign the entries in the container according to record layout. \n        c = [1,\"MyText\",1.324,\"Last field\"]; \n        // Write this record according to file format  \n        // (record/field delimiters). \n        myfile.writeExp(c); \n         \n        // Close the code access permission. \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Method new\n\nCreates a new object of the CommaIo class.\n\n    public void new(str filename, str mode)\n\n#### Parameters\n\nfilename  \nThe mode that the file should be opened in. Specify the mode as follows:\n\n<!-- -->\n\nmode  \nThe mode that the file should be opened in. Specify the mode as follows:\n\n#### Remarks\n\nA run-time error occurs if the file is accessed by using a method that does not correspond to the current mode. For example, an error occurs if a user tries to write to a file that is opened in read mode. If an attacker can control input to this method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the FileIOPermission class. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.\n\n#### Examples\n\nThe following example uses a CommaIO object to read from the ExampleFile file.\n\n    { \n        CommaIo         io; \n        container       con; \n        FileIoPermission perm; \n      \n        #define.ExampleFile(@\"c:test.txt\") \n        #define.ExampleOpenMode(\"r\") \n      \n        perm = new FileIoPermission(#ExampleFile, #ExampleOpenMode); \n        if (perm == null) \n        { \n            return; \n        } \n        // Grants permission to execute the CommaIo.new method. \n        // CommaIo.new runs under code access security. \n        perm.assert(); \n      \n        io = new CommaIo(#ExampleFile, #ExampleOpenMode); \n        if (io != null) \n        { \n            con = io.read(); \n        } \n      \n        // Close the code access permission scope. \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Method finalize\n\nCloses the file and, if data was written, flushes the file buffers to disk.\n\n    public void finalize()\n\n#### Remarks\n\nThis method is not usually called directly; instead, the object is finalized by leaving the scope. The written output is not valid until the object is finalized.\n\n## Class CommaTextIo\n    class CommaTextIo extends Io\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                    | Description                                                                                                                  |\n|-----------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------|\n| public int filePosition()                                 |                                                                                                                              |\n| public str inFieldDelimiter(\\[str value\\])                | Determines the delimiter used to separate fields in records accessed by the \\*Io classes.                                    |\n| public str inRecordDelimiter(\\[str value\\])               | Determines to the \\*Io classes what character or characters to search for to determine whether a full record has been read.  |\n| public int inRecordLength(\\[int value\\])                  | Gets or sets the number of characters to read for each record in a file.                                                     |\n| public str outFieldDelimiter(\\[str value\\])               | Gets or sets the sequence of characters that are written to a file that is used to separate the fields of a record.          |\n| public str outRecordDelimiter(\\[str value\\])              | Gets or sets the sequence of characters that is written to the output files, which separate the records in the output files. |\n| public container read()                                   | Reads the next full record from the Io object.                                                                               |\n| public IO\\_Status status()                                | Retrieves the status of the last operation that was performed on the Io object.                                              |\n| public boolean write(VarArg values)                       | Writes values of a simple type.                                                                                              |\n| public boolean writeExp(container data)                   | Writes the content of a container to a file.                                                                                 |\n| public void finalize()                                    | Closes the file and, if data was written, flushes the file buffers to disk.                                                  |\n| public void new(str filename, str mode, \\[int codepage\\]) | Initializes a new instance of the Object class.                                                                              |\n\n### Method filePosition\n\n    public int filePosition()\n\n#### Return Value\n\n### Method inFieldDelimiter\n\nDetermines the delimiter used to separate fields in records accessed by the \\*Io classes.\n\n    public str inFieldDelimiter([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe delimiter used to separate fields in records accessed by the \\*Io classes.\n\n### Method inRecordDelimiter\n\nDetermines to the \\*Io classes what character or characters to search for to determine whether a full record has been read.\n\n    public str inRecordDelimiter([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe character or characters that indicate whether a full record has been read.\n\n#### Remarks\n\nFor standard text, the delimiter is a newline character.\n\n### Method inRecordLength\n\nGets or sets the number of characters to read for each record in a file.\n\n    public int inRecordLength([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe number of characters to read for each record in the file.\n\n#### Remarks\n\nFor files that have a fixed-length format, use the inRecordLength property to guarantee that no more than the specified number of characters are read for each record.If the record format is overruled by a specified inRecordDelimiter property value , that is the inRecordDelimiter value is met before the fixed length is read, the record is accepted, and no additional data is read. To guarantee that a fixed number of characters are read, set the inRecordDelimiter property value to an empty string. When no inRecordDelimiter property value is found, the inRecordDelimiter property value is the maximum limit of characters to read. Set the inRecordDelimiter property value to zero to disable the record length check.\n\n### Method outFieldDelimiter\n\nGets or sets the sequence of characters that are written to a file that is used to separate the fields of a record.\n\n    public str outFieldDelimiter([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe sequence of characters that are written to a file that is used to separate the fields of a record.\n\n### Method outRecordDelimiter\n\nGets or sets the sequence of characters that is written to the output files, which separate the records in the output files.\n\n    public str outRecordDelimiter([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe sequence of characters that is written to the output files.\n\n#### Remarks\n\nFor standard text files, the delimiter is a newline character.\n\n### Method read\n\nReads the next full record from the Io object.\n\n    public container read()\n\n#### Return Value\n\nA container that holds the next full record from the Io object.\n\n#### Remarks\n\nThe definition of the next full record is controlled by the inFieldDelimiter, inRecordDelimiter, and inRecordLength method properties. The record is returned as a container. Each entry in the container equals one field in the record. Each specialized Io class has default settings for the inFieldDelimiter, inRecordDelimiter, and inRecordLength properties. These default settings enable input and output in the most common formats. However, you might have to adjust these settings to support the desired format.\n\n### Method status\n\nRetrieves the status of the last operation that was performed on the Io object.\n\n    public IO_Status status()\n\n#### Return Value\n\nThe status of the last operation, as an IO\\_Status system enumeration value.\n\n#### Remarks\n\nThe range of IO\\_Status values that can be returned varies, depending on the Io class.\n\n### Method write\n\nWrites values of a simple type.\n\n    public boolean write(VarArg values)\n\n#### Parameters\n\nvalues  \nA value of a simple type. The simple types are string, integer, real, enum, and date.\n\n#### Return Value\n\ntrue if the write operation is successful; otherwise, false. If the write operation fails, you can use the status method to determine the cause.\n\n#### Remarks\n\nThe method accepts a variable number of arguments. Each value that is specified is put into the output record as a field. The first argument is the first field, the second argument is the second field, and so on. Fields are separated by the delimiter that is specified in the outFieldDelimiter method. Records are separated by the delimiter that is specified in the outRecordDelimiter method. To write complete containers, use the writeExp method.\n\n### Method writeExp\n\nWrites the content of a container to a file.\n\n    public boolean writeExp(container data)\n\n#### Parameters\n\ndata  \nThe container that holds data for the record.\n\n#### Return Value\n\ntrue if the operation is successful; otherwise, false.\n\n#### Remarks\n\nIf this method returns false, check the status method for the cause. The entries in the container are treated as fields, and the container is treated as a full record. The field separator is defined in the outFieldDelimiter method. The record separator is defined in the outRecordDelimiter method.\n\n### Method finalize\n\nCloses the file and, if data was written, flushes the file buffers to disk.\n\n    public void finalize()\n\n#### Remarks\n\nThis method is not usually called directly. Instead, the object is usually finalized by leaving the scope. Written output is not valid until the object is finalized.\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(str filename, str mode, [int codepage])\n\n#### Parameters\n\nfilename  \n\n<!-- -->\n\nmode  \n\n<!-- -->\n\ncodepage  \n\n#### Remarks\n\nIf an attacker can control input to the new method, a security risk exists. Therefore, this method runs under Code Access Security. Calls to this method on the server require permission from the FileIOPermission class. Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.\n\n## Class CompileOutputInfos\n    class CompileOutputInfos extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                               | Description |\n|--------------------------------------|-------------|\n| ::public static void NotifyChanges() |             |\n\n### Method NotifyChanges\n\n    public static void NotifyChanges()\n\n## Class COMVariant\n    class COMVariant extends Object\n\nThe COMVariant class is used as a generic class that can store different types of data. The class is used to pass arguments to the methods or properties of a COM (Component Object Model) Automation object and is used with the COM and COMDispFunction classes.\n\n### Remarks\n\nThe data type of the COMVariant object can be set by:\n\n-   The new method\n-   The variantType method\n-   The createFrom… methods. For example, the createFromBoolean method creates a COMVariant object of type VT\\_BOOL (= Boolean).\n-   The property methods. For example, if you set a new value by using the boolean property, and the object is not of type VT\\_BOOL (= Boolean), it will be changed to this type.\n\nThe value of the data type is set by one of the property methods. For example, the value of a COMVariant object of type VT\\_BOOL is set by the boolean method. The possible data types and the methods that set their values are listed in the Remarks section. The data types that the COMVariant class supports are not X++ data types, but data types defined by the COM Automation standard. The COMVariant class is based on the VARIANT structure found in the Win32 SDK. For more information see the Win32 SDK documentation. The property methods of the COMVariant class map to the COMVariantType values in the following way:\n\n|             |               |                                                                                           |\n|-------------|---------------|-------------------------------------------------------------------------------------------|\n| boolean     | VT\\_BOOL      |                                                                                           |\n| bStr        | VT\\_BSTR      | String data type                                                                          |\n| byte        | VT\\_UI1       |                                                                                           |\n| char        | VT\\_I1        |                                                                                           |\n| currency    | VT\\_CY        |                                                                                           |\n| date, time  | VT\\_DATE      | Date/time data type; both properties must be set.                                         |\n| decimal     | VT\\_DECIMAL   |                                                                                           |\n| double      | VT\\_R8        |                                                                                           |\n| float       | VT\\_R4        |                                                                                           |\n| iDispatch   | VT\\_DISPATCH  |                                                                                           |\n| int, long   | VT\\_I4        | VT\\_I4 is used for both the int and the long data types                                   |\n| iUnknown    | VT\\_UNKNOWN   |                                                                                           |\n| sCode       | VT\\_ERROR     | The scode data type is a COM data type that is equivalent to the Win32 HRESULT data type. |\n| short       | VT\\_I2        |                                                                                           |\n| uInt, uLong | VT\\_UI4       | VT\\_UI4 is used for both the uInt and the uLong data types                                |\n| uShort      | VT\\_UI2       |                                                                                           |\n| variant     | VT\\_VARIANT   |                                                                                           |\n| safeArray   | VT\\_SAFEARRAY | Array data type                                                                           |\n\n### Examples\n\nThe following example instantiates a COM object that exposes a method called multiply which multiplies two floating point numbers passed in as COMVariant parameters.\n\n    { \n        COM com; \n        COMVariant varArg1 = new COMVariant(); \n        COMVariant varArg2 = new COMVariant(); \n        COMVariant varRet; \n        real ret; \n        InteropPermission perm; \n      \n        // Set code access permission to help protect the use  \n        // of the COM object. \n        perm = new InteropPermission(InteropKind::ComInterop); \n        if (perm == null) \n        { \n            return; \n        } \n      \n        // Permission scope starts here \n        perm.assert(); \n      \n            com = new COM(\"MyCOM.Object\"); \n      \n        // Specify arguments for the 'multiply' method \n        varArg1.float(123); \n        varArg2.float(456); \n        varRet = com.multiply(varArg1, varArg2); \n      \n        ret = varRet.double(); \n        // 'ret' is now 56088 (123*456) \n      \n        // Close the code access permission scope. \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Methods\n\n| Method                                                                                                    | Description                                                                                                                                                                 |\n|-----------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean boolean(\\[boolean newValue\\])                                                              | Gets or sets the value of a COMVariant object of the VT\\_BOOL data type.                                                                                                    |\n| public str bStr(\\[str newValue\\])                                                                         | Gets or sets the value of a COMVariant object of the VT\\_BSTR data type.                                                                                                    |\n| public int byte(\\[int newValue\\])                                                                         | Gets or sets the value of a COMVariant object of the VT\\_UI1 data type.                                                                                                     |\n| public int char(\\[int newValue\\])                                                                         | Gets or sets the value of a COMVariant object of the VT\\_I1 data type.                                                                                                      |\n| public container container(\\[container newValue\\], \\[COMVariantType newType\\])                            | Gets or sets the value of a COMVariant object of the container data type.                                                                                                   |\n| public Real currency(\\[Real newValue\\])                                                                   | Gets or sets the value of a COMVariant object of the VT\\_CY data type.                                                                                                      |\n| public Date date(\\[Date newValue\\])                                                                       | Gets or sets the date part of the value of a COMVariant object of the VT\\_DATE data type.                                                                                   |\n| public Real decimal(\\[Real newValue\\])                                                                    | Gets or sets the value of a COMVariant object of the VT\\_DECIMAL data type.                                                                                                 |\n| public Real double(\\[Real newValue\\])                                                                     | Gets or sets the value of a COMVariant object of the VT\\_R8 data type.                                                                                                      |\n| public Real float(\\[Real newValue\\])                                                                      | Gets or sets the value of a COMVariant object of the VT\\_R4 data type.                                                                                                      |\n| public ComInterface iDispatch(\\[ComInterface newValue\\])                                                  | Gets or sets the value of a COMVariant object of the VT\\_DISPATCH data type.                                                                                                |\n| public int int(\\[int newValue\\])                                                                          | Gets or sets the value of a COMVariant object of the VT\\_I4 data type.                                                                                                      |\n| public ComInterface iUnknown(\\[ComInterface newValue\\])                                                   | Gets or sets the value of a COMVariant object of the VT\\_UNKNOWN (IUnknown) data type.                                                                                      |\n| public int long(\\[int newValue\\])                                                                         | Gets or sets the value of a COMVariant object of the VT\\_I4 data type.                                                                                                      |\n| public Int64 longLong(\\[Int64 newValue\\])                                                                 | Gets or sets the value of a COMVariant object of the VT\\_I8 (longlong) data type.                                                                                           |\n| public Array safeArray(\\[Array newValue\\], \\[COMVariantType newType\\])                                    | Gets or sets the value of a COMVariant object of the VT\\_SAFEARRAY data type.                                                                                               |\n| public int sCode(\\[int newValue\\])                                                                        | Gets or sets the value of a COMVariant object of the VT\\_ERROR data type.                                                                                                   |\n| public int short(\\[int newValue\\])                                                                        | Gets or sets the value of a COMVariant object of the VT\\_I2 (short) data type.                                                                                              |\n| public int time(\\[int newValue\\])                                                                         | Gets or sets the time part of the value of a COMVariant object of the VT\\_DATE data type.                                                                                   |\n| public str toString()                                                                                     | Creates a string representation of a COMVariant object. This string representation includes the value and type of the object.                                               |\n| public int uInt(\\[int newValue\\])                                                                         | Gets or sets the value of a COMVariant object of the VT\\_UI4 data type.                                                                                                     |\n| public int uLong(\\[int newValue\\])                                                                        | Gets or sets the value of a COMVariant object of the VT\\_UI4 (unsigned long) data type.                                                                                     |\n| public Int64 uLongLong(\\[Int64 newValue\\])                                                                | Gets or sets the value of a COMVariant object of the VT\\_UI8 (unsigned longlong) data type.                                                                                 |\n| public int uShort(\\[int newValue\\])                                                                       | Gets or sets the value of a COMVariant object of the VT\\_UI2 data type.                                                                                                     |\n| public COMVariant variant(\\[COMVariant newValue\\])                                                        | Gets or sets the value of a COMVariant object of the VT\\_VARIANT (variant) data type.                                                                                       |\n| public COMVariantInOut variantInOutFlag(\\[COMVariantInOut newValue\\])                                     | Sets or returns the InOutFlag setting for a COMVariant object.                                                                                                              |\n| public COMVariantType variantType(\\[COMVariantType newValue\\])                                            | Queries a COMVariant object for its variant data type or changes the data type.                                                                                             |\n| ::public static COMVariant createDateFromYMD(int year, int month, int day, \\[COMVariantInOut inOutFlag\\]) | Creates a new COMVariant object and initializes it with a date value in one operation.                                                                                      |\n| ::public static COMVariant createFromArray(Array value, \\[COMVariantInOut inOutFlag\\])                    | Creates a new COMVariant object and initializes it with an array in one operation.                                                                                          |\n| ::public static COMVariant createFromBoolean(boolean value, \\[COMVariantInOut inOutFlag\\])                | Creates a new COMVariant object and initializes it with a Boolean value in one operation.                                                                                   |\n| ::public static COMVariant createFromCOM(COM value, \\[COMVariantInOut inOutFlag\\])                        | Creates a new COMVariant object and initializes it with a COM class in one operation.                                                                                       |\n| ::public static COMVariant createFromDate(Date value, \\[COMVariantInOut inOutFlag\\])                      | Creates a new COMVariant object and initializes it with a date value in one operation.                                                                                      |\n| ::public static COMVariant createFromDateAndTime(Date date, int time, \\[COMVariantInOut inOutFlag\\])      | Creates a new COMVariant object and initializes it with a date and time in one operation.                                                                                   |\n| ::public static COMVariant createFromInt(int value, \\[COMVariantInOut inOutFlag\\])                        | Creates a new COMVariant object and initializes it with an integer value in one operation.                                                                                  |\n| ::public static COMVariant createFromInt64(Int64 value, \\[COMVariantInOut inOutFlag\\])                    | Creates a new COMVariant object and initializes it with an int64 value (longLong or uLongLong) in one operation.                                                            |\n| ::public static COMVariant createFromReal(Real value, \\[COMVariantInOut inOutFlag\\])                      | Creates a new COMVariant object and initializes it with a real value in one operation.                                                                                      |\n| ::public static COMVariant createFromStr(str value, \\[COMVariantInOut inOutFlag\\])                        | Creates a new COMVariant object and initializes it with a string in one operation.                                                                                          |\n| ::public static COMVariant createFromTime(int value, \\[COMVariantInOut inOutFlag\\])                       | Creates a new COMVariant object and initializes it with a time value in one operation.                                                                                      |\n| ::public static COMVariant createFromUtcDateTime(DateTime value, \\[COMVariantInOut inOutFlag\\])           |                                                                                                                                                                             |\n| ::public static COMVariant createNoValue()                                                                | Creates a COMVariant object of the VT\\_ERROR variant type with no value.                                                                                                    |\n| public void new(\\[COMVariantInOut inOutFlag\\], \\[COMVariantType type\\])                                   | Creates a COMVariant object that can be used to pass arguments to the methods or properties of a COM Automation object.                                                     |\n| public void noValue()                                                                                     | Deletes the contents of an existing COMVariant object and enables it to act as an unspecified argument when it is used in the COMDispFunction.call method or the COM class. |\n| public void finalize()                                                                                    | Not implemented. You can override this method if you need to explicitly destruct an object.                                                                                 |\n\n### Method boolean\n\nGets or sets the value of a COMVariant object of the VT\\_BOOL data type.\n\n    public boolean boolean([boolean newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has a Boolean type if its data type is set to COMVariantType::VT\\_BOOL. The COM Boolean data type may also be referred to as \"VARIANT\\_BOOL\".\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_BOOL and sets the value to true.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_BOOL); \n     \n        // Set value of the object \n        var.boolean(true); \n    }\n\n### Method bStr\n\nGets or sets the value of a COMVariant object of the VT\\_BSTR data type.\n\n    public str bStr([str newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current string value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has a string data type if its data type is set to COMVariantType::VT\\_BSTR. The BStr data type is a COM data type that is used for handling strings.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_BSTR, and sets the value to \"Hello World.\"\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_BSTR); \n      \n        // Set string value of the object \n        var.bStr(\"Hello World\"); \n    }\n\n### Method byte\n\nGets or sets the value of a COMVariant object of the VT\\_UI1 data type.\n\n    public int byte([int newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has a byte data type if its data type is set to COMVariantType::VT\\_UI1. You can also use \"unsigned char\" to refer to the COM byte data type.\n\n#### Examples\n\nThe following example creates a new COMVariant object of the VT\\_UI1 type and sets the value to 123.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_UI1); \n      \n        // Set value of the object \n        var.byte(123); \n    }\n\n### Method char\n\nGets or sets the value of a COMVariant object of the VT\\_I1 data type.\n\n    public int char([int newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has a char data type if its data type is set to COMVariantType::VT\\_I1.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_I1 and sets the value tothe numeric value of A, which is 65.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_I1); \n      \n        // Set value of the object \n        var.char(Char2Num(\"A\", 1)); \n    }\n\n### Method container\n\nGets or sets the value of a COMVariant object of the container data type.\n\n    public container container([container newValue], [COMVariantType newType])\n\n#### Parameters\n\nnewValue  \nThe type of the new container; optional. The default is for the container to store integers.\n\n<!-- -->\n\nnewType  \nThe type of the new container; optional. The default is for the container to store integers.\n\n#### Return Value\n\nThe current container.\n\n#### Remarks\n\nThe possible values for the newType parameter are a subset of the values that are supplied by the COMVariantType system enum:\n\n-   VT\\_I2\n-   VT\\_I4\n-   VT\\_R4\n-   VT\\_R8\n-   VT\\_CY\n-   VT\\_DATE\n-   VT\\_BSTR\n-   VT\\_ERROR\n-   VT\\_BOOL\n-   VT\\_DECIMAL\n-   VT\\_I1\n-   VT\\_UI1\n-   VT\\_UI2\n-   VT\\_UI4\n-   VT\\_I8\n-   VT\\_UI8\n-   VT\\_INT\n-   VT\\_UINT\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. When a container is stored in a COMVariant object, the binary representation of the container is stored in a binary array (see the COMVariant.safeArray method). The container property is useful when you need to store data in a database COM object and then later read the data back into Finance and Operations without the COM object processing the data. The container property is an advanced property of the COMVariant class. It should be used with caution because the content of the binary array that the container is stored in, inside the COMVariant object, must not be changed by any COM object.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type container. The data in the container is passed to, and used by, a database COM object. Note The code in the following section contains a hypothetical COM object MyDatabaseCOM.Object\" and will therefore not run in Finance and Operations, unless such an object is created outside Finance and Operations.\n\n    { \n        COM com; \n        COMVariant var = new COMVariant(); \n        container con; \n        InteropPermission perm; \n      \n        // Set code access permission to help protect use of COM object \n        perm = new InteropPermission(InteropKind::ComInterop); \n        if (perm == null) \n        { \n            return; \n        } \n      \n        // Permission scope starts here \n        perm.assert(); \n      \n        // Put some data in the container \n        con = conins(con, 1, \"Element 1\"); \n        con = conins(con, 2, \"Element 2\"); \n        // Set value of the object and ensure the data \n        // is stored in a binary array of bytes \n        var.container(con, COMVariantType::VT_UI1); \n      \n        // Create a database object to store the data in \n        com = new COM(\"MyDatabaseCOM.Object\"); \n        com.writeData(var); \n        // ... \n      \n        // Close code access permission \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Method currency\n\nGets or sets the value of a COMVariant object of the VT\\_CY data type.\n\n    public Real currency([Real newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has a currency data type if its data type is set to COMVariantType::VT\\_CY. The currency data type is a COM data type that is optimized for currency values. It is a real number with four decimal places. Sometimes \"CY\" is also used to refer to the COM currency data type.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_CY and sets the value to 123.4567.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_CY); \n      \n        // Set value of the object \n        var.currency(123.4567); \n    }\n\n### Method date\n\nGets or sets the date part of the value of a COMVariant object of the VT\\_DATE data type.\n\n    public Date date([Date newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has a date and time data type if its data type is set to COMVariantType::VT\\_DATE. When you set the value of the object, you must set the time part of the value in addition to the date. To set the time part of the value, use the time property.\n\n#### Examples\n\nThe following example creates a COMVariant object of type VT\\_DATE and sets the date part of the value to 24 December 1998, and the time part of the value to 13.24.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_DATE); \n      \n        // Set value of the object \n        var.date(Str2Date(\"12.24.1998\", 213)); \n        var.time(Str2Time(\"13:24:00\")); \n    }\n\n### Method decimal\n\nGets or sets the value of a COMVariant object of the VT\\_DECIMAL data type.\n\n    public Real decimal([Real newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has a decimal type if its data type is set to COMVariantType::VT\\_DECIMAL. The decimal data type is a COM data type that provides size and scale for a number. There is no parallel to the decimal data type in X++.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_DECIMAL and sets the value to 123.456.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_DECIMAL); \n      \n        // Set value of the object \n        var.decimal(123.456); \n    }\n\n### Method double\n\nGets or sets the value of a COMVariant object of the VT\\_R8 data type.\n\n    public Real double([Real newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has a double data type if its data type is set to COMVariantType::VT\\_R8.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_R8 and sets the value to 123.456.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_R8); \n      \n        // Set value of the object \n        var.double(123.456); \n    }\n\n### Method float\n\nGets or sets the value of a COMVariant object of the VT\\_R4 data type.\n\n    public Real float([Real newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has a float type if its data type is set to COMVariantType::VT\\_R4. Sometimes \"single\" is also used to refer to the COM float data type.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_R4 and sets the value to 123.456.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_R4); \n      \n        // Set value of the object \n        var.float(123.456); \n    }\n\n### Method iDispatch\n\nGets or sets the value of a COMVariant object of the VT\\_DISPATCH data type.\n\n    public ComInterface iDispatch([ComInterface newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has an IDispatch data type if its data type is set to COMVariantType::VT\\_DISPATCH. The IDispatch data type is a COM data type that provides a handle to a COM IDispatch interface.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_DISPATCH.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_DISPATCH); \n        COMInterface comInterface; \n      \n        // Here, the comInterface variable must be assigned \n        // a COM IDispatch interface \n        //… \n     \n        // Set value of the object \n        var.iDispatch(comInterface); \n    }\n\n### Method int\n\nGets or sets the value of a COMVariant object of the VT\\_I4 data type.\n\n    public int int([int newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. The COMVariantType::VT\\_I4 data type is also used for the long variant type. The COMVariant.long method is identical to this method; the two methods exist for completeness.\n\n#### Examples\n\nThe following example creates a COMVariant object of type VT\\_I4 and sets the value to 123456.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_I4); \n      \n        // Set value of the object \n        var.int(123456); \n    }\n\n### Method iUnknown\n\nGets or sets the value of a COMVariant object of the VT\\_UNKNOWN (IUnknown) data type.\n\n    public ComInterface iUnknown([ComInterface newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type value. A COMVariant object has an IUnknown data type if its data type is set to COMVariantType::VT\\_UNKNOWN. The IUnknown data type is a COM data type that provides a handle to a COM IUnknown interface.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_UNKNOWN.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_UNKNOWN); \n        COMInterface comInterface; \n      \n        // comInterface variable is assigned \n        // a COM IUnknown interface \n        // ... \n      \n        // Set value of the object \n        var.iUnknown(comInterface); \n    }\n\n### Method long\n\nGets or sets the value of a COMVariant object of the VT\\_I4 data type.\n\n    public int long([int newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. The COMVariantType::VT\\_I4 data type is also used for the int variant type. The COMVariant.int method is identical to this method; the two methods exist for completeness.\n\n#### Examples\n\nThe following example creates a COMVariant object of type VT\\_I4 and sets the value to 123456.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_I4); \n      \n        // Set value of the object \n        var.long(123456); \n    }\n\n### Method longLong\n\nGets or sets the value of a COMVariant object of the VT\\_I8 (longlong) data type.\n\n    public Int64 longLong([Int64 newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the value’s data type. A COMVariant object has a longlong variant type if its data type is set to COMVariantType::VT\\_I8.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_I8 and sets the value to 2,305,843,009,213,693,952.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_BOOL); \n      \n        // Set value of the object \n        var.longLong(2305843009213693952); \n    }\n\n### Method safeArray\n\nGets or sets the value of a COMVariant object of the VT\\_SAFEARRAY data type.\n\n    public Array safeArray([Array newValue], [COMVariantType newType])\n\n#### Parameters\n\nnewValue  \nThe type of the new array; optional.\n\n<!-- -->\n\nnewType  \nThe type of the new array; optional.\n\n#### Return Value\n\nThe current array.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has an array Boolean type if its data type is set to COMVariantType::VT\\_SAFEARRAY. A safe array is COM's equivalent to an array. Currently only one-dimensional safe arrays are supported.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_SAFEARRAY and initializes it with an array of shorts.\n\n    { \n        int i, result; \n        COM com; \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_SAFEARRAY); \n        Array arr = new Array(Types::INTEGER); \n      \n        // Insert 10 values in the array \n        for (i = 1; i <= 10; i++) \n        { \n            arr.value(i, i); \n        } \n      \n        // Set value of the object and ensure the integer values \n        // are treated as short data types \n        var.safeArray(arr, COMVariantType::VT_I2); \n    }\n\n### Method sCode\n\nGets or sets the value of a COMVariant object of the VT\\_ERROR data type.\n\n    public int sCode([int newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has an scode data type if its data type is set to COMVariantType::VT\\_ERROR. The scode data type is a COM data type that is equivalent to the Win32 HRESULT data type, which is most used as return values for COM functions.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_ERROR and sets the value to 0x80001004.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_ERROR); \n      \n        // Set value of the object \n        var.sCode(0x80001004); \n    }\n\n### Method short\n\nGets or sets the value of a COMVariant object of the VT\\_I2 (short) data type.\n\n    public int short([int newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has a short data type if its data type is set to COMVariantType::VT\\_I2.\n\n#### Examples\n\nThe following example creates a new COMVariant object of the VT\\_I2 type and sets the value to 123.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_I2); \n      \n        // Set value of the object \n        var.short(123); \n    }\n\n### Method time\n\nGets or sets the time part of the value of a COMVariant object of the VT\\_DATE data type.\n\n    public int time([int newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has a date and time data type if its data type is set to COMVariantType::VT\\_DATE. When you set the value of the object, you must set the date part of the value in addition to the time. To set the date part of the value, use the date property.\n\n#### Examples\n\nThe following example creates a COMVariant object of type VT\\_DATE and sets the date part of the value to 24 December 1998, and the time part of the value to 13.24.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_DATE); \n      \n        // Set value of the object \n        var.date(Str2Date(\"12.24.1998\", 213)); \n        var.time(Str2Time(\"13:24:00\")); \n    }\n\n### Method toString\n\nCreates a string representation of a COMVariant object. This string representation includes the value and type of the object.\n\n    public str toString()\n\n#### Return Value\n\nThe string representation of the COMVariant object.\n\n#### Remarks\n\nThe actual string returned from this method depends on the variant data type of the COMVariant object.\n\n#### Examples\n\nThe following example creates a COMVariant object and assigns the current date to it. It then prints a description of the object to the Infolog.\n\n    COMVariant theDay; \n     \n    theDay = COMVariant::createFromDate(today()); \n    info(theDay.toString());\n\n### Method uInt\n\nGets or sets the value of a COMVariant object of the VT\\_UI4 data type.\n\n    public int uInt([int newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. The COMVariantType::VT\\_UI4 data type is also used for the uLong data type.\n\n#### Examples\n\nThe following example creates a new COMVariant object of the VT\\_UI4 type and sets the value to 123456.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_UI4); \n      \n        // Set value of the object \n        var.uInt(123456); \n    }\n\n### Method uLong\n\nGets or sets the value of a COMVariant object of the VT\\_UI4 (unsigned long) data type.\n\n    public int uLong([int newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. The COMVariantType::VT\\_UI4 data type is also used for the uInt data type.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_UI4 and sets the value to 123456.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_UI4); \n      \n        // set value of the object \n        var.uLong(123456); \n    }\n\n### Method uLongLong\n\nGets or sets the value of a COMVariant object of the VT\\_UI8 (unsigned longlong) data type.\n\n    public Int64 uLongLong([Int64 newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the object’s data type will be changed to match the value’s data type. A COMVariant object has an unsigned longlong variant type if its data type is set to COMVariantType::VT\\_I8.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_I8 and sets the value to 9,223,372,036,854,775,808.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_BOOL); \n      \n        // Set value of the object \n        var.longLong(9223372036854775808); \n    }\n\n### Method uShort\n\nGets or sets the value of a COMVariant object of the VT\\_UI2 data type.\n\n    public int uShort([int newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nIf you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has an unsigned short data type if its data type is set to COMVariantType::VT\\_UI2.\n\n#### Examples\n\nThe following example creates a new COMVariant object of type VT\\_UI2 and sets the value to 12345.\n\n    { \n        COMVariant var = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_UI2); \n      \n        // Set value of the object \n        var.uShort(12345); \n    }\n\n### Method variant\n\nGets or sets the value of a COMVariant object of the VT\\_VARIANT (variant) data type.\n\n    public COMVariant variant([COMVariant newValue])\n\n#### Parameters\n\nnewValue  \nThe new value; optional.\n\n#### Return Value\n\nThe current value.\n\n#### Remarks\n\nThe variant property is used to nest one COMVariant object in another COMVariant object. When using the parent object as the argument in a call to COMDispFunction.call or in a call to the COM class, the called method will automatically extract the data of the nested object. This nesting facility is useful when a method on a COM object can work with multiple data types. Only one level of variant nesting is allowed. If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value. A COMVariant object has a variant type if its data type is set to COMVariantType::VT\\_VARIANT.\n\n#### Examples\n\nThe following example creates a COMVariant object of type VT\\_I4 (long), and a COMVariant object of type VT\\_VARIANT. The object of type VT\\_VARIANT is assigned the value of the object of type VT\\_I4. The code below contains a hypothetical COM object (\"MyCOM.Object\"), and will therefore not run in Finance and Operations, unless such an object is created outside Finance and Operations.\n\n    { \n        COM com; \n        COMDispFunction funcShow; \n      \n        COMVariant var1 = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_I4); \n      \n        COMVariant var2 = new COMVariant( \n            COMVariantInOut::IN_OUT,  \n            COMVariantType::VT_VARIANT); \n      \n        InteropPermission perm1; \n        InteropPermission perm2; \n      \n        // Set code access permission to help protect use of COM object \n        perm1 = new InteropPermission(InteropKind::ComInterop); \n        perm1.assert(); \n      \n        com = new COM(\"MyCOM.Object\"); \n      \n        // Close code access permission for COM \n        CodeAccessPermission::revertAssert(); \n      \n        // Set value of 'var1' \n        var1.Long(123456); \n        // Set value of 'var2' to 'var1' \n        var2.Variant(var1); \n      \n        // Set code access permission to protect use of \n        // COMDispFunction object \n        perm2 = new InteropPermission(InteropKind::ComInterop); \n        perm2.assert(); \n      \n        funcShow = new COMDispFunction( \n            com,  \n            \"Show\",  \n            COMDispContext::METHOD); \n     \n        // Call funcShow with a long \n        funcShow.Call(var2); \n        // Change value of 'var1' \n         var1.BStr(\"Hello World\"); \n        // Call funcShow with a string \n        funcShow.Call(var2); \n      \n        // Close code access permission for COMDispFunction \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Method variantInOutFlag\n\nSets or returns the InOutFlag setting for a COMVariant object.\n\n    public COMVariantInOut variantInOutFlag([COMVariantInOut newValue])\n\n#### Parameters\n\nnewValue  \nThe new InOutFlag setting; optional.\n\n#### Return Value\n\nThe current InOutFlag setting.\n\n#### Remarks\n\nThe following is a list of possible values for the newValue parameter.\n\n-   COMVariantInOut::IN\n-   COMVariantInOut::IN\\_OUT\n-   COMVariantInOut::OUT\n-   COMVariantInOut::OUT\\_RETVAL.\n\nThe InOutFlag setting describes how the data that is stored in the object is treated when the object is used as an argument in the COMDispFunction.call method. The possible values of the InOutFlag setting correspond to the values for COM Automation objects described in the Win32 SDK. The data stored in the COMVariant object is unaffected when the InOutFlag setting is changed.\n\n#### Examples\n\nThe following example creates a COMVariant object that has the InOutFlag setting set to IN, and then uses the variantInOutFlag method to change the setting to OUT.\n\n    { \n        COMVariant var = new COMVariant(COMVariantInOut::IN); \n      \n        // Change the 'var' object to be used as an out argument \n        var.variantInOutFlag(COMVariantInOut::OUT); \n    }\n\n### Method variantType\n\nQueries a COMVariant object for its variant data type or changes the data type.\n\n    public COMVariantType variantType([COMVariantType newValue])\n\n#### Parameters\n\nnewValue  \nThe new variant data type; optional.\n\n#### Return Value\n\nThe current variant data type.\n\n#### Remarks\n\nThe possible values for the newValue parameter are:\n\n-   COMVariantType::VT\\_I2\n-   COMVariantType::VT\\_I4\n-   COMVariantType::VT\\_R4\n-   COMVariantType::VT\\_R8\n-   COMVariantType::VT\\_CY\n-   COMVariantType::VT\\_DATE\n-   COMVariantType::VT\\_BSTR\n-   COMVariantType::VT\\_DISPATCH\n-   COMVariantType::VT\\_ERROR\n-   COMVariantType::VT\\_BOOL\n-   COMVariantType::VT\\_VARIANT\n-   COMVariantType::VT\\_UNKNOWN\n-   COMVariantType::VT\\_DECIMAL\n-   COMVariantType::VT\\_I1\n-   COMVariantType::VT\\_UI1\n-   COMVariantType::VT\\_UI2\n-   COMVariantType::VT\\_UI4\n\nThe variant data type describes how the data that is stored in the object is treated when the object is used as an argument in a call to the COMDispFunction.call method or a call to the COM class. If you change the data type, the data that is held in the object is deleted. See the \\[COMVariant.new\\] for information about the available variant data types.\n\n#### Examples\n\nThe following example creates a new COMVariant object and sets it to be of long (VT\\_I4) data type. The variantType method is then used to change the data type to VT\\_DATE (date). The data that is held by the object is discarded.\n\n    { \n        COMVariant var = new COMVariant(); \n      \n        // Set the 'var' object to be a long \n        var.long(123); \n      \n        // Change var so that it can store a date \n        var.variantType(COMVariantType::VT_DATE); \n    }\n\n### Method createDateFromYMD\n\nCreates a new COMVariant object and initializes it with a date value in one operation.\n\n    public static COMVariant createDateFromYMD(int year, int month, int day, [COMVariantInOut inOutFlag])\n\n#### Parameters\n\nyear  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are: COMVariantInOut::OUT\\_RETVAL\n\n<!-- -->\n\nmonth  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are: COMVariantInOut::OUT\\_RETVAL\n\n<!-- -->\n\nday  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are: COMVariantInOut::OUT\\_RETVAL\n\n<!-- -->\n\ninOutFlag  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are: COMVariantInOut::OUT\\_RETVAL\n\n#### Return Value\n\nThe new COMVariant object.\n\n#### Remarks\n\nThe COMVariant object that is created by this method has the data type VT\\_DATE (date/time). This method allows you to use dates that are outside the range for the Finance and Operationsdate data type (0111901 to 31122154). For dates within the date range, you can use the COMVariant.createFromDate method.\n\n#### Examples\n\nThe following example creates a COMVariant object and initializes it with the date 01 January 4015.\n\n    COMVariant myDate; \n     \n    myDate = COMVariant::createDateFromYMD(4015,1,1);\n\n### Method createFromArray\n\nCreates a new COMVariant object and initializes it with an array in one operation.\n\n    public static COMVariant createFromArray(Array value, [COMVariantInOut inOutFlag])\n\n#### Parameters\n\nvalue  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n<!-- -->\n\ninOutFlag  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n#### Return Value\n\nThe new COMVariant object.\n\n#### Remarks\n\nThe COMVariant object that is created by this method has the data type VT\\_SAFEARRAY (array). You can change the data type of an existing COMVariant object to VT\\_SAFEARRAY by using the variantType method or by passing in an array value by using the safeArray property method.\n\n#### Examples\n\nThe following example creates a new COMVariant object and initializes it with an array of integers.\n\n    { \n        int i; \n        COMVariant var; \n        Array arr = new Array(Types::INTEGER); \n      \n        for (i = 1; i <= 10; i++) \n            // Insert 10 values in the array \n            arr.value(i, i); \n      \n        // Create and initialize a COMVariant object  \n        var = COMVariant::createFromArray(arr); \n    }\n\n### Method createFromBoolean\n\nCreates a new COMVariant object and initializes it with a Boolean value in one operation.\n\n    public static COMVariant createFromBoolean(boolean value, [COMVariantInOut inOutFlag])\n\n#### Parameters\n\nvalue  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n<!-- -->\n\ninOutFlag  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n#### Return Value\n\nThe new COMVariant object.\n\n#### Remarks\n\nThe COMVariant object that is created by this method has the data type VT\\_BOOL (Boolean). You can change the data type of an existing COMVariant object to VT\\_BOOL by using the variantType method or by passing in a Boolean value by using the boolean property method.\n\n#### Examples\n\nThe following example creates a COMVariant object of the VT\\_BOOL variant data type (Boolean), and sets the value to true.\n\n    { \n        COMVariant var; \n      \n        var = COMVariant::createFromBoolean(TRUE); \n    }\n\n### Method createFromCOM\n\nCreates a new COMVariant object and initializes it with a COM class in one operation.\n\n    public static COMVariant createFromCOM(COM value, [COMVariantInOut inOutFlag])\n\n#### Parameters\n\nvalue  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n<!-- -->\n\ninOutFlag  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n#### Return Value\n\nThe new COMVariant object.\n\n#### Remarks\n\nPossible values of the inOutFlag parameter are as follows:\n\n-   COMVariantInOut::IN\n-   COMVariantInOut::IN\\_OUT\n-   COMVariantInOut::OUT\n-   COMVariantInOut::OUT\\_RETVAL\n\n#### Examples\n\nThe following example creates a new COMVariant object and initializes it with a COM object.\n\n    { \n        COMVariant var; \n        COM com = new COM(\"MyCOM.Object\"); \n      \n        var = COMVariant::createFromCOM(com); \n    }\n\n### Method createFromDate\n\nCreates a new COMVariant object and initializes it with a date value in one operation.\n\n    public static COMVariant createFromDate(Date value, [COMVariantInOut inOutFlag])\n\n#### Parameters\n\nvalue  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n<!-- -->\n\ninOutFlag  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n#### Return Value\n\nThe new COMVariant object.\n\n#### Remarks\n\nThe COMVariant object that is created by this method has the data type VT\\_DATE (date/time). You can change the data type of an existing COMVariant object to VT\\_DATE by using the variantType method or by passing in a time value by using the date property method. If you want to use a date that is outside the range for the Axapta date type (0111901 to 31122154), use the COMVariant.createDateFromYMD method.\n\n#### Examples\n\nThe following example creates a COMVariant object and initializes it with the current date.\n\n    COMVariant theDay; \n     \n    theDay = COMVariant::createFromDate(today()); \n    info(theDay.toString());\n\n### Method createFromDateAndTime\n\nCreates a new COMVariant object and initializes it with a date and time in one operation.\n\n    public static COMVariant createFromDateAndTime(Date date, int time, [COMVariantInOut inOutFlag])\n\n#### Parameters\n\ndate  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n<!-- -->\n\ntime  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n<!-- -->\n\ninOutFlag  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n#### Return Value\n\nThe new COMVariant object.\n\n#### Remarks\n\nThe COMVariant object that is created by this method has the data type VT\\_DATE (date/time). You can change the data type of an existing COMVariant object to VT\\_DATE by using the variantType method.\n\n#### Examples\n\nThe following example creates a COMVariant object and assigns it the current date, and a time of 10 seconds past midnight.\n\n    date theDay; \n    COMVariant theDayAndTime; \n     \n    theDay = today(); \n    theDayAndTime = COMVariant::createFromDateAndTime(theDay, 10); \n    info(theDayAndTime.toString());\n\n### Method createFromInt\n\nCreates a new COMVariant object and initializes it with an integer value in one operation.\n\n    public static COMVariant createFromInt(int value, [COMVariantInOut inOutFlag])\n\n#### Parameters\n\nvalue  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n<!-- -->\n\ninOutFlag  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n#### Return Value\n\nThe new COMVariant object.\n\n#### Remarks\n\nThe COMVariant object that is created by this method has the data type VT\\_I4 (integer). You can change the data type of an existing COMVariant object to VT\\_I4 by using the variantType method or by passing in an integer value by using the int property method.\n\n#### Examples\n\nThe following example creates a COMVariant object of the VT\\_I4 variant data type (integer), and sets the value to 123.\n\n    { \n        COMVariant var; \n      \n        var = COMVariant::createFromInt(123); \n    }\n\n### Method createFromInt64\n\nCreates a new COMVariant object and initializes it with an int64 value (longLong or uLongLong) in one operation.\n\n    public static COMVariant createFromInt64(Int64 value, [COMVariantInOut inOutFlag])\n\n#### Parameters\n\nvalue  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n<!-- -->\n\ninOutFlag  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n#### Return Value\n\nThe new COMVariant object.\n\n#### Remarks\n\nThe COMVariant object that is created by this method has the data type VT\\_I8 (int64). You can change the data type of an existing COMVariant object to VT\\_I8 by using the variantType method or by passing in an int64 value by using the longLong or uLongLong property method.\n\n#### Examples\n\nThe following example creates a COMVariant object of the VT\\_I8 variant data type (integer), and sets the value to 123456.\n\n    { \n        COMVariant var; \n      \n        var = COMVariant::createFromInt64(123456); \n    }\n\n### Method createFromReal\n\nCreates a new COMVariant object and initializes it with a real value in one operation.\n\n    public static COMVariant createFromReal(Real value, [COMVariantInOut inOutFlag])\n\n#### Parameters\n\nvalue  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n<!-- -->\n\ninOutFlag  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n#### Return Value\n\nThe new COMVariant object.\n\n#### Remarks\n\nThe COMVariant object that is created by this method has the data type VT\\_R8 (real). You can change the data type of an existing COMVariant object to VT\\_R8 by using the variantType method or by passing in a Boolean value by using the double property method.\n\n#### Examples\n\nThe following example creates a COMVariant object of the VT\\_R8 variant data type (real) and sets the value to 123.456.\n\n    { \n        COMVariant var; \n       \n        var = COMVariant::createFromReal(123.456); \n    }\n\n### Method createFromStr\n\nCreates a new COMVariant object and initializes it with a string in one operation.\n\n    public static COMVariant createFromStr(str value, [COMVariantInOut inOutFlag])\n\n#### Parameters\n\nvalue  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n<!-- -->\n\ninOutFlag  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n#### Return Value\n\nThe new COMVariant object.\n\n#### Remarks\n\nThe COMVariant object that is created by this method has the data type VT\\_BSTR (string). You can change the data type of an existing COMVariant object to VT\\_BSTR by using the variantType method or by passing in a string value by using the bStr property method.\n\n#### Examples\n\nThe following example creates a COMVariant object of the VT\\_BSTR variant data type and sets the value to \"Hello World.\"\n\n    { \n        COMVariant var; \n       \n        var = COMVariant::createFromStr(\"Hello World\"); \n    }\n\n### Method createFromTime\n\nCreates a new COMVariant object and initializes it with a time value in one operation.\n\n    public static COMVariant createFromTime(int value, [COMVariantInOut inOutFlag])\n\n#### Parameters\n\nvalue  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n<!-- -->\n\ninOutFlag  \nA flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both. This parameter is optional. Possible values are:\n\n#### Return Value\n\nThe new COMVariant object.\n\n#### Remarks\n\nThe COMVariant object that is created by this method has the data type VT\\_DATE (date/time). You can change the data type of an existing COMVariant object to VT\\_DATE by using the variantType method or by passing in a time value by using the time property method.\n\n#### Examples\n\nThe following example will create a COMVariant object and set the time part to 10 seconds past midnight.\n\n    COMVariant theTime; \n     \n    theTime = COMVariant::createFromTime(10); \n    info(theTime.toString());\n\n### Method createFromUtcDateTime\n\n    public static COMVariant createFromUtcDateTime(DateTime value, [COMVariantInOut inOutFlag])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\ninOutFlag  \n\n#### Return Value\n\n### Method createNoValue\n\nCreates a COMVariant object of the VT\\_ERROR variant type with no value.\n\n    public static COMVariant createNoValue()\n\n#### Return Value\n\nThe new COMVariant object.\n\n#### Remarks\n\nA COMVariant object with no value can be used for COM parameters which are optional.\n\n#### Examples\n\nThe following example creates an empty COMVariant object.\n\n    COMVariant noValue; \n     \n    noValue = COMVariant::createNoValue(); \n    info(noValue.toString());\n\n### Method new\n\nCreates a COMVariant object that can be used to pass arguments to the methods or properties of a COM Automation object.\n\n    public void new([COMVariantInOut inOutFlag], [COMVariantType type])\n\n#### Parameters\n\ninOutFlag  \nA type of data to store; optional. These are the possible values that are supplied by the COMVariantType system enum:\n\n<!-- -->\n\ntype  \nA type of data to store; optional. These are the possible values that are supplied by the COMVariantType system enum:\n\n#### Remarks\n\nIf the type parameter is omitted, no internal memory will be allocated until it is needed by one of the property methods of the COMVariant object. For a list of the property methods, see \\[COMVariant Class\\]. You can change the variant data type after it has been set by passing in a new value of a different type (by using one of the property methods). The data types that are defined by the COMVariantType enum are equivalent to the variant data types that are defined by the Win32 SDK.\n\n#### Examples\n\nThe following example creates three COMVariant objects:\n\n-   varIn is for passing data to a COM method; it has a string stored in it and then a short (integer).\n-   varOut is to receive data of type VT\\_I4 (long).\n-   varOutRetval can pass in or receive data; its data type can be set by the COMDispFunction.call method.\n\n<!-- -->\n\n    { \n        COMVariant varIn  = new COMVariant(); \n        COMVariant varOut = new COMVariant( \n            COMVariantInOut::OUT,  \n            COMVariantType::VT_I4); \n        COMVariant varOutRetval = new COMVariant( \n            COMVariantInOut::OUT_RETVAL); ; \n      \n        // Store a text string in the varIn object \n        varIn.bStr(\"Hello World\"); \n      \n        // Change varIn to a short. \n        // Text string stored in varIn is automatically released \n        varIn.short(123);  \n    }\n\n### Method noValue\n\nDeletes the contents of an existing COMVariant object and enables it to act as an unspecified argument when it is used in the COMDispFunction.call method or the COM class.\n\n    public void noValue()\n\n#### Remarks\n\nA no-value variant can be used when a COM method has parameters that can be null. It indicates to the COM object that the argument has not been specified and that it must use its own default value. When you are calling methods on a COM object, the unspecified argument can also be specified by using the COMArgument::NoValue enum. Note that this enum cannot be used when calling through the COMDispFunction class.\n\n#### Examples\n\nThe following example shows how to call the COM.multiply method with the third argument unspecified. The code below contains a hypothetical COM object (\"MyCOM.Object\"), and will therefore not run in Finance and Operations, unless such an object is created outside Finance and Operations.\n\n    { \n        COM        com; \n        COMVariant varArg1 = new COMVariant(); \n        COMVariant varArg2 = new COMVariant(); \n        COMVariant varArg3 = new COMVariant(); \n        COMVariant varRet  = new COMVariant(COMVariantInOut::OUT_RETVAL); \n        real       ret; \n        InteropPermission perm; \n      \n        // Set code access permission to help protect use of COM object \n        perm = new InteropPermission(InteropKind::ComInterop); \n        if (perm == null) \n        { \n            return; \n        } \n      \n        // Permission scope starts here \n        perm.assert(); \n      \n        com = new COM(\"MyCOM.Object\"); \n      \n        // Specify arguments for the multiply method \n        varArg1.float(123); \n        varArg2.float(456); \n        varArg3.noValue(); \n        varRet = com.multiply(varArg1, varArg2, varArg3); \n        // …or… \n        varRet = com.multiply(varArg1, varArg2, COMArgument::NoValue); \n         ret = varRet.double(); \n        // ret is now 56088 (123*456) \n      \n        // Close code access permission \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Method finalize\n\nNot implemented. You can override this method if you need to explicitly destruct an object.\n\n    public void finalize()\n\n#### Remarks\n\nYou must call finalize methods to execute any statements in them; there are no implicit calls to finalize methods.\n\n## Class ConfigurationKeySet\n    class ConfigurationKeySet extends Object\n\nThe ConfigurationKeySet class enables working with a tree of configuration keys.\n\n### Remarks\n\nWhen a new ConfigurationKeySet is created, a tree of configuration keys is created, where all keys are set by default to \"enabled\". The cnt method is used to loop through all configuration keys and count them. The cntID method is used to retrieve the IDs of the configuration keys. In situations in which a configuration key has been deleted and the key IDs are ID1, ID2, ID5, and so on, this method will distinguish the number of configuration keys compared to their IDs. When a new ConfigurationKeySet is created, all configuration keys are enabled. The system will then call the loadSystemSetup method, which scans the SysConfig table where the configuration types are stored. It loops through the configuration key setup and identifies what is enabled. Next, the enabled method is called. Every time a configuration key is disabled, all sub-configuration keys are also automatically disabled. In a situation in which a top node is enabled and one of the sub-nodes is disabled, the kernel will remember which configuration key sub-nodes were previously disabled whenever a top node is disabled.\n\n### Examples\n\n### Methods\n\n| Method                                                                            | Description                                                                                                             |\n|-----------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------|\n| public int cnt()                                                                  | Retrieves the number of configuration keys that are defined in the Finance and Operations Application Object Tree (AOT). |\n| public ConfigurationKeyId cnt2Id(int cnt)                                         | Retrieves the ID of the *n*th configuration key.                                                                        |\n| public boolean enabled(ConfigurationKeyId configurationKeyId, \\[boolean enable\\]) | Determines whether to enable or disable the object.                                                                     |\n| public container pack()                                                           | Serializes the current instance of the ConfigurationKeySet class.                                                       |\n| public boolean touchedByUser(ConfigurationKeyId configurationKeyId)               |                                                                                                                         |\n| public void new(\\[container container\\])                                          | Initializes a new instance of the Object class.                                                                         |\n| public void loadSystemSetup()                                                     |                                                                                                                         |\n\n### Method cnt\n\nRetrieves the number of configuration keys that are defined in the Finance and Operations Application Object Tree (AOT).\n\n    public int cnt()\n\n#### Return Value\n\nThe number of configuration keys that are defined in the AOT.\n\n### Method cnt2Id\n\nRetrieves the ID of the *n*th configuration key.\n\n    public ConfigurationKeyId cnt2Id(int cnt)\n\n#### Parameters\n\ncnt  \nThe index of the configuration key, which must be between 1 and the number of configuration keys.\n\n#### Return Value\n\nThe ID of the specified configuration key.\n\n#### Remarks\n\nTo find the number of configuration keys, use the cnt method. In general, the index and ID will differ, because not all the IDs are used.\n\n#### Examples\n\n    ConfigurationKeySet configKeySet = new ConfigurationKeySet(); \n    DictConfigurationKey dictConfigurationKey; \n    int i; \n     \n    configKeySet.loadSystemSetup(); \n    for (i=1; i<= configKeySet.cnt(); i++) \n    { \n        setPrefix('Disabled configurationkeys'); \n        if (!configKeySet.enabled( configKeySet.cnt2Id(i) )) \n        { \n            dictConfigurationKey =  \n                new DictConfigurationKey(configKeySet.cnt2id(i)); \n            info (dictConfigurationKey.name()); \n        } \n    }\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled(ConfigurationKeyId configurationKeyId, [boolean enable])\n\n#### Parameters\n\nconfigurationKeyId  \nThe value to which to set the state of the configuration key; optional.\n\n<!-- -->\n\nenable  \nThe value to which to set the state of the configuration key; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n#### Examples\n\nThis example demonstrates the use of the ConfigurationKeySet.enabled method.\n\n    static void testConfigKey(Args _args) \n    { \n        ConfigurationKeySet configKey = new ConfigurationKeySet(); \n     \n        configKey.loadSystemSetup(); \n     \n        // Set the enable value to false. \n        configKey.enabled(configurationkeynum(RouteApprove), false); \n        SysDictConfigurationKey::save(configKey.pack()); \n        SysSecurity::reload(true); \n        print isConfigurationkeyEnabled(configurationkeynum(RouteApprove)); \n     \n        // Set the enable value to true. \n        configKey.enabled(configurationkeynum(RouteApprove), true); \n        //Save the configuration key setup. \n        SysDictConfigurationKey::save(configKey.pack()); \n        SysSecurity::reload(true); \n     \n        print isConfigurationkeyEnabled(configurationkeynum(RouteApprove)); \n     \n        pause; \n    }\n\n### Method pack\n\nSerializes the current instance of the ConfigurationKeySet class.\n\n    public container pack()\n\n#### Return Value\n\nA container that contains the current instance of the ConfigurationKeySet class.\n\n### Method touchedByUser\n\n    public boolean touchedByUser(ConfigurationKeyId configurationKeyId)\n\n#### Parameters\n\nconfigurationKeyId  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new([container container])\n\n#### Parameters\n\ncontainer  \n\n### Method loadSystemSetup\n\n    public void loadSystemSetup()\n\n## Class Connection\n    class Connection extends Object\n\nThe Connection class establishes a current database session that you can use to execute SQL statements and return results.\n\n### Remarks\n\nThe following classes extend the Connection class:\n\n-   OdbcConnection\n-   OciConnection\n-   UserConnection\n\n### Examples\n\nIn the following example, the createStatement method initializes the Statement object. The Statement.executeQuery method executes an SQL statement and then stores the retrieved data in the ResultSet object.\n\n    server static void main(Args args) \n    { \n        Connection con = new Connection(); \n        Statement stmt = con.createStatement(); \n        ResultSet r; \n        str sql; \n        SqlStatementExecutePermission perm; \n      \n        sql = strfmt('SELECT VALUE FROM SQLSYSTEMVARIABLES'); \n      \n        // Set code access permission to help protect the use of \n        // Statement.executeUpdate. \n        perm = new SqlStatementExecutePermission(sql); \n        perm.assert(); \n      \n        try \n        { \n            r = stmt.executeQuery(sql); \n            while (r.next()) \n            { \n                print r.getString(1); \n                pause; \n            } \n        } \n        catch (exception::Error) \n        { \n            print \"An error occured in the query.\"; \n            pause; \n        } \n        // Code access permission scope ends here. \n        CodeAccessPermission::revertAssert(); \n    }\n\n### Methods\n\n| Method                                                                                                           | Description                                                                                                                                                                             |\n|------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public Statement createStatement(\\[ResultSetType resultSetType\\], \\[ResultSetConcurrency resultSetConcurrency\\]) | Creates a Statement object that is used to execute an SQL statement.                                                                                                                    |\n| public int odbcGetInfoInt(int InfoId)                                                                            | Provides an interface to the SQLGetInfo Open Database Connectivity (ODBC) function to retrieve information about the ODBC driver and data source that are associated with a connection. |\n| public int odbcGetInfoLong(int InfoId)                                                                           | Provides an interface to the SQLGetInfo ODBC function to retrieve information about the ODBC driver and data source that are associated with a connection.                              |\n| public str odbcGetInfoStr(int InfoId)                                                                            | Provides an interface to the SQLGetInfo ODBC function to retrieve information, in string format, about the ODBC driver and data source that are associated with a connection.           |\n| public str toString()                                                                                            | Converts the Connection object to a string.                                                                                                                                             |\n| public int ttsLevel()                                                                                            | Returns the number for the last call to the ttsbegin method that is used to begin a transaction.                                                                                        |\n| public boolean isInTransactionScope()                                                                            |                                                                                                                                                                                         |\n| public void finalize()                                                                                           |                                                                                                                                                                                         |\n| public void transactionScopeAbort()                                                                              |                                                                                                                                                                                         |\n| public void ttsNotifyCommit()                                                                                    | Is called when the ttscommit method is called.                                                                                                                                          |\n| public void transactionScopeBegin()                                                                              |                                                                                                                                                                                         |\n| public void transactionScopeCommit()                                                                             |                                                                                                                                                                                         |\n| public void ttsNotifyBegin()                                                                                     |                                                                                                                                                                                         |\n| public void ttsbegin()                                                                                           | Begins a transaction.                                                                                                                                                                   |\n| public void ttsabort()                                                                                           | Discards changes that are associated with a transaction and rolls the database back to the original state.                                                                              |\n| public void new()                                                                                                | Initializes a new instance of the Connection class.                                                                                                                                     |\n| public void ttsNotifyAbort()                                                                                     | Is called when an exception is thrown.                                                                                                                                                  |\n| public void ttscommit()                                                                                          | Commits the changes that are associated with a transaction to the database.                                                                                                             |\n\n### Method createStatement\n\nCreates a Statement object that is used to execute an SQL statement.\n\n    public Statement createStatement([ResultSetType resultSetType], [ResultSetConcurrency resultSetConcurrency])\n\n#### Parameters\n\nresultSetType  \nA ResultSetConcurrency enumeration that specifies ReadOnly by default.\n\n<!-- -->\n\nresultSetConcurrency  \nA ResultSetConcurrency enumeration that specifies ReadOnly by default.\n\n#### Return Value\n\nA data type value that is a new Statement object.\n\n#### Remarks\n\nThere is risk of an SQL injection threat when you use the createStatement method to create an SQL statement and then allow a user to control input to the statement. For information about SQL injection, see http://go.microsoft.com/fwlink/?LinkId=114986. You can use Query Elements in the AOT, views, and X++ Select statements as safer alternatives to executing SQL statements.\n\n### Method odbcGetInfoInt\n\nProvides an interface to the SQLGetInfo Open Database Connectivity (ODBC) function to retrieve information about the ODBC driver and data source that are associated with a connection.\n\n    public int odbcGetInfoInt(int InfoId)\n\n#### Parameters\n\nInfoId  \nAn integer that specifies an ID for the requested information according to the ODBC standard.\n\n#### Return Value\n\nAn integer value for the information that is retrieved.\n\n#### Examples\n\nIn the following example, the odbcGetInfoInt method returns an integer value for the maximum length of the column name.\n\n    void getConnection() \n    { \n        Connection con; \n        Statement stmt; \n        int info; \n     \n        #define.SQL_MAX_COLUMN_NAME_LEN(30) \n        con = new Connection(); \n     \n        try \n        { \n            info = con.odbcGetInfoInt(#SQL_MAX_COLUMN_NAME_LEN); \n     \n            print info; \n            pause; \n         } \n     \n        catch(exception::Error) \n        { \n            print \"An error occurred.\"; \n     \n        } \n     \n    }\n\n### Method odbcGetInfoLong\n\nProvides an interface to the SQLGetInfo ODBC function to retrieve information about the ODBC driver and data source that are associated with a connection.\n\n    public int odbcGetInfoLong(int InfoId)\n\n#### Parameters\n\nInfoId  \nAn Integer data type that specifies an ID for the requested information, according to the ODBC standard.\n\n#### Return Value\n\nAn Integer data type value for the information that is retrieved.\n\n#### Remarks\n\nThis method retrieves a 32-bit integer and returns it as an integer.\n\n#### Examples\n\nIn the following example, the odbcGetInfoLong method returns an integer for the maximum row size.\n\n    void getConnection() \n    { \n        Connection con; \n        Statement stmt; \n        int info; \n     \n        #define.SQL_MAX_ROW_SIZE(104) \n        con = new Connection(); \n     \n        try \n        { \n            info = con.odbcGetInfoLong(#SQL_MAX_ROW_SIZE); \n     \n            print info; \n            pause; \n         } \n     \n        catch(exception::Error) \n        { \n            print \"An error occurred.\"; \n     \n        } \n     \n    }\n\n### Method odbcGetInfoStr\n\nProvides an interface to the SQLGetInfo ODBC function to retrieve information, in string format, about the ODBC driver and data source that are associated with a connection.\n\n    public str odbcGetInfoStr(int InfoId)\n\n#### Parameters\n\nInfoId  \nAn Integer data type that specifies an ID for the requested information, according to the ODBC standard.\n\n#### Return Value\n\nA String data type value for the information that is retrieved.\n\n#### Examples\n\nIn the following example, the odbcGetInfoStr method returns the name of the database management system.\n\n    void getConnection() \n    { \n        Connection con; \n        str info; \n     \n        #define.SQL_DBMS_NAME(17) \n        con = new Connection(); \n      \n        try \n        { \n            info = con.odbcGetInfoStr(#SQL_DBMS_NAME); \n      \n            print info; \n            pause; \n         } \n      \n        catch(exception::Error) \n        { \n            print \"An error occurred.\"; \n        } \n    }\n\n### Method toString\n\nConverts the Connection object to a string.\n\n    public str toString()\n\n#### Return Value\n\nA string value for the Connection object.\n\n### Method ttsLevel\n\nReturns the number for the last call to the ttsbegin method that is used to begin a transaction.\n\n    public int ttsLevel()\n\n#### Return Value\n\nAn integer value that indicates the number for the last call to the ttsbegin method. For example, if the ttsLevel method is called after the third call to the ttsbegin method, the return value is 3.\n\n### Method isInTransactionScope\n\n    public boolean isInTransactionScope()\n\n#### Return Value\n\n### Method finalize\n\n    public void finalize()\n\n### Method transactionScopeAbort\n\n    public void transactionScopeAbort()\n\n### Method ttsNotifyCommit\n\nIs called when the ttscommit method is called.\n\n    public void ttsNotifyCommit()\n\n### Method transactionScopeBegin\n\n    public void transactionScopeBegin()\n\n### Method transactionScopeCommit\n\n    public void transactionScopeCommit()\n\n### Method ttsNotifyBegin\n\n    public void ttsNotifyBegin()\n\n### Method ttsbegin\n\nBegins a transaction.\n\n    public void ttsbegin()\n\n### Method ttsabort\n\nDiscards changes that are associated with a transaction and rolls the database back to the original state.\n\n    public void ttsabort()\n\n### Method new\n\nInitializes a new instance of the Connection class.\n\n    public void new()\n\n### Method ttsNotifyAbort\n\nIs called when an exception is thrown.\n\n    public void ttsNotifyAbort()\n\n### Method ttscommit\n\nCommits the changes that are associated with a transaction to the database.\n\n    public void ttscommit()\n\n## Class ContainerClass\n    class ContainerClass extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                              | Description                                          |\n|---------------------------------------------------------------------|------------------------------------------------------|\n| public int length()                                                 |                                                      |\n| public container toBlob()                                           |                                                      |\n| public str toString()                                               | Returns a string that represents the current object. |\n| public container value()                                            |                                                      |\n| ::public static container blob2Container(container blob\\_container) |                                                      |\n| ::public static int containerLength(container container)            |                                                      |\n| public void new(container container)                                | Initializes a new instance of the Object class.      |\n\n### Method length\n\n    public int length()\n\n#### Return Value\n\n### Method toBlob\n\n    public container toBlob()\n\n#### Return Value\n\n### Method toString\n\nReturns a string that represents the current object.\n\n    public str toString()\n\n#### Return Value\n\nA string that represents the current object.\n\n#### Remarks\n\nThe default implementation returns the class name of the object. The method can be overridden in a derived class to return values that are meaningful for that type. For example, an instance of the SysMethodInfo class returns the method name and type of the method, such as instance or static.\n\n### Method value\n\n    public container value()\n\n#### Return Value\n\n### Method blob2Container\n\n    public static container blob2Container(container blob_container)\n\n#### Parameters\n\nblob\\_container  \n\n#### Return Value\n\n### Method containerLength\n\n    public static int containerLength(container container)\n\n#### Parameters\n\ncontainer  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(container container)\n\n#### Parameters\n\ncontainer  \n\n## Class ControlFilterValue\n    class ControlFilterValue extends FilterValue\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                | Description                                     |\n|-------------------------------------------------------|-------------------------------------------------|\n| public FormControl control()                          |                                                 |\n| public void new(FormControl control, str filterValue) | Initializes a new instance of the Object class. |\n\n### Method control\n\n    public FormControl control()\n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(FormControl control, str filterValue)\n\n#### Parameters\n\ncontrol  \n\n<!-- -->\n\nfilterValue  \n\n## Class ControlNode\n    class ControlNode extends TreeNode\n\nThe ControlNode class lets you create, read, update, and delete X++ code and metadata.\n\n### Remarks\n\nMake sure that the user has access to the development security key (SysDevelopment) before this API is called.\n\n### Examples\n\n### Methods\n\n| Method                                         | Description                                       |\n|------------------------------------------------|---------------------------------------------------|\n| public void new(str name, \\[TreeNode parent\\]) | Initializes a new instance of the TreeNode class. |\n\n### Method new\n\nInitializes a new instance of the TreeNode class.\n\n    public void new(str name, [TreeNode parent])\n\n#### Parameters\n\nname  \n\n<!-- -->\n\nparent  \n\n## Class CryptoAPI\n    class CryptoAPI extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                   | Description                                     |\n|------------------------------------------|-------------------------------------------------|\n| public container decrypt(container blob) |                                                 |\n| public container encrypt(container blob) |                                                 |\n| public container getKey()                |                                                 |\n| public Int64 salt()                      |                                                 |\n| public void new(Int64 salt)              | Initializes a new instance of the Object class. |\n| ::public static void resetKey()          |                                                 |\n\n### Method decrypt\n\n    public container decrypt(container blob)\n\n#### Parameters\n\nblob  \n\n#### Return Value\n\n### Method encrypt\n\n    public container encrypt(container blob)\n\n#### Parameters\n\nblob  \n\n#### Return Value\n\n### Method getKey\n\n    public container getKey()\n\n#### Return Value\n\n### Method salt\n\n    public Int64 salt()\n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the Object class.\n\n    public void new(Int64 salt)\n\n#### Parameters\n\nsalt  \n\n### Method resetKey\n\n    public static void resetKey()\n\n## Class Cue\n    class Cue extends TreeNode\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                         | Description                                                                                                                               |\n|------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public str changedBy(\\[str value\\])            | Gets or sets the name of the user who last changed the application object.                                                                |\n| public Date changedDate(\\[Date value\\])        | Gets or sets the date an application object was last changed.                                                                             |\n| public str changedTime(\\[str value\\])          | Gets or sets the time an application object was last changed.                                                                             |\n| public str createdBy(\\[str value\\])            | Gets or sets the name of the user who created the application object.                                                                     |\n| public Date creationDate(\\[Date value\\])       | Gets or sets the date an application object was created.                                                                                  |\n| public str creationTime(\\[str value\\])         |                                                                                                                                           |\n| public int cueMax(\\[int value\\])               |                                                                                                                                           |\n| public str dataField(\\[str value\\])            |                                                                                                                                           |\n| public str label(\\[str value\\])                | Gets or sets the label for a control.                                                                                                     |\n| public str LabelId()                           |                                                                                                                                           |\n| public str menuItemName(\\[str value\\])         |                                                                                                                                           |\n| public str name(\\[str value\\])                 | Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public Guid origin(\\[Guid value\\])             |                                                                                                                                           |\n| public str previewPartReference(\\[str value\\]) |                                                                                                                                           |\n| public boolean showAlert(\\[boolean value\\])    |                                                                                                                                           |\n| public int showAlertValue(\\[int value\\])       |                                                                                                                                           |\n| public int showAlertWhen(\\[int value\\])        |                                                                                                                                           |\n| public boolean showSum(\\[boolean value\\])      |                                                                                                                                           |\n| public str table(\\[str value\\])                | Gets or sets the table ID associated with the object.                                                                                     |\n| public void new(str cueName)                   | Initializes a new instance of the TreeNode class.                                                                                         |\n\n### Method changedBy\n\nGets or sets the name of the user who last changed the application object.\n\n    public str changedBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method changedDate\n\nGets or sets the date an application object was last changed.\n\n    public Date changedDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was last changed.\n\n### Method changedTime\n\nGets or sets the time an application object was last changed.\n\n    public str changedTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe time an application object was last changed.\n\n### Method createdBy\n\nGets or sets the name of the user who created the application object.\n\n    public str createdBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method creationDate\n\nGets or sets the date an application object was created.\n\n    public Date creationDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was created.\n\n### Method creationTime\n\n    public str creationTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method cueMax\n\n    public int cueMax([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public str dataField([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method LabelId\n\n    public str LabelId()\n\n#### Return Value\n\n### Method menuItemName\n\n    public str menuItemName([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, and classes.\n\n### Method origin\n\n    public Guid origin([Guid value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method previewPartReference\n\n    public str previewPartReference([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showAlert\n\n    public boolean showAlert([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showAlertValue\n\n    public int showAlertValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showAlertWhen\n\n    public int showAlertWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showSum\n\n    public boolean showSum([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method table\n\nGets or sets the table ID associated with the object.\n\n    public str table([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the table ID associated with the object.\n\n### Method new\n\nInitializes a new instance of the TreeNode class.\n\n    public void new(str cueName)\n\n#### Parameters\n\ncueName  \n\n## Class CueGroup\n    class CueGroup extends TreeNode\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                   | Description                                                                                                                                   |\n|------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| public str changedBy(\\[str value\\])      | Gets or sets the name of the user who last changed the application object.                                                                    |\n| public Date changedDate(\\[Date value\\])  | Gets or sets the date an application object was last changed.                                                                                 |\n| public str changedTime(\\[str value\\])    | Gets or sets the time an application object was last changed.                                                                                 |\n| public str createdBy(\\[str value\\])      | Gets or sets the name of the user who created the application object.                                                                         |\n| public Date creationDate(\\[Date value\\]) | Gets or sets the date an application object was created.                                                                                      |\n| public str creationTime(\\[str value\\])   |                                                                                                                                               |\n| public str label(\\[str value\\])          | Gets or sets the label for a control.                                                                                                         |\n| public str LabelId()                     |                                                                                                                                               |\n| public str name(\\[str value\\])           | Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public Guid origin(\\[Guid value\\])       |                                                                                                                                               |\n| public void new(str cueGroupName)        | Initializes a new instance of the TreeNode class.                                                                                             |\n\n### Method changedBy\n\nGets or sets the name of the user who last changed the application object.\n\n    public str changedBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method changedDate\n\nGets or sets the date an application object was last changed.\n\n    public Date changedDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was last changed.\n\n### Method changedTime\n\nGets or sets the time an application object was last changed.\n\n    public str changedTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe time an application object was last changed.\n\n### Method createdBy\n\nGets or sets the name of the user who created the application object.\n\n    public str createdBy([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the user.\n\n### Method creationDate\n\nGets or sets the date an application object was created.\n\n    public Date creationDate([Date value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe date an application object was created.\n\n### Method creationTime\n\n    public str creationTime([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method LabelId\n\n    public str LabelId()\n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in the code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, and classes.\n\n### Method origin\n\n    public Guid origin([Guid value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the TreeNode class.\n\n    public void new(str cueGroupName)\n\n#### Parameters\n\ncueGroupName  \n\n## Class CueReference\n    class CueReference extends TreeNode\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                | Description                                                                                                                       |\n|---------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| public str cue(\\[str value\\])         |                                                                                                                                   |\n| public str name(\\[str value\\])        | Gets or sets the name used in code to identify a form, report, table, query, or another Finance and Operations application object. |\n| public void new(str cueReferenceName) | Initializes a new instance of the TreeNode class.                                                                                 |\n\n### Method cue\n\n    public str cue([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name used in code to identify a form, report, table, query, or another Finance and Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Does not exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Does not include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enumerations, classes, and other public objects.\n\n### Method new\n\nInitializes a new instance of the TreeNode class.\n\n    public void new(str cueReferenceName)\n\n#### Parameters\n\ncueReferenceName  \nThe name to use to identify this form, report, table, query, or other application object.\n\n \n\n\n\n","nodes":[{"content":"C Classes","nodes":[{"pos":[0,9],"content":"C Classes","nodes":[{"content":"C Classes","pos":[0,9]}]}],"pos":[31,41],"yaml":true},{"content":"System API classes that start with the letter C.","nodes":[{"pos":[0,48],"content":"System API classes that start with the letter C.","nodes":[{"content":"System API classes that start with the letter C.","pos":[0,48]}]}],"pos":[54,103],"yaml":true},{"pos":[659,668],"content":"C Classes","linkify":"C Classes","nodes":[{"content":"C Classes","pos":[0,9]}]},{"content":"System API classes that start with the letter C.","pos":[714,762]},{"pos":[764,779],"content":"Class ClassNode","linkify":"Class ClassNode","nodes":[{"content":"Class ClassNode","pos":[0,15]}]},{"content":"The ClassNode class is a specialization of the TreeNode class that represents a class in the Finance and Operations Application Object Tree (AOT).","pos":[835,981]},{"pos":[987,994],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class lets you create, read, update, and delete X++ code and metadata.","pos":[996,1071]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[1072,1182]},{"pos":[1188,1196],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[1202,1209],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[1213,1219]},{"content":"Description","pos":[1265,1276]},{"content":"public TreeNode AOToverrideMethod(str methodName)","pos":[1609,1658]},{"content":"public str changedBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[1807,1842],"source":"public str changedBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[1859,1933]},{"content":"public Date changedDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[2005,2044],"source":"public Date changedDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was last changed.","pos":[2057,2118]},{"content":"public str changedTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[2203,2240],"source":"public str changedTime(\\[str value\\])"},{"content":"Gets or sets the time an application object was last changed.","pos":[2255,2316]},{"content":"public str createdBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[2401,2436],"source":"public str createdBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who created the application object.","pos":[2453,2522]},{"content":"public Date creationDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[2599,2639],"source":"public Date creationDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was created.","pos":[2651,2707]},{"content":"public str creationTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[2797,2835],"source":"public str creationTime(\\[str value\\])"},{"content":"public str extends(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[2995,3028],"source":"public str extends(\\[str value\\])"},{"content":"public int iD(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3193,3221],"source":"public int iD(\\[int value\\])"},{"content":"public boolean isDetached()","pos":[3391,3418]},{"content":"public int legacyId(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3589,3623],"source":"public int legacyId(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[3787,3817],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[3839,3981]},{"content":"public Guid origin(<ph id=\"ph1\">\\[</ph>Guid value<ph id=\"ph2\">\\]</ph>)","pos":[3986,4020],"source":"public Guid origin(\\[Guid value\\])"},{"content":"public int runOn(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4184,4215],"source":"public int runOn(\\[int value\\])"},{"content":"public void AOTedit(<ph id=\"ph1\">\\[</ph>int Line<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int Column<ph id=\"ph4\">\\]</ph>)","pos":[4382,4431],"source":"public void AOTedit(\\[int Line\\], \\[int Column\\])"},{"content":"Opens the class so that it can be modified in the editor.","pos":[4434,4491]},{"pos":[4583,4607],"content":"Method AOToverrideMethod","linkify":"Method AOToverrideMethod","nodes":[{"content":"Method AOToverrideMethod","pos":[0,24]}]},{"pos":[4669,4679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodName","pos":[4681,4691]},{"pos":[4700,4712],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[4718,4734],"content":"Method changedBy","linkify":"Method changedBy","nodes":[{"content":"Method changedBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[4736,4810]},{"pos":[4856,4866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[4868,4873]},{"pos":[4882,4894],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[4896,4917]},{"pos":[4923,4941],"content":"Method changedDate","linkify":"Method changedDate","nodes":[{"content":"Method changedDate","pos":[0,18]}]},{"content":"Gets or sets the date an application object was last changed.","pos":[4943,5004]},{"pos":[5054,5064],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[5066,5071]},{"pos":[5080,5092],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was last changed.","pos":[5094,5142]},{"pos":[5148,5166],"content":"Method changedTime","linkify":"Method changedTime","nodes":[{"content":"Method changedTime","pos":[0,18]}]},{"content":"Gets or sets the time an application object was last changed.","pos":[5168,5229]},{"pos":[5277,5287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[5289,5294]},{"pos":[5303,5315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The time an application object was last changed.","pos":[5317,5365]},{"pos":[5371,5387],"content":"Method createdBy","linkify":"Method createdBy","nodes":[{"content":"Method createdBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who created the application object.","pos":[5389,5458]},{"pos":[5504,5514],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[5516,5521]},{"pos":[5530,5542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[5544,5565]},{"pos":[5571,5590],"content":"Method creationDate","linkify":"Method creationDate","nodes":[{"content":"Method creationDate","pos":[0,19]}]},{"content":"Gets or sets the date an application object was created.","pos":[5592,5648]},{"pos":[5699,5709],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[5711,5716]},{"pos":[5725,5737],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was created.","pos":[5739,5782]},{"pos":[5788,5807],"content":"Method creationTime","linkify":"Method creationTime","nodes":[{"content":"Method creationTime","pos":[0,19]}]},{"pos":[5856,5866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[5868,5873]},{"pos":[5882,5894],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[5900,5914],"content":"Method extends","linkify":"Method extends","nodes":[{"content":"Method extends","pos":[0,14]}]},{"pos":[5958,5968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[5970,5975]},{"pos":[5984,5996],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6002,6011],"content":"Method iD","linkify":"Method iD","nodes":[{"content":"Method iD","pos":[0,9]}]},{"pos":[6050,6060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[6062,6067]},{"pos":[6076,6088],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6094,6111],"content":"Method isDetached","linkify":"Method isDetached","nodes":[{"content":"Method isDetached","pos":[0,17]}]},{"pos":[6151,6163],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6169,6184],"content":"Method legacyId","linkify":"Method legacyId","nodes":[{"content":"Method legacyId","pos":[0,15]}]},{"pos":[6229,6239],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[6241,6246]},{"pos":[6255,6267],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[6273,6284],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[6286,6428]},{"pos":[6469,6479],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[6481,6486]},{"pos":[6495,6507],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[6509,6577]},{"pos":[6584,6591],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[6593,6687]},{"content":"Begins with a letter.","pos":[6693,6714]},{"content":"Does not exceed 250 characters.","pos":[6719,6750]},{"content":"Can include numbers and underscore characters.","pos":[6755,6801]},{"content":"Cannot include punctuation or spaces.","pos":[6806,6843]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumerations, classes, and so on.","pos":[6848,6973]},{"pos":[6979,6992],"content":"Method origin","linkify":"Method origin","nodes":[{"content":"Method origin","pos":[0,13]}]},{"pos":[7037,7047],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[7049,7054]},{"pos":[7063,7075],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7081,7093],"content":"Method runOn","linkify":"Method runOn","nodes":[{"content":"Method runOn","pos":[0,12]}]},{"pos":[7135,7145],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[7147,7152]},{"pos":[7161,7173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[7179,7193],"content":"Method AOTedit","linkify":"Method AOTedit","nodes":[{"content":"Method AOTedit","pos":[0,14]}]},{"content":"Opens the class so that it can be modified in the editor.","pos":[7195,7252]},{"pos":[7310,7320],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Line","pos":[7322,7326]},{"content":"A value that is ignored; optional.","pos":[7329,7363]},{"content":"Column","pos":[7375,7381]},{"content":"A value that is ignored; optional.","pos":[7384,7418]},{"pos":[7425,7432],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"All methods are loaded into the editor.","pos":[7434,7473]},{"content":"The arguments are included in the signature for backward compatibility only; they are ignored.","pos":[7474,7568]},{"pos":[7575,7583],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[7761,7789],"content":"Class ClientPrintJobSettings","linkify":"Class ClientPrintJobSettings","nodes":[{"content":"Class ClientPrintJobSettings","pos":[0,28]}]},{"pos":[7853,7860],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7866,7874],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[7880,7887],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[7891,7897]},{"content":"Description","pos":[8013,8024]},{"content":"public container getFontDimension(container container)","pos":[8239,8293]},{"content":"public container getInfoStrings()","pos":[8413,8446]},{"content":"public int getNextLineOffset(container container)","pos":[8587,8636]},{"content":"public container getPageInfo()","pos":[8761,8791]},{"content":"public container getPrinterNames()","pos":[8935,8969]},{"content":"public int getTextWidth(str text, str fontName, int charSet, int fontHeight, int style, int weight)","pos":[9109,9208]},{"content":"public container getTextWidthExt(container container)","pos":[9283,9336]},{"content":"public container getWordWrapInfo(str text, int width, str fontName, int charSet, int fontHeight, int style, int weight)","pos":[9457,9576]},{"content":"public container getWordWrapInfoExt(container container)","pos":[9631,9687]},{"content":"public container printerSettingsExt(str formName, <ph id=\"ph1\">\\[</ph>xArgs args<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ReportRun reportRun<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int showWhat<ph id=\"ph6\">\\]</ph>)","pos":[9805,9913],"source":"public container printerSettingsExt(str formName, \\[xArgs args\\], \\[ReportRun reportRun\\], \\[int showWhat\\])"},{"content":"public container setOrientationGetPageInfo(PrinterOrientation orientation)","pos":[9979,10053]},{"content":"public void new(<ph id=\"ph1\">\\[</ph>container Settings<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean infoOnly<ph id=\"ph4\">\\]</ph>)","pos":[10153,10214],"source":"public void new(\\[container Settings\\], \\[boolean infoOnly\\])"},{"content":"Initializes a new instance of the Object class.","pos":[10275,10322]},{"pos":[10330,10353],"content":"Method getFontDimension","linkify":"Method getFontDimension","nodes":[{"content":"Method getFontDimension","pos":[0,23]}]},{"pos":[10420,10430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[10432,10441]},{"pos":[10450,10462],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10468,10489],"content":"Method getInfoStrings","linkify":"Method getInfoStrings","nodes":[{"content":"Method getInfoStrings","pos":[0,21]}]},{"pos":[10535,10547],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10553,10577],"content":"Method getNextLineOffset","linkify":"Method getNextLineOffset","nodes":[{"content":"Method getNextLineOffset","pos":[0,24]}]},{"pos":[10639,10649],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[10651,10660]},{"pos":[10669,10681],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10687,10705],"content":"Method getPageInfo","linkify":"Method getPageInfo","nodes":[{"content":"Method getPageInfo","pos":[0,18]}]},{"pos":[10748,10760],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10766,10788],"content":"Method getPrinterNames","linkify":"Method getPrinterNames","nodes":[{"content":"Method getPrinterNames","pos":[0,22]}]},{"pos":[10835,10847],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[10853,10872],"content":"Method getTextWidth","linkify":"Method getTextWidth","nodes":[{"content":"Method getTextWidth","pos":[0,19]}]},{"pos":[10984,10994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"text","pos":[10996,11000]},{"content":"fontName","pos":[11014,11022]},{"content":"charSet","pos":[11036,11043]},{"content":"fontHeight","pos":[11057,11067]},{"content":"style","pos":[11081,11086]},{"content":"weight","pos":[11100,11106]},{"pos":[11115,11127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11133,11155],"content":"Method getTextWidthExt","linkify":"Method getTextWidthExt","nodes":[{"content":"Method getTextWidthExt","pos":[0,22]}]},{"pos":[11221,11231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[11233,11242]},{"pos":[11251,11263],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11269,11291],"content":"Method getWordWrapInfo","linkify":"Method getWordWrapInfo","nodes":[{"content":"Method getWordWrapInfo","pos":[0,22]}]},{"pos":[11423,11433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"text","pos":[11435,11439]},{"content":"width","pos":[11453,11458]},{"content":"fontName","pos":[11472,11480]},{"content":"charSet","pos":[11494,11501]},{"content":"fontHeight","pos":[11515,11525]},{"content":"style","pos":[11539,11544]},{"content":"weight","pos":[11558,11564]},{"pos":[11573,11585],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11591,11616],"content":"Method getWordWrapInfoExt","linkify":"Method getWordWrapInfoExt","nodes":[{"content":"Method getWordWrapInfoExt","pos":[0,25]}]},{"pos":[11685,11695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[11697,11706]},{"pos":[11715,11727],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11733,11758],"content":"Method printerSettingsExt","linkify":"Method printerSettingsExt","nodes":[{"content":"Method printerSettingsExt","pos":[0,25]}]},{"pos":[11873,11883],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"formName","pos":[11885,11893]},{"content":"args","pos":[11907,11911]},{"content":"reportRun","pos":[11925,11934]},{"content":"showWhat","pos":[11948,11956]},{"pos":[11965,11977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[11983,12015],"content":"Method setOrientationGetPageInfo","linkify":"Method setOrientationGetPageInfo","nodes":[{"content":"Method setOrientationGetPageInfo","pos":[0,32]}]},{"pos":[12102,12112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"orientation","pos":[12114,12125]},{"pos":[12134,12146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[12152,12162],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[12164,12211]},{"pos":[12281,12291],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Settings","pos":[12293,12301]},{"content":"infoOnly","pos":[12315,12323]},{"pos":[12330,12346],"content":"Class CLRInterop","linkify":"Class CLRInterop","nodes":[{"content":"Class CLRInterop","pos":[0,16]}]},{"content":"The ClrInterop class is a utility class that provides functionality for type marshaling and exception handling.","pos":[12384,12495]},{"content":"Because all the methods are static, no instantiation of the class is required.","pos":[12496,12574]},{"pos":[12580,12587],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12593,12601],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[12607,12614],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[12618,12624]},{"content":"Description","pos":[12705,12716]},{"content":"::public static AnyType getAnyTypeForObject(CLRObject clrObject)","pos":[13074,13138]},{"content":"Converts a common language runtime (CLR) object to a value of the X++ anytype data type.","pos":[13161,13249]},{"content":"::public static CLRObject getLastException()","pos":[13302,13346]},{"content":"Retrieves the most recent CLR exception.","pos":[13389,13429]},{"content":"::public static CLRObject getObjectForAnyType(AnyType anyType)","pos":[13530,13592]},{"content":"Converts a value of the X++ anytype data type to a value of the CLRObject data type.","pos":[13617,13701]},{"content":"::public static CLRObject getType(str clrTypeName)","pos":[13758,13808]},{"content":"::public static boolean isNull(CLRObject clrObject)","pos":[13986,14037]},{"content":"Confirms whether the specified CLRObject instance is set to nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[14073,14198]},{"content":"::public static CLRObject Null(str clrTypeName)","pos":[14214,14261]},{"content":"Returns a CLR data type that has a value of nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[14301,14410]},{"content":"::public static CLRObject parseClrEnum(str clrEnumTypeName, str enumValues)","pos":[14442,14517]},{"content":"Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent CLRObject instance.","pos":[14529,14665]},{"content":"::public static CLRObject staticInvoke(str className, str methodName, VarArg params)","pos":[14670,14754]},{"content":"Calls a static method on a CLR data type.","pos":[14757,14798]},{"content":"::public static void loadAssembly(str clrAssemblyName)","pos":[14898,14952]},{"content":"public void new()","pos":[15126,15143]},{"content":"Initializes a new instance of the CLRInterop class.","pos":[15213,15264]},{"pos":[15357,15383],"content":"Method getAnyTypeForObject","linkify":"Method getAnyTypeForObject","nodes":[{"content":"Method getAnyTypeForObject","pos":[0,26]}]},{"content":"Converts a common language runtime (CLR) object to a value of the X++ anytype data type.","pos":[15385,15473]},{"pos":[15548,15558],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"clrObject","pos":[15560,15569]},{"content":"The CLR object to convert to an X++ data type.","pos":[15572,15618]},{"pos":[15625,15637],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An X++ anytype date type that has the value of the <ph id=\"ph1\">\\_</ph>object argument.","pos":[15639,15708],"source":"An X++ anytype date type that has the value of the \\_object argument."},{"pos":[15715,15722],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If an attacker can control input to the getAnyTypeForObject method, a security risk exists.","pos":[15724,15815]},{"content":"Therefore, this method runs under Code Access Security.","pos":[15816,15871]},{"content":"Calls to this method on the server require permission.","pos":[15872,15926]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[15927,16062]},{"content":"If the argument cannot be converted to an X++ data type, an exception of the Exception::ClrError type is thrown.","pos":[16063,16175]},{"pos":[16182,16190],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example sets the value of a CLR string to an X++ str data type.","pos":[16192,16269]},{"pos":[16706,16729],"content":"Method getLastException","linkify":"Method getLastException","nodes":[{"content":"Method getLastException","pos":[0,23]}]},{"content":"Retrieves the most recent CLR exception.","pos":[16731,16771]},{"pos":[16826,16838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The most recent exception of the Exception::ClrError type; otherwise, nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[16840,16975]},{"pos":[16982,16989],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If an attacker can control input to the getLastException method, a security risk exists.","pos":[16991,17079]},{"content":"Therefore, this method runs under Code Access Security.","pos":[17080,17135]},{"content":"Calls to this method on the server require permission.","pos":[17136,17190]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[17191,17326]},{"pos":[17333,17341],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example tries to pass in a date that has an invalid format.","pos":[17343,17416]},{"content":"The CLR exception that is thrown is converted to an X++ exception and then printed to the Infolog.","pos":[17417,17515]},{"content":"Any nested exceptions are also printed to the Infolog.","pos":[17516,17570]},{"pos":[18300,18326],"content":"Method getObjectForAnyType","linkify":"Method getObjectForAnyType","nodes":[{"content":"Method getObjectForAnyType","pos":[0,26]}]},{"content":"Converts a value of the X++ anytype data type to a value of the CLRObject data type.","pos":[18328,18412]},{"pos":[18485,18495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"anyType","pos":[18497,18504]},{"content":"The X++ value to convert to a value of the CLRObject data type.","pos":[18507,18570]},{"pos":[18577,18589],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The CLR object that has the value of the <ph id=\"ph1\">\\_</ph>anytype argument.","pos":[18591,18651],"source":"The CLR object that has the value of the \\_anytype argument."},{"pos":[18658,18665],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If an attacker can control input to the getObjectForAnyType method, a security risk exists.","pos":[18667,18758]},{"content":"Therefore, this method runs under Code Access Security.","pos":[18759,18814]},{"content":"Calls to this method on the server require permission.","pos":[18815,18869]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[18870,19005]},{"content":"If the argument cannot be converted to the CLRObject type, an exception of the Exception::CLRError type is thrown.","pos":[19006,19120]},{"pos":[19127,19135],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example converts a string value to a CLR string object.","pos":[19137,19206]},{"pos":[19639,19653],"content":"Method getType","linkify":"Method getType","nodes":[{"content":"Method getType","pos":[0,14]}]},{"pos":[19714,19724],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"clrTypeName","pos":[19726,19737]},{"pos":[19746,19758],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19764,19777],"content":"Method isNull","linkify":"Method isNull","nodes":[{"content":"Method isNull","pos":[0,13]}]},{"content":"Confirms whether the specified CLRObject instance is set to nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[19779,19904]},{"pos":[19966,19976],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"clrObject","pos":[19978,19987]},{"content":"The CLRObject instance to evaluate.","pos":[19990,20025]},{"pos":[20032,20044],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the specified CLRObject instance is set to nullNothingnullptrunita null reference (Nothing in Visual Basic) or has not been initialized.","pos":[20046,20190]},{"pos":[20197,20204],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The isNull method should be used instead of the X++ nullNothingnullptrunita null reference (Nothing in Visual Basic) in conditional statements that evaluate whether a CLR data type is nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[20206,20455]},{"pos":[20462,20470],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example sets the CLR string data type to nullNothingnullptrunita null reference (Nothing in Visual Basic) and assigns the type value to the CLR object.","pos":[20472,20637]},{"content":"It then calls the isNull method and prints the result in the Infolog.","pos":[20638,20707]},{"pos":[20911,20922],"content":"Method Null","linkify":"Method Null","nodes":[{"content":"Method Null","pos":[0,11]}]},{"content":"Returns a CLR data type that has a value of nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[20924,21033]},{"pos":[21091,21101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"clrTypeName","pos":[21103,21114]},{"content":"The CLR data type to set to nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[21117,21210]},{"pos":[21217,21229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A CLRObject instance of the specified CLR data type.","pos":[21231,21283]},{"pos":[21290,21297],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you directly set CLR data types to nullNothingnullptrunita null reference (Nothing in Visual Basic) in X++, you only set the kernel reference to nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[21299,21512]},{"content":"This will make it impossible to use the type as a CLR data type.","pos":[21513,21577]},{"content":"If you assign the CLR data type to CLRInterop:null(\"yourType\"),, the type can be parsed at run time as a parameter of a static method invocation.","pos":[21578,21723]},{"pos":[21730,21738],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example sets the CLR string type to nullNothingnullptrunita null reference (Nothing in Visual Basic) and assigns the type value to a CLR object.","pos":[21740,21898]},{"pos":[22153,22172],"content":"Method parseClrEnum","linkify":"Method parseClrEnum","nodes":[{"content":"Method parseClrEnum","pos":[0,19]}]},{"content":"Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent CLRObject instance.","pos":[22174,22310]},{"pos":[22396,22406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"clrEnumTypeName","pos":[22408,22423]},{"content":"A string that contains the name or value to convert.","pos":[22426,22478]},{"content":"enumValues","pos":[22490,22500]},{"content":"A string that contains the name or value to convert.","pos":[22503,22555]},{"pos":[22562,22574],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The CLRObject instance that contains the specified CLR enumerator values.","pos":[22576,22649]},{"pos":[22656,22663],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">\\_</ph>enumValues parameter contains a value, a named constant, or a list of named constants that are delimited by commas (,).","pos":[22665,22790],"source":"The \\_enumValues parameter contains a value, a named constant, or a list of named constants that are delimited by commas (,)."},{"content":"One or more blanks spaces can precede or follow each value, name, or comma in <ph id=\"ph1\">\\_</ph>enumValues.","pos":[22791,22882],"source":" One or more blanks spaces can precede or follow each value, name, or comma in \\_enumValues."},{"content":"If <ph id=\"ph1\">\\_</ph>enumValues is a list, the return value is the value of the specified names combined with a bitwise OR operation.","pos":[22883,23000],"source":" If \\_enumValues is a list, the return value is the value of the specified names combined with a bitwise OR operation."},{"pos":[23007,23015],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example converts the enumerator value to the string value of Monday and prints the value in the Infolog.","pos":[23017,23135]},{"pos":[23462,23481],"content":"Method staticInvoke","linkify":"Method staticInvoke","nodes":[{"content":"Method staticInvoke","pos":[0,19]}]},{"content":"Calls a static method on a CLR data type.","pos":[23483,23524]},{"pos":[23619,23629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"className","pos":[23631,23640]},{"content":"The arguments, if there are any, to the method that is specified in the <ph id=\"ph1\">\\_</ph>methodName parameter.","pos":[23643,23738],"source":"The arguments, if there are any, to the method that is specified in the \\_methodName parameter."},{"content":"methodName","pos":[23750,23760]},{"content":"The arguments, if there are any, to the method that is specified in the <ph id=\"ph1\">\\_</ph>methodName parameter.","pos":[23763,23858],"source":"The arguments, if there are any, to the method that is specified in the \\_methodName parameter."},{"content":"params","pos":[23870,23876]},{"content":"The arguments, if there are any, to the method that is specified in the <ph id=\"ph1\">\\_</ph>methodName parameter.","pos":[23879,23974],"source":"The arguments, if there are any, to the method that is specified in the \\_methodName parameter."},{"pos":[23981,23993],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The CLRObject that contains the value that is returned by the static CLR method; otherwise, nullNothingnullptrunita null reference (Nothing in Visual Basic).","pos":[23995,24152]},{"pos":[24159,24166],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If an attacker can control input to the staticInvoke method, a security risk exists.","pos":[24168,24252]},{"content":"Therefore, this method runs under Code Access Security.","pos":[24253,24308]},{"content":"Calls to this method on the server require permission.","pos":[24309,24363]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[24364,24499]},{"content":"If an error occurs when you call the get<ph id=\"ph1\">\\_</ph>Now method, the Exception::ClrError exception is thrown.","pos":[24500,24598],"source":" If an error occurs when you call the get\\_Now method, the Exception::ClrError exception is thrown."},{"pos":[24605,24613],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example calls the get<ph id=\"ph1\">\\_</ph>Now method on the System.DateTime CLR class and prints the results in the Infolog.","pos":[24615,24734],"source":"The following example calls the get\\_Now method on the System.DateTime CLR class and prints the results in the Infolog."},{"pos":[25440,25459],"content":"Method loadAssembly","linkify":"Method loadAssembly","nodes":[{"content":"Method loadAssembly","pos":[0,19]}]},{"pos":[25524,25534],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"clrAssemblyName","pos":[25536,25551]},{"pos":[25559,25569],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the CLRInterop class.","pos":[25571,25622]},{"pos":[25652,25659],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"All members of the CLRInterop class are static.","pos":[25661,25708]},{"content":"There is no requirement to instantiate this class.","pos":[25709,25759]},{"content":"If an attacker can control input to the new method, a security risk exists.","pos":[25760,25835]},{"content":"Therefore, this method runs under Code Access Security.","pos":[25836,25891]},{"content":"Calls to this method on the server require permission from the InteropPermission class.","pos":[25892,25979]},{"pos":[25984,25999],"content":"Class CLRObject","linkify":"Class CLRObject","nodes":[{"content":"Class CLRObject","pos":[0,15]}]},{"content":"The CLRObject class holds a reference to an instance of a common language runtime (CLR) object and dispatches calls from X++ to the corresponding wrapped managed instance.","pos":[26036,26207]},{"pos":[26213,26220],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26226,26234],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[26240,26247],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[26251,26257]},{"content":"Description","pos":[26303,26314]},{"content":"private CLRObject dispatch(VarArg )","pos":[26455,26490]},{"content":"Reserved: Do not explicitly call this method.","pos":[26507,26552]},{"content":"public void new(str className, <ph id=\"ph1\">\\[</ph>VarArg params<ph id=\"ph2\">\\]</ph>)","pos":[26557,26606],"source":"public void new(str className, \\[VarArg params\\])"},{"content":"Creates an instance of the CLRObject class.","pos":[26609,26652]},{"pos":[26662,26677],"content":"Method dispatch","linkify":"Method dispatch","nodes":[{"content":"Method dispatch","pos":[0,15]}]},{"content":"Reserved: Do not explicitly call this method.","pos":[26679,26724]},{"pos":[26772,26782],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[26793,26805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[26812,26819],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If an attacker can control input to the dispatch method, a security risk exists.","pos":[26821,26901]},{"content":"Therefore, this method runs under Code Access Security.","pos":[26902,26957]},{"content":"Calls to this method on the server require permission from the InteropPermission class.","pos":[26958,27045]},{"pos":[27051,27061],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates an instance of the CLRObject class.","pos":[27063,27106]},{"pos":[27166,27176],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"className","pos":[27178,27187]},{"content":"The arguments for the constructor of the CLR class to instantiate.","pos":[27190,27256]},{"content":"params","pos":[27268,27274]},{"content":"The arguments for the constructor of the CLR class to instantiate.","pos":[27277,27343]},{"pos":[27350,27357],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Instances of the CLRObject class are used to wrap values that are returned from calls to CLR methods.","pos":[27359,27460]},{"content":"If an attacker can control input to the new method, a security risk exists.","pos":[27461,27536]},{"content":"Therefore, this method runs under Code Access Security.","pos":[27537,27592]},{"content":"Calls to this method on the server require permission from the InteropPermission class.","pos":[27593,27680]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls the new method.","pos":[27681,27819]},{"content":"If a new ClrObject object cannot be instantiated, the Exception:Internal exception is thrown.","pos":[27820,27913]},{"content":"To obtain the original CLR exception, call the CLRInterop::getLastException method.","pos":[27914,27997]},{"pos":[28004,28012],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"This example creates a new System.Int32 CLR object.","pos":[28014,28065]},{"pos":[28480,28506],"content":"Class CodeAccessPermission","linkify":"Class CodeAccessPermission","nodes":[{"content":"Class CodeAccessPermission","pos":[0,26]}]},{"content":"The CodeAccessPermission class defines the underlying structure of code access permissions.","pos":[28554,28645]},{"pos":[28651,28658],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following classes extend the CodeAccessPermission class: ExecutePermission, FileIOPermission, InteropPermission, RunAsPermission, SkipAOSValidationPermission, SqlDataDictionaryPermission, SqlStatementExecutePermission, and SysDatabaseLogPermission.","pos":[28660,28912]},{"pos":[28918,28926],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example shows a class that is derived from the CodeAccessPermission class.","pos":[28928,29021]},{"content":"This code example illustrates a step in the process of protecting an API.","pos":[29130,29203]},{"pos":[29209,29216],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[29220,29226]},{"content":"Description","pos":[29277,29288]},{"content":"public CodeAccessPermission copy()","pos":[29634,29668]},{"content":"Creates and returns a copy of a permission class object.","pos":[29691,29747]},{"content":"public boolean isSubsetOf(CodeAccessPermission target)","pos":[29841,29895]},{"content":"Determines whether a current permission is a subset of the specified permission when it is overridden by a derived class.","pos":[29898,30019]},{"content":"public void new()","pos":[30048,30065]},{"content":"Initializes a new instance of the CodeAccessPermission class.","pos":[30105,30166]},{"content":"public void assert()","pos":[30255,30275]},{"content":"Declares that the calling code can invoke an API that is protected by a permission.","pos":[30312,30395]},{"content":"public void demand()","pos":[30462,30482]},{"content":"Checks the call stack to determine whether the permission that is required to invoke an API has been granted to the calling code.","pos":[30519,30648]},{"content":"::public static void revertAssert()","pos":[30669,30704]},{"content":"Causes a previous call to the CodeAccessPermission.assert and CodeAccessPermission::assertMultiple methods to be removed and no longer in effect.","pos":[30726,30871]},{"content":"::public static void assertMultiple(Set permissionSet)","pos":[30876,30930]},{"content":"Declares that the calling code can invoke an API that is protected by any of the permissions in a specified collection.","pos":[30933,31052]},{"pos":[31086,31097],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Creates and returns a copy of a permission class object.","pos":[31099,31155]},{"pos":[31202,31214],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A copy of the derived class object.","pos":[31216,31251]},{"pos":[31258,31265],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override this method as part of the process of making an API more secure.","pos":[31267,31348]},{"pos":[31355,31363],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example shows how to override the copy method to create and return a copy of a class that is derived from the CodeAccessPermission class.","pos":[31365,31521]},{"pos":[31637,31654],"content":"Method isSubsetOf","linkify":"Method isSubsetOf","nodes":[{"content":"Method isSubsetOf","pos":[0,17]}]},{"content":"Determines whether a current permission is a subset of the specified permission when it is overridden by a derived class.","pos":[31656,31777]},{"pos":[31844,31854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"target","pos":[31856,31862]},{"content":"A CodeAccessPermission class object.","pos":[31865,31901]},{"pos":[31908,31920],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if a current permission is a subset of a specified permission; otherwise, false.","pos":[31922,32007]},{"pos":[32014,32021],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You can override the method as part of the process of making an API more secure.","pos":[32023,32103]},{"pos":[32110,32118],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to override the isSubsetOf method to determine whether permissions that are stored in the current object are located in <ph id=\"ph1\">\\_</ph>target.","pos":[32120,32281],"source":"The following example shows how to override the isSubsetOf method to determine whether permissions that are stored in the current object are located in \\_target."},{"pos":[32471,32481],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the CodeAccessPermission class.","pos":[32483,32544]},{"pos":[32573,32586],"content":"Method assert","linkify":"Method assert","nodes":[{"content":"Method assert","pos":[0,13]}]},{"content":"Declares that the calling code can invoke an API that is protected by a permission.","pos":[32588,32671]},{"pos":[32704,32711],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must call the assert method in the derived class for a protected API before you invoke the API.","pos":[32713,32812]},{"content":"For more information about APIs that are protected by permissions, see Secured APIs.","pos":[32813,32897]},{"content":"You must call the assert method on the same tier, usually the server tier, that the corresponding CodeAccessPermission::demand method is called on before the protected API is executed.","pos":[32898,33082]},{"content":"Call a method on the server tier from one of the following:","pos":[33083,33142]},{"content":"A server static method","pos":[33148,33170]},{"content":"A class instance method that is set to run on the server by using the RunOn class property","pos":[33175,33265]},{"content":"Finance and Operations does not support multiple, successive calls to the assert method in the same calling code.","pos":[33267,33380]},{"content":"Either call the CodeAccessPermission::revertAssert method between each call to the assert method, or call the CodeAccessPermission::assertMultiple method.","pos":[33381,33535]},{"content":"If you make multiple, successive calls to the assertmethod, the Infolog displays an error when you execute the code.","pos":[33536,33652]},{"pos":[33659,33667],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example shows a call to the assert method before the AsciiIo Class class that is protected by a permission is invoked.","pos":[33669,33806]},{"content":"The assert method is a member of the FileIOPermission class that is derived from the CodeAccessPermission class.","pos":[33807,33919]},{"pos":[34222,34235],"content":"Method demand","linkify":"Method demand","nodes":[{"content":"Method demand","pos":[0,13]}]},{"content":"Checks the call stack to determine whether the permission that is required to invoke an API has been granted to the calling code.","pos":[34237,34366]},{"pos":[34399,34407],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example shows a call to the demand method before the API functionality is executed, to determine whether permission to access the resource that is specified by the data variable has been granted to code that is calling the API.","pos":[34409,34655]},{"content":"This code example illustrates a step in the process of protecting an API.","pos":[34846,34919]},{"pos":[34925,34944],"content":"Method revertAssert","linkify":"Method revertAssert","nodes":[{"content":"Method revertAssert","pos":[0,19]}]},{"content":"Causes a previous call to the CodeAccessPermission.assert and CodeAccessPermission::assertMultiple methods to be removed and no longer in effect.","pos":[34946,35091]},{"pos":[35137,35144],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When you have multiple calls to the assert method in the same calling code, you must call the revertAssert method between each call.","pos":[35146,35278]},{"content":"Otherwise, the Infolog displays an error when you execute the code.","pos":[35279,35346]},{"content":"When you call the assert method only one time, or when you call the CodeAccessPermission::assertMultiple method, we recommend that you still call the revertAssert method after you invoke the protected API to limit the scope of the assert.","pos":[35347,35585]},{"pos":[35592,35600],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example shows a call to the CodeAccessPermission::revertAssert method after the user calls the CodeAccessPermission.assert method and the AsciiIo class that is protected by a permission.","pos":[35602,35807]},{"pos":[36224,36245],"content":"Method assertMultiple","linkify":"Method assertMultiple","nodes":[{"content":"Method assertMultiple","pos":[0,21]}]},{"content":"Declares that the calling code can invoke an API that is protected by any of the permissions in a specified collection.","pos":[36247,36366]},{"pos":[36431,36441],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"permissionSet","pos":[36443,36456]},{"content":"A Set class object that contains a collection of permissions.","pos":[36459,36520]},{"pos":[36527,36534],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You call the assertMultple method instead of making multiple, successive calls to the CodeAccessPermission.assert and CodeAccessPermission::revertAssert methods in the same calling code.","pos":[36536,36722]},{"pos":[36729,36737],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example calls the CodeAccessPermission::assertMultple method.","pos":[36739,36819]},{"content":"Then the code example calls the WinAPIServer::createFile method, which would fail without the previous call to the CodeAccessPermission::assertMultple method.","pos":[36820,36978]},{"content":"The code example is a static method that you can add to a new class that you create.","pos":[36979,37063]},{"content":"You can call this static method from an X++ job by using one line of code that resembles MyClass::RunOnServerPermissionTest.","pos":[37064,37188]},{"content":"In the code example, the WinAPIServer class has several secure methods.","pos":[37189,37260]},{"content":"The WinAPIServer class runs on the server tier, not on the client tier.","pos":[37261,37332]},{"content":"Therefore the code example method must also run on the server tier.","pos":[37333,37400]},{"content":"Otherwise, any permission asserts that are made on the client tier are ignored by methods that run on the server tier.","pos":[37401,37519]},{"content":"This is why the server keyword is included in the method declaration of the code example.","pos":[37520,37609]},{"content":"The server keyword on the method takes precedence over the RunOn property value that is specified on the class.","pos":[37610,37721]},{"pos":[38442,38451],"content":"Class COM","linkify":"Class COM","nodes":[{"content":"Class COM","pos":[0,9]}]},{"content":"The COM class is use to create Component Object Model (COM) objects.","pos":[38467,38535]},{"pos":[38541,38548],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The COM class also supports Distributed Component Object Model (DCOM).","pos":[38550,38620]},{"content":"DCOM enables objects that support DCOM to run on remote computers.","pos":[38621,38687]},{"content":"When a COM object has been instantiated by using the COM class, its methods and properties can be accessed by using either the COMDispFunction class or the extended syntax for the COM class.","pos":[38688,38878]},{"content":"The extended syntax enables methods and properties to be directly called on the COM object, even though they don't appear in the Lookup list (for example, com.comMethod(\"Hello World\");).","pos":[38879,39065]},{"content":"The extended syntax supports calls to methods and properties that take any number of arguments.","pos":[39066,39161]},{"content":"Some COM objects support the concept of optional arguments.","pos":[39162,39221]},{"content":"Only optional variant arguments can be omitted.","pos":[39222,39269]},{"content":"If optional arguments are omitted, the COM object uses its default values.","pos":[39270,39344]},{"content":"To omit an argument for the COM object and force it to use its default value, specify the COMArgument::NoValue enumeration, as shown in the following example.","pos":[39345,39503]},{"content":"If the arguments to omit from the COM object appear at the end of the argument list, omit them from the code.","pos":[39573,39682]},{"content":"The following types are supported for the extended syntax for the COM class argument type and return type:","pos":[39683,39789]},{"content":"array","pos":[39795,39800]},{"content":"COM","pos":[39805,39808]},{"content":"COMVariant","pos":[39813,39823]},{"content":"date","pos":[39828,39832]},{"content":"enum","pos":[39837,39841]},{"content":"int","pos":[39846,39849]},{"content":"real","pos":[39854,39858]},{"content":"str","pos":[39863,39866]},{"content":"If a COM object returns a date, and if the extended syntax is used, the return value of the COM method should be assigned to a COMVariant class variable.","pos":[39868,40021]},{"content":"The actual date and time (format) can then be extracted from the COMVariant class by using the date and time properties.","pos":[40022,40142]},{"content":"If the date return value is assigned to a date variable instead of a COMVariant class, the time component of the date is lost.","pos":[40143,40269]},{"content":"When the extended syntax is used, you can still call the COM class methods (the methods that appear in the Lookup list) on the objects.","pos":[40270,40405]},{"content":"The COM class methods have a higher priority than the methods on the actual COM object.","pos":[40406,40493]},{"content":"If a method on the COM object has the same name as a method on the COM class (for example, attach), you cannot call that method on the COM object.","pos":[40494,40640]},{"content":"To enable Finance and Operations to call the method on the COM object instead of the method that has the same name on the COM class, prefix the duplicate method name with an underscore (for example, com.<ph id=\"ph1\">\\_</ph>detach();).","pos":[40641,40857],"source":" To enable Finance and Operations to call the method on the COM object instead of the method that has the same name on the COM class, prefix the duplicate method name with an underscore (for example, com.\\_detach();)."},{"content":"The extended syntax for the COM class is evaluated at run time, not compile time, which causes a slight decrease in performance.","pos":[40858,40986]},{"content":"If high-performance code is required, consider using the COMDispFunction class.","pos":[40987,41066]},{"content":"This class offers performance improvements over the extended syntax for the COM class.","pos":[41067,41153]},{"pos":[41159,41167],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"This example calls the GetFileName method from the Scripting.FileSystemObject COM object.","pos":[41169,41258]},{"pos":[41978,41985],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[41989,41995]},{"content":"Description","pos":[42099,42110]},{"content":"public AnyType dispatch(VarArg )","pos":[42499,42531]},{"content":"Reserved.","pos":[42609,42618]},{"content":"Do not explicitly call this method.","pos":[42619,42654]},{"content":"public str documentationName()","pos":[42754,42784]},{"content":"Returns the textual name of the COM object that is associated with the instance of the COM class.","pos":[42864,42961]},{"content":"public COMError error()","pos":[43009,43032]},{"content":"Returns a COMError object that is associated with the instance of the COM class.","pos":[43119,43199]},{"content":"public ComInterface interface()","pos":[43264,43295]},{"content":"Returns the interface that is associated with the COM object.","pos":[43374,43435]},{"content":"public int lcid(<ph id=\"ph1\">\\[</ph>int lcid<ph id=\"ph2\">\\]</ph>)","pos":[43519,43548],"source":"public int lcid(\\[int lcid\\])"},{"content":"public str toString()","pos":[43774,43795]},{"content":"Returns a string that represents the instance of the COM class.","pos":[43884,43947]},{"content":"::public static COM createFromInterface(ComInterface interface)","pos":[44029,44092]},{"content":"Creates an instance of the COM class by using the specified COM interface.","pos":[44139,44213]},{"content":"::public static COM createFromObject(COM object)","pos":[44284,44332]},{"content":"Creates an instance of the COM class by using the specified COM object.","pos":[44394,44465]},{"content":"::public static COM createFromVariant(COMVariant variant)","pos":[44539,44596]},{"content":"Creates an instance of the COM class by using the specified instance of the COMVariant class.","pos":[44649,44742]},{"content":"::public static COM getObject(str className)","pos":[44794,44838]},{"content":"Returns an instance of a COM object that is running.","pos":[44904,44956]},{"content":"::public static COM getObjectEx(str fileName)","pos":[45049,45094]},{"content":"Returns an instance of a COM object that is specified by its file name.","pos":[45159,45230]},{"content":"::public static AnyType unsupported(int action, <ph id=\"ph1\">\\[</ph>AnyType param1<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AnyType param2<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>AnyType param3<ph id=\"ph6\">\\]</ph>)","pos":[45304,45411],"source":"::public static AnyType unsupported(int action, \\[AnyType param1\\], \\[AnyType param2\\], \\[AnyType param3\\])"},{"content":"Reserved.","pos":[45414,45423]},{"content":"public void finalize()","pos":[45559,45581]},{"content":"Frees resources that are associated with the instance of the COM class.","pos":[45669,45740]},{"content":"public void new(<ph id=\"ph1\">\\[</ph>str className<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>str computerName<ph id=\"ph4\">\\]</ph>)","pos":[45814,45870],"source":"public void new(\\[str className\\], \\[str computerName\\])"},{"content":"Creates an instance of the COM class that can be attached to the COM class and optionally instantiates a COM object on a specified computer.","pos":[45924,46064]},{"content":"public void attach(ComInterface interface)","pos":[46069,46111]},{"content":"Attaches an instance of the COM class to a COM interface.","pos":[46179,46236]},{"content":"public void detach()","pos":[46324,46344]},{"content":"Detaches a COM object from the class that it was associated with.","pos":[46434,46499]},{"pos":[46582,46597],"content":"Method dispatch","linkify":"Method dispatch","nodes":[{"content":"Method dispatch","pos":[0,15]}]},{"content":"Reserved.","pos":[46599,46608]},{"content":"Do not explicitly call this method.","pos":[46609,46644]},{"pos":[46689,46699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[46710,46722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[46728,46752],"content":"Method documentationName","linkify":"Method documentationName","nodes":[{"content":"Method documentationName","pos":[0,24]}]},{"content":"Returns the textual name of the COM object that is associated with the instance of the COM class.","pos":[46754,46851]},{"pos":[46894,46906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The textual name of the COM object that is associated with the instance of the COM class; an empty string if there is no documentation name for the COM object.","pos":[46908,47067]},{"pos":[47074,47081],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The textual name of a class is used by the class to describe itself.","pos":[47083,47151]},{"content":"The textual name differs from the class name that is used to instantiate the class.","pos":[47152,47235]},{"pos":[47242,47250],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve the documentation name for a COM object.","pos":[47252,47336]},{"pos":[47510,47522],"content":"Method error","linkify":"Method error","nodes":[{"content":"Method error","pos":[0,12]}]},{"content":"Returns a COMError object that is associated with the instance of the COM class.","pos":[47524,47604]},{"pos":[47640,47652],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A COMError value that represents the error that is associated with the instance of the COM class.","pos":[47654,47751]},{"pos":[47758,47766],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve the error object that is associated with an instance of the COM class.","pos":[47768,47882]},{"pos":[48075,48091],"content":"Method interface","linkify":"Method interface","nodes":[{"content":"Method interface","pos":[0,16]}]},{"content":"Returns the interface that is associated with the COM object.","pos":[48093,48154]},{"pos":[48198,48210],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The interface that is associated with the COM object; 0 (zero) if no interface is associated with the COM object.","pos":[48212,48325]},{"pos":[48332,48340],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve the interface that is associated with a COM object.","pos":[48342,48437]},{"pos":[48550,48561],"content":"Method lcid","linkify":"Method lcid","nodes":[{"content":"Method lcid","pos":[0,11]}]},{"pos":[48601,48611],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lcid","pos":[48613,48617]},{"pos":[48626,48638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48644,48659],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that represents the instance of the COM class.","pos":[48661,48724]},{"pos":[48758,48770],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that contains a description of the instance of the COM class.","pos":[48772,48842]},{"pos":[48849,48857],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to use the toString method.","pos":[48859,48918]},{"pos":[48954,48980],"content":"Method createFromInterface","linkify":"Method createFromInterface","nodes":[{"content":"Method createFromInterface","pos":[0,26]}]},{"content":"Creates an instance of the COM class by using the specified COM interface.","pos":[48982,49056]},{"pos":[49130,49140],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"interface","pos":[49142,49151]},{"content":"The interface to use to create the new instance of the COM class.","pos":[49154,49219]},{"pos":[49226,49238],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An instance of the COM class for the COM interface that is specified by the interface parameter; nullNothingnullptrunita null reference (Nothing in Visual Basic) if the instance of the COM class could not be created.","pos":[49240,49456]},{"pos":[49463,49470],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To help reduce security risks that are associated with unmanaged code, make sure that you validate the objects that are passed to this method, and that all DLLs used for your COM objects are protected by access control lists.","pos":[49472,49697]},{"pos":[49703,49726],"content":"Method createFromObject","linkify":"Method createFromObject","nodes":[{"content":"Method createFromObject","pos":[0,23]}]},{"content":"Creates an instance of the COM class by using the specified COM object.","pos":[49728,49799]},{"pos":[49858,49868],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"object","pos":[49870,49876]},{"content":"The instance of the COM class to use to create the new instance of the COM class.","pos":[49879,49960]},{"pos":[49967,49979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An instance of the COM class for the COM object that is specified by the object parameter; nullNothingnullptrunita null reference (Nothing in Visual Basic) if the instance of the COM class could not be created.","pos":[49981,50191]},{"pos":[50198,50205],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To help reduce security risks that are associated with unmanaged code, make sure that you validate the objects that are passed to this method, and that all DLLs used for your COM objects are protected by access control lists.","pos":[50207,50432]},{"pos":[50438,50462],"content":"Method createFromVariant","linkify":"Method createFromVariant","nodes":[{"content":"Method createFromVariant","pos":[0,24]}]},{"content":"Creates an instance of the COM class by using the specified instance of the COMVariant class.","pos":[50464,50557]},{"pos":[50625,50635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"variant","pos":[50637,50644]},{"content":"The instance of the COMVariant class to use to create the new instance of the COM class.","pos":[50647,50735]},{"pos":[50742,50754],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An instance of the COM class for the COM object that is specified by the variant parameter; nullNothingnullptrunita null reference (Nothing in Visual Basic) if the instance of the COM class could not be created.","pos":[50756,50967]},{"pos":[50974,50981],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To help reduce security risks that are associated with unmanaged code, make sure that you validate the objects that are passed to this method, and that all DLLs used for your COM objects are protected by access control lists.","pos":[50983,51208]},{"pos":[51214,51230],"content":"Method getObject","linkify":"Method getObject","nodes":[{"content":"Method getObject","pos":[0,16]}]},{"content":"Returns an instance of a COM object that is running.","pos":[51232,51284]},{"pos":[51339,51349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"className","pos":[51351,51360]},{"content":"The ProgID value or class name of the COM object that is used to create the instance of the COM class.","pos":[51363,51465]},{"pos":[51472,51484],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An instance of the COM class for the class that is specified by the className parameter; nullNothingnullptrunita null reference (Nothing in Visual Basic) if the instance could not be created.","pos":[51486,51677]},{"pos":[51684,51691],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If multiple instances of the specified COM object are running, we cannot guarantee which instance will be returned by the getObject method.","pos":[51693,51832]},{"content":"Some COM objects do not support the extended features that enable calls to this method.","pos":[51833,51920]},{"pos":[51927,51935],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve an instance of a running COM object.","pos":[51937,52017]},{"pos":[52939,52957],"content":"Method getObjectEx","linkify":"Method getObjectEx","nodes":[{"content":"Method getObjectEx","pos":[0,18]}]},{"content":"Returns an instance of a COM object that is specified by its file name.","pos":[52959,53030]},{"pos":[53086,53096],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fileName","pos":[53098,53106]},{"content":"The name of the file that provides the functionality for the COM object that is used to create the instance of the COM class.","pos":[53109,53234]},{"pos":[53241,53253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An instance of the COM class that is specified by the filename parameter; nullNothingnullptrunita null reference (Nothing in Visual Basic) if the instance could not be created.","pos":[53255,53431]},{"pos":[53438,53445],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To help reduce security risks that are associated with unmanaged code, make sure that you validate the objects that are passed to this method, and that all DLLs used for your COM objects are protected by access control lists.","pos":[53447,53672]},{"pos":[53678,53696],"content":"Method unsupported","linkify":"Method unsupported","nodes":[{"content":"Method unsupported","pos":[0,18]}]},{"content":"Reserved.","pos":[53698,53707]},{"pos":[53819,53829],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"action","pos":[53831,53837]},{"content":"param1","pos":[53851,53857]},{"content":"param2","pos":[53871,53877]},{"content":"param3","pos":[53891,53897]},{"pos":[53906,53918],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[53924,53939],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"content":"Frees resources that are associated with the instance of the COM class.","pos":[53941,54012]},{"pos":[54047,54055],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example how to use the finalize method.","pos":[54057,54110]},{"pos":[54140,54150],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates an instance of the COM class that can be attached to the COM class and optionally instantiates a COM object on a specified computer.","pos":[54152,54292]},{"pos":[54357,54367],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"className","pos":[54369,54378]},{"content":"The name of the remote computer on which to instantiate the COM object; optional.","pos":[54381,54462]},{"content":"If this parameter is omitted, the COM object is instantiated on the local computer.","pos":[54463,54546]},{"content":"If the computer name is specified, the DCOM system component must be installed on both the local computer and the remote computer.","pos":[54547,54677]},{"content":"The specific COM object must support DCOM, and it must be correctly configured on both the local computer and the remote computer.","pos":[54678,54808]},{"content":"The system component is a standard component of MicrosoftWindows 98, Windows NT, and later versions.","pos":[54809,54909]},{"content":"In Windows 95, the DCOM system component must be installed.","pos":[54910,54969]},{"content":"computerName","pos":[54981,54993]},{"content":"The name of the remote computer on which to instantiate the COM object; optional.","pos":[54996,55077]},{"content":"If this parameter is omitted, the COM object is instantiated on the local computer.","pos":[55078,55161]},{"content":"If the computer name is specified, the DCOM system component must be installed on both the local computer and the remote computer.","pos":[55162,55292]},{"content":"The specific COM object must support DCOM, and it must be correctly configured on both the local computer and the remote computer.","pos":[55293,55423]},{"content":"The system component is a standard component of MicrosoftWindows 98, Windows NT, and later versions.","pos":[55424,55524]},{"content":"In Windows 95, the DCOM system component must be installed.","pos":[55525,55584]},{"pos":[55591,55598],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The class name of a COM object is either its programmatic identifier (ProgID) or its class identifier (CLSID):","pos":[55600,55710]},{"content":"ProgIDs have the following format: program.component.version","pos":[55716,55776]},{"content":"CLSIDs are 128-bit values and have the following format: {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}","pos":[55781,55876]},{"content":"If an attacker can control input to the new method, a security risk exists.","pos":[55878,55953]},{"content":"Therefore, this method runs under Code Access Security.","pos":[55954,56009]},{"content":"Calls to this method on the server require permission from the InteropPermission class.","pos":[56010,56097]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[56098,56233]},{"pos":[56240,56248],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"This example calls the GetFileName method from the Scripting.FileSystemObject COM object.","pos":[56250,56339]},{"pos":[57056,57069],"content":"Method attach","linkify":"Method attach","nodes":[{"content":"Method attach","pos":[0,13]}]},{"content":"Attaches an instance of the COM class to a COM interface.","pos":[57071,57128]},{"pos":[57183,57193],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"interface","pos":[57195,57204]},{"content":"The interface to attach to the instance of the COM class.","pos":[57207,57264]},{"pos":[57271,57278],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is provided because some COM objects can be instantiated only by other COM objects and cannot be instantiated directly by the COM class.","pos":[57280,57428]},{"pos":[57434,57447],"content":"Method detach","linkify":"Method detach","nodes":[{"content":"Method detach","pos":[0,13]}]},{"content":"Detaches a COM object from the class that it was associated with.","pos":[57449,57514]},{"pos":[57547,57554],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For example, this method can be called to detach a COM object from a call to the attach or new method.","pos":[57556,57658]},{"pos":[57663,57684],"content":"Class COMDispFunction","linkify":"Class COMDispFunction","nodes":[{"content":"Class COMDispFunction","pos":[0,21]}]},{"pos":[57731,57738],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[57744,57752],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[57758,57765],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[57769,57775]},{"content":"Description","pos":[57844,57855]},{"content":"public int call(VarArg )","pos":[58129,58153]},{"content":"public AnyType callContainerOfParms(container parms)","pos":[58309,58361]},{"content":"public str toString()","pos":[58489,58510]},{"content":"Returns a string that represents the current object.","pos":[58564,58616]},{"content":"public void finalize()","pos":[58669,58691]},{"content":"public void new(COM comObject, str functionName, COMDispContext context)","pos":[58849,58921]},{"content":"Creates a COMDispFunction object, which is used to access the functionality in an Automation object.","pos":[58924,59024]},{"pos":[59032,59043],"content":"Method call","linkify":"Method call","nodes":[{"content":"Method call","pos":[0,11]}]},{"pos":[59080,59090],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[59101,59113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59120,59127],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If an attacker can control input to the call method, a security risk exists.","pos":[59129,59205]},{"content":"Therefore, this method runs under Code Access Security.","pos":[59206,59261]},{"content":"Calls to this method on the server require permission from the InteropPermission class.","pos":[59262,59349]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[59350,59485]},{"pos":[59491,59518],"content":"Method callContainerOfParms","linkify":"Method callContainerOfParms","nodes":[{"content":"Method callContainerOfParms","pos":[0,27]}]},{"pos":[59583,59593],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"parms","pos":[59595,59600]},{"pos":[59609,59621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59627,59642],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that represents the current object.","pos":[59644,59696]},{"pos":[59730,59742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that represents the current object.","pos":[59744,59788]},{"pos":[59795,59802],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation returns the class name of the object.","pos":[59804,59868]},{"content":"The method can be overridden in a derived class to return values that are meaningful for that type.","pos":[59869,59968]},{"content":"For example, an instance of the SysMethodInfo class returns the method name and type of the method, such as instance or static.","pos":[59969,60096]},{"pos":[60102,60117],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[60151,60161],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a COMDispFunction object, which is used to access the functionality in an Automation object.","pos":[60163,60263]},{"pos":[60348,60358],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"comObject","pos":[60360,60369]},{"content":"The context of the functionality to access.","pos":[60372,60415]},{"content":"The following values are used: COMDispContext::METHOD, COMDispContext::PROPERTYGET, COMDispContext::PROPERTYPUT, and COMDispContext::PROPERTYPUTREF","pos":[60416,60563]},{"content":"functionName","pos":[60575,60587]},{"content":"The context of the functionality to access.","pos":[60590,60633]},{"content":"The following values are used: COMDispContext::METHOD, COMDispContext::PROPERTYGET, COMDispContext::PROPERTYPUT, and COMDispContext::PROPERTYPUTREF","pos":[60634,60781]},{"content":"context","pos":[60793,60800]},{"content":"The context of the functionality to access.","pos":[60803,60846]},{"content":"The following values are used: COMDispContext::METHOD, COMDispContext::PROPERTYGET, COMDispContext::PROPERTYPUT, and COMDispContext::PROPERTYPUTREF","pos":[60847,60994]},{"pos":[61001,61008],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"It is important that you specify the correct context of the functionality in the COM object that you want to access, because a COM object can supply up to four functions that use the same name.","pos":[61010,61203]},{"content":"Because of the possible name clashing, the context is used to distinguish the method or properties.","pos":[61204,61303]},{"content":"To specify the correct context, see the documentation for the COM object that you want to access.","pos":[61304,61401]},{"pos":[61408,61416],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[62026,62040],"content":"Class COMError","linkify":"Class COMError","nodes":[{"content":"Class COMError","pos":[0,14]}]},{"content":"The COMError class wraps any COM errors that occur during a COM method call.","pos":[62076,62152]},{"pos":[62158,62165],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When an error occurs during a COM method call, the error code and the error description are stored in the COMError object.","pos":[62167,62289]},{"content":"The COMError object that is associated with a COM class is retrieved from the COM class by using the COM.error method.","pos":[62290,62408]},{"pos":[62414,62422],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[62428,62435],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[62439,62445]},{"content":"Description","pos":[62466,62477]},{"content":"public str description()","pos":[62745,62769]},{"content":"Returns a description of the error that occurred when the COM object was called.","pos":[62772,62852]},{"content":"public int helpContext()","pos":[62898,62922]},{"content":"Returns the Help context ID for the error that occurred when the COM object was called.","pos":[62925,63012]},{"content":"public str helpFile()","pos":[63051,63072]},{"content":"Returns the name of the Help file that contains information about the error that occurred when the COM object was called.","pos":[63078,63199]},{"content":"public int number()","pos":[63204,63223]},{"content":"Returns the error code of the error that occurred when the COM object was called.","pos":[63231,63312]},{"content":"public str source()","pos":[63357,63376]},{"content":"Returns the name of the component that caused the error that occurred when the COM object was called.","pos":[63384,63485]},{"content":"public str toString()","pos":[63510,63531]},{"content":"Returns a string that contains the class handle and name, and sometimes additional information.","pos":[63537,63632]},{"content":"public void clear()","pos":[63663,63682]},{"content":"Clears the properties of the COMError object.","pos":[63690,63735]},{"content":"public void new()","pos":[63816,63833]},{"content":"Initializes an instance of the COMError class.","pos":[63843,63889]},{"content":"public void finalize()","pos":[63969,63991]},{"pos":[64125,64143],"content":"Method description","linkify":"Method description","nodes":[{"content":"Method description","pos":[0,18]}]},{"content":"Returns a description of the error that occurred when the COM object was called.","pos":[64145,64225]},{"pos":[64262,64274],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The error description.","pos":[64276,64298]},{"pos":[64305,64312],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The description might be empty if the COM object does not support handing out textual error messages.","pos":[64314,64415]},{"content":"The description property is read-only.","pos":[64416,64454]},{"pos":[64460,64478],"content":"Method helpContext","linkify":"Method helpContext","nodes":[{"content":"Method helpContext","pos":[0,18]}]},{"content":"Returns the Help context ID for the error that occurred when the COM object was called.","pos":[64480,64567]},{"pos":[64604,64616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help context ID.","pos":[64618,64638]},{"pos":[64645,64652],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Help context ID might be 0 (zero) if the COM object does not support Help for its errors.","pos":[64654,64747]},{"content":"The helpContext property is read-only.","pos":[64748,64786]},{"pos":[64792,64807],"content":"Method helpFile","linkify":"Method helpFile","nodes":[{"content":"Method helpFile","pos":[0,15]}]},{"content":"Returns the name of the Help file that contains information about the error that occurred when the COM object was called.","pos":[64809,64930]},{"pos":[64964,64976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the Help file.","pos":[64978,65004]},{"pos":[65011,65018],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The Help file might be empty if the COM object does not support Help for its errors.","pos":[65020,65104]},{"content":"The helpFile property is read-only.","pos":[65105,65140]},{"pos":[65146,65159],"content":"Method number","linkify":"Method number","nodes":[{"content":"Method number","pos":[0,13]}]},{"content":"Returns the error code of the error that occurred when the COM object was called.","pos":[65161,65242]},{"pos":[65274,65286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The error code; 0 (zero) if no error occurred when the COM object was called.","pos":[65288,65365]},{"pos":[65372,65379],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The number property is read-only.","pos":[65381,65414]},{"pos":[65420,65433],"content":"Method source","linkify":"Method source","nodes":[{"content":"Method source","pos":[0,13]}]},{"content":"Returns the name of the component that caused the error that occurred when the COM object was called.","pos":[65435,65536]},{"pos":[65568,65580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The source of the error.","pos":[65582,65606]},{"pos":[65613,65620],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The source might be empty if the COM object does not support handing out the source of the error.","pos":[65622,65719]},{"content":"The source property is read-only.","pos":[65720,65753]},{"pos":[65759,65774],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that contains the class handle and name, and sometimes additional information.","pos":[65776,65871]},{"pos":[65905,65917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A textual description of the class.","pos":[65919,65954]},{"pos":[65961,65968],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For most classes, the string that is returned contains the class handle and name.","pos":[65970,66051]},{"content":"However, for some classes, additional information is included in the string.","pos":[66052,66128]},{"pos":[66134,66146],"content":"Method clear","linkify":"Method clear","nodes":[{"content":"Method clear","pos":[0,12]}]},{"content":"Clears the properties of the COMError object.","pos":[66148,66193]},{"pos":[66225,66232],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The properties of the COMError object are usually read-only, but they can be cleared by using this method.","pos":[66234,66340]},{"pos":[66346,66356],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes an instance of the COMError class.","pos":[66358,66404]},{"pos":[66433,66448],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[66481,66494],"content":"Class CommaIo","linkify":"Class CommaIo","nodes":[{"content":"Class CommaIo","pos":[0,13]}]},{"content":"The CommaIo class provides functionality for reading and writing comma-separated files.","pos":[66525,66612]},{"pos":[66618,66625],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This class has been replaced by the CommaTextIo class.","pos":[66627,66681]},{"pos":[66687,66695],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[66701,66708],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[66712,66718]},{"content":"Description","pos":[66759,66770]},{"content":"public int filePosition()","pos":[67064,67089]},{"content":"public str inFieldDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[67240,67282],"source":"public str inFieldDelimiter(\\[str value\\])"},{"content":"Determines the delimiter used to separate fields in records accessed by the <ph id=\"ph1\">\\*</ph>Io classes.","pos":[67287,67376],"source":"Determines the delimiter used to separate fields in records accessed by the \\*Io classes."},{"content":"public str inRecordDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[67416,67459],"source":"public str inRecordDelimiter(\\[str value\\])"},{"content":"Determines to the <ph id=\"ph1\">\\*</ph>Io classes what character or characters to search for to determine whether a full record has been read.","pos":[67463,67586],"source":"Determines to the \\*Io classes what character or characters to search for to determine whether a full record has been read."},{"content":"public int inRecordLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[67592,67632],"source":"public int inRecordLength(\\[int value\\])"},{"content":"Gets or sets the number of characters to read for each record in a file.","pos":[67639,67711]},{"content":"public str outFieldDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[67768,67811],"source":"public str outFieldDelimiter(\\[str value\\])"},{"content":"Gets or sets the sequence of characters that are written to a file that is used to separate the fields of a record.","pos":[67815,67930]},{"content":"public str outRecordDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[67944,67988],"source":"public str outRecordDelimiter(\\[str value\\])"},{"content":"Gets or sets the sequence of characters that is written to the output files, which separate the records in the output files.","pos":[67991,68115]},{"content":"public container read()","pos":[68120,68143]},{"content":"Reads the next full record from the Io object.","pos":[68167,68213]},{"content":"public IO<ph id=\"ph1\">\\_</ph>Status status()","pos":[68296,68322],"source":"public IO\\_Status status()"},{"content":"Retrieves the status of the last operation that was performed on the Io object.","pos":[68343,68422]},{"content":"public boolean write(VarArg values)","pos":[68472,68507]},{"content":"Writes values of a simple type.","pos":[68519,68550]},{"content":"public boolean writeExp(container data)","pos":[68648,68687]},{"content":"Writes the content of a container to a file.","pos":[68695,68739]},{"content":"public void new(str filename, str mode)","pos":[68824,68863]},{"content":"Creates a new object of the CommaIo class.","pos":[68871,68913]},{"content":"public void finalize()","pos":[69000,69022]},{"content":"Closes the file and, if data was written, flushes the file buffers to disk.","pos":[69047,69122]},{"pos":[69179,69198],"content":"Method filePosition","linkify":"Method filePosition","nodes":[{"content":"Method filePosition","pos":[0,19]}]},{"pos":[69236,69248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69254,69277],"content":"Method inFieldDelimiter","linkify":"Method inFieldDelimiter","nodes":[{"content":"Method inFieldDelimiter","pos":[0,23]}]},{"content":"Determines the delimiter used to separate fields in records accessed by the <ph id=\"ph1\">\\*</ph>Io classes.","pos":[69279,69368],"source":"Determines the delimiter used to separate fields in records accessed by the \\*Io classes."},{"pos":[69421,69431],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[69433,69438]},{"pos":[69447,69459],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The delimiter used to separate fields in records accessed by the <ph id=\"ph1\">\\*</ph>Io classes.","pos":[69461,69539],"source":"The delimiter used to separate fields in records accessed by the \\*Io classes."},{"pos":[69545,69569],"content":"Method inRecordDelimiter","linkify":"Method inRecordDelimiter","nodes":[{"content":"Method inRecordDelimiter","pos":[0,24]}]},{"content":"Determines to the <ph id=\"ph1\">\\*</ph>Io classes what character or characters to search for to determine whether a full record has been read.","pos":[69571,69694],"source":"Determines to the \\*Io classes what character or characters to search for to determine whether a full record has been read."},{"pos":[69748,69758],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[69760,69765]},{"pos":[69774,69786],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The character or characters that indicate whether a full record has been read.","pos":[69788,69866]},{"pos":[69873,69880],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For standard text, the delimiter is a newline character.","pos":[69882,69938]},{"pos":[69944,69965],"content":"Method inRecordLength","linkify":"Method inRecordLength","nodes":[{"content":"Method inRecordLength","pos":[0,21]}]},{"content":"Gets or sets the number of characters to read for each record in a file.","pos":[69967,70039]},{"pos":[70090,70100],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70102,70107]},{"pos":[70116,70128],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of characters to read for each record in the file.","pos":[70130,70191]},{"pos":[70198,70205],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For files that have a fixed-length format, use the inRecordLength property to guarantee that no more than the specified number of characters are read for each record.If the record format is overruled by a specified inRecordDelimiter property value , that is the inRecordDelimiter value is met before the fixed length is read, the record is accepted, and no additional data is read.","pos":[70207,70588]},{"content":"To ensure that a fixed number of characters are read, set the inRecordDelimiter property value to an empty string.","pos":[70589,70703]},{"content":"When no inRecordDelimiter property value is found, the inRecordDelimiter property value is the maximum limit of characters to read.","pos":[70704,70835]},{"content":"Set the inRecordDelimiter property value to zero to disable the record length check.","pos":[70836,70920]},{"pos":[70926,70950],"content":"Method outFieldDelimiter","linkify":"Method outFieldDelimiter","nodes":[{"content":"Method outFieldDelimiter","pos":[0,24]}]},{"content":"Gets or sets the sequence of characters that are written to a file that is used to separate the fields of a record.","pos":[70952,71067]},{"pos":[71121,71131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71133,71138]},{"pos":[71147,71159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The sequence of characters that are written to a file that is used to separate the fields of a record.","pos":[71161,71263]},{"pos":[71269,71294],"content":"Method outRecordDelimiter","linkify":"Method outRecordDelimiter","nodes":[{"content":"Method outRecordDelimiter","pos":[0,25]}]},{"content":"Gets or sets the sequence of characters that is written to the output files, which separate the records in the output files.","pos":[71296,71420]},{"pos":[71475,71485],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71487,71492]},{"pos":[71501,71513],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The sequence of characters that is written to the output files.","pos":[71515,71578]},{"pos":[71585,71592],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For standard text files, the delimiter is a newline character.","pos":[71594,71656]},{"pos":[71662,71673],"content":"Method read","linkify":"Method read","nodes":[{"content":"Method read","pos":[0,11]}]},{"content":"Reads the next full record from the Io object.","pos":[71675,71721]},{"pos":[71757,71769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The next full record from the Io object.","pos":[71771,71811]},{"pos":[71818,71825],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The definition of the next full record is controlled by the inFieldDelimiter, inRecordDelimiter, and inRecordLength properties.","pos":[71827,71954]},{"content":"The record is returned as a container.","pos":[71955,71993]},{"content":"Each entry in the container equals one field in the record.","pos":[71994,72053]},{"content":"Each specialized Io class has default settings for the inFieldDelimiter, inRecordDelimiter, and inRecordLength properties to enable input and output in the most common formats.","pos":[72054,72230]},{"content":"However, you might have to adjust these settings to support the desired format.","pos":[72231,72310]},{"pos":[72316,72329],"content":"Method status","linkify":"Method status","nodes":[{"content":"Method status","pos":[0,13]}]},{"content":"Retrieves the status of the last operation that was performed on the Io object.","pos":[72331,72410]},{"pos":[72448,72460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The status of the last operation, in the form of a system enumeration.","pos":[72462,72532]},{"pos":[72539,72546],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The return value is represented by the IO<ph id=\"ph1\">\\_</ph>Status system enumeration.","pos":[72548,72617],"source":"The return value is represented by the IO\\_Status system enumeration."},{"content":"The range of possible IO<ph id=\"ph1\">\\_</ph>Status values varies among Io classes.","pos":[72618,72682],"source":" The range of possible IO\\_Status values varies among Io classes."},{"pos":[72689,72697],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"This example shows how to use the status method.","pos":[72699,72747]},{"content":"However, this example will not compile in a job, because it must be run in the context of a class, form, or other object.","pos":[72748,72869]},{"pos":[73079,73091],"content":"Method write","linkify":"Method write","nodes":[{"content":"Method write","pos":[0,12]}]},{"content":"Writes values of a simple type.","pos":[73093,73124]},{"pos":[73172,73182],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"values","pos":[73184,73190]},{"content":"One or more values, each of a simple type, separated by a field delimiter.","pos":[73193,73267]},{"content":"The simple types are string, integer, real, enum, and date.","pos":[73268,73327]},{"pos":[73334,73346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the write operation succeeds; otherwise, false.","pos":[73348,73403]},{"content":"If the operation fails, you can check the status to learn the cause of the failure.","pos":[73404,73487]},{"pos":[73494,73501],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method accepts a variable number of arguments.","pos":[73503,73553]},{"content":"Each value that is specified is put into the output record as a field.","pos":[73554,73624]},{"content":"The first argument becomes the first field, the second argument becomes the second field, and so on.","pos":[73625,73725]},{"content":"Fields are separated by the field delimiter that is specified in the outFieldDelimiter method.","pos":[73726,73820]},{"content":"Records are separated by the delimiter that is specified by using the outRecordDelimiter method.","pos":[73821,73917]},{"content":"To write complete containers, use the writeExp method.","pos":[73918,73972]},{"pos":[73978,73993],"content":"Method writeExp","linkify":"Method writeExp","nodes":[{"content":"Method writeExp","pos":[0,15]}]},{"content":"Writes the content of a container to a file.","pos":[73995,74039]},{"pos":[74091,74101],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[74103,74107]},{"content":"The container that holds data for the record.","pos":[74110,74155]},{"pos":[74162,74174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the operation succeeds; otherwise, false.","pos":[74176,74225]},{"content":"If the operation fails, you can check the status to learn the cause of the failure.","pos":[74226,74309]},{"pos":[74316,74323],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The entries in the container are treated as fields.","pos":[74325,74376]},{"content":"The container itself is treated as a full record.","pos":[74377,74426]},{"content":"Fields are separated by the delimiter that is specified by using the outFieldDelimiter method.","pos":[74427,74521]},{"content":"Records are separated by the delimiter that is specified by using the outRecordDelimiter method.","pos":[74522,74618]},{"pos":[74625,74633],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"This example uses a CommaIO object to read from the example file.","pos":[74635,74700]},{"pos":[75507,75517],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a new object of the CommaIo class.","pos":[75519,75561]},{"pos":[75613,75623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[75625,75633]},{"content":"The mode that the file should be opened in.","pos":[75636,75679]},{"content":"Specify the mode as follows:","pos":[75680,75708]},{"content":"mode","pos":[75720,75724]},{"content":"The mode that the file should be opened in.","pos":[75727,75770]},{"content":"Specify the mode as follows:","pos":[75771,75799]},{"pos":[75806,75813],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A run-time error occurs if the file is accessed by using a method that does not correspond to the current mode.","pos":[75815,75926]},{"content":"For example, an error occurs if a user tries to write to a file that is opened in read mode.","pos":[75927,76019]},{"content":"If an attacker can control input to this method, a security risk exists.","pos":[76020,76092]},{"content":"Therefore, this method runs under Code Access Security.","pos":[76093,76148]},{"content":"Calls to this method on the server require permission from the FileIOPermission class.","pos":[76149,76235]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[76236,76371]},{"pos":[76378,76386],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example uses a CommaIO object to read from the ExampleFile file.","pos":[76388,76466]},{"pos":[77208,77223],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"content":"Closes the file and, if data was written, flushes the file buffers to disk.","pos":[77225,77300]},{"pos":[77335,77342],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is not usually called directly; instead, the object is finalized by leaving the scope.","pos":[77344,77442]},{"content":"The written output is not valid until the object is finalized.","pos":[77443,77505]},{"pos":[77510,77527],"content":"Class CommaTextIo","linkify":"Class CommaTextIo","nodes":[{"content":"Class CommaTextIo","pos":[0,17]}]},{"pos":[77566,77573],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[77579,77587],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[77593,77600],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[77604,77610]},{"content":"Description","pos":[77664,77675]},{"content":"public int filePosition()","pos":[77982,78007]},{"content":"public str inFieldDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[78171,78213],"source":"public str inFieldDelimiter(\\[str value\\])"},{"content":"Determines the delimiter used to separate fields in records accessed by the <ph id=\"ph1\">\\*</ph>Io classes.","pos":[78231,78320],"source":"Determines the delimiter used to separate fields in records accessed by the \\*Io classes."},{"content":"public str inRecordDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[78360,78403],"source":"public str inRecordDelimiter(\\[str value\\])"},{"content":"Determines to the <ph id=\"ph1\">\\*</ph>Io classes what character or characters to search for to determine whether a full record has been read.","pos":[78420,78543],"source":"Determines to the \\*Io classes what character or characters to search for to determine whether a full record has been read."},{"content":"public int inRecordLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[78549,78589],"source":"public int inRecordLength(\\[int value\\])"},{"content":"Gets or sets the number of characters to read for each record in a file.","pos":[78609,78681]},{"content":"public str outFieldDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[78738,78781],"source":"public str outFieldDelimiter(\\[str value\\])"},{"content":"Gets or sets the sequence of characters that are written to a file that is used to separate the fields of a record.","pos":[78798,78913]},{"content":"public str outRecordDelimiter(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[78927,78971],"source":"public str outRecordDelimiter(\\[str value\\])"},{"content":"Gets or sets the sequence of characters that is written to the output files, which separate the records in the output files.","pos":[78987,79111]},{"content":"public container read()","pos":[79116,79139]},{"content":"Reads the next full record from the Io object.","pos":[79176,79222]},{"content":"public IO<ph id=\"ph1\">\\_</ph>Status status()","pos":[79305,79331],"source":"public IO\\_Status status()"},{"content":"Retrieves the status of the last operation that was performed on the Io object.","pos":[79365,79444]},{"content":"public boolean write(VarArg values)","pos":[79494,79529]},{"content":"Writes values of a simple type.","pos":[79554,79585]},{"content":"public boolean writeExp(container data)","pos":[79683,79722]},{"content":"Writes the content of a container to a file.","pos":[79743,79787]},{"content":"public void finalize()","pos":[79872,79894]},{"content":"Closes the file and, if data was written, flushes the file buffers to disk.","pos":[79932,80007]},{"content":"public void new(str filename, str mode, <ph id=\"ph1\">\\[</ph>int codepage<ph id=\"ph2\">\\]</ph>)","pos":[80061,80118],"source":"public void new(str filename, str mode, \\[int codepage\\])"},{"content":"Initializes a new instance of the Object class.","pos":[80121,80168]},{"pos":[80253,80272],"content":"Method filePosition","linkify":"Method filePosition","nodes":[{"content":"Method filePosition","pos":[0,19]}]},{"pos":[80310,80322],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[80328,80351],"content":"Method inFieldDelimiter","linkify":"Method inFieldDelimiter","nodes":[{"content":"Method inFieldDelimiter","pos":[0,23]}]},{"content":"Determines the delimiter used to separate fields in records accessed by the <ph id=\"ph1\">\\*</ph>Io classes.","pos":[80353,80442],"source":"Determines the delimiter used to separate fields in records accessed by the \\*Io classes."},{"pos":[80495,80505],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80507,80512]},{"pos":[80521,80533],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The delimiter used to separate fields in records accessed by the <ph id=\"ph1\">\\*</ph>Io classes.","pos":[80535,80613],"source":"The delimiter used to separate fields in records accessed by the \\*Io classes."},{"pos":[80619,80643],"content":"Method inRecordDelimiter","linkify":"Method inRecordDelimiter","nodes":[{"content":"Method inRecordDelimiter","pos":[0,24]}]},{"content":"Determines to the <ph id=\"ph1\">\\*</ph>Io classes what character or characters to search for to determine whether a full record has been read.","pos":[80645,80768],"source":"Determines to the \\*Io classes what character or characters to search for to determine whether a full record has been read."},{"pos":[80822,80832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[80834,80839]},{"pos":[80848,80860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The character or characters that indicate whether a full record has been read.","pos":[80862,80940]},{"pos":[80947,80954],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For standard text, the delimiter is a newline character.","pos":[80956,81012]},{"pos":[81018,81039],"content":"Method inRecordLength","linkify":"Method inRecordLength","nodes":[{"content":"Method inRecordLength","pos":[0,21]}]},{"content":"Gets or sets the number of characters to read for each record in a file.","pos":[81041,81113]},{"pos":[81164,81174],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81176,81181]},{"pos":[81190,81202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of characters to read for each record in the file.","pos":[81204,81265]},{"pos":[81272,81279],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For files that have a fixed-length format, use the inRecordLength property to guarantee that no more than the specified number of characters are read for each record.If the record format is overruled by a specified inRecordDelimiter property value , that is the inRecordDelimiter value is met before the fixed length is read, the record is accepted, and no additional data is read.","pos":[81281,81662]},{"content":"To guarantee that a fixed number of characters are read, set the inRecordDelimiter property value to an empty string.","pos":[81663,81780]},{"content":"When no inRecordDelimiter property value is found, the inRecordDelimiter property value is the maximum limit of characters to read.","pos":[81781,81912]},{"content":"Set the inRecordDelimiter property value to zero to disable the record length check.","pos":[81913,81997]},{"pos":[82003,82027],"content":"Method outFieldDelimiter","linkify":"Method outFieldDelimiter","nodes":[{"content":"Method outFieldDelimiter","pos":[0,24]}]},{"content":"Gets or sets the sequence of characters that are written to a file that is used to separate the fields of a record.","pos":[82029,82144]},{"pos":[82198,82208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82210,82215]},{"pos":[82224,82236],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The sequence of characters that are written to a file that is used to separate the fields of a record.","pos":[82238,82340]},{"pos":[82346,82371],"content":"Method outRecordDelimiter","linkify":"Method outRecordDelimiter","nodes":[{"content":"Method outRecordDelimiter","pos":[0,25]}]},{"content":"Gets or sets the sequence of characters that is written to the output files, which separate the records in the output files.","pos":[82373,82497]},{"pos":[82552,82562],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82564,82569]},{"pos":[82578,82590],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The sequence of characters that is written to the output files.","pos":[82592,82655]},{"pos":[82662,82669],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For standard text files, the delimiter is a newline character.","pos":[82671,82733]},{"pos":[82739,82750],"content":"Method read","linkify":"Method read","nodes":[{"content":"Method read","pos":[0,11]}]},{"content":"Reads the next full record from the Io object.","pos":[82752,82798]},{"pos":[82834,82846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that holds the next full record from the Io object.","pos":[82848,82911]},{"pos":[82918,82925],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The definition of the next full record is controlled by the inFieldDelimiter, inRecordDelimiter, and inRecordLength method properties.","pos":[82927,83061]},{"content":"The record is returned as a container.","pos":[83062,83100]},{"content":"Each entry in the container equals one field in the record.","pos":[83101,83160]},{"content":"Each specialized Io class has default settings for the inFieldDelimiter, inRecordDelimiter, and inRecordLength properties.","pos":[83161,83283]},{"content":"These default settings enable input and output in the most common formats.","pos":[83284,83358]},{"content":"However, you might have to adjust these settings to support the desired format.","pos":[83359,83438]},{"pos":[83444,83457],"content":"Method status","linkify":"Method status","nodes":[{"content":"Method status","pos":[0,13]}]},{"content":"Retrieves the status of the last operation that was performed on the Io object.","pos":[83459,83538]},{"pos":[83576,83588],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The status of the last operation, as an IO<ph id=\"ph1\">\\_</ph>Status system enumeration value.","pos":[83590,83666],"source":"The status of the last operation, as an IO\\_Status system enumeration value."},{"pos":[83673,83680],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The range of IO<ph id=\"ph1\">\\_</ph>Status values that can be returned varies, depending on the Io class.","pos":[83682,83768],"source":"The range of IO\\_Status values that can be returned varies, depending on the Io class."},{"pos":[83774,83786],"content":"Method write","linkify":"Method write","nodes":[{"content":"Method write","pos":[0,12]}]},{"content":"Writes values of a simple type.","pos":[83788,83819]},{"pos":[83867,83877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"values","pos":[83879,83885]},{"content":"A value of a simple type.","pos":[83888,83913]},{"content":"The simple types are string, integer, real, enum, and date.","pos":[83914,83973]},{"pos":[83980,83992],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the write operation is successful; otherwise, false.","pos":[83994,84054]},{"content":"If the write operation fails, you can use the status method to determine the cause.","pos":[84055,84138]},{"pos":[84145,84152],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method accepts a variable number of arguments.","pos":[84154,84204]},{"content":"Each value that is specified is put into the output record as a field.","pos":[84205,84275]},{"content":"The first argument is the first field, the second argument is the second field, and so on.","pos":[84276,84366]},{"content":"Fields are separated by the delimiter that is specified in the outFieldDelimiter method.","pos":[84367,84455]},{"content":"Records are separated by the delimiter that is specified in the outRecordDelimiter method.","pos":[84456,84546]},{"content":"To write complete containers, use the writeExp method.","pos":[84547,84601]},{"pos":[84607,84622],"content":"Method writeExp","linkify":"Method writeExp","nodes":[{"content":"Method writeExp","pos":[0,15]}]},{"content":"Writes the content of a container to a file.","pos":[84624,84668]},{"pos":[84720,84730],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[84732,84736]},{"content":"The container that holds data for the record.","pos":[84739,84784]},{"pos":[84791,84803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the operation is successful; otherwise, false.","pos":[84805,84859]},{"pos":[84866,84873],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this method returns false, check the status method for the cause.","pos":[84875,84943]},{"content":"The entries in the container are treated as fields, and the container is treated as a full record.","pos":[84944,85042]},{"content":"The field separator is defined in the outFieldDelimiter method.","pos":[85043,85106]},{"content":"The record separator is defined in the outRecordDelimiter method.","pos":[85107,85172]},{"pos":[85178,85193],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"content":"Closes the file and, if data was written, flushes the file buffers to disk.","pos":[85195,85270]},{"pos":[85305,85312],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is not usually called directly.","pos":[85314,85357]},{"content":"Instead, the object is usually finalized by leaving the scope.","pos":[85358,85420]},{"content":"Written output is not valid until the object is finalized.","pos":[85421,85479]},{"pos":[85485,85495],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[85497,85544]},{"pos":[85612,85622],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filename","pos":[85624,85632]},{"content":"mode","pos":[85646,85650]},{"content":"codepage","pos":[85664,85672]},{"pos":[85681,85688],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If an attacker can control input to the new method, a security risk exists.","pos":[85690,85765]},{"content":"Therefore, this method runs under Code Access Security.","pos":[85766,85821]},{"content":"Calls to this method on the server require permission from the FileIOPermission class.","pos":[85822,85908]},{"content":"Make sure that the user has development privileges by setting the security key to SysDevelopment on the control that calls this method.","pos":[85909,86044]},{"pos":[86049,86073],"content":"Class CompileOutputInfos","linkify":"Class CompileOutputInfos","nodes":[{"content":"Class CompileOutputInfos","pos":[0,24]}]},{"pos":[86123,86130],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[86136,86144],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[86150,86157],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[86161,86167]},{"content":"Description","pos":[86200,86211]},{"content":"::public static void NotifyChanges()","pos":[86271,86307]},{"pos":[86329,86349],"content":"Method NotifyChanges","linkify":"Method NotifyChanges","nodes":[{"content":"Method NotifyChanges","pos":[0,20]}]},{"pos":[86394,86410],"content":"Class COMVariant","linkify":"Class COMVariant","nodes":[{"content":"Class COMVariant","pos":[0,16]}]},{"content":"The COMVariant class is used as a generic class that can store different types of data.","pos":[86448,86535]},{"content":"The class is used to pass arguments to the methods or properties of a COM (Component Object Model) Automation object and is used with the COM and COMDispFunction classes.","pos":[86536,86706]},{"pos":[86712,86719],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The data type of the COMVariant object can be set by:","pos":[86721,86774]},{"content":"The new method","pos":[86780,86794]},{"content":"The variantType method","pos":[86799,86821]},{"content":"The createFrom…","pos":[86826,86841]},{"content":"methods.","pos":[86842,86850]},{"content":"For example, the createFromBoolean method creates a COMVariant object of type VT<ph id=\"ph1\">\\_</ph>BOOL (= Boolean).","pos":[86851,86950],"source":" For example, the createFromBoolean method creates a COMVariant object of type VT\\_BOOL (= Boolean)."},{"content":"The property methods.","pos":[86955,86976]},{"content":"For example, if you set a new value by using the boolean property, and the object is not of type VT<ph id=\"ph1\">\\_</ph>BOOL (= Boolean), it will be changed to this type.","pos":[86977,87128],"source":" For example, if you set a new value by using the boolean property, and the object is not of type VT\\_BOOL (= Boolean), it will be changed to this type."},{"content":"The value of the data type is set by one of the property methods.","pos":[87130,87195]},{"content":"For example, the value of a COMVariant object of type VT<ph id=\"ph1\">\\_</ph>BOOL is set by the boolean method.","pos":[87196,87288],"source":" For example, the value of a COMVariant object of type VT\\_BOOL is set by the boolean method."},{"content":"The possible data types and the methods that set their values are listed in the Remarks section.","pos":[87289,87385]},{"content":"The data types that the COMVariant class supports are not X++ data types, but data types defined by the COM Automation standard.","pos":[87386,87514]},{"content":"The COMVariant class is based on the VARIANT structure found in the Win32 SDK.","pos":[87515,87593]},{"content":"For more information see the Win32 SDK documentation.","pos":[87594,87647]},{"content":"The property methods of the COMVariant class map to the COMVariantType values in the following way:","pos":[87648,87747]},{"content":"boolean","pos":[87999,88006]},{"content":"VT<ph id=\"ph1\">\\_</ph>BOOL","pos":[88013,88021],"source":"VT\\_BOOL"},{"content":"bStr","pos":[88123,88127]},{"content":"VT<ph id=\"ph1\">\\_</ph>BSTR","pos":[88137,88145],"source":"VT\\_BSTR"},{"content":"String data type","pos":[88153,88169]},{"content":"byte","pos":[88247,88251]},{"content":"VT<ph id=\"ph1\">\\_</ph>UI1","pos":[88261,88268],"source":"VT\\_UI1"},{"content":"char","pos":[88371,88375]},{"content":"VT<ph id=\"ph1\">\\_</ph>I1","pos":[88385,88391],"source":"VT\\_I1"},{"content":"currency","pos":[88495,88503]},{"content":"VT<ph id=\"ph1\">\\_</ph>CY","pos":[88509,88515],"source":"VT\\_CY"},{"content":"date, time","pos":[88619,88629]},{"content":"VT<ph id=\"ph1\">\\_</ph>DATE","pos":[88633,88641],"source":"VT\\_DATE"},{"content":"Date/time data type; both properties must be set.","pos":[88649,88698]},{"content":"decimal","pos":[88743,88750]},{"content":"VT<ph id=\"ph1\">\\_</ph>DECIMAL","pos":[88757,88768],"source":"VT\\_DECIMAL"},{"content":"double","pos":[88867,88873]},{"content":"VT<ph id=\"ph1\">\\_</ph>R8","pos":[88881,88887],"source":"VT\\_R8"},{"content":"float","pos":[88991,88996]},{"content":"VT<ph id=\"ph1\">\\_</ph>R4","pos":[89005,89011],"source":"VT\\_R4"},{"content":"iDispatch","pos":[89115,89124]},{"content":"VT<ph id=\"ph1\">\\_</ph>DISPATCH","pos":[89129,89141],"source":"VT\\_DISPATCH"},{"content":"int, long","pos":[89239,89248]},{"content":"VT<ph id=\"ph1\">\\_</ph>I4","pos":[89253,89259],"source":"VT\\_I4"},{"content":"VT<ph id=\"ph1\">\\_</ph>I4 is used for both the int and the long data types","pos":[89269,89324],"source":"VT\\_I4 is used for both the int and the long data types"},{"content":"iUnknown","pos":[89363,89371]},{"content":"VT<ph id=\"ph1\">\\_</ph>UNKNOWN","pos":[89377,89388],"source":"VT\\_UNKNOWN"},{"content":"sCode","pos":[89487,89492]},{"content":"VT<ph id=\"ph1\">\\_</ph>ERROR","pos":[89501,89510],"source":"VT\\_ERROR"},{"content":"The scode data type is a COM data type that is equivalent to the Win32 HRESULT data type.","pos":[89517,89606]},{"content":"short","pos":[89611,89616]},{"content":"VT<ph id=\"ph1\">\\_</ph>I2","pos":[89625,89631],"source":"VT\\_I2"},{"content":"uInt, uLong","pos":[89735,89746]},{"content":"VT<ph id=\"ph1\">\\_</ph>UI4","pos":[89749,89756],"source":"VT\\_UI4"},{"content":"VT<ph id=\"ph1\">\\_</ph>UI4 is used for both the uInt and the uLong data types","pos":[89765,89823],"source":"VT\\_UI4 is used for both the uInt and the uLong data types"},{"content":"uShort","pos":[89859,89865]},{"content":"VT<ph id=\"ph1\">\\_</ph>UI2","pos":[89873,89880],"source":"VT\\_UI2"},{"content":"variant","pos":[89983,89990]},{"content":"VT<ph id=\"ph1\">\\_</ph>VARIANT","pos":[89997,90008],"source":"VT\\_VARIANT"},{"content":"safeArray","pos":[90107,90116]},{"content":"VT<ph id=\"ph1\">\\_</ph>SAFEARRAY","pos":[90121,90134],"source":"VT\\_SAFEARRAY"},{"content":"Array data type","pos":[90137,90152]},{"pos":[90234,90242],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example instantiates a COM object that exposes a method called multiply which multiplies two floating point numbers passed in as COMVariant parameters.","pos":[90244,90409]},{"pos":[91339,91346],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[91350,91356]},{"content":"Description","pos":[91458,91469]},{"content":"public boolean boolean(<ph id=\"ph1\">\\[</ph>boolean newValue<ph id=\"ph2\">\\]</ph>)","pos":[91918,91962],"source":"public boolean boolean(\\[boolean newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>BOOL data type.","pos":[92026,92098],"source":"Gets or sets the value of a COMVariant object of the VT\\_BOOL data type."},{"content":"public str bStr(<ph id=\"ph1\">\\[</ph>str newValue<ph id=\"ph2\">\\]</ph>)","pos":[92202,92235],"source":"public str bStr(\\[str newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>BSTR data type.","pos":[92310,92382],"source":"Gets or sets the value of a COMVariant object of the VT\\_BSTR data type."},{"content":"public int byte(<ph id=\"ph1\">\\[</ph>int newValue<ph id=\"ph2\">\\]</ph>)","pos":[92486,92519],"source":"public int byte(\\[int newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UI1 data type.","pos":[92594,92665],"source":"Gets or sets the value of a COMVariant object of the VT\\_UI1 data type."},{"content":"public int char(<ph id=\"ph1\">\\[</ph>int newValue<ph id=\"ph2\">\\]</ph>)","pos":[92770,92803],"source":"public int char(\\[int newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>I1 data type.","pos":[92878,92948],"source":"Gets or sets the value of a COMVariant object of the VT\\_I1 data type."},{"content":"public container container(<ph id=\"ph1\">\\[</ph>container newValue<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>COMVariantType newType<ph id=\"ph4\">\\]</ph>)","pos":[93054,93132],"source":"public container container(\\[container newValue\\], \\[COMVariantType newType\\])"},{"content":"Gets or sets the value of a COMVariant object of the container data type.","pos":[93162,93235]},{"content":"public Real currency(<ph id=\"ph1\">\\[</ph>Real newValue<ph id=\"ph2\">\\]</ph>)","pos":[93338,93377],"source":"public Real currency(\\[Real newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>CY data type.","pos":[93446,93516],"source":"Gets or sets the value of a COMVariant object of the VT\\_CY data type."},{"content":"public Date date(<ph id=\"ph1\">\\[</ph>Date newValue<ph id=\"ph2\">\\]</ph>)","pos":[93622,93657],"source":"public Date date(\\[Date newValue\\])"},{"content":"Gets or sets the date part of the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>DATE data type.","pos":[93730,93819],"source":"Gets or sets the date part of the value of a COMVariant object of the VT\\_DATE data type."},{"content":"public Real decimal(<ph id=\"ph1\">\\[</ph>Real newValue<ph id=\"ph2\">\\]</ph>)","pos":[93906,93944],"source":"public Real decimal(\\[Real newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>DECIMAL data type.","pos":[94014,94089],"source":"Gets or sets the value of a COMVariant object of the VT\\_DECIMAL data type."},{"content":"public Real double(<ph id=\"ph1\">\\[</ph>Real newValue<ph id=\"ph2\">\\]</ph>)","pos":[94190,94227],"source":"public Real double(\\[Real newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>R8 data type.","pos":[94298,94368],"source":"Gets or sets the value of a COMVariant object of the VT\\_R8 data type."},{"content":"public Real float(<ph id=\"ph1\">\\[</ph>Real newValue<ph id=\"ph2\">\\]</ph>)","pos":[94474,94510],"source":"public Real float(\\[Real newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>R4 data type.","pos":[94582,94652],"source":"Gets or sets the value of a COMVariant object of the VT\\_R4 data type."},{"content":"public ComInterface iDispatch(<ph id=\"ph1\">\\[</ph>ComInterface newValue<ph id=\"ph2\">\\]</ph>)","pos":[94758,94814],"source":"public ComInterface iDispatch(\\[ComInterface newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>DISPATCH data type.","pos":[94866,94942],"source":"Gets or sets the value of a COMVariant object of the VT\\_DISPATCH data type."},{"content":"public int int(<ph id=\"ph1\">\\[</ph>int newValue<ph id=\"ph2\">\\]</ph>)","pos":[95042,95074],"source":"public int int(\\[int newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>I4 data type.","pos":[95150,95220],"source":"Gets or sets the value of a COMVariant object of the VT\\_I4 data type."},{"content":"public ComInterface iUnknown(<ph id=\"ph1\">\\[</ph>ComInterface newValue<ph id=\"ph2\">\\]</ph>)","pos":[95326,95381],"source":"public ComInterface iUnknown(\\[ComInterface newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UNKNOWN (IUnknown) data type.","pos":[95434,95520],"source":"Gets or sets the value of a COMVariant object of the VT\\_UNKNOWN (IUnknown) data type."},{"content":"public int long(<ph id=\"ph1\">\\[</ph>int newValue<ph id=\"ph2\">\\]</ph>)","pos":[95610,95643],"source":"public int long(\\[int newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>I4 data type.","pos":[95718,95788],"source":"Gets or sets the value of a COMVariant object of the VT\\_I4 data type."},{"content":"public Int64 longLong(<ph id=\"ph1\">\\[</ph>Int64 newValue<ph id=\"ph2\">\\]</ph>)","pos":[95894,95935],"source":"public Int64 longLong(\\[Int64 newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>I8 (longlong) data type.","pos":[96002,96083],"source":"Gets or sets the value of a COMVariant object of the VT\\_I8 (longlong) data type."},{"content":"public Array safeArray(<ph id=\"ph1\">\\[</ph>Array newValue<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>COMVariantType newType<ph id=\"ph4\">\\]</ph>)","pos":[96178,96248],"source":"public Array safeArray(\\[Array newValue\\], \\[COMVariantType newType\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>SAFEARRAY data type.","pos":[96286,96363],"source":"Gets or sets the value of a COMVariant object of the VT\\_SAFEARRAY data type."},{"content":"public int sCode(<ph id=\"ph1\">\\[</ph>int newValue<ph id=\"ph2\">\\]</ph>)","pos":[96462,96496],"source":"public int sCode(\\[int newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>ERROR data type.","pos":[96570,96643],"source":"Gets or sets the value of a COMVariant object of the VT\\_ERROR data type."},{"content":"public int short(<ph id=\"ph1\">\\[</ph>int newValue<ph id=\"ph2\">\\]</ph>)","pos":[96746,96780],"source":"public int short(\\[int newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>I2 (short) data type.","pos":[96854,96932],"source":"Gets or sets the value of a COMVariant object of the VT\\_I2 (short) data type."},{"content":"public int time(<ph id=\"ph1\">\\[</ph>int newValue<ph id=\"ph2\">\\]</ph>)","pos":[97030,97063],"source":"public int time(\\[int newValue\\])"},{"content":"Gets or sets the time part of the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>DATE data type.","pos":[97138,97227],"source":"Gets or sets the time part of the value of a COMVariant object of the VT\\_DATE data type."},{"content":"public str toString()","pos":[97314,97335]},{"content":"Creates a string representation of a COMVariant object.","pos":[97422,97477]},{"content":"This string representation includes the value and type of the object.","pos":[97478,97547]},{"content":"public int uInt(<ph id=\"ph1\">\\[</ph>int newValue<ph id=\"ph2\">\\]</ph>)","pos":[97598,97631],"source":"public int uInt(\\[int newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UI4 data type.","pos":[97706,97777],"source":"Gets or sets the value of a COMVariant object of the VT\\_UI4 data type."},{"content":"public int uLong(<ph id=\"ph1\">\\[</ph>int newValue<ph id=\"ph2\">\\]</ph>)","pos":[97882,97916],"source":"public int uLong(\\[int newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UI4 (unsigned long) data type.","pos":[97990,98077],"source":"Gets or sets the value of a COMVariant object of the VT\\_UI4 (unsigned long) data type."},{"content":"public Int64 uLongLong(<ph id=\"ph1\">\\[</ph>Int64 newValue<ph id=\"ph2\">\\]</ph>)","pos":[98166,98208],"source":"public Int64 uLongLong(\\[Int64 newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UI8 (unsigned longlong) data type.","pos":[98274,98365],"source":"Gets or sets the value of a COMVariant object of the VT\\_UI8 (unsigned longlong) data type."},{"content":"public int uShort(<ph id=\"ph1\">\\[</ph>int newValue<ph id=\"ph2\">\\]</ph>)","pos":[98450,98485],"source":"public int uShort(\\[int newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UI2 data type.","pos":[98558,98629],"source":"Gets or sets the value of a COMVariant object of the VT\\_UI2 data type."},{"content":"public COMVariant variant(<ph id=\"ph1\">\\[</ph>COMVariant newValue<ph id=\"ph2\">\\]</ph>)","pos":[98734,98784],"source":"public COMVariant variant(\\[COMVariant newValue\\])"},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>VARIANT (variant) data type.","pos":[98842,98927],"source":"Gets or sets the value of a COMVariant object of the VT\\_VARIANT (variant) data type."},{"content":"public COMVariantInOut variantInOutFlag(<ph id=\"ph1\">\\[</ph>COMVariantInOut newValue<ph id=\"ph2\">\\]</ph>)","pos":[99018,99087],"source":"public COMVariantInOut variantInOutFlag(\\[COMVariantInOut newValue\\])"},{"content":"Sets or returns the InOutFlag setting for a COMVariant object.","pos":[99126,99188]},{"content":"public COMVariantType variantType(<ph id=\"ph1\">\\[</ph>COMVariantType newValue<ph id=\"ph2\">\\]</ph>)","pos":[99302,99364],"source":"public COMVariantType variantType(\\[COMVariantType newValue\\])"},{"content":"Queries a COMVariant object for its variant data type or changes the data type.","pos":[99410,99489]},{"content":"::public static COMVariant createDateFromYMD(int year, int month, int day, <ph id=\"ph1\">\\[</ph>COMVariantInOut inOutFlag<ph id=\"ph2\">\\]</ph>)","pos":[99586,99691],"source":"::public static COMVariant createDateFromYMD(int year, int month, int day, \\[COMVariantInOut inOutFlag\\])"},{"content":"Creates a new COMVariant object and initializes it with a date value in one operation.","pos":[99694,99780]},{"content":"::public static COMVariant createFromArray(Array value, <ph id=\"ph1\">\\[</ph>COMVariantInOut inOutFlag<ph id=\"ph2\">\\]</ph>)","pos":[99870,99956],"source":"::public static COMVariant createFromArray(Array value, \\[COMVariantInOut inOutFlag\\])"},{"content":"Creates a new COMVariant object and initializes it with an array in one operation.","pos":[99978,100060]},{"content":"::public static COMVariant createFromBoolean(boolean value, <ph id=\"ph1\">\\[</ph>COMVariantInOut inOutFlag<ph id=\"ph2\">\\]</ph>)","pos":[100154,100244],"source":"::public static COMVariant createFromBoolean(boolean value, \\[COMVariantInOut inOutFlag\\])"},{"content":"Creates a new COMVariant object and initializes it with a Boolean value in one operation.","pos":[100262,100351]},{"content":"::public static COMVariant createFromCOM(COM value, <ph id=\"ph1\">\\[</ph>COMVariantInOut inOutFlag<ph id=\"ph2\">\\]</ph>)","pos":[100438,100520],"source":"::public static COMVariant createFromCOM(COM value, \\[COMVariantInOut inOutFlag\\])"},{"content":"Creates a new COMVariant object and initializes it with a COM class in one operation.","pos":[100546,100631]},{"content":"::public static COMVariant createFromDate(Date value, <ph id=\"ph1\">\\[</ph>COMVariantInOut inOutFlag<ph id=\"ph2\">\\]</ph>)","pos":[100722,100806],"source":"::public static COMVariant createFromDate(Date value, \\[COMVariantInOut inOutFlag\\])"},{"content":"Creates a new COMVariant object and initializes it with a date value in one operation.","pos":[100830,100916]},{"content":"::public static COMVariant createFromDateAndTime(Date date, int time, <ph id=\"ph1\">\\[</ph>COMVariantInOut inOutFlag<ph id=\"ph2\">\\]</ph>)","pos":[101006,101106],"source":"::public static COMVariant createFromDateAndTime(Date date, int time, \\[COMVariantInOut inOutFlag\\])"},{"content":"Creates a new COMVariant object and initializes it with a date and time in one operation.","pos":[101114,101203]},{"content":"::public static COMVariant createFromInt(int value, <ph id=\"ph1\">\\[</ph>COMVariantInOut inOutFlag<ph id=\"ph2\">\\]</ph>)","pos":[101290,101372],"source":"::public static COMVariant createFromInt(int value, \\[COMVariantInOut inOutFlag\\])"},{"content":"Creates a new COMVariant object and initializes it with an integer value in one operation.","pos":[101398,101488]},{"content":"::public static COMVariant createFromInt64(Int64 value, <ph id=\"ph1\">\\[</ph>COMVariantInOut inOutFlag<ph id=\"ph2\">\\]</ph>)","pos":[101574,101660],"source":"::public static COMVariant createFromInt64(Int64 value, \\[COMVariantInOut inOutFlag\\])"},{"content":"Creates a new COMVariant object and initializes it with an int64 value (longLong or uLongLong) in one operation.","pos":[101682,101794]},{"content":"::public static COMVariant createFromReal(Real value, <ph id=\"ph1\">\\[</ph>COMVariantInOut inOutFlag<ph id=\"ph2\">\\]</ph>)","pos":[101858,101942],"source":"::public static COMVariant createFromReal(Real value, \\[COMVariantInOut inOutFlag\\])"},{"content":"Creates a new COMVariant object and initializes it with a real value in one operation.","pos":[101966,102052]},{"content":"::public static COMVariant createFromStr(str value, <ph id=\"ph1\">\\[</ph>COMVariantInOut inOutFlag<ph id=\"ph2\">\\]</ph>)","pos":[102142,102224],"source":"::public static COMVariant createFromStr(str value, \\[COMVariantInOut inOutFlag\\])"},{"content":"Creates a new COMVariant object and initializes it with a string in one operation.","pos":[102250,102332]},{"content":"::public static COMVariant createFromTime(int value, <ph id=\"ph1\">\\[</ph>COMVariantInOut inOutFlag<ph id=\"ph2\">\\]</ph>)","pos":[102426,102509],"source":"::public static COMVariant createFromTime(int value, \\[COMVariantInOut inOutFlag\\])"},{"content":"Creates a new COMVariant object and initializes it with a time value in one operation.","pos":[102534,102620]},{"content":"::public static COMVariant createFromUtcDateTime(DateTime value, <ph id=\"ph1\">\\[</ph>COMVariantInOut inOutFlag<ph id=\"ph2\">\\]</ph>)","pos":[102710,102805],"source":"::public static COMVariant createFromUtcDateTime(DateTime value, \\[COMVariantInOut inOutFlag\\])"},{"content":"::public static COMVariant createNoValue()","pos":[102994,103036]},{"content":"Creates a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>ERROR variant type with no value.","pos":[103102,103174],"source":"Creates a COMVariant object of the VT\\_ERROR variant type with no value."},{"content":"public void new(<ph id=\"ph1\">\\[</ph>COMVariantInOut inOutFlag<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>COMVariantType type<ph id=\"ph4\">\\]</ph>)","pos":[103278,103349],"source":"public void new(\\[COMVariantInOut inOutFlag\\], \\[COMVariantType type\\])"},{"content":"Creates a COMVariant object that can be used to pass arguments to the methods or properties of a COM Automation object.","pos":[103386,103505]},{"content":"public void noValue()","pos":[103562,103583]},{"content":"Deletes the contents of an existing COMVariant object and enables it to act as an unspecified argument when it is used in the COMDispFunction.call method or the COM class.","pos":[103670,103841]},{"content":"public void finalize()","pos":[103846,103868]},{"content":"Not implemented.","pos":[103954,103970]},{"content":"You can override this method if you need to explicitly destruct an object.","pos":[103971,104045]},{"pos":[104133,104147],"content":"Method boolean","linkify":"Method boolean","nodes":[{"content":"Method boolean","pos":[0,14]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>BOOL data type.","pos":[104149,104221],"source":"Gets or sets the value of a COMVariant object of the VT\\_BOOL data type."},{"pos":[104276,104286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[104288,104296]},{"content":"The new value; optional.","pos":[104299,104323]},{"pos":[104330,104342],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[104344,104362]},{"pos":[104369,104376],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[104378,104529]},{"content":"A COMVariant object has a Boolean type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>BOOL.","pos":[104530,104621],"source":" A COMVariant object has a Boolean type if its data type is set to COMVariantType::VT\\_BOOL."},{"content":"The COM Boolean data type may also be referred to as \"VARIANT<ph id=\"ph1\">\\_</ph>BOOL\".","pos":[104622,104691],"source":" The COM Boolean data type may also be referred to as \"VARIANT\\_BOOL\"."},{"pos":[104698,104706],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>BOOL and sets the value to true.","pos":[104708,104806],"source":"The following example creates a new COMVariant object of type VT\\_BOOL and sets the value to true."},{"pos":[105016,105027],"content":"Method bStr","linkify":"Method bStr","nodes":[{"content":"Method bStr","pos":[0,11]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>BSTR data type.","pos":[105029,105101],"source":"Gets or sets the value of a COMVariant object of the VT\\_BSTR data type."},{"pos":[105145,105155],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[105157,105165]},{"content":"The new value; optional.","pos":[105168,105192]},{"pos":[105199,105211],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current string value.","pos":[105213,105238]},{"pos":[105245,105252],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[105254,105405]},{"content":"A COMVariant object has a string data type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>BSTR.","pos":[105406,105501],"source":" A COMVariant object has a string data type if its data type is set to COMVariantType::VT\\_BSTR."},{"content":"The BStr data type is a COM data type that is used for handling strings.","pos":[105502,105574]},{"pos":[105581,105589],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>BSTR, and sets the value to \"Hello World.\"","pos":[105591,105699],"source":"The following example creates a new COMVariant object of type VT\\_BSTR, and sets the value to \"Hello World.\""},{"pos":[105923,105934],"content":"Method byte","linkify":"Method byte","nodes":[{"content":"Method byte","pos":[0,11]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UI1 data type.","pos":[105936,106007],"source":"Gets or sets the value of a COMVariant object of the VT\\_UI1 data type."},{"pos":[106051,106061],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[106063,106071]},{"content":"The new value; optional.","pos":[106074,106098]},{"pos":[106105,106117],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[106119,106137]},{"pos":[106144,106151],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[106153,106304]},{"content":"A COMVariant object has a byte data type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>UI1.","pos":[106305,106397],"source":" A COMVariant object has a byte data type if its data type is set to COMVariantType::VT\\_UI1."},{"content":"You can also use \"unsigned char\" to refer to the COM byte data type.","pos":[106398,106466]},{"pos":[106473,106481],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UI1 type and sets the value to 123.","pos":[106483,106583],"source":"The following example creates a new COMVariant object of the VT\\_UI1 type and sets the value to 123."},{"pos":[106789,106800],"content":"Method char","linkify":"Method char","nodes":[{"content":"Method char","pos":[0,11]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>I1 data type.","pos":[106802,106872],"source":"Gets or sets the value of a COMVariant object of the VT\\_I1 data type."},{"pos":[106916,106926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[106928,106936]},{"content":"The new value; optional.","pos":[106939,106963]},{"pos":[106970,106982],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[106984,107002]},{"pos":[107009,107016],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[107018,107169]},{"content":"A COMVariant object has a char data type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>I1.","pos":[107170,107261],"source":" A COMVariant object has a char data type if its data type is set to COMVariantType::VT\\_I1."},{"pos":[107268,107276],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>I1 and sets the value tothe numeric value of A, which is 65.","pos":[107278,107404],"source":"The following example creates a new COMVariant object of type VT\\_I1 and sets the value tothe numeric value of A, which is 65."},{"pos":[107622,107638],"content":"Method container","linkify":"Method container","nodes":[{"content":"Method container","pos":[0,16]}]},{"content":"Gets or sets the value of a COMVariant object of the container data type.","pos":[107640,107713]},{"pos":[107800,107810],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[107812,107820]},{"content":"The type of the new container; optional.","pos":[107823,107863]},{"content":"The default is for the container to store integers.","pos":[107864,107915]},{"content":"newType","pos":[107927,107934]},{"content":"The type of the new container; optional.","pos":[107937,107977]},{"content":"The default is for the container to store integers.","pos":[107978,108029]},{"pos":[108036,108048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current container.","pos":[108050,108072]},{"pos":[108079,108086],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The possible values for the newType parameter are a subset of the values that are supplied by the COMVariantType system enum:","pos":[108088,108213]},{"content":"VT<ph id=\"ph1\">\\_</ph>I2","pos":[108219,108225],"source":"VT\\_I2"},{"content":"VT<ph id=\"ph1\">\\_</ph>I4","pos":[108230,108236],"source":"VT\\_I4"},{"content":"VT<ph id=\"ph1\">\\_</ph>R4","pos":[108241,108247],"source":"VT\\_R4"},{"content":"VT<ph id=\"ph1\">\\_</ph>R8","pos":[108252,108258],"source":"VT\\_R8"},{"content":"VT<ph id=\"ph1\">\\_</ph>CY","pos":[108263,108269],"source":"VT\\_CY"},{"content":"VT<ph id=\"ph1\">\\_</ph>DATE","pos":[108274,108282],"source":"VT\\_DATE"},{"content":"VT<ph id=\"ph1\">\\_</ph>BSTR","pos":[108287,108295],"source":"VT\\_BSTR"},{"content":"VT<ph id=\"ph1\">\\_</ph>ERROR","pos":[108300,108309],"source":"VT\\_ERROR"},{"content":"VT<ph id=\"ph1\">\\_</ph>BOOL","pos":[108314,108322],"source":"VT\\_BOOL"},{"content":"VT<ph id=\"ph1\">\\_</ph>DECIMAL","pos":[108327,108338],"source":"VT\\_DECIMAL"},{"content":"VT<ph id=\"ph1\">\\_</ph>I1","pos":[108343,108349],"source":"VT\\_I1"},{"content":"VT<ph id=\"ph1\">\\_</ph>UI1","pos":[108354,108361],"source":"VT\\_UI1"},{"content":"VT<ph id=\"ph1\">\\_</ph>UI2","pos":[108366,108373],"source":"VT\\_UI2"},{"content":"VT<ph id=\"ph1\">\\_</ph>UI4","pos":[108378,108385],"source":"VT\\_UI4"},{"content":"VT<ph id=\"ph1\">\\_</ph>I8","pos":[108390,108396],"source":"VT\\_I8"},{"content":"VT<ph id=\"ph1\">\\_</ph>UI8","pos":[108401,108408],"source":"VT\\_UI8"},{"content":"VT<ph id=\"ph1\">\\_</ph>INT","pos":[108413,108420],"source":"VT\\_INT"},{"content":"VT<ph id=\"ph1\">\\_</ph>UINT","pos":[108425,108433],"source":"VT\\_UINT"},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[108435,108586]},{"content":"When a container is stored in a COMVariant object, the binary representation of the container is stored in a binary array (see the COMVariant.safeArray method).","pos":[108587,108747]},{"content":"The container property is useful when you need to store data in a database COM object and then later read the data back into Finance and Operations without the COM object processing the data.","pos":[108748,108939]},{"content":"The container property is an advanced property of the COMVariant class.","pos":[108940,109011]},{"content":"It should be used with caution because the content of the binary array that the container is stored in, inside the COMVariant object, must not be changed by any COM object.","pos":[109012,109184]},{"pos":[109191,109199],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type container.","pos":[109201,109273]},{"content":"The data in the container is passed to, and used by, a database COM object.","pos":[109274,109349]},{"content":"Note The code in the following section contains a hypothetical COM object MyDatabaseCOM.Object\" and will therefore not run in Finance and Operations, unless such an object is created outside Finance and Operations.","pos":[109350,109564]},{"pos":[110538,110553],"content":"Method currency","linkify":"Method currency","nodes":[{"content":"Method currency","pos":[0,15]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>CY data type.","pos":[110555,110625],"source":"Gets or sets the value of a COMVariant object of the VT\\_CY data type."},{"pos":[110675,110685],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[110687,110695]},{"content":"The new value; optional.","pos":[110698,110722]},{"pos":[110729,110741],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[110743,110761]},{"pos":[110768,110775],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[110777,110928]},{"content":"A COMVariant object has a currency data type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>CY.","pos":[110929,111024],"source":" A COMVariant object has a currency data type if its data type is set to COMVariantType::VT\\_CY."},{"content":"The currency data type is a COM data type that is optimized for currency values.","pos":[111025,111105]},{"content":"It is a real number with four decimal places.","pos":[111106,111151]},{"content":"Sometimes \"CY\" is also used to refer to the COM currency data type.","pos":[111152,111219]},{"pos":[111226,111234],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>CY and sets the value to 123.4567.","pos":[111236,111336],"source":"The following example creates a new COMVariant object of type VT\\_CY and sets the value to 123.4567."},{"pos":[111550,111561],"content":"Method date","linkify":"Method date","nodes":[{"content":"Method date","pos":[0,11]}]},{"content":"Gets or sets the date part of the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>DATE data type.","pos":[111563,111652],"source":"Gets or sets the date part of the value of a COMVariant object of the VT\\_DATE data type."},{"pos":[111698,111708],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[111710,111718]},{"content":"The new value; optional.","pos":[111721,111745]},{"pos":[111752,111764],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[111766,111784]},{"pos":[111791,111798],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[111800,111951]},{"content":"A COMVariant object has a date and time data type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>DATE.","pos":[111952,112054],"source":" A COMVariant object has a date and time data type if its data type is set to COMVariantType::VT\\_DATE."},{"content":"When you set the value of the object, you must set the time part of the value in addition to the date.","pos":[112055,112157]},{"content":"To set the time part of the value, use the time property.","pos":[112158,112215]},{"pos":[112222,112230],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object of type VT<ph id=\"ph1\">\\_</ph>DATE and sets the date part of the value to 24 December 1998, and the time part of the value to 13.24.","pos":[112232,112396],"source":"The following example creates a COMVariant object of type VT\\_DATE and sets the date part of the value to 24 December 1998, and the time part of the value to 13.24."},{"pos":[112668,112682],"content":"Method decimal","linkify":"Method decimal","nodes":[{"content":"Method decimal","pos":[0,14]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>DECIMAL data type.","pos":[112684,112759],"source":"Gets or sets the value of a COMVariant object of the VT\\_DECIMAL data type."},{"pos":[112808,112818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[112820,112828]},{"content":"The new value; optional.","pos":[112831,112855]},{"pos":[112862,112874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[112876,112894]},{"pos":[112901,112908],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[112910,113061]},{"content":"A COMVariant object has a decimal type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>DECIMAL.","pos":[113062,113156],"source":" A COMVariant object has a decimal type if its data type is set to COMVariantType::VT\\_DECIMAL."},{"content":"The decimal data type is a COM data type that provides size and scale for a number.","pos":[113157,113240]},{"content":"There is no parallel to the decimal data type in X++.","pos":[113241,113294]},{"pos":[113301,113309],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>DECIMAL and sets the value to 123.456.","pos":[113311,113415],"source":"The following example creates a new COMVariant object of type VT\\_DECIMAL and sets the value to 123.456."},{"pos":[113632,113645],"content":"Method double","linkify":"Method double","nodes":[{"content":"Method double","pos":[0,13]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>R8 data type.","pos":[113647,113717],"source":"Gets or sets the value of a COMVariant object of the VT\\_R8 data type."},{"pos":[113765,113775],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[113777,113785]},{"content":"The new value; optional.","pos":[113788,113812]},{"pos":[113819,113831],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[113833,113851]},{"pos":[113858,113865],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[113867,114018]},{"content":"A COMVariant object has a double data type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>R8.","pos":[114019,114112],"source":" A COMVariant object has a double data type if its data type is set to COMVariantType::VT\\_R8."},{"pos":[114119,114127],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>R8 and sets the value to 123.456.","pos":[114129,114228],"source":"The following example creates a new COMVariant object of type VT\\_R8 and sets the value to 123.456."},{"pos":[114439,114451],"content":"Method float","linkify":"Method float","nodes":[{"content":"Method float","pos":[0,12]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>R4 data type.","pos":[114453,114523],"source":"Gets or sets the value of a COMVariant object of the VT\\_R4 data type."},{"pos":[114570,114580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[114582,114590]},{"content":"The new value; optional.","pos":[114593,114617]},{"pos":[114624,114636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[114638,114656]},{"pos":[114663,114670],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[114672,114823]},{"content":"A COMVariant object has a float type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>R4.","pos":[114824,114911],"source":" A COMVariant object has a float type if its data type is set to COMVariantType::VT\\_R4."},{"content":"Sometimes \"single\" is also used to refer to the COM float data type.","pos":[114912,114980]},{"pos":[114987,114995],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>R4 and sets the value to 123.456.","pos":[114997,115096],"source":"The following example creates a new COMVariant object of type VT\\_R4 and sets the value to 123.456."},{"pos":[115306,115322],"content":"Method iDispatch","linkify":"Method iDispatch","nodes":[{"content":"Method iDispatch","pos":[0,16]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>DISPATCH data type.","pos":[115324,115400],"source":"Gets or sets the value of a COMVariant object of the VT\\_DISPATCH data type."},{"pos":[115467,115477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[115479,115487]},{"content":"The new value; optional.","pos":[115490,115514]},{"pos":[115521,115533],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[115535,115553]},{"pos":[115560,115567],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[115569,115720]},{"content":"A COMVariant object has an IDispatch data type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>DISPATCH.","pos":[115721,115824],"source":" A COMVariant object has an IDispatch data type if its data type is set to COMVariantType::VT\\_DISPATCH."},{"content":"The IDispatch data type is a COM data type that provides a handle to a COM IDispatch interface.","pos":[115825,115920]},{"pos":[115927,115935],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>DISPATCH.","pos":[115937,116012],"source":"The following example creates a new COMVariant object of type VT\\_DISPATCH."},{"pos":[116391,116401],"content":"Method int","linkify":"Method int","nodes":[{"content":"Method int","pos":[0,10]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>I4 data type.","pos":[116403,116473],"source":"Gets or sets the value of a COMVariant object of the VT\\_I4 data type."},{"pos":[116516,116526],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[116528,116536]},{"content":"The new value; optional.","pos":[116539,116563]},{"pos":[116570,116582],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[116584,116602]},{"pos":[116609,116616],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[116618,116769]},{"content":"The COMVariantType::VT<ph id=\"ph1\">\\_</ph>I4 data type is also used for the long variant type.","pos":[116770,116846],"source":" The COMVariantType::VT\\_I4 data type is also used for the long variant type."},{"content":"The COMVariant.long method is identical to this method; the two methods exist for completeness.","pos":[116847,116942]},{"pos":[116949,116957],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object of type VT<ph id=\"ph1\">\\_</ph>I4 and sets the value to 123456.","pos":[116959,117053],"source":"The following example creates a COMVariant object of type VT\\_I4 and sets the value to 123456."},{"pos":[117260,117275],"content":"Method iUnknown","linkify":"Method iUnknown","nodes":[{"content":"Method iUnknown","pos":[0,15]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UNKNOWN (IUnknown) data type.","pos":[117277,117363],"source":"Gets or sets the value of a COMVariant object of the VT\\_UNKNOWN (IUnknown) data type."},{"pos":[117429,117439],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[117441,117449]},{"content":"The new value; optional.","pos":[117452,117476]},{"pos":[117483,117495],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[117497,117515]},{"pos":[117522,117529],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type value.","pos":[117531,117675]},{"content":"A COMVariant object has an IUnknown data type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>UNKNOWN.","pos":[117676,117777],"source":" A COMVariant object has an IUnknown data type if its data type is set to COMVariantType::VT\\_UNKNOWN."},{"content":"The IUnknown data type is a COM data type that provides a handle to a COM IUnknown interface.","pos":[117778,117871]},{"pos":[117878,117886],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>UNKNOWN.","pos":[117888,117962],"source":"The following example creates a new COMVariant object of type VT\\_UNKNOWN."},{"pos":[118327,118338],"content":"Method long","linkify":"Method long","nodes":[{"content":"Method long","pos":[0,11]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>I4 data type.","pos":[118340,118410],"source":"Gets or sets the value of a COMVariant object of the VT\\_I4 data type."},{"pos":[118454,118464],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[118466,118474]},{"content":"The new value; optional.","pos":[118477,118501]},{"pos":[118508,118520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[118522,118540]},{"pos":[118547,118554],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[118556,118707]},{"content":"The COMVariantType::VT<ph id=\"ph1\">\\_</ph>I4 data type is also used for the int variant type.","pos":[118708,118783],"source":" The COMVariantType::VT\\_I4 data type is also used for the int variant type."},{"content":"The COMVariant.int method is identical to this method; the two methods exist for completeness.","pos":[118784,118878]},{"pos":[118885,118893],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object of type VT<ph id=\"ph1\">\\_</ph>I4 and sets the value to 123456.","pos":[118895,118989],"source":"The following example creates a COMVariant object of type VT\\_I4 and sets the value to 123456."},{"pos":[119197,119212],"content":"Method longLong","linkify":"Method longLong","nodes":[{"content":"Method longLong","pos":[0,15]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>I8 (longlong) data type.","pos":[119214,119295],"source":"Gets or sets the value of a COMVariant object of the VT\\_I8 (longlong) data type."},{"pos":[119347,119357],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[119359,119367]},{"content":"The new value; optional.","pos":[119370,119394]},{"pos":[119401,119413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[119415,119433]},{"pos":[119440,119447],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the value’s data type.","pos":[119449,119595]},{"content":"A COMVariant object has a longlong variant type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>I8.","pos":[119596,119694],"source":" A COMVariant object has a longlong variant type if its data type is set to COMVariantType::VT\\_I8."},{"pos":[119701,119709],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>I8 and sets the value to 2,305,843,009,213,693,952.","pos":[119711,119828],"source":"The following example creates a new COMVariant object of type VT\\_I8 and sets the value to 2,305,843,009,213,693,952."},{"pos":[120055,120071],"content":"Method safeArray","linkify":"Method safeArray","nodes":[{"content":"Method safeArray","pos":[0,16]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>SAFEARRAY data type.","pos":[120073,120150],"source":"Gets or sets the value of a COMVariant object of the VT\\_SAFEARRAY data type."},{"pos":[120229,120239],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[120241,120249]},{"content":"The type of the new array; optional.","pos":[120252,120288]},{"content":"newType","pos":[120300,120307]},{"content":"The type of the new array; optional.","pos":[120310,120346]},{"pos":[120353,120365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current array.","pos":[120367,120385]},{"pos":[120392,120399],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[120401,120552]},{"content":"A COMVariant object has an array Boolean type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>SAFEARRAY.","pos":[120553,120656],"source":" A COMVariant object has an array Boolean type if its data type is set to COMVariantType::VT\\_SAFEARRAY."},{"content":"A safe array is COM's equivalent to an array.","pos":[120657,120702]},{"content":"Currently only one-dimensional safe arrays are supported.","pos":[120703,120760]},{"pos":[120767,120775],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>SAFEARRAY and initializes it with an array of shorts.","pos":[120777,120896],"source":"The following example creates a new COMVariant object of type VT\\_SAFEARRAY and initializes it with an array of shorts."},{"pos":[121436,121448],"content":"Method sCode","linkify":"Method sCode","nodes":[{"content":"Method sCode","pos":[0,12]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>ERROR data type.","pos":[121450,121523],"source":"Gets or sets the value of a COMVariant object of the VT\\_ERROR data type."},{"pos":[121568,121578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[121580,121588]},{"content":"The new value; optional.","pos":[121591,121615]},{"pos":[121622,121634],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[121636,121654]},{"pos":[121661,121668],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[121670,121821]},{"content":"A COMVariant object has an scode data type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>ERROR.","pos":[121822,121918],"source":" A COMVariant object has an scode data type if its data type is set to COMVariantType::VT\\_ERROR."},{"content":"The scode data type is a COM data type that is equivalent to the Win32 HRESULT data type, which is most used as return values for COM functions.","pos":[121919,122063]},{"pos":[122070,122078],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>ERROR and sets the value to 0x80001004.","pos":[122080,122185],"source":"The following example creates a new COMVariant object of type VT\\_ERROR and sets the value to 0x80001004."},{"pos":[122401,122413],"content":"Method short","linkify":"Method short","nodes":[{"content":"Method short","pos":[0,12]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>I2 (short) data type.","pos":[122415,122493],"source":"Gets or sets the value of a COMVariant object of the VT\\_I2 (short) data type."},{"pos":[122538,122548],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[122550,122558]},{"content":"The new value; optional.","pos":[122561,122585]},{"pos":[122592,122604],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[122606,122624]},{"pos":[122631,122638],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[122640,122791]},{"content":"A COMVariant object has a short data type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>I2.","pos":[122792,122884],"source":" A COMVariant object has a short data type if its data type is set to COMVariantType::VT\\_I2."},{"pos":[122891,122899],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of the VT<ph id=\"ph1\">\\_</ph>I2 type and sets the value to 123.","pos":[122901,123000],"source":"The following example creates a new COMVariant object of the VT\\_I2 type and sets the value to 123."},{"pos":[123206,123217],"content":"Method time","linkify":"Method time","nodes":[{"content":"Method time","pos":[0,11]}]},{"content":"Gets or sets the time part of the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>DATE data type.","pos":[123219,123308],"source":"Gets or sets the time part of the value of a COMVariant object of the VT\\_DATE data type."},{"pos":[123352,123362],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[123364,123372]},{"content":"The new value; optional.","pos":[123375,123399]},{"pos":[123406,123418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[123420,123438]},{"pos":[123445,123452],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[123454,123605]},{"content":"A COMVariant object has a date and time data type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>DATE.","pos":[123606,123708],"source":" A COMVariant object has a date and time data type if its data type is set to COMVariantType::VT\\_DATE."},{"content":"When you set the value of the object, you must set the date part of the value in addition to the time.","pos":[123709,123811]},{"content":"To set the date part of the value, use the date property.","pos":[123812,123869]},{"pos":[123876,123884],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object of type VT<ph id=\"ph1\">\\_</ph>DATE and sets the date part of the value to 24 December 1998, and the time part of the value to 13.24.","pos":[123886,124050],"source":"The following example creates a COMVariant object of type VT\\_DATE and sets the date part of the value to 24 December 1998, and the time part of the value to 13.24."},{"pos":[124322,124337],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Creates a string representation of a COMVariant object.","pos":[124339,124394]},{"content":"This string representation includes the value and type of the object.","pos":[124395,124464]},{"pos":[124498,124510],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string representation of the COMVariant object.","pos":[124512,124563]},{"pos":[124570,124577],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The actual string returned from this method depends on the variant data type of the COMVariant object.","pos":[124579,124681]},{"pos":[124688,124696],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object and assigns the current date to it.","pos":[124698,124783]},{"content":"It then prints a description of the object to the Infolog.","pos":[124784,124842]},{"pos":[124959,124970],"content":"Method uInt","linkify":"Method uInt","nodes":[{"content":"Method uInt","pos":[0,11]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UI4 data type.","pos":[124972,125043],"source":"Gets or sets the value of a COMVariant object of the VT\\_UI4 data type."},{"pos":[125087,125097],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[125099,125107]},{"content":"The new value; optional.","pos":[125110,125134]},{"pos":[125141,125153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[125155,125173]},{"pos":[125180,125187],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[125189,125340]},{"content":"The COMVariantType::VT<ph id=\"ph1\">\\_</ph>UI4 data type is also used for the uLong data type.","pos":[125341,125416],"source":" The COMVariantType::VT\\_UI4 data type is also used for the uLong data type."},{"pos":[125423,125431],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UI4 type and sets the value to 123456.","pos":[125433,125536],"source":"The following example creates a new COMVariant object of the VT\\_UI4 type and sets the value to 123456."},{"pos":[125745,125757],"content":"Method uLong","linkify":"Method uLong","nodes":[{"content":"Method uLong","pos":[0,12]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UI4 (unsigned long) data type.","pos":[125759,125846],"source":"Gets or sets the value of a COMVariant object of the VT\\_UI4 (unsigned long) data type."},{"pos":[125891,125901],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[125903,125911]},{"content":"The new value; optional.","pos":[125914,125938]},{"pos":[125945,125957],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[125959,125977]},{"pos":[125984,125991],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[125993,126144]},{"content":"The COMVariantType::VT<ph id=\"ph1\">\\_</ph>UI4 data type is also used for the uInt data type.","pos":[126145,126219],"source":" The COMVariantType::VT\\_UI4 data type is also used for the uInt data type."},{"pos":[126226,126234],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>UI4 and sets the value to 123456.","pos":[126236,126335],"source":"The following example creates a new COMVariant object of type VT\\_UI4 and sets the value to 123456."},{"pos":[126545,126561],"content":"Method uLongLong","linkify":"Method uLongLong","nodes":[{"content":"Method uLongLong","pos":[0,16]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UI8 (unsigned longlong) data type.","pos":[126563,126654],"source":"Gets or sets the value of a COMVariant object of the VT\\_UI8 (unsigned longlong) data type."},{"pos":[126707,126717],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[126719,126727]},{"content":"The new value; optional.","pos":[126730,126754]},{"pos":[126761,126773],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[126775,126793]},{"pos":[126800,126807],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the object’s data type will be changed to match the value’s data type.","pos":[126809,126950]},{"content":"A COMVariant object has an unsigned longlong variant type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>I8.","pos":[126951,127059],"source":" A COMVariant object has an unsigned longlong variant type if its data type is set to COMVariantType::VT\\_I8."},{"pos":[127066,127074],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>I8 and sets the value to 9,223,372,036,854,775,808.","pos":[127076,127193],"source":"The following example creates a new COMVariant object of type VT\\_I8 and sets the value to 9,223,372,036,854,775,808."},{"pos":[127420,127433],"content":"Method uShort","linkify":"Method uShort","nodes":[{"content":"Method uShort","pos":[0,13]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>UI2 data type.","pos":[127435,127506],"source":"Gets or sets the value of a COMVariant object of the VT\\_UI2 data type."},{"pos":[127552,127562],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[127564,127572]},{"content":"The new value; optional.","pos":[127575,127599]},{"pos":[127606,127618],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[127620,127638]},{"pos":[127645,127652],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[127654,127805]},{"content":"A COMVariant object has an unsigned short data type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>UI2.","pos":[127806,127909],"source":" A COMVariant object has an unsigned short data type if its data type is set to COMVariantType::VT\\_UI2."},{"pos":[127916,127924],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object of type VT<ph id=\"ph1\">\\_</ph>UI2 and sets the value to 12345.","pos":[127926,128024],"source":"The following example creates a new COMVariant object of type VT\\_UI2 and sets the value to 12345."},{"pos":[128234,128248],"content":"Method variant","linkify":"Method variant","nodes":[{"content":"Method variant","pos":[0,14]}]},{"content":"Gets or sets the value of a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>VARIANT (variant) data type.","pos":[128250,128335],"source":"Gets or sets the value of a COMVariant object of the VT\\_VARIANT (variant) data type."},{"pos":[128396,128406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[128408,128416]},{"content":"The new value; optional.","pos":[128419,128443]},{"pos":[128450,128462],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value.","pos":[128464,128482]},{"pos":[128489,128496],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The variant property is used to nest one COMVariant object in another COMVariant object.","pos":[128498,128586]},{"content":"When using the parent object as the argument in a call to COMDispFunction.call or in a call to the COM class, the called method will automatically extract the data of the nested object.","pos":[128587,128772]},{"content":"This nesting facility is useful when a method on a COM object can work with multiple data types.","pos":[128773,128869]},{"content":"Only one level of variant nesting is allowed.","pos":[128870,128915]},{"content":"If you pass in a value that has a different data type than the object, the data type of the object will be changed to match the data type of the value.","pos":[128916,129067]},{"content":"A COMVariant object has a variant type if its data type is set to COMVariantType::VT<ph id=\"ph1\">\\_</ph>VARIANT.","pos":[129068,129162],"source":" A COMVariant object has a variant type if its data type is set to COMVariantType::VT\\_VARIANT."},{"pos":[129169,129177],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object of type VT<ph id=\"ph1\">\\_</ph>I4 (long), and a COMVariant object of type VT<ph id=\"ph2\">\\_</ph>VARIANT.","pos":[129179,129296],"source":"The following example creates a COMVariant object of type VT\\_I4 (long), and a COMVariant object of type VT\\_VARIANT."},{"content":"The object of type VT<ph id=\"ph1\">\\_</ph>VARIANT is assigned the value of the object of type VT<ph id=\"ph2\">\\_</ph>I4.","pos":[129297,129379],"source":" The object of type VT\\_VARIANT is assigned the value of the object of type VT\\_I4."},{"content":"The code below contains a hypothetical COM object (\"MyCOM.Object\"), and will therefore not run in Finance and Operations, unless such an object is created outside Finance and Operations.","pos":[129380,129566]},{"pos":[131075,131098],"content":"Method variantInOutFlag","linkify":"Method variantInOutFlag","nodes":[{"content":"Method variantInOutFlag","pos":[0,23]}]},{"content":"Sets or returns the InOutFlag setting for a COMVariant object.","pos":[131100,131162]},{"pos":[131242,131252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[131254,131262]},{"content":"The new InOutFlag setting; optional.","pos":[131265,131301]},{"pos":[131308,131320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current InOutFlag setting.","pos":[131322,131352]},{"pos":[131359,131366],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following is a list of possible values for the newValue parameter.","pos":[131368,131438]},{"content":"COMVariantInOut::IN","pos":[131444,131463]},{"content":"COMVariantInOut::IN<ph id=\"ph1\">\\_</ph>OUT","pos":[131468,131492],"source":"COMVariantInOut::IN\\_OUT"},{"content":"COMVariantInOut::OUT","pos":[131497,131517]},{"content":"COMVariantInOut::OUT<ph id=\"ph1\">\\_</ph>RETVAL.","pos":[131522,131551],"source":"COMVariantInOut::OUT\\_RETVAL."},{"content":"The InOutFlag setting describes how the data that is stored in the object is treated when the object is used as an argument in the COMDispFunction.call method.","pos":[131553,131712]},{"content":"The possible values of the InOutFlag setting correspond to the values for COM Automation objects described in the Win32 SDK.","pos":[131713,131837]},{"content":"The data stored in the COMVariant object is unaffected when the InOutFlag setting is changed.","pos":[131838,131931]},{"pos":[131938,131946],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object that has the InOutFlag setting set to IN, and then uses the variantInOutFlag method to change the setting to OUT.","pos":[131948,132111]},{"pos":[132320,132338],"content":"Method variantType","linkify":"Method variantType","nodes":[{"content":"Method variantType","pos":[0,18]}]},{"content":"Queries a COMVariant object for its variant data type or changes the data type.","pos":[132340,132419]},{"pos":[132492,132502],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"newValue","pos":[132504,132512]},{"content":"The new variant data type; optional.","pos":[132515,132551]},{"pos":[132558,132570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current variant data type.","pos":[132572,132602]},{"pos":[132609,132616],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The possible values for the newValue parameter are:","pos":[132618,132669]},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>I2","pos":[132675,132697],"source":"COMVariantType::VT\\_I2"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>I4","pos":[132702,132724],"source":"COMVariantType::VT\\_I4"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>R4","pos":[132729,132751],"source":"COMVariantType::VT\\_R4"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>R8","pos":[132756,132778],"source":"COMVariantType::VT\\_R8"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>CY","pos":[132783,132805],"source":"COMVariantType::VT\\_CY"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>DATE","pos":[132810,132834],"source":"COMVariantType::VT\\_DATE"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>BSTR","pos":[132839,132863],"source":"COMVariantType::VT\\_BSTR"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>DISPATCH","pos":[132868,132896],"source":"COMVariantType::VT\\_DISPATCH"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>ERROR","pos":[132901,132926],"source":"COMVariantType::VT\\_ERROR"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>BOOL","pos":[132931,132955],"source":"COMVariantType::VT\\_BOOL"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>VARIANT","pos":[132960,132987],"source":"COMVariantType::VT\\_VARIANT"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>UNKNOWN","pos":[132992,133019],"source":"COMVariantType::VT\\_UNKNOWN"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>DECIMAL","pos":[133024,133051],"source":"COMVariantType::VT\\_DECIMAL"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>I1","pos":[133056,133078],"source":"COMVariantType::VT\\_I1"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>UI1","pos":[133083,133106],"source":"COMVariantType::VT\\_UI1"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>UI2","pos":[133111,133134],"source":"COMVariantType::VT\\_UI2"},{"content":"COMVariantType::VT<ph id=\"ph1\">\\_</ph>UI4","pos":[133139,133162],"source":"COMVariantType::VT\\_UI4"},{"content":"The variant data type describes how the data that is stored in the object is treated when the object is used as an argument in a call to the COMDispFunction.call method or a call to the COM class.","pos":[133164,133360]},{"content":"If you change the data type, the data that is held in the object is deleted.","pos":[133361,133437]},{"content":"See the <ph id=\"ph1\">\\[</ph>COMVariant.new<ph id=\"ph2\">\\]</ph> for information about the available variant data types.","pos":[133438,133520],"source":" See the \\[COMVariant.new\\] for information about the available variant data types."},{"pos":[133527,133535],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object and sets it to be of long (VT<ph id=\"ph1\">\\_</ph>I4) data type.","pos":[133537,133636],"source":"The following example creates a new COMVariant object and sets it to be of long (VT\\_I4) data type."},{"content":"The variantType method is then used to change the data type to VT<ph id=\"ph1\">\\_</ph>DATE (date).","pos":[133637,133716],"source":" The variantType method is then used to change the data type to VT\\_DATE (date)."},{"content":"The data that is held by the object is discarded.","pos":[133717,133766]},{"pos":[134016,134040],"content":"Method createDateFromYMD","linkify":"Method createDateFromYMD","nodes":[{"content":"Method createDateFromYMD","pos":[0,24]}]},{"content":"Creates a new COMVariant object and initializes it with a date value in one operation.","pos":[134042,134128]},{"pos":[134242,134252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"year","pos":[134254,134258]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[134261,134386]},{"content":"This parameter is optional.","pos":[134387,134414]},{"content":"Possible values are: COMVariantInOut::OUT<ph id=\"ph1\">\\_</ph>RETVAL","pos":[134415,134464],"source":" Possible values are: COMVariantInOut::OUT\\_RETVAL"},{"content":"month","pos":[134476,134481]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[134484,134609]},{"content":"This parameter is optional.","pos":[134610,134637]},{"content":"Possible values are: COMVariantInOut::OUT<ph id=\"ph1\">\\_</ph>RETVAL","pos":[134638,134687],"source":" Possible values are: COMVariantInOut::OUT\\_RETVAL"},{"content":"day","pos":[134699,134702]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[134705,134830]},{"content":"This parameter is optional.","pos":[134831,134858]},{"content":"Possible values are: COMVariantInOut::OUT<ph id=\"ph1\">\\_</ph>RETVAL","pos":[134859,134908],"source":" Possible values are: COMVariantInOut::OUT\\_RETVAL"},{"content":"inOutFlag","pos":[134920,134929]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[134932,135057]},{"content":"This parameter is optional.","pos":[135058,135085]},{"content":"Possible values are: COMVariantInOut::OUT<ph id=\"ph1\">\\_</ph>RETVAL","pos":[135086,135135],"source":" Possible values are: COMVariantInOut::OUT\\_RETVAL"},{"pos":[135142,135154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new COMVariant object.","pos":[135156,135182]},{"pos":[135189,135196],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The COMVariant object that is created by this method has the data type VT<ph id=\"ph1\">\\_</ph>DATE (date/time).","pos":[135198,135290],"source":"The COMVariant object that is created by this method has the data type VT\\_DATE (date/time)."},{"content":"This method allows you to use dates that are outside the range for the Finance and Operationsdate data type (0111901 to 31122154).","pos":[135291,135421]},{"content":"For dates within the date range, you can use the COMVariant.createFromDate method.","pos":[135422,135504]},{"pos":[135511,135519],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object and initializes it with the date 01 January 4015.","pos":[135521,135620]},{"pos":[135711,135733],"content":"Method createFromArray","linkify":"Method createFromArray","nodes":[{"content":"Method createFromArray","pos":[0,22]}]},{"content":"Creates a new COMVariant object and initializes it with an array in one operation.","pos":[135735,135817]},{"pos":[135912,135922],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135924,135929]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[135932,136057]},{"content":"This parameter is optional.","pos":[136058,136085]},{"content":"Possible values are:","pos":[136086,136106]},{"content":"inOutFlag","pos":[136118,136127]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[136130,136255]},{"content":"This parameter is optional.","pos":[136256,136283]},{"content":"Possible values are:","pos":[136284,136304]},{"pos":[136311,136323],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new COMVariant object.","pos":[136325,136351]},{"pos":[136358,136365],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The COMVariant object that is created by this method has the data type VT<ph id=\"ph1\">\\_</ph>SAFEARRAY (array).","pos":[136367,136460],"source":"The COMVariant object that is created by this method has the data type VT\\_SAFEARRAY (array)."},{"content":"You can change the data type of an existing COMVariant object to VT<ph id=\"ph1\">\\_</ph>SAFEARRAY by using the variantType method or by passing in an array value by using the safeArray property method.","pos":[136461,136643],"source":" You can change the data type of an existing COMVariant object to VT\\_SAFEARRAY by using the variantType method or by passing in an array value by using the safeArray property method."},{"pos":[136650,136658],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object and initializes it with an array of integers.","pos":[136660,136759]},{"pos":[137097,137121],"content":"Method createFromBoolean","linkify":"Method createFromBoolean","nodes":[{"content":"Method createFromBoolean","pos":[0,24]}]},{"content":"Creates a new COMVariant object and initializes it with a Boolean value in one operation.","pos":[137123,137212]},{"pos":[137311,137321],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137323,137328]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[137331,137456]},{"content":"This parameter is optional.","pos":[137457,137484]},{"content":"Possible values are:","pos":[137485,137505]},{"content":"inOutFlag","pos":[137517,137526]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[137529,137654]},{"content":"This parameter is optional.","pos":[137655,137682]},{"content":"Possible values are:","pos":[137683,137703]},{"pos":[137710,137722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new COMVariant object.","pos":[137724,137750]},{"pos":[137757,137764],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The COMVariant object that is created by this method has the data type VT<ph id=\"ph1\">\\_</ph>BOOL (Boolean).","pos":[137766,137856],"source":"The COMVariant object that is created by this method has the data type VT\\_BOOL (Boolean)."},{"content":"You can change the data type of an existing COMVariant object to VT<ph id=\"ph1\">\\_</ph>BOOL by using the variantType method or by passing in a Boolean value by using the boolean property method.","pos":[137857,138033],"source":" You can change the data type of an existing COMVariant object to VT\\_BOOL by using the variantType method or by passing in a Boolean value by using the boolean property method."},{"pos":[138040,138048],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>BOOL variant data type (Boolean), and sets the value to true.","pos":[138050,138172],"source":"The following example creates a COMVariant object of the VT\\_BOOL variant data type (Boolean), and sets the value to true."},{"pos":[138276,138296],"content":"Method createFromCOM","linkify":"Method createFromCOM","nodes":[{"content":"Method createFromCOM","pos":[0,20]}]},{"content":"Creates a new COMVariant object and initializes it with a COM class in one operation.","pos":[138298,138383]},{"pos":[138474,138484],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138486,138491]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[138494,138619]},{"content":"This parameter is optional.","pos":[138620,138647]},{"content":"Possible values are:","pos":[138648,138668]},{"content":"inOutFlag","pos":[138680,138689]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[138692,138817]},{"content":"This parameter is optional.","pos":[138818,138845]},{"content":"Possible values are:","pos":[138846,138866]},{"pos":[138873,138885],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new COMVariant object.","pos":[138887,138913]},{"pos":[138920,138927],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Possible values of the inOutFlag parameter are as follows:","pos":[138929,138987]},{"content":"COMVariantInOut::IN","pos":[138993,139012]},{"content":"COMVariantInOut::IN<ph id=\"ph1\">\\_</ph>OUT","pos":[139017,139041],"source":"COMVariantInOut::IN\\_OUT"},{"content":"COMVariantInOut::OUT","pos":[139046,139066]},{"content":"COMVariantInOut::OUT<ph id=\"ph1\">\\_</ph>RETVAL","pos":[139071,139099],"source":"COMVariantInOut::OUT\\_RETVAL"},{"pos":[139106,139114],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a new COMVariant object and initializes it with a COM object.","pos":[139116,139207]},{"pos":[139350,139371],"content":"Method createFromDate","linkify":"Method createFromDate","nodes":[{"content":"Method createFromDate","pos":[0,21]}]},{"content":"Creates a new COMVariant object and initializes it with a date value in one operation.","pos":[139373,139459]},{"pos":[139552,139562],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[139564,139569]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[139572,139697]},{"content":"This parameter is optional.","pos":[139698,139725]},{"content":"Possible values are:","pos":[139726,139746]},{"content":"inOutFlag","pos":[139758,139767]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[139770,139895]},{"content":"This parameter is optional.","pos":[139896,139923]},{"content":"Possible values are:","pos":[139924,139944]},{"pos":[139951,139963],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new COMVariant object.","pos":[139965,139991]},{"pos":[139998,140005],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The COMVariant object that is created by this method has the data type VT<ph id=\"ph1\">\\_</ph>DATE (date/time).","pos":[140007,140099],"source":"The COMVariant object that is created by this method has the data type VT\\_DATE (date/time)."},{"content":"You can change the data type of an existing COMVariant object to VT<ph id=\"ph1\">\\_</ph>DATE by using the variantType method or by passing in a time value by using the date property method.","pos":[140100,140270],"source":" You can change the data type of an existing COMVariant object to VT\\_DATE by using the variantType method or by passing in a time value by using the date property method."},{"content":"If you want to use a date that is outside the range for the Axapta date type (0111901 to 31122154), use the COMVariant.createDateFromYMD method.","pos":[140271,140415]},{"pos":[140422,140430],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object and initializes it with the current date.","pos":[140432,140523]},{"pos":[140640,140668],"content":"Method createFromDateAndTime","linkify":"Method createFromDateAndTime","nodes":[{"content":"Method createFromDateAndTime","pos":[0,28]}]},{"content":"Creates a new COMVariant object and initializes it with a date and time in one operation.","pos":[140670,140759]},{"pos":[140868,140878],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"date","pos":[140880,140884]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[140887,141012]},{"content":"This parameter is optional.","pos":[141013,141040]},{"content":"Possible values are:","pos":[141041,141061]},{"content":"time","pos":[141073,141077]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[141080,141205]},{"content":"This parameter is optional.","pos":[141206,141233]},{"content":"Possible values are:","pos":[141234,141254]},{"content":"inOutFlag","pos":[141266,141275]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[141278,141403]},{"content":"This parameter is optional.","pos":[141404,141431]},{"content":"Possible values are:","pos":[141432,141452]},{"pos":[141459,141471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new COMVariant object.","pos":[141473,141499]},{"pos":[141506,141513],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The COMVariant object that is created by this method has the data type VT<ph id=\"ph1\">\\_</ph>DATE (date/time).","pos":[141515,141607],"source":"The COMVariant object that is created by this method has the data type VT\\_DATE (date/time)."},{"content":"You can change the data type of an existing COMVariant object to VT<ph id=\"ph1\">\\_</ph>DATE by using the variantType method.","pos":[141608,141714],"source":" You can change the data type of an existing COMVariant object to VT\\_DATE by using the variantType method."},{"pos":[141721,141729],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object and assigns it the current date, and a time of 10 seconds past midnight.","pos":[141731,141853]},{"pos":[142042,142062],"content":"Method createFromInt","linkify":"Method createFromInt","nodes":[{"content":"Method createFromInt","pos":[0,20]}]},{"content":"Creates a new COMVariant object and initializes it with an integer value in one operation.","pos":[142064,142154]},{"pos":[142245,142255],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[142257,142262]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[142265,142390]},{"content":"This parameter is optional.","pos":[142391,142418]},{"content":"Possible values are:","pos":[142419,142439]},{"content":"inOutFlag","pos":[142451,142460]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[142463,142588]},{"content":"This parameter is optional.","pos":[142589,142616]},{"content":"Possible values are:","pos":[142617,142637]},{"pos":[142644,142656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new COMVariant object.","pos":[142658,142684]},{"pos":[142691,142698],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The COMVariant object that is created by this method has the data type VT<ph id=\"ph1\">\\_</ph>I4 (integer).","pos":[142700,142788],"source":"The COMVariant object that is created by this method has the data type VT\\_I4 (integer)."},{"content":"You can change the data type of an existing COMVariant object to VT<ph id=\"ph1\">\\_</ph>I4 by using the variantType method or by passing in an integer value by using the int property method.","pos":[142789,142960],"source":" You can change the data type of an existing COMVariant object to VT\\_I4 by using the variantType method or by passing in an integer value by using the int property method."},{"pos":[142967,142975],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>I4 variant data type (integer), and sets the value to 123.","pos":[142977,143096],"source":"The following example creates a COMVariant object of the VT\\_I4 variant data type (integer), and sets the value to 123."},{"pos":[143195,143217],"content":"Method createFromInt64","linkify":"Method createFromInt64","nodes":[{"content":"Method createFromInt64","pos":[0,22]}]},{"content":"Creates a new COMVariant object and initializes it with an int64 value (longLong or uLongLong) in one operation.","pos":[143219,143331]},{"pos":[143426,143436],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[143438,143443]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[143446,143571]},{"content":"This parameter is optional.","pos":[143572,143599]},{"content":"Possible values are:","pos":[143600,143620]},{"content":"inOutFlag","pos":[143632,143641]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[143644,143769]},{"content":"This parameter is optional.","pos":[143770,143797]},{"content":"Possible values are:","pos":[143798,143818]},{"pos":[143825,143837],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new COMVariant object.","pos":[143839,143865]},{"pos":[143872,143879],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The COMVariant object that is created by this method has the data type VT<ph id=\"ph1\">\\_</ph>I8 (int64).","pos":[143881,143967],"source":"The COMVariant object that is created by this method has the data type VT\\_I8 (int64)."},{"content":"You can change the data type of an existing COMVariant object to VT<ph id=\"ph1\">\\_</ph>I8 by using the variantType method or by passing in an int64 value by using the longLong or uLongLong property method.","pos":[143968,144155],"source":" You can change the data type of an existing COMVariant object to VT\\_I8 by using the variantType method or by passing in an int64 value by using the longLong or uLongLong property method."},{"pos":[144162,144170],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>I8 variant data type (integer), and sets the value to 123456.","pos":[144172,144294],"source":"The following example creates a COMVariant object of the VT\\_I8 variant data type (integer), and sets the value to 123456."},{"pos":[144398,144419],"content":"Method createFromReal","linkify":"Method createFromReal","nodes":[{"content":"Method createFromReal","pos":[0,21]}]},{"content":"Creates a new COMVariant object and initializes it with a real value in one operation.","pos":[144421,144507]},{"pos":[144600,144610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[144612,144617]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[144620,144745]},{"content":"This parameter is optional.","pos":[144746,144773]},{"content":"Possible values are:","pos":[144774,144794]},{"content":"inOutFlag","pos":[144806,144815]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[144818,144943]},{"content":"This parameter is optional.","pos":[144944,144971]},{"content":"Possible values are:","pos":[144972,144992]},{"pos":[144999,145011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new COMVariant object.","pos":[145013,145039]},{"pos":[145046,145053],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The COMVariant object that is created by this method has the data type VT<ph id=\"ph1\">\\_</ph>R8 (real).","pos":[145055,145140],"source":"The COMVariant object that is created by this method has the data type VT\\_R8 (real)."},{"content":"You can change the data type of an existing COMVariant object to VT<ph id=\"ph1\">\\_</ph>R8 by using the variantType method or by passing in a Boolean value by using the double property method.","pos":[145141,145314],"source":" You can change the data type of an existing COMVariant object to VT\\_R8 by using the variantType method or by passing in a Boolean value by using the double property method."},{"pos":[145321,145329],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>R8 variant data type (real) and sets the value to 123.456.","pos":[145331,145450],"source":"The following example creates a COMVariant object of the VT\\_R8 variant data type (real) and sets the value to 123.456."},{"pos":[145555,145575],"content":"Method createFromStr","linkify":"Method createFromStr","nodes":[{"content":"Method createFromStr","pos":[0,20]}]},{"content":"Creates a new COMVariant object and initializes it with a string in one operation.","pos":[145577,145659]},{"pos":[145750,145760],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[145762,145767]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[145770,145895]},{"content":"This parameter is optional.","pos":[145896,145923]},{"content":"Possible values are:","pos":[145924,145944]},{"content":"inOutFlag","pos":[145956,145965]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[145968,146093]},{"content":"This parameter is optional.","pos":[146094,146121]},{"content":"Possible values are:","pos":[146122,146142]},{"pos":[146149,146161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new COMVariant object.","pos":[146163,146189]},{"pos":[146196,146203],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The COMVariant object that is created by this method has the data type VT<ph id=\"ph1\">\\_</ph>BSTR (string).","pos":[146205,146294],"source":"The COMVariant object that is created by this method has the data type VT\\_BSTR (string)."},{"content":"You can change the data type of an existing COMVariant object to VT<ph id=\"ph1\">\\_</ph>BSTR by using the variantType method or by passing in a string value by using the bStr property method.","pos":[146295,146467],"source":" You can change the data type of an existing COMVariant object to VT\\_BSTR by using the variantType method or by passing in a string value by using the bStr property method."},{"pos":[146474,146482],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>BSTR variant data type and sets the value to \"Hello World.\"","pos":[146484,146604],"source":"The following example creates a COMVariant object of the VT\\_BSTR variant data type and sets the value to \"Hello World.\""},{"pos":[146714,146735],"content":"Method createFromTime","linkify":"Method createFromTime","nodes":[{"content":"Method createFromTime","pos":[0,21]}]},{"content":"Creates a new COMVariant object and initializes it with a time value in one operation.","pos":[146737,146823]},{"pos":[146915,146925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[146927,146932]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[146935,147060]},{"content":"This parameter is optional.","pos":[147061,147088]},{"content":"Possible values are:","pos":[147089,147109]},{"content":"inOutFlag","pos":[147121,147130]},{"content":"A flag that determines whether the object can be used to pass data to a COM method or COM property, to receive data, or both.","pos":[147133,147258]},{"content":"This parameter is optional.","pos":[147259,147286]},{"content":"Possible values are:","pos":[147287,147307]},{"pos":[147314,147326],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new COMVariant object.","pos":[147328,147354]},{"pos":[147361,147368],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The COMVariant object that is created by this method has the data type VT<ph id=\"ph1\">\\_</ph>DATE (date/time).","pos":[147370,147462],"source":"The COMVariant object that is created by this method has the data type VT\\_DATE (date/time)."},{"content":"You can change the data type of an existing COMVariant object to VT<ph id=\"ph1\">\\_</ph>DATE by using the variantType method or by passing in a time value by using the time property method.","pos":[147463,147633],"source":" You can change the data type of an existing COMVariant object to VT\\_DATE by using the variantType method or by passing in a time value by using the time property method."},{"pos":[147640,147648],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example will create a COMVariant object and set the time part to 10 seconds past midnight.","pos":[147650,147754]},{"pos":[147869,147897],"content":"Method createFromUtcDateTime","linkify":"Method createFromUtcDateTime","nodes":[{"content":"Method createFromUtcDateTime","pos":[0,28]}]},{"pos":[148001,148011],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148013,148018]},{"content":"inOutFlag","pos":[148032,148041]},{"pos":[148050,148062],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148068,148088],"content":"Method createNoValue","linkify":"Method createNoValue","nodes":[{"content":"Method createNoValue","pos":[0,20]}]},{"content":"Creates a COMVariant object of the VT<ph id=\"ph1\">\\_</ph>ERROR variant type with no value.","pos":[148090,148162],"source":"Creates a COMVariant object of the VT\\_ERROR variant type with no value."},{"pos":[148215,148227],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The new COMVariant object.","pos":[148229,148255]},{"pos":[148262,148269],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A COMVariant object with no value can be used for COM parameters which are optional.","pos":[148271,148355]},{"pos":[148362,148370],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates an empty COMVariant object.","pos":[148372,148429]},{"pos":[148541,148551],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Creates a COMVariant object that can be used to pass arguments to the methods or properties of a COM Automation object.","pos":[148553,148672]},{"pos":[148752,148762],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"inOutFlag","pos":[148764,148773]},{"content":"A type of data to store; optional.","pos":[148776,148810]},{"content":"These are the possible values that are supplied by the COMVariantType system enum:","pos":[148811,148893]},{"content":"type","pos":[148905,148909]},{"content":"A type of data to store; optional.","pos":[148912,148946]},{"content":"These are the possible values that are supplied by the COMVariantType system enum:","pos":[148947,149029]},{"pos":[149036,149043],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the type parameter is omitted, no internal memory will be allocated until it is needed by one of the property methods of the COMVariant object.","pos":[149045,149191]},{"content":"For a list of the property methods, see <ph id=\"ph1\">\\[</ph>COMVariant Class<ph id=\"ph2\">\\]</ph>.","pos":[149192,149253],"source":" For a list of the property methods, see \\[COMVariant Class\\]."},{"content":"You can change the variant data type after it has been set by passing in a new value of a different type (by using one of the property methods).","pos":[149254,149398]},{"content":"The data types that are defined by the COMVariantType enum are equivalent to the variant data types that are defined by the Win32 SDK.","pos":[149399,149533]},{"pos":[149540,149548],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example creates three COMVariant objects:","pos":[149550,149605]},{"content":"varIn is for passing data to a COM method; it has a string stored in it and then a short (integer).","pos":[149611,149710]},{"content":"varOut is to receive data of type VT<ph id=\"ph1\">\\_</ph>I4 (long).","pos":[149715,149763],"source":"varOut is to receive data of type VT\\_I4 (long)."},{"content":"varOutRetval can pass in or receive data; its data type can be set by the COMDispFunction.call method.","pos":[149768,149870]},{"pos":[150394,150408],"content":"Method noValue","linkify":"Method noValue","nodes":[{"content":"Method noValue","pos":[0,14]}]},{"content":"Deletes the contents of an existing COMVariant object and enables it to act as an unspecified argument when it is used in the COMDispFunction.call method or the COM class.","pos":[150410,150581]},{"pos":[150615,150622],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A no-value variant can be used when a COM method has parameters that can be null.","pos":[150624,150705]},{"content":"It indicates to the COM object that the argument has not been specified and that it must use its own default value.","pos":[150706,150821]},{"content":"When you are calling methods on a COM object, the unspecified argument can also be specified by using the COMArgument::NoValue enum.","pos":[150822,150954]},{"content":"Note that this enum cannot be used when calling through the COMDispFunction class.","pos":[150955,151037]},{"pos":[151044,151052],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to call the COM.multiply method with the third argument unspecified.","pos":[151054,151154]},{"content":"The code below contains a hypothetical COM object (\"MyCOM.Object\"), and will therefore not run in Finance and Operations, unless such an object is created outside Finance and Operations.","pos":[151155,151341]},{"pos":[152458,152473],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"content":"Not implemented.","pos":[152475,152491]},{"content":"You can override this method if you need to explicitly destruct an object.","pos":[152492,152566]},{"pos":[152601,152608],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You must call finalize methods to execute any statements in them; there are no implicit calls to finalize methods.","pos":[152610,152724]},{"pos":[152729,152754],"content":"Class ConfigurationKeySet","linkify":"Class ConfigurationKeySet","nodes":[{"content":"Class ConfigurationKeySet","pos":[0,25]}]},{"content":"The ConfigurationKeySet class enables working with a tree of configuration keys.","pos":[152801,152881]},{"pos":[152887,152894],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When a new ConfigurationKeySet is created, a tree of configuration keys is created, where all keys are set by default to \"enabled\".","pos":[152896,153027]},{"content":"The cnt method is used to loop through all configuration keys and count them.","pos":[153028,153105]},{"content":"The cntID method is used to retrieve the IDs of the configuration keys.","pos":[153106,153177]},{"content":"In situations in which a configuration key has been deleted and the key IDs are ID1, ID2, ID5, and so on, this method will distinguish the number of configuration keys compared to their IDs.","pos":[153178,153368]},{"content":"When a new ConfigurationKeySet is created, all configuration keys are enabled.","pos":[153369,153447]},{"content":"The system will then call the loadSystemSetup method, which scans the SysConfig table where the configuration types are stored.","pos":[153448,153575]},{"content":"It loops through the configuration key setup and identifies what is enabled.","pos":[153576,153652]},{"content":"Next, the enabled method is called.","pos":[153653,153688]},{"content":"Every time a configuration key is disabled, all sub-configuration keys are also automatically disabled.","pos":[153689,153792]},{"content":"In a situation in which a top node is enabled and one of the sub-nodes is disabled, the kernel will remember which configuration key sub-nodes were previously disabled whenever a top node is disabled.","pos":[153793,153993]},{"pos":[153999,154007],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[154013,154020],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[154024,154030]},{"content":"Description","pos":[154108,154119]},{"content":"public int cnt()","pos":[154440,154456]},{"content":"Retrieves the number of configuration keys that are defined in the Finance and Operations Application Object Tree (AOT).","pos":[154524,154644]},{"content":"public ConfigurationKeyId cnt2Id(int cnt)","pos":[154649,154690]},{"pos":[154733,154781],"content":"Retrieves the ID of the <bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>th configuration key.","source":"Retrieves the ID of the *n*th configuration key."},{"content":"public boolean enabled(ConfigurationKeyId configurationKeyId, <ph id=\"ph1\">\\[</ph>boolean enable<ph id=\"ph2\">\\]</ph>)","pos":[154857,154938],"source":"public boolean enabled(ConfigurationKeyId configurationKeyId, \\[boolean enable\\])"},{"content":"Determines whether to enable or disable the object.","pos":[154941,154992]},{"content":"public container pack()","pos":[155065,155088]},{"content":"Serializes the current instance of the ConfigurationKeySet class.","pos":[155149,155214]},{"content":"public boolean touchedByUser(ConfigurationKeyId configurationKeyId)","pos":[155273,155340]},{"content":"public void new(<ph id=\"ph1\">\\[</ph>container container<ph id=\"ph2\">\\]</ph>)","pos":[155481,155521],"source":"public void new(\\[container container\\])"},{"content":"Initializes a new instance of the Object class.","pos":[155565,155612]},{"content":"public void loadSystemSetup()","pos":[155689,155718]},{"pos":[155900,155910],"content":"Method cnt","linkify":"Method cnt","nodes":[{"content":"Method cnt","pos":[0,10]}]},{"content":"Retrieves the number of configuration keys that are defined in the Finance and Operations Application Object Tree (AOT).","pos":[155912,156032]},{"pos":[156061,156073],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of configuration keys that are defined in the AOT.","pos":[156075,156136]},{"pos":[156142,156155],"content":"Method cnt2Id","linkify":"Method cnt2Id","nodes":[{"content":"Method cnt2Id","pos":[0,13]}]},{"pos":[156157,156205],"content":"Retrieves the ID of the <bpt id=\"p1\">*</bpt><ph id=\"ph1\">n</ph><ept id=\"p1\">*</ept>th configuration key.","source":"Retrieves the ID of the *n*th configuration key."},{"pos":[156259,156269],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cnt","pos":[156271,156274]},{"content":"The index of the configuration key, which must be between 1 and the number of configuration keys.","pos":[156277,156374]},{"pos":[156381,156393],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the specified configuration key.","pos":[156395,156437]},{"pos":[156444,156451],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To find the number of configuration keys, use the cnt method.","pos":[156453,156514]},{"content":"In general, the index and ID will differ, because not all the IDs are used.","pos":[156515,156590]},{"pos":[156597,156605],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[157126,157140],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[157142,157193]},{"pos":[157285,157295],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"configurationKeyId","pos":[157297,157315]},{"content":"The value to which to set the state of the configuration key; optional.","pos":[157318,157389]},{"content":"enable","pos":[157401,157407]},{"content":"The value to which to set the state of the configuration key; optional.","pos":[157410,157481]},{"pos":[157488,157500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[157502,157550]},{"pos":[157557,157564],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[157566,157641]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[157642,157737]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[157738,157872]},{"pos":[157879,157887],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"This example demonstrates the use of the ConfigurationKeySet.enabled method.","pos":[157889,157965]},{"pos":[158791,158802],"content":"Method pack","linkify":"Method pack","nodes":[{"content":"Method pack","pos":[0,11]}]},{"content":"Serializes the current instance of the ConfigurationKeySet class.","pos":[158804,158869]},{"pos":[158905,158917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A container that contains the current instance of the ConfigurationKeySet class.","pos":[158919,158999]},{"pos":[159005,159025],"content":"Method touchedByUser","linkify":"Method touchedByUser","nodes":[{"content":"Method touchedByUser","pos":[0,20]}]},{"pos":[159105,159115],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"configurationKeyId","pos":[159117,159135]},{"pos":[159144,159156],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[159162,159172],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[159174,159221]},{"pos":[159272,159282],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[159284,159293]},{"pos":[159301,159323],"content":"Method loadSystemSetup","linkify":"Method loadSystemSetup","nodes":[{"content":"Method loadSystemSetup","pos":[0,22]}]},{"pos":[159363,159379],"content":"Class Connection","linkify":"Class Connection","nodes":[{"content":"Class Connection","pos":[0,16]}]},{"content":"The Connection class establishes a current database session that you can use to execute SQL statements and return results.","pos":[159417,159539]},{"pos":[159545,159552],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following classes extend the Connection class:","pos":[159554,159604]},{"content":"OdbcConnection","pos":[159610,159624]},{"content":"OciConnection","pos":[159629,159642]},{"content":"UserConnection","pos":[159647,159661]},{"pos":[159667,159675],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"In the following example, the createStatement method initializes the Statement object.","pos":[159677,159763]},{"content":"The Statement.executeQuery method executes an SQL statement and then stores the retrieved data in the ResultSet object.","pos":[159764,159883]},{"pos":[160815,160822],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[160826,160832]},{"content":"Description","pos":[160941,160952]},{"content":"public Statement createStatement(<ph id=\"ph1\">\\[</ph>ResultSetType resultSetType<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ResultSetConcurrency resultSetConcurrency<ph id=\"ph4\">\\]</ph>)","pos":[161432,161544],"source":"public Statement createStatement(\\[ResultSetType resultSetType\\], \\[ResultSetConcurrency resultSetConcurrency\\])"},{"content":"Creates a Statement object that is used to execute an SQL statement.","pos":[161547,161615]},{"content":"public int odbcGetInfoInt(int InfoId)","pos":[161735,161772]},{"content":"Provides an interface to the SQLGetInfo Open Database Connectivity (ODBC) function to retrieve information about the ODBC driver and data source that are associated with a connection.","pos":[161850,162033]},{"content":"public int odbcGetInfoLong(int InfoId)","pos":[162038,162076]},{"content":"Provides an interface to the SQLGetInfo ODBC function to retrieve information about the ODBC driver and data source that are associated with a connection.","pos":[162153,162307]},{"content":"public str odbcGetInfoStr(int InfoId)","pos":[162341,162378]},{"content":"Provides an interface to the SQLGetInfo ODBC function to retrieve information, in string format, about the ODBC driver and data source that are associated with a connection.","pos":[162456,162629]},{"content":"public str toString()","pos":[162644,162665]},{"content":"Converts the Connection object to a string.","pos":[162759,162802]},{"content":"public int ttsLevel()","pos":[162947,162968]},{"content":"Returns the number for the last call to the ttsbegin method that is used to begin a transaction.","pos":[163062,163158]},{"content":"public boolean isInTransactionScope()","pos":[163250,163287]},{"content":"public void finalize()","pos":[163553,163575]},{"content":"public void transactionScopeAbort()","pos":[163856,163891]},{"content":"public void ttsNotifyCommit()","pos":[164159,164188]},{"content":"Is called when the ttscommit method is called.","pos":[164274,164320]},{"content":"public void transactionScopeBegin()","pos":[164462,164497]},{"content":"public void transactionScopeCommit()","pos":[164765,164801]},{"content":"public void ttsNotifyBegin()","pos":[165068,165096]},{"content":"public void ttsbegin()","pos":[165371,165393]},{"content":"Begins a transaction.","pos":[165486,165507]},{"content":"public void ttsabort()","pos":[165674,165696]},{"content":"Discards changes that are associated with a transaction and rolls the database back to the original state.","pos":[165789,165895]},{"content":"public void new()","pos":[165977,165994]},{"content":"Initializes a new instance of the Connection class.","pos":[166092,166143]},{"content":"public void ttsNotifyAbort()","pos":[166280,166308]},{"content":"Is called when an exception is thrown.","pos":[166395,166433]},{"content":"public void ttscommit()","pos":[166583,166606]},{"content":"Commits the changes that are associated with a transaction to the database.","pos":[166698,166773]},{"pos":[166889,166911],"content":"Method createStatement","linkify":"Method createStatement","nodes":[{"content":"Method createStatement","pos":[0,22]}]},{"content":"Creates a Statement object that is used to execute an SQL statement.","pos":[166913,166981]},{"pos":[167102,167112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"resultSetType","pos":[167114,167127]},{"content":"A ResultSetConcurrency enumeration that specifies ReadOnly by default.","pos":[167130,167200]},{"content":"resultSetConcurrency","pos":[167212,167232]},{"content":"A ResultSetConcurrency enumeration that specifies ReadOnly by default.","pos":[167235,167305]},{"pos":[167312,167324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A data type value that is a new Statement object.","pos":[167326,167375]},{"pos":[167382,167389],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"There is risk of an SQL injection threat when you use the createStatement method to create an SQL statement and then allow a user to control input to the statement.","pos":[167391,167555]},{"content":"For information about SQL injection, see http://go.microsoft.com/fwlink/?LinkId=114986.","pos":[167556,167643]},{"content":"You can use Query Elements in the AOT, views, and X++ Select statements as safer alternatives to executing SQL statements.","pos":[167644,167766]},{"pos":[167772,167793],"content":"Method odbcGetInfoInt","linkify":"Method odbcGetInfoInt","nodes":[{"content":"Method odbcGetInfoInt","pos":[0,21]}]},{"content":"Provides an interface to the SQLGetInfo Open Database Connectivity (ODBC) function to retrieve information about the ODBC driver and data source that are associated with a connection.","pos":[167795,167978]},{"pos":[168028,168038],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"InfoId","pos":[168040,168046]},{"content":"An integer that specifies an ID for the requested information according to the ODBC standard.","pos":[168049,168142]},{"pos":[168149,168161],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value for the information that is retrieved.","pos":[168163,168218]},{"pos":[168225,168233],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"In the following example, the odbcGetInfoInt method returns an integer value for the maximum length of the column name.","pos":[168235,168354]},{"pos":[168826,168848],"content":"Method odbcGetInfoLong","linkify":"Method odbcGetInfoLong","nodes":[{"content":"Method odbcGetInfoLong","pos":[0,22]}]},{"content":"Provides an interface to the SQLGetInfo ODBC function to retrieve information about the ODBC driver and data source that are associated with a connection.","pos":[168850,169004]},{"pos":[169055,169065],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"InfoId","pos":[169067,169073]},{"content":"An Integer data type that specifies an ID for the requested information, according to the ODBC standard.","pos":[169076,169180]},{"pos":[169187,169199],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value for the information that is retrieved.","pos":[169201,169266]},{"pos":[169273,169280],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method retrieves a 32-bit integer and returns it as an integer.","pos":[169282,169350]},{"pos":[169357,169365],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"In the following example, the odbcGetInfoLong method returns an integer for the maximum row size.","pos":[169367,169464]},{"pos":[169924,169945],"content":"Method odbcGetInfoStr","linkify":"Method odbcGetInfoStr","nodes":[{"content":"Method odbcGetInfoStr","pos":[0,21]}]},{"content":"Provides an interface to the SQLGetInfo ODBC function to retrieve information, in string format, about the ODBC driver and data source that are associated with a connection.","pos":[169947,170120]},{"pos":[170170,170180],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"InfoId","pos":[170182,170188]},{"content":"An Integer data type that specifies an ID for the requested information, according to the ODBC standard.","pos":[170191,170295]},{"pos":[170302,170314],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A String data type value for the information that is retrieved.","pos":[170316,170379]},{"pos":[170386,170394],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"In the following example, the odbcGetInfoStr method returns the name of the database management system.","pos":[170396,170499]},{"pos":[170917,170932],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Converts the Connection object to a string.","pos":[170934,170977]},{"pos":[171011,171023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string value for the Connection object.","pos":[171025,171066]},{"pos":[171072,171087],"content":"Method ttsLevel","linkify":"Method ttsLevel","nodes":[{"content":"Method ttsLevel","pos":[0,15]}]},{"content":"Returns the number for the last call to the ttsbegin method that is used to begin a transaction.","pos":[171089,171185]},{"pos":[171219,171231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the number for the last call to the ttsbegin method.","pos":[171233,171317]},{"content":"For example, if the ttsLevel method is called after the third call to the ttsbegin method, the return value is 3.","pos":[171318,171431]},{"pos":[171437,171464],"content":"Method isInTransactionScope","linkify":"Method isInTransactionScope","nodes":[{"content":"Method isInTransactionScope","pos":[0,27]}]},{"pos":[171514,171526],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171532,171547],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[171581,171609],"content":"Method transactionScopeAbort","linkify":"Method transactionScopeAbort","nodes":[{"content":"Method transactionScopeAbort","pos":[0,28]}]},{"pos":[171656,171678],"content":"Method ttsNotifyCommit","linkify":"Method ttsNotifyCommit","nodes":[{"content":"Method ttsNotifyCommit","pos":[0,22]}]},{"content":"Is called when the ttscommit method is called.","pos":[171680,171726]},{"pos":[171767,171795],"content":"Method transactionScopeBegin","linkify":"Method transactionScopeBegin","nodes":[{"content":"Method transactionScopeBegin","pos":[0,28]}]},{"pos":[171842,171871],"content":"Method transactionScopeCommit","linkify":"Method transactionScopeCommit","nodes":[{"content":"Method transactionScopeCommit","pos":[0,29]}]},{"pos":[171919,171940],"content":"Method ttsNotifyBegin","linkify":"Method ttsNotifyBegin","nodes":[{"content":"Method ttsNotifyBegin","pos":[0,21]}]},{"pos":[171980,171995],"content":"Method ttsbegin","linkify":"Method ttsbegin","nodes":[{"content":"Method ttsbegin","pos":[0,15]}]},{"content":"Begins a transaction.","pos":[171997,172018]},{"pos":[172052,172067],"content":"Method ttsabort","linkify":"Method ttsabort","nodes":[{"content":"Method ttsabort","pos":[0,15]}]},{"content":"Discards changes that are associated with a transaction and rolls the database back to the original state.","pos":[172069,172175]},{"pos":[172209,172219],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Connection class.","pos":[172221,172272]},{"pos":[172301,172322],"content":"Method ttsNotifyAbort","linkify":"Method ttsNotifyAbort","nodes":[{"content":"Method ttsNotifyAbort","pos":[0,21]}]},{"content":"Is called when an exception is thrown.","pos":[172324,172362]},{"pos":[172402,172418],"content":"Method ttscommit","linkify":"Method ttscommit","nodes":[{"content":"Method ttscommit","pos":[0,16]}]},{"content":"Commits the changes that are associated with a transaction to the database.","pos":[172420,172495]},{"pos":[172529,172549],"content":"Class ContainerClass","linkify":"Class ContainerClass","nodes":[{"content":"Class ContainerClass","pos":[0,20]}]},{"pos":[172595,172602],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[172608,172616],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[172622,172629],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[172633,172639]},{"content":"Description","pos":[172703,172714]},{"content":"public int length()","pos":[172887,172906]},{"content":"public container toBlob()","pos":[173014,173039]},{"content":"public str toString()","pos":[173141,173162]},{"content":"Returns a string that represents the current object.","pos":[173211,173263]},{"content":"public container value()","pos":[173268,173292]},{"content":"::public static container blob2Container(container blob<ph id=\"ph1\">\\_</ph>container)","pos":[173395,173462],"source":"::public static container blob2Container(container blob\\_container)"},{"content":"::public static int containerLength(container container)","pos":[173522,173578]},{"content":"public void new(container container)","pos":[173649,173685]},{"content":"Initializes a new instance of the Object class.","pos":[173719,173766]},{"pos":[173779,173792],"content":"Method length","linkify":"Method length","nodes":[{"content":"Method length","pos":[0,13]}]},{"pos":[173824,173836],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[173842,173855],"content":"Method toBlob","linkify":"Method toBlob","nodes":[{"content":"Method toBlob","pos":[0,13]}]},{"pos":[173893,173905],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[173911,173926],"content":"Method toString","linkify":"Method toString","nodes":[{"content":"Method toString","pos":[0,15]}]},{"content":"Returns a string that represents the current object.","pos":[173928,173980]},{"pos":[174014,174026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A string that represents the current object.","pos":[174028,174072]},{"pos":[174079,174086],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The default implementation returns the class name of the object.","pos":[174088,174152]},{"content":"The method can be overridden in a derived class to return values that are meaningful for that type.","pos":[174153,174252]},{"content":"For example, an instance of the SysMethodInfo class returns the method name and type of the method, such as instance or static.","pos":[174253,174380]},{"pos":[174386,174398],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[174435,174447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[174453,174474],"content":"Method blob2Container","linkify":"Method blob2Container","nodes":[{"content":"Method blob2Container","pos":[0,21]}]},{"pos":[174551,174561],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"blob<ph id=\"ph1\">\\_</ph>container","pos":[174563,174578],"source":"blob\\_container"},{"pos":[174587,174599],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[174605,174627],"content":"Method containerLength","linkify":"Method containerLength","nodes":[{"content":"Method containerLength","pos":[0,22]}]},{"pos":[174694,174704],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[174706,174715]},{"pos":[174724,174736],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[174742,174752],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[174754,174801]},{"pos":[174850,174860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"container","pos":[174862,174871]},{"pos":[174878,174902],"content":"Class ControlFilterValue","linkify":"Class ControlFilterValue","nodes":[{"content":"Class ControlFilterValue","pos":[0,24]}]},{"pos":[174957,174964],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[174970,174978],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[174984,174991],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[174995,175001]},{"content":"Description","pos":[175051,175062]},{"content":"public FormControl control()","pos":[175211,175239]},{"content":"public void new(FormControl control, str filterValue)","pos":[175319,175372]},{"content":"Initializes a new instance of the Object class.","pos":[175375,175422]},{"pos":[175430,175444],"content":"Method control","linkify":"Method control","nodes":[{"content":"Method control","pos":[0,14]}]},{"pos":[175485,175497],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[175503,175513],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[175515,175562]},{"pos":[175628,175638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[175640,175647]},{"content":"filterValue","pos":[175661,175672]},{"pos":[175679,175696],"content":"Class ControlNode","linkify":"Class ControlNode","nodes":[{"content":"Class ControlNode","pos":[0,17]}]},{"content":"The ControlNode class lets you create, read, update, and delete X++ code and metadata.","pos":[175737,175823]},{"pos":[175829,175836],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Make sure that the user has access to the development security key (SysDevelopment) before this API is called.","pos":[175838,175948]},{"pos":[175954,175962],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[175968,175975],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[175979,175985]},{"content":"Description","pos":[176028,176039]},{"content":"public void new(str name, <ph id=\"ph1\">\\[</ph>TreeNode parent<ph id=\"ph2\">\\]</ph>)","pos":[176185,176231],"source":"public void new(str name, \\[TreeNode parent\\])"},{"content":"Initializes a new instance of the TreeNode class.","pos":[176234,176283]},{"pos":[176291,176301],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the TreeNode class.","pos":[176303,176352]},{"pos":[176409,176419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"name","pos":[176421,176425]},{"content":"parent","pos":[176439,176445]},{"pos":[176452,176467],"content":"Class CryptoAPI","linkify":"Class CryptoAPI","nodes":[{"content":"Class CryptoAPI","pos":[0,15]}]},{"pos":[176508,176515],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[176521,176529],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[176535,176542],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[176546,176552]},{"content":"Description","pos":[176589,176600]},{"content":"public container decrypt(container blob)","pos":[176736,176776]},{"content":"public container encrypt(container blob)","pos":[176831,176871]},{"content":"public container getKey()","pos":[176926,176951]},{"content":"public Int64 salt()","pos":[177021,177040]},{"content":"public void new(Int64 salt)","pos":[177116,177143]},{"content":"Initializes a new instance of the Object class.","pos":[177159,177206]},{"content":"::public static void resetKey()","pos":[177211,177242]},{"pos":[177309,177323],"content":"Method decrypt","linkify":"Method decrypt","nodes":[{"content":"Method decrypt","pos":[0,14]}]},{"pos":[177376,177386],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"blob","pos":[177388,177392]},{"pos":[177401,177413],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177419,177433],"content":"Method encrypt","linkify":"Method encrypt","nodes":[{"content":"Method encrypt","pos":[0,14]}]},{"pos":[177486,177496],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"blob","pos":[177498,177502]},{"pos":[177511,177523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177529,177542],"content":"Method getKey","linkify":"Method getKey","nodes":[{"content":"Method getKey","pos":[0,13]}]},{"pos":[177580,177592],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177598,177609],"content":"Method salt","linkify":"Method salt","nodes":[{"content":"Method salt","pos":[0,11]}]},{"pos":[177641,177653],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[177659,177669],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the Object class.","pos":[177671,177718]},{"pos":[177758,177768],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"salt","pos":[177770,177774]},{"pos":[177782,177797],"content":"Method resetKey","linkify":"Method resetKey","nodes":[{"content":"Method resetKey","pos":[0,15]}]},{"pos":[177837,177846],"content":"Class Cue","linkify":"Class Cue","nodes":[{"content":"Class Cue","pos":[0,9]}]},{"pos":[177883,177890],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[177896,177904],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[177910,177917],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[177921,177927]},{"content":"Description","pos":[177970,177981]},{"content":"public str changedBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[178303,178338],"source":"public str changedBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[178352,178426]},{"content":"public Date changedDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[178494,178533],"source":"public Date changedDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was last changed.","pos":[178543,178604]},{"content":"public str changedTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[178685,178722],"source":"public str changedTime(\\[str value\\])"},{"content":"Gets or sets the time an application object was last changed.","pos":[178734,178795]},{"content":"public str createdBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[178876,178911],"source":"public str createdBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who created the application object.","pos":[178925,178994]},{"content":"public Date creationDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[179067,179107],"source":"public Date creationDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was created.","pos":[179116,179172]},{"content":"public str creationTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[179258,179296],"source":"public str creationTime(\\[str value\\])"},{"content":"public int cueMax(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[179449,179481],"source":"public int cueMax(\\[int value\\])"},{"content":"public str dataField(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[179640,179675],"source":"public str dataField(\\[str value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[179831,179862],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[179880,179917]},{"content":"public str LabelId()","pos":[180022,180042]},{"content":"public str menuItemName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[180213,180251],"source":"public str menuItemName(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[180404,180434],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[180453,180591]},{"content":"public Guid origin(<ph id=\"ph1\">\\[</ph>Guid value<ph id=\"ph2\">\\]</ph>)","pos":[180596,180630],"source":"public Guid origin(\\[Guid value\\])"},{"content":"public str previewPartReference(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[180787,180833],"source":"public str previewPartReference(\\[str value\\])"},{"content":"public boolean showAlert(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[180978,181021],"source":"public boolean showAlert(\\[boolean value\\])"},{"content":"public int showAlertValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[181169,181209],"source":"public int showAlertValue(\\[int value\\])"},{"content":"public int showAlertWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[181360,181399],"source":"public int showAlertWhen(\\[int value\\])"},{"content":"public boolean showSum(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[181551,181592],"source":"public boolean showSum(\\[boolean value\\])"},{"content":"public str table(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[181742,181773],"source":"public str table(\\[str value\\])"},{"content":"Gets or sets the table ID associated with the object.","pos":[181791,181844]},{"content":"public void new(str cueName)","pos":[181933,181961]},{"content":"Initializes a new instance of the TreeNode class.","pos":[181982,182031]},{"pos":[182127,182143],"content":"Method changedBy","linkify":"Method changedBy","nodes":[{"content":"Method changedBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[182145,182219]},{"pos":[182265,182275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[182277,182282]},{"pos":[182291,182303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[182305,182326]},{"pos":[182332,182350],"content":"Method changedDate","linkify":"Method changedDate","nodes":[{"content":"Method changedDate","pos":[0,18]}]},{"content":"Gets or sets the date an application object was last changed.","pos":[182352,182413]},{"pos":[182463,182473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[182475,182480]},{"pos":[182489,182501],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was last changed.","pos":[182503,182551]},{"pos":[182557,182575],"content":"Method changedTime","linkify":"Method changedTime","nodes":[{"content":"Method changedTime","pos":[0,18]}]},{"content":"Gets or sets the time an application object was last changed.","pos":[182577,182638]},{"pos":[182686,182696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[182698,182703]},{"pos":[182712,182724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The time an application object was last changed.","pos":[182726,182774]},{"pos":[182780,182796],"content":"Method createdBy","linkify":"Method createdBy","nodes":[{"content":"Method createdBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who created the application object.","pos":[182798,182867]},{"pos":[182913,182923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[182925,182930]},{"pos":[182939,182951],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[182953,182974]},{"pos":[182980,182999],"content":"Method creationDate","linkify":"Method creationDate","nodes":[{"content":"Method creationDate","pos":[0,19]}]},{"content":"Gets or sets the date an application object was created.","pos":[183001,183057]},{"pos":[183108,183118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183120,183125]},{"pos":[183134,183146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was created.","pos":[183148,183191]},{"pos":[183197,183216],"content":"Method creationTime","linkify":"Method creationTime","nodes":[{"content":"Method creationTime","pos":[0,19]}]},{"pos":[183265,183275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183277,183282]},{"pos":[183291,183303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[183309,183322],"content":"Method cueMax","linkify":"Method cueMax","nodes":[{"content":"Method cueMax","pos":[0,13]}]},{"pos":[183365,183375],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183377,183382]},{"pos":[183391,183403],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[183409,183425],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[183471,183481],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183483,183488]},{"pos":[183497,183509],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[183515,183527],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[183529,183566]},{"pos":[183608,183618],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183620,183625]},{"pos":[183634,183646],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[183648,183686]},{"pos":[183693,183700],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[183702,183780]},{"content":"The label property value cannot exceed 250 characters.","pos":[183781,183835]},{"pos":[183841,183855],"content":"Method LabelId","linkify":"Method LabelId","nodes":[{"content":"Method LabelId","pos":[0,14]}]},{"pos":[183888,183900],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[183906,183925],"content":"Method menuItemName","linkify":"Method menuItemName","nodes":[{"content":"Method menuItemName","pos":[0,19]}]},{"pos":[183974,183984],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[183986,183991]},{"pos":[184000,184012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[184018,184029],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[184031,184169]},{"pos":[184210,184220],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[184222,184227]},{"pos":[184236,184248],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[184250,184314]},{"pos":[184321,184328],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[184330,184424]},{"content":"Begins with a letter.","pos":[184430,184451]},{"content":"Doesn't exceed 250 characters.","pos":[184456,184486]},{"content":"Can include numbers and underscore characters.","pos":[184491,184537]},{"content":"Cannot include punctuation or spaces.","pos":[184542,184579]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, and classes.","pos":[184584,184707]},{"pos":[184713,184726],"content":"Method origin","linkify":"Method origin","nodes":[{"content":"Method origin","pos":[0,13]}]},{"pos":[184771,184781],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[184783,184788]},{"pos":[184797,184809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[184815,184842],"content":"Method previewPartReference","linkify":"Method previewPartReference","nodes":[{"content":"Method previewPartReference","pos":[0,27]}]},{"pos":[184899,184909],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[184911,184916]},{"pos":[184925,184937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[184943,184959],"content":"Method showAlert","linkify":"Method showAlert","nodes":[{"content":"Method showAlert","pos":[0,16]}]},{"pos":[185013,185023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[185025,185030]},{"pos":[185039,185051],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[185057,185078],"content":"Method showAlertValue","linkify":"Method showAlertValue","nodes":[{"content":"Method showAlertValue","pos":[0,21]}]},{"pos":[185129,185139],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[185141,185146]},{"pos":[185155,185167],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[185173,185193],"content":"Method showAlertWhen","linkify":"Method showAlertWhen","nodes":[{"content":"Method showAlertWhen","pos":[0,20]}]},{"pos":[185243,185253],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[185255,185260]},{"pos":[185269,185281],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[185287,185301],"content":"Method showSum","linkify":"Method showSum","nodes":[{"content":"Method showSum","pos":[0,14]}]},{"pos":[185353,185363],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[185365,185370]},{"pos":[185379,185391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[185397,185409],"content":"Method table","linkify":"Method table","nodes":[{"content":"Method table","pos":[0,12]}]},{"content":"Gets or sets the table ID associated with the object.","pos":[185411,185464]},{"pos":[185506,185516],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[185518,185523]},{"pos":[185532,185544],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the table ID associated with the object.","pos":[185546,185607]},{"pos":[185613,185623],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the TreeNode class.","pos":[185625,185674]},{"pos":[185715,185725],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cueName","pos":[185727,185734]},{"pos":[185741,185755],"content":"Class CueGroup","linkify":"Class CueGroup","nodes":[{"content":"Class CueGroup","pos":[0,14]}]},{"pos":[185797,185804],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[185810,185818],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[185824,185831],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[185835,185841]},{"content":"Description","pos":[185878,185889]},{"content":"public str changedBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[186213,186248],"source":"public str changedBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[186256,186330]},{"content":"public Date changedDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[186402,186441],"source":"public Date changedDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was last changed.","pos":[186445,186506]},{"content":"public str changedTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[186591,186628],"source":"public str changedTime(\\[str value\\])"},{"content":"Gets or sets the time an application object was last changed.","pos":[186634,186695]},{"content":"public str createdBy(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[186780,186815],"source":"public str createdBy(\\[str value\\])"},{"content":"Gets or sets the name of the user who created the application object.","pos":[186823,186892]},{"content":"public Date creationDate(<ph id=\"ph1\">\\[</ph>Date value<ph id=\"ph2\">\\]</ph>)","pos":[186969,187009],"source":"public Date creationDate(\\[Date value\\])"},{"content":"Gets or sets the date an application object was created.","pos":[187012,187068]},{"content":"public str creationTime(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[187158,187196],"source":"public str creationTime(\\[str value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[187347,187378],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[187390,187427]},{"content":"public str LabelId()","pos":[187536,187556]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[187725,187755],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[187768,187910]},{"content":"public Guid origin(<ph id=\"ph1\">\\[</ph>Guid value<ph id=\"ph2\">\\]</ph>)","pos":[187915,187949],"source":"public Guid origin(\\[Guid value\\])"},{"content":"public void new(str cueGroupName)","pos":[188104,188137]},{"content":"Initializes a new instance of the TreeNode class.","pos":[188147,188196]},{"pos":[188296,188312],"content":"Method changedBy","linkify":"Method changedBy","nodes":[{"content":"Method changedBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who last changed the application object.","pos":[188314,188388]},{"pos":[188434,188444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[188446,188451]},{"pos":[188460,188472],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[188474,188495]},{"pos":[188501,188519],"content":"Method changedDate","linkify":"Method changedDate","nodes":[{"content":"Method changedDate","pos":[0,18]}]},{"content":"Gets or sets the date an application object was last changed.","pos":[188521,188582]},{"pos":[188632,188642],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[188644,188649]},{"pos":[188658,188670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was last changed.","pos":[188672,188720]},{"pos":[188726,188744],"content":"Method changedTime","linkify":"Method changedTime","nodes":[{"content":"Method changedTime","pos":[0,18]}]},{"content":"Gets or sets the time an application object was last changed.","pos":[188746,188807]},{"pos":[188855,188865],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[188867,188872]},{"pos":[188881,188893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The time an application object was last changed.","pos":[188895,188943]},{"pos":[188949,188965],"content":"Method createdBy","linkify":"Method createdBy","nodes":[{"content":"Method createdBy","pos":[0,16]}]},{"content":"Gets or sets the name of the user who created the application object.","pos":[188967,189036]},{"pos":[189082,189092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189094,189099]},{"pos":[189108,189120],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the user.","pos":[189122,189143]},{"pos":[189149,189168],"content":"Method creationDate","linkify":"Method creationDate","nodes":[{"content":"Method creationDate","pos":[0,19]}]},{"content":"Gets or sets the date an application object was created.","pos":[189170,189226]},{"pos":[189277,189287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189289,189294]},{"pos":[189303,189315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The date an application object was created.","pos":[189317,189360]},{"pos":[189366,189385],"content":"Method creationTime","linkify":"Method creationTime","nodes":[{"content":"Method creationTime","pos":[0,19]}]},{"pos":[189434,189444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189446,189451]},{"pos":[189460,189472],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[189478,189490],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[189492,189529]},{"pos":[189571,189581],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189583,189588]},{"pos":[189597,189609],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[189611,189649]},{"pos":[189656,189663],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[189665,189743]},{"content":"The label property value cannot exceed 250 characters.","pos":[189744,189798]},{"pos":[189804,189818],"content":"Method LabelId","linkify":"Method LabelId","nodes":[{"content":"Method LabelId","pos":[0,14]}]},{"pos":[189851,189863],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[189869,189880],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in the code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[189882,190024]},{"pos":[190065,190075],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190077,190082]},{"pos":[190091,190103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in the code to identify an application object.","pos":[190105,190173]},{"pos":[190180,190187],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[190189,190283]},{"content":"Begins with a letter.","pos":[190289,190310]},{"content":"Doesn't exceed 250 characters.","pos":[190315,190345]},{"content":"Can include numbers and underscore characters.","pos":[190350,190396]},{"content":"Cannot include punctuation or spaces.","pos":[190401,190438]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumeration types, and classes.","pos":[190443,190566]},{"pos":[190572,190585],"content":"Method origin","linkify":"Method origin","nodes":[{"content":"Method origin","pos":[0,13]}]},{"pos":[190630,190640],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190642,190647]},{"pos":[190656,190668],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190674,190684],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the TreeNode class.","pos":[190686,190735]},{"pos":[190781,190791],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cueGroupName","pos":[190793,190805]},{"pos":[190812,190830],"content":"Class CueReference","linkify":"Class CueReference","nodes":[{"content":"Class CueReference","pos":[0,18]}]},{"pos":[190876,190883],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[190889,190897],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[190903,190910],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[190914,190920]},{"content":"Description","pos":[190954,190965]},{"content":"public str cue(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[191262,191291],"source":"public str cue(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[191436,191466],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[191476,191606]},{"content":"public void new(str cueReferenceName)","pos":[191611,191648]},{"content":"Initializes a new instance of the TreeNode class.","pos":[191651,191700]},{"pos":[191788,191798],"content":"Method cue","linkify":"Method cue","nodes":[{"content":"Method cue","pos":[0,10]}]},{"pos":[191838,191848],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191850,191855]},{"pos":[191864,191876],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[191882,191893],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name used in code to identify a form, report, table, query, or another Finance and Operations application object.","pos":[191895,192025]},{"pos":[192066,192076],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192078,192083]},{"pos":[192092,192104],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name used in code to identify an application object.","pos":[192106,192162]},{"pos":[192169,192176],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[192178,192272]},{"content":"Begins with a letter.","pos":[192278,192299]},{"content":"Does not exceed 250 characters.","pos":[192304,192335]},{"content":"Can include numbers and underscore characters.","pos":[192340,192386]},{"content":"Does not include punctuation or spaces.","pos":[192391,192430]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enumerations, classes, and other public objects.","pos":[192435,192575]},{"pos":[192581,192591],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the TreeNode class.","pos":[192593,192642]},{"pos":[192692,192702],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cueReferenceName","pos":[192704,192720]},{"content":"The name to use to identify this form, report, table, query, or other application object.","pos":[192723,192812]}]}