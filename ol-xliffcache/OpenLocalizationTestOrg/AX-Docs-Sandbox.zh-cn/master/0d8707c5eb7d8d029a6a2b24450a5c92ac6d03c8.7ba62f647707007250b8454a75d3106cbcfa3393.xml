{"nodes":[{"pos":[32,80],"content":"X++ Business run-time functions | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"X++ Business run-time functions | Microsoft Docs","pos":[0,48]}]},{"pos":[94,146],"content":"This wiki describes the business run-time functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"This wiki describes the business run-time functions.","pos":[0,52]}]},{"pos":[560,591],"content":"X++ Business run-time functions","linkify":"X++ Business run-time functions","nodes":[{"content":"X++ Business run-time functions","pos":[0,31]}]},{"content":"These functions enter financial data and calculate formulas.","pos":[593,653]},{"pos":[658,663],"content":"cTerm","linkify":"cTerm","nodes":[{"content":"cTerm","pos":[0,5]}]},{"content":"Calculates the number of periods that are required for the current investment value to yield a target value.","pos":[664,772]},{"pos":[778,784],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[860,870],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[874,883]},{"content":"Description","pos":[891,902]},{"content":"interest","pos":[976,984]},{"content":"The interest rate.","pos":[993,1011]},{"content":"future<ph id=\"ph1\">\\_</ph>value","pos":[1027,1040],"source":"future\\_value"},{"content":"The target value.","pos":[1044,1061]},{"content":"current<ph id=\"ph1\">\\_</ph>value","pos":[1078,1092],"source":"current\\_value"},{"content":"The current investment value.","pos":[1095,1124]},{"pos":[1132,1144],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[1146,1220],"content":"The number of periods that are required in order to reach <bpt id=\"p1\">*</bpt>future<ph id=\"ph1\">\\_</ph>value<ept id=\"p1\">*</ept>.","source":"The number of periods that are required in order to reach *future\\_value*."},{"pos":[1226,1233],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1235,1336],"content":"The <bpt id=\"p1\">*</bpt>current<ph id=\"ph1\">\\_</ph>value<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>future<ph id=\"ph2\">\\_</ph>value<ept id=\"p2\">*</ept> parameters must have the same prefixed sign (plus or minus).","source":"The *current\\_value* and *future\\_value* parameters must have the same prefixed sign (plus or minus)."},{"pos":[1342,1349],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1542,1545],"content":"ddb","linkify":"ddb","nodes":[{"content":"ddb","pos":[0,3]}]},{"content":"Calculates the accelerated depreciation of an asset.","pos":[1551,1603]},{"pos":[1609,1615],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1682,1692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1696,1705]},{"content":"Description","pos":[1708,1719]},{"content":"price","pos":[1846,1851]},{"content":"The purchase price of the asset.","pos":[1858,1890]},{"content":"scrap","pos":[1921,1926]},{"content":"The residual value of the asset that has been written off.","pos":[1933,1991]},{"content":"life","pos":[1996,2000]},{"content":"The expected lifetime of the asset.","pos":[2008,2043]},{"content":"period","pos":[2071,2077]},{"content":"The period to calculate depreciation over.","pos":[2083,2125]},{"pos":[2149,2161],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The depreciation of the asset.","pos":[2163,2193]},{"pos":[2199,2206],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The book value for a specific period is equal to the purchase price minus the accumulated depreciation for previous periods:","pos":[2208,2332]},{"content":"Book value for Period 1 = Price","pos":[2338,2369]},{"content":"Book value for Period 2 = Book value for Period 1 – Depreciation for Period 1","pos":[2374,2451]},{"content":"Book value for Period n = Book value for Period (n–1) – Depreciation for Period (n–1)","pos":[2456,2541]},{"content":"There are three variations for the calculation of depreciation: If Period <ph id=\"ph1\">&amp;gt;</ph> Life:","pos":[2543,2627],"source":"There are three variations for the calculation of depreciation: If Period &gt; Life:"},{"content":"Depreciation = 0","pos":[2633,2649]},{"content":"If (Book value for Period n) – ((Book value for Period n) × 2 ÷ Life) <ph id=\"ph1\">&amp;lt;</ph> Residual value:","pos":[2651,2741],"source":"If (Book value for Period n) – ((Book value for Period n) × 2 ÷ Life) &lt; Residual value:"},{"content":"Depreciation = (Book value for Period n) – Residual value","pos":[2747,2804]},{"content":"In all other cases: Depreciation = (Book value for Period n) × 2 ÷ Life The <bpt id=\"p1\">**</bpt>syd<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>sln<ept id=\"p2\">**</ept> functions also calculate the depreciation of an asset.","pos":[2806,2956],"source":"In all other cases: Depreciation = (Book value for Period n) × 2 ÷ Life The **syd** and **sln** functions also calculate the depreciation of an asset."},{"content":"The <bpt id=\"p1\">**</bpt>syd<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>ddb<ept id=\"p2\">**</ept> functions enables higher depreciation for the earlier years, whereas <bpt id=\"p3\">**</bpt>sln<ept id=\"p3\">**</ept> calculates a linear depreciation.","pos":[2957,3091],"source":" The **syd** and **ddb** functions enables higher depreciation for the earlier years, whereas **sln** calculates a linear depreciation."},{"pos":[3198,3200],"content":"dg","linkify":"dg","nodes":[{"content":"dg","pos":[0,2]}]},{"content":"Calculates the contribution ratio, which is based on the sales price and the purchase price.","pos":[3205,3297]},{"content":"If the value of the <bpt id=\"p1\">*</bpt>sale<ept id=\"p1\">*</ept> parameter is <bpt id=\"p2\">**</bpt>0.0<ept id=\"p2\">**</ept>, the calculation can't be done.","pos":[3298,3377],"source":" If the value of the *sale* parameter is **0.0**, the calculation can't be done."},{"pos":[3383,3389],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3434,3444],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[3448,3457]},{"content":"Description","pos":[3460,3471]},{"content":"sale","pos":[3520,3524]},{"content":"The sale price.","pos":[3532,3547]},{"content":"purchase","pos":[3556,3564]},{"content":"The purchase price.","pos":[3568,3587]},{"pos":[3595,3607],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The contribution ratio.","pos":[3609,3632]},{"pos":[3638,3645],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3780,3782],"content":"fV","linkify":"fV","nodes":[{"content":"fV","pos":[0,2]}]},{"content":"Calculates the future value of an investment.","pos":[3787,3832]},{"pos":[3838,3844],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3902,3912],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[3916,3925]},{"content":"Description","pos":[3928,3939]},{"content":"amount","pos":[4044,4050]},{"content":"The amount that was paid in during each period.","pos":[4056,4103]},{"content":"interest","pos":[4108,4116]},{"content":"The interest rate.","pos":[4120,4138]},{"content":"life","pos":[4172,4176]},{"content":"The number of investment periods.","pos":[4184,4217]},{"pos":[4239,4251],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The future value of the investment.","pos":[4253,4288]},{"pos":[4294,4301],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4403,4406],"content":"idg","linkify":"idg","nodes":[{"content":"idg","pos":[0,3]}]},{"content":"Calculates the sale price, based on the purchase price and the contribution ratio.","pos":[4412,4494]},{"pos":[4554,4564],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[4568,4577]},{"content":"Description","pos":[4590,4601]},{"content":"purchase","pos":[4668,4676]},{"content":"The purchase price.","pos":[4690,4709]},{"content":"contribution<ph id=\"ph1\">\\_</ph>ratio","pos":[4718,4737],"source":"contribution\\_ratio"},{"content":"The contribution ratio.","pos":[4740,4763]},{"pos":[4771,4783],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The sale price.","pos":[4785,4800]},{"pos":[4806,4813],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the contribution ratio is equal to <bpt id=\"p1\">**</bpt>1.0<ept id=\"p1\">**</ept>, the calculation can't be done.","pos":[4815,4892],"source":"If the contribution ratio is equal to **1.0**, the calculation can't be done."},{"content":"The <bpt id=\"p1\">**</bpt>idg<ept id=\"p1\">**</ept> function is the inverse of the <bpt id=\"p2\">**</bpt>dg<ept id=\"p2\">**</ept> function.","pos":[4893,4952],"source":" The **idg** function is the inverse of the **dg** function."},{"pos":[5050,5057],"content":"intvMax","linkify":"intvMax","nodes":[{"content":"intvMax","pos":[0,7]}]},{"pos":[5058,5192],"content":"Retrieves the number of intervals for the specified period when the period is divided into parts as specified by the <bpt id=\"p1\">*</bpt>func<ept id=\"p1\">*</ept> parameter.","source":"Retrieves the number of intervals for the specified period when the period is divided into parts as specified by the *func* parameter."},{"pos":[5257,5267],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[5271,5280]},{"content":"Description","pos":[5285,5296]},{"content":"input<ph id=\"ph1\">\\_</ph>date","pos":[5457,5468],"source":"input\\_date"},{"pos":[5471,5545],"content":"The end of the period, which must be later than the <bpt id=\"p1\">*</bpt>ref<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> parameter.","source":"The end of the period, which must be later than the *ref\\_date* parameter."},{"content":"ref<ph id=\"ph1\">\\_</ph>date","pos":[5550,5559],"source":"ref\\_date"},{"content":"The start of the period.","pos":[5564,5588]},{"content":"func","pos":[5643,5647]},{"pos":[5657,5731],"content":"A <bpt id=\"p1\">**</bpt>IntvScale<ept id=\"p1\">**</ept> system enumeration value that indicates the division unit.","source":"A **IntvScale** system enumeration value that indicates the division unit."},{"pos":[5739,5746],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5748,5802],"content":"Here are the possible values for the <bpt id=\"p1\">*</bpt>func<ept id=\"p1\">*</ept> parameter:","source":"Here are the possible values for the *func* parameter:"},{"content":"None","pos":[5808,5812]},{"content":"YearMonthDay","pos":[5817,5829]},{"content":"YearMonth","pos":[5834,5843]},{"content":"Year","pos":[5848,5852]},{"content":"MonthDay","pos":[5857,5865]},{"content":"Month","pos":[5870,5875]},{"content":"Day","pos":[5880,5883]},{"content":"YearQuarter","pos":[5888,5899]},{"content":"Quarter","pos":[5904,5911]},{"content":"YearWeek","pos":[5916,5924]},{"content":"Week","pos":[5929,5933]},{"content":"WeekDay","pos":[5938,5945]},{"pos":[5951,5958],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6280,6288],"content":"intvName","linkify":"intvName","nodes":[{"content":"intvName","pos":[0,8]}]},{"content":"Returns the name of the interval that is the specified number of intervals ahead of the specified date.","pos":[6289,6392]},{"pos":[6453,6463],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[6467,6476]},{"content":"Description","pos":[6481,6492]},{"content":"input<ph id=\"ph1\">\\_</ph>date","pos":[6687,6698],"source":"input\\_date"},{"content":"A date in the first interval.","pos":[6701,6730]},{"content":"col","pos":[6797,6800]},{"pos":[6811,6902],"content":"The number of intervals ahead of the date that is specified by the <bpt id=\"p1\">*</bpt>input<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> parameter.","source":"The number of intervals ahead of the date that is specified by the *input\\_date* parameter."},{"content":"func","pos":[6907,6911]},{"pos":[6921,6956],"content":"An <bpt id=\"p1\">**</bpt>intvScale<ept id=\"p1\">**</ept> enumeration value.","source":"An **intvScale** enumeration value."},{"pos":[7020,7032],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the interval.","pos":[7034,7059]},{"pos":[7065,7072],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For example, if the <bpt id=\"p1\">*</bpt>func<ept id=\"p1\">*</ept> parameter is the <bpt id=\"p2\">**</bpt>IntvScale::WeekDay<ept id=\"p2\">**</ept> enumeration value, this method returns the name of the weekday.","pos":[7074,7204],"source":"For example, if the *func* parameter is the **IntvScale::WeekDay** enumeration value, this method returns the name of the weekday."},{"content":"If the <bpt id=\"p1\">*</bpt>func<ept id=\"p1\">*</ept> parameter is the <bpt id=\"p2\">**</bpt>IntvScale::Week<ept id=\"p2\">**</ept> enumeration value, this method returns a string that contains the number of the week.","pos":[7205,7341],"source":" If the *func* parameter is the **IntvScale::Week** enumeration value, this method returns a string that contains the number of the week."},{"pos":[7347,7354],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7795,7801],"content":"intvNo","linkify":"intvNo","nodes":[{"content":"intvNo","pos":[0,6]}]},{"content":"Calculates the number of intervals between two dates when you divide the time into the specified intervals.","pos":[7802,7909]},{"pos":[7915,7921],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[7985,7995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[7999,8008]},{"content":"Description","pos":[8013,8024]},{"content":"input<ph id=\"ph1\">\\_</ph>date","pos":[8129,8140],"source":"input\\_date"},{"content":"A date that indicates the end of the period","pos":[8143,8186]},{"content":"ref<ph id=\"ph1\">\\_</ph>date","pos":[8194,8203],"source":"ref\\_date"},{"content":"A date that indicates the start of the period.","pos":[8208,8254]},{"content":"func","pos":[8259,8263]},{"pos":[8273,8308],"content":"An <bpt id=\"p1\">**</bpt>intvScale<ept id=\"p1\">**</ept> enumeration value.","source":"An **intvScale** enumeration value."},{"pos":[8327,8339],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[8341,8450],"content":"The number of intervals between the dates that are specified by the <bpt id=\"p1\">*</bpt>ref<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>input<ph id=\"ph2\">\\_</ph>date<ept id=\"p2\">*</ept> parameters.","source":"The number of intervals between the dates that are specified by the *ref\\_date* and *input\\_date* parameters."},{"pos":[8456,8463],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8866,8874],"content":"intvNorm","linkify":"intvNorm","nodes":[{"content":"intvNorm","pos":[0,8]}]},{"content":"Returns the normalized date for the period.","pos":[8875,8918]},{"pos":[8924,8930],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[8997,9007],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[9011,9020]},{"content":"Description","pos":[9025,9036]},{"content":"input<ph id=\"ph1\">\\_</ph>date","pos":[9257,9268],"source":"input\\_date"},{"pos":[9271,9375],"content":"The end of the period, which must be later than the date that is specified by the <bpt id=\"p1\">*</bpt>ref<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> parameter.","source":"The end of the period, which must be later than the date that is specified by the *ref\\_date* parameter."},{"content":"ref<ph id=\"ph1\">\\_</ph>date","pos":[9380,9389],"source":"ref\\_date"},{"content":"The start of the period.","pos":[9394,9418]},{"content":"func","pos":[9503,9507]},{"pos":[9517,9594],"content":"An <bpt id=\"p1\">**</bpt>intvScale<ept id=\"p1\">**</ept> enumeration value that indicates the interval division unit.","source":"An **intvScale** enumeration value that indicates the interval division unit."},{"pos":[9629,9641],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The normalized date for the period.","pos":[9643,9678]},{"pos":[9684,9691],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9693,9836],"content":"The returned date will equal the date of the first day in the interval in which the date that is specified by the <bpt id=\"p1\">*</bpt>ref<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> parameter exists.","source":"The returned date will equal the date of the first day in the interval in which the date that is specified by the *ref\\_date* parameter exists."},{"pos":[9842,9849],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9969,9972],"content":"pmt","linkify":"pmt","nodes":[{"content":"pmt","pos":[0,3]}]},{"content":"Calculates the amount that must be paid every period to repay a loan.","pos":[9978,10047]},{"pos":[10053,10059],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[10121,10131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[10135,10144]},{"content":"Description","pos":[10147,10158]},{"content":"principal","pos":[10315,10324]},{"content":"The amount that was originally borrowed.","pos":[10327,10367]},{"content":"interest","pos":[10405,10413]},{"content":"The interest that is applied each period to the amount that was borrowed.","pos":[10417,10490]},{"content":"life","pos":[10495,10499]},{"content":"The number of periods that the loan is repaid over.","pos":[10507,10558]},{"pos":[10588,10600],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The amount that must be paid every period.","pos":[10602,10644]},{"pos":[10650,10657],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">*</bpt>life<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>interest<ept id=\"p2\">*</ept> parameters must be expressed in the same time units.","pos":[10659,10737],"source":"The *life* and *interest* parameters must be expressed in the same time units."},{"content":"The value of the <bpt id=\"p1\">*</bpt>life<ept id=\"p1\">*</ept> parameter must be more than <bpt id=\"p2\">**</bpt>0.0<ept id=\"p2\">**</ept>.","pos":[10738,10798],"source":" The value of the *life* parameter must be more than **0.0**."},{"pos":[10804,10811],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10918,10920],"content":"pt","linkify":"pt","nodes":[{"content":"pt","pos":[0,2]}]},{"content":"Retrieves the sum of a number plus a specified percentage of that number.","pos":[10925,10998]},{"pos":[11004,11010],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[11059,11069],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[11073,11082]},{"content":"Description","pos":[11086,11097]},{"content":"amount","pos":[11161,11167]},{"content":"The original number.","pos":[11174,11194]},{"content":"percentage","pos":[11205,11215]},{"content":"The percentage supplement.","pos":[11218,11244]},{"pos":[11252,11264],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[11266,11333],"content":"The number that is equal to ((<bpt id=\"p1\">*</bpt>amount <ept id=\"p1\">*</ept>× <bpt id=\"p2\">*</bpt>percentage<ept id=\"p2\">*</ept>) + <bpt id=\"p3\">*</bpt>amount<ept id=\"p3\">*</ept>).","source":"The number that is equal to ((*amount *× *percentage*) + *amount*)."},{"pos":[11339,11346],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11443,11445],"content":"pv","linkify":"pv","nodes":[{"content":"pv","pos":[0,2]}]},{"content":"Calculates the present value of an annuity, where an amount is received over multiple periods and the interest rate is deducted for each period.","pos":[11450,11594]},{"pos":[11600,11606],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[11664,11674],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[11678,11687]},{"content":"Description","pos":[11690,11701]},{"content":"amount","pos":[11886,11892]},{"content":"The amount that is paid during each period.","pos":[11898,11941]},{"content":"interest","pos":[11990,11998]},{"content":"The interest rate.","pos":[12002,12020]},{"content":"life","pos":[12094,12098]},{"pos":[12106,12193],"content":"The number of times that the value that is specified by the <bpt id=\"p1\">*</bpt>amount<ept id=\"p1\">*</ept> parameter is paid.","source":"The number of times that the value that is specified by the *amount* parameter is paid."},{"pos":[12201,12213],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The current value of an annuity.","pos":[12215,12247]},{"pos":[12253,12260],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12314,12318],"content":"rate","linkify":"rate","nodes":[{"content":"rate","pos":[0,4]}]},{"content":"Calculates the interest that is required for the current investment value to attain the future value over the specified number of periods.","pos":[12319,12457]},{"pos":[12463,12469],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[12544,12554],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[12558,12567]},{"content":"Description","pos":[12577,12588]},{"content":"<ph id=\"ph1\">\\_</ph>future<ph id=\"ph2\">\\_</ph>value","pos":[12702,12717],"source":"\\_future\\_value"},{"content":"The future value of the investment.","pos":[12721,12756]},{"content":"<ph id=\"ph1\">\\_</ph>current<ph id=\"ph2\">\\_</ph>value","pos":[12774,12790],"source":"\\_current\\_value"},{"content":"The current value of the investment.","pos":[12793,12829]},{"content":"<ph id=\"ph1\">\\_</ph>terms","pos":[12846,12853],"source":"\\_terms"},{"content":"The number of periods that the investment spans.","pos":[12865,12913]},{"pos":[12921,12933],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The calculated interest rate.","pos":[12935,12964]},{"pos":[12970,12977],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13031,13034],"content":"sln","linkify":"sln","nodes":[{"content":"sln","pos":[0,3]}]},{"content":"Retrieves the constant depreciation amount for the specified asset for each depreciation period.","pos":[13040,13136]},{"pos":[13142,13148],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[13203,13213],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[13217,13226]},{"content":"Description","pos":[13229,13240]},{"content":"price","pos":[13363,13368]},{"content":"The purchase price of the asset.","pos":[13375,13407]},{"content":"scrap","pos":[13436,13441]},{"content":"The scrap value of the asset.","pos":[13448,13477]},{"content":"life","pos":[13509,13513]},{"content":"The number of periods in the expected life of the asset.","pos":[13521,13577]},{"pos":[13585,13597],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The depreciation amount.","pos":[13599,13623]},{"pos":[13629,13636],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13786,13789],"content":"syd","linkify":"syd","nodes":[{"content":"syd","pos":[0,3]}]},{"content":"Calculates the depreciation of an asset over a specified period.","pos":[13795,13859]},{"pos":[13865,13871],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[13942,13952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[13956,13965]},{"content":"Description","pos":[13968,13979]},{"content":"<ph id=\"ph1\">\\_</ph>price","pos":[14100,14107],"source":"\\_price"},{"content":"The purchase price of the asset.","pos":[14112,14144]},{"content":"<ph id=\"ph1\">\\_</ph>scrap","pos":[14172,14179],"source":"\\_scrap"},{"content":"The scrap value of the asset.","pos":[14184,14213]},{"content":"<ph id=\"ph1\">\\_</ph>life","pos":[14244,14250],"source":"\\_life"},{"content":"The expected life of the asset (the number of periods).","pos":[14256,14311]},{"content":"<ph id=\"ph1\">\\_</ph>period","pos":[14316,14324],"source":"\\_period"},{"content":"The period to calculate depreciation for.","pos":[14328,14369]},{"pos":[14391,14403],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The amount of depreciation over the specified period.","pos":[14405,14458]},{"pos":[14464,14471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In contrast to the <bpt id=\"p1\">**</bpt>sln<ept id=\"p1\">**</ept> function, the <bpt id=\"p2\">**</bpt>syd<ept id=\"p2\">**</ept> function can allow for an accelerated depreciation of the asset.","pos":[14473,14586],"source":"In contrast to the **sln** function, the **syd** function can allow for an accelerated depreciation of the asset."},{"content":"As with the <bpt id=\"p1\">**</bpt>ddb<ept id=\"p1\">**</ept> function, this enables higher depreciation during the early periods of the life of an asset.","pos":[14587,14699],"source":" As with the **ddb** function, this enables higher depreciation during the early periods of the life of an asset."},{"pos":[14705,14712],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following examples, the periodic depreciation is calculated for an asset that has a purchase price of 10,000, a scrap value of 2,000, and a life of 5.","pos":[14714,14871]},{"content":"In comparison, <bpt id=\"p1\">**</bpt>sln(10000,2000,5)<ept id=\"p1\">**</ept> would calculate 1600.00 for each period.","pos":[14872,14949],"source":" In comparison, **sln(10000,2000,5)** would calculate 1600.00 for each period."},{"pos":[15363,15367],"content":"term","linkify":"term","nodes":[{"content":"term","pos":[0,4]}]},{"content":"Calculates the number of periods that an investment must run for.","pos":[15368,15433]},{"pos":[15439,15445],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[15513,15523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[15527,15536]},{"content":"Description","pos":[15543,15554]},{"content":"amount","pos":[15679,15685]},{"content":"The amount of the periodic investment.","pos":[15695,15733]},{"content":"interest","pos":[15755,15763]},{"content":"The interest rate for each period.","pos":[15771,15805]},{"content":"future<ph id=\"ph1\">\\_</ph>value","pos":[15831,15844],"source":"future\\_value"},{"content":"The future value that is anticipated for the investment","pos":[15847,15902]},{"pos":[15910,15922],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The number of periods that the investment must run for.","pos":[15924,15979]},{"pos":[15985,15992],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]}],"content":"---\n# required metadata\n\ntitle: X++ Business run-time functions | Microsoft Docs\ndescription: This wiki describes the business run-time functions.\nauthor: annbe\nmanager: AnnBe\nms.date: 2016-02-04 22:11:18\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: \nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 31281\nms.assetid: b1a9d98e-20d1-45b8-8cef-8649173ad8f6\n# ms.region: \n# ms.industry: \nms.author: RobinARH\n\n---\n\n# X++ Business run-time functions\n\nThese functions enter financial data and calculate formulas.\n\n## cTerm\nCalculates the number of periods that are required for the current investment value to yield a target value.\n\n### Syntax\n\n    real cTerm(real interest, real future_value, real current_value)\n\n### Parameters\n\n| Parameter      | Description                   |\n|----------------|-------------------------------|\n| interest       | The interest rate.            |\n| future\\_value  | The target value.             |\n| current\\_value | The current investment value. |\n\n### Return value\n\nThe number of periods that are required in order to reach *future\\_value*.\n\n### Remarks\n\nThe *current\\_value* and *future\\_value* parameters must have the same prefixed sign (plus or minus).\n\n### Example\n\n    static void cTermExample(Args _arg)\n    {\n        real r;\n        ;\n        r = cTerm(10.0, 500.00, 100.00);\n        print \"The cTerm is \" + num2Str(r, 2, 2, 1, 1);\n        pause;\n    }\n\nddb\n---\n\nCalculates the accelerated depreciation of an asset.\n\n### Syntax\n\n    real ddb(real price, real scrap, real life, int period)\n\n### Parameters\n\n| Parameter | Description                                                |\n|-----------|------------------------------------------------------------|\n| price     | The purchase price of the asset.                           |\n| scrap     | The residual value of the asset that has been written off. |\n| life      | The expected lifetime of the asset.                        |\n| period    | The period to calculate depreciation over.                 |\n\n### Return value\n\nThe depreciation of the asset.\n\n### Remarks\n\nThe book value for a specific period is equal to the purchase price minus the accumulated depreciation for previous periods:\n\n-   Book value for Period 1 = Price\n-   Book value for Period 2 = Book value for Period 1 – Depreciation for Period 1\n-   Book value for Period n = Book value for Period (n–1) – Depreciation for Period (n–1)\n\nThere are three variations for the calculation of depreciation: If Period &gt; Life:\n\n-   Depreciation = 0\n\nIf (Book value for Period n) – ((Book value for Period n) × 2 ÷ Life) &lt; Residual value:\n\n-   Depreciation = (Book value for Period n) – Residual value\n\nIn all other cases: Depreciation = (Book value for Period n) × 2 ÷ Life The **syd** and **sln** functions also calculate the depreciation of an asset. The **syd** and **ddb** functions enables higher depreciation for the earlier years, whereas **sln** calculates a linear depreciation.\n\n    ddb(12000,2000,10,1); //Returns the value 2400.\n    ddb(12000,2000,10,3); //Returns the value 1536.\n\ndg\n--\n\nCalculates the contribution ratio, which is based on the sales price and the purchase price. If the value of the *sale* parameter is **0.0**, the calculation can't be done.\n\n### Syntax\n\n    real dg(real sale, real purchase)\n\n### Parameters\n\n| Parameter | Description         |\n|-----------|---------------------|\n| sale      | The sale price.     |\n| purchase  | The purchase price. |\n\n### Return value\n\nThe contribution ratio.\n\n### Remarks\n\n    dg(1000,300); //Returns the value 0.7.\n    dg(100,30); //Returns the value 0.7.\n    dg(20000, 11000); //Returns the value 0.45.\n\nfV\n--\n\nCalculates the future value of an investment.\n\n### Syntax\n\n    real fV(real amount, real interest, real life)\n\n### Parameters\n\n| Parameter | Description                                     |\n|-----------|-------------------------------------------------|\n| amount    | The amount that was paid in during each period. |\n| interest  | The interest rate.                              |\n| life      | The number of investment periods.               |\n\n### Return value\n\nThe future value of the investment.\n\n### Remarks\n\n    fV(100,0.14,10); //Returns the value 1933.73.\n    fV(400,0.10,5); //Returns the value 2442.04.\n\nidg\n---\n\nCalculates the sale price, based on the purchase price and the contribution ratio.\n\n    real idg(real purchase, real contribution_ratio)\n\n### Parameters\n\n| Parameter           | Description             |\n|---------------------|-------------------------|\n| purchase            | The purchase price.     |\n| contribution\\_ratio | The contribution ratio. |\n\n### Return value\n\nThe sale price.\n\n### Remarks\n\nIf the contribution ratio is equal to **1.0**, the calculation can't be done. The **idg** function is the inverse of the **dg** function.\n\n    idg(300,0.7); //Returns the value 1000.\n    idg(11000,0.45); //Returns the value 20000.\n\n## intvMax\nRetrieves the number of intervals for the specified period when the period is divided into parts as specified by the *func* parameter.\n\n    int intvMax(date input_date, date ref_date, int func)\n\n### Parameters\n\n| Parameter   | Description                                                                |\n|-------------|----------------------------------------------------------------------------|\n| input\\_date | The end of the period, which must be later than the *ref\\_date* parameter. |\n| ref\\_date   | The start of the period.                                                   |\n| func        | A **IntvScale** system enumeration value that indicates the division unit. |\n\n### Remarks\n\nHere are the possible values for the *func* parameter:\n\n-   None\n-   YearMonthDay\n-   YearMonth\n-   Year\n-   MonthDay\n-   Month\n-   Day\n-   YearQuarter\n-   Quarter\n-   YearWeek\n-   Week\n-   WeekDay\n\n### Example\n\n    static void intvMaxExample()\n    {\n        date refDate = str2Date(\"4/9/2007\", 213);\n        date inputDate = str2Date(\"10/5/2007\", 213);\n        int numberOfIntervals;\n        ;\n        numberOfIntervals = intvMax(inputDate, refDate, intvScale::YearMonth);\n        print numberOfIntervals;\n        pause;\n    }\n\n## intvName\nReturns the name of the interval that is the specified number of intervals ahead of the specified date.\n\n    str intvName(date input_date, int col, enum func)\n\n### Parameters\n\n| Parameter   | Description                                                                                 |\n|-------------|---------------------------------------------------------------------------------------------|\n| input\\_date | A date in the first interval.                                                               |\n| col         | The number of intervals ahead of the date that is specified by the *input\\_date* parameter. |\n| func        | An **intvScale** enumeration value.                                                         |\n\n### Return value\n\nThe name of the interval.\n\n### Remarks\n\nFor example, if the *func* parameter is the **IntvScale::WeekDay** enumeration value, this method returns the name of the weekday. If the *func* parameter is the **IntvScale::Week** enumeration value, this method returns a string that contains the number of the week.\n\n### Example\n\n    static void intvNameExample(Args _args)\n    {\n        date refDate = 2672010;\n        str name;\n        ;\n        name = intvName(refDate, 3,  intvScale::WeekDay);\n        Global::info(strfmt(\"%1 is the output, which indicates the day of the week 3 days after 26\\7\\2010.\", name));\n    }\n    /**** Infolog display.\n    Message (09:56:55 am)\n    Thu is the output, which indicates the day of the week 3 days after 2672010.\n    ****/\n\n## intvNo\nCalculates the number of intervals between two dates when you divide the time into the specified intervals.\n\n### Syntax\n\n    int intvNo(date input_date, date ref_date, int func)\n\n### Parameters\n\n| Parameter   | Description                                    |\n|-------------|------------------------------------------------|\n| input\\_date | A date that indicates the end of the period    |\n| ref\\_date   | A date that indicates the start of the period. |\n| func        | An **intvScale** enumeration value.            |\n\n### Return value\n\nThe number of intervals between the dates that are specified by the *ref\\_date* and *input\\_date* parameters.\n\n### Example\n\n    static void intvNoExample(Args _args)\n    {\n        date inputDate = str2Date(\"1/1/2007\", 213);\n        date refDate = str2Date(\"3/1/2007\", 213);\n        int noOfIntervals;\n        ;\n        noOfIntervals = intvNo(refDate, inputDate, intvScale::Month);\n        print noOfIntervals;\n        pause;\n        //noOfIntervals now holds the difference in months between March and January (2).\n    }\n\n## intvNorm\nReturns the normalized date for the period.\n\n### Syntax\n\n    date intvNorm(date input_date, date ref_date, int func)\n\n### Parameters\n\n| Parameter   | Description                                                                                              |\n|-------------|----------------------------------------------------------------------------------------------------------|\n| input\\_date | The end of the period, which must be later than the date that is specified by the *ref\\_date* parameter. |\n| ref\\_date   | The start of the period.                                                                                 |\n| func        | An **intvScale** enumeration value that indicates the interval division unit.                            |\n\n### Return value\n\nThe normalized date for the period.\n\n### Remarks\n\nThe returned date will equal the date of the first day in the interval in which the date that is specified by the *ref\\_date* parameter exists.\n\n### Example\n\n    static void example()\n    {\n        print intvNorm(today(), today()-1, IntVScale::WeekDay);\n        pause;\n    }\n\npmt\n---\n\nCalculates the amount that must be paid every period to repay a loan.\n\n### Syntax\n\n    real pmt(real principal, real interest, real life)\n\n### Parameters\n\n| Parameter | Description                                                               |\n|-----------|---------------------------------------------------------------------------|\n| principal | The amount that was originally borrowed.                                  |\n| interest  | The interest that is applied each period to the amount that was borrowed. |\n| life      | The number of periods that the loan is repaid over.                       |\n\n### Return value\n\nThe amount that must be paid every period.\n\n### Remarks\n\nThe *life* and *interest* parameters must be expressed in the same time units. The value of the *life* parameter must be more than **0.0**.\n\n### Example\n\n    pmt(4000,0.14,4); //Returns the value 1372.82.\n    pmt(10000,0.10,20); //Returns the value 1174.60.\n\npt\n--\n\nRetrieves the sum of a number plus a specified percentage of that number.\n\n### Syntax\n\n    real pt(real amount, real percentage)\n\n### Parameters\n\n| Parameter  | Description                |\n|------------|----------------------------|\n| amount     | The original number.       |\n| percentage | The percentage supplement. |\n\n### Return value\n\nThe number that is equal to ((*amount *× *percentage*) + *amount*).\n\n### Remarks\n\n    pt(2000.0,0.10); //Returns the value 2200.0.\n    pt(20.0,0.10); //Returns the value 22.0.\n\npv\n--\n\nCalculates the present value of an annuity, where an amount is received over multiple periods and the interest rate is deducted for each period.\n\n### Syntax\n\n    real pv(real amount, real interest, real life)\n\n### Parameters\n\n| Parameter | Description                                                                             |\n|-----------|-----------------------------------------------------------------------------------------|\n| amount    | The amount that is paid during each period.                                             |\n| interest  | The interest rate.                                                                      |\n| life      | The number of times that the value that is specified by the *amount* parameter is paid. |\n\n### Return value\n\nThe current value of an annuity.\n\n### Remarks\n\n    pv(300,0.14,4); //Returns the value 874.11.\n\n## rate\nCalculates the interest that is required for the current investment value to attain the future value over the specified number of periods.\n\n### Syntax\n\n    real rate(real _future_value, real _current_value, real _terms)\n\n### Parameters\n\n| Parameter        | Description                                      |\n|------------------|--------------------------------------------------|\n| \\_future\\_value  | The future value of the investment.              |\n| \\_current\\_value | The current value of the investment.             |\n| \\_terms          | The number of periods that the investment spans. |\n\n### Return value\n\nThe calculated interest rate.\n\n### Remarks\n\n    rate(10000,1000,20); //Returns the value 0.12.\n\nsln\n---\n\nRetrieves the constant depreciation amount for the specified asset for each depreciation period.\n\n### Syntax\n\n    real sln(real price, real scrap, real life)\n\n### Parameters\n\n| Parameter | Description                                              |\n|-----------|----------------------------------------------------------|\n| price     | The purchase price of the asset.                         |\n| scrap     | The scrap value of the asset.                            |\n| life      | The number of periods in the expected life of the asset. |\n\n### Return value\n\nThe depreciation amount.\n\n### Example\n\n    static void slnExample(Args _arg)\n    {\n        real r;\n        ;\n        r = sln(100.00, 50.00, 50.00);\n        print r;\n        pause;\n    }\n\nsyd\n---\n\nCalculates the depreciation of an asset over a specified period.\n\n### Syntax\n\n    real syd(real _price, real _scrap, real _life, int _period)\n\n### Parameters\n\n| Parameter | Description                                             |\n|-----------|---------------------------------------------------------|\n| \\_price   | The purchase price of the asset.                        |\n| \\_scrap   | The scrap value of the asset.                           |\n| \\_life    | The expected life of the asset (the number of periods). |\n| \\_period  | The period to calculate depreciation for.               |\n\n### Return value\n\nThe amount of depreciation over the specified period.\n\n### Remarks\n\nIn contrast to the **sln** function, the **syd** function can allow for an accelerated depreciation of the asset. As with the **ddb** function, this enables higher depreciation during the early periods of the life of an asset.\n\n### Example\n\nIn the following examples, the periodic depreciation is calculated for an asset that has a purchase price of 10,000, a scrap value of 2,000, and a life of 5. In comparison, **sln(10000,2000,5)** would calculate 1600.00 for each period.\n\n    // Returns the value 2666.67 (for the 1st period).\n    syd(10000,2000,5,1);\n    // Returns the value 2133.33 (for the 2nd period).\n    syd(10000,2000,5,2);\n    // Returns the value 1600.00 (for the 3rd period).\n    syd(10000,2000,5,3);\n    // Returns the value 1066.67 (for the 4th period).\n    syd(10000,2000,5,4);\n    // Returns the value 533.33 (for 5th - and final- period).\n    syd(10000,2000,5,5);\n\n## term\nCalculates the number of periods that an investment must run for.\n\n### Syntax\n\n    real term(real amount, real interest, real future_value)\n\n### Parameters\n\n| Parameter     | Description                                             |\n|---------------|---------------------------------------------------------|\n| amount        | The amount of the periodic investment.                  |\n| interest      | The interest rate for each period.                      |\n| future\\_value | The future value that is anticipated for the investment |\n\n### Return value\n\nThe number of periods that the investment must run for.\n\n### Example\n\n    static void termExample(Args _args)\n    {\n        print term(400,0.08,5000);  //returns the value '9.01'.\n        print term(100,0.14,3000);  //returns the value '12.58'.\n        pause;\n    }\n\n"}