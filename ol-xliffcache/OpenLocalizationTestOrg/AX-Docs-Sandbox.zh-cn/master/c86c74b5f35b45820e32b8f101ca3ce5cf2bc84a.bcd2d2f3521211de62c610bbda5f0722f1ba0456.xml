{"content":"---\n# required metadata\n\ntitle: F Classes - FormObject to FormRealControl\ndescription: API reference for classes from FormObject to FormRealControl.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 04/04/2017\nms.topic: article\nms.prod: \nms.service: dynamics-ax-platform\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 63603\nms.assetid: 170eb939-154e-488e-84a8-f67dd9d9a8f6\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# F Classes - FormObject to FormRealControl\n\n[!include[banner](../includes/banner.md)]\n\n\nAPI reference for classes from FormObject to FormRealControl.\n\nClass FormObject\n----------------\n\n    class FormObject extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                        | Description                             |\n|-----------------------------------------------|-----------------------------------------|\n| public boolean getAllowEdit(\\[int rowIndex\\]) |                                         |\n| public AnyType getValue(\\[int rowIndex\\])     |                                         |\n| public boolean getVisible()                   |                                         |\n| public str helpField()                        | Returns the Help text for the control.  |\n| public str labelText()                        | Returns the label text for the control. |\n| public boolean setValue(AnyType value)        |                                         |\n| public str toolTip()                          |                                         |\n| public boolean validate()                     |                                         |\n| public void jumpRef()                         |                                         |\n| public void modified()                        |                                         |\n| public void restore()                         |                                         |\n| public void find()                            |                                         |\n| public void context()                         |                                         |\n\n### Method getAllowEdit\n\n    public boolean getAllowEdit([int rowIndex])\n\n#### Parameters\n\nrowIndex  \n\n#### Return Value\n\n### Method getValue\n\n    public AnyType getValue([int rowIndex])\n\n#### Parameters\n\nrowIndex  \n\n#### Return Value\n\n### Method getVisible\n\n    public boolean getVisible()\n\n#### Return Value\n\n### Method helpField\n\nReturns the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text.\n\n#### Examples\n\nThe following example shows how to use the helpField method.\n\n    str strHelp;\n    strHelp = this.helpField();\n\n### Method labelText\n\nReturns the label text for the control.\n\n    public str labelText()\n\n#### Return Value\n\nThe label text for the control; an empty string if there is no label text for the control.\n\n### Method setValue\n\n    public boolean setValue(AnyType value)\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\n    public str toolTip()\n\n#### Return Value\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method modified\n\n    public void modified()\n\n### Method restore\n\n    public void restore()\n\n### Method find\n\n    public void find()\n\n### Method context\n\n    public void context()\n\n## Class FormObjectSet\n    class FormObjectSet extends Object\n\nThe FormObjectSet class is a base class that provides basic functionality for working with the data sources for a form.\n\n### Remarks\n\nMost of the methods on the FormObjectSet class are empty. They are implemented in the FormDataSource derived class.\n\n### Examples\n\n### Methods\n\n| Method                                                             | Description                                                                                                                                                                                                                 |\n|--------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public int active()                                                | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.active method, which retrieves data from joined data sources when a user navigates to a new record.                                 |\n| public Common cursor()                                             | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.cursor method, which returns the currently active record in the table that is referenced by the data source.                        |\n| public boolean findRecord(Common record)                           | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.findRecord method, which finds a specified record in the data source and makes it the current one.                                  |\n| public boolean positionToRecord(Common record)                     |                                                                                                                                                                                                                             |\n| public int first()                                                 | Moves focus to the first record in a data source.                                                                                                                                                                           |\n| public xFormRun formRun()                                          |                                                                                                                                                                                                                             |\n| public int getPosition()                                           |                                                                                                                                                                                                                             |\n| public int id()                                                    |                                                                                                                                                                                                                             |\n| public int last()                                                  | Moves focus to the last record in the data source.                                                                                                                                                                          |\n| public boolean leaveRecord(\\[boolean forceUpdate\\])                | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.leaveRecord method, which provides a notification when the user moves to another record.                                            |\n| public FormObjectSet masterObjectSet()                             | Retrieves the master object set for the current object set.                                                                                                                                                                 |\n| public str name(\\[str value\\])                                     | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.                                                                                     |\n| public int next()                                                  | Moves focus to the next record in the data source.                                                                                                                                                                          |\n| public int nextPage(int pageSize)                                  | Moves a specified number of records forward in the data source.                                                                                                                                                             |\n| public FormDataObject object(int objectId)                         |                                                                                                                                                                                                                             |\n| public int prev()                                                  | Moves focus to the previous record in the data source.                                                                                                                                                                      |\n| public int prevPage(int pageSize)                                  | Moves a specified number of records back (a positional change) in the data source.                                                                                                                                          |\n| public boolean setPosition(int position)                           |                                                                                                                                                                                                                             |\n| public boolean validateDelete()                                    | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.validateDelete method, which prompts the user to confirm the deletion of a record from the data source.                             |\n| public boolean validateWrite()                                     | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.validateWrite method, which determines whether data is valid and ready to be written.                                               |\n| public void refresh()                                              | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.refresh method, which updates the view of all records in the data source.                                                           |\n| public void addNotifyHandler(FormObjectSetNotify notifyHandler)    |                                                                                                                                                                                                                             |\n| public void reread()                                               | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.reread method, which rereads the current record from the database.                                                                  |\n| public void init()                                                 | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.init method, which creates a data source query, based on the data source properties.                                                |\n| public void deleteMarked()                                         | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.deleteMarked method, which deletes all marked records from a data source.                                                           |\n| public void delete()                                               | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.delete method, which deletes the record that is currently selected from the data source.                                            |\n| public void write()                                                | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.write method, which manages the database write operation.                                                                           |\n| public void create(\\[boolean append\\])                             | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.create method, which creates a new record in the data source.                                                                       |\n| public void removeNotifyHandler(FormObjectSetNotify notifyHandler) |                                                                                                                                                                                                                             |\n| public void prompt()                                               | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.prompt method, which activates the SysQueryForm class that is used to limit a query range.                                          |\n| public void research(\\[boolean retainPosition\\])                   | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.research method, which updates the database search that is defined by the filters and sorts that are currently applied to the form. |\n| public void refreshEx(\\[AnyType pos\\])                             | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.refreshEx method, which updates the view of the specified record.                                                                   |\n| public void initValue()                                            | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.initValue method, which initializes field values in a new record.                                                                   |\n| public void removeFilter()                                         | Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.removeFilter method, which resets the query for the data source.                                                                    |\n\n### Method active\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.active method, which retrieves data from joined data sources when a user navigates to a new record.\n\n    public int active()\n\n#### Return Value\n\nAlways returns 1.\n\n### Method cursor\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.cursor method, which returns the currently active record in the table that is referenced by the data source.\n\n    public Common cursor()\n\n#### Return Value\n\n### Method findRecord\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.findRecord method, which finds a specified record in the data source and makes it the current one.\n\n    public boolean findRecord(Common record)\n\n#### Parameters\n\nrecord  \nA parameter that is not used in the FormObjectSet base class.\n\n#### Return Value\n\ntrue if the record was found; otherwise, false.\n\n### Method positionToRecord\n\n    public boolean positionToRecord(Common record)\n\n#### Parameters\n\nrecord  \n\n#### Return Value\n\n### Method first\n\nMoves focus to the first record in a data source.\n\n    public int first()\n\n#### Return Value\n\nA non-zero integer if the operation succeeds.\n\n#### Remarks\n\nThis method is overridden by the method that is called when a user presses CTRL+HOME to select the first record in a form.\n\n### Method formRun\n\n    public xFormRun formRun()\n\n#### Return Value\n\n### Method getPosition\n\n    public int getPosition()\n\n#### Return Value\n\n### Method id\n\n    public int id()\n\n#### Return Value\n\n### Method last\n\nMoves focus to the last record in the data source.\n\n    public int last()\n\n#### Return Value\n\nA non-zero integer if the operation succeeds.\n\n#### Remarks\n\nThis method is overridden by the method that is called when a user presses CTRL+END to select the last record in a form.\n\n### Method leaveRecord\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.leaveRecord method, which provides a notification when the user moves to another record.\n\n    public boolean leaveRecord([boolean forceUpdate])\n\n#### Parameters\n\nforceUpdate  \n\n#### Return Value\n\n### Method masterObjectSet\n\nRetrieves the master object set for the current object set.\n\n    public FormObjectSet masterObjectSet()\n\n#### Return Value\n\nThe master object set.\n\n#### Remarks\n\nA form often has more than one object set (data source). These are joined together by using a tree hierarchy, where one data source is the master or parent data source. The masterObjectSet method returns the ID of the master data source for a specific data source.\n\n#### Examples\n\nThe following example returns the name of the master data source for a FormRun object.\n\n    private static client Name formDataSourceName(FormRun _formRun) \n    { \n        return _formRun.objectSet().masterObjectSet().name(); \n    }\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method next\n\nMoves focus to the next record in the data source.\n\n    public int next()\n\n#### Return Value\n\nA non-zero integer if the operation succeeds.\n\n#### Remarks\n\nThis method is called when a user selects the next record in a form by pressing the DOWN ARROW key.\n\n### Method nextPage\n\nMoves a specified number of records forward in the data source.\n\n    public int nextPage(int pageSize)\n\n#### Parameters\n\npageSize  \nThe number of records to skip.\n\n#### Return Value\n\nA non-zero integer if the operation succeeds.\n\n#### Remarks\n\nThis method is called when a user presses the PAGE DOWN key while he or she is in a form. The page size is then automatically calculated and used for the pageSize parameter. This method is overridden on the FormDataSource class.\n\n### Method object\n\n    public FormDataObject object(int objectId)\n\n#### Parameters\n\nobjectId  \n\n#### Return Value\n\n### Method prev\n\nMoves focus to the previous record in the data source.\n\n    public int prev()\n\n#### Return Value\n\nA non-zero integer if the operation succeeds.\n\n#### Remarks\n\nThis method is called when a user selects the previous record in the form.\n\n### Method prevPage\n\nMoves a specified number of records back (a positional change) in the data source.\n\n    public int prevPage(int pageSize)\n\n#### Parameters\n\npageSize  \nThe number of records to move back (a positional change).\n\n#### Return Value\n\nA non-zero integer if the operation succeeds.\n\n#### Remarks\n\nThis method is called when a user presses the PAGE UP key while he or she is in a form. The page size is then calculated automatically and used for the pageSize parameter.\n\n### Method setPosition\n\n    public boolean setPosition(int position)\n\n#### Parameters\n\nposition  \n\n#### Return Value\n\n### Method validateDelete\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.validateDelete method, which prompts the user to confirm the deletion of a record from the data source.\n\n    public boolean validateDelete()\n\n#### Return Value\n\n### Method validateWrite\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.validateWrite method, which determines whether data is valid and ready to be written.\n\n    public boolean validateWrite()\n\n#### Return Value\n\n### Method refresh\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.refresh method, which updates the view of all records in the data source.\n\n    public void refresh()\n\n### Method addNotifyHandler\n\n    public void addNotifyHandler(FormObjectSetNotify notifyHandler)\n\n#### Parameters\n\nnotifyHandler  \n\n### Method reread\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.reread method, which rereads the current record from the database.\n\n    public void reread()\n\n### Method init\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.init method, which creates a data source query, based on the data source properties.\n\n    public void init()\n\n### Method deleteMarked\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.deleteMarked method, which deletes all marked records from a data source.\n\n    public void deleteMarked()\n\n### Method delete\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.delete method, which deletes the record that is currently selected from the data source.\n\n    public void delete()\n\n### Method write\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.write method, which manages the database write operation.\n\n    public void write()\n\n### Method create\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.create method, which creates a new record in the data source.\n\n    public void create([boolean append])\n\n#### Parameters\n\nappend  \nA Boolean flag that indicates whether to insert the record after or before the current cursor position; optional. If the value is true, the new record is inserted after the current one.\n\n### Method removeNotifyHandler\n\n    public void removeNotifyHandler(FormObjectSetNotify notifyHandler)\n\n#### Parameters\n\nnotifyHandler  \n\n### Method prompt\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.prompt method, which activates the SysQueryForm class that is used to limit a query range.\n\n    public void prompt()\n\n### Method research\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.research method, which updates the database search that is defined by the filters and sorts that are currently applied to the form.\n\n    public void research([boolean retainPosition])\n\n#### Parameters\n\nretainPosition  \n\n### Method refreshEx\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.refreshEx method, which updates the view of the specified record.\n\n    public void refreshEx([AnyType pos])\n\n#### Parameters\n\npos  \nA parameter that is not used in the FormObjectSet.refreshEx method; optional.\n\n### Method initValue\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.initValue method, which initializes field values in a new record.\n\n    public void initValue()\n\n### Method removeFilter\n\nHas no functionality in the FormObjectSet class but is overridden by the FormDataSource.removeFilter method, which resets the query for the data source.\n\n    public void removeFilter()\n\n## Class FormObjectSetCacheChangedEventArgs\n    class FormObjectSetCacheChangedEventArgs extends ManagedEventArgs\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                 | Description                                               |\n|--------------------------------------------------------|-----------------------------------------------------------|\n| public NotifyCacheChangeType cacheChangeType()         |                                                           |\n| public void finalize()                                 |                                                           |\n| public void new(NotifyCacheChangeType cacheChangeType) | Initializes a new instance of the ManagedEventArgs class. |\n\n### Method cacheChangeType\n\n    public NotifyCacheChangeType cacheChangeType()\n\n#### Return Value\n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the ManagedEventArgs class.\n\n    public void new(NotifyCacheChangeType cacheChangeType)\n\n#### Parameters\n\ncacheChangeType  \n\n## Class FormObjectSetCurrentChangedEventArgs\n    class FormObjectSetCurrentChangedEventArgs extends ManagedEventArgs\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                        | Description                                               |\n|-------------------------------|-----------------------------------------------------------|\n| public int position()         |                                                           |\n| public void new(int position) | Initializes a new instance of the ManagedEventArgs class. |\n| public void finalize()        |                                                           |\n\n### Method position\n\n    public int position()\n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the ManagedEventArgs class.\n\n    public void new(int position)\n\n#### Parameters\n\nposition  \n\n### Method finalize\n\n    public void finalize()\n\n## Class FormObjectSetLeaveEventArgs\n    class FormObjectSetLeaveEventArgs extends ManagedEventArgs\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                    | Description                                                          |\n|---------------------------|----------------------------------------------------------------------|\n| public void finalize()    |                                                                      |\n| public void new()         | Initializes a new instance of the FormObjectSetLeaveEventArgs class. |\n| public void cancelLeave() |                                                                      |\n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the FormObjectSetLeaveEventArgs class.\n\n    public void new()\n\n### Method cancelLeave\n\n    public void cancelLeave()\n\n## Class FormObjectSetMarkingChangedEventArgs\n    class FormObjectSetMarkingChangedEventArgs extends ManagedEventArgs\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                     | Description                                               |\n|----------------------------|-----------------------------------------------------------|\n| public Array ids()         |                                                           |\n| public void finalize()     |                                                           |\n| public void new(Array ids) | Initializes a new instance of the ManagedEventArgs class. |\n\n### Method ids\n\n    public Array ids()\n\n#### Return Value\n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the ManagedEventArgs class.\n\n    public void new(Array ids)\n\n#### Parameters\n\nids  \n\n## Class FormObjectSetNotify\n    class FormObjectSetNotify extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                                                               | Description                                                  |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------|\n| public boolean onLeave(FormObjectSet sender)                                                                                                                                         |                                                              |\n| public int onRequestCacheSize(FormObjectSet sender)                                                                                                                                  |                                                              |\n| public void onCacheChanged(FormObjectSet sender, NotifyCacheChangeType cacheChangeType)                                                                                              |                                                              |\n| public void new()                                                                                                                                                                    | Initializes a new instance of the FormObjectSetNotify class. |\n| public void onCurrentChanged(FormObjectSet sender, int position)                                                                                                                     |                                                              |\n| public void onActive(FormObjectSet sender)                                                                                                                                           |                                                              |\n| public void onPagingParametersChanged(FormObjectSet sender, boolean pagingEnabled, int startRowIndex, int pageSize)                                                                  |                                                              |\n| public void finalize()                                                                                                                                                               |                                                              |\n| public void onRuntimeMetadataChanged(FormObjectSet sender, str changedDatasourceName, str referencedDatasourceName, FieldId changedFieldId, DataSourceMetadataChangeType changeType) |                                                              |\n| public void onRefresh(FormObjectSet sender)                                                                                                                                          |                                                              |\n| public void onMarkingChanged(FormObjectSet sender, Array ids)                                                                                                                        |                                                              |\n\n### Method onLeave\n\n    public boolean onLeave(FormObjectSet sender)\n\n#### Parameters\n\nsender  \n\n#### Return Value\n\n### Method onRequestCacheSize\n\n    public int onRequestCacheSize(FormObjectSet sender)\n\n#### Parameters\n\nsender  \n\n#### Return Value\n\n### Method onCacheChanged\n\n    public void onCacheChanged(FormObjectSet sender, NotifyCacheChangeType cacheChangeType)\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ncacheChangeType  \n\n### Method new\n\nInitializes a new instance of the FormObjectSetNotify class.\n\n    public void new()\n\n### Method onCurrentChanged\n\n    public void onCurrentChanged(FormObjectSet sender, int position)\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\nposition  \n\n### Method onActive\n\n    public void onActive(FormObjectSet sender)\n\n#### Parameters\n\nsender  \n\n### Method onPagingParametersChanged\n\n    public void onPagingParametersChanged(FormObjectSet sender, boolean pagingEnabled, int startRowIndex, int pageSize)\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\npagingEnabled  \n\n<!-- -->\n\nstartRowIndex  \n\n<!-- -->\n\npageSize  \n\n### Method finalize\n\n    public void finalize()\n\n### Method onRuntimeMetadataChanged\n\n    public void onRuntimeMetadataChanged(FormObjectSet sender, str changedDatasourceName, str referencedDatasourceName, FieldId changedFieldId, DataSourceMetadataChangeType changeType)\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\nchangedDatasourceName  \n\n<!-- -->\n\nreferencedDatasourceName  \n\n<!-- -->\n\nchangedFieldId  \n\n<!-- -->\n\nchangeType  \n\n### Method onRefresh\n\n    public void onRefresh(FormObjectSet sender)\n\n#### Parameters\n\nsender  \n\n### Method onMarkingChanged\n\n    public void onMarkingChanged(FormObjectSet sender, Array ids)\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\nids  \n\n## Class FormObjectSetNotifyEvents\n    class FormObjectSetNotifyEvents extends FormObjectSetNotify\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                                                               | Description                                                        |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------|\n| public boolean onLeave(FormObjectSet sender)                                                                                                                                         |                                                                    |\n| public int onRequestCacheSize(FormObjectSet sender)                                                                                                                                  |                                                                    |\n| public void new()                                                                                                                                                                    | Initializes a new instance of the FormObjectSetNotifyEvents class. |\n| public void onRuntimeMetadataChanged(FormObjectSet sender, str changedDatasourceName, str referencedDatasourceName, FieldId changedFieldId, DataSourceMetadataChangeType changeType) |                                                                    |\n| public void onRefresh(FormObjectSet sender)                                                                                                                                          |                                                                    |\n| public void finalize()                                                                                                                                                               |                                                                    |\n| public void addEventDelegate(FormObjectSetEventType eventType, ManagedEventDelegate eventDelegate)                                                                                   |                                                                    |\n| public void onCurrentChanged(FormObjectSet sender, int position)                                                                                                                     |                                                                    |\n| public void removeEventDelegate(FormObjectSetEventType eventType, ManagedEventDelegate eventDelegate)                                                                                |                                                                    |\n| public void onMarkingChanged(FormObjectSet sender, Array ids)                                                                                                                        |                                                                    |\n| public void onPagingParametersChanged(FormObjectSet sender, boolean pagingEnabled, int startRowIndex, int pageSize)                                                                  |                                                                    |\n| public void onCacheChanged(FormObjectSet sender, NotifyCacheChangeType cacheChangeType)                                                                                              |                                                                    |\n| public void onActive(FormObjectSet sender)                                                                                                                                           |                                                                    |\n\n### Method onLeave\n\n    public boolean onLeave(FormObjectSet sender)\n\n#### Parameters\n\nsender  \n\n#### Return Value\n\n### Method onRequestCacheSize\n\n    public int onRequestCacheSize(FormObjectSet sender)\n\n#### Parameters\n\nsender  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the FormObjectSetNotifyEvents class.\n\n    public void new()\n\n### Method onRuntimeMetadataChanged\n\n    public void onRuntimeMetadataChanged(FormObjectSet sender, str changedDatasourceName, str referencedDatasourceName, FieldId changedFieldId, DataSourceMetadataChangeType changeType)\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\nchangedDatasourceName  \n\n<!-- -->\n\nreferencedDatasourceName  \n\n<!-- -->\n\nchangedFieldId  \n\n<!-- -->\n\nchangeType  \n\n### Method onRefresh\n\n    public void onRefresh(FormObjectSet sender)\n\n#### Parameters\n\nsender  \n\n### Method finalize\n\n    public void finalize()\n\n### Method addEventDelegate\n\n    public void addEventDelegate(FormObjectSetEventType eventType, ManagedEventDelegate eventDelegate)\n\n#### Parameters\n\neventType  \n\n<!-- -->\n\neventDelegate  \n\n### Method onCurrentChanged\n\n    public void onCurrentChanged(FormObjectSet sender, int position)\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\nposition  \n\n### Method removeEventDelegate\n\n    public void removeEventDelegate(FormObjectSetEventType eventType, ManagedEventDelegate eventDelegate)\n\n#### Parameters\n\neventType  \n\n<!-- -->\n\neventDelegate  \n\n### Method onMarkingChanged\n\n    public void onMarkingChanged(FormObjectSet sender, Array ids)\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\nids  \n\n### Method onPagingParametersChanged\n\n    public void onPagingParametersChanged(FormObjectSet sender, boolean pagingEnabled, int startRowIndex, int pageSize)\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\npagingEnabled  \n\n<!-- -->\n\nstartRowIndex  \n\n<!-- -->\n\npageSize  \n\n### Method onCacheChanged\n\n    public void onCacheChanged(FormObjectSet sender, NotifyCacheChangeType cacheChangeType)\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ncacheChangeType  \n\n### Method onActive\n\n    public void onActive(FormObjectSet sender)\n\n#### Parameters\n\nsender  \n\n## Class FormObjectSetPagingParamsChangedEvtArgs\n    class FormObjectSetPagingParamsChangedEvtArgs extends ManagedEventArgs\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                  | Description                                               |\n|-------------------------------------------------------------------------|-----------------------------------------------------------|\n| public int pageSize()                                                   |                                                           |\n| public boolean pagingEnabled()                                          |                                                           |\n| public int startRowIndex()                                              |                                                           |\n| public void finalize()                                                  |                                                           |\n| public void new(boolean pagingEnabled, int startRowIndex, int pageSize) | Initializes a new instance of the ManagedEventArgs class. |\n\n### Method pageSize\n\n    public int pageSize()\n\n#### Return Value\n\n### Method pagingEnabled\n\n    public boolean pagingEnabled()\n\n#### Return Value\n\n### Method startRowIndex\n\n    public int startRowIndex()\n\n#### Return Value\n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the ManagedEventArgs class.\n\n    public void new(boolean pagingEnabled, int startRowIndex, int pageSize)\n\n#### Parameters\n\npagingEnabled  \n\n<!-- -->\n\nstartRowIndex  \n\n<!-- -->\n\npageSize  \n\n## Class FormObjectSetRequestCacheSizeEventArgs\n    class FormObjectSetRequestCacheSizeEventArgs extends ManagedEventArgs\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                  | Description                                                                     |\n|-----------------------------------------|---------------------------------------------------------------------------------|\n| public void setCacheSize(int cacheSize) |                                                                                 |\n| public void finalize()                  |                                                                                 |\n| public void new()                       | Initializes a new instance of the FormObjectSetRequestCacheSizeEventArgs class. |\n\n### Method setCacheSize\n\n    public void setCacheSize(int cacheSize)\n\n#### Parameters\n\ncacheSize  \n\n### Method finalize\n\n    public void finalize()\n\n### Method new\n\nInitializes a new instance of the FormObjectSetRequestCacheSizeEventArgs class.\n\n    public void new()\n\n## Class FormPart\n    class FormPart extends TreeNode\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                       | Description                                                                                                                               |\n|----------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| public str caption(\\[str value\\])            | Gets or set the caption of the control.                                                                                                   |\n| public str form(\\[str value\\])               |                                                                                                                                           |\n| public str managedContentItem(\\[str value\\]) |                                                                                                                                           |\n| public str name(\\[str value\\])               | Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object. |\n| public Guid origin(\\[Guid value\\])           |                                                                                                                                           |\n| public void new()                            | Initializes a new instance of the FormPart class.                                                                                         |\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method form\n\n    public str form([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method managedContentItem\n\n    public str managedContentItem([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   Begins with a letter.\n-   Doesn't exceed 250 characters.\n-   Can include numbers and underscore characters.\n-   Cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.\n\n### Method origin\n\n    public Guid origin([Guid value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method new\n\nInitializes a new instance of the FormPart class.\n\n    public void new()\n\n## Class FormProgressControl\n    class FormProgressControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int direction(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Returns a value that indicates whether the control allows for the specified level of customization.                                                                     |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public int pos(\\[int value\\])                                                                               |                                                                                                                                                                         |\n| public int progressType(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public int rangeHi(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public int rangeLo(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int step(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void stepIt()                                                                                        |                                                                                                                                                                         |\n| public void deltaPos(int inc)                                                                               |                                                                                                                                                                         |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method direction\n\n    public int direction([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn integer that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave, the dragOver, and dragOverEx methods to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the Help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nThis method sets the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false. For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method pos\n\n    public int pos([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method progressType\n\n    public int progressType([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rangeHi\n\n    public int rangeHi([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rangeLo\n\n    public int rangeLo([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise false.\n\n### Method step\n\n    public int step([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table:\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method enter\n\n    public void enter()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method stepIt\n\n    public void stepIt()\n\n### Method deltaPos\n\n    public void deltaPos(int inc)\n\n#### Parameters\n\ninc  \n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n## Class FormQueryMiner\n    class FormQueryMiner extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method | Description |\n|--------|-------------|\n\n## Class FormRadioControl\n    class FormRadioControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can modify the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the font weight that is used to display text in the control.                                                                                               |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                   |                                                                                                                                                                         |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                         |                                                                                                                                                                         |\n| public int bottomMarginValue(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public str caption(\\[str value\\])                                                                           | Gets or set the caption of the control.                                                                                                                                 |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public int columns(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public int count()                                                                                          |                                                                                                                                                                         |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                                                |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether the object is enabled or disabled.                                                                                                                   |\n| public EnumId enumType(\\[EnumId value\\])                                                                    |                                                                                                                                                                         |\n| public EnumId enumTypeValue()                                                                               |                                                                                                                                                                         |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                                                         |\n| public int find(str string)                                                                                 |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font that is used for the control.                                                                                                         |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the font size that is used for the control.                                                                                                                |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public int framePosition(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int frameType(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public str getText(int index)                                                                               |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.                                                         |\n| public boolean hideFirstEntry(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Returns the handle to the window that is associated with the control.                                                                                                   |\n| public boolean isContainer()                                                                                | Gets a value that indicates whether the control is a container.                                                                                                         |\n| public boolean isDisplayed()                                                                                | Returns a value that indicates whether the control is displayed.                                                                                                        |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Returns a value that indicates whether the control allows for the specified level of customization.                                                                     |\n| public boolean isValid()                                                                                    |                                                                                                                                                                         |\n| public boolean italic(\\[boolean value\\])                                                                    | Sets or returns a value that indicates whether the text in the control is italic.                                                                                       |\n| public int item(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public int items(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                     |                                                                                                                                                                         |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                           |                                                                                                                                                                         |\n| public int leftMarginValue(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public boolean modified()                                                                                   |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public str previewPartRef(\\[str value\\])                                                                    |                                                                                                                                                                         |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                    |                                                                                                                                                                         |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                          |                                                                                                                                                                         |\n| public int rightMarginValue(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the security key that is associated with the control.                                                                                                   |\n| public int selection(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int selectionChange()                                                                                |                                                                                                                                                                         |\n| public int selectText(str string)                                                                           |                                                                                                                                                                         |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public str text(\\[str value\\])                                                                              | Sets or returns the text for the control.                                                                                                                               |\n| public str toolTip()                                                                                        | Sets or returns the tooltip text for the control.                                                                                                                       |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                                                         |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public int topMarginValue(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the value of the underline property for the text in the control.                                                                                        |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void insert(str string, int index)                                                                   |                                                                                                                                                                         |\n| private void OnSelectionChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                         |                                                                                                                                                                         |\n| public void delete(str string)                                                                              |                                                                                                                                                                         |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                   |                                                                                                                                                                         |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| public void endUpdate()                                                                                     |                                                                                                                                                                         |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void add(str string)                                                                                 |                                                                                                                                                                         |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| private void OnSelectionChanging(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                        |                                                                                                                                                                         |\n| public void beginUpdate()                                                                                   |                                                                                                                                                                         |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void clear()                                                                                         |                                                                                                                                                                         |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void lookup()                                                                                        |                                                                                                                                                                         |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                               |                                                                                                                                                                         |\n| public void undo()                                                                                          |                                                                                                                                                                         |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can modify the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value to assign as the allowEdit property of the control; optional.\n\n#### Return Value\n\ntrue if the control can be modified; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign for the background color of the control; optional.\n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be 0 (zero).\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign for the background style of the control; optional.\n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the font weight that is used to display text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the bold setting of the control; optional.\n\n#### Return Value\n\nAn integer value between 0 (zero) and 9, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 – Use the default font weight.\n-   1 – Thin.\n-   2 – Extra-light.\n-   3 – Light.\n-   4 – Normal.\n-   5 – Medium.\n-   6 – Semibold.\n-   7 – Bold.\n-   8 – Extra-bold.\n-   9 – Heavy.\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table.\n\n| Value | Description          |\n|-------|----------------------|\n| 0     | ANSI\\_CHARSET        |\n| 1     | DEFAULT\\_CHARSET     |\n| 2     | SYMBOL\\_CHARSET      |\n| 77    | MAC\\_CHARSET         |\n| 128   | SHIFTJIS\\_CHARSET    |\n| 129   | HANGUL\\_CHARSET      |\n| 134   | GB2312\\_CHARSET      |\n| 136   | CHINESEBIG5\\_CHARSET |\n| 161   | GREEK\\_CHARSET       |\n| 162   | TURKISH\\_CHARSET     |\n| 163   | VIETNAMESE\\_CHARSET  |\n| 186   | BALTIC\\_CHARSET      |\n| 204   | RUSSIAN\\_CHARSET     |\n| 238   | EASTEUROPE\\_CHARSET  |\n| 255   | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value | Description    |\n|-------|----------------|\n| 130   | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value | Description     |\n|-------|-----------------|\n| 177   | HEBREW\\_CHARSET |\n| 178   | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value | Description   |\n|-------|---------------|\n| 222   | THAI\\_CHARSET |\n\nThe default character set is set to a value that is based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value | Style                 |\n|-------|-----------------------|\n| 0     | Default               |\n| 1     | The Windows palette   |\n| 2     | The true-color scheme |\n\n### Method columns\n\n    public int columns([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method count\n\n    public int count()\n\n#### Return Value\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether the object is enabled or disabled.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that determines whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property lets you enable or disable controls at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message that provides read-only information.\n\n### Method enumType\n\n    public EnumId enumType([EnumId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method enumTypeValue\n\n    public EnumId enumTypeValue()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method find\n\n    public int find(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font that is used for the control.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the font for the control; optional.\n\n#### Return Value\n\nThe name of the font, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the font size that is used for the control.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the font size for the control; optional.\n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be 0 (zero).\n-   The maximum value for a single byte is 255.\n\n### Method framePosition\n\n    public int framePosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method frameType\n\n    public int frameType([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method getText\n\n    public str getText(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the Help text for the control; optional.\n\n#### Return Value\n\nThe string that should be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n### Method hideFirstEntry\n\n    public boolean hideFirstEntry([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nReturns the handle to the window that is associated with the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle to the window that is associated with the control.\n\n#### Remarks\n\nThe handle to the window can be used with Windows API functions.\n\n### Method isContainer\n\nGets a value that indicates whether the control is a container.\n\n    public boolean isContainer()\n\n#### Return Value\n\ntrue if the control is a container; otherwise, false.\n\n### Method isDisplayed\n\nReturns a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter. The following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\n### Method isValid\n\n    public boolean isValid()\n\n#### Return Value\n\n### Method italic\n\nSets or returns a value that indicates whether the text in the control is italic.\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \nThe value for the control's italic setting; optional.\n\n#### Return Value\n\ntrue if the text in the control is italic; otherwise, false.\n\n### Method item\n\n    public int item([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method items\n\n    public int items([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the security key that is associated with the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe security key that is associated with the control; optional.\n\n#### Return Value\n\nThe security key that is associated with the control.\n\n### Method selection\n\n    public int selection([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method selectionChange\n\n    public int selectionChange()\n\n#### Return Value\n\n### Method selectText\n\n    public int selectText(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method text\n\nSets or returns the text for the control.\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \nThe text to assign to the control; optional.\n\n#### Return Value\n\nThe text for the control; an empty string if there is no text for the control.\n\n### Method toolTip\n\nSets or returns the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if there is no tooltip text for the control.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the value of the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value of the underline property for the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method insert\n\n    public void insert(str string, int index)\n\n#### Parameters\n\nstring  \n\n<!-- -->\n\nindex  \n\n### Method OnSelectionChanged\n\n    private void OnSelectionChanged([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method delete\n\n    public void delete(str string)\n\n#### Parameters\n\nstring  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method endUpdate\n\n    public void endUpdate()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method add\n\n    public void add(str string)\n\n#### Parameters\n\nstring  \n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method OnSelectionChanging\n\n    private void OnSelectionChanging([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method beginUpdate\n\n    public void beginUpdate()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method enter\n\n    public void enter()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method clear\n\n    public void clear()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method lookup\n\n    public void lookup()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method undo\n\n    public void undo()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n## Class FormRealControl\n    class FormRealControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public int allowNegative(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int autoInsSeparator(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to output text in the control.                                                                                             |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int charFromPos(int x, int y)                                                                        |                                                                                                                                                                         |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                                                         |\n| public int dataFieldArrayIndex()                                                                            |                                                                                                                                                                         |\n| public FieldName dataFieldName()                                                                            |                                                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that will be used by the control or the form.                                                                                                |\n| public int decimalSeparator(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public int direction(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int displaceNegative(\\[int value\\], \\[AutoMode mode\\])                                               |                                                                                                                                                                         |\n| public AutoMode displaceNegativeMode(\\[AutoMode mode\\])                                                     |                                                                                                                                                                         |\n| public int displaceNegativeValue(\\[int value\\])                                                             |                                                                                                                                                                         |\n| public int displayHeight(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayHeightMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayHeightValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Indicates whether to enable or disable drag-and-drop operations for the control.                                                                                        |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                                                         |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public int formatMST(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public container getCursorPos()                                                                             |                                                                                                                                                                         |\n| public int getFirstVisibleLine()                                                                            |                                                                                                                                                                         |\n| public str getLine(int lineNo)                                                                              |                                                                                                                                                                         |\n| public int getLineCount()                                                                                   |                                                                                                                                                                         |\n| public container getSelection()                                                                             |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public int iMEMode(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Returns a value that indicates whether the control allows for the specified level of customization.                                                                     |\n| public boolean isValid()                                                                                    |                                                                                                                                                                         |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                        |                                                                                                                                                                         |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                            |                                                                                                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                              |                                                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int limitText(\\[int value\\], \\[AutoMode mode\\])                                                      |                                                                                                                                                                         |\n| public AutoMode limitTextMode(\\[AutoMode mode\\])                                                            |                                                                                                                                                                         |\n| public int limitTextValue(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int lineFromChar(int charIndex)                                                                      |                                                                                                                                                                         |\n| public int lineIndex(int lineNo)                                                                            |                                                                                                                                                                         |\n| public int lineLength(int lineNo)                                                                           |                                                                                                                                                                         |\n| public int lookupButton(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean mandatory(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int minNoOfDecimals(\\[int value\\], \\[AutoMode mode\\])                                                |                                                                                                                                                                         |\n| public AutoMode minNoOfDecimalsMode(\\[AutoMode mode\\])                                                      |                                                                                                                                                                         |\n| public int minNoOfDecimalsValue(\\[int value\\])                                                              |                                                                                                                                                                         |\n| public boolean modified()                                                                                   |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public int noOfDecimals(\\[int value\\], \\[AutoMode mode\\])                                                   |                                                                                                                                                                         |\n| public AutoMode noOfDecimalsMode(\\[AutoMode mode\\])                                                         |                                                                                                                                                                         |\n| public int noOfDecimalsValue(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public container posFromChar(int charIndex)                                                                 |                                                                                                                                                                         |\n| public str previewPartRef(\\[str value\\])                                                                    |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public Real realValue(\\[Real value\\])                                                                       |                                                                                                                                                                         |\n| public boolean replaceOnLookup(\\[boolean value\\])                                                           |                                                                                                                                                                         |\n| public int rotateSign(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int searchAfterInput(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public int searchMode(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public int showZero(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public int signDisplay(\\[int value\\])                                                                       |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public int thousandSeparator(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userFastTabSummary(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels, as specified by the user.                                                                                           |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])         |                                                                                                                                                                         |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void pasteText(str pasteStr, \\[boolean InsertSel\\])                                                  |                                                                                                                                                                         |\n| public void lookup()                                                                                        |                                                                                                                                                                         |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                   |                                                                                                                                                                         |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void undo()                                                                                          |                                                                                                                                                                         |\n| public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])       |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void textChange()                                                                                    |                                                                                                                                                                         |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void scrollCursor()                                                                                  |                                                                                                                                                                         |\n| public void lineScroll(int dx, int dy)                                                                      |                                                                                                                                                                         |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                               |                                                                                                                                                                         |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void performFormLookup(xFormRun form)                                                                |                                                                                                                                                                         |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void setSelection(int charIndexFrom, int charIndexTo)                                                |                                                                                                                                                                         |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void setCursorPos(int x, int y)                                                                      |                                                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n### Method allowNegative\n\n    public int allowNegative([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoInsSeparator\n\n    public int autoInsSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method bold\n\nGets or sets the weight of font that is used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows.\n\n| Value | Description |\n|-------|-------------|\n| 0     | Auto        |\n| 1     | 3D          |\n| 2     | Single line |\n| 3     | Flat        |\n| 4     | None        |\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value | Description          |\n|-------|----------------------|\n| 0     | ANSI\\_CHARSET        |\n| 1     | DEFAULT\\_CHARSET     |\n| 2     | SYMBOL\\_CHARSET      |\n| 77    | MAC\\_CHARSET         |\n| 128   | SHIFTJIS\\_CHARSET    |\n| 129   | HANGUL\\_CHARSET      |\n| 134   | GB2312\\_CHARSET      |\n| 136   | CHINESEBIG5\\_CHARSET |\n| 161   | GREEK\\_CHARSET       |\n| 162   | TURKISH\\_CHARSET     |\n| 163   | VIETNAMESE\\_CHARSET  |\n| 186   | BALTIC\\_CHARSET      |\n| 204   | RUSSIAN\\_CHARSET     |\n| 238   | EASTEUROPE\\_CHARSET  |\n| 255   | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value | Description    |\n|-------|----------------|\n| 130   | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value | Description     |\n|-------|-----------------|\n| 177   | HEBREW\\_CHARSET |\n| 178   | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value | Description   |\n|-------|---------------|\n| 222   | THAI\\_CHARSET |\n\nThe default character set is set to a values that are based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method charFromPos\n\n    public int charFromPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n#### Return Value\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table.\n\n| Value | Style                 |\n|-------|-----------------------|\n| 0     | Default               |\n| 1     | The Windows palette   |\n| 2     | The true-color scheme |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataFieldArrayIndex\n\n    public int dataFieldArrayIndex()\n\n#### Return Value\n\n### Method dataFieldName\n\n    public FieldName dataFieldName()\n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source that will be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source that will be used.\n\n### Method decimalSeparator\n\n    public int decimalSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method direction\n\n    public int direction([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displaceNegative\n\n    public int displaceNegative([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displaceNegativeMode\n\n    public AutoMode displaceNegativeMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displaceNegativeValue\n\n    public int displaceNegativeValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayHeight\n\n    public int displayHeight([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayHeightMode\n\n    public AutoMode displayHeightMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayHeightValue\n\n    public int displayHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nIndicates whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, 0.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows for controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method formatMST\n\n    public int formatMST([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method getCursorPos\n\n    public container getCursorPos()\n\n#### Return Value\n\n### Method getFirstVisibleLine\n\n    public int getFirstVisibleLine()\n\n#### Return Value\n\n### Method getLine\n\n    public str getLine(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method getLineCount\n\n    public int getLineCount()\n\n#### Return Value\n\n### Method getSelection\n\n    public container getSelection()\n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table:\n\n| Mode            | Height calculation                                                                        |\n|-----------------|-------------------------------------------------------------------------------------------|\n| -1 Exact        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode          | Height calculation                                                                        |\n|---------------|-------------------------------------------------------------------------------------------|\n| Exact         | The exact height in pixels of the controls is used.                                       |\n| Auto          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property dialog box. The Help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method iMEMode\n\n    public int iMEMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method isValid\n\n    public boolean isValid()\n\n#### Return Value\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it. The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelMouseDblClick\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseDown\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseUp\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method limitText\n\n    public int limitText([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method limitTextMode\n\n    public AutoMode limitTextMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method limitTextValue\n\n    public int limitTextValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method lineFromChar\n\n    public int lineFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method lineIndex\n\n    public int lineIndex(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lineLength\n\n    public int lineLength(int lineNo)\n\n#### Parameters\n\nlineNo  \n\n#### Return Value\n\n### Method lookupButton\n\n    public int lookupButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mandatory\n\n    public boolean mandatory([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method minNoOfDecimals\n\n    public int minNoOfDecimals([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method minNoOfDecimalsMode\n\n    public AutoMode minNoOfDecimalsMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method minNoOfDecimalsValue\n\n    public int minNoOfDecimalsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method noOfDecimals\n\n    public int noOfDecimals([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method noOfDecimalsMode\n\n    public AutoMode noOfDecimalsMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method noOfDecimalsValue\n\n    public int noOfDecimalsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method posFromChar\n\n    public container posFromChar(int charIndex)\n\n#### Parameters\n\ncharIndex  \n\n#### Return Value\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method realValue\n\n    public Real realValue([Real value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method replaceOnLookup\n\n    public boolean replaceOnLookup([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method rotateSign\n\n    public int rotateSign([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchAfterInput\n\n    public int searchAfterInput([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method searchMode\n\n    public int searchMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showZero\n\n    public int showZero([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method signDisplay\n\n    public int signDisplay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method thousandSeparator\n\n    public int thousandSeparator([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userFastTabSummary\n\n    public int userFastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels, as specified by the user.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode           | Width calculation                                                                        |\n|----------------|------------------------------------------------------------------------------------------|\n| -1 Exact       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                        |\n|--------------|------------------------------------------------------------------------------------------|\n| Exact        | The exact width in pixels of the controls is used.                                       |\n| Auto         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method performTypeLookup\n\n    public void performTypeLookup([int userType], [int arrayIndex], [SelectableDataArea company])\n\n#### Parameters\n\nuserType  \n\n<!-- -->\n\narrayIndex  \n\n<!-- -->\n\ncompany  \n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method pasteText\n\n    public void pasteText(str pasteStr, [boolean InsertSel])\n\n#### Parameters\n\npasteStr  \n\n<!-- -->\n\nInsertSel  \n\n### Method lookup\n\n    public void lookup()\n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method undo\n\n    public void undo()\n\n### Method performDBLookup\n\n    public void performDBLookup([FieldId fieldId], [TableId tableId], [SelectableDataArea company])\n\n#### Parameters\n\nfieldId  \n\n<!-- -->\n\ntableId  \n\n<!-- -->\n\ncompany  \n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method textChange\n\n    public void textChange()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method scrollCursor\n\n    public void scrollCursor()\n\n### Method lineScroll\n\n    public void lineScroll(int dx, int dy)\n\n#### Parameters\n\ndx  \n\n<!-- -->\n\ndy  \n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method performFormLookup\n\n    public void performFormLookup(xFormRun form)\n\n#### Parameters\n\nform  \n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setSelection\n\n    public void setSelection(int charIndexFrom, int charIndexTo)\n\n#### Parameters\n\ncharIndexFrom  \n\n<!-- -->\n\ncharIndexTo  \n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method enter\n\n    public void enter()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method setCursorPos\n\n    public void setCursorPos(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n\n\n\n\n","nodes":[{"pos":[32,73],"content":"F Classes - FormObject to FormRealControl","needQuote":true,"needEscape":true,"nodes":[{"content":"F Classes - FormObject to FormRealControl","pos":[0,41]}]},{"pos":[87,148],"content":"API reference for classes from FormObject to FormRealControl.","needQuote":true,"needEscape":true,"nodes":[{"content":"API reference for classes from FormObject to FormRealControl.","pos":[0,61]}]},{"pos":[647,688],"content":"F Classes - FormObject to FormRealControl","linkify":"F Classes - FormObject to FormRealControl","nodes":[{"content":"F Classes - FormObject to FormRealControl","pos":[0,41]}]},{"content":"API reference for classes from FormObject to FormRealControl.","pos":[734,795]},{"pos":[797,813],"content":"Class FormObject","linkify":"Class FormObject","nodes":[{"content":"Class FormObject","pos":[0,16]}]},{"pos":[873,880],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[886,894],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[900,907],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[911,917]},{"content":"Description","pos":[959,970]},{"content":"public boolean getAllowEdit(<ph id=\"ph1\">\\[</ph>int rowIndex<ph id=\"ph2\">\\]</ph>)","pos":[1095,1140],"source":"public boolean getAllowEdit(\\[int rowIndex\\])"},{"content":"public AnyType getValue(<ph id=\"ph1\">\\[</ph>int rowIndex<ph id=\"ph2\">\\]</ph>)","pos":[1187,1228],"source":"public AnyType getValue(\\[int rowIndex\\])"},{"content":"public boolean getVisible()","pos":[1279,1306]},{"content":"public str helpField()","pos":[1371,1393]},{"content":"Returns the Help text for the control.","pos":[1419,1457]},{"content":"public str labelText()","pos":[1463,1485]},{"content":"Returns the label text for the control.","pos":[1511,1550]},{"content":"public boolean setValue(AnyType value)","pos":[1555,1593]},{"content":"public str toolTip()","pos":[1647,1667]},{"content":"public boolean validate()","pos":[1739,1764]},{"content":"public void jumpRef()","pos":[1831,1852]},{"content":"public void modified()","pos":[1923,1945]},{"content":"public void restore()","pos":[2015,2036]},{"content":"public void find()","pos":[2107,2125]},{"content":"public void context()","pos":[2199,2220]},{"pos":[2294,2313],"content":"Method getAllowEdit","linkify":"Method getAllowEdit","nodes":[{"content":"Method getAllowEdit","pos":[0,19]}]},{"pos":[2369,2379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"rowIndex","pos":[2381,2389]},{"pos":[2398,2410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2416,2431],"content":"Method getValue","linkify":"Method getValue","nodes":[{"content":"Method getValue","pos":[0,15]}]},{"pos":[2483,2493],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"rowIndex","pos":[2495,2503]},{"pos":[2512,2524],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2530,2547],"content":"Method getVisible","linkify":"Method getVisible","nodes":[{"content":"Method getVisible","pos":[0,17]}]},{"pos":[2587,2599],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[2605,2621],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Returns the Help text for the control.","pos":[2623,2661]},{"pos":[2696,2708],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text.","pos":[2710,2782]},{"pos":[2789,2797],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to use the helpField method.","pos":[2799,2859]},{"pos":[2915,2931],"content":"Method labelText","linkify":"Method labelText","nodes":[{"content":"Method labelText","pos":[0,16]}]},{"content":"Returns the label text for the control.","pos":[2933,2972]},{"pos":[3007,3019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The label text for the control; an empty string if there is no label text for the control.","pos":[3021,3111]},{"pos":[3117,3132],"content":"Method setValue","linkify":"Method setValue","nodes":[{"content":"Method setValue","pos":[0,15]}]},{"pos":[3183,3193],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[3195,3200]},{"pos":[3209,3221],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3227,3241],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"pos":[3274,3286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3292,3307],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[3345,3357],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[3363,3377],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[3410,3425],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[3459,3473],"content":"Method restore","linkify":"Method restore","nodes":[{"content":"Method restore","pos":[0,14]}]},{"pos":[3506,3517],"content":"Method find","linkify":"Method find","nodes":[{"content":"Method find","pos":[0,11]}]},{"pos":[3547,3561],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"pos":[3593,3612],"content":"Class FormObjectSet","linkify":"Class FormObjectSet","nodes":[{"content":"Class FormObjectSet","pos":[0,19]}]},{"content":"The FormObjectSet class is a base class that provides basic functionality for working with the data sources for a form.","pos":[3653,3772]},{"pos":[3778,3785],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Most of the methods on the FormObjectSet class are empty.","pos":[3787,3844]},{"content":"They are implemented in the FormDataSource derived class.","pos":[3845,3902]},{"pos":[3908,3916],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[3922,3929],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[3933,3939]},{"content":"Description","pos":[4002,4013]},{"content":"public int active()","pos":[4519,4538]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.active method, which retrieves data from joined data sources when a user navigates to a new record.","pos":[4588,4775]},{"content":"public Common cursor()","pos":[4812,4834]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.cursor method, which returns the currently active record in the table that is referenced by the data source.","pos":[4881,5077]},{"content":"public boolean findRecord(Common record)","pos":[5105,5145]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.findRecord method, which finds a specified record in the data source and makes it the current one.","pos":[5174,5360]},{"content":"public boolean positionToRecord(Common record)","pos":[5398,5444]},{"content":"public int first()","pos":[5691,5709]},{"content":"Moves focus to the first record in a data source.","pos":[5760,5809]},{"content":"public xFormRun formRun()","pos":[5984,6009]},{"content":"public int getPosition()","pos":[6277,6301]},{"content":"public int id()","pos":[6570,6585]},{"content":"public int last()","pos":[6863,6880]},{"content":"Moves focus to the last record in the data source.","pos":[6932,6982]},{"content":"public boolean leaveRecord(<ph id=\"ph1\">\\[</ph>boolean forceUpdate<ph id=\"ph2\">\\]</ph>)","pos":[7156,7207],"source":"public boolean leaveRecord(\\[boolean forceUpdate\\])"},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.leaveRecord method, which provides a notification when the user moves to another record.","pos":[7225,7401]},{"content":"public FormObjectSet masterObjectSet()","pos":[7449,7487]},{"content":"Retrieves the master object set for the current object set.","pos":[7518,7577]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[7742,7772],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[7811,7962]},{"content":"public int next()","pos":[8051,8068]},{"content":"Moves focus to the next record in the data source.","pos":[8120,8170]},{"content":"public int nextPage(int pageSize)","pos":[8344,8377]},{"content":"Moves a specified number of records forward in the data source.","pos":[8413,8476]},{"content":"public FormDataObject object(int objectId)","pos":[8637,8679]},{"content":"public int prev()","pos":[8930,8947]},{"content":"Moves focus to the previous record in the data source.","pos":[8999,9053]},{"content":"public int prevPage(int pageSize)","pos":[9223,9256]},{"content":"Moves a specified number of records back (a positional change) in the data source.","pos":[9292,9374]},{"content":"public boolean setPosition(int position)","pos":[9516,9556]},{"content":"public boolean validateDelete()","pos":[9809,9840]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.validateDelete method, which prompts the user to confirm the deletion of a record from the data source.","pos":[9878,10069]},{"content":"public boolean validateWrite()","pos":[10102,10132]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.validateWrite method, which determines whether data is valid and ready to be written.","pos":[10171,10344]},{"content":"public void refresh()","pos":[10395,10416]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.refresh method, which updates the view of all records in the data source.","pos":[10464,10625]},{"content":"public void addNotifyHandler(FormObjectSetNotify notifyHandler)","pos":[10688,10751]},{"content":"public void reread()","pos":[10981,11001]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.reread method, which rereads the current record from the database.","pos":[11050,11204]},{"content":"public void init()","pos":[11274,11292]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.init method, which creates a data source query, based on the data source properties.","pos":[11343,11515]},{"content":"public void deleteMarked()","pos":[11567,11593]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.deleteMarked method, which deletes all marked records from a data source.","pos":[11636,11797]},{"content":"public void delete()","pos":[11860,11880]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.delete method, which deletes the record that is currently selected from the data source.","pos":[11929,12105]},{"content":"public void write()","pos":[12153,12172]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.write method, which manages the database write operation.","pos":[12222,12367]},{"content":"public void create(<ph id=\"ph1\">\\[</ph>boolean append<ph id=\"ph2\">\\]</ph>)","pos":[12446,12484],"source":"public void create(\\[boolean append\\])"},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.create method, which creates a new record in the data source.","pos":[12515,12664]},{"content":"public void removeNotifyHandler(FormObjectSetNotify notifyHandler)","pos":[12739,12805]},{"content":"public void prompt()","pos":[13032,13052]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.prompt method, which activates the SysQueryForm class that is used to limit a query range.","pos":[13101,13279]},{"content":"public void research(<ph id=\"ph1\">\\[</ph>boolean retainPosition<ph id=\"ph2\">\\]</ph>)","pos":[13325,13373],"source":"public void research(\\[boolean retainPosition\\])"},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.research method, which updates the database search that is defined by the filters and sorts that are currently applied to the form.","pos":[13394,13613]},{"content":"public void refreshEx(<ph id=\"ph1\">\\[</ph>AnyType pos<ph id=\"ph2\">\\]</ph>)","pos":[13618,13656],"source":"public void refreshEx(\\[AnyType pos\\])"},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.refreshEx method, which updates the view of the specified record.","pos":[13687,13840]},{"content":"public void initValue()","pos":[13911,13934]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.initValue method, which initializes field values in a new record.","pos":[13980,14133]},{"content":"public void removeFilter()","pos":[14204,14230]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.removeFilter method, which resets the query for the data source.","pos":[14273,14425]},{"pos":[14500,14513],"content":"Method active","linkify":"Method active","nodes":[{"content":"Method active","pos":[0,13]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.active method, which retrieves data from joined data sources when a user navigates to a new record.","pos":[14515,14702]},{"pos":[14734,14746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"Always returns 1.","pos":[14748,14765]},{"pos":[14771,14784],"content":"Method cursor","linkify":"Method cursor","nodes":[{"content":"Method cursor","pos":[0,13]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.cursor method, which returns the currently active record in the table that is referenced by the data source.","pos":[14786,14982]},{"pos":[15017,15029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15035,15052],"content":"Method findRecord","linkify":"Method findRecord","nodes":[{"content":"Method findRecord","pos":[0,17]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.findRecord method, which finds a specified record in the data source and makes it the current one.","pos":[15054,15240]},{"pos":[15293,15303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[15305,15311]},{"content":"A parameter that is not used in the FormObjectSet base class.","pos":[15314,15375]},{"pos":[15382,15394],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the record was found; otherwise, false.","pos":[15396,15443]},{"pos":[15449,15472],"content":"Method positionToRecord","linkify":"Method positionToRecord","nodes":[{"content":"Method positionToRecord","pos":[0,23]}]},{"pos":[15531,15541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"record","pos":[15543,15549]},{"pos":[15558,15570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15576,15588],"content":"Method first","linkify":"Method first","nodes":[{"content":"Method first","pos":[0,12]}]},{"content":"Moves focus to the first record in a data source.","pos":[15590,15639]},{"pos":[15670,15682],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A non-zero integer if the operation succeeds.","pos":[15684,15729]},{"pos":[15736,15743],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is overridden by the method that is called when a user presses CTRL+HOME to select the first record in a form.","pos":[15745,15867]},{"pos":[15873,15887],"content":"Method formRun","linkify":"Method formRun","nodes":[{"content":"Method formRun","pos":[0,14]}]},{"pos":[15925,15937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[15943,15961],"content":"Method getPosition","linkify":"Method getPosition","nodes":[{"content":"Method getPosition","pos":[0,18]}]},{"pos":[15998,16010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16016,16025],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"pos":[16053,16065],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16071,16082],"content":"Method last","linkify":"Method last","nodes":[{"content":"Method last","pos":[0,11]}]},{"content":"Moves focus to the last record in the data source.","pos":[16084,16134]},{"pos":[16164,16176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A non-zero integer if the operation succeeds.","pos":[16178,16223]},{"pos":[16230,16237],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is overridden by the method that is called when a user presses CTRL+END to select the last record in a form.","pos":[16239,16359]},{"pos":[16365,16383],"content":"Method leaveRecord","linkify":"Method leaveRecord","nodes":[{"content":"Method leaveRecord","pos":[0,18]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.leaveRecord method, which provides a notification when the user moves to another record.","pos":[16385,16561]},{"pos":[16623,16633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"forceUpdate","pos":[16635,16646]},{"pos":[16655,16667],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[16673,16695],"content":"Method masterObjectSet","linkify":"Method masterObjectSet","nodes":[{"content":"Method masterObjectSet","pos":[0,22]}]},{"content":"Retrieves the master object set for the current object set.","pos":[16697,16756]},{"pos":[16807,16819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The master object set.","pos":[16821,16843]},{"pos":[16850,16857],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A form often has more than one object set (data source).","pos":[16859,16915]},{"content":"These are joined together by using a tree hierarchy, where one data source is the master or parent data source.","pos":[16916,17027]},{"content":"The masterObjectSet method returns the ID of the master data source for a specific data source.","pos":[17028,17123]},{"pos":[17130,17138],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example returns the name of the master data source for a FormRun object.","pos":[17140,17226]},{"pos":[17378,17389],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[17391,17542]},{"pos":[17583,17593],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[17595,17600]},{"content":"The name to assign to the control.","pos":[17603,17637]},{"pos":[17644,17656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[17658,17722]},{"pos":[17729,17736],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[17738,17832]},{"content":"It must start with a letter.","pos":[17838,17866]},{"content":"It cannot exceed 250 characters.","pos":[17871,17903]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[17908,17962],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[17967,18007]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[18012,18122]},{"pos":[18128,18139],"content":"Method next","linkify":"Method next","nodes":[{"content":"Method next","pos":[0,11]}]},{"content":"Moves focus to the next record in the data source.","pos":[18141,18191]},{"pos":[18221,18233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A non-zero integer if the operation succeeds.","pos":[18235,18280]},{"pos":[18287,18294],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a user selects the next record in a form by pressing the DOWN ARROW key.","pos":[18296,18395]},{"pos":[18401,18416],"content":"Method nextPage","linkify":"Method nextPage","nodes":[{"content":"Method nextPage","pos":[0,15]}]},{"content":"Moves a specified number of records forward in the data source.","pos":[18418,18481]},{"pos":[18527,18537],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pageSize","pos":[18539,18547]},{"content":"The number of records to skip.","pos":[18550,18580]},{"pos":[18587,18599],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A non-zero integer if the operation succeeds.","pos":[18601,18646]},{"pos":[18653,18660],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a user presses the PAGE DOWN key while he or she is in a form.","pos":[18662,18751]},{"content":"The page size is then automatically calculated and used for the pageSize parameter.","pos":[18752,18835]},{"content":"This method is overridden on the FormDataSource class.","pos":[18836,18890]},{"pos":[18896,18909],"content":"Method object","linkify":"Method object","nodes":[{"content":"Method object","pos":[0,13]}]},{"pos":[18964,18974],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"objectId","pos":[18976,18984]},{"pos":[18993,19005],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19011,19022],"content":"Method prev","linkify":"Method prev","nodes":[{"content":"Method prev","pos":[0,11]}]},{"content":"Moves focus to the previous record in the data source.","pos":[19024,19078]},{"pos":[19108,19120],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A non-zero integer if the operation succeeds.","pos":[19122,19167]},{"pos":[19174,19181],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a user selects the previous record in the form.","pos":[19183,19257]},{"pos":[19263,19278],"content":"Method prevPage","linkify":"Method prevPage","nodes":[{"content":"Method prevPage","pos":[0,15]}]},{"content":"Moves a specified number of records back (a positional change) in the data source.","pos":[19280,19362]},{"pos":[19408,19418],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pageSize","pos":[19420,19428]},{"content":"The number of records to move back (a positional change).","pos":[19431,19488]},{"pos":[19495,19507],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A non-zero integer if the operation succeeds.","pos":[19509,19554]},{"pos":[19561,19568],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is called when a user presses the PAGE UP key while he or she is in a form.","pos":[19570,19657]},{"content":"The page size is then calculated automatically and used for the pageSize parameter.","pos":[19658,19741]},{"pos":[19747,19765],"content":"Method setPosition","linkify":"Method setPosition","nodes":[{"content":"Method setPosition","pos":[0,18]}]},{"pos":[19818,19828],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"position","pos":[19830,19838]},{"pos":[19847,19859],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[19865,19886],"content":"Method validateDelete","linkify":"Method validateDelete","nodes":[{"content":"Method validateDelete","pos":[0,21]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.validateDelete method, which prompts the user to confirm the deletion of a record from the data source.","pos":[19888,20079]},{"pos":[20123,20135],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20141,20161],"content":"Method validateWrite","linkify":"Method validateWrite","nodes":[{"content":"Method validateWrite","pos":[0,20]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.validateWrite method, which determines whether data is valid and ready to be written.","pos":[20163,20336]},{"pos":[20379,20391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[20397,20411],"content":"Method refresh","linkify":"Method refresh","nodes":[{"content":"Method refresh","pos":[0,14]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.refresh method, which updates the view of all records in the data source.","pos":[20413,20574]},{"pos":[20607,20630],"content":"Method addNotifyHandler","linkify":"Method addNotifyHandler","nodes":[{"content":"Method addNotifyHandler","pos":[0,23]}]},{"pos":[20706,20716],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"notifyHandler","pos":[20718,20731]},{"pos":[20739,20752],"content":"Method reread","linkify":"Method reread","nodes":[{"content":"Method reread","pos":[0,13]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.reread method, which rereads the current record from the database.","pos":[20754,20908]},{"pos":[20940,20951],"content":"Method init","linkify":"Method init","nodes":[{"content":"Method init","pos":[0,11]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.init method, which creates a data source query, based on the data source properties.","pos":[20953,21125]},{"pos":[21155,21174],"content":"Method deleteMarked","linkify":"Method deleteMarked","nodes":[{"content":"Method deleteMarked","pos":[0,19]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.deleteMarked method, which deletes all marked records from a data source.","pos":[21176,21337]},{"pos":[21375,21388],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.delete method, which deletes the record that is currently selected from the data source.","pos":[21390,21566]},{"pos":[21598,21610],"content":"Method write","linkify":"Method write","nodes":[{"content":"Method write","pos":[0,12]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.write method, which manages the database write operation.","pos":[21612,21757]},{"pos":[21788,21801],"content":"Method create","linkify":"Method create","nodes":[{"content":"Method create","pos":[0,13]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.create method, which creates a new record in the data source.","pos":[21803,21952]},{"pos":[22001,22011],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"append","pos":[22013,22019]},{"content":"A Boolean flag that indicates whether to insert the record after or before the current cursor position; optional.","pos":[22022,22135]},{"content":"If the value is true, the new record is inserted after the current one.","pos":[22136,22207]},{"pos":[22213,22239],"content":"Method removeNotifyHandler","linkify":"Method removeNotifyHandler","nodes":[{"content":"Method removeNotifyHandler","pos":[0,26]}]},{"pos":[22318,22328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"notifyHandler","pos":[22330,22343]},{"pos":[22351,22364],"content":"Method prompt","linkify":"Method prompt","nodes":[{"content":"Method prompt","pos":[0,13]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.prompt method, which activates the SysQueryForm class that is used to limit a query range.","pos":[22366,22544]},{"pos":[22576,22591],"content":"Method research","linkify":"Method research","nodes":[{"content":"Method research","pos":[0,15]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.research method, which updates the database search that is defined by the filters and sorts that are currently applied to the form.","pos":[22593,22812]},{"pos":[22871,22881],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"retainPosition","pos":[22883,22897]},{"pos":[22905,22921],"content":"Method refreshEx","linkify":"Method refreshEx","nodes":[{"content":"Method refreshEx","pos":[0,16]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.refreshEx method, which updates the view of the specified record.","pos":[22923,23076]},{"pos":[23125,23135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pos","pos":[23137,23140]},{"content":"A parameter that is not used in the FormObjectSet.refreshEx method; optional.","pos":[23143,23220]},{"pos":[23226,23242],"content":"Method initValue","linkify":"Method initValue","nodes":[{"content":"Method initValue","pos":[0,16]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.initValue method, which initializes field values in a new record.","pos":[23244,23397]},{"pos":[23432,23451],"content":"Method removeFilter","linkify":"Method removeFilter","nodes":[{"content":"Method removeFilter","pos":[0,19]}]},{"content":"Has no functionality in the FormObjectSet class but is overridden by the FormDataSource.removeFilter method, which resets the query for the data source.","pos":[23453,23605]},{"pos":[23642,23682],"content":"Class FormObjectSetCacheChangedEventArgs","linkify":"Class FormObjectSetCacheChangedEventArgs","nodes":[{"content":"Class FormObjectSetCacheChangedEventArgs","pos":[0,40]}]},{"pos":[23758,23765],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[23771,23779],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[23785,23792],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[23796,23802]},{"content":"Description","pos":[23853,23864]},{"content":"public NotifyCacheChangeType cacheChangeType()","pos":[24034,24080]},{"content":"public void finalize()","pos":[24153,24175]},{"content":"public void new(NotifyCacheChangeType cacheChangeType)","pos":[24272,24326]},{"content":"Initializes a new instance of the ManagedEventArgs class.","pos":[24329,24386]},{"pos":[24394,24416],"content":"Method cacheChangeType","linkify":"Method cacheChangeType","nodes":[{"content":"Method cacheChangeType","pos":[0,22]}]},{"pos":[24475,24487],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[24493,24508],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[24542,24552],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the ManagedEventArgs class.","pos":[24554,24611]},{"pos":[24678,24688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cacheChangeType","pos":[24690,24705]},{"pos":[24712,24754],"content":"Class FormObjectSetCurrentChangedEventArgs","linkify":"Class FormObjectSetCurrentChangedEventArgs","nodes":[{"content":"Class FormObjectSetCurrentChangedEventArgs","pos":[0,42]}]},{"pos":[24832,24839],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[24845,24853],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[24859,24866],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[24870,24876]},{"content":"Description","pos":[24902,24913]},{"content":"public int position()","pos":[25058,25079]},{"content":"public void new(int position)","pos":[25152,25181]},{"content":"Initializes a new instance of the ManagedEventArgs class.","pos":[25184,25241]},{"content":"public void finalize()","pos":[25246,25268]},{"pos":[25343,25358],"content":"Method position","linkify":"Method position","nodes":[{"content":"Method position","pos":[0,15]}]},{"pos":[25392,25404],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[25410,25420],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the ManagedEventArgs class.","pos":[25422,25479]},{"pos":[25521,25531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"position","pos":[25533,25541]},{"pos":[25549,25564],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[25597,25630],"content":"Class FormObjectSetLeaveEventArgs","linkify":"Class FormObjectSetLeaveEventArgs","nodes":[{"content":"Class FormObjectSetLeaveEventArgs","pos":[0,33]}]},{"pos":[25699,25706],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[25712,25720],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[25726,25733],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[25737,25743]},{"content":"Description","pos":[25765,25776]},{"content":"public void finalize()","pos":[25939,25961]},{"content":"public void new()","pos":[26040,26057]},{"content":"Initializes a new instance of the FormObjectSetLeaveEventArgs class.","pos":[26068,26136]},{"content":"public void cancelLeave()","pos":[26141,26166]},{"pos":[26245,26260],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[26294,26304],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the FormObjectSetLeaveEventArgs class.","pos":[26306,26374]},{"pos":[26403,26421],"content":"Method cancelLeave","linkify":"Method cancelLeave","nodes":[{"content":"Method cancelLeave","pos":[0,18]}]},{"pos":[26457,26499],"content":"Class FormObjectSetMarkingChangedEventArgs","linkify":"Class FormObjectSetMarkingChangedEventArgs","nodes":[{"content":"Class FormObjectSetMarkingChangedEventArgs","pos":[0,42]}]},{"pos":[26577,26584],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[26590,26598],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[26604,26611],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[26615,26621]},{"content":"Description","pos":[26644,26655]},{"content":"public Array ids()","pos":[26797,26815]},{"content":"public void finalize()","pos":[26888,26910]},{"content":"public void new(Array ids)","pos":[26979,27005]},{"content":"Initializes a new instance of the ManagedEventArgs class.","pos":[27008,27065]},{"pos":[27073,27083],"content":"Method ids","linkify":"Method ids","nodes":[{"content":"Method ids","pos":[0,10]}]},{"pos":[27114,27126],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[27132,27147],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[27181,27191],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the ManagedEventArgs class.","pos":[27193,27250]},{"pos":[27289,27299],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"ids","pos":[27301,27304]},{"pos":[27311,27336],"content":"Class FormObjectSetNotify","linkify":"Class FormObjectSetNotify","nodes":[{"content":"Class FormObjectSetNotify","pos":[0,25]}]},{"pos":[27387,27394],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27400,27408],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[27414,27421],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[27425,27431]},{"content":"Description","pos":[27608,27619]},{"content":"public boolean onLeave(FormObjectSet sender)","pos":[27921,27965]},{"content":"public int onRequestCacheSize(FormObjectSet sender)","pos":[28169,28220]},{"content":"public void onCacheChanged(FormObjectSet sender, NotifyCacheChangeType cacheChangeType)","pos":[28417,28504]},{"content":"public void new()","pos":[28665,28682]},{"content":"Initializes a new instance of the FormObjectSetNotify class.","pos":[28848,28908]},{"content":"public void onCurrentChanged(FormObjectSet sender, int position)","pos":[28913,28977]},{"content":"public void onActive(FormObjectSet sender)","pos":[29161,29203]},{"content":"public void onPagingParametersChanged(FormObjectSet sender, boolean pagingEnabled, int startRowIndex, int pageSize)","pos":[29409,29524]},{"content":"public void finalize()","pos":[29657,29679]},{"content":"public void onRuntimeMetadataChanged(FormObjectSet sender, str changedDatasourceName, str referencedDatasourceName, FieldId changedFieldId, DataSourceMetadataChangeType changeType)","pos":[29905,30085]},{"content":"public void onRefresh(FormObjectSet sender)","pos":[30153,30196]},{"content":"public void onMarkingChanged(FormObjectSet sender, Array ids)","pos":[30401,30462]},{"pos":[30652,30666],"content":"Method onLeave","linkify":"Method onLeave","nodes":[{"content":"Method onLeave","pos":[0,14]}]},{"pos":[30723,30733],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[30735,30741]},{"pos":[30750,30762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30768,30793],"content":"Method onRequestCacheSize","linkify":"Method onRequestCacheSize","nodes":[{"content":"Method onRequestCacheSize","pos":[0,25]}]},{"pos":[30857,30867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[30869,30875]},{"pos":[30884,30896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[30902,30923],"content":"Method onCacheChanged","linkify":"Method onCacheChanged","nodes":[{"content":"Method onCacheChanged","pos":[0,21]}]},{"pos":[31023,31033],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[31035,31041]},{"content":"cacheChangeType","pos":[31055,31070]},{"pos":[31078,31088],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the FormObjectSetNotify class.","pos":[31090,31150]},{"pos":[31179,31202],"content":"Method onCurrentChanged","linkify":"Method onCurrentChanged","nodes":[{"content":"Method onCurrentChanged","pos":[0,23]}]},{"pos":[31279,31289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[31291,31297]},{"content":"position","pos":[31311,31319]},{"pos":[31327,31342],"content":"Method onActive","linkify":"Method onActive","nodes":[{"content":"Method onActive","pos":[0,15]}]},{"pos":[31397,31407],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[31409,31415]},{"pos":[31423,31455],"content":"Method onPagingParametersChanged","linkify":"Method onPagingParametersChanged","nodes":[{"content":"Method onPagingParametersChanged","pos":[0,32]}]},{"pos":[31583,31593],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[31595,31601]},{"content":"pagingEnabled","pos":[31615,31628]},{"content":"startRowIndex","pos":[31642,31655]},{"content":"pageSize","pos":[31669,31677]},{"pos":[31685,31700],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[31734,31765],"content":"Method onRuntimeMetadataChanged","linkify":"Method onRuntimeMetadataChanged","nodes":[{"content":"Method onRuntimeMetadataChanged","pos":[0,31]}]},{"pos":[31958,31968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[31970,31976]},{"content":"changedDatasourceName","pos":[31990,32011]},{"content":"referencedDatasourceName","pos":[32025,32049]},{"content":"changedFieldId","pos":[32063,32077]},{"content":"changeType","pos":[32091,32101]},{"pos":[32109,32125],"content":"Method onRefresh","linkify":"Method onRefresh","nodes":[{"content":"Method onRefresh","pos":[0,16]}]},{"pos":[32181,32191],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[32193,32199]},{"pos":[32207,32230],"content":"Method onMarkingChanged","linkify":"Method onMarkingChanged","nodes":[{"content":"Method onMarkingChanged","pos":[0,23]}]},{"pos":[32304,32314],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[32316,32322]},{"content":"ids","pos":[32336,32339]},{"pos":[32346,32377],"content":"Class FormObjectSetNotifyEvents","linkify":"Class FormObjectSetNotifyEvents","nodes":[{"content":"Class FormObjectSetNotifyEvents","pos":[0,31]}]},{"pos":[32447,32454],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32460,32468],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[32474,32481],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[32485,32491]},{"content":"Description","pos":[32668,32679]},{"content":"public boolean onLeave(FormObjectSet sender)","pos":[32993,33037]},{"content":"public int onRequestCacheSize(FormObjectSet sender)","pos":[33247,33298]},{"content":"public void new()","pos":[33501,33518]},{"content":"Initializes a new instance of the FormObjectSetNotifyEvents class.","pos":[33684,33750]},{"content":"public void onRuntimeMetadataChanged(FormObjectSet sender, str changedDatasourceName, str referencedDatasourceName, FieldId changedFieldId, DataSourceMetadataChangeType changeType)","pos":[33755,33935]},{"content":"public void onRefresh(FormObjectSet sender)","pos":[34009,34052]},{"content":"public void finalize()","pos":[34263,34285]},{"content":"public void addEventDelegate(FormObjectSetEventType eventType, ManagedEventDelegate eventDelegate)","pos":[34517,34615]},{"content":"public void onCurrentChanged(FormObjectSet sender, int position)","pos":[34771,34835]},{"content":"public void removeEventDelegate(FormObjectSetEventType eventType, ManagedEventDelegate eventDelegate)","pos":[35025,35126]},{"content":"public void onMarkingChanged(FormObjectSet sender, Array ids)","pos":[35279,35340]},{"content":"public void onPagingParametersChanged(FormObjectSet sender, boolean pagingEnabled, int startRowIndex, int pageSize)","pos":[35533,35648]},{"content":"public void onCacheChanged(FormObjectSet sender, NotifyCacheChangeType cacheChangeType)","pos":[35787,35874]},{"content":"public void onActive(FormObjectSet sender)","pos":[36041,36083]},{"pos":[36298,36312],"content":"Method onLeave","linkify":"Method onLeave","nodes":[{"content":"Method onLeave","pos":[0,14]}]},{"pos":[36369,36379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[36381,36387]},{"pos":[36396,36408],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36414,36439],"content":"Method onRequestCacheSize","linkify":"Method onRequestCacheSize","nodes":[{"content":"Method onRequestCacheSize","pos":[0,25]}]},{"pos":[36503,36513],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[36515,36521]},{"pos":[36530,36542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[36548,36558],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the FormObjectSetNotifyEvents class.","pos":[36560,36626]},{"pos":[36655,36686],"content":"Method onRuntimeMetadataChanged","linkify":"Method onRuntimeMetadataChanged","nodes":[{"content":"Method onRuntimeMetadataChanged","pos":[0,31]}]},{"pos":[36879,36889],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[36891,36897]},{"content":"changedDatasourceName","pos":[36911,36932]},{"content":"referencedDatasourceName","pos":[36946,36970]},{"content":"changedFieldId","pos":[36984,36998]},{"content":"changeType","pos":[37012,37022]},{"pos":[37030,37046],"content":"Method onRefresh","linkify":"Method onRefresh","nodes":[{"content":"Method onRefresh","pos":[0,16]}]},{"pos":[37102,37112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[37114,37120]},{"pos":[37128,37143],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[37177,37200],"content":"Method addEventDelegate","linkify":"Method addEventDelegate","nodes":[{"content":"Method addEventDelegate","pos":[0,23]}]},{"pos":[37311,37321],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"eventType","pos":[37323,37332]},{"content":"eventDelegate","pos":[37346,37359]},{"pos":[37367,37390],"content":"Method onCurrentChanged","linkify":"Method onCurrentChanged","nodes":[{"content":"Method onCurrentChanged","pos":[0,23]}]},{"pos":[37467,37477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[37479,37485]},{"content":"position","pos":[37499,37507]},{"pos":[37515,37541],"content":"Method removeEventDelegate","linkify":"Method removeEventDelegate","nodes":[{"content":"Method removeEventDelegate","pos":[0,26]}]},{"pos":[37655,37665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"eventType","pos":[37667,37676]},{"content":"eventDelegate","pos":[37690,37703]},{"pos":[37711,37734],"content":"Method onMarkingChanged","linkify":"Method onMarkingChanged","nodes":[{"content":"Method onMarkingChanged","pos":[0,23]}]},{"pos":[37808,37818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[37820,37826]},{"content":"ids","pos":[37840,37843]},{"pos":[37851,37883],"content":"Method onPagingParametersChanged","linkify":"Method onPagingParametersChanged","nodes":[{"content":"Method onPagingParametersChanged","pos":[0,32]}]},{"pos":[38011,38021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[38023,38029]},{"content":"pagingEnabled","pos":[38043,38056]},{"content":"startRowIndex","pos":[38070,38083]},{"content":"pageSize","pos":[38097,38105]},{"pos":[38113,38134],"content":"Method onCacheChanged","linkify":"Method onCacheChanged","nodes":[{"content":"Method onCacheChanged","pos":[0,21]}]},{"pos":[38234,38244],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[38246,38252]},{"content":"cacheChangeType","pos":[38266,38281]},{"pos":[38289,38304],"content":"Method onActive","linkify":"Method onActive","nodes":[{"content":"Method onActive","pos":[0,15]}]},{"pos":[38359,38369],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[38371,38377]},{"pos":[38384,38429],"content":"Class FormObjectSetPagingParamsChangedEvtArgs","linkify":"Class FormObjectSetPagingParamsChangedEvtArgs","nodes":[{"content":"Class FormObjectSetPagingParamsChangedEvtArgs","pos":[0,45]}]},{"pos":[38510,38517],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[38523,38531],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[38537,38544],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[38548,38554]},{"content":"Description","pos":[38622,38633]},{"content":"public int pageSize()","pos":[38820,38841]},{"content":"public boolean pagingEnabled()","pos":[38956,38986]},{"content":"public int startRowIndex()","pos":[39092,39118]},{"content":"public void finalize()","pos":[39228,39250]},{"content":"public void new(boolean pagingEnabled, int startRowIndex, int pageSize)","pos":[39364,39435]},{"content":"Initializes a new instance of the ManagedEventArgs class.","pos":[39438,39495]},{"pos":[39503,39518],"content":"Method pageSize","linkify":"Method pageSize","nodes":[{"content":"Method pageSize","pos":[0,15]}]},{"pos":[39552,39564],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39570,39590],"content":"Method pagingEnabled","linkify":"Method pagingEnabled","nodes":[{"content":"Method pagingEnabled","pos":[0,20]}]},{"pos":[39633,39645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39651,39671],"content":"Method startRowIndex","linkify":"Method startRowIndex","nodes":[{"content":"Method startRowIndex","pos":[0,20]}]},{"pos":[39710,39722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[39728,39743],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[39777,39787],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the ManagedEventArgs class.","pos":[39789,39846]},{"pos":[39930,39940],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pagingEnabled","pos":[39942,39955]},{"content":"startRowIndex","pos":[39969,39982]},{"content":"pageSize","pos":[39996,40004]},{"pos":[40011,40055],"content":"Class FormObjectSetRequestCacheSizeEventArgs","linkify":"Class FormObjectSetRequestCacheSizeEventArgs","nodes":[{"content":"Class FormObjectSetRequestCacheSizeEventArgs","pos":[0,44]}]},{"pos":[40135,40142],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[40148,40156],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[40162,40169],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[40173,40179]},{"content":"Description","pos":[40215,40226]},{"content":"public void setCacheSize(int cacheSize)","pos":[40425,40464]},{"content":"public void finalize()","pos":[40551,40573]},{"content":"public void new()","pos":[40677,40694]},{"content":"Initializes a new instance of the FormObjectSetRequestCacheSizeEventArgs class.","pos":[40719,40798]},{"pos":[40806,40825],"content":"Method setCacheSize","linkify":"Method setCacheSize","nodes":[{"content":"Method setCacheSize","pos":[0,19]}]},{"pos":[40877,40887],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cacheSize","pos":[40889,40898]},{"pos":[40906,40921],"content":"Method finalize","linkify":"Method finalize","nodes":[{"content":"Method finalize","pos":[0,15]}]},{"pos":[40955,40965],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the FormObjectSetRequestCacheSizeEventArgs class.","pos":[40967,41046]},{"pos":[41074,41088],"content":"Class FormPart","linkify":"Class FormPart","nodes":[{"content":"Class FormPart","pos":[0,14]}]},{"pos":[41130,41137],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[41143,41151],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[41157,41164],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[41168,41174]},{"content":"Description","pos":[41215,41226]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[41546,41579],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[41593,41632]},{"content":"public str form(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[41735,41765],"source":"public str form(\\[str value\\])"},{"content":"public str managedContentItem(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[41924,41968],"source":"public str managedContentItem(\\[str value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[42113,42143],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[42160,42313]},{"content":"public Guid origin(<ph id=\"ph1\">\\[</ph>Guid value<ph id=\"ph2\">\\]</ph>)","pos":[42318,42352],"source":"public Guid origin(\\[Guid value\\])"},{"content":"public void new()","pos":[42507,42524]},{"content":"Initializes a new instance of the FormPart class.","pos":[42554,42603]},{"pos":[42699,42713],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[42715,42754]},{"pos":[42798,42808],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[42810,42815]},{"pos":[42824,42836],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[42838,42892]},{"pos":[42898,42909],"content":"Method form","linkify":"Method form","nodes":[{"content":"Method form","pos":[0,11]}]},{"pos":[42950,42960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[42962,42967]},{"pos":[42976,42988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[42994,43019],"content":"Method managedContentItem","linkify":"Method managedContentItem","nodes":[{"content":"Method managedContentItem","pos":[0,25]}]},{"pos":[43074,43084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[43086,43091]},{"pos":[43100,43112],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43118,43129],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or another Microsoft Dynamics 365 for Operations application object.","pos":[43131,43284]},{"pos":[43325,43335],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[43337,43342]},{"pos":[43351,43363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[43365,43429]},{"pos":[43436,43443],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[43445,43539]},{"content":"Begins with a letter.","pos":[43545,43566]},{"content":"Doesn't exceed 250 characters.","pos":[43571,43601]},{"content":"Can include numbers and underscore characters.","pos":[43606,43652]},{"content":"Cannot include punctuation or spaces.","pos":[43657,43694]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, classes, and so on.","pos":[43699,43817]},{"pos":[43823,43836],"content":"Method origin","linkify":"Method origin","nodes":[{"content":"Method origin","pos":[0,13]}]},{"pos":[43881,43891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[43893,43898]},{"pos":[43907,43919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[43925,43935],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"content":"Initializes a new instance of the FormPart class.","pos":[43937,43986]},{"pos":[44014,44039],"content":"Class FormProgressControl","linkify":"Class FormProgressControl","nodes":[{"content":"Class FormProgressControl","pos":[0,25]}]},{"pos":[44095,44102],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[44108,44116],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[44122,44129],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[44133,44139]},{"content":"Description","pos":[44243,44254]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[44697,44743],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[44807,44847]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[44979,45022],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[45089,45156]},{"content":"public boolean allowSysSetup()","pos":[45261,45291]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[45371,45454]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[45543,45592],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[45653,45751]},{"content":"public int beginDrag(int x, int y)","pos":[45825,45859]},{"content":"Is called when the user starts to drag a form control.","pos":[45935,45989]},{"content":"public container calcControlSize(int chars, int lines)","pos":[46107,46161]},{"content":"Retrieves the size of the control.","pos":[46217,46251]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[46389,46461],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[46499,46566]},{"content":"public List configurationKeyEx()","pos":[46671,46703]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[46781,46877]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[46953,46997],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[47063,47141]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[47235,47277],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[47345,47470]},{"content":"public int direction(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[47517,47552],"source":"public int direction(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[47799,47838],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[47909,48108]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[48113,48147],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[48223,48304]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[48395,48476]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[48505,48599]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[48677,48754]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[48787,48883]},{"content":"public str dragText()","pos":[48959,48980]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[49069,49139]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[49241,49282],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[49351,49402]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[49523,49565],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[49633,49721]},{"content":"public boolean hasUserSetting()","pos":[49805,49836]},{"content":"Indicates whether the control has custom user settings.","pos":[49915,49970]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[50087,50129],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[50197,50236]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[50369,50405],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[50479,50541]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[50651,50688],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[50761,50800]},{"content":"public str helpField()","pos":[50933,50955]},{"content":"Retrieves the Help text for the control.","pos":[51043,51083]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[51215,51249],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[51325,51429]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[51497,51538],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[51607,51670]},{"content":"public int hWnd()","pos":[51779,51796]},{"content":"Retrieves the Windows handle for the control.","pos":[51889,51934]},{"content":"public boolean isContainer()","pos":[52061,52089]},{"content":"public boolean isDisplayed()","pos":[52343,52371]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[52453,52519]},{"content":"public boolean isRestricted()","pos":[52625,52654]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[52735,52802]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[52907,52963]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[53017,53116]},{"content":"public boolean leave()","pos":[53189,53211]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[53471,53511],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[53581,53645]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[53753,53787],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[53863,53924]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[54035,54070],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[54145,54209]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[54317,54364],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[54427,54480]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[54599,54678]},{"content":"Is called when the control is double-clicked by the user.","pos":[54709,54766]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[54881,54956]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[54991,55056]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[55163,55238]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[55273,55338]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[55445,55518]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[55555,55627]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[55727,55757],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[55837,55988]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[56025,56067],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[56307,56346]},{"content":"public FormControl parentControl()","pos":[56589,56623]},{"content":"Retrieves the parent control for the control.","pos":[56699,56744]},{"content":"public int pos(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[56871,56900],"source":"public int pos(\\[int value\\])"},{"content":"public int progressType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[57153,57191],"source":"public int progressType(\\[int value\\])"},{"content":"public int rangeHi(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[57435,57468],"source":"public int rangeHi(\\[int value\\])"},{"content":"public int rangeLo(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[57717,57750],"source":"public int rangeLo(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[57999,58056],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[58109,58168]},{"content":"public int showContextMenu(int menuHandle)","pos":[58281,58323]},{"content":"Shows the shortcut menu for the control.","pos":[58391,58431]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[58563,58601],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[58673,58800]},{"content":"public int step(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[58845,58875],"source":"public int step(\\[int value\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[59127,59158],"source":"public int style(\\[int value\\])"},{"content":"public str toolTip()","pos":[59409,59429]},{"content":"Retrieves the tooltip text for the control.","pos":[59519,59562]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[59691,59730],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[59801,59863]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[59973,60006],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[60083,60142]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[60255,60289],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[60365,60427]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[60537,60567],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[60819,60870]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[61101,61135],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[61211,61254]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[61383,61421],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[61493,61541]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[61665,61704],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[61775,61834]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[61947,61984],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[62057,62140]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[62229,62265],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[62339,62391]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[62511,62545],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[62621,62703]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[62793,62835],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[62903,62959]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[63075,63115],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[63185,63239]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[63357,63397],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[63467,63516]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[63639,63682],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[63749,63802]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[63921,63955],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[64031,64179]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[64203,64238],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[64313,64390]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[64485,64545],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[64595,64656]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[64767,64821],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[64877,64936]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[65049,65095],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[65159,65220]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[65331,65372],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[65441,65511]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[65613,65654],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[65723,65761]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[65895,65930],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[66005,66067]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[66177,66213],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[66287,66325]},{"content":"public void context()","pos":[66459,66480]},{"content":"Shows the shortcut menu for the control.","pos":[66569,66609]},{"content":"public void endDrag()","pos":[66741,66762]},{"content":"Is called when the user has finished dragging a form control.","pos":[66851,66912]},{"content":"public void inputSearch(str searchStr)","pos":[67023,67061]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[67133,67204]},{"content":"public void paste()","pos":[67305,67324]},{"content":"Pastes the contents of the clipboard into the control.","pos":[67415,67469]},{"content":"public void enter()","pos":[67587,67606]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[67869,67946]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[67979,68049]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[68151,68227],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[68433,68506]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[68543,68641]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[68715,68789],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[68997,69072],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void mouseLeave()","pos":[69279,69303]},{"content":"Indicates that the mouse pointer has left the control.","pos":[69389,69443]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[69561,69630]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[69671,69771]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[69843,69950],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void dragLeave()","pos":[70125,70148]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[70235,70331]},{"content":"public void displayControl()","pos":[70407,70435]},{"content":"Displays the control.","pos":[70517,70538]},{"content":"public void cut()","pos":[70689,70706]},{"content":"Cuts the contents of the control.","pos":[70799,70832]},{"content":"public void stepIt()","pos":[70971,70991]},{"content":"public void deltaPos(int inc)","pos":[71253,71282]},{"content":"public void lostFocus()","pos":[71535,71558]},{"content":"Indicates that the control has lost focus.","pos":[71645,71687]},{"content":"public void copy()","pos":[71817,71835]},{"content":"Copies the contents of the control to the clipboard.","pos":[71927,71979]},{"content":"public void prefColumnSize(int width, int height)","pos":[72099,72148]},{"content":"Specifies the preferred column width and height for the form control.","pos":[72209,72278]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[72381,72453],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setFocus()","pos":[72663,72685]},{"content":"Sets the focus on the control.","pos":[72773,72803]},{"content":"public void resetUserSetting()","pos":[72945,72975]},{"content":"Resets the user settings for the control.","pos":[73055,73096]},{"content":"public void gotFocus()","pos":[73227,73249]},{"content":"Indicates that the control has received focus.","pos":[73337,73383]},{"pos":[73512,73531],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[73533,73573]},{"pos":[73630,73640],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73642,73647]},{"content":"The new value for the property; optional.","pos":[73650,73691]},{"pos":[73698,73710],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[73712,73768]},{"pos":[73775,73782],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[73784,73863]},{"pos":[73869,73885],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[73887,73954]},{"pos":[74008,74018],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74020,74025]},{"content":"The value to assign to the allowEdit property.","pos":[74028,74074]},{"pos":[74081,74093],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[74095,74147]},{"pos":[74154,74161],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[74163,74285]},{"pos":[74291,74311],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[74313,74396]},{"pos":[74439,74451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[74453,74521]},{"pos":[74527,74549],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[74551,74649]},{"pos":[74709,74719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74721,74726]},{"content":"The new value for the property; optional.","pos":[74729,74770]},{"pos":[74777,74789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[74791,74870]},{"pos":[74877,74884],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[74886,74923]},{"pos":[74929,74945],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[74947,75001]},{"pos":[75048,75058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[75060,75061]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[75064,75134]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[75135,75202]},{"content":"y","pos":[75214,75215]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[75218,75288]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[75289,75356]},{"pos":[75363,75375],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[75377,75416]},{"pos":[75423,75430],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[75432,75513]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[75514,75618]},{"pos":[75624,75646],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[75648,75682]},{"pos":[75749,75759],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[75761,75766]},{"content":"The number of lines to use to determine the height.","pos":[75769,75820]},{"content":"lines","pos":[75832,75837]},{"content":"The number of lines to use to determine the height.","pos":[75840,75891]},{"pos":[75898,75910],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[75912,75958]},{"pos":[75964,75987],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[75989,76056]},{"pos":[76139,76149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76151,76156]},{"content":"The ID of the configuration key to assign to the control; optional.","pos":[76159,76226]},{"pos":[76233,76245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[76247,76319]},{"pos":[76326,76333],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[76335,76416]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[76417,76510]},{"pos":[76516,76541],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[76543,76639]},{"pos":[76684,76696],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[76698,76784]},{"pos":[76791,76798],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[76800,76849]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[76850,76998]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[76999,77133]},{"pos":[77139,77164],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[77166,77244]},{"pos":[77299,77309],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77311,77316]},{"content":"The string that contains the country/region codes to set; optional.","pos":[77319,77386]},{"pos":[77393,77405],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[77407,77472]},{"pos":[77478,77501],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[77503,77628]},{"pos":[77681,77691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77693,77698]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[77701,77775]},{"pos":[77782,77794],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[77796,77908]},{"pos":[77915,77922],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[77924,78051]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[78052,78145]},{"pos":[78151,78167],"content":"Method direction","linkify":"Method direction","nodes":[{"content":"Method direction","pos":[0,16]}]},{"pos":[78213,78223],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78225,78230]},{"pos":[78239,78251],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[78257,78277],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[78279,78478]},{"pos":[78528,78538],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78540,78545]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[78548,78622]},{"pos":[78629,78641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.","pos":[78643,78787]},{"pos":[78793,78808],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[78810,78891]},{"pos":[78936,78946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78948,78953]},{"content":"An integer that indicates whether drag-and-drop behavior is enabled; optional.","pos":[78956,79034]},{"pos":[79041,79053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[79055,79115]},{"pos":[79122,79129],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave, the dragOver, and dragOverEx methods to specify the behavior.","pos":[79131,79211]},{"pos":[79217,79232],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[79234,79328]},{"pos":[79422,79432],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[79434,79444]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[79447,79532]},{"content":"dragMode","pos":[79544,79552]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[79555,79640]},{"content":"x","pos":[79652,79653]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[79656,79741]},{"content":"y","pos":[79753,79754]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[79757,79842]},{"pos":[79849,79861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[79863,79928]},{"pos":[79934,79951],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[79953,80049]},{"pos":[80139,80149],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[80151,80161]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[80164,80249]},{"content":"dragMode","pos":[80261,80269]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[80272,80357]},{"content":"x","pos":[80369,80370]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[80373,80458]},{"content":"y","pos":[80470,80471]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[80474,80559]},{"pos":[80566,80578],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[80580,80645]},{"pos":[80651,80666],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[80668,80738]},{"pos":[80772,80784],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[80786,80917]},{"pos":[80923,80937],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[80939,80990]},{"pos":[81042,81052],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[81054,81059]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[81062,81134]},{"pos":[81141,81153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[81155,81203]},{"pos":[81210,81217],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[81219,81294]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[81295,81390]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[81391,81525]},{"pos":[81531,81548],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[81550,81638]},{"pos":[81691,81701],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[81703,81706]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[81709,81779]},{"pos":[81786,81798],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[81800,81867]},{"pos":[81873,81894],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[81896,81951]},{"pos":[81995,82007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[82009,82072]},{"pos":[82078,82091],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[82093,82132]},{"pos":[82185,82195],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[82197,82202]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[82205,82270]},{"content":"mode","pos":[82282,82286]},{"content":"An integer that indicates how the height is calculated; optional.","pos":[82289,82354]},{"pos":[82361,82373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[82375,82411]},{"pos":[82418,82425],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[82427,82480]},{"content":"Calculate the height according to the following table:","pos":[82481,82535]},{"content":"Mode","pos":[82539,82543]},{"content":"Height calculation","pos":[82557,82575]},{"content":"-1 Exact","pos":[82763,82771]},{"content":"The exact height in pixels of the controls is used.","pos":[82781,82832]},{"content":"0 Auto","pos":[82875,82881]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[82893,82982]},{"content":"1 Column height","pos":[82987,83002]},{"content":"The layout of the form determines the height of the control.","pos":[83005,83065]},{"content":"The height and height calculation mode can be set separately.","pos":[83098,83159]},{"pos":[83165,83182],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[83184,83246]},{"pos":[83293,83303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[83305,83310]},{"content":"An integer value that indicates how control height is calculated; optional.","pos":[83313,83388]},{"pos":[83395,83407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[83409,83430]},{"pos":[83437,83444],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[83446,83500]},{"content":"Mode","pos":[83504,83508]},{"content":"Height calculation","pos":[83520,83538]},{"content":"Exact","pos":[83724,83729]},{"content":"The exact height in pixels of the controls is used.","pos":[83740,83791]},{"content":"Auto","pos":[83834,83838]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[83850,83939]},{"content":"Column height","pos":[83944,83957]},{"content":"The layout of the form determines the height of the control.","pos":[83960,84020]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[84053,84138]},{"pos":[84144,84162],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[84164,84203]},{"pos":[84251,84261],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[84263,84268]},{"content":"An integer that specifies the height in pixels; optional.","pos":[84271,84328]},{"pos":[84335,84347],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[84349,84370]},{"pos":[84377,84384],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[84386,84476]},{"pos":[84482,84498],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[84500,84540]},{"pos":[84575,84587],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[84589,84677]},{"pos":[84684,84691],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[84693,84763]},{"content":"Use the helpText method to set the value of the Help text.","pos":[84764,84822]},{"pos":[84828,84843],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[84845,84949]},{"pos":[84994,85004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85006,85011]},{"content":"The value to assign as the Help text for the control.","pos":[85014,85067]},{"pos":[85074,85086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[85088,85143]},{"pos":[85150,85157],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method sets the HelpText property for an object by using the property sheet.","pos":[85159,85240]},{"content":"The Help text must not exceed 250 characters.","pos":[85241,85286]},{"pos":[85292,85314],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[85316,85379]},{"pos":[85431,85441],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[85443,85448]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[85451,85518]},{"pos":[85525,85537],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[85539,85589]},{"pos":[85595,85606],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[85608,85653]},{"pos":[85683,85695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[85697,85724]},{"pos":[85731,85738],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[85740,85784]},{"pos":[85790,85808],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[85849,85861],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[85867,85885],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[85887,85953]},{"pos":[85994,86006],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[86008,86059]},{"pos":[86066,86073],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[86075,86143]},{"pos":[86149,86168],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[86170,86237]},{"pos":[86279,86291],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[86293,86345]},{"pos":[86351,86376],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[86378,86477]},{"pos":[86546,86556],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[86558,86575]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[86578,86706]},{"pos":[86713,86725],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[86727,86886]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[86887,87076]},{"pos":[87083,87090],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[87092,87169]},{"content":"FormAllowUserSetup::No 0","pos":[87509,87533]},{"content":"No changes can be made to the control.","pos":[87544,87582]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[87583,87672]},{"content":"FormAllowUserSetup::Restricted 1","pos":[87677,87709]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[87712,87804]},{"content":"The user cannot move the control.","pos":[87805,87838]},{"content":"FormAllowUserSetup::Yes 2","pos":[87845,87870]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[87880,87972]},{"content":"The user can also move the control.","pos":[87973,88008]},{"pos":[88016,88028],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[88063,88075],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[88081,88092],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[88094,88158]},{"pos":[88209,88219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88221,88226]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[88229,88315]},{"content":"mode","pos":[88327,88331]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[88334,88420]},{"pos":[88427,88439],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[88441,88492]},{"pos":[88498,88513],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[88515,88576]},{"pos":[88621,88631],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88633,88638]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[88641,88727]},{"pos":[88734,88746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[88748,88804]},{"pos":[88810,88826],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[88828,88892]},{"pos":[88938,88948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[88950,88955]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[88958,89039]},{"pos":[89046,89058],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[89060,89111]},{"pos":[89117,89137],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[89139,89192]},{"pos":[89250,89260],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[89262,89267]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[89270,89364]},{"pos":[89371,89383],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[89385,89458]},{"pos":[89464,89484],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[89486,89543]},{"pos":[89635,89645],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[89647,89648]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[89651,89712]},{"content":"y","pos":[89724,89725]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[89728,89789]},{"content":"button","pos":[89801,89807]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[89810,89871]},{"content":"Ctrl","pos":[89883,89887]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[89890,89951]},{"content":"Shift","pos":[89963,89968]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[89971,90032]},{"pos":[90039,90051],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[90053,90092]},{"pos":[90099,90106],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[90108,90212]},{"pos":[90218,90234],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[90236,90301]},{"pos":[90389,90399],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[90401,90402]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[90405,90466]},{"content":"y","pos":[90478,90479]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[90482,90543]},{"content":"button","pos":[90555,90561]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[90564,90625]},{"content":"Ctrl","pos":[90637,90641]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[90644,90705]},{"content":"Shift","pos":[90717,90722]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[90725,90786]},{"pos":[90793,90805],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[90807,90846]},{"pos":[90853,90860],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[90862,90966]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[90967,91102]},{"pos":[91108,91124],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[91126,91191]},{"pos":[91279,91289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[91291,91292]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[91295,91356]},{"content":"y","pos":[91368,91369]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[91372,91433]},{"content":"button","pos":[91445,91451]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[91454,91515]},{"content":"Ctrl","pos":[91527,91531]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[91534,91595]},{"content":"Shift","pos":[91607,91612]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[91615,91676]},{"pos":[91683,91695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[91697,91736]},{"pos":[91743,91750],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[91752,91856]},{"pos":[91862,91876],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[91878,91950]},{"pos":[92036,92046],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[92048,92049]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[92052,92113]},{"content":"y","pos":[92125,92126]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[92129,92190]},{"content":"button","pos":[92202,92208]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[92211,92272]},{"content":"Ctrl","pos":[92284,92288]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[92291,92352]},{"content":"Shift","pos":[92364,92369]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[92372,92433]},{"pos":[92440,92452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[92454,92493]},{"pos":[92500,92507],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[92509,92613]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[92614,92749]},{"pos":[92755,92766],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[92768,92919]},{"pos":[92960,92970],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[92972,92977]},{"content":"The name to assign to the control.","pos":[92980,93014]},{"pos":[93021,93033],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[93035,93099]},{"pos":[93106,93113],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[93115,93209]},{"content":"It must start with a letter.","pos":[93215,93243]},{"content":"It cannot exceed 250 characters.","pos":[93248,93280]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[93285,93339],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[93344,93384]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[93389,93499]},{"pos":[93505,93528],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[93581,93591],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93593,93598]},{"pos":[93607,93619],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93625,93652],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[93704,93716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93722,93742],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[93744,93789]},{"pos":[93836,93848],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[93850,93885]},{"pos":[93891,93901],"content":"Method pos","linkify":"Method pos","nodes":[{"content":"Method pos","pos":[0,10]}]},{"pos":[93941,93951],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[93953,93958]},{"pos":[93967,93979],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[93985,94004],"content":"Method progressType","linkify":"Method progressType","nodes":[{"content":"Method progressType","pos":[0,19]}]},{"pos":[94053,94063],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[94065,94070]},{"pos":[94079,94091],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[94097,94111],"content":"Method rangeHi","linkify":"Method rangeHi","nodes":[{"content":"Method rangeHi","pos":[0,14]}]},{"pos":[94155,94165],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[94167,94172]},{"pos":[94181,94193],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[94199,94213],"content":"Method rangeLo","linkify":"Method rangeLo","nodes":[{"content":"Method rangeLo","pos":[0,14]}]},{"pos":[94257,94267],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[94269,94274]},{"pos":[94283,94295],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[94301,94319],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[94321,94380]},{"pos":[94448,94458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[94460,94465]},{"content":"The ID of the security key to assign to the control; optional.","pos":[94468,94530]},{"pos":[94537,94549],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[94551,94650]},{"pos":[94656,94678],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[94680,94720]},{"pos":[94775,94785],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[94787,94797]},{"content":"The ID of the menu to show.","pos":[94800,94827]},{"pos":[94834,94846],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[94848,94907]},{"pos":[94913,94924],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[94926,95053]},{"pos":[95102,95112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95114,95119]},{"content":"The value to assign to the skip property of the control; optional.","pos":[95122,95188]},{"pos":[95195,95207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise false.","pos":[95209,95314]},{"pos":[95320,95331],"content":"Method step","linkify":"Method step","nodes":[{"content":"Method step","pos":[0,11]}]},{"pos":[95372,95382],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95384,95389]},{"pos":[95398,95410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[95416,95428],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[95470,95480],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95482,95487]},{"pos":[95496,95508],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[95514,95528],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[95530,95573]},{"pos":[95606,95618],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[95620,95722]},{"pos":[95729,95736],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[95738,95810]},{"pos":[95816,95826],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[95828,95890]},{"pos":[95940,95950],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[95952,95957]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[95960,96044]},{"content":"mode","pos":[96056,96060]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[96063,96147]},{"pos":[96154,96166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[96168,96217]},{"pos":[96223,96237],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[96239,96298]},{"pos":[96342,96352],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96354,96359]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[96362,96446]},{"pos":[96453,96465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[96467,96521]},{"pos":[96527,96542],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[96544,96606]},{"pos":[96651,96661],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96663,96668]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[96671,96750]},{"pos":[96757,96769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[96771,96820]},{"pos":[96826,96837],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[96878,96888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[96890,96895]},{"pos":[96904,96916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[96922,96949],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[97013,97023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[97025,97029]},{"pos":[97038,97050],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[97056,97071],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[97073,97116]},{"pos":[97161,97171],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97173,97178]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[97181,97253]},{"pos":[97260,97272],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[97274,97304]},{"pos":[97310,97329],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[97331,97379]},{"pos":[97428,97438],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97440,97445]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[97448,97525]},{"pos":[97532,97544],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[97546,97581]},{"pos":[97587,97607],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[97609,97668]},{"pos":[97718,97728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[97730,97735]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[97738,97826]},{"pos":[97833,97845],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[97847,97893]},{"pos":[97899,97917],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[97919,98002]},{"pos":[98050,98060],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[98062,98067]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[98070,98150]},{"pos":[98157,98169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[98171,98227]},{"pos":[98233,98250],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[98252,98304]},{"pos":[98351,98361],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[98363,98368]},{"content":"The user height for the control; optional.","pos":[98371,98413]},{"pos":[98420,98432],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[98434,98473]},{"pos":[98479,98494],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[98496,98578]},{"pos":[98623,98633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[98635,98640]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[98643,98722]},{"pos":[98729,98741],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[98743,98798]},{"pos":[98805,98812],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[98814,98984]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[98985,99060]},{"content":"This method lets you programmatically determine and set the value.","pos":[99061,99127]},{"pos":[99133,99156],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[99158,99214]},{"pos":[99267,99277],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[99279,99284]},{"content":"The organization container to set for the control; optional.","pos":[99287,99347]},{"pos":[99354,99366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[99368,99411]},{"pos":[99417,99438],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[99440,99494]},{"pos":[99545,99555],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[99557,99562]},{"content":"The organization sibling to set for the control; optional.","pos":[99565,99623]},{"pos":[99630,99642],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[99644,99685]},{"pos":[99691,99712],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[99714,99763]},{"pos":[99814,99824],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[99826,99831]},{"content":"The user label text to set for the control; optional.","pos":[99834,99887]},{"pos":[99894,99906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[99908,99944]},{"pos":[99950,99974],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[99976,100029]},{"pos":[100083,100093],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100095,100100]},{"content":"The user security level to set for the control; optional.","pos":[100103,100160]},{"pos":[100167,100179],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[100181,100221]},{"pos":[100227,100242],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[100244,100392]},{"pos":[100437,100447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100449,100454]},{"content":"The value to assign to the userSkip property; optional.","pos":[100457,100512]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[100513,100608]},{"pos":[100615,100627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[100629,100698]},{"pos":[100704,100720],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[100722,100799]},{"pos":[100845,100855],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[100857,100862]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[100865,100931]},{"pos":[100938,100950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[100952,101081]},{"pos":[101088,101095],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[101097,101191]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[101192,101308],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[101309,101459]},{"pos":[101465,101487],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[101489,101550]},{"pos":[101619,101629],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[101631,101636]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[101639,101716]},{"content":"mode","pos":[101728,101732]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[101735,101812]},{"pos":[101819,101831],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[101833,101881]},{"pos":[101887,101913],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[101915,101974]},{"pos":[102039,102049],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[102051,102055]},{"pos":[102064,102076],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[102078,102132]},{"pos":[102138,102165],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[102167,102228]},{"pos":[102285,102295],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102297,102302]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[102305,102383]},{"pos":[102390,102402],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[102404,102452]},{"pos":[102458,102472],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[102474,102544]},{"pos":[102596,102606],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102608,102613]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[102616,102688]},{"pos":[102695,102707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[102709,102758]},{"pos":[102764,102776],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[102778,102816]},{"pos":[102868,102878],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[102880,102885]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[102888,102952]},{"content":"mode","pos":[102964,102968]},{"content":"An integer that indicates how the width is calculated; optional.","pos":[102971,103035]},{"pos":[103042,103054],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[103056,103091]},{"pos":[103098,103105],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[103107,103160]},{"content":"Calculate the width according to the following table:","pos":[103161,103214]},{"content":"Mode","pos":[103218,103222]},{"content":"Width calculation","pos":[103235,103252]},{"content":"-1 Exact","pos":[103438,103446]},{"content":"The exact width in pixels of the controls is used.","pos":[103455,103505]},{"content":"0 Auto","pos":[103548,103554]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[103565,103653]},{"content":"1 Column width","pos":[103658,103672]},{"content":"The layout of the form determines the width of the control.","pos":[103675,103734]},{"content":"The width and width calculation mode can be set separately.","pos":[103767,103826]},{"pos":[103832,103848],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[103850,103912]},{"pos":[103958,103968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[103970,103975]},{"content":"An integer value that indicates how control width is calculated; optional.","pos":[103978,104052]},{"pos":[104059,104071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[104073,104134]},{"pos":[104141,104148],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[104150,104203]},{"content":"Mode","pos":[104207,104211]},{"content":"Width calculation","pos":[104222,104239]},{"content":"Exact","pos":[104423,104428]},{"content":"The exact width in pixels of the controls is used.","pos":[104438,104488]},{"content":"Auto","pos":[104531,104535]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[104546,104634]},{"content":"Column width","pos":[104639,104651]},{"content":"The layout of the form determines the width of the control.","pos":[104654,104713]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[104746,104829]},{"pos":[104835,104852],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[104854,104892]},{"pos":[104939,104949],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[104951,104956]},{"content":"An integer that specifies the width in pixels; optional.","pos":[104959,105015]},{"pos":[105022,105034],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[105036,105071]},{"pos":[105078,105085],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[105087,105160]},{"pos":[105166,105180],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[105182,105222]},{"pos":[105255,105269],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[105271,105332]},{"pos":[105366,105373],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[105375,105503]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[105504,105608]},{"pos":[105614,105632],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[105634,105705]},{"pos":[105756,105766],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[105768,105777]},{"content":"The string value to use to filter data; optional.","pos":[105780,105829]},{"pos":[105835,105847],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[105849,105903]},{"pos":[105934,105946],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[105977,105994],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[105996,106066]},{"pos":[106156,106166],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[106168,106169]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[106172,106233]},{"content":"y","pos":[106245,106246]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[106249,106310]},{"content":"button","pos":[106322,106328]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[106331,106392]},{"content":"Ctrl","pos":[106404,106408]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[106411,106472]},{"content":"Shift","pos":[106484,106489]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[106492,106553]},{"pos":[106559,106577],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[106662,106672],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[106674,106680]},{"content":"e","pos":[106694,106695]},{"pos":[106703,106714],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[106716,106814]},{"pos":[106900,106910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[106912,106922]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[106925,107010]},{"content":"dragMode","pos":[107022,107030]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[107033,107118]},{"content":"x","pos":[107130,107131]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[107134,107219]},{"content":"y","pos":[107231,107232]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[107235,107320]},{"pos":[107326,107342],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[107425,107435],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[107437,107443]},{"content":"e","pos":[107457,107458]},{"pos":[107466,107483],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[107567,107577],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[107579,107585]},{"content":"e","pos":[107599,107600]},{"pos":[107608,107625],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[107627,107681]},{"pos":[107717,107730],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[107732,107832]},{"pos":[107914,107924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[107926,107936]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[107939,108024]},{"content":"dragMode","pos":[108036,108044]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[108047,108132]},{"content":"x","pos":[108144,108145]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[108148,108233]},{"content":"y","pos":[108245,108246]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[108249,108334]},{"pos":[108340,108369],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[108487,108497],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[108499,108515]},{"content":"objectMethodToCall","pos":[108529,108547]},{"content":"overrideObject","pos":[108561,108575]},{"pos":[108583,108599],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[108601,108697]},{"pos":[108732,108753],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[108755,108776]},{"pos":[108816,108826],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[108828,108861]},{"pos":[108890,108903],"content":"Method stepIt","linkify":"Method stepIt","nodes":[{"content":"Method stepIt","pos":[0,13]}]},{"pos":[108935,108950],"content":"Method deltaPos","linkify":"Method deltaPos","nodes":[{"content":"Method deltaPos","pos":[0,15]}]},{"pos":[108992,109002],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"inc","pos":[109004,109007]},{"pos":[109015,109031],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[109033,109075]},{"pos":[109110,109121],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[109123,109175]},{"pos":[109205,109226],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[109228,109297]},{"pos":[109359,109369],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[109371,109376]},{"content":"The preferred height of the control.","pos":[109379,109415]},{"content":"height","pos":[109427,109433]},{"content":"The preferred height of the control.","pos":[109436,109472]},{"pos":[109478,109492],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[109573,109583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[109585,109591]},{"content":"e","pos":[109605,109606]},{"pos":[109614,109629],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[109631,109661]},{"pos":[109695,109718],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[109720,109761]},{"pos":[109803,109818],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[109820,109866]},{"pos":[109899,109919],"content":"Class FormQueryMiner","linkify":"Class FormQueryMiner","nodes":[{"content":"Class FormQueryMiner","pos":[0,20]}]},{"pos":[109965,109972],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[109978,109986],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[109992,109999],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[110003,110009]},{"content":"Description","pos":[110012,110023]},{"pos":[110055,110077],"content":"Class FormRadioControl","linkify":"Class FormRadioControl","nodes":[{"content":"Class FormRadioControl","pos":[0,22]}]},{"pos":[110130,110137],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[110143,110151],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[110157,110164],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[110168,110174]},{"content":"Description","pos":[110278,110289]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[110732,110778],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[110842,110882]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[111014,111057],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can modify the contents of the control.","pos":[111124,111191]},{"content":"public boolean allowSysSetup()","pos":[111296,111326]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[111406,111489]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[111578,111614],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[111860,111909],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[111970,112068]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[112142,112183],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[112252,112301]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[112424,112459],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[112534,112596]},{"content":"public int beginDrag(int x, int y)","pos":[112706,112740]},{"content":"Is called when the user starts to drag a form control.","pos":[112816,112870]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[112988,113018],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the font weight that is used to display text in the control.","pos":[113098,113171]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[113270,113327],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[113552,113603],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[113834,113877],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114116,114157],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[114398,114452]},{"content":"Retrieves the size of the control.","pos":[114508,114542]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[114680,114713],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[114790,114829]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114962,115000],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[115072,115115]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[115244,115281],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[115354,115399]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[115526,115559],"source":"public int columns(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[115808,115880],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[115918,115985]},{"content":"public List configurationKeyEx()","pos":[116090,116122]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[116200,116296]},{"content":"public int count()","pos":[116372,116390]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[116654,116698],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[116764,116842]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[116936,116995],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[117218,117261],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[117500,117536],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[117782,117824],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[117892,118017]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[118064,118104],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[118174,118246]},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[118346,118404],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[118628,118680],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[118910,118954],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119192,119231],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[119302,119501]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119506,119540],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[119616,119697]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[119788,119869]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[119898,119992]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[120070,120147]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[120180,120276]},{"content":"public str dragText()","pos":[120352,120373]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[120462,120532]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[120634,120675],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether the object is enabled or disabled.","pos":[120744,120797]},{"content":"public EnumId enumType(<ph id=\"ph1\">\\[</ph>EnumId value<ph id=\"ph2\">\\]</ph>)","pos":[120916,120956],"source":"public EnumId enumType(\\[EnumId value\\])"},{"content":"public EnumId enumTypeValue()","pos":[121198,121227]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[121480,121544],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int find(str string)","pos":[121762,121789]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[122044,122074],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font that is used for the control.","pos":[122154,122217]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[122326,122360],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the font size that is used for the control.","pos":[122436,122492]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[122608,122649],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[122718,122769]},{"content":"public int framePosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[122890,122929],"source":"public int framePosition(\\[int value\\])"},{"content":"public int frameType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[123172,123207],"source":"public int frameType(\\[int value\\])"},{"content":"public str getText(int index)","pos":[123454,123483]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[123736,123778],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[123846,123934]},{"content":"public boolean hasUserSetting()","pos":[124018,124049]},{"content":"Indicates whether the control has custom user settings.","pos":[124128,124183]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[124300,124342],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[124410,124449]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[124582,124618],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[124692,124754]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[124864,124901],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[124974,125013]},{"content":"public str helpField()","pos":[125146,125168]},{"content":"Retrieves the Help text for the control.","pos":[125256,125296]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[125428,125462],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.","pos":[125538,125649]},{"content":"public boolean hideFirstEntry(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[125710,125758],"source":"public boolean hideFirstEntry(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[125992,126033],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[126102,126165]},{"content":"public int hWnd()","pos":[126274,126291]},{"content":"Returns the handle to the window that is associated with the control.","pos":[126384,126453]},{"content":"public boolean isContainer()","pos":[126556,126584]},{"content":"Gets a value that indicates whether the control is a container.","pos":[126666,126729]},{"content":"public boolean isDisplayed()","pos":[126838,126866]},{"content":"Returns a value that indicates whether the control is displayed.","pos":[126948,127012]},{"content":"public boolean isRestricted()","pos":[127120,127149]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[127230,127297]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[127402,127458]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[127512,127611]},{"content":"public boolean isValid()","pos":[127684,127708]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[127966,128006],"source":"public boolean italic(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the text in the control is italic.","pos":[128076,128157]},{"content":"public int item(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[128248,128278],"source":"public int item(\\[int value\\])"},{"content":"public int items(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[128530,128561],"source":"public int items(\\[int value\\])"},{"content":"public boolean leave()","pos":[128812,128834]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[129094,129134],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[129204,129268]},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[129376,129431],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[129658,129707],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[129940,129981],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[130222,130256],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[130332,130393]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[130504,130539],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[130614,130678]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[130786,130833],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[130896,130949]},{"content":"public boolean modified()","pos":[131068,131093]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[131350,131429]},{"content":"Is called when the control is double-clicked by the user.","pos":[131460,131517]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[131632,131707]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[131742,131807]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[131914,131989]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[132024,132089]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[132196,132269]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[132306,132378]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[132478,132508],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[132588,132739]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[132776,132818],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[133058,133097]},{"content":"public FormControl parentControl()","pos":[133340,133374]},{"content":"Retrieves the parent control for the control.","pos":[133450,133495]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[133622,133662],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[133904,133960],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[134186,134236],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[134468,134510],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[134750,134807],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the security key that is associated with the control.","pos":[134860,134929]},{"content":"public int selection(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[135032,135067],"source":"public int selection(\\[int value\\])"},{"content":"public int selectionChange()","pos":[135314,135342]},{"content":"public int selectText(str string)","pos":[135596,135629]},{"content":"public int showContextMenu(int menuHandle)","pos":[135878,135920]},{"content":"Shows the shortcut menu for the control.","pos":[135988,136028]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[136160,136198],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[136270,136397]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[136442,136486],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[136724,136754],"source":"public str text(\\[str value\\])"},{"content":"Sets or returns the text for the control.","pos":[136834,136875]},{"content":"public str toolTip()","pos":[137006,137026]},{"content":"Sets or returns the tooltip text for the control.","pos":[137116,137165]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[137288,137327],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[137398,137460]},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[137570,137624],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[137852,137900],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[138134,138174],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[138416,138449],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[138526,138585]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[138698,138732],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[138808,138870]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[138980,139010],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[139262,139305],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the value of the underline property for the text in the control.","pos":[139372,139452]},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[139544,139595]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[139826,139860],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[139936,139979]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[140108,140146],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[140218,140266]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[140390,140429],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[140500,140559]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[140672,140709],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[140782,140865]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[140954,140990],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[141064,141116]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[141236,141270],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[141346,141428]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[141518,141560],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[141628,141684]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[141800,141840],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[141910,141964]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[142082,142122],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[142192,142241]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[142364,142407],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[142474,142527]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[142646,142680],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[142756,142904]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[142928,142963],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[143038,143115]},{"content":"public boolean validate()","pos":[143210,143235]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[143492,143552],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[143602,143663]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[143774,143828],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[143884,143943]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[144056,144102],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[144166,144227]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[144338,144376],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[144620,144661],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[144730,144800]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[144902,144943],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[145012,145050]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[145184,145219],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[145294,145356]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[145466,145502],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[145576,145614]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[145748,145822],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[146030,146067],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[146312,146389]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[146422,146492]},{"content":"public void setFocus()","pos":[146594,146616]},{"content":"Sets the focus on the control.","pos":[146704,146734]},{"content":"public void insert(str string, int index)","pos":[146876,146917]},{"content":"private void OnSelectionChanged(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[147158,147241],"source":"private void OnSelectionChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void delete(str string)","pos":[147440,147470]},{"content":"public void prefColumnSize(int width, int height)","pos":[147722,147771]},{"content":"Specifies the preferred column width and height for the form control.","pos":[147832,147901]},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[148004,148077],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void jumpRef()","pos":[148286,148307]},{"content":"public void endUpdate()","pos":[148568,148591]},{"content":"public void cut()","pos":[148850,148867]},{"content":"Cuts the contents of the control.","pos":[148960,148993]},{"content":"public void resetUserSetting()","pos":[149132,149162]},{"content":"Resets the user settings for the control.","pos":[149242,149283]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[149414,149483]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[149524,149624]},{"content":"public void lostFocus()","pos":[149696,149719]},{"content":"Indicates that the control has lost focus.","pos":[149806,149848]},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[149978,150054],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[150260,150335],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void displayControl()","pos":[150542,150570]},{"content":"Displays the control.","pos":[150652,150673]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[150824,150899],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void mouseLeave()","pos":[151106,151130]},{"content":"Indicates that the mouse pointer has left the control.","pos":[151216,151270]},{"content":"public void dragLeave()","pos":[151388,151411]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[151498,151594]},{"content":"public void add(str string)","pos":[151670,151697]},{"content":"public void context()","pos":[151952,151973]},{"content":"Shows the shortcut menu for the control.","pos":[152062,152102]},{"content":"private void OnSelectionChanging(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[152234,152318],"source":"private void OnSelectionChanging(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void beginUpdate()","pos":[152516,152541]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[152798,152874],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void enter()","pos":[153080,153099]},{"content":"public void inputSearch(str searchStr)","pos":[153362,153400]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[153472,153543]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[153644,153716],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void gotFocus()","pos":[153926,153948]},{"content":"Indicates that the control has received focus.","pos":[154036,154082]},{"content":"public void clear()","pos":[154208,154227]},{"content":"public void paste()","pos":[154490,154509]},{"content":"Pastes the contents of the clipboard into the control.","pos":[154600,154654]},{"content":"public void lookup()","pos":[154772,154792]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[155054,155161],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[155336,155409]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[155446,155544]},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[155618,155695],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void undo()","pos":[155900,155918]},{"content":"public void copy()","pos":[156182,156200]},{"content":"Copies the contents of the control to the clipboard.","pos":[156292,156344]},{"content":"public void endDrag()","pos":[156464,156485]},{"content":"Is called when the user has finished dragging a form control.","pos":[156574,156635]},{"pos":[156749,156768],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[156770,156810]},{"pos":[156867,156877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156879,156884]},{"pos":[156893,156905],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[156907,156963]},{"pos":[156970,156977],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[156979,157058]},{"pos":[157064,157080],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can modify the contents of the control.","pos":[157082,157149]},{"pos":[157203,157213],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157215,157220]},{"content":"The Boolean value to assign as the allowEdit property of the control; optional.","pos":[157223,157302]},{"pos":[157309,157321],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be modified; otherwise, false.","pos":[157323,157377]},{"pos":[157384,157391],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[157393,157515]},{"pos":[157521,157541],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[157543,157626]},{"pos":[157669,157681],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[157683,157751]},{"pos":[157757,157774],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[157821,157831],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157833,157838]},{"pos":[157847,157859],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157865,157887],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[157889,157987]},{"pos":[158047,158057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[158059,158064]},{"pos":[158073,158085],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[158087,158166]},{"pos":[158173,158180],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[158182,158219]},{"pos":[158225,158247],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[158249,158298]},{"pos":[158350,158360],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[158362,158367]},{"content":"The value to assign for the background color of the control; optional.","pos":[158370,158440]},{"pos":[158447,158459],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[158461,158505]},{"pos":[158512,158519],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[158521,158589]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[158595,158665]},{"content":"The second byte contains a value for green.","pos":[158670,158713]},{"content":"The third byte contains a value for blue.","pos":[158718,158759]},{"content":"The high-order byte must be 0 (zero).","pos":[158764,158801]},{"content":"The maximum value for a single byte is 255.","pos":[158806,158849]},{"pos":[158855,158871],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[158873,158935]},{"pos":[158981,158991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[158993,158998]},{"content":"The value to assign for the background style of the control; optional.","pos":[159001,159071]},{"pos":[159078,159090],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[159092,159153]},{"pos":[159159,159175],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[159177,159231]},{"pos":[159278,159288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[159290,159291]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[159294,159364]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[159365,159432]},{"content":"y","pos":[159444,159445]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[159448,159518]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[159519,159586]},{"pos":[159593,159605],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[159607,159646]},{"pos":[159653,159660],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[159662,159743]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[159744,159848]},{"pos":[159854,159865],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the font weight that is used to display text in the control.","pos":[159867,159940]},{"pos":[159981,159991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[159993,159998]},{"content":"The value to assign to the bold setting of the control; optional.","pos":[160001,160066]},{"pos":[160073,160085],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between 0 (zero) and 9, inclusive.","pos":[160087,160138]},{"pos":[160145,160152],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[160154,160226]},{"content":"0 – Use the default font weight.","pos":[160232,160264]},{"content":"1 – Thin.","pos":[160269,160278]},{"content":"2 – Extra-light.","pos":[160283,160299]},{"content":"3 – Light.","pos":[160304,160314]},{"content":"4 – Normal.","pos":[160319,160330]},{"content":"5 – Medium.","pos":[160335,160346]},{"content":"6 – Semibold.","pos":[160351,160364]},{"content":"7 – Bold.","pos":[160369,160378]},{"content":"8 – Extra-bold.","pos":[160383,160398]},{"content":"9 – Heavy.","pos":[160403,160413]},{"pos":[160419,160438],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[160504,160514],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[160516,160521]},{"content":"mode","pos":[160535,160539]},{"pos":[160548,160560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[160566,160589],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[160651,160661],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[160663,160667]},{"pos":[160676,160688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[160694,160718],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[160772,160782],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[160784,160789]},{"pos":[160798,160810],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[160816,160838],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[160890,160900],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[160902,160907]},{"pos":[160916,160928],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[160934,160956],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[160958,160992]},{"pos":[161059,161069],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[161071,161076]},{"content":"The number of lines to use to determine the height.","pos":[161079,161130]},{"content":"lines","pos":[161142,161147]},{"content":"The number of lines to use to determine the height.","pos":[161150,161201]},{"pos":[161208,161220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[161222,161268]},{"pos":[161274,161288],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[161290,161329]},{"pos":[161373,161383],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[161385,161390]},{"pos":[161399,161411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[161413,161467]},{"pos":[161473,161492],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[161494,161537]},{"pos":[161586,161596],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[161598,161603]},{"pos":[161612,161624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[161626,161688]},{"pos":[161695,161702],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table.","pos":[161704,161808]},{"content":"Value","pos":[161812,161817]},{"content":"Description","pos":[161820,161831]},{"content":"0","pos":[161878,161879]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161886,161899],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[161911,161912]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161919,161935],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[161944,161945]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161952,161967],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[161977,161979]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[161985,161997],"source":"MAC\\_CHARSET"},{"content":"128","pos":[162010,162013]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162018,162035],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[162043,162046]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162051,162066],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[162076,162079]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162084,162099],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[162109,162112]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162117,162137],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[162142,162145]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162150,162164],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[162175,162178]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162183,162199],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[162208,162211]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162216,162235],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[162241,162244]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162249,162264],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[162274,162277]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162282,162298],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[162307,162310]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162315,162334],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[162340,162343]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162348,162360],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[162372,162460]},{"content":"Value","pos":[162464,162469]},{"content":"Description","pos":[162472,162483]},{"content":"130","pos":[162518,162521]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162526,162540],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[162544,162630]},{"content":"Value","pos":[162634,162639]},{"content":"Description","pos":[162642,162653]},{"content":"177","pos":[162690,162693]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162698,162713],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[162718,162721]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162726,162741],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[162745,162822]},{"content":"Value","pos":[162826,162831]},{"content":"Description","pos":[162834,162845]},{"content":"222","pos":[162878,162881]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[162886,162899],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value that is based on the current system locale.","pos":[162903,162990]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[162991,163082],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[163083,163197]},{"pos":[163203,163221],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[163223,163268]},{"pos":[163316,163326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[163328,163333]},{"pos":[163342,163354],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[163356,163399]},{"pos":[163406,163413],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[163415,163476]},{"content":"Value","pos":[163480,163485]},{"content":"Style","pos":[163488,163493]},{"content":"0","pos":[163548,163549]},{"content":"Default","pos":[163556,163563]},{"content":"1","pos":[163582,163583]},{"content":"The Windows palette","pos":[163590,163609]},{"content":"2","pos":[163616,163617]},{"content":"The true-color scheme","pos":[163624,163645]},{"pos":[163653,163667],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[163711,163721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[163723,163728]},{"pos":[163737,163749],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[163755,163778],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[163780,163847]},{"pos":[163930,163940],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[163942,163947]},{"pos":[163956,163968],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[163970,164042]},{"pos":[164049,164056],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[164058,164139]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[164140,164233]},{"pos":[164239,164264],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[164266,164362]},{"pos":[164407,164419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[164421,164507]},{"pos":[164514,164521],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[164523,164572]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[164573,164721]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[164722,164856]},{"pos":[164862,164874],"content":"Method count","linkify":"Method count","nodes":[{"content":"Method count","pos":[0,12]}]},{"pos":[164905,164917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[164923,164948],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[164950,165028]},{"pos":[165083,165093],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[165095,165100]},{"content":"The string that contains the country/region codes to set; optional.","pos":[165103,165170]},{"pos":[165177,165189],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[165191,165256]},{"pos":[165262,165294],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[165364,165374],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[165376,165381]},{"pos":[165390,165402],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165408,165424],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[165478,165488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[165490,165495]},{"pos":[165504,165516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165522,165539],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[165586,165596],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[165598,165603]},{"pos":[165612,165624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[165630,165653],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[165655,165780]},{"pos":[165833,165843],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[165845,165850]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[165853,165927]},{"pos":[165934,165946],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[165948,166060]},{"pos":[166067,166074],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[166076,166203]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[166204,166297]},{"pos":[166303,166320],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[166322,166394]},{"pos":[166445,166455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166457,166462]},{"pos":[166471,166483],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[166485,166537]},{"pos":[166543,166563],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[166630,166640],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166642,166647]},{"content":"mode","pos":[166661,166665]},{"pos":[166674,166686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166692,166716],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[166779,166789],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[166791,166795]},{"pos":[166804,166816],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166822,166847],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[166902,166912],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[166914,166919]},{"pos":[166928,166940],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[166946,166966],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[166968,167167]},{"pos":[167217,167227],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[167229,167234]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[167237,167311]},{"pos":[167318,167330],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.","pos":[167332,167476]},{"pos":[167482,167497],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[167499,167580]},{"pos":[167625,167635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[167637,167642]},{"pos":[167651,167663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[167665,167725]},{"pos":[167731,167746],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[167748,167842]},{"pos":[167936,167946],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[167948,167958]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[167961,168046]},{"content":"dragMode","pos":[168058,168066]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[168069,168154]},{"content":"x","pos":[168166,168167]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[168170,168255]},{"content":"y","pos":[168267,168268]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[168271,168356]},{"pos":[168363,168375],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[168377,168442]},{"pos":[168448,168465],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[168467,168563]},{"pos":[168653,168663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[168665,168675]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[168678,168763]},{"content":"dragMode","pos":[168775,168783]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[168786,168871]},{"content":"x","pos":[168883,168884]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[168887,168972]},{"content":"y","pos":[168984,168985]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[168988,169073]},{"pos":[169080,169092],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[169094,169159]},{"pos":[169165,169180],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[169182,169252]},{"pos":[169286,169298],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[169300,169431]},{"pos":[169437,169451],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether the object is enabled or disabled.","pos":[169453,169506]},{"pos":[169558,169568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[169570,169575]},{"content":"A Boolean value that determines whether the control is enabled; optional.","pos":[169578,169651]},{"pos":[169658,169670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[169672,169720]},{"pos":[169727,169734],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property lets you enable or disable controls at run time.","pos":[169736,169805]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[169806,169901]},{"content":"You can also disable a control that is used only for display purposes, such as an error message that provides read-only information.","pos":[169902,170034]},{"pos":[170040,170055],"content":"Method enumType","linkify":"Method enumType","nodes":[{"content":"Method enumType","pos":[0,15]}]},{"pos":[170106,170116],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170118,170123]},{"pos":[170132,170144],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170150,170170],"content":"Method enumTypeValue","linkify":"Method enumTypeValue","nodes":[{"content":"Method enumTypeValue","pos":[0,20]}]},{"pos":[170212,170224],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170230,170253],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[170328,170338],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170340,170345]},{"pos":[170354,170366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170372,170383],"content":"Method find","linkify":"Method find","nodes":[{"content":"Method find","pos":[0,11]}]},{"pos":[170423,170433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[170435,170441]},{"pos":[170450,170462],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170468,170479],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font that is used for the control.","pos":[170481,170544]},{"pos":[170585,170595],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170597,170602]},{"content":"The value to assign as the font for the control; optional.","pos":[170605,170663]},{"pos":[170670,170682],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font, such as Tahoma or Verdana.","pos":[170684,170732]},{"pos":[170738,170753],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the font size that is used for the control.","pos":[170755,170811]},{"pos":[170856,170866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170868,170873]},{"content":"The value to assign as the font size for the control; optional.","pos":[170876,170939]},{"pos":[170946,170958],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[170960,170993]},{"pos":[170999,171021],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[171023,171074]},{"pos":[171126,171136],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171138,171143]},{"pos":[171152,171164],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[171166,171210]},{"pos":[171217,171224],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[171226,171294]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[171300,171370]},{"content":"The second byte contains a value for green.","pos":[171375,171418]},{"content":"The third byte contains a value for blue.","pos":[171423,171464]},{"content":"The high-order byte must be 0 (zero).","pos":[171469,171506]},{"content":"The maximum value for a single byte is 255.","pos":[171511,171554]},{"pos":[171560,171580],"content":"Method framePosition","linkify":"Method framePosition","nodes":[{"content":"Method framePosition","pos":[0,20]}]},{"pos":[171630,171640],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171642,171647]},{"pos":[171656,171668],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171674,171690],"content":"Method frameType","linkify":"Method frameType","nodes":[{"content":"Method frameType","pos":[0,16]}]},{"pos":[171736,171746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171748,171753]},{"pos":[171762,171774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171780,171794],"content":"Method getText","linkify":"Method getText","nodes":[{"content":"Method getText","pos":[0,14]}]},{"pos":[171836,171846],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[171848,171853]},{"pos":[171862,171874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171880,171897],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[171899,171987]},{"pos":[172040,172050],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[172052,172055]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[172058,172128]},{"pos":[172135,172147],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[172149,172216]},{"pos":[172222,172243],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[172245,172300]},{"pos":[172344,172356],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[172358,172421]},{"pos":[172427,172440],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[172442,172481]},{"pos":[172534,172544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[172546,172551]},{"content":"mode","pos":[172565,172569]},{"pos":[172578,172590],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[172592,172628]},{"pos":[172635,172642],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[172644,172697]},{"content":"Calculate the height according to the following table.","pos":[172698,172752]},{"content":"Mode","pos":[172756,172760]},{"content":"Height calculation","pos":[172774,172792]},{"content":"-1 Exact","pos":[172980,172988]},{"content":"The exact height in pixels of the controls is used.","pos":[172998,173049]},{"content":"0 Auto","pos":[173092,173098]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[173110,173199]},{"content":"1 Column height","pos":[173204,173219]},{"content":"The layout of the form determines the height of the control.","pos":[173222,173282]},{"content":"The height and height calculation mode can be set separately.","pos":[173315,173376]},{"pos":[173382,173399],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[173401,173463]},{"pos":[173510,173520],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[173522,173527]},{"pos":[173536,173548],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[173550,173571]},{"pos":[173578,173585],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[173587,173641]},{"content":"Mode","pos":[173645,173649]},{"content":"Height calculation","pos":[173661,173679]},{"content":"Exact","pos":[173865,173870]},{"content":"The exact height in pixels of the controls is used.","pos":[173881,173932]},{"content":"Auto","pos":[173975,173979]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[173991,174080]},{"content":"Column height","pos":[174085,174098]},{"content":"The layout of the form determines the height of the control.","pos":[174101,174161]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[174194,174279]},{"pos":[174285,174303],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[174305,174344]},{"pos":[174392,174402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[174404,174409]},{"pos":[174418,174430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[174432,174453]},{"pos":[174460,174467],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[174469,174559]},{"pos":[174565,174581],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[174583,174623]},{"pos":[174658,174670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[174672,174760]},{"pos":[174767,174774],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[174776,174846]},{"content":"Use the helpText method to set the value of the Help text.","pos":[174847,174905]},{"pos":[174911,174926],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.","pos":[174928,175039]},{"pos":[175084,175094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[175096,175101]},{"content":"The value to assign as the Help text for the control; optional.","pos":[175104,175167]},{"pos":[175174,175186],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that should be displayed at the bottom of the screen.","pos":[175188,175252]},{"pos":[175259,175266],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[175268,175336]},{"content":"The Help text must not exceed 250 characters.","pos":[175337,175382]},{"pos":[175388,175409],"content":"Method hideFirstEntry","linkify":"Method hideFirstEntry","nodes":[{"content":"Method hideFirstEntry","pos":[0,21]}]},{"pos":[175468,175478],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[175480,175485]},{"pos":[175494,175506],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[175512,175534],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[175536,175599]},{"pos":[175651,175661],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[175663,175668]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[175671,175738]},{"pos":[175745,175757],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[175759,175809]},{"pos":[175815,175826],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Returns the handle to the window that is associated with the control.","pos":[175828,175897]},{"pos":[175927,175939],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle to the window that is associated with the control.","pos":[175941,176002]},{"pos":[176009,176016],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle to the window can be used with Windows API functions.","pos":[176018,176082]},{"pos":[176088,176106],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Gets a value that indicates whether the control is a container.","pos":[176108,176171]},{"pos":[176212,176224],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is a container; otherwise, false.","pos":[176226,176279]},{"pos":[176285,176303],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Returns a value that indicates whether the control is displayed.","pos":[176305,176369]},{"pos":[176410,176422],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[176424,176475]},{"pos":[176481,176500],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[176502,176569]},{"pos":[176611,176623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[176625,176677]},{"pos":[176683,176708],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[176710,176809]},{"pos":[176878,176888],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[176890,176907]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[176910,177038]},{"pos":[177045,177057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[177059,177218]},{"pos":[177225,177232],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[177234,177423]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[177424,177501]},{"content":"FormAllowUserSetup::No 0","pos":[177841,177865]},{"content":"No changes can be made to the control.","pos":[177876,177914]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[177915,178004]},{"content":"FormAllowUserSetup::Restricted 1","pos":[178009,178041]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[178044,178136]},{"content":"The user cannot move the control.","pos":[178137,178170]},{"content":"FormAllowUserSetup::Yes 2","pos":[178177,178202]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[178212,178304]},{"content":"The user can also move the control.","pos":[178305,178340]},{"pos":[178348,178362],"content":"Method isValid","linkify":"Method isValid","nodes":[{"content":"Method isValid","pos":[0,14]}]},{"pos":[178399,178411],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178417,178430],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"content":"Sets or returns a value that indicates whether the text in the control is italic.","pos":[178432,178513]},{"pos":[178564,178574],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178576,178581]},{"content":"The value for the control's italic setting; optional.","pos":[178584,178637]},{"pos":[178644,178656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is italic; otherwise, false.","pos":[178658,178718]},{"pos":[178724,178735],"content":"Method item","linkify":"Method item","nodes":[{"content":"Method item","pos":[0,11]}]},{"pos":[178776,178786],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178788,178793]},{"pos":[178802,178814],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178820,178832],"content":"Method items","linkify":"Method items","nodes":[{"content":"Method items","pos":[0,12]}]},{"pos":[178874,178884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178886,178891]},{"pos":[178900,178912],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178918,178930],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[178965,178977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178983,178994],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[178996,179060]},{"pos":[179111,179121],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179123,179128]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[179131,179217]},{"content":"mode","pos":[179229,179233]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[179236,179322]},{"pos":[179329,179341],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[179343,179394]},{"pos":[179400,179417],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[179481,179491],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179493,179498]},{"content":"mode","pos":[179512,179516]},{"pos":[179525,179537],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[179543,179564],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[179624,179634],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[179636,179640]},{"pos":[179649,179661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[179667,179689],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[179741,179751],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179753,179758]},{"pos":[179767,179779],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[179785,179800],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[179802,179863]},{"pos":[179908,179918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179920,179925]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[179928,180014]},{"pos":[180021,180033],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[180035,180091]},{"pos":[180097,180113],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[180115,180179]},{"pos":[180225,180235],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[180237,180242]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[180245,180326]},{"pos":[180333,180345],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[180347,180398]},{"pos":[180404,180424],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[180426,180479]},{"pos":[180537,180547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[180549,180554]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[180557,180651]},{"pos":[180658,180670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[180672,180745]},{"pos":[180751,180766],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[180804,180816],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[180822,180842],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[180844,180901]},{"pos":[180993,181003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[181005,181006]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[181009,181070]},{"content":"y","pos":[181082,181083]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[181086,181147]},{"content":"button","pos":[181159,181165]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[181168,181229]},{"content":"Ctrl","pos":[181241,181245]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[181248,181309]},{"content":"Shift","pos":[181321,181326]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[181329,181390]},{"pos":[181397,181409],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[181411,181450]},{"pos":[181457,181464],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[181466,181570]},{"pos":[181576,181592],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[181594,181659]},{"pos":[181747,181757],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[181759,181760]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[181763,181824]},{"content":"y","pos":[181836,181837]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[181840,181901]},{"content":"button","pos":[181913,181919]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[181922,181983]},{"content":"Ctrl","pos":[181995,181999]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[182002,182063]},{"content":"Shift","pos":[182075,182080]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[182083,182144]},{"pos":[182151,182163],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[182165,182204]},{"pos":[182211,182218],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[182220,182324]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[182325,182460]},{"pos":[182466,182482],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[182484,182549]},{"pos":[182637,182647],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[182649,182650]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[182653,182714]},{"content":"y","pos":[182726,182727]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[182730,182791]},{"content":"button","pos":[182803,182809]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[182812,182873]},{"content":"Ctrl","pos":[182885,182889]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[182892,182953]},{"content":"Shift","pos":[182965,182970]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[182973,183034]},{"pos":[183041,183053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[183055,183094]},{"pos":[183101,183108],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[183110,183214]},{"pos":[183220,183234],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[183236,183308]},{"pos":[183394,183404],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[183406,183407]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[183410,183471]},{"content":"y","pos":[183483,183484]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[183487,183548]},{"content":"button","pos":[183560,183566]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[183569,183630]},{"content":"Ctrl","pos":[183642,183646]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[183649,183710]},{"content":"Shift","pos":[183722,183727]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[183730,183791]},{"pos":[183798,183810],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[183812,183851]},{"pos":[183858,183865],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[183867,183971]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[183972,184107]},{"pos":[184113,184124],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[184126,184277]},{"pos":[184318,184328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[184330,184335]},{"content":"The name to assign to the control.","pos":[184338,184372]},{"pos":[184379,184391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[184393,184457]},{"pos":[184464,184471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[184473,184567]},{"content":"It must start with a letter.","pos":[184573,184601]},{"content":"It cannot exceed 250 characters.","pos":[184606,184638]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[184643,184697],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[184702,184742]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[184747,184857]},{"pos":[184863,184886],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[184939,184949],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[184951,184956]},{"pos":[184965,184977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[184983,185010],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[185062,185074],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[185080,185100],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[185102,185147]},{"pos":[185194,185206],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[185208,185243]},{"pos":[185249,185270],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[185321,185331],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[185333,185338]},{"pos":[185347,185359],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[185365,185383],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[185448,185458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[185460,185465]},{"content":"mode","pos":[185479,185483]},{"pos":[185492,185504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[185510,185532],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[185593,185603],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[185605,185609]},{"pos":[185618,185630],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[185636,185659],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[185712,185722],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[185724,185729]},{"pos":[185738,185750],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[185756,185774],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the security key that is associated with the control.","pos":[185776,185845]},{"pos":[185913,185923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[185925,185930]},{"content":"The security key that is associated with the control; optional.","pos":[185933,185996]},{"pos":[186003,186015],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The security key that is associated with the control.","pos":[186017,186070]},{"pos":[186076,186092],"content":"Method selection","linkify":"Method selection","nodes":[{"content":"Method selection","pos":[0,16]}]},{"pos":[186138,186148],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[186150,186155]},{"pos":[186164,186176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[186182,186204],"content":"Method selectionChange","linkify":"Method selectionChange","nodes":[{"content":"Method selectionChange","pos":[0,22]}]},{"pos":[186245,186257],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[186263,186280],"content":"Method selectText","linkify":"Method selectText","nodes":[{"content":"Method selectText","pos":[0,17]}]},{"pos":[186326,186336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[186338,186344]},{"pos":[186353,186365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[186371,186393],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[186395,186435]},{"pos":[186490,186500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[186502,186512]},{"content":"The ID of the menu to show.","pos":[186515,186542]},{"pos":[186549,186561],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[186563,186622]},{"pos":[186628,186639],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[186641,186768]},{"pos":[186817,186827],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[186829,186834]},{"content":"The value to assign to the skip property of the control; optional.","pos":[186837,186903]},{"pos":[186910,186922],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[186924,187030]},{"pos":[187036,187047],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[187102,187112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[187114,187127]},{"pos":[187136,187148],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[187154,187165],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"content":"Sets or returns the text for the control.","pos":[187167,187208]},{"pos":[187249,187259],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[187261,187266]},{"content":"The text to assign to the control; optional.","pos":[187269,187313]},{"pos":[187320,187332],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text for the control; an empty string if there is no text for the control.","pos":[187334,187412]},{"pos":[187418,187432],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Sets or returns the tooltip text for the control.","pos":[187434,187483]},{"pos":[187516,187528],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if there is no tooltip text for the control.","pos":[187530,187624]},{"pos":[187630,187640],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[187642,187704]},{"pos":[187754,187764],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[187766,187771]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[187774,187858]},{"content":"mode","pos":[187870,187874]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[187877,187961]},{"pos":[187968,187980],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[187982,188031]},{"pos":[188037,188053],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[188116,188126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[188128,188133]},{"content":"mode","pos":[188147,188151]},{"pos":[188160,188172],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[188178,188198],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[188257,188267],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[188269,188273]},{"pos":[188282,188294],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[188300,188321],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[188372,188382],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[188384,188389]},{"pos":[188398,188410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[188416,188430],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[188432,188491]},{"pos":[188535,188545],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[188547,188552]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[188555,188639]},{"pos":[188646,188658],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[188660,188714]},{"pos":[188720,188735],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[188737,188799]},{"pos":[188844,188854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[188856,188861]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[188864,188943]},{"pos":[188950,188962],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[188964,189013]},{"pos":[189019,189030],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[189071,189081],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189083,189088]},{"pos":[189097,189109],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[189115,189131],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the value of the underline property for the text in the control.","pos":[189133,189213]},{"pos":[189267,189277],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189279,189284]},{"content":"The value of the underline property for the control; optional.","pos":[189287,189349]},{"pos":[189356,189368],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[189370,189434]},{"pos":[189440,189467],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[189531,189541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[189543,189547]},{"pos":[189556,189568],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[189574,189589],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[189591,189634]},{"pos":[189679,189689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189691,189696]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[189699,189771]},{"pos":[189778,189790],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[189792,189822]},{"pos":[189828,189847],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[189849,189897]},{"pos":[189946,189956],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189958,189963]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[189966,190043]},{"pos":[190050,190062],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[190064,190099]},{"pos":[190105,190125],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[190127,190186]},{"pos":[190236,190246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190248,190253]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[190256,190344]},{"pos":[190351,190363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[190365,190411]},{"pos":[190417,190435],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[190437,190520]},{"pos":[190568,190578],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190580,190585]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[190588,190668]},{"pos":[190675,190687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[190689,190745]},{"pos":[190751,190768],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[190770,190822]},{"pos":[190869,190879],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190881,190886]},{"content":"The user height for the control; optional.","pos":[190889,190931]},{"pos":[190938,190950],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[190952,190991]},{"pos":[190997,191012],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[191014,191096]},{"pos":[191141,191151],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191153,191158]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[191161,191240]},{"pos":[191247,191259],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[191261,191316]},{"pos":[191323,191330],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[191332,191502]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[191503,191578]},{"content":"This method lets you programmatically determine and set the value.","pos":[191579,191645]},{"pos":[191651,191674],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[191676,191732]},{"pos":[191785,191795],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191797,191802]},{"content":"The organization container to set for the control; optional.","pos":[191805,191865]},{"pos":[191872,191884],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[191886,191929]},{"pos":[191935,191956],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[191958,192012]},{"pos":[192063,192073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192075,192080]},{"content":"The organization sibling to set for the control; optional.","pos":[192083,192141]},{"pos":[192148,192160],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[192162,192203]},{"pos":[192209,192230],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[192232,192281]},{"pos":[192332,192342],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192344,192349]},{"content":"The user label text to set for the control; optional.","pos":[192352,192405]},{"pos":[192412,192424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[192426,192462]},{"pos":[192468,192492],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[192494,192547]},{"pos":[192601,192611],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192613,192618]},{"content":"The user security level to set for the control; optional.","pos":[192621,192678]},{"pos":[192685,192697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[192699,192739]},{"pos":[192745,192760],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[192762,192910]},{"pos":[192955,192965],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192967,192972]},{"content":"The value to assign to the userSkip property; optional.","pos":[192975,193030]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[193031,193126]},{"pos":[193133,193145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[193147,193216]},{"pos":[193222,193238],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[193240,193317]},{"pos":[193363,193373],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[193375,193380]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[193383,193449]},{"pos":[193456,193468],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[193470,193599]},{"pos":[193606,193613],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[193615,193709]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[193710,193826],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[193827,193977]},{"pos":[193983,193998],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[194036,194048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[194054,194076],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[194078,194139]},{"pos":[194208,194218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194220,194225]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[194228,194305]},{"content":"mode","pos":[194317,194321]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[194324,194401]},{"pos":[194408,194420],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[194422,194470]},{"pos":[194476,194502],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[194504,194563]},{"pos":[194628,194638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[194640,194644]},{"pos":[194653,194665],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[194667,194721]},{"pos":[194727,194754],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[194756,194817]},{"pos":[194874,194884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194886,194891]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[194894,194972]},{"pos":[194979,194991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[194993,195041]},{"pos":[195047,195066],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[195115,195125],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195127,195132]},{"pos":[195141,195153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[195159,195173],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[195175,195245]},{"pos":[195297,195307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195309,195314]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[195317,195389]},{"pos":[195396,195408],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[195410,195459]},{"pos":[195465,195477],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[195479,195517]},{"pos":[195569,195579],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195581,195586]},{"content":"mode","pos":[195600,195604]},{"pos":[195613,195625],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[195627,195662]},{"pos":[195669,195676],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[195678,195731]},{"content":"Calculate the width according to the following table.","pos":[195732,195785]},{"content":"Mode","pos":[195789,195793]},{"content":"Width calculation","pos":[195806,195823]},{"content":"-1 Exact","pos":[196009,196017]},{"content":"The exact width in pixels of the controls is used.","pos":[196026,196076]},{"content":"0 Auto","pos":[196119,196125]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[196136,196224]},{"content":"1 Column width","pos":[196229,196243]},{"content":"The layout of the form determines the width of the control.","pos":[196246,196305]},{"content":"The width and width calculation mode can be set separately.","pos":[196338,196397]},{"pos":[196403,196419],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[196421,196483]},{"pos":[196529,196539],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196541,196546]},{"pos":[196555,196567],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[196569,196630]},{"pos":[196637,196644],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[196646,196699]},{"content":"Mode","pos":[196703,196707]},{"content":"Width calculation","pos":[196718,196735]},{"content":"Exact","pos":[196919,196924]},{"content":"The exact width in pixels of the controls is used.","pos":[196934,196984]},{"content":"Auto","pos":[197027,197031]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[197042,197130]},{"content":"Column width","pos":[197135,197147]},{"content":"The layout of the form determines the width of the control.","pos":[197150,197209]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[197242,197325]},{"pos":[197331,197348],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[197350,197388]},{"pos":[197435,197445],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[197447,197452]},{"pos":[197461,197473],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[197475,197510]},{"pos":[197517,197524],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[197526,197599]},{"pos":[197605,197621],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[197704,197714],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[197716,197722]},{"content":"e","pos":[197736,197737]},{"pos":[197745,197758],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[197806,197816],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[197818,197827]},{"pos":[197835,197852],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[197854,197924]},{"pos":[198014,198024],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[198026,198027]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[198030,198091]},{"content":"y","pos":[198103,198104]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[198107,198168]},{"content":"button","pos":[198180,198186]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[198189,198250]},{"content":"Ctrl","pos":[198262,198266]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[198269,198330]},{"content":"Shift","pos":[198342,198347]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[198350,198411]},{"pos":[198417,198432],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[198434,198464]},{"pos":[198498,198511],"content":"Method insert","linkify":"Method insert","nodes":[{"content":"Method insert","pos":[0,13]}]},{"pos":[198565,198575],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[198577,198583]},{"content":"index","pos":[198597,198602]},{"pos":[198610,198635],"content":"Method OnSelectionChanged","linkify":"Method OnSelectionChanged","nodes":[{"content":"Method OnSelectionChanged","pos":[0,25]}]},{"pos":[198727,198737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[198739,198745]},{"content":"e","pos":[198759,198760]},{"pos":[198768,198781],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"pos":[198824,198834],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[198836,198842]},{"pos":[198850,198871],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[198873,198942]},{"pos":[199004,199014],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[199016,199021]},{"content":"The preferred height of the control.","pos":[199024,199060]},{"content":"height","pos":[199072,199078]},{"content":"The preferred height of the control.","pos":[199081,199117]},{"pos":[199123,199138],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[199220,199230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[199232,199238]},{"content":"e","pos":[199252,199253]},{"pos":[199261,199275],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[199308,199324],"content":"Method endUpdate","linkify":"Method endUpdate","nodes":[{"content":"Method endUpdate","pos":[0,16]}]},{"pos":[199359,199369],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[199371,199404]},{"pos":[199433,199456],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[199458,199499]},{"pos":[199541,199554],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[199556,199656]},{"pos":[199738,199748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[199750,199760]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[199763,199848]},{"content":"dragMode","pos":[199860,199868]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[199871,199956]},{"content":"x","pos":[199968,199969]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[199972,200057]},{"content":"y","pos":[200069,200070]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[200073,200158]},{"pos":[200164,200180],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[200182,200224]},{"pos":[200259,200277],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[200362,200372],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[200374,200380]},{"content":"e","pos":[200394,200395]},{"pos":[200403,200420],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[200504,200514],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[200516,200522]},{"content":"e","pos":[200536,200537]},{"pos":[200545,200566],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[200568,200589]},{"pos":[200629,200646],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[200730,200740],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[200742,200748]},{"content":"e","pos":[200762,200763]},{"pos":[200771,200788],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[200790,200844]},{"pos":[200880,200896],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[200898,200994]},{"pos":[201029,201039],"content":"Method add","linkify":"Method add","nodes":[{"content":"Method add","pos":[0,10]}]},{"pos":[201079,201089],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[201091,201097]},{"pos":[201105,201119],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[201121,201161]},{"pos":[201194,201220],"content":"Method OnSelectionChanging","linkify":"Method OnSelectionChanging","nodes":[{"content":"Method OnSelectionChanging","pos":[0,26]}]},{"pos":[201313,201323],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[201325,201331]},{"content":"e","pos":[201345,201346]},{"pos":[201354,201372],"content":"Method beginUpdate","linkify":"Method beginUpdate","nodes":[{"content":"Method beginUpdate","pos":[0,18]}]},{"pos":[201409,201427],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[201512,201522],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[201524,201530]},{"content":"e","pos":[201544,201545]},{"pos":[201553,201565],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[201596,201614],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[201616,201687]},{"pos":[201738,201748],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[201750,201759]},{"content":"The string value to use to filter data; optional.","pos":[201762,201811]},{"pos":[201817,201831],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[201912,201922],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[201924,201930]},{"content":"e","pos":[201944,201945]},{"pos":[201953,201968],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[201970,202016]},{"pos":[202050,202062],"content":"Method clear","linkify":"Method clear","nodes":[{"content":"Method clear","pos":[0,12]}]},{"pos":[202093,202105],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[202107,202161]},{"pos":[202192,202205],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[202237,202266],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[202384,202394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[202396,202412]},{"content":"objectMethodToCall","pos":[202426,202444]},{"content":"overrideObject","pos":[202458,202472]},{"pos":[202480,202491],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[202493,202591]},{"pos":[202677,202687],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[202689,202699]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[202702,202787]},{"content":"dragMode","pos":[202799,202807]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[202810,202895]},{"content":"x","pos":[202907,202908]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[202911,202996]},{"content":"y","pos":[203008,203009]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[203012,203097]},{"pos":[203103,203122],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[203208,203218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[203220,203226]},{"content":"e","pos":[203240,203241]},{"pos":[203249,203260],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[203290,203301],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[203303,203355]},{"pos":[203385,203399],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[203401,203462]},{"pos":[203496,203503],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[203505,203633]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[203634,203738]},{"pos":[203743,203764],"content":"Class FormRealControl","linkify":"Class FormRealControl","nodes":[{"content":"Class FormRealControl","pos":[0,21]}]},{"pos":[203816,203823],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[203829,203837],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[203843,203850],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[203854,203860]},{"content":"Description","pos":[203964,203975]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[204418,204464],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[204528,204568]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[204700,204735],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[204982,205025],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[205092,205159]},{"content":"public int allowNegative(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[205264,205303],"source":"public int allowNegative(\\[int value\\])"},{"content":"public boolean allowSysSetup()","pos":[205546,205576]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[205656,205739]},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[205828,205864],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[206110,206159],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[206220,206318]},{"content":"public int autoInsSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[206392,206434],"source":"public int autoInsSeparator(\\[int value\\])"},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[206674,206715],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[206784,206833]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[206956,206991],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[207066,207128]},{"content":"public int beginDrag(int x, int y)","pos":[207238,207272]},{"content":"Is called when the user starts to drag a form control.","pos":[207348,207402]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[207520,207550],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[207630,207705]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[207802,207834],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[207912,207968]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[208084,208125],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[208366,208420]},{"content":"Retrieves the size of the control.","pos":[208476,208510]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[208648,208686],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[208758,208801]},{"content":"public int charFromPos(int x, int y)","pos":[208930,208966]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[209212,209249],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[209322,209367]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[209494,209566],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[209604,209671]},{"content":"public List configurationKeyEx()","pos":[209776,209808]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[209886,209982]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[210058,210102],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[210168,210246]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[210340,210399],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[210622,210665],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public int dataFieldArrayIndex()","pos":[210904,210936]},{"content":"public FieldName dataFieldName()","pos":[211186,211218]},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[211468,211504],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[211750,211792],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[211860,211985]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[212032,212072],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[212142,212214]},{"content":"public int decimalSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[212314,212356],"source":"public int decimalSeparator(\\[int value\\])"},{"content":"public int direction(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[212596,212631],"source":"public int direction(\\[int value\\])"},{"content":"public int displaceNegative(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[212878,212939],"source":"public int displaceNegative(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displaceNegativeMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[213160,213215],"source":"public AutoMode displaceNegativeMode(\\[AutoMode mode\\])"},{"content":"public int displaceNegativeValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[213442,213489],"source":"public int displaceNegativeValue(\\[int value\\])"},{"content":"public int displayHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[213724,213782],"source":"public int displayHeight(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayHeightMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[214006,214058],"source":"public AutoMode displayHeightMode(\\[AutoMode mode\\])"},{"content":"public int displayHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[214288,214332],"source":"public int displayHeightValue(\\[int value\\])"},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[214570,214628],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[214852,214904],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[215134,215178],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[215416,215455],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[215526,215725]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[215730,215764],"source":"public int dragDrop(\\[int value\\])"},{"content":"Indicates whether to enable or disable drag-and-drop operations for the control.","pos":[215840,215920]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[216012,216093]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[216122,216216]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[216294,216371]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[216404,216500]},{"content":"public str dragText()","pos":[216576,216597]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[216686,216756]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[216858,216899],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[216968,217019]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[217140,217204],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[217422,217462],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[217704,217734],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[217814,217871]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[217986,218020],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[218096,218153]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[218268,218309],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[218378,218429]},{"content":"public int formatMST(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[218550,218585],"source":"public int formatMST(\\[int value\\])"},{"content":"public container getCursorPos()","pos":[218832,218863]},{"content":"public int getFirstVisibleLine()","pos":[219114,219146]},{"content":"public str getLine(int lineNo)","pos":[219396,219426]},{"content":"public int getLineCount()","pos":[219678,219703]},{"content":"public container getSelection()","pos":[219960,219991]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[220242,220284],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[220352,220440]},{"content":"public boolean hasUserSetting()","pos":[220524,220555]},{"content":"Indicates whether the control has custom user settings.","pos":[220634,220689]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[220806,220848],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[220916,220955]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[221088,221124],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[221198,221260]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[221370,221407],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[221480,221519]},{"content":"public str helpField()","pos":[221652,221674]},{"content":"Retrieves the Help text for the control.","pos":[221762,221802]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[221934,221968],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[222044,222148]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[222216,222257],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[222326,222389]},{"content":"public int hWnd()","pos":[222498,222515]},{"content":"Retrieves the Windows handle for the control.","pos":[222608,222653]},{"content":"public int iMEMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[222780,222813],"source":"public int iMEMode(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[223062,223090]},{"content":"public boolean isDisplayed()","pos":[223344,223372]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[223454,223520]},{"content":"public boolean isRestricted()","pos":[223626,223655]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[223736,223803]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[223908,223964]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[224018,224117]},{"content":"public boolean isValid()","pos":[224190,224214]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[224472,224512],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[224754,224785],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[224864,224901]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[225036,225076],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[225318,225353],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[225600,225643],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[225882,225917],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[226164,226203],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[226446,226492],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[226728,226764],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[227010,227057],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[227292,227333],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[227574,227616],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[227856,227901],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[228138,228222]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[228420,228500]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[228702,228780]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[228984,229023],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[229266,229314],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[229548,229594],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[229830,229870],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[230112,230153],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[230394,230416]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[230676,230716],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[230786,230850]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[230958,230992],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[231068,231129]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[231240,231275],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[231350,231414]},{"content":"public int limitText(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[231522,231576],"source":"public int limitText(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode limitTextMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[231804,231852],"source":"public AutoMode limitTextMode(\\[AutoMode mode\\])"},{"content":"public int limitTextValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[232086,232126],"source":"public int limitTextValue(\\[int value\\])"},{"content":"public int lineFromChar(int charIndex)","pos":[232368,232406]},{"content":"public int lineIndex(int lineNo)","pos":[232650,232682]},{"content":"public int lineLength(int lineNo)","pos":[232932,232965]},{"content":"public int lookupButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[233214,233252],"source":"public int lookupButton(\\[int value\\])"},{"content":"public boolean mandatory(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[233496,233539],"source":"public boolean mandatory(\\[boolean value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[233778,233825],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[233888,233941]},{"content":"public int minNoOfDecimals(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[234060,234120],"source":"public int minNoOfDecimals(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode minNoOfDecimalsMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[234342,234396],"source":"public AutoMode minNoOfDecimalsMode(\\[AutoMode mode\\])"},{"content":"public int minNoOfDecimalsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[234624,234670],"source":"public int minNoOfDecimalsValue(\\[int value\\])"},{"content":"public boolean modified()","pos":[234906,234931]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[235188,235267]},{"content":"Is called when the control is double-clicked by the user.","pos":[235298,235355]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[235470,235545]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[235580,235645]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[235752,235827]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[235862,235927]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[236034,236107]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[236144,236216]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[236316,236346],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[236426,236577]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[236614,236656],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int noOfDecimals(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[236896,236953],"source":"public int noOfDecimals(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode noOfDecimalsMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[237178,237229],"source":"public AutoMode noOfDecimalsMode(\\[AutoMode mode\\])"},{"content":"public int noOfDecimalsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[237460,237503],"source":"public int noOfDecimalsValue(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[237742,237781]},{"content":"public FormControl parentControl()","pos":[238024,238058]},{"content":"Retrieves the parent control for the control.","pos":[238134,238179]},{"content":"public container posFromChar(int charIndex)","pos":[238306,238349]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[238588,238628],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[238870,238906],"source":"public int promptrect(\\[int value\\])"},{"content":"public Real realValue(<ph id=\"ph1\">\\[</ph>Real value<ph id=\"ph2\">\\]</ph>)","pos":[239152,239189],"source":"public Real realValue(\\[Real value\\])"},{"content":"public boolean replaceOnLookup(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[239434,239483],"source":"public boolean replaceOnLookup(\\[boolean value\\])"},{"content":"public int rotateSign(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[239716,239752],"source":"public int rotateSign(\\[int value\\])"},{"content":"public int searchAfterInput(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[239998,240040],"source":"public int searchAfterInput(\\[int value\\])"},{"content":"public int searchMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[240280,240316],"source":"public int searchMode(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[240562,240619],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[240672,240731]},{"content":"public int showContextMenu(int menuHandle)","pos":[240844,240886]},{"content":"Shows the shortcut menu for the control.","pos":[240954,240994]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[241126,241169],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public int showZero(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[241408,241442],"source":"public int showZero(\\[int value\\])"},{"content":"public int signDisplay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[241690,241727],"source":"public int signDisplay(\\[int value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[241972,242010],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[242082,242209]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[242254,242298],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[242536,242567],"source":"public int style(\\[int value\\])"},{"content":"public int thousandSeparator(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[242818,242861],"source":"public int thousandSeparator(\\[int value\\])"},{"content":"public str toolTip()","pos":[243100,243120]},{"content":"Retrieves the tooltip text for the control.","pos":[243210,243253]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[243382,243421],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[243492,243554]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[243664,243697],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[243774,243833]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[243946,243980],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[244056,244118]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[244228,244258],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[244510,244553],"source":"public boolean underline(\\[boolean value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[244792,244843]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[245074,245108],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[245184,245227]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[245356,245394],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[245466,245514]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[245638,245677],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[245748,245807]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[245920,245957],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[246030,246113]},{"content":"public int userFastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[246202,246246],"source":"public int userFastTabSummary(\\[int value\\])"},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[246484,246520],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[246594,246646]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[246766,246800],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[246876,246958]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[247048,247090],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[247158,247214]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[247330,247370],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[247440,247494]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[247612,247652],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[247722,247771]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[247894,247937],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[248004,248057]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[248176,248210],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[248286,248434]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[248458,248493],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[248568,248645]},{"content":"public boolean validate()","pos":[248740,248765]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[249022,249082],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[249132,249193]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[249304,249358],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[249414,249473]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[249586,249632],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[249696,249757]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[249868,249906],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[250150,250191],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[250260,250330]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[250432,250473],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[250542,250580]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[250714,250749],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[250824,250886]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[250996,251032],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[251106,251144]},{"content":"public void displayControl()","pos":[251278,251306]},{"content":"Displays the control.","pos":[251388,251409]},{"content":"public void performTypeLookup(<ph id=\"ph1\">\\[</ph>int userType<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[251560,251659],"source":"public void performTypeLookup(\\[int userType\\], \\[int arrayIndex\\], \\[SelectableDataArea company\\])"},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[251842,251916],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void pasteText(str pasteStr, <ph id=\"ph1\">\\[</ph>boolean InsertSel<ph id=\"ph2\">\\]</ph>)","pos":[252124,252182],"source":"public void pasteText(str pasteStr, \\[boolean InsertSel\\])"},{"content":"public void lookup()","pos":[252406,252426]},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[252688,252764],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[252970,253043],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[253252,253289],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void mouseLeave()","pos":[253534,253558]},{"content":"Indicates that the mouse pointer has left the control.","pos":[253644,253698]},{"content":"public void dragLeave()","pos":[253816,253839]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[253926,254022]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[254098,254205],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[254380,254455],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setFocus()","pos":[254662,254684]},{"content":"Sets the focus on the control.","pos":[254772,254802]},{"content":"public void undo()","pos":[254944,254962]},{"content":"public void performDBLookup(<ph id=\"ph1\">\\[</ph>FieldId fieldId<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>TableId tableId<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>SelectableDataArea company<ph id=\"ph6\">\\]</ph>)","pos":[255226,255327],"source":"public void performDBLookup(\\[FieldId fieldId\\], \\[TableId tableId\\], \\[SelectableDataArea company\\])"},{"content":"public void inputSearch(str searchStr)","pos":[255508,255546]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[255618,255689]},{"content":"public void context()","pos":[255790,255811]},{"content":"Shows the shortcut menu for the control.","pos":[255900,255940]},{"content":"public void textChange()","pos":[256072,256096]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[256354,256429],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[256636,256709]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[256746,256844]},{"content":"public void gotFocus()","pos":[256918,256940]},{"content":"Indicates that the control has received focus.","pos":[257028,257074]},{"content":"public void scrollCursor()","pos":[257200,257226]},{"content":"public void lineScroll(int dx, int dy)","pos":[257482,257520]},{"content":"public void paste()","pos":[257764,257783]},{"content":"Pastes the contents of the clipboard into the control.","pos":[257874,257928]},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[258046,258123],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[258328,258400],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void performFormLookup(xFormRun form)","pos":[258610,258654]},{"content":"public void lostFocus()","pos":[258892,258915]},{"content":"Indicates that the control has lost focus.","pos":[259002,259044]},{"content":"public void endDrag()","pos":[259174,259195]},{"content":"Is called when the user has finished dragging a form control.","pos":[259284,259345]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[259456,259532],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setSelection(int charIndexFrom, int charIndexTo)","pos":[259738,259798]},{"content":"public void copy()","pos":[260020,260038]},{"content":"Copies the contents of the control to the clipboard.","pos":[260130,260182]},{"content":"public void jumpRef()","pos":[260302,260323]},{"content":"public void cut()","pos":[260584,260601]},{"content":"Cuts the contents of the control.","pos":[260694,260727]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[260866,260943]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[260976,261046]},{"content":"public void prefColumnSize(int width, int height)","pos":[261148,261197]},{"content":"Specifies the preferred column width and height for the form control.","pos":[261258,261327]},{"content":"public void enter()","pos":[261430,261449]},{"content":"public void resetUserSetting()","pos":[261712,261742]},{"content":"Resets the user settings for the control.","pos":[261822,261863]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[261994,262063]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[262104,262204]},{"content":"public void setCursorPos(int x, int y)","pos":[262276,262314]},{"pos":[262561,262580],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[262582,262622]},{"pos":[262679,262689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[262691,262696]},{"pos":[262705,262717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[262719,262775]},{"pos":[262782,262789],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[262791,262870]},{"pos":[262876,262892],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[262938,262948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[262950,262955]},{"pos":[262964,262976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[262982,262998],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[263000,263067]},{"pos":[263121,263131],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263133,263138]},{"pos":[263147,263159],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[263161,263213]},{"pos":[263220,263227],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[263229,263351]},{"pos":[263357,263377],"content":"Method allowNegative","linkify":"Method allowNegative","nodes":[{"content":"Method allowNegative","pos":[0,20]}]},{"pos":[263427,263437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263439,263444]},{"pos":[263453,263465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[263471,263491],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[263493,263576]},{"pos":[263619,263631],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[263633,263701]},{"pos":[263707,263724],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[263771,263781],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263783,263788]},{"pos":[263797,263809],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[263815,263837],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[263839,263937]},{"pos":[263997,264007],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264009,264014]},{"pos":[264023,264035],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[264037,264116]},{"pos":[264123,264130],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[264132,264169]},{"pos":[264175,264198],"content":"Method autoInsSeparator","linkify":"Method autoInsSeparator","nodes":[{"content":"Method autoInsSeparator","pos":[0,23]}]},{"pos":[264251,264261],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264263,264268]},{"pos":[264277,264289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264295,264317],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[264319,264368]},{"pos":[264420,264430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264432,264437]},{"pos":[264446,264458],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[264460,264504]},{"pos":[264511,264518],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[264520,264588]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[264594,264664]},{"content":"The second byte contains a value for green.","pos":[264669,264712]},{"content":"The third byte contains a value for blue.","pos":[264717,264758]},{"content":"The high-order byte must be zero.","pos":[264763,264796]},{"content":"The maximum value for a single byte is 255.","pos":[264801,264844]},{"pos":[264850,264866],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[264868,264930]},{"pos":[264976,264986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264988,264993]},{"pos":[265002,265014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[265016,265077]},{"pos":[265083,265099],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[265101,265155]},{"pos":[265202,265212],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[265214,265215]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[265218,265288]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[265289,265356]},{"content":"y","pos":[265368,265369]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[265372,265442]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[265443,265510]},{"pos":[265517,265529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[265531,265570]},{"pos":[265577,265584],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[265586,265667]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[265668,265772]},{"pos":[265778,265789],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to output text in the control.","pos":[265791,265866]},{"pos":[265907,265917],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[265919,265924]},{"pos":[265933,265945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[265947,265997]},{"pos":[266004,266011],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[266013,266085]},{"content":"0 Use the default font weight.","pos":[266091,266121]},{"content":"1 Thin.","pos":[266126,266133]},{"content":"2 Extra-light.","pos":[266138,266152]},{"content":"3 Light.","pos":[266157,266165]},{"content":"4 Normal.","pos":[266170,266179]},{"content":"5 Medium.","pos":[266184,266193]},{"content":"6 Semibold.","pos":[266198,266209]},{"content":"7 Bold.","pos":[266214,266221]},{"content":"8 Extra-bold.","pos":[266226,266239]},{"content":"9 Heavy.","pos":[266244,266252]},{"pos":[266258,266271],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[266273,266329]},{"pos":[266372,266382],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[266384,266389]},{"pos":[266398,266410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[266412,266456]},{"pos":[266463,266470],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows.","pos":[266472,266564]},{"content":"Value","pos":[266568,266573]},{"content":"Description","pos":[266576,266587]},{"content":"0","pos":[266616,266617]},{"content":"Auto","pos":[266624,266628]},{"content":"1","pos":[266640,266641]},{"content":"3D","pos":[266648,266650]},{"content":"2","pos":[266664,266665]},{"content":"Single line","pos":[266672,266683]},{"content":"3","pos":[266688,266689]},{"content":"Flat","pos":[266696,266700]},{"content":"4","pos":[266712,266713]},{"content":"None","pos":[266720,266724]},{"pos":[266739,266761],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[266813,266823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[266825,266830]},{"pos":[266839,266851],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[266857,266879],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[266881,266915]},{"pos":[266982,266992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[266994,266999]},{"content":"The number of lines to use to determine the height.","pos":[267002,267053]},{"content":"lines","pos":[267065,267070]},{"content":"The number of lines to use to determine the height.","pos":[267073,267124]},{"pos":[267131,267143],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[267145,267191]},{"pos":[267197,267216],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[267218,267261]},{"pos":[267310,267320],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[267322,267327]},{"pos":[267336,267348],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[267350,267412]},{"pos":[267419,267426],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[267428,267532]},{"content":"Value","pos":[267536,267541]},{"content":"Description","pos":[267544,267555]},{"content":"0","pos":[267602,267603]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[267610,267623],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[267635,267636]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[267643,267659],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[267668,267669]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[267676,267691],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[267701,267703]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[267709,267721],"source":"MAC\\_CHARSET"},{"content":"128","pos":[267734,267737]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[267742,267759],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[267767,267770]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[267775,267790],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[267800,267803]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[267808,267823],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[267833,267836]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[267841,267861],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[267866,267869]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[267874,267888],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[267899,267902]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[267907,267923],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[267932,267935]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[267940,267959],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[267965,267968]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[267973,267988],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[267998,268001]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[268006,268022],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[268031,268034]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[268039,268058],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[268064,268067]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[268072,268084],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[268096,268184]},{"content":"Value","pos":[268188,268193]},{"content":"Description","pos":[268196,268207]},{"content":"130","pos":[268242,268245]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[268250,268264],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[268268,268354]},{"content":"Value","pos":[268358,268363]},{"content":"Description","pos":[268366,268377]},{"content":"177","pos":[268414,268417]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[268422,268437],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[268442,268445]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[268450,268465],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[268469,268546]},{"content":"Value","pos":[268550,268555]},{"content":"Description","pos":[268558,268569]},{"content":"222","pos":[268602,268605]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[268610,268623],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a values that are based on the current system locale.","pos":[268627,268716]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[268717,268808],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[268809,268923]},{"pos":[268929,268947],"content":"Method charFromPos","linkify":"Method charFromPos","nodes":[{"content":"Method charFromPos","pos":[0,18]}]},{"pos":[268996,269006],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[269008,269009]},{"content":"y","pos":[269023,269024]},{"pos":[269033,269045],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[269051,269069],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[269071,269116]},{"pos":[269164,269174],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[269176,269181]},{"pos":[269190,269202],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[269204,269247]},{"pos":[269254,269261],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table.","pos":[269263,269324]},{"content":"Value","pos":[269328,269333]},{"content":"Style","pos":[269336,269341]},{"content":"0","pos":[269396,269397]},{"content":"Default","pos":[269404,269411]},{"content":"1","pos":[269430,269431]},{"content":"The Windows palette","pos":[269438,269457]},{"content":"2","pos":[269464,269465]},{"content":"The true-color scheme","pos":[269472,269493]},{"pos":[269501,269524],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[269526,269593]},{"pos":[269676,269686],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[269688,269693]},{"pos":[269702,269714],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[269716,269788]},{"pos":[269795,269802],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[269804,269885]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[269886,269979]},{"pos":[269985,270010],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[270012,270108]},{"pos":[270153,270165],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[270167,270253]},{"pos":[270260,270267],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[270269,270318]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[270319,270467]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[270468,270602]},{"pos":[270608,270633],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[270635,270713]},{"pos":[270768,270778],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[270780,270785]},{"content":"The string that contains the country/region codes to set; optional.","pos":[270788,270855]},{"pos":[270862,270874],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[270876,270941]},{"pos":[270947,270979],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[271049,271059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[271061,271066]},{"pos":[271075,271087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[271093,271109],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[271163,271173],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[271175,271180]},{"pos":[271189,271201],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[271207,271233],"content":"Method dataFieldArrayIndex","linkify":"Method dataFieldArrayIndex","nodes":[{"content":"Method dataFieldArrayIndex","pos":[0,26]}]},{"pos":[271278,271290],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[271296,271316],"content":"Method dataFieldName","linkify":"Method dataFieldName","nodes":[{"content":"Method dataFieldName","pos":[0,20]}]},{"pos":[271361,271373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[271379,271396],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[271443,271453],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[271455,271460]},{"pos":[271469,271481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[271487,271510],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[271512,271637]},{"pos":[271690,271700],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[271702,271707]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[271710,271784]},{"pos":[271791,271803],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[271805,271917]},{"pos":[271924,271931],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[271933,272060]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[272061,272154]},{"pos":[272160,272177],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that will be used by the control or the form.","pos":[272179,272251]},{"pos":[272302,272312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272314,272319]},{"pos":[272328,272340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that will be used.","pos":[272342,272394]},{"pos":[272400,272423],"content":"Method decimalSeparator","linkify":"Method decimalSeparator","nodes":[{"content":"Method decimalSeparator","pos":[0,23]}]},{"pos":[272476,272486],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272488,272493]},{"pos":[272502,272514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[272520,272536],"content":"Method direction","linkify":"Method direction","nodes":[{"content":"Method direction","pos":[0,16]}]},{"pos":[272582,272592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272594,272599]},{"pos":[272608,272620],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[272626,272649],"content":"Method displaceNegative","linkify":"Method displaceNegative","nodes":[{"content":"Method displaceNegative","pos":[0,23]}]},{"pos":[272719,272729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272731,272736]},{"content":"mode","pos":[272750,272754]},{"pos":[272763,272775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[272781,272808],"content":"Method displaceNegativeMode","linkify":"Method displaceNegativeMode","nodes":[{"content":"Method displaceNegativeMode","pos":[0,27]}]},{"pos":[272874,272884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[272886,272890]},{"pos":[272899,272911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[272917,272945],"content":"Method displaceNegativeValue","linkify":"Method displaceNegativeValue","nodes":[{"content":"Method displaceNegativeValue","pos":[0,28]}]},{"pos":[273003,273013],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273015,273020]},{"pos":[273029,273041],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273047,273067],"content":"Method displayHeight","linkify":"Method displayHeight","nodes":[{"content":"Method displayHeight","pos":[0,20]}]},{"pos":[273134,273144],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273146,273151]},{"content":"mode","pos":[273165,273169]},{"pos":[273178,273190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273196,273220],"content":"Method displayHeightMode","linkify":"Method displayHeightMode","nodes":[{"content":"Method displayHeightMode","pos":[0,24]}]},{"pos":[273283,273293],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[273295,273299]},{"pos":[273308,273320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273326,273351],"content":"Method displayHeightValue","linkify":"Method displayHeightValue","nodes":[{"content":"Method displayHeightValue","pos":[0,25]}]},{"pos":[273406,273416],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273418,273423]},{"pos":[273432,273444],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273450,273470],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[273537,273547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273549,273554]},{"content":"mode","pos":[273568,273572]},{"pos":[273581,273593],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273599,273623],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[273686,273696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[273698,273702]},{"pos":[273711,273723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273729,273754],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[273809,273819],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273821,273826]},{"pos":[273835,273847],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[273853,273873],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal for Microsoft Dynamics 365 for Operations, or in both.","pos":[273875,274074]},{"pos":[274124,274134],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274136,274141]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[274144,274218]},{"pos":[274225,274237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics 365 for Operations client, in Enterprise Portal, or in both.","pos":[274239,274383]},{"pos":[274389,274404],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Indicates whether to enable or disable drag-and-drop operations for the control.","pos":[274406,274486]},{"pos":[274531,274541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[274543,274548]},{"pos":[274557,274569],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, 0.","pos":[274571,274627]},{"pos":[274633,274648],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[274650,274744]},{"pos":[274838,274848],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[274850,274860]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[274863,274948]},{"content":"dragMode","pos":[274960,274968]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[274971,275056]},{"content":"x","pos":[275068,275069]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[275072,275157]},{"content":"y","pos":[275169,275170]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[275173,275258]},{"pos":[275265,275277],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[275279,275344]},{"pos":[275350,275367],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[275369,275465]},{"pos":[275555,275565],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[275567,275577]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[275580,275665]},{"content":"dragMode","pos":[275677,275685]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[275688,275773]},{"content":"x","pos":[275785,275786]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[275789,275874]},{"content":"y","pos":[275886,275887]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[275890,275975]},{"pos":[275982,275994],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[275996,276061]},{"pos":[276067,276082],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[276084,276154]},{"pos":[276188,276200],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[276202,276333]},{"pos":[276339,276353],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[276355,276406]},{"pos":[276458,276468],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276470,276475]},{"pos":[276484,276496],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[276498,276546]},{"pos":[276553,276560],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows for controls to be enabled or disabled at run time.","pos":[276562,276641]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[276642,276737]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[276738,276872]},{"pos":[276878,276901],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[276976,276986],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276988,276993]},{"pos":[277002,277014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277020,277041],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[277092,277102],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277104,277109]},{"pos":[277118,277130],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277136,277147],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[277149,277206]},{"pos":[277247,277257],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277259,277264]},{"pos":[277273,277285],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[277287,277342]},{"pos":[277348,277363],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[277365,277422]},{"pos":[277467,277477],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277479,277484]},{"pos":[277493,277505],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[277507,277540]},{"pos":[277546,277568],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[277570,277621]},{"pos":[277673,277683],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277685,277690]},{"pos":[277699,277711],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[277713,277757]},{"pos":[277764,277771],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[277773,277841]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[277847,277917]},{"content":"The second byte contains a value for green.","pos":[277922,277965]},{"content":"The third byte contains a value for blue.","pos":[277970,278011]},{"content":"The high-order byte must be zero.","pos":[278016,278049]},{"content":"The maximum value for a single byte is 255.","pos":[278054,278097]},{"pos":[278103,278119],"content":"Method formatMST","linkify":"Method formatMST","nodes":[{"content":"Method formatMST","pos":[0,16]}]},{"pos":[278165,278175],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278177,278182]},{"pos":[278191,278203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278209,278228],"content":"Method getCursorPos","linkify":"Method getCursorPos","nodes":[{"content":"Method getCursorPos","pos":[0,19]}]},{"pos":[278272,278284],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278290,278316],"content":"Method getFirstVisibleLine","linkify":"Method getFirstVisibleLine","nodes":[{"content":"Method getFirstVisibleLine","pos":[0,26]}]},{"pos":[278361,278373],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278379,278393],"content":"Method getLine","linkify":"Method getLine","nodes":[{"content":"Method getLine","pos":[0,14]}]},{"pos":[278436,278446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[278448,278454]},{"pos":[278463,278475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278481,278500],"content":"Method getLineCount","linkify":"Method getLineCount","nodes":[{"content":"Method getLineCount","pos":[0,19]}]},{"pos":[278538,278550],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278556,278575],"content":"Method getSelection","linkify":"Method getSelection","nodes":[{"content":"Method getSelection","pos":[0,19]}]},{"pos":[278619,278631],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278637,278654],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[278656,278744]},{"pos":[278797,278807],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[278809,278812]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[278815,278885]},{"pos":[278892,278904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[278906,278973]},{"pos":[278979,279000],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[279002,279057]},{"pos":[279101,279113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[279115,279178]},{"pos":[279184,279197],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[279199,279238]},{"pos":[279291,279301],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[279303,279308]},{"content":"mode","pos":[279322,279326]},{"pos":[279335,279347],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[279349,279385]},{"pos":[279392,279399],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[279401,279454]},{"content":"Calculate the height according to the following table:","pos":[279455,279509]},{"content":"Mode","pos":[279513,279517]},{"content":"Height calculation","pos":[279531,279549]},{"content":"-1 Exact","pos":[279737,279745]},{"content":"The exact height in pixels of the controls is used.","pos":[279755,279806]},{"content":"0 Auto","pos":[279849,279855]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[279867,279956]},{"content":"1 Column height","pos":[279961,279976]},{"content":"The layout of the form determines the height of the control.","pos":[279979,280039]},{"content":"The height and height calculation mode can be set separately.","pos":[280072,280133]},{"pos":[280139,280156],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[280158,280220]},{"pos":[280267,280277],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[280279,280284]},{"pos":[280293,280305],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[280307,280328]},{"pos":[280335,280342],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[280344,280398]},{"content":"Mode","pos":[280402,280406]},{"content":"Height calculation","pos":[280418,280436]},{"content":"Exact","pos":[280622,280627]},{"content":"The exact height in pixels of the controls is used.","pos":[280638,280689]},{"content":"Auto","pos":[280732,280736]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[280748,280837]},{"content":"Column height","pos":[280842,280855]},{"content":"The layout of the form determines the height of the control.","pos":[280858,280918]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[280951,281036]},{"pos":[281042,281060],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[281062,281101]},{"pos":[281149,281159],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[281161,281166]},{"pos":[281175,281187],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[281189,281210]},{"pos":[281217,281224],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[281226,281316]},{"pos":[281322,281338],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[281340,281380]},{"pos":[281415,281427],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[281429,281517]},{"pos":[281524,281531],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[281533,281603]},{"content":"Use the helpText method to set the value of the Help text.","pos":[281604,281662]},{"pos":[281668,281683],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text to display at the bottom of the screen when a field or control is pointed to.","pos":[281685,281789]},{"pos":[281834,281844],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[281846,281851]},{"pos":[281860,281872],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[281874,281929]},{"pos":[281936,281943],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property dialog box.","pos":[281945,282018]},{"content":"The Help text must not exceed 250 characters.","pos":[282019,282064]},{"pos":[282070,282092],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[282094,282157]},{"pos":[282209,282219],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[282221,282226]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[282229,282296]},{"pos":[282303,282315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[282317,282367]},{"pos":[282373,282384],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[282386,282431]},{"pos":[282461,282473],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[282475,282502]},{"pos":[282509,282516],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[282518,282562]},{"pos":[282568,282582],"content":"Method iMEMode","linkify":"Method iMEMode","nodes":[{"content":"Method iMEMode","pos":[0,14]}]},{"pos":[282626,282636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[282638,282643]},{"pos":[282652,282664],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[282670,282688],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[282729,282741],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[282747,282765],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[282767,282833]},{"pos":[282874,282886],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[282888,282939]},{"pos":[282946,282953],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[282955,283023]},{"pos":[283029,283048],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[283050,283117]},{"pos":[283159,283171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[283173,283225]},{"pos":[283231,283256],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[283258,283357]},{"pos":[283426,283436],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[283438,283455]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[283458,283586]},{"pos":[283593,283605],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[283607,283766]},{"pos":[283773,283780],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[283782,283859]},{"content":"FormAllowUserSetup::No 0","pos":[284199,284223]},{"content":"No changes can be made to the control.","pos":[284234,284272]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[284273,284362]},{"content":"FormAllowUserSetup::Restricted 1","pos":[284367,284399]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[284402,284494]},{"content":"The user cannot move the control.","pos":[284495,284528]},{"content":"FormAllowUserSetup::Yes 2","pos":[284535,284560]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[284570,284662]},{"content":"The user can also move the control.","pos":[284663,284698]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[284702,284891]},{"pos":[284897,284911],"content":"Method isValid","linkify":"Method isValid","nodes":[{"content":"Method isValid","pos":[0,14]}]},{"pos":[284948,284960],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[284966,284979],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[285030,285040],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285042,285047]},{"pos":[285056,285068],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[285074,285086],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[285088,285125]},{"pos":[285167,285177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285179,285184]},{"pos":[285193,285205],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[285207,285245]},{"pos":[285252,285259],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.","pos":[285261,285339]},{"content":"The label property value cannot exceed 250 characters.","pos":[285340,285394]},{"pos":[285400,285421],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[285472,285482],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285484,285489]},{"pos":[285498,285510],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[285516,285532],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[285578,285588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285590,285595]},{"pos":[285604,285616],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[285622,285646],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[285700,285710],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285712,285717]},{"pos":[285726,285738],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[285744,285760],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[285806,285816],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285818,285823]},{"pos":[285832,285844],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[285850,285870],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[285920,285930],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285932,285937]},{"pos":[285946,285958],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[285964,285991],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[286048,286058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[286060,286065]},{"pos":[286074,286086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[286092,286109],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[286156,286166],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[286168,286173]},{"pos":[286182,286194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[286200,286218],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[286276,286286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[286288,286293]},{"content":"mode","pos":[286307,286311]},{"pos":[286320,286332],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[286338,286360],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[286412,286422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[286424,286429]},{"pos":[286438,286450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[286456,286479],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[286532,286542],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[286544,286549]},{"pos":[286558,286570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[286576,286594],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[286650,286660],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[286662,286667]},{"pos":[286676,286688],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[286694,286719],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"pos":[286816,286826],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[286828,286829]},{"content":"y","pos":[286843,286844]},{"content":"button","pos":[286858,286864]},{"content":"Ctrl","pos":[286878,286882]},{"content":"Shift","pos":[286896,286901]},{"pos":[286910,286922],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[286928,286949],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"pos":[287042,287052],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[287054,287055]},{"content":"y","pos":[287069,287070]},{"content":"button","pos":[287084,287090]},{"content":"Ctrl","pos":[287104,287108]},{"content":"Shift","pos":[287122,287127]},{"pos":[287136,287148],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[287154,287173],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"pos":[287264,287274],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[287276,287277]},{"content":"y","pos":[287291,287292]},{"content":"button","pos":[287306,287312]},{"content":"Ctrl","pos":[287326,287330]},{"content":"Shift","pos":[287344,287349]},{"pos":[287358,287370],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[287376,287396],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[287446,287456],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[287458,287463]},{"pos":[287472,287484],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[287490,287511],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[287570,287580],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[287582,287587]},{"pos":[287596,287608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[287614,287631],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[287688,287698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[287700,287705]},{"content":"mode","pos":[287719,287723]},{"pos":[287732,287744],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[287750,287771],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[287822,287832],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[287834,287839]},{"pos":[287848,287860],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[287866,287888],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[287940,287950],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[287952,287957]},{"pos":[287966,287978],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[287984,287996],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[288031,288043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[288049,288060],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[288062,288126]},{"pos":[288177,288187],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[288189,288194]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[288197,288283]},{"content":"mode","pos":[288295,288299]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[288302,288388]},{"pos":[288395,288407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[288409,288460]},{"pos":[288466,288481],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[288483,288544]},{"pos":[288589,288599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[288601,288606]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[288609,288695]},{"pos":[288702,288714],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[288716,288772]},{"pos":[288778,288794],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[288796,288860]},{"pos":[288906,288916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[288918,288923]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[288926,289007]},{"pos":[289014,289026],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[289028,289079]},{"pos":[289085,289101],"content":"Method limitText","linkify":"Method limitText","nodes":[{"content":"Method limitText","pos":[0,16]}]},{"pos":[289164,289174],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[289176,289181]},{"content":"mode","pos":[289195,289199]},{"pos":[289208,289220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[289226,289246],"content":"Method limitTextMode","linkify":"Method limitTextMode","nodes":[{"content":"Method limitTextMode","pos":[0,20]}]},{"pos":[289305,289315],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[289317,289321]},{"pos":[289330,289342],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[289348,289369],"content":"Method limitTextValue","linkify":"Method limitTextValue","nodes":[{"content":"Method limitTextValue","pos":[0,21]}]},{"pos":[289420,289430],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[289432,289437]},{"pos":[289446,289458],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[289464,289483],"content":"Method lineFromChar","linkify":"Method lineFromChar","nodes":[{"content":"Method lineFromChar","pos":[0,19]}]},{"pos":[289534,289544],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[289546,289555]},{"pos":[289564,289576],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[289582,289598],"content":"Method lineIndex","linkify":"Method lineIndex","nodes":[{"content":"Method lineIndex","pos":[0,16]}]},{"pos":[289643,289653],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[289655,289661]},{"pos":[289670,289682],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[289688,289705],"content":"Method lineLength","linkify":"Method lineLength","nodes":[{"content":"Method lineLength","pos":[0,17]}]},{"pos":[289751,289761],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lineNo","pos":[289763,289769]},{"pos":[289778,289790],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[289796,289815],"content":"Method lookupButton","linkify":"Method lookupButton","nodes":[{"content":"Method lookupButton","pos":[0,19]}]},{"pos":[289864,289874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[289876,289881]},{"pos":[289890,289902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[289908,289924],"content":"Method mandatory","linkify":"Method mandatory","nodes":[{"content":"Method mandatory","pos":[0,16]}]},{"pos":[289978,289988],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[289990,289995]},{"pos":[290004,290016],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[290022,290042],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[290044,290097]},{"pos":[290155,290165],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[290167,290172]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[290175,290269]},{"pos":[290276,290288],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[290290,290363]},{"pos":[290369,290391],"content":"Method minNoOfDecimals","linkify":"Method minNoOfDecimals","nodes":[{"content":"Method minNoOfDecimals","pos":[0,22]}]},{"pos":[290460,290470],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[290472,290477]},{"content":"mode","pos":[290491,290495]},{"pos":[290504,290516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[290522,290548],"content":"Method minNoOfDecimalsMode","linkify":"Method minNoOfDecimalsMode","nodes":[{"content":"Method minNoOfDecimalsMode","pos":[0,26]}]},{"pos":[290613,290623],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[290625,290629]},{"pos":[290638,290650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[290656,290683],"content":"Method minNoOfDecimalsValue","linkify":"Method minNoOfDecimalsValue","nodes":[{"content":"Method minNoOfDecimalsValue","pos":[0,27]}]},{"pos":[290740,290750],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[290752,290757]},{"pos":[290766,290778],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[290784,290799],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[290837,290849],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[290855,290875],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[290877,290934]},{"pos":[291026,291036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[291038,291039]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291042,291103]},{"content":"y","pos":[291115,291116]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291119,291180]},{"content":"button","pos":[291192,291198]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291201,291262]},{"content":"Ctrl","pos":[291274,291278]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291281,291342]},{"content":"Shift","pos":[291354,291359]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291362,291423]},{"pos":[291430,291442],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[291444,291483]},{"pos":[291490,291497],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[291499,291603]},{"pos":[291609,291625],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[291627,291692]},{"pos":[291780,291790],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[291792,291793]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291796,291857]},{"content":"y","pos":[291869,291870]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291873,291934]},{"content":"button","pos":[291946,291952]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[291955,292016]},{"content":"Ctrl","pos":[292028,292032]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292035,292096]},{"content":"Shift","pos":[292108,292113]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292116,292177]},{"pos":[292184,292196],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[292198,292237]},{"pos":[292244,292251],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[292253,292357]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[292358,292493]},{"pos":[292499,292515],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[292517,292582]},{"pos":[292670,292680],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[292682,292683]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292686,292747]},{"content":"y","pos":[292759,292760]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292763,292824]},{"content":"button","pos":[292836,292842]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292845,292906]},{"content":"Ctrl","pos":[292918,292922]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292925,292986]},{"content":"Shift","pos":[292998,293003]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[293006,293067]},{"pos":[293074,293086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[293088,293127]},{"pos":[293134,293141],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[293143,293247]},{"pos":[293253,293267],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[293269,293341]},{"pos":[293427,293437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[293439,293440]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[293443,293504]},{"content":"y","pos":[293516,293517]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[293520,293581]},{"content":"button","pos":[293593,293599]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[293602,293663]},{"content":"Ctrl","pos":[293675,293679]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[293682,293743]},{"content":"Shift","pos":[293755,293760]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[293763,293824]},{"pos":[293831,293843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[293845,293884]},{"pos":[293891,293898],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[293900,294004]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[294005,294140]},{"pos":[294146,294157],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics 365 for Operations application object.","pos":[294159,294310]},{"pos":[294351,294361],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[294363,294368]},{"content":"The name to assign to the control.","pos":[294371,294405]},{"pos":[294412,294424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[294426,294490]},{"pos":[294497,294504],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[294506,294600]},{"content":"It must start with a letter.","pos":[294606,294634]},{"content":"It cannot exceed 250 characters.","pos":[294639,294671]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[294676,294730],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[294735,294775]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[294780,294890]},{"pos":[294896,294919],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[294972,294982],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[294984,294989]},{"pos":[294998,295010],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295016,295035],"content":"Method noOfDecimals","linkify":"Method noOfDecimals","nodes":[{"content":"Method noOfDecimals","pos":[0,19]}]},{"pos":[295101,295111],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[295113,295118]},{"content":"mode","pos":[295132,295136]},{"pos":[295145,295157],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295163,295186],"content":"Method noOfDecimalsMode","linkify":"Method noOfDecimalsMode","nodes":[{"content":"Method noOfDecimalsMode","pos":[0,23]}]},{"pos":[295248,295258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[295260,295264]},{"pos":[295273,295285],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295291,295315],"content":"Method noOfDecimalsValue","linkify":"Method noOfDecimalsValue","nodes":[{"content":"Method noOfDecimalsValue","pos":[0,24]}]},{"pos":[295369,295379],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[295381,295386]},{"pos":[295395,295407],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295413,295440],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[295492,295504],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295510,295530],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[295532,295577]},{"pos":[295624,295636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[295638,295673]},{"pos":[295679,295697],"content":"Method posFromChar","linkify":"Method posFromChar","nodes":[{"content":"Method posFromChar","pos":[0,18]}]},{"pos":[295753,295763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndex","pos":[295765,295774]},{"pos":[295783,295795],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295801,295822],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[295873,295883],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[295885,295890]},{"pos":[295899,295911],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[295917,295934],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[295981,295991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[295993,295998]},{"pos":[296007,296019],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[296025,296041],"content":"Method realValue","linkify":"Method realValue","nodes":[{"content":"Method realValue","pos":[0,16]}]},{"pos":[296089,296099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[296101,296106]},{"pos":[296115,296127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[296133,296155],"content":"Method replaceOnLookup","linkify":"Method replaceOnLookup","nodes":[{"content":"Method replaceOnLookup","pos":[0,22]}]},{"pos":[296215,296225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[296227,296232]},{"pos":[296241,296253],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[296259,296276],"content":"Method rotateSign","linkify":"Method rotateSign","nodes":[{"content":"Method rotateSign","pos":[0,17]}]},{"pos":[296323,296333],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[296335,296340]},{"pos":[296349,296361],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[296367,296390],"content":"Method searchAfterInput","linkify":"Method searchAfterInput","nodes":[{"content":"Method searchAfterInput","pos":[0,23]}]},{"pos":[296443,296453],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[296455,296460]},{"pos":[296469,296481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[296487,296504],"content":"Method searchMode","linkify":"Method searchMode","nodes":[{"content":"Method searchMode","pos":[0,17]}]},{"pos":[296551,296561],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[296563,296568]},{"pos":[296577,296589],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[296595,296613],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[296615,296674]},{"pos":[296742,296752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[296754,296759]},{"content":"The ID of the security key to assign to the control; optional.","pos":[296762,296824]},{"pos":[296831,296843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[296845,296944]},{"pos":[296950,296972],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[296974,297014]},{"pos":[297069,297079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[297081,297091]},{"content":"The ID of the menu to show.","pos":[297094,297121]},{"pos":[297128,297140],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[297142,297201]},{"pos":[297207,297223],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[297277,297287],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297289,297294]},{"pos":[297303,297315],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[297321,297336],"content":"Method showZero","linkify":"Method showZero","nodes":[{"content":"Method showZero","pos":[0,15]}]},{"pos":[297381,297391],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297393,297398]},{"pos":[297407,297419],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[297425,297443],"content":"Method signDisplay","linkify":"Method signDisplay","nodes":[{"content":"Method signDisplay","pos":[0,18]}]},{"pos":[297491,297501],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297503,297508]},{"pos":[297517,297529],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[297535,297546],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[297548,297675]},{"pos":[297724,297734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[297736,297741]},{"content":"The value to assign to the skip property of the control; optional.","pos":[297744,297810]},{"pos":[297817,297829],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[297831,297937]},{"pos":[297944,297951],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[297953,298148]},{"pos":[298154,298165],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[298220,298230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[298232,298245]},{"pos":[298254,298266],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[298272,298284],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[298326,298336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298338,298343]},{"pos":[298352,298364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[298370,298394],"content":"Method thousandSeparator","linkify":"Method thousandSeparator","nodes":[{"content":"Method thousandSeparator","pos":[0,24]}]},{"pos":[298448,298458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298460,298465]},{"pos":[298474,298486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[298492,298506],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[298508,298551]},{"pos":[298584,298596],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[298598,298700]},{"pos":[298707,298714],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[298716,298788]},{"pos":[298794,298804],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[298806,298868]},{"pos":[298918,298928],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[298930,298935]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[298938,299022]},{"content":"mode","pos":[299034,299038]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[299041,299125]},{"pos":[299132,299144],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[299146,299195]},{"pos":[299201,299215],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[299217,299276]},{"pos":[299320,299330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299332,299337]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[299340,299424]},{"pos":[299431,299443],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[299445,299499]},{"pos":[299505,299520],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[299522,299584]},{"pos":[299629,299639],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299641,299646]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[299649,299728]},{"pos":[299735,299747],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[299749,299798]},{"pos":[299804,299815],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[299856,299866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299868,299873]},{"pos":[299882,299894],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[299900,299916],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"pos":[299970,299980],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[299982,299987]},{"pos":[299996,300008],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300014,300041],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[300105,300115],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[300117,300121]},{"pos":[300130,300142],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[300148,300163],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[300165,300208]},{"pos":[300253,300263],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300265,300270]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[300273,300345]},{"pos":[300352,300364],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[300366,300396]},{"pos":[300402,300421],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[300423,300471]},{"pos":[300520,300530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300532,300537]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[300540,300617]},{"pos":[300624,300636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[300638,300673]},{"pos":[300679,300699],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[300701,300760]},{"pos":[300810,300820],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[300822,300827]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[300830,300918]},{"pos":[300925,300937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[300939,300985]},{"pos":[300991,301009],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[301011,301094]},{"pos":[301142,301152],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301154,301159]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[301162,301242]},{"pos":[301249,301261],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[301263,301319]},{"pos":[301325,301350],"content":"Method userFastTabSummary","linkify":"Method userFastTabSummary","nodes":[{"content":"Method userFastTabSummary","pos":[0,25]}]},{"pos":[301405,301415],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301417,301422]},{"pos":[301431,301443],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[301449,301466],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[301468,301520]},{"pos":[301567,301577],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301579,301584]},{"content":"The user height for the control; optional.","pos":[301587,301629]},{"pos":[301636,301648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[301650,301689]},{"pos":[301695,301710],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[301712,301794]},{"pos":[301839,301849],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[301851,301856]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[301859,301938]},{"pos":[301945,301957],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[301959,302014]},{"pos":[302021,302028],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[302030,302200]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[302201,302276]},{"content":"This method lets you programmatically determine and set the value.","pos":[302277,302343]},{"pos":[302349,302372],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[302374,302430]},{"pos":[302483,302493],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302495,302500]},{"content":"The organization container to set for the control; optional.","pos":[302503,302563]},{"pos":[302570,302582],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[302584,302627]},{"pos":[302633,302654],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[302656,302710]},{"pos":[302761,302771],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[302773,302778]},{"content":"The organization sibling to set for the control; optional.","pos":[302781,302839]},{"pos":[302846,302858],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[302860,302901]},{"pos":[302907,302928],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[302930,302979]},{"pos":[303030,303040],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303042,303047]},{"content":"The user label text to set for the control; optional.","pos":[303050,303103]},{"pos":[303110,303122],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[303124,303160]},{"pos":[303166,303190],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[303192,303245]},{"pos":[303299,303309],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303311,303316]},{"content":"The user security level to set for the control; optional.","pos":[303319,303376]},{"pos":[303383,303395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[303397,303437]},{"pos":[303443,303458],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[303460,303608]},{"pos":[303653,303663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[303665,303670]},{"content":"The value to assign to the userSkip property; optional.","pos":[303673,303728]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[303729,303824]},{"pos":[303831,303843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[303845,303914]},{"pos":[303920,303936],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels, as specified by the user.","pos":[303938,304015]},{"pos":[304061,304071],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304073,304078]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[304081,304147]},{"pos":[304154,304166],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[304168,304297]},{"pos":[304304,304311],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[304313,304407]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[304408,304524],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[304525,304675]},{"pos":[304681,304696],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[304734,304746],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[304752,304774],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[304776,304837]},{"pos":[304906,304916],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[304918,304923]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[304926,305003]},{"content":"mode","pos":[305015,305019]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[305022,305099]},{"pos":[305106,305118],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[305120,305168]},{"pos":[305174,305200],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[305202,305261]},{"pos":[305326,305336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[305338,305342]},{"pos":[305351,305363],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[305365,305419]},{"pos":[305425,305452],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[305454,305515]},{"pos":[305572,305582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305584,305589]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[305592,305670]},{"pos":[305677,305689],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[305691,305739]},{"pos":[305745,305764],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[305813,305823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[305825,305830]},{"pos":[305839,305851],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[305857,305871],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[305873,305943]},{"pos":[305995,306005],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306007,306012]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[306015,306087]},{"pos":[306094,306106],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[306108,306157]},{"pos":[306163,306175],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[306177,306215]},{"pos":[306267,306277],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[306279,306284]},{"content":"mode","pos":[306298,306302]},{"pos":[306311,306323],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[306325,306360]},{"pos":[306367,306374],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[306376,306429]},{"content":"Calculate the width according to the following table.","pos":[306430,306483]},{"content":"Mode","pos":[306487,306491]},{"content":"Width calculation","pos":[306504,306521]},{"content":"-1 Exact","pos":[306707,306715]},{"content":"The exact width in pixels of the controls is used.","pos":[306724,306774]},{"content":"0 Auto","pos":[306817,306823]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[306834,306922]},{"content":"1 Column width","pos":[306927,306941]},{"content":"The layout of the form determines the width of the control.","pos":[306944,307003]},{"content":"The width and width calculation mode can be set separately.","pos":[307036,307095]},{"pos":[307101,307117],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[307119,307181]},{"pos":[307227,307237],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[307239,307244]},{"pos":[307253,307265],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[307267,307328]},{"pos":[307335,307342],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[307344,307397]},{"content":"Mode","pos":[307401,307405]},{"content":"Width calculation","pos":[307416,307433]},{"content":"Exact","pos":[307617,307622]},{"content":"The exact width in pixels of the controls is used.","pos":[307632,307682]},{"content":"Auto","pos":[307725,307729]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[307740,307828]},{"content":"Column width","pos":[307833,307845]},{"content":"The layout of the form determines the width of the control.","pos":[307848,307907]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[307940,308023]},{"pos":[308029,308046],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[308048,308086]},{"pos":[308133,308143],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[308145,308150]},{"pos":[308159,308171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[308173,308208]},{"pos":[308215,308222],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[308224,308297]},{"pos":[308303,308324],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[308326,308347]},{"pos":[308387,308411],"content":"Method performTypeLookup","linkify":"Method performTypeLookup","nodes":[{"content":"Method performTypeLookup","pos":[0,24]}]},{"pos":[308517,308527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"userType","pos":[308529,308537]},{"content":"arrayIndex","pos":[308551,308561]},{"content":"company","pos":[308575,308582]},{"pos":[308590,308606],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[308689,308699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[308701,308707]},{"content":"e","pos":[308721,308722]},{"pos":[308730,308746],"content":"Method pasteText","linkify":"Method pasteText","nodes":[{"content":"Method pasteText","pos":[0,16]}]},{"pos":[308815,308825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"pasteStr","pos":[308827,308835]},{"content":"InsertSel","pos":[308849,308858]},{"pos":[308866,308879],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[308911,308929],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[309014,309024],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[309026,309032]},{"content":"e","pos":[309046,309047]},{"pos":[309055,309070],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[309152,309162],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[309164,309170]},{"content":"e","pos":[309184,309185]},{"pos":[309193,309206],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[309254,309264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[309266,309275]},{"pos":[309283,309300],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[309302,309356]},{"pos":[309392,309408],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[309410,309506]},{"pos":[309541,309570],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[309688,309698],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[309700,309716]},{"content":"objectMethodToCall","pos":[309730,309748]},{"content":"overrideObject","pos":[309762,309776]},{"pos":[309784,309801],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[309885,309895],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[309897,309903]},{"content":"e","pos":[309917,309918]},{"pos":[309926,309941],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[309943,309973]},{"pos":[310007,310018],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[310048,310070],"content":"Method performDBLookup","linkify":"Method performDBLookup","nodes":[{"content":"Method performDBLookup","pos":[0,22]}]},{"pos":[310178,310188],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"fieldId","pos":[310190,310197]},{"content":"tableId","pos":[310211,310218]},{"content":"company","pos":[310232,310239]},{"pos":[310247,310265],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[310267,310338]},{"pos":[310389,310399],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[310401,310410]},{"content":"The string value to use to filter data; optional.","pos":[310413,310462]},{"pos":[310468,310482],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[310484,310524]},{"pos":[310557,310574],"content":"Method textChange","linkify":"Method textChange","nodes":[{"content":"Method textChange","pos":[0,17]}]},{"pos":[310610,310627],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[310711,310721],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[310723,310729]},{"content":"e","pos":[310743,310744]},{"pos":[310752,310763],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[310765,310863]},{"pos":[310949,310959],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[310961,310971]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[310974,311059]},{"content":"dragMode","pos":[311071,311079]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[311082,311167]},{"content":"x","pos":[311179,311180]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[311183,311268]},{"content":"y","pos":[311280,311281]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[311284,311369]},{"pos":[311375,311390],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[311392,311438]},{"pos":[311472,311491],"content":"Method scrollCursor","linkify":"Method scrollCursor","nodes":[{"content":"Method scrollCursor","pos":[0,19]}]},{"pos":[311529,311546],"content":"Method lineScroll","linkify":"Method lineScroll","nodes":[{"content":"Method lineScroll","pos":[0,17]}]},{"pos":[311597,311607],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dx","pos":[311609,311611]},{"content":"dy","pos":[311625,311627]},{"pos":[311635,311647],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[311649,311703]},{"pos":[311734,311753],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[311839,311849],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[311851,311857]},{"content":"e","pos":[311871,311872]},{"pos":[311880,311894],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[311975,311985],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[311987,311993]},{"content":"e","pos":[312007,312008]},{"pos":[312016,312040],"content":"Method performFormLookup","linkify":"Method performFormLookup","nodes":[{"content":"Method performFormLookup","pos":[0,24]}]},{"pos":[312097,312107],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"form","pos":[312109,312113]},{"pos":[312121,312137],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[312139,312181]},{"pos":[312216,312230],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[312232,312293]},{"pos":[312327,312334],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[312336,312464]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[312465,312569]},{"pos":[312575,312593],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[312678,312688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[312690,312696]},{"content":"e","pos":[312710,312711]},{"pos":[312719,312738],"content":"Method setSelection","linkify":"Method setSelection","nodes":[{"content":"Method setSelection","pos":[0,19]}]},{"pos":[312811,312821],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"charIndexFrom","pos":[312823,312836]},{"content":"charIndexTo","pos":[312850,312861]},{"pos":[312869,312880],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[312882,312934]},{"pos":[312964,312978],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[313011,313021],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[313023,313056]},{"pos":[313085,313102],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[313104,313174]},{"pos":[313264,313274],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[313276,313277]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[313280,313341]},{"content":"y","pos":[313353,313354]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[313357,313418]},{"content":"button","pos":[313430,313436]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[313439,313500]},{"content":"Ctrl","pos":[313512,313516]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[313519,313580]},{"content":"Shift","pos":[313592,313597]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[313600,313661]},{"pos":[313667,313688],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[313690,313759]},{"pos":[313821,313831],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[313833,313838]},{"content":"The preferred height of the control.","pos":[313841,313877]},{"content":"height","pos":[313889,313895]},{"content":"The preferred height of the control.","pos":[313898,313934]},{"pos":[313940,313952],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[313983,314006],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[314008,314049]},{"pos":[314091,314104],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[314106,314206]},{"pos":[314288,314298],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[314300,314310]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[314313,314398]},{"content":"dragMode","pos":[314410,314418]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[314421,314506]},{"content":"x","pos":[314518,314519]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[314522,314607]},{"content":"y","pos":[314619,314620]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[314623,314708]},{"pos":[314714,314733],"content":"Method setCursorPos","linkify":"Method setCursorPos","nodes":[{"content":"Method setCursorPos","pos":[0,19]}]},{"pos":[314784,314794],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[314796,314797]},{"content":"y","pos":[314811,314812]}]}