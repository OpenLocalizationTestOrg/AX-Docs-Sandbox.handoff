{"nodes":[{"pos":[32,63],"content":"X++ business run-time functions","needQuote":true,"needEscape":true,"nodes":[{"content":"X++ business run-time functions","pos":[0,31]}]},{"pos":[77,130],"content":"This topic describes the business run-time functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"This topic describes the business run-time functions.","pos":[0,53]}]},{"pos":[630,661],"content":"X++ business run-time functions","linkify":"X++ business run-time functions","nodes":[{"content":"X++ business run-time functions","pos":[0,31]}]},{"content":"This topic describes the business run-time functions.","pos":[663,716]},{"content":"These functions enter financial data and calculate formulas.","pos":[718,778]},{"pos":[783,788],"content":"cTerm","linkify":"cTerm","nodes":[{"content":"cTerm","pos":[0,5]}]},{"content":"Calculates the number of periods that are required for the current investment value to yield a target value.","pos":[789,897]},{"pos":[903,909],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[985,995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[999,1008]},{"content":"Description","pos":[1016,1027]},{"content":"interest","pos":[1101,1109]},{"content":"The interest rate.","pos":[1118,1136]},{"content":"future<ph id=\"ph1\">\\_</ph>value","pos":[1152,1165],"source":"future\\_value"},{"content":"The target value.","pos":[1169,1186]},{"content":"current<ph id=\"ph1\">\\_</ph>value","pos":[1203,1217],"source":"current\\_value"},{"content":"The current investment value.","pos":[1220,1249]},{"pos":[1257,1269],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[1271,1345],"content":"The number of periods that are required in order to reach <bpt id=\"p1\">*</bpt>future<ph id=\"ph1\">\\_</ph>value<ept id=\"p1\">*</ept>.","source":"The number of periods that are required in order to reach *future\\_value*."},{"pos":[1351,1358],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1360,1461],"content":"The <bpt id=\"p1\">*</bpt>current<ph id=\"ph1\">\\_</ph>value<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>future<ph id=\"ph2\">\\_</ph>value<ept id=\"p2\">*</ept> parameters must have the same prefixed sign (plus or minus).","source":"The *current\\_value* and *future\\_value* parameters must have the same prefixed sign (plus or minus)."},{"pos":[1467,1474],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1667,1670],"content":"ddb","linkify":"ddb","nodes":[{"content":"ddb","pos":[0,3]}]},{"content":"Calculates the accelerated depreciation of an asset.","pos":[1676,1728]},{"pos":[1734,1740],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1807,1817],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1821,1830]},{"content":"Description","pos":[1833,1844]},{"content":"price","pos":[1971,1976]},{"content":"The purchase price of the asset.","pos":[1983,2015]},{"content":"scrap","pos":[2046,2051]},{"content":"The residual value of the asset that has been written off.","pos":[2058,2116]},{"content":"life","pos":[2121,2125]},{"content":"The expected lifetime of the asset.","pos":[2133,2168]},{"content":"period","pos":[2196,2202]},{"content":"The period to calculate depreciation over.","pos":[2208,2250]},{"pos":[2274,2286],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The depreciation of the asset.","pos":[2288,2318]},{"pos":[2324,2331],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The book value for a specific period is equal to the purchase price minus the accumulated depreciation for previous periods:","pos":[2333,2457]},{"content":"Book value for Period 1 = Price","pos":[2463,2494]},{"content":"Book value for Period 2 = Book value for Period 1 – Depreciation for Period 1","pos":[2499,2576]},{"content":"Book value for Period n = Book value for Period (n–1) – Depreciation for Period (n–1)","pos":[2581,2666]},{"content":"There are three variations for the calculation of depreciation: If Period <ph id=\"ph1\">&amp;gt;</ph> Life:","pos":[2668,2752],"source":"There are three variations for the calculation of depreciation: If Period &gt; Life:"},{"content":"Depreciation = 0","pos":[2758,2774]},{"content":"If (Book value for Period n) – ((Book value for Period n) × 2 ÷ Life) <ph id=\"ph1\">&amp;lt;</ph> Residual value:","pos":[2776,2866],"source":"If (Book value for Period n) – ((Book value for Period n) × 2 ÷ Life) &lt; Residual value:"},{"content":"Depreciation = (Book value for Period n) – Residual value","pos":[2872,2929]},{"content":"In all other cases: Depreciation = (Book value for Period n) × 2 ÷ Life The <bpt id=\"p1\">**</bpt>syd<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>sln<ept id=\"p2\">**</ept> functions also calculate the depreciation of an asset.","pos":[2931,3081],"source":"In all other cases: Depreciation = (Book value for Period n) × 2 ÷ Life The **syd** and **sln** functions also calculate the depreciation of an asset."},{"content":"The <bpt id=\"p1\">**</bpt>syd<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>ddb<ept id=\"p2\">**</ept> functions enables higher depreciation for the earlier years, whereas <bpt id=\"p3\">**</bpt>sln<ept id=\"p3\">**</ept> calculates a linear depreciation.","pos":[3082,3216],"source":" The **syd** and **ddb** functions enables higher depreciation for the earlier years, whereas **sln** calculates a linear depreciation."},{"pos":[3323,3325],"content":"dg","linkify":"dg","nodes":[{"content":"dg","pos":[0,2]}]},{"content":"Calculates the contribution ratio, which is based on the sales price and the purchase price.","pos":[3330,3422]},{"content":"If the value of the <bpt id=\"p1\">*</bpt>sale<ept id=\"p1\">*</ept> parameter is <bpt id=\"p2\">**</bpt>0.0<ept id=\"p2\">**</ept>, the calculation can't be done.","pos":[3423,3502],"source":" If the value of the *sale* parameter is **0.0**, the calculation can't be done."},{"pos":[3508,3514],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[3559,3569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[3573,3582]},{"content":"Description","pos":[3585,3596]},{"content":"sale","pos":[3645,3649]},{"content":"The sale price.","pos":[3657,3672]},{"content":"purchase","pos":[3681,3689]},{"content":"The purchase price.","pos":[3693,3712]},{"pos":[3720,3732],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The contribution ratio.","pos":[3734,3757]},{"pos":[3763,3770],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[3905,3907],"content":"fV","linkify":"fV","nodes":[{"content":"fV","pos":[0,2]}]},{"content":"Calculates the future value of an investment.","pos":[3912,3957]},{"pos":[3963,3969],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[4027,4037],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[4041,4050]},{"content":"Description","pos":[4053,4064]},{"content":"amount","pos":[4169,4175]},{"content":"The amount that was paid in during each period.","pos":[4181,4228]},{"content":"interest","pos":[4233,4241]},{"content":"The interest rate.","pos":[4245,4263]},{"content":"life","pos":[4297,4301]},{"content":"The number of investment periods.","pos":[4309,4342]},{"pos":[4364,4376],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The future value of the investment.","pos":[4378,4413]},{"pos":[4419,4426],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4528,4531],"content":"idg","linkify":"idg","nodes":[{"content":"idg","pos":[0,3]}]},{"content":"Calculates the sale price, based on the purchase price and the contribution ratio.","pos":[4537,4619]},{"pos":[4679,4689],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[4693,4702]},{"content":"Description","pos":[4715,4726]},{"content":"purchase","pos":[4793,4801]},{"content":"The purchase price.","pos":[4815,4834]},{"content":"contribution<ph id=\"ph1\">\\_</ph>ratio","pos":[4843,4862],"source":"contribution\\_ratio"},{"content":"The contribution ratio.","pos":[4865,4888]},{"pos":[4896,4908],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The sale price.","pos":[4910,4925]},{"pos":[4931,4938],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the contribution ratio is equal to <bpt id=\"p1\">**</bpt>1.0<ept id=\"p1\">**</ept>, the calculation can't be done.","pos":[4940,5017],"source":"If the contribution ratio is equal to **1.0**, the calculation can't be done."},{"content":"The <bpt id=\"p1\">**</bpt>idg<ept id=\"p1\">**</ept> function is the inverse of the <bpt id=\"p2\">**</bpt>dg<ept id=\"p2\">**</ept> function.","pos":[5018,5077],"source":" The **idg** function is the inverse of the **dg** function."},{"pos":[5175,5182],"content":"intvMax","linkify":"intvMax","nodes":[{"content":"intvMax","pos":[0,7]}]},{"pos":[5183,5317],"content":"Retrieves the number of intervals for the specified period when the period is divided into parts as specified by the <bpt id=\"p1\">*</bpt>func<ept id=\"p1\">*</ept> parameter.","source":"Retrieves the number of intervals for the specified period when the period is divided into parts as specified by the *func* parameter."},{"pos":[5382,5392],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[5396,5405]},{"content":"Description","pos":[5410,5421]},{"content":"input<ph id=\"ph1\">\\_</ph>date","pos":[5582,5593],"source":"input\\_date"},{"pos":[5596,5670],"content":"The end of the period, which must be later than the <bpt id=\"p1\">*</bpt>ref<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> parameter.","source":"The end of the period, which must be later than the *ref\\_date* parameter."},{"content":"ref<ph id=\"ph1\">\\_</ph>date","pos":[5675,5684],"source":"ref\\_date"},{"content":"The start of the period.","pos":[5689,5713]},{"content":"func","pos":[5768,5772]},{"pos":[5782,5856],"content":"A <bpt id=\"p1\">**</bpt>IntvScale<ept id=\"p1\">**</ept> system enumeration value that indicates the division unit.","source":"A **IntvScale** system enumeration value that indicates the division unit."},{"pos":[5864,5871],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5873,5927],"content":"Here are the possible values for the <bpt id=\"p1\">*</bpt>func<ept id=\"p1\">*</ept> parameter:","source":"Here are the possible values for the *func* parameter:"},{"content":"None","pos":[5933,5937]},{"content":"YearMonthDay","pos":[5942,5954]},{"content":"YearMonth","pos":[5959,5968]},{"content":"Year","pos":[5973,5977]},{"content":"MonthDay","pos":[5982,5990]},{"content":"Month","pos":[5995,6000]},{"content":"Day","pos":[6005,6008]},{"content":"YearQuarter","pos":[6013,6024]},{"content":"Quarter","pos":[6029,6036]},{"content":"YearWeek","pos":[6041,6049]},{"content":"Week","pos":[6054,6058]},{"content":"WeekDay","pos":[6063,6070]},{"pos":[6076,6083],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6405,6413],"content":"intvName","linkify":"intvName","nodes":[{"content":"intvName","pos":[0,8]}]},{"content":"Returns the name of the interval that is the specified number of intervals ahead of the specified date.","pos":[6414,6517]},{"pos":[6578,6588],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[6592,6601]},{"content":"Description","pos":[6606,6617]},{"content":"input<ph id=\"ph1\">\\_</ph>date","pos":[6812,6823],"source":"input\\_date"},{"content":"A date in the first interval.","pos":[6826,6855]},{"content":"col","pos":[6922,6925]},{"pos":[6936,7027],"content":"The number of intervals ahead of the date that is specified by the <bpt id=\"p1\">*</bpt>input<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> parameter.","source":"The number of intervals ahead of the date that is specified by the *input\\_date* parameter."},{"content":"func","pos":[7032,7036]},{"pos":[7046,7081],"content":"An <bpt id=\"p1\">**</bpt>intvScale<ept id=\"p1\">**</ept> enumeration value.","source":"An **intvScale** enumeration value."},{"pos":[7145,7157],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the interval.","pos":[7159,7184]},{"pos":[7190,7197],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For example, if the <bpt id=\"p1\">*</bpt>func<ept id=\"p1\">*</ept> parameter is the <bpt id=\"p2\">**</bpt>IntvScale::WeekDay<ept id=\"p2\">**</ept> enumeration value, this method returns the name of the weekday.","pos":[7199,7329],"source":"For example, if the *func* parameter is the **IntvScale::WeekDay** enumeration value, this method returns the name of the weekday."},{"content":"If the <bpt id=\"p1\">*</bpt>func<ept id=\"p1\">*</ept> parameter is the <bpt id=\"p2\">**</bpt>IntvScale::Week<ept id=\"p2\">**</ept> enumeration value, this method returns a string that contains the number of the week.","pos":[7330,7466],"source":" If the *func* parameter is the **IntvScale::Week** enumeration value, this method returns a string that contains the number of the week."},{"pos":[7472,7479],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7920,7926],"content":"intvNo","linkify":"intvNo","nodes":[{"content":"intvNo","pos":[0,6]}]},{"content":"Calculates the number of intervals between two dates when you divide the time into the specified intervals.","pos":[7927,8034]},{"pos":[8040,8046],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[8110,8120],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[8124,8133]},{"content":"Description","pos":[8138,8149]},{"content":"input<ph id=\"ph1\">\\_</ph>date","pos":[8254,8265],"source":"input\\_date"},{"content":"A date that indicates the end of the period","pos":[8268,8311]},{"content":"ref<ph id=\"ph1\">\\_</ph>date","pos":[8319,8328],"source":"ref\\_date"},{"content":"A date that indicates the start of the period.","pos":[8333,8379]},{"content":"func","pos":[8384,8388]},{"pos":[8398,8433],"content":"An <bpt id=\"p1\">**</bpt>intvScale<ept id=\"p1\">**</ept> enumeration value.","source":"An **intvScale** enumeration value."},{"pos":[8452,8464],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[8466,8575],"content":"The number of intervals between the dates that are specified by the <bpt id=\"p1\">*</bpt>ref<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>input<ph id=\"ph2\">\\_</ph>date<ept id=\"p2\">*</ept> parameters.","source":"The number of intervals between the dates that are specified by the *ref\\_date* and *input\\_date* parameters."},{"pos":[8581,8588],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8991,8999],"content":"intvNorm","linkify":"intvNorm","nodes":[{"content":"intvNorm","pos":[0,8]}]},{"content":"Returns the normalized date for the period.","pos":[9000,9043]},{"pos":[9049,9055],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[9122,9132],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[9136,9145]},{"content":"Description","pos":[9150,9161]},{"content":"input<ph id=\"ph1\">\\_</ph>date","pos":[9382,9393],"source":"input\\_date"},{"pos":[9396,9500],"content":"The end of the period, which must be later than the date that is specified by the <bpt id=\"p1\">*</bpt>ref<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> parameter.","source":"The end of the period, which must be later than the date that is specified by the *ref\\_date* parameter."},{"content":"ref<ph id=\"ph1\">\\_</ph>date","pos":[9505,9514],"source":"ref\\_date"},{"content":"The start of the period.","pos":[9519,9543]},{"content":"func","pos":[9628,9632]},{"pos":[9642,9719],"content":"An <bpt id=\"p1\">**</bpt>intvScale<ept id=\"p1\">**</ept> enumeration value that indicates the interval division unit.","source":"An **intvScale** enumeration value that indicates the interval division unit."},{"pos":[9754,9766],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The normalized date for the period.","pos":[9768,9803]},{"pos":[9809,9816],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[9818,9961],"content":"The returned date will equal the date of the first day in the interval in which the date that is specified by the <bpt id=\"p1\">*</bpt>ref<ph id=\"ph1\">\\_</ph>date<ept id=\"p1\">*</ept> parameter exists.","source":"The returned date will equal the date of the first day in the interval in which the date that is specified by the *ref\\_date* parameter exists."},{"pos":[9967,9974],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10094,10097],"content":"pmt","linkify":"pmt","nodes":[{"content":"pmt","pos":[0,3]}]},{"content":"Calculates the amount that must be paid every period to repay a loan.","pos":[10103,10172]},{"pos":[10178,10184],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[10246,10256],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[10260,10269]},{"content":"Description","pos":[10272,10283]},{"content":"principal","pos":[10440,10449]},{"content":"The amount that was originally borrowed.","pos":[10452,10492]},{"content":"interest","pos":[10530,10538]},{"content":"The interest that is applied each period to the amount that was borrowed.","pos":[10542,10615]},{"content":"life","pos":[10620,10624]},{"content":"The number of periods that the loan is repaid over.","pos":[10632,10683]},{"pos":[10713,10725],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The amount that must be paid every period.","pos":[10727,10769]},{"pos":[10775,10782],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">*</bpt>life<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>interest<ept id=\"p2\">*</ept> parameters must be expressed in the same time units.","pos":[10784,10862],"source":"The *life* and *interest* parameters must be expressed in the same time units."},{"content":"The value of the <bpt id=\"p1\">*</bpt>life<ept id=\"p1\">*</ept> parameter must be more than <bpt id=\"p2\">**</bpt>0.0<ept id=\"p2\">**</ept>.","pos":[10863,10923],"source":" The value of the *life* parameter must be more than **0.0**."},{"pos":[10929,10936],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11043,11045],"content":"pt","linkify":"pt","nodes":[{"content":"pt","pos":[0,2]}]},{"content":"Retrieves the sum of a number plus a specified percentage of that number.","pos":[11050,11123]},{"pos":[11129,11135],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[11184,11194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[11198,11207]},{"content":"Description","pos":[11211,11222]},{"content":"amount","pos":[11286,11292]},{"content":"The original number.","pos":[11299,11319]},{"content":"percentage","pos":[11330,11340]},{"content":"The percentage supplement.","pos":[11343,11369]},{"pos":[11377,11389],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[11391,11458],"content":"The number that is equal to ((*amount *× <bpt id=\"p1\">*</bpt>percentage<ept id=\"p1\">*</ept>) + <bpt id=\"p2\">*</bpt>amount<ept id=\"p2\">*</ept>).","source":"The number that is equal to ((*amount *× *percentage*) + *amount*)."},{"pos":[11464,11471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[11568,11570],"content":"pv","linkify":"pv","nodes":[{"content":"pv","pos":[0,2]}]},{"content":"Calculates the present value of an annuity, where an amount is received over multiple periods and the interest rate is deducted for each period.","pos":[11575,11719]},{"pos":[11725,11731],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[11789,11799],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[11803,11812]},{"content":"Description","pos":[11815,11826]},{"content":"amount","pos":[12011,12017]},{"content":"The amount that is paid during each period.","pos":[12023,12066]},{"content":"interest","pos":[12115,12123]},{"content":"The interest rate.","pos":[12127,12145]},{"content":"life","pos":[12219,12223]},{"pos":[12231,12318],"content":"The number of times that the value that is specified by the <bpt id=\"p1\">*</bpt>amount<ept id=\"p1\">*</ept> parameter is paid.","source":"The number of times that the value that is specified by the *amount* parameter is paid."},{"pos":[12326,12338],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The current value of an annuity.","pos":[12340,12372]},{"pos":[12378,12385],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[12439,12443],"content":"rate","linkify":"rate","nodes":[{"content":"rate","pos":[0,4]}]},{"content":"Calculates the interest that is required for the current investment value to attain the future value over the specified number of periods.","pos":[12444,12582]},{"pos":[12588,12594],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[12669,12679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[12683,12692]},{"content":"Description","pos":[12702,12713]},{"content":"<ph id=\"ph1\">\\_</ph>future<ph id=\"ph2\">\\_</ph>value","pos":[12827,12842],"source":"\\_future\\_value"},{"content":"The future value of the investment.","pos":[12846,12881]},{"content":"<ph id=\"ph1\">\\_</ph>current<ph id=\"ph2\">\\_</ph>value","pos":[12899,12915],"source":"\\_current\\_value"},{"content":"The current value of the investment.","pos":[12918,12954]},{"content":"<ph id=\"ph1\">\\_</ph>terms","pos":[12971,12978],"source":"\\_terms"},{"content":"The number of periods that the investment spans.","pos":[12990,13038]},{"pos":[13046,13058],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The calculated interest rate.","pos":[13060,13089]},{"pos":[13095,13102],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[13156,13159],"content":"sln","linkify":"sln","nodes":[{"content":"sln","pos":[0,3]}]},{"content":"Retrieves the constant depreciation amount for the specified asset for each depreciation period.","pos":[13165,13261]},{"pos":[13267,13273],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[13328,13338],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[13342,13351]},{"content":"Description","pos":[13354,13365]},{"content":"price","pos":[13488,13493]},{"content":"The purchase price of the asset.","pos":[13500,13532]},{"content":"scrap","pos":[13561,13566]},{"content":"The scrap value of the asset.","pos":[13573,13602]},{"content":"life","pos":[13634,13638]},{"content":"The number of periods in the expected life of the asset.","pos":[13646,13702]},{"pos":[13710,13722],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The depreciation amount.","pos":[13724,13748]},{"pos":[13754,13761],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13911,13914],"content":"syd","linkify":"syd","nodes":[{"content":"syd","pos":[0,3]}]},{"content":"Calculates the depreciation of an asset over a specified period.","pos":[13920,13984]},{"pos":[13990,13996],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[14067,14077],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[14081,14090]},{"content":"Description","pos":[14093,14104]},{"content":"<ph id=\"ph1\">\\_</ph>price","pos":[14225,14232],"source":"\\_price"},{"content":"The purchase price of the asset.","pos":[14237,14269]},{"content":"<ph id=\"ph1\">\\_</ph>scrap","pos":[14297,14304],"source":"\\_scrap"},{"content":"The scrap value of the asset.","pos":[14309,14338]},{"content":"<ph id=\"ph1\">\\_</ph>life","pos":[14369,14375],"source":"\\_life"},{"content":"The expected life of the asset (the number of periods).","pos":[14381,14436]},{"content":"<ph id=\"ph1\">\\_</ph>period","pos":[14441,14449],"source":"\\_period"},{"content":"The period to calculate depreciation for.","pos":[14453,14494]},{"pos":[14516,14528],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The amount of depreciation over the specified period.","pos":[14530,14583]},{"pos":[14589,14596],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"In contrast to the <bpt id=\"p1\">**</bpt>sln<ept id=\"p1\">**</ept> function, the <bpt id=\"p2\">**</bpt>syd<ept id=\"p2\">**</ept> function can allow for an accelerated depreciation of the asset.","pos":[14598,14711],"source":"In contrast to the **sln** function, the **syd** function can allow for an accelerated depreciation of the asset."},{"content":"As with the <bpt id=\"p1\">**</bpt>ddb<ept id=\"p1\">**</ept> function, this enables higher depreciation during the early periods of the life of an asset.","pos":[14712,14824],"source":" As with the **ddb** function, this enables higher depreciation during the early periods of the life of an asset."},{"pos":[14830,14837],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following examples, the periodic depreciation is calculated for an asset that has a purchase price of 10,000, a scrap value of 2,000, and a life of 5.","pos":[14839,14996]},{"content":"In comparison, <bpt id=\"p1\">**</bpt>sln(10000,2000,5)<ept id=\"p1\">**</ept> would calculate 1600.00 for each period.","pos":[14997,15074],"source":" In comparison, **sln(10000,2000,5)** would calculate 1600.00 for each period."},{"pos":[15488,15492],"content":"term","linkify":"term","nodes":[{"content":"term","pos":[0,4]}]},{"content":"Calculates the number of periods that an investment must run for.","pos":[15493,15558]},{"pos":[15564,15570],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[15638,15648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[15652,15661]},{"content":"Description","pos":[15668,15679]},{"content":"amount","pos":[15804,15810]},{"content":"The amount of the periodic investment.","pos":[15820,15858]},{"content":"interest","pos":[15880,15888]},{"content":"The interest rate for each period.","pos":[15896,15930]},{"content":"future<ph id=\"ph1\">\\_</ph>value","pos":[15956,15969],"source":"future\\_value"},{"content":"The future value that is anticipated for the investment","pos":[15972,16027]},{"pos":[16035,16047],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The number of periods that the investment must run for.","pos":[16049,16104]},{"pos":[16110,16117],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]}],"content":"---\n# required metadata\n\ntitle: X++ business run-time functions\ndescription: This topic describes the business run-time functions.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 04/04/2017\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 31281\nms.assetid: 7107cd00-ecb0-46d2-91d6-c342e4314345\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# X++ business run-time functions\n\nThis topic describes the business run-time functions.\n\nThese functions enter financial data and calculate formulas.\n\n## cTerm\nCalculates the number of periods that are required for the current investment value to yield a target value.\n\n### Syntax\n\n    real cTerm(real interest, real future_value, real current_value)\n\n### Parameters\n\n| Parameter      | Description                   |\n|----------------|-------------------------------|\n| interest       | The interest rate.            |\n| future\\_value  | The target value.             |\n| current\\_value | The current investment value. |\n\n### Return value\n\nThe number of periods that are required in order to reach *future\\_value*.\n\n### Remarks\n\nThe *current\\_value* and *future\\_value* parameters must have the same prefixed sign (plus or minus).\n\n### Example\n\n    static void cTermExample(Args _arg)\n    {\n        real r;\n        ;\n        r = cTerm(10.0, 500.00, 100.00);\n        print \"The cTerm is \" + num2Str(r, 2, 2, 1, 1);\n        pause;\n    }\n\nddb\n---\n\nCalculates the accelerated depreciation of an asset.\n\n### Syntax\n\n    real ddb(real price, real scrap, real life, int period)\n\n### Parameters\n\n| Parameter | Description                                                |\n|-----------|------------------------------------------------------------|\n| price     | The purchase price of the asset.                           |\n| scrap     | The residual value of the asset that has been written off. |\n| life      | The expected lifetime of the asset.                        |\n| period    | The period to calculate depreciation over.                 |\n\n### Return value\n\nThe depreciation of the asset.\n\n### Remarks\n\nThe book value for a specific period is equal to the purchase price minus the accumulated depreciation for previous periods:\n\n-   Book value for Period 1 = Price\n-   Book value for Period 2 = Book value for Period 1 – Depreciation for Period 1\n-   Book value for Period n = Book value for Period (n–1) – Depreciation for Period (n–1)\n\nThere are three variations for the calculation of depreciation: If Period &gt; Life:\n\n-   Depreciation = 0\n\nIf (Book value for Period n) – ((Book value for Period n) × 2 ÷ Life) &lt; Residual value:\n\n-   Depreciation = (Book value for Period n) – Residual value\n\nIn all other cases: Depreciation = (Book value for Period n) × 2 ÷ Life The **syd** and **sln** functions also calculate the depreciation of an asset. The **syd** and **ddb** functions enables higher depreciation for the earlier years, whereas **sln** calculates a linear depreciation.\n\n    ddb(12000,2000,10,1); //Returns the value 2400.\n    ddb(12000,2000,10,3); //Returns the value 1536.\n\ndg\n--\n\nCalculates the contribution ratio, which is based on the sales price and the purchase price. If the value of the *sale* parameter is **0.0**, the calculation can't be done.\n\n### Syntax\n\n    real dg(real sale, real purchase)\n\n### Parameters\n\n| Parameter | Description         |\n|-----------|---------------------|\n| sale      | The sale price.     |\n| purchase  | The purchase price. |\n\n### Return value\n\nThe contribution ratio.\n\n### Remarks\n\n    dg(1000,300); //Returns the value 0.7.\n    dg(100,30); //Returns the value 0.7.\n    dg(20000, 11000); //Returns the value 0.45.\n\nfV\n--\n\nCalculates the future value of an investment.\n\n### Syntax\n\n    real fV(real amount, real interest, real life)\n\n### Parameters\n\n| Parameter | Description                                     |\n|-----------|-------------------------------------------------|\n| amount    | The amount that was paid in during each period. |\n| interest  | The interest rate.                              |\n| life      | The number of investment periods.               |\n\n### Return value\n\nThe future value of the investment.\n\n### Remarks\n\n    fV(100,0.14,10); //Returns the value 1933.73.\n    fV(400,0.10,5); //Returns the value 2442.04.\n\nidg\n---\n\nCalculates the sale price, based on the purchase price and the contribution ratio.\n\n    real idg(real purchase, real contribution_ratio)\n\n### Parameters\n\n| Parameter           | Description             |\n|---------------------|-------------------------|\n| purchase            | The purchase price.     |\n| contribution\\_ratio | The contribution ratio. |\n\n### Return value\n\nThe sale price.\n\n### Remarks\n\nIf the contribution ratio is equal to **1.0**, the calculation can't be done. The **idg** function is the inverse of the **dg** function.\n\n    idg(300,0.7); //Returns the value 1000.\n    idg(11000,0.45); //Returns the value 20000.\n\n## intvMax\nRetrieves the number of intervals for the specified period when the period is divided into parts as specified by the *func* parameter.\n\n    int intvMax(date input_date, date ref_date, int func)\n\n### Parameters\n\n| Parameter   | Description                                                                |\n|-------------|----------------------------------------------------------------------------|\n| input\\_date | The end of the period, which must be later than the *ref\\_date* parameter. |\n| ref\\_date   | The start of the period.                                                   |\n| func        | A **IntvScale** system enumeration value that indicates the division unit. |\n\n### Remarks\n\nHere are the possible values for the *func* parameter:\n\n-   None\n-   YearMonthDay\n-   YearMonth\n-   Year\n-   MonthDay\n-   Month\n-   Day\n-   YearQuarter\n-   Quarter\n-   YearWeek\n-   Week\n-   WeekDay\n\n### Example\n\n    static void intvMaxExample()\n    {\n        date refDate = str2Date(\"4/9/2007\", 213);\n        date inputDate = str2Date(\"10/5/2007\", 213);\n        int numberOfIntervals;\n        ;\n        numberOfIntervals = intvMax(inputDate, refDate, intvScale::YearMonth);\n        print numberOfIntervals;\n        pause;\n    }\n\n## intvName\nReturns the name of the interval that is the specified number of intervals ahead of the specified date.\n\n    str intvName(date input_date, int col, enum func)\n\n### Parameters\n\n| Parameter   | Description                                                                                 |\n|-------------|---------------------------------------------------------------------------------------------|\n| input\\_date | A date in the first interval.                                                               |\n| col         | The number of intervals ahead of the date that is specified by the *input\\_date* parameter. |\n| func        | An **intvScale** enumeration value.                                                         |\n\n### Return value\n\nThe name of the interval.\n\n### Remarks\n\nFor example, if the *func* parameter is the **IntvScale::WeekDay** enumeration value, this method returns the name of the weekday. If the *func* parameter is the **IntvScale::Week** enumeration value, this method returns a string that contains the number of the week.\n\n### Example\n\n    static void intvNameExample(Args _args)\n    {\n        date refDate = 2672010;\n        str name;\n        ;\n        name = intvName(refDate, 3,  intvScale::WeekDay);\n        Global::info(strfmt(\"%1 is the output, which indicates the day of the week 3 days after 26\\7\\2010.\", name));\n    }\n    /**** Infolog display.\n    Message (09:56:55 am)\n    Thu is the output, which indicates the day of the week 3 days after 2672010.\n    ****/\n\n## intvNo\nCalculates the number of intervals between two dates when you divide the time into the specified intervals.\n\n### Syntax\n\n    int intvNo(date input_date, date ref_date, int func)\n\n### Parameters\n\n| Parameter   | Description                                    |\n|-------------|------------------------------------------------|\n| input\\_date | A date that indicates the end of the period    |\n| ref\\_date   | A date that indicates the start of the period. |\n| func        | An **intvScale** enumeration value.            |\n\n### Return value\n\nThe number of intervals between the dates that are specified by the *ref\\_date* and *input\\_date* parameters.\n\n### Example\n\n    static void intvNoExample(Args _args)\n    {\n        date inputDate = str2Date(\"1/1/2007\", 213);\n        date refDate = str2Date(\"3/1/2007\", 213);\n        int noOfIntervals;\n        ;\n        noOfIntervals = intvNo(refDate, inputDate, intvScale::Month);\n        print noOfIntervals;\n        pause;\n        //noOfIntervals now holds the difference in months between March and January (2).\n    }\n\n## intvNorm\nReturns the normalized date for the period.\n\n### Syntax\n\n    date intvNorm(date input_date, date ref_date, int func)\n\n### Parameters\n\n| Parameter   | Description                                                                                              |\n|-------------|----------------------------------------------------------------------------------------------------------|\n| input\\_date | The end of the period, which must be later than the date that is specified by the *ref\\_date* parameter. |\n| ref\\_date   | The start of the period.                                                                                 |\n| func        | An **intvScale** enumeration value that indicates the interval division unit.                            |\n\n### Return value\n\nThe normalized date for the period.\n\n### Remarks\n\nThe returned date will equal the date of the first day in the interval in which the date that is specified by the *ref\\_date* parameter exists.\n\n### Example\n\n    static void example()\n    {\n        print intvNorm(today(), today()-1, IntVScale::WeekDay);\n        pause;\n    }\n\npmt\n---\n\nCalculates the amount that must be paid every period to repay a loan.\n\n### Syntax\n\n    real pmt(real principal, real interest, real life)\n\n### Parameters\n\n| Parameter | Description                                                               |\n|-----------|---------------------------------------------------------------------------|\n| principal | The amount that was originally borrowed.                                  |\n| interest  | The interest that is applied each period to the amount that was borrowed. |\n| life      | The number of periods that the loan is repaid over.                       |\n\n### Return value\n\nThe amount that must be paid every period.\n\n### Remarks\n\nThe *life* and *interest* parameters must be expressed in the same time units. The value of the *life* parameter must be more than **0.0**.\n\n### Example\n\n    pmt(4000,0.14,4); //Returns the value 1372.82.\n    pmt(10000,0.10,20); //Returns the value 1174.60.\n\npt\n--\n\nRetrieves the sum of a number plus a specified percentage of that number.\n\n### Syntax\n\n    real pt(real amount, real percentage)\n\n### Parameters\n\n| Parameter  | Description                |\n|------------|----------------------------|\n| amount     | The original number.       |\n| percentage | The percentage supplement. |\n\n### Return value\n\nThe number that is equal to ((*amount *× *percentage*) + *amount*).\n\n### Remarks\n\n    pt(2000.0,0.10); //Returns the value 2200.0.\n    pt(20.0,0.10); //Returns the value 22.0.\n\npv\n--\n\nCalculates the present value of an annuity, where an amount is received over multiple periods and the interest rate is deducted for each period.\n\n### Syntax\n\n    real pv(real amount, real interest, real life)\n\n### Parameters\n\n| Parameter | Description                                                                             |\n|-----------|-----------------------------------------------------------------------------------------|\n| amount    | The amount that is paid during each period.                                             |\n| interest  | The interest rate.                                                                      |\n| life      | The number of times that the value that is specified by the *amount* parameter is paid. |\n\n### Return value\n\nThe current value of an annuity.\n\n### Remarks\n\n    pv(300,0.14,4); //Returns the value 874.11.\n\n## rate\nCalculates the interest that is required for the current investment value to attain the future value over the specified number of periods.\n\n### Syntax\n\n    real rate(real _future_value, real _current_value, real _terms)\n\n### Parameters\n\n| Parameter        | Description                                      |\n|------------------|--------------------------------------------------|\n| \\_future\\_value  | The future value of the investment.              |\n| \\_current\\_value | The current value of the investment.             |\n| \\_terms          | The number of periods that the investment spans. |\n\n### Return value\n\nThe calculated interest rate.\n\n### Remarks\n\n    rate(10000,1000,20); //Returns the value 0.12.\n\nsln\n---\n\nRetrieves the constant depreciation amount for the specified asset for each depreciation period.\n\n### Syntax\n\n    real sln(real price, real scrap, real life)\n\n### Parameters\n\n| Parameter | Description                                              |\n|-----------|----------------------------------------------------------|\n| price     | The purchase price of the asset.                         |\n| scrap     | The scrap value of the asset.                            |\n| life      | The number of periods in the expected life of the asset. |\n\n### Return value\n\nThe depreciation amount.\n\n### Example\n\n    static void slnExample(Args _arg)\n    {\n        real r;\n        ;\n        r = sln(100.00, 50.00, 50.00);\n        print r;\n        pause;\n    }\n\nsyd\n---\n\nCalculates the depreciation of an asset over a specified period.\n\n### Syntax\n\n    real syd(real _price, real _scrap, real _life, int _period)\n\n### Parameters\n\n| Parameter | Description                                             |\n|-----------|---------------------------------------------------------|\n| \\_price   | The purchase price of the asset.                        |\n| \\_scrap   | The scrap value of the asset.                           |\n| \\_life    | The expected life of the asset (the number of periods). |\n| \\_period  | The period to calculate depreciation for.               |\n\n### Return value\n\nThe amount of depreciation over the specified period.\n\n### Remarks\n\nIn contrast to the **sln** function, the **syd** function can allow for an accelerated depreciation of the asset. As with the **ddb** function, this enables higher depreciation during the early periods of the life of an asset.\n\n### Example\n\nIn the following examples, the periodic depreciation is calculated for an asset that has a purchase price of 10,000, a scrap value of 2,000, and a life of 5. In comparison, **sln(10000,2000,5)** would calculate 1600.00 for each period.\n\n    // Returns the value 2666.67 (for the 1st period).\n    syd(10000,2000,5,1);\n    // Returns the value 2133.33 (for the 2nd period).\n    syd(10000,2000,5,2);\n    // Returns the value 1600.00 (for the 3rd period).\n    syd(10000,2000,5,3);\n    // Returns the value 1066.67 (for the 4th period).\n    syd(10000,2000,5,4);\n    // Returns the value 533.33 (for 5th - and final- period).\n    syd(10000,2000,5,5);\n\n## term\nCalculates the number of periods that an investment must run for.\n\n### Syntax\n\n    real term(real amount, real interest, real future_value)\n\n### Parameters\n\n| Parameter     | Description                                             |\n|---------------|---------------------------------------------------------|\n| amount        | The amount of the periodic investment.                  |\n| interest      | The interest rate for each period.                      |\n| future\\_value | The future value that is anticipated for the investment |\n\n### Return value\n\nThe number of periods that the investment must run for.\n\n### Example\n\n    static void termExample(Args _args)\n    {\n        print term(400,0.08,5000);  //returns the value '9.01'.\n        print term(100,0.14,3000);  //returns the value '12.58'.\n        pause;\n    }\n\n"}