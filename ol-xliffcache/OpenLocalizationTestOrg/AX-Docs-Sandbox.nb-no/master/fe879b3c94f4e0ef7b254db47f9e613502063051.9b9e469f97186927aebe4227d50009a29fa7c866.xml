{"nodes":[{"pos":[32,68],"content":"Operator precedence | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"Operator precedence | Microsoft Docs","pos":[0,36]}]},{"pos":[82,150],"content":"This article describes operator precedence in Microsoft Dynamics AX.","needQuote":true,"needEscape":true,"nodes":[{"content":"This article describes operator precedence in Microsoft Dynamics AX.","pos":[0,68]}]},{"pos":[573,592],"content":"Operator precedence","linkify":"Operator precedence","nodes":[{"content":"Operator precedence","pos":[0,19]}]},{"content":"This article describes operator precedence in Microsoft Dynamics AX.","pos":[594,662]},{"content":"The order in which a compound expression is evaluated is important.","pos":[664,731]},{"content":"For example, (x + y / 100) gives a different result depending on whether the addition or the division is performed first.","pos":[732,853]},{"content":"You can use parentheses ( ) to explicitly tell the X++ compiler how you want an expression to be evaluated.","pos":[854,961]},{"content":"For example, (x + y)/ 100.","pos":[962,988]},{"content":"If you do not explicitly tell the compiler the order that you want operations to be performed in, the order is based on the precedence assigned to the operators.","pos":[989,1150]},{"content":"For example, the division operator has a higher precedence than the addition operator.","pos":[1151,1237]},{"content":"For x + y / 100, the compiler would evaluate y/100 first.","pos":[1238,1295]},{"content":"So, x + y / 100 is equivalent to x + (y / 100).","pos":[1296,1343]},{"content":"To make your code easy to read and maintain, be explicit.","pos":[1344,1401]},{"content":"Indicate with parentheses which operators should be evaluated first.","pos":[1402,1470]},{"pos":[1475,1503],"content":"Order of Operator Precedence","linkify":"Order of Operator Precedence","nodes":[{"content":"Order of Operator Precedence","pos":[0,28]}]},{"content":"The operators in the following table are listed in precedence order.","pos":[1504,1572]},{"content":"The higher in the table an operator appears, the higher precedence it has.","pos":[1573,1647]},{"content":"Operators with higher precedence are evaluated before operators with a lower precedence.","pos":[1648,1736]},{"content":"Note that the operator precedence of X++ is not the same as other languages, for example C<ph id=\"ph1\">\\#</ph> and Java.","pos":[1737,1839],"source":" Note that the operator precedence of X++ is not the same as other languages, for example C\\# and Java."},{"content":"Operators in precedence order","pos":[1843,1872]},{"content":"Syntax","pos":[1902,1908]},{"content":"unary operators","pos":[2047,2062]},{"content":"- ~ !","pos":[2106,2111]},{"content":"multiplicative, shift, bitwise AND, bitwise exclusive OR","pos":[2149,2205]},{"content":"<ph id=\"ph1\">\\*</ph> / % DIV <ph id=\"ph2\">&amp;lt;</ph><ph id=\"ph3\">&amp;lt;</ph> <ph id=\"ph4\">&amp;gt;</ph><ph id=\"ph5\">&amp;gt;</ph> &amp; ^","pos":[2208,2240],"source":"\\* / % DIV &lt;&lt; &gt;&gt; & ^"},{"content":"additive, bitwise inclusive OR","pos":[2251,2281]},{"content":"+ -","pos":[2310,2313]},{"content":"relational, equality","pos":[2353,2373]},{"content":"<ph id=\"ph1\">&amp;lt;</ph> <ph id=\"ph2\">&amp;lt;</ph>= == != <ph id=\"ph3\">&amp;gt;</ph> <ph id=\"ph4\">&amp;gt;</ph>= like as is","pos":[2412,2450],"source":"&lt; &lt;= == != &gt; &gt;= like as is"},{"content":"logical operators (AND, OR)","pos":[2455,2482]},{"content":"conditional","pos":[2557,2568]},{"content":"?","pos":[2616,2617]},{"content":":","pos":[2618,2619]},{"content":"Operators on the same line have equal precedence.","pos":[2658,2707]},{"content":"If there is more than one of these operators in an expression, the expression is evaluated from left to right unless assignment operators are used (these are evaluated from right to left).For example, &amp;&amp; (logical AND) and || (logical OR) have the same precedence and are evaluated from left to right.","pos":[2708,3008],"source":" If there is more than one of these operators in an expression, the expression is evaluated from left to right unless assignment operators are used (these are evaluated from right to left).For example, && (logical AND) and || (logical OR) have the same precedence and are evaluated from left to right."},{"content":"This means that:0&amp;&amp;0||1 == 1, and 1||0&amp;&amp;0 == 0","pos":[3009,3055],"source":" This means that:0&&0||1 == 1, and 1||0&&0 == 0"},{"pos":[3060,3068],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3069,3175],"content":"<bpt id=\"p1\">[</bpt>Assignment Operators<ept id=\"p1\">](http://msdn.microsoft.com/library/d4e86b9c-be82-4f19-ad86-7722344a05f3(AX.60).aspx)</ept>","source":"[Assignment Operators](http://msdn.microsoft.com/library/d4e86b9c-be82-4f19-ad86-7722344a05f3(AX.60).aspx)"},{"pos":[3177,3283],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](http://msdn.microsoft.com/library/cffbc613-3875-4520-9dea-046dc99aab99(AX.60).aspx)</ept>","source":"[Arithmetic Operators](http://msdn.microsoft.com/library/cffbc613-3875-4520-9dea-046dc99aab99(AX.60).aspx)"},{"pos":[3285,3391],"content":"<bpt id=\"p1\">[</bpt>Relational Operators<ept id=\"p1\">](http://msdn.microsoft.com/library/702af366-4d46-445e-bd4b-722c9845199f(AX.60).aspx)</ept>","source":"[Relational Operators](http://msdn.microsoft.com/library/702af366-4d46-445e-bd4b-722c9845199f(AX.60).aspx)"}],"content":"---\n# required metadata\n\ntitle: Operator precedence | Microsoft Docs\ndescription: This article describes operator precedence in Microsoft Dynamics AX.\nauthor: pvillads\nmanager: AnnBe\nms.date: 2015-09-14 12:26:12\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: annbe\nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 6174\nms.assetid: 76cc114c-9fb1-41ee-ab72-a571f3af3cc0\nms.region: Global\n# ms.industry: \nms.author: pvillads\n\n---\n\n# Operator precedence\n\nThis article describes operator precedence in Microsoft Dynamics AX.\n\nThe order in which a compound expression is evaluated is important. For example, (x + y / 100) gives a different result depending on whether the addition or the division is performed first. You can use parentheses ( ) to explicitly tell the X++ compiler how you want an expression to be evaluated. For example, (x + y)/ 100. If you do not explicitly tell the compiler the order that you want operations to be performed in, the order is based on the precedence assigned to the operators. For example, the division operator has a higher precedence than the addition operator. For x + y / 100, the compiler would evaluate y/100 first. So, x + y / 100 is equivalent to x + (y / 100). To make your code easy to read and maintain, be explicit. Indicate with parentheses which operators should be evaluated first.\n\n## Order of Operator Precedence\nThe operators in the following table are listed in precedence order. The higher in the table an operator appears, the higher precedence it has. Operators with higher precedence are evaluated before operators with a lower precedence. Note that the operator precedence of X++ is not the same as other languages, for example C\\# and Java.\n\n| Operators in precedence order                            | Syntax                                 |\n|----------------------------------------------------------|----------------------------------------|\n| unary operators                                          | - ~ !                                  |\n| multiplicative, shift, bitwise AND, bitwise exclusive OR | \\* / % DIV &lt;&lt; &gt;&gt; & ^       |\n| additive, bitwise inclusive OR                           | + - |                                  |\n| relational, equality                                     | &lt; &lt;= == != &gt; &gt;= like as is |\n| logical operators (AND, OR)                              | && ||                                  |\n| conditional                                              | ? :                                    |\n\nOperators on the same line have equal precedence. If there is more than one of these operators in an expression, the expression is evaluated from left to right unless assignment operators are used (these are evaluated from right to left).For example, && (logical AND) and || (logical OR) have the same precedence and are evaluated from left to right. This means that:0&&0||1 == 1, and 1||0&&0 == 0\n\n## See also\n[Assignment Operators](http://msdn.microsoft.com/library/d4e86b9c-be82-4f19-ad86-7722344a05f3(AX.60).aspx)\n\n[Arithmetic Operators](http://msdn.microsoft.com/library/cffbc613-3875-4520-9dea-046dc99aab99(AX.60).aspx)\n\n[Relational Operators](http://msdn.microsoft.com/library/702af366-4d46-445e-bd4b-722c9845199f(AX.60).aspx)\n\n\n\n"}