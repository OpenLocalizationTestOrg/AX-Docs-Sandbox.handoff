{"nodes":[{"pos":[32,65],"content":"X++ reflection run-time functions","needQuote":true,"needEscape":true,"nodes":[{"content":"X++ reflection run-time functions","pos":[0,33]}]},{"pos":[79,133],"content":"This wiki describes the reflection run-time functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"This wiki describes the reflection run-time functions.","pos":[0,54]}]},{"pos":[638,671],"content":"X++ reflection run-time functions","linkify":"X++ reflection run-time functions","nodes":[{"content":"X++ reflection run-time functions","pos":[0,33]}]},{"content":"This wiki describes the reflection run-time functions.","pos":[673,727]},{"pos":[729,739],"content":"classIdGet","linkify":"classIdGet","nodes":[{"content":"classIdGet","pos":[0,10]}]},{"content":"Retrieves the numeric identifier (the class ID) of the class that the object that is initialized belongs to.","pos":[752,860]},{"pos":[900,910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[914,923]},{"content":"Description","pos":[926,937]},{"content":"object","pos":[1018,1024]},{"content":"The object to get the class ID for.","pos":[1030,1065]},{"pos":[1073,1085],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The class ID of the specified object.","pos":[1087,1124]},{"pos":[1130,1137],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1339,1344],"content":"dimOf","linkify":"dimOf","nodes":[{"content":"dimOf","pos":[0,5]}]},{"content":"Retrieves the number of index elements that space has been allocated for in an X++ array.","pos":[1345,1434]},{"pos":[1471,1481],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1485,1494]},{"content":"Description","pos":[1497,1508]},{"content":"object","pos":[1609,1615]},{"content":"The array to determine the dimension size of.","pos":[1621,1666]},{"pos":[1674,1686],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[1688,1801],"content":"If the value of the <bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> parameter is an array, the number of elements in the array; otherwise, <bpt id=\"p2\">**</bpt>0<ept id=\"p2\">**</ept> (zero).","source":"If the value of the *object* parameter is an array, the number of elements in the array; otherwise, **0** (zero)."},{"pos":[1807,1814],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1816,1921],"content":"The <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function is intended for X++ arrays that are declared as the following X++ primitive types:","source":"The **dimOf** function is intended for X++ arrays that are declared as the following X++ primitive types:"},{"content":"boolean","pos":[1927,1934]},{"content":"date","pos":[1939,1943]},{"content":"int","pos":[1948,1951]},{"content":"int64","pos":[1956,1961]},{"content":"real","pos":[1966,1970]},{"content":"utcDateTime","pos":[1975,1986]},{"content":"An example is <bpt id=\"p1\">**</bpt>int iAmounts<ph id=\"ph1\">\\[</ph>6<ph id=\"ph2\">\\]</ph>;<ept id=\"p1\">**</ept>.","pos":[1988,2025],"source":"An example is **int iAmounts\\[6\\];**."},{"content":"Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as <bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept>).","pos":[2026,2190],"source":" Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as **int**)."},{"content":"The <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function doesn't accept arrays of all X++ primitive types.","pos":[2191,2263],"source":" The **dimOf** function doesn't accept arrays of all X++ primitive types."},{"content":"Here are the array types that the <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function doesn't accept:","pos":[2264,2332],"source":" Here are the array types that the **dimOf** function doesn't accept:"},{"pos":[2338,2345],"content":"<bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept>","source":"**str**"},{"pos":[2350,2363],"content":"<bpt id=\"p1\">**</bpt>container<ept id=\"p1\">**</ept>","source":"**container**"},{"pos":[2368,2379],"content":"<bpt id=\"p1\">**</bpt>anytype<ept id=\"p1\">**</ept>","source":"**anytype**"},{"content":"Arrays of class objects","pos":[2384,2407]},{"pos":[2412,2444],"content":"Instances of the <bpt id=\"p1\">**</bpt>Array<ept id=\"p1\">**</ept> class","source":"Instances of the **Array** class"},{"pos":[2450,2457],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5387,5399],"content":"fieldId2Name","linkify":"fieldId2Name","nodes":[{"content":"fieldId2Name","pos":[0,12]}]},{"content":"Retrieves a string that represents the name of the field that is specified by a table ID number and a field ID number.","pos":[5400,5518]},{"pos":[5572,5582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[5586,5595]},{"content":"Description","pos":[5598,5609]},{"content":"tableid","pos":[5822,5829]},{"content":"The ID number of the table.","pos":[5834,5861]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[5862,5935],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldid","pos":[5940,5947]},{"content":"The ID number of the field.","pos":[5952,5979]},{"pos":[6061,6073],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the field.","pos":[6075,6097]},{"pos":[6103,6110],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6112,6196],"content":"To return a printable version of the field name, use the <bpt id=\"p1\">**</bpt>fieldId2PName<ept id=\"p1\">**</ept> function.","source":"To return a printable version of the field name, use the **fieldId2PName** function."},{"pos":[6202,6209],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6211,6329],"content":"The following example sets <bpt id=\"p1\">**</bpt>fn<ept id=\"p1\">**</ept> to the name of the field in the Customer (CustGroup) table that has a field ID of 7.","source":"The following example sets **fn** to the name of the field in the Customer (CustGroup) table that has a field ID of 7."},{"pos":[6473,6486],"content":"fieldId2PName","linkify":"fieldId2PName","nodes":[{"content":"fieldId2PName","pos":[0,13]}]},{"content":"Retrieves the printable name of the field that is specified by a table ID number and a field ID number.","pos":[6487,6590]},{"pos":[6645,6655],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[6659,6668]},{"content":"Description","pos":[6671,6682]},{"content":"tableid","pos":[6895,6902]},{"content":"The ID number of the table.","pos":[6907,6934]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[6935,7008],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldid","pos":[7013,7020]},{"content":"The ID number of the field.","pos":[7025,7052]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>fieldName2Id<ept id=\"p2\">**</ept> function to specify the ID of a field.","pos":[7053,7126],"source":"**Note:** Use the **fieldName2Id** function to specify the ID of a field."},{"pos":[7134,7146],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the field.","pos":[7148,7170]},{"pos":[7176,7183],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7513,7525],"content":"fieldName2Id","linkify":"fieldName2Id","nodes":[{"content":"fieldName2Id","pos":[0,12]}]},{"content":"Retrieves the field ID of the table field that is specified by a table ID number and a field ID number.","pos":[7526,7629]},{"pos":[7685,7695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[7699,7708]},{"content":"Description","pos":[7711,7722]},{"content":"tableid","pos":[7935,7942]},{"content":"The ID number of the table.","pos":[7947,7974]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[7975,8048],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldname","pos":[8053,8062]},{"content":"The name of the field.","pos":[8065,8087]},{"pos":[8174,8186],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[8188,8270],"content":"The ID of the field that is specified by the <bpt id=\"p1\">*</bpt>tableid<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>fieldname<ept id=\"p2\">*</ept> parameters.","source":"The ID of the field that is specified by the *tableid* and *fieldname* parameters."},{"pos":[8276,8283],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8525,8537],"content":"indexId2Name","linkify":"indexId2Name","nodes":[{"content":"indexId2Name","pos":[0,12]}]},{"content":"Retrieves the name of an index.","pos":[8538,8569]},{"pos":[8623,8633],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[8637,8646]},{"content":"Description","pos":[8649,8660]},{"content":"tableid","pos":[8763,8770]},{"content":"The ID of the table that the index belongs to.","pos":[8775,8821]},{"content":"indexid","pos":[8826,8833]},{"content":"The ID of the index.","pos":[8838,8858]},{"pos":[8892,8904],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the index.","pos":[8906,8928]},{"pos":[8934,8941],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9268,9280],"content":"indexName2Id","linkify":"indexName2Id","nodes":[{"content":"indexName2Id","pos":[0,12]}]},{"content":"Retrieves the ID of an index.","pos":[9281,9310]},{"pos":[9366,9376],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[9380,9389]},{"content":"Description","pos":[9392,9403]},{"content":"tableid","pos":[9506,9513]},{"content":"The ID of the table that the index belongs to.","pos":[9518,9564]},{"content":"indexname","pos":[9569,9578]},{"content":"The name of the index.","pos":[9581,9603]},{"pos":[9635,9647],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The ID of the index.","pos":[9649,9669]},{"pos":[9675,9682],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9976,10000],"content":"refPrintAll (no content)","linkify":"refPrintAll (no content)","nodes":[{"content":"refPrintAll (no content)","pos":[0,24]}]},{"content":"Summary","pos":[10001,10008]},{"pos":[10075,10085],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[10089,10098]},{"content":"Description","pos":[10101,10112]},{"content":"object","pos":[10145,10151]},{"content":"Description","pos":[10157,10168]},{"content":"filename","pos":[10173,10181]},{"content":"Description","pos":[10185,10196]},{"content":"title","pos":[10201,10206]},{"content":"Description","pos":[10213,10224]},{"pos":[10231,10243],"content":"tableId2Name","linkify":"tableId2Name","nodes":[{"content":"tableId2Name","pos":[0,12]}]},{"content":"Retrieves a string that contains the name of a table.","pos":[10244,10297]},{"pos":[10339,10349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[10353,10362]},{"content":"Description","pos":[10365,10376]},{"content":"<ph id=\"ph1\">\\_</ph>tableid","pos":[10427,10436],"source":"\\_tableid"},{"content":"The ID of the table.","pos":[10439,10459]},{"pos":[10467,10479],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the table.","pos":[10481,10503]},{"pos":[10509,10516],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11101,11114],"content":"tableId2PName","linkify":"tableId2PName","nodes":[{"content":"tableId2PName","pos":[0,13]}]},{"content":"Retrieves a string that contains the printable name (the label) of a table.","pos":[11115,11190]},{"pos":[11233,11243],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[11247,11256]},{"content":"Description","pos":[11259,11270]},{"content":"<ph id=\"ph1\">\\_</ph>fieldid","pos":[11321,11330],"source":"\\_fieldid"},{"content":"The ID of the table.","pos":[11333,11353]},{"pos":[11361,11373],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The label of the table.","pos":[11375,11398]},{"pos":[11404,11411],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11996,12008],"content":"tableName2Id","linkify":"tableName2Id","nodes":[{"content":"tableName2Id","pos":[0,12]}]},{"content":"Retrieves the ID of a table.","pos":[12009,12037]},{"pos":[12076,12086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[12090,12099]},{"content":"Description","pos":[12102,12113]},{"content":"<ph id=\"ph1\">\\_</ph>name","pos":[12168,12174],"source":"\\_name"},{"content":"The name of the table.","pos":[12180,12202]},{"pos":[12210,12222],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The ID of the table.","pos":[12224,12244]},{"pos":[12250,12257],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12850,12856],"content":"typeOf","linkify":"typeOf","nodes":[{"content":"typeOf","pos":[0,6]}]},{"content":"Retrieves the type of an element.","pos":[12857,12890]},{"pos":[12930,12940],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[12944,12953]},{"content":"Description","pos":[12956,12967]},{"content":"<ph id=\"ph1\">\\_</ph>object","pos":[13048,13056],"source":"\\_object"},{"content":"The element to return the type for.","pos":[13060,13095]},{"pos":[13103,13115],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[13117,13154],"content":"A <bpt id=\"p1\">**</bpt>Types<ept id=\"p1\">**</ept> system enumeration value.","source":"A **Types** system enumeration value."},{"pos":[13160,13167],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13169,13298],"content":"The following example tests whether the first element in a container, <bpt id=\"p1\">**</bpt>c<ept id=\"p1\">**</ept>, is another container that contains a single integer.","source":"The following example tests whether the first element in a container, **c**, is another container that contains a single integer."}],"content":"---\n# required metadata\n\ntitle: X++ reflection run-time functions\ndescription: This wiki describes the reflection run-time functions.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 2016-02-04 22 - 13 - 50\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: 61\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 31381\nms.assetid: 3191a9cc-d9d1-4b4f-acbc-2b9f044470e7\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.dyn365.ops.intro: Feb-16\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# X++ reflection run-time functions\n\nThis wiki describes the reflection run-time functions.\n\nclassIdGet\n----------\n\nRetrieves the numeric identifier (the class ID) of the class that the object that is initialized belongs to.\n\n    int classIdGet(class object)\n\n### Parameters\n\n| Parameter | Description                         |\n|-----------|-------------------------------------|\n| object    | The object to get the class ID for. |\n\n### Return value\n\nThe class ID of the specified object.\n\n### Example\n\n    static void classIdGetExample(Args _args)\n    {\n            int i;\n            WorkTimeCheck w;\n\n            i = classIdGet(w);\n            print \"Class ID for object is \" + int2Str(i);\n    }\n\n## dimOf\nRetrieves the number of index elements that space has been allocated for in an X++ array.\n\n    int dimOf(anytype object)\n\n### Parameters\n\n| Parameter | Description                                   |\n|-----------|-----------------------------------------------|\n| object    | The array to determine the dimension size of. |\n\n### Return value\n\nIf the value of the *object* parameter is an array, the number of elements in the array; otherwise, **0** (zero).\n\n### Remarks\n\nThe **dimOf** function is intended for X++ arrays that are declared as the following X++ primitive types:\n\n-   boolean\n-   date\n-   int\n-   int64\n-   real\n-   utcDateTime\n\nAn example is **int iAmounts\\[6\\];**. Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as **int**). The **dimOf** function doesn't accept arrays of all X++ primitive types. Here are the array types that the **dimOf** function doesn't accept:\n\n-   **str**\n-   **container**\n-   **anytype**\n-   Arrays of class objects\n-   Instances of the **Array** class\n\n### Example\n\n    static void JobDimOfArrays(Args _args)\n    {\n            int iAmounts[20], iCounts[];\n            ABCModel enumAbcModel[22]; // Enum\n            ABCModelType exdtAbcModelType[24]; // Extended data type\n            anytype anyThings[26];\n            str sNames[28];\n            Array myArrayObj; // Class\n\n            info(\"Start of job.\");\n            info(\"--(Next, normal int array, dimOf() accepts it.)\");\n            info(int2Str(dimOf(iAmounts)));\n            info(\"--(Next, normal enum array, dimOf() accepts it.)\");\n            info(int2Str(dimOf(enumAbcModel)));\n            info(\"--(Next, normal extended data type array (based on enum), dimOf() accepts it.)\");\n            info(int2Str(dimOf(exdtAbcModelType)));\n            info(\"--(Next, dynamic int array, dimension not yet set.)\");\n            info(int2Str(dimOf(iCounts)));\n            info(\"--(Next, dynamic int array, after dimension established.)\");\n            \n            iCounts[13] = 13;\n            info(int2Str(dimOf(iCounts)));\n            info(\" == == == == == (Next, array types that dimOf() does not support.)\");\n            info(\"--(Next, normal anytype array, dimOf() always returns 0.)\");\n            info(int2Str(dimOf(anyThings)));\n            info(\"--(Next, an instance of class X++ Array, dimOf() always returns 0.)\");\n\n            myArrayObj = new Array(Types::Integer);\n            myArrayObj.value(1,501);\n            info(int2Str(dimOf(myArrayObj)));\n            info(\"--(Next, the lastIndex method provides size information about Array instances.)\");\n            info(int2Str(myArrayObj.lastIndex()));\n            info(\"--(Next, normal str array, dimOf() does not accept it, job is halted.)\");\n            info(int2Str(dimOf(sNames)));\n            info(\"End of job.\");\n\n    }\n    /************  Actual Infolog output\n    Message (11:10:06 am)\n    Start of job.\n    --(Next, normal int array, dimOf() accepts it.)\n    20\n    --(Next, normal enum array, dimOf() accepts it.)\n    22\n    --(Next, normal extended data type array (based on enum), dimOf() accepts it.)\n    24\n    --(Next, dynamic int array, dimension not yet set.)\n    0\n    --(Next, dynamic int array, after dimension established.)\n    16\n    == == == == == (Next, array types that dimOf() does not support.)\n    --(Next, normal anytype array, dimOf() always returns 0.)\n    0\n    --(Next, an instance of class X++ Array, dimOf() always returns 0.)\n    0\n    --(Next, the lastIndex method provides size information about Array instances.)\n    1\n    --(Next, normal str array, dimOf() does not accept it, job is halted.)\n    Error executing code: Illegal operation on this type of array. (C)JobsJobDimOfArrays - line 41\n    ************/\n    /***********  Pop-up error dialog box\n    \"Internal error number 25 in script.\"\n    This error is caused by the code line...\n    info(int2Str(dimOf(iCounts)));\n    ...before iCounts was assigned at any index.\n    ***********/\n\n## fieldId2Name\nRetrieves a string that represents the name of the field that is specified by a table ID number and a field ID number.\n\n    str fieldId2Name(int tableid, int fieldid)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldid   | The ID number of the field.                                                                           |\n\n### Return value\n\nThe name of the field.\n\n### Remarks\n\nTo return a printable version of the field name, use the **fieldId2PName** function.\n\n### Example\n\nThe following example sets **fn** to the name of the field in the Customer (CustGroup) table that has a field ID of 7.\n\n    static void fieldId2NameExample(Args _arg)\n    {\n            str fn;\n            fn = fieldId2Name(tableName2Id(\"Customer\"),7);\n    }\n\n## fieldId2PName\nRetrieves the printable name of the field that is specified by a table ID number and a field ID number.\n\n    str fieldId2PName(int tableid, int fieldid)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldid   | The ID number of the field. **Note:** Use the **fieldName2Id** function to specify the ID of a field. |\n\n### Return value\n\nThe name of the field.\n\n### Example\n\n    static void fieldId2PNameExample(Args _arg)\n    {\n            str name;\n            tableid _tableId;\n            fieldid _fieldid;\n\n            _tableId = tableName2Id(\"Address\");\n            _fieldId = fieldName2Id(_tableId, \"Name\");\n            name = fieldId2PName(_tableId, _fieldid);\n            print name;\n    }\n\n## fieldName2Id\nRetrieves the field ID of the table field that is specified by a table ID number and a field ID number.\n\n    int fieldName2Id(int tableid, str fieldname)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldname | The name of the field.                                                                                |\n\n### Return value\n\nThe ID of the field that is specified by the *tableid* and *fieldname* parameters.\n\n### Example\n\n    static void fieldName2IdExample(Args _arg)\n    {\n            int id;\n\n            id = fieldName2Id(tableName2Id(\"Address\"), \"Name\");\n            // Returns 6. Name is the 6th field in the Address table.\n            print id;\n    }\n\n## indexId2Name\nRetrieves the name of an index.\n\n    str indexId2Name(int tableid, int indexid)\n\n### Parameters\n\n| Parameter | Description                                    |\n|-----------|------------------------------------------------|\n| tableid   | The ID of the table that the index belongs to. |\n| indexid   | The ID of the index.                           |\n\n### Return value\n\nThe name of the index.\n\n### Example\n\n    static void indexId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n            indexid idx;\n\n            id  = tableName2Id(\"Address\");\n            idx = indexName2Id(id, \"AddrIdx\");\n            s = indexId2Name(id, idx);\n            print \"The result of calling indexId2Name is \" + s;\n    }\n\n## indexName2Id\nRetrieves the ID of an index.\n\n    int indexName2Id(int tableid, str indexname)\n\n### Parameters\n\n| Parameter | Description                                    |\n|-----------|------------------------------------------------|\n| tableid   | The ID of the table that the index belongs to. |\n| indexname | The name of the index.                         |\n\n### Return value\n\nThe ID of the index.\n\n### Example\n\n    static void indexName2IdExample(Args _arg)\n    {\n            indexid idx;\n            tableid id;\n\n            id  = tableName2Id(\"Address\");\n            idx = indexName2Id(id, \"AddrIdx\");\n            print \"Index ID for index name AddrIdx of table Address is \" + int2Str(idx);\n    }\n\n## refPrintAll (no content)\nSummary\n\n    void refPrintAll(class object, str filename, str title)\n\n### Parameters\n\n| Parameter | Description |\n|-----------|-------------|\n| object    | Description |\n| filename  | Description |\n| title     | Description |\n\n## tableId2Name\nRetrieves a string that contains the name of a table.\n\n    str tableId2Name(int _tableid)\n\n### Parameters\n\n| Parameter | Description          |\n|-----------|----------------------|\n| \\_tableid | The ID of the table. |\n\n### Return value\n\nThe name of the table.\n\n### Example\n\n    static void tableId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for table name Address.\n            id = tableName2Id(\"Address\");\n            print \"ID for table name Address is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## tableId2PName\nRetrieves a string that contains the printable name (the label) of a table.\n\n    str tableId2PName(int _fieldid)\n\n### Parameters\n\n| Parameter | Description          |\n|-----------|----------------------|\n| \\_fieldid | The ID of the table. |\n\n### Return value\n\nThe label of the table.\n\n### Example\n\n    static void tableId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for table name Address.\n            id = tableName2Id(\"Address\");\n            print \"ID for table name Address is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## tableName2Id\nRetrieves the ID of a table.\n\n    int tableName2Id(str _name)\n\n### Parameters\n\n| Parameter | Description            |\n|-----------|------------------------|\n| \\_name    | The name of the table. |\n\n### Return value\n\nThe ID of the table.\n\n### Example\n\n    static void tableName2IdExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for the Address table name.\n            id = tableName2Id(\"Address\");\n            print \"ID for the Address table name is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## typeOf\nRetrieves the type of an element.\n\n    enum typeOf(anytype _object)\n\n### Parameters\n\n| Parameter | Description                         |\n|-----------|-------------------------------------|\n| \\_object  | The element to return the type for. |\n\n### Return value\n\nA **Types** system enumeration value.\n\n### Example\n\nThe following example tests whether the first element in a container, **c**, is another container that contains a single integer.\n\n    if(typeof(conpeek(c, 1)) != Types::Container ||\n    conlen(conpeek(c, 1)) != 1 ||\n    typeof(conpeek(conpeek(c, 1), 1)) != Types::Integer)\n    {\n            // More code.\n    }\n\n"}