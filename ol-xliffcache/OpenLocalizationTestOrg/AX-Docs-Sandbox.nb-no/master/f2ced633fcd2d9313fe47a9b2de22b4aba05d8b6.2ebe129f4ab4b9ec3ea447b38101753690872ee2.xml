{"nodes":[{"pos":[32,65],"content":"X++ reflection run-time functions","needQuote":true,"needEscape":true,"nodes":[{"content":"X++ reflection run-time functions","pos":[0,33]}]},{"pos":[79,134],"content":"This topic describes the reflection run-time functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"This topic describes the reflection run-time functions.","pos":[0,55]}]},{"pos":[630,663],"content":"X++ reflection run-time functions","linkify":"X++ reflection run-time functions","nodes":[{"content":"X++ reflection run-time functions","pos":[0,33]}]},{"content":"This topic describes the reflection run-time functions.","pos":[665,720]},{"pos":[722,732],"content":"classIdGet","linkify":"classIdGet","nodes":[{"content":"classIdGet","pos":[0,10]}]},{"content":"Retrieves the numeric identifier (the class ID) of the class that the object that is initialized belongs to.","pos":[745,853]},{"pos":[893,903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[907,916]},{"content":"Description","pos":[919,930]},{"content":"object","pos":[1011,1017]},{"content":"The object to get the class ID for.","pos":[1023,1058]},{"pos":[1066,1078],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The class ID of the specified object.","pos":[1080,1117]},{"pos":[1123,1130],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1332,1337],"content":"dimOf","linkify":"dimOf","nodes":[{"content":"dimOf","pos":[0,5]}]},{"content":"Retrieves the number of index elements that space has been allocated for in an X++ array.","pos":[1338,1427]},{"pos":[1464,1474],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[1478,1487]},{"content":"Description","pos":[1490,1501]},{"content":"object","pos":[1602,1608]},{"content":"The array to determine the dimension size of.","pos":[1614,1659]},{"pos":[1667,1679],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[1681,1794],"content":"If the value of the <bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> parameter is an array, the number of elements in the array; otherwise, <bpt id=\"p2\">**</bpt>0<ept id=\"p2\">**</ept> (zero).","source":"If the value of the *object* parameter is an array, the number of elements in the array; otherwise, **0** (zero)."},{"pos":[1800,1807],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1809,1914],"content":"The <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function is intended for X++ arrays that are declared as the following X++ primitive types:","source":"The **dimOf** function is intended for X++ arrays that are declared as the following X++ primitive types:"},{"content":"boolean","pos":[1920,1927]},{"content":"date","pos":[1932,1936]},{"content":"int","pos":[1941,1944]},{"content":"int64","pos":[1949,1954]},{"content":"real","pos":[1959,1963]},{"content":"utcDateTime","pos":[1968,1979]},{"content":"An example is <bpt id=\"p1\">**</bpt>int iAmounts<ph id=\"ph1\">\\[</ph>6<ph id=\"ph2\">\\]</ph>;<ept id=\"p1\">**</ept>.","pos":[1981,2018],"source":"An example is **int iAmounts\\[6\\];**."},{"content":"Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as <bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept>).","pos":[2019,2183],"source":" Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as **int**)."},{"content":"The <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function doesn't accept arrays of all X++ primitive types.","pos":[2184,2256],"source":" The **dimOf** function doesn't accept arrays of all X++ primitive types."},{"content":"Here are the array types that the <bpt id=\"p1\">**</bpt>dimOf<ept id=\"p1\">**</ept> function doesn't accept:","pos":[2257,2325],"source":" Here are the array types that the **dimOf** function doesn't accept:"},{"pos":[2331,2338],"content":"<bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept>","source":"**str**"},{"pos":[2343,2356],"content":"<bpt id=\"p1\">**</bpt>container<ept id=\"p1\">**</ept>","source":"**container**"},{"pos":[2361,2372],"content":"<bpt id=\"p1\">**</bpt>anytype<ept id=\"p1\">**</ept>","source":"**anytype**"},{"content":"Arrays of class objects","pos":[2377,2400]},{"pos":[2405,2437],"content":"Instances of the <bpt id=\"p1\">**</bpt>Array<ept id=\"p1\">**</ept> class","source":"Instances of the **Array** class"},{"pos":[2443,2450],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5380,5392],"content":"fieldId2Name","linkify":"fieldId2Name","nodes":[{"content":"fieldId2Name","pos":[0,12]}]},{"content":"Retrieves a string that represents the name of the field that is specified by a table ID number and a field ID number.","pos":[5393,5511]},{"pos":[5565,5575],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[5579,5588]},{"content":"Description","pos":[5591,5602]},{"content":"tableid","pos":[5815,5822]},{"content":"The ID number of the table.","pos":[5827,5854]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[5855,5928],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldid","pos":[5933,5940]},{"content":"The ID number of the field.","pos":[5945,5972]},{"pos":[6054,6066],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the field.","pos":[6068,6090]},{"pos":[6096,6103],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[6105,6189],"content":"To return a printable version of the field name, use the <bpt id=\"p1\">**</bpt>fieldId2PName<ept id=\"p1\">**</ept> function.","source":"To return a printable version of the field name, use the **fieldId2PName** function."},{"pos":[6195,6202],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6204,6322],"content":"The following example sets <bpt id=\"p1\">**</bpt>fn<ept id=\"p1\">**</ept> to the name of the field in the Customer (CustGroup) table that has a field ID of 7.","source":"The following example sets **fn** to the name of the field in the Customer (CustGroup) table that has a field ID of 7."},{"pos":[6466,6479],"content":"fieldId2PName","linkify":"fieldId2PName","nodes":[{"content":"fieldId2PName","pos":[0,13]}]},{"content":"Retrieves the printable name of the field that is specified by a table ID number and a field ID number.","pos":[6480,6583]},{"pos":[6638,6648],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[6652,6661]},{"content":"Description","pos":[6664,6675]},{"content":"tableid","pos":[6888,6895]},{"content":"The ID number of the table.","pos":[6900,6927]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[6928,7001],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldid","pos":[7006,7013]},{"content":"The ID number of the field.","pos":[7018,7045]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>fieldName2Id<ept id=\"p2\">**</ept> function to specify the ID of a field.","pos":[7046,7119],"source":"**Note:** Use the **fieldName2Id** function to specify the ID of a field."},{"pos":[7127,7139],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the field.","pos":[7141,7163]},{"pos":[7169,7176],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7506,7518],"content":"fieldName2Id","linkify":"fieldName2Id","nodes":[{"content":"fieldName2Id","pos":[0,12]}]},{"content":"Retrieves the field ID of the table field that is specified by a table ID number and a field ID number.","pos":[7519,7622]},{"pos":[7678,7688],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[7692,7701]},{"content":"Description","pos":[7704,7715]},{"content":"tableid","pos":[7928,7935]},{"content":"The ID number of the table.","pos":[7940,7967]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Use the <bpt id=\"p2\">**</bpt>tableName2Id<ept id=\"p2\">**</ept> function to specify the ID of a table.","pos":[7968,8041],"source":"**Note:** Use the **tableName2Id** function to specify the ID of a table."},{"content":"fieldname","pos":[8046,8055]},{"content":"The name of the field.","pos":[8058,8080]},{"pos":[8167,8179],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[8181,8263],"content":"The ID of the field that is specified by the <bpt id=\"p1\">*</bpt>tableid<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>fieldname<ept id=\"p2\">*</ept> parameters.","source":"The ID of the field that is specified by the *tableid* and *fieldname* parameters."},{"pos":[8269,8276],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[8518,8530],"content":"indexId2Name","linkify":"indexId2Name","nodes":[{"content":"indexId2Name","pos":[0,12]}]},{"content":"Retrieves the name of an index.","pos":[8531,8562]},{"pos":[8616,8626],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[8630,8639]},{"content":"Description","pos":[8642,8653]},{"content":"tableid","pos":[8756,8763]},{"content":"The ID of the table that the index belongs to.","pos":[8768,8814]},{"content":"indexid","pos":[8819,8826]},{"content":"The ID of the index.","pos":[8831,8851]},{"pos":[8885,8897],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the index.","pos":[8899,8921]},{"pos":[8927,8934],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9261,9273],"content":"indexName2Id","linkify":"indexName2Id","nodes":[{"content":"indexName2Id","pos":[0,12]}]},{"content":"Retrieves the ID of an index.","pos":[9274,9303]},{"pos":[9359,9369],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[9373,9382]},{"content":"Description","pos":[9385,9396]},{"content":"tableid","pos":[9499,9506]},{"content":"The ID of the table that the index belongs to.","pos":[9511,9557]},{"content":"indexname","pos":[9562,9571]},{"content":"The name of the index.","pos":[9574,9596]},{"pos":[9628,9640],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The ID of the index.","pos":[9642,9662]},{"pos":[9668,9675],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9969,9993],"content":"refPrintAll (no content)","linkify":"refPrintAll (no content)","nodes":[{"content":"refPrintAll (no content)","pos":[0,24]}]},{"content":"Summary","pos":[9994,10001]},{"pos":[10068,10078],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[10082,10091]},{"content":"Description","pos":[10094,10105]},{"content":"object","pos":[10138,10144]},{"content":"Description","pos":[10150,10161]},{"content":"filename","pos":[10166,10174]},{"content":"Description","pos":[10178,10189]},{"content":"title","pos":[10194,10199]},{"content":"Description","pos":[10206,10217]},{"pos":[10224,10236],"content":"tableId2Name","linkify":"tableId2Name","nodes":[{"content":"tableId2Name","pos":[0,12]}]},{"content":"Retrieves a string that contains the name of a table.","pos":[10237,10290]},{"pos":[10332,10342],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[10346,10355]},{"content":"Description","pos":[10358,10369]},{"content":"<ph id=\"ph1\">\\_</ph>tableid","pos":[10420,10429],"source":"\\_tableid"},{"content":"The ID of the table.","pos":[10432,10452]},{"pos":[10460,10472],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The name of the table.","pos":[10474,10496]},{"pos":[10502,10509],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11094,11107],"content":"tableId2PName","linkify":"tableId2PName","nodes":[{"content":"tableId2PName","pos":[0,13]}]},{"content":"Retrieves a string that contains the printable name (the label) of a table.","pos":[11108,11183]},{"pos":[11226,11236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[11240,11249]},{"content":"Description","pos":[11252,11263]},{"content":"<ph id=\"ph1\">\\_</ph>fieldid","pos":[11314,11323],"source":"\\_fieldid"},{"content":"The ID of the table.","pos":[11326,11346]},{"pos":[11354,11366],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The label of the table.","pos":[11368,11391]},{"pos":[11397,11404],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[11989,12001],"content":"tableName2Id","linkify":"tableName2Id","nodes":[{"content":"tableName2Id","pos":[0,12]}]},{"content":"Retrieves the ID of a table.","pos":[12002,12030]},{"pos":[12069,12079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[12083,12092]},{"content":"Description","pos":[12095,12106]},{"content":"<ph id=\"ph1\">\\_</ph>name","pos":[12161,12167],"source":"\\_name"},{"content":"The name of the table.","pos":[12173,12195]},{"pos":[12203,12215],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The ID of the table.","pos":[12217,12237]},{"pos":[12243,12250],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[12843,12849],"content":"typeOf","linkify":"typeOf","nodes":[{"content":"typeOf","pos":[0,6]}]},{"content":"Retrieves the type of an element.","pos":[12850,12883]},{"pos":[12923,12933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[12937,12946]},{"content":"Description","pos":[12949,12960]},{"content":"<ph id=\"ph1\">\\_</ph>object","pos":[13041,13049],"source":"\\_object"},{"content":"The element to return the type for.","pos":[13053,13088]},{"pos":[13096,13108],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[13110,13147],"content":"A <bpt id=\"p1\">**</bpt>Types<ept id=\"p1\">**</ept> system enumeration value.","source":"A **Types** system enumeration value."},{"pos":[13153,13160],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[13162,13291],"content":"The following example tests whether the first element in a container, <bpt id=\"p1\">**</bpt>c<ept id=\"p1\">**</ept>, is another container that contains a single integer.","source":"The following example tests whether the first element in a container, **c**, is another container that contains a single integer."}],"content":"---\n# required metadata\n\ntitle: X++ reflection run-time functions\ndescription: This topic describes the reflection run-time functions.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 04/04/2017\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: 61\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 31381\nms.assetid: d0d4043e-5abb-42ae-bcc2-c6b678f4ef5b\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# X++ reflection run-time functions\n\nThis topic describes the reflection run-time functions.\n\nclassIdGet\n----------\n\nRetrieves the numeric identifier (the class ID) of the class that the object that is initialized belongs to.\n\n    int classIdGet(class object)\n\n### Parameters\n\n| Parameter | Description                         |\n|-----------|-------------------------------------|\n| object    | The object to get the class ID for. |\n\n### Return value\n\nThe class ID of the specified object.\n\n### Example\n\n    static void classIdGetExample(Args _args)\n    {\n            int i;\n            WorkTimeCheck w;\n\n            i = classIdGet(w);\n            print \"Class ID for object is \" + int2Str(i);\n    }\n\n## dimOf\nRetrieves the number of index elements that space has been allocated for in an X++ array.\n\n    int dimOf(anytype object)\n\n### Parameters\n\n| Parameter | Description                                   |\n|-----------|-----------------------------------------------|\n| object    | The array to determine the dimension size of. |\n\n### Return value\n\nIf the value of the *object* parameter is an array, the number of elements in the array; otherwise, **0** (zero).\n\n### Remarks\n\nThe **dimOf** function is intended for X++ arrays that are declared as the following X++ primitive types:\n\n-   boolean\n-   date\n-   int\n-   int64\n-   real\n-   utcDateTime\n\nAn example is **int iAmounts\\[6\\];**. Arrays of enumeration values and extended data types are also supported if they are ultimately based on one of the preceding primitive data types (such as **int**). The **dimOf** function doesn't accept arrays of all X++ primitive types. Here are the array types that the **dimOf** function doesn't accept:\n\n-   **str**\n-   **container**\n-   **anytype**\n-   Arrays of class objects\n-   Instances of the **Array** class\n\n### Example\n\n    static void JobDimOfArrays(Args _args)\n    {\n            int iAmounts[20], iCounts[];\n            ABCModel enumAbcModel[22]; // Enum\n            ABCModelType exdtAbcModelType[24]; // Extended data type\n            anytype anyThings[26];\n            str sNames[28];\n            Array myArrayObj; // Class\n\n            info(\"Start of job.\");\n            info(\"--(Next, normal int array, dimOf() accepts it.)\");\n            info(int2Str(dimOf(iAmounts)));\n            info(\"--(Next, normal enum array, dimOf() accepts it.)\");\n            info(int2Str(dimOf(enumAbcModel)));\n            info(\"--(Next, normal extended data type array (based on enum), dimOf() accepts it.)\");\n            info(int2Str(dimOf(exdtAbcModelType)));\n            info(\"--(Next, dynamic int array, dimension not yet set.)\");\n            info(int2Str(dimOf(iCounts)));\n            info(\"--(Next, dynamic int array, after dimension established.)\");\n            \n            iCounts[13] = 13;\n            info(int2Str(dimOf(iCounts)));\n            info(\" == == == == == (Next, array types that dimOf() does not support.)\");\n            info(\"--(Next, normal anytype array, dimOf() always returns 0.)\");\n            info(int2Str(dimOf(anyThings)));\n            info(\"--(Next, an instance of class X++ Array, dimOf() always returns 0.)\");\n\n            myArrayObj = new Array(Types::Integer);\n            myArrayObj.value(1,501);\n            info(int2Str(dimOf(myArrayObj)));\n            info(\"--(Next, the lastIndex method provides size information about Array instances.)\");\n            info(int2Str(myArrayObj.lastIndex()));\n            info(\"--(Next, normal str array, dimOf() does not accept it, job is halted.)\");\n            info(int2Str(dimOf(sNames)));\n            info(\"End of job.\");\n\n    }\n    /************  Actual Infolog output\n    Message (11:10:06 am)\n    Start of job.\n    --(Next, normal int array, dimOf() accepts it.)\n    20\n    --(Next, normal enum array, dimOf() accepts it.)\n    22\n    --(Next, normal extended data type array (based on enum), dimOf() accepts it.)\n    24\n    --(Next, dynamic int array, dimension not yet set.)\n    0\n    --(Next, dynamic int array, after dimension established.)\n    16\n    == == == == == (Next, array types that dimOf() does not support.)\n    --(Next, normal anytype array, dimOf() always returns 0.)\n    0\n    --(Next, an instance of class X++ Array, dimOf() always returns 0.)\n    0\n    --(Next, the lastIndex method provides size information about Array instances.)\n    1\n    --(Next, normal str array, dimOf() does not accept it, job is halted.)\n    Error executing code: Illegal operation on this type of array. (C)JobsJobDimOfArrays - line 41\n    ************/\n    /***********  Pop-up error dialog box\n    \"Internal error number 25 in script.\"\n    This error is caused by the code line...\n    info(int2Str(dimOf(iCounts)));\n    ...before iCounts was assigned at any index.\n    ***********/\n\n## fieldId2Name\nRetrieves a string that represents the name of the field that is specified by a table ID number and a field ID number.\n\n    str fieldId2Name(int tableid, int fieldid)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldid   | The ID number of the field.                                                                           |\n\n### Return value\n\nThe name of the field.\n\n### Remarks\n\nTo return a printable version of the field name, use the **fieldId2PName** function.\n\n### Example\n\nThe following example sets **fn** to the name of the field in the Customer (CustGroup) table that has a field ID of 7.\n\n    static void fieldId2NameExample(Args _arg)\n    {\n            str fn;\n            fn = fieldId2Name(tableName2Id(\"Customer\"),7);\n    }\n\n## fieldId2PName\nRetrieves the printable name of the field that is specified by a table ID number and a field ID number.\n\n    str fieldId2PName(int tableid, int fieldid)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldid   | The ID number of the field. **Note:** Use the **fieldName2Id** function to specify the ID of a field. |\n\n### Return value\n\nThe name of the field.\n\n### Example\n\n    static void fieldId2PNameExample(Args _arg)\n    {\n            str name;\n            tableid _tableId;\n            fieldid _fieldid;\n\n            _tableId = tableName2Id(\"Address\");\n            _fieldId = fieldName2Id(_tableId, \"Name\");\n            name = fieldId2PName(_tableId, _fieldid);\n            print name;\n    }\n\n## fieldName2Id\nRetrieves the field ID of the table field that is specified by a table ID number and a field ID number.\n\n    int fieldName2Id(int tableid, str fieldname)\n\n### Parameters\n\n| Parameter | Description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| tableid   | The ID number of the table. **Note:** Use the **tableName2Id** function to specify the ID of a table. |\n| fieldname | The name of the field.                                                                                |\n\n### Return value\n\nThe ID of the field that is specified by the *tableid* and *fieldname* parameters.\n\n### Example\n\n    static void fieldName2IdExample(Args _arg)\n    {\n            int id;\n\n            id = fieldName2Id(tableName2Id(\"Address\"), \"Name\");\n            // Returns 6. Name is the 6th field in the Address table.\n            print id;\n    }\n\n## indexId2Name\nRetrieves the name of an index.\n\n    str indexId2Name(int tableid, int indexid)\n\n### Parameters\n\n| Parameter | Description                                    |\n|-----------|------------------------------------------------|\n| tableid   | The ID of the table that the index belongs to. |\n| indexid   | The ID of the index.                           |\n\n### Return value\n\nThe name of the index.\n\n### Example\n\n    static void indexId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n            indexid idx;\n\n            id  = tableName2Id(\"Address\");\n            idx = indexName2Id(id, \"AddrIdx\");\n            s = indexId2Name(id, idx);\n            print \"The result of calling indexId2Name is \" + s;\n    }\n\n## indexName2Id\nRetrieves the ID of an index.\n\n    int indexName2Id(int tableid, str indexname)\n\n### Parameters\n\n| Parameter | Description                                    |\n|-----------|------------------------------------------------|\n| tableid   | The ID of the table that the index belongs to. |\n| indexname | The name of the index.                         |\n\n### Return value\n\nThe ID of the index.\n\n### Example\n\n    static void indexName2IdExample(Args _arg)\n    {\n            indexid idx;\n            tableid id;\n\n            id  = tableName2Id(\"Address\");\n            idx = indexName2Id(id, \"AddrIdx\");\n            print \"Index ID for index name AddrIdx of table Address is \" + int2Str(idx);\n    }\n\n## refPrintAll (no content)\nSummary\n\n    void refPrintAll(class object, str filename, str title)\n\n### Parameters\n\n| Parameter | Description |\n|-----------|-------------|\n| object    | Description |\n| filename  | Description |\n| title     | Description |\n\n## tableId2Name\nRetrieves a string that contains the name of a table.\n\n    str tableId2Name(int _tableid)\n\n### Parameters\n\n| Parameter | Description          |\n|-----------|----------------------|\n| \\_tableid | The ID of the table. |\n\n### Return value\n\nThe name of the table.\n\n### Example\n\n    static void tableId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for table name Address.\n            id = tableName2Id(\"Address\");\n            print \"ID for table name Address is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## tableId2PName\nRetrieves a string that contains the printable name (the label) of a table.\n\n    str tableId2PName(int _fieldid)\n\n### Parameters\n\n| Parameter | Description          |\n|-----------|----------------------|\n| \\_fieldid | The ID of the table. |\n\n### Return value\n\nThe label of the table.\n\n### Example\n\n    static void tableId2NameExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for table name Address.\n            id = tableName2Id(\"Address\");\n            print \"ID for table name Address is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## tableName2Id\nRetrieves the ID of a table.\n\n    int tableName2Id(str _name)\n\n### Parameters\n\n| Parameter | Description            |\n|-----------|------------------------|\n| \\_name    | The name of the table. |\n\n### Return value\n\nThe ID of the table.\n\n### Example\n\n    static void tableName2IdExample(Args _arg)\n    {\n            str s;\n            tableid id;\n\n            // Get the ID for the Address table name.\n            id = tableName2Id(\"Address\");\n            print \"ID for the Address table name is \" + int2Str(id);\n\n            // Get the name from the table ID.\n            s = tableId2Name(id);\n            print \"Name for table ID \" + int2Str(id) + \" is \" + s;\n\n            // Get the printable name from the table ID.\n            s = tableId2PName(id);\n            print \"Printable name for table ID \" + int2Str(id) + \" is \" + s;\n    }\n\n## typeOf\nRetrieves the type of an element.\n\n    enum typeOf(anytype _object)\n\n### Parameters\n\n| Parameter | Description                         |\n|-----------|-------------------------------------|\n| \\_object  | The element to return the type for. |\n\n### Return value\n\nA **Types** system enumeration value.\n\n### Example\n\nThe following example tests whether the first element in a container, **c**, is another container that contains a single integer.\n\n    if(typeof(conpeek(c, 1)) != Types::Container ||\n    conlen(conpeek(c, 1)) != 1 ||\n    typeof(conpeek(conpeek(c, 1), 1)) != Types::Integer)\n    {\n            // More code.\n    }\n\n"}