{"nodes":[{"pos":[32,57],"content":"Super types and sub types","needQuote":true,"needEscape":true,"nodes":[{"content":"Super types and sub types","pos":[0,25]}]},{"pos":[71,131],"content":"Describes support for inheritance patterns in data entities.","needQuote":true,"needEscape":true,"nodes":[{"content":"Describes support for inheritance patterns in data entities.","pos":[0,60]}]},{"pos":[646,671],"content":"Super types and sub types","linkify":"Super types and sub types","nodes":[{"content":"Super types and sub types","pos":[0,25]}]},{"content":"Describes support for inheritance patterns in data entities.","pos":[673,733]},{"pos":[735,743],"content":"Patterns","linkify":"Patterns","nodes":[{"content":"Patterns","pos":[0,8]}]},{"content":"There are several ways to create entities for tables that involve inheritance:","pos":[754,832]},{"content":"<bpt id=\"p1\">**</bpt>Leaf/concrete type as data source:<ept id=\"p1\">**</ept> If a concrete type is used as a data source, fields are displayed for both the base type and the current type.","pos":[838,987],"source":"**Leaf/concrete type as data source:** If a concrete type is used as a data source, fields are displayed for both the base type and the current type."},{"content":"For example, in the following screen shots, if DirPerson is the data source, data source fields from both DirPerson and DirPartytable appear.","pos":[988,1129]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>sub1<ept id=\"p1\">](./media/sub1.png)](./media/sub1.png)</ept> <bpt id=\"p2\">[</bpt><ph id=\"ph2\">![</ph>sub2<ept id=\"p2\">](./media/sub2-419x1024.png)](./media/sub2.png)</ept>","pos":[1130,1230],"source":"[![sub1](./media/sub1.png)](./media/sub1.png) [![sub2](./media/sub2-419x1024.png)](./media/sub2.png)"},{"content":"<bpt id=\"p1\">**</bpt>Abstract type/non-leaf as data source:<ept id=\"p1\">**</ept> If a non-leaf type is used as a data source, fields are displayed for both the base type and the current type, but fields from any derived types aren't displayed.","pos":[1235,1440],"source":"**Abstract type/non-leaf as data source:** If a non-leaf type is used as a data source, fields are displayed for both the base type and the current type, but fields from any derived types aren't displayed."},{"content":"Fields from derived types must be added from derived data sources, as shown in the following screen shot.","pos":[1441,1546]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>sub3<ept id=\"p1\">](./media/sub3.png)](./media/sub3.png)</ept>","pos":[1547,1592],"source":"[![sub3](./media/sub3.png)](./media/sub3.png)"},{"pos":[1597,1620],"content":"Data Entity View wizard","linkify":"Data Entity View wizard","nodes":[{"content":"Data Entity View wizard","pos":[0,23]}]},{"content":"You can use the <bpt id=\"p1\">**</bpt>Data Entity View<ept id=\"p1\">**</ept> wizard to create data entities where the primary data source (and additional data sources) can be tables that are involved in inheritance.","pos":[1621,1796],"source":"You can use the **Data Entity View** wizard to create data entities where the primary data source (and additional data sources) can be tables that are involved in inheritance."},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Currently, the wizard doesn't support derived data sources.","pos":[1797,1866],"source":"**Note:** Currently, the wizard doesn't support derived data sources."},{"content":"It shows only fields from the current type or the base type.","pos":[1867,1927]},{"content":"After you create an entity, you can manually modify it to display derived data sources.","pos":[1928,2015]},{"content":"The following screen shots show a data entity that was created by using the wizard, where DirPartyTable is the primary data source.","pos":[2016,2147]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>sub4<ept id=\"p1\">](./media/sub4.png)](./media/sub4.png)</ept>","pos":[2148,2193],"source":"[![sub4](./media/sub4.png)](./media/sub4.png)"},{"content":"Update the data source table to <bpt id=\"p1\">**</bpt>DirPartyTabl<ept id=\"p1\">**</ept>.","pos":[2199,2248],"source":"Update the data source table to **DirPartyTabl**."},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>sub5<ept id=\"p1\">](./media/sub5.png)](./media/sub5.png)</ept>","pos":[2249,2294],"source":"[![sub5](./media/sub5.png)](./media/sub5.png)"},{"content":"Update the data source table to <bpt id=\"p1\">**</bpt>DirPartyTable<ept id=\"p1\">**</ept>.","pos":[2299,2349],"source":"Update the data source table to **DirPartyTable**."},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>sub6<ept id=\"p1\">](./media/sub6.png)](./media/sub6.png)</ept>","pos":[2350,2395],"source":"[![sub6](./media/sub6.png)](./media/sub6.png)"},{"pos":[2400,2408],"content":"Run time","linkify":"Run time","nodes":[{"content":"Run time","pos":[0,8]}]},{"content":"There is run-time behavior for entities that related to inheritance.","pos":[2409,2477]},{"pos":[2483,2520],"content":"Creating entities for specified types","linkify":"Creating entities for specified types","nodes":[{"content":"Creating entities for specified types","pos":[0,37]}]},{"content":"In this example, we create separate <bpt id=\"p1\">**</bpt>Person<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Organization<ept id=\"p2\">**</ept> entities.","pos":[2522,2599],"source":"In this example, we create separate **Person** and **Organization** entities."},{"content":"The primary data source for the <bpt id=\"p1\">**</bpt>Person<ept id=\"p1\">**</ept> entity is DirPerson, and the primary data source for the <bpt id=\"p2\">**</bpt>Organization<ept id=\"p2\">**</ept> entity is DirOrganization.","pos":[2600,2743],"source":" The primary data source for the **Person** entity is DirPerson, and the primary data source for the **Organization** entity is DirOrganization."},{"content":"This approach, which is reflected in the following screen shots, doesn't require that you write any special run-time code.","pos":[2744,2866]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>sub7<ept id=\"p1\">](./media/sub7.png)](./media/sub7.png)</ept> <bpt id=\"p2\">[</bpt><ph id=\"ph2\">![</ph>sub8<ept id=\"p2\">](./media/sub8-419x1024.png)](./media/sub8.png)</ept>","pos":[2867,2967],"source":"[![sub7](./media/sub7.png)](./media/sub7.png) [![sub8](./media/sub8-419x1024.png)](./media/sub8.png)"},{"pos":[2973,3012],"content":"Creating entities for generalized types","linkify":"Creating entities for generalized types","nodes":[{"content":"Creating entities for generalized types","pos":[0,39]}]},{"content":"In this example, we create a single entity, <bpt id=\"p1\">**</bpt>Party<ept id=\"p1\">**</ept>, that can be used for both <bpt id=\"p2\">**</bpt>Person<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Organization<ept id=\"p3\">**</ept>.","pos":[3014,3127],"source":"In this example, we create a single entity, **Party**, that can be used for both **Person** and **Organization**."},{"content":"The primary data source is DirPartyTable, and derived data sources are DirPerson and DirOrganization.","pos":[3128,3229]},{"content":"The new entity contains the following kinds of fields:","pos":[3230,3284]},{"content":"<bpt id=\"p1\">**</bpt>Common attributes<ept id=\"p1\">**</ept> – Attributes that aren't specific to <bpt id=\"p2\">**</bpt>Person<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Organization<ept id=\"p3\">**</ept>, such as <bpt id=\"p4\">**</bpt>Name<ept id=\"p4\">**</ept>.","pos":[3290,3398],"source":"**Common attributes** – Attributes that aren't specific to **Person** or **Organization**, such as **Name**."},{"content":"These fields are mapped to DirPartyTable.","pos":[3399,3440]},{"content":"<bpt id=\"p1\">**</bpt>Person-specific attributes<ept id=\"p1\">**</ept> – <bpt id=\"p2\">**</bpt>Gender<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Marital Status<ept id=\"p3\">**</ept>, and so on.","pos":[3445,3520],"source":"**Person-specific attributes** – **Gender**, **Marital Status**, and so on."},{"content":"These fields are mapped to derived data source DirPartyTable<ph id=\"ph1\">\\_</ph>DirPerson.","pos":[3521,3593],"source":" These fields are mapped to derived data source DirPartyTable\\_DirPerson."},{"content":"<bpt id=\"p1\">**</bpt>Organization-specific attributes<ept id=\"p1\">**</ept> – <bpt id=\"p2\">**</bpt>OrgNumber<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>ABC<ept id=\"p3\">**</ept>, and so on.","pos":[3598,3671],"source":"**Organization-specific attributes** – **OrgNumber**, **ABC**, and so on."},{"content":"These fields are mapped to derived data source DirPartyTable<ph id=\"ph1\">\\_</ph>DirOrganization.","pos":[3672,3750],"source":" These fields are mapped to derived data source DirPartyTable\\_DirOrganization."},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>sub9<ept id=\"p1\">](./media/sub9.png)](./media/sub9.png)</ept> Mapping fields from base and multiple derived types in a single data entity is a design-time task.","pos":[3752,3896],"source":"[![sub9](./media/sub9.png)](./media/sub9.png) Mapping fields from base and multiple derived types in a single data entity is a design-time task."},{"content":"However, at run time, we must specify when each derived type should be created.","pos":[3897,3976]},{"content":"This can be based on fields such as <bpt id=\"p1\">**</bpt>InstanceRelationType<ept id=\"p1\">**</ept>, or a computed column can be created to use <bpt id=\"p2\">**</bpt>String<ept id=\"p2\">**</ept> to represent different types.","pos":[3977,4122],"source":" This can be based on fields such as **InstanceRelationType**, or a computed column can be created to use **String** to represent different types."},{"content":"In the <bpt id=\"p1\">**</bpt>Party<ept id=\"p1\">**</ept> entity example, a <bpt id=\"p2\">**</bpt>PartyType<ept id=\"p2\">**</ept> computed column can be created to represent the <bpt id=\"p3\">**</bpt>Person<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>Organization<ept id=\"p4\">**</ept> derived types.","pos":[4123,4266],"source":" In the **Party** entity example, a **PartyType** computed column can be created to represent the **Person** and **Organization** derived types."},{"content":"The following code snippet illustrates this approach.","pos":[4267,4320]},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>sub10<ept id=\"p1\">](./media/sub10.png)](./media/sub10.png)</ept> In this example, the <bpt id=\"p2\">**</bpt>Party<ept id=\"p2\">**</ept> type is computed by using the <bpt id=\"p3\">**</bpt>InstanceRelationType<ept id=\"p3\">**</ept> column on DirPartyTable.","pos":[4321,4480],"source":"[![sub10](./media/sub10.png)](./media/sub10.png) In this example, the **Party** type is computed by using the **InstanceRelationType** column on DirPartyTable."},{"content":"This approach works for reading data.","pos":[4481,4518]},{"content":"However, to do <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Update<ept id=\"p2\">**</ept> operations, you must write code where you override the <bpt id=\"p3\">**</bpt>initializeEntityDataSource<ept id=\"p3\">**</ept> method on the data entity, based on type, and set a correct instance of the derived type for the data source run-time context buffer.","pos":[4519,4778],"source":" However, to do **Create** or **Update** operations, you must write code where you override the **initializeEntityDataSource** method on the data entity, based on type, and set a correct instance of the derived type for the data source run-time context buffer."},{"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>sub11<ept id=\"p1\">](./media/sub11.png)](./media/sub11.png)</ept>","pos":[4779,4827],"source":"[![sub11](./media/sub11.png)](./media/sub11.png)"}],"content":"---\n# required metadata\n\ntitle: Super types and sub types\ndescription: Describes support for inheritance patterns in data entities.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 2015-12-12 20 - 11 - 51\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 25331\nms.assetid: d59cefc0-be94-42e9-a22e-87493985dbcd\nms.search.region: Global\n# ms.search.industry: \nms.author: kuntalme\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# Super types and sub types\n\nDescribes support for inheritance patterns in data entities.\n\nPatterns\n--------\n\nThere are several ways to create entities for tables that involve inheritance:\n\n-   **Leaf/concrete type as data source:** If a concrete type is used as a data source, fields are displayed for both the base type and the current type. For example, in the following screen shots, if DirPerson is the data source, data source fields from both DirPerson and DirPartytable appear. [![sub1](./media/sub1.png)](./media/sub1.png) [![sub2](./media/sub2-419x1024.png)](./media/sub2.png)\n-   **Abstract type/non-leaf as data source:** If a non-leaf type is used as a data source, fields are displayed for both the base type and the current type, but fields from any derived types aren't displayed. Fields from derived types must be added from derived data sources, as shown in the following screen shot. [![sub3](./media/sub3.png)](./media/sub3.png)\n\n## Data Entity View wizard\nYou can use the **Data Entity View** wizard to create data entities where the primary data source (and additional data sources) can be tables that are involved in inheritance. **Note:** Currently, the wizard doesn't support derived data sources. It shows only fields from the current type or the base type. After you create an entity, you can manually modify it to display derived data sources. The following screen shots show a data entity that was created by using the wizard, where DirPartyTable is the primary data source. [![sub4](./media/sub4.png)](./media/sub4.png)\n\n1.  Update the data source table to **DirPartyTabl**. [![sub5](./media/sub5.png)](./media/sub5.png)\n2.  Update the data source table to **DirPartyTable**. [![sub6](./media/sub6.png)](./media/sub6.png)\n\n## Run time\nThere is run-time behavior for entities that related to inheritance.\n\n### Creating entities for specified types\n\nIn this example, we create separate **Person** and **Organization** entities. The primary data source for the **Person** entity is DirPerson, and the primary data source for the **Organization** entity is DirOrganization. This approach, which is reflected in the following screen shots, doesn't require that you write any special run-time code. [![sub7](./media/sub7.png)](./media/sub7.png) [![sub8](./media/sub8-419x1024.png)](./media/sub8.png)\n\n### Creating entities for generalized types\n\nIn this example, we create a single entity, **Party**, that can be used for both **Person** and **Organization**. The primary data source is DirPartyTable, and derived data sources are DirPerson and DirOrganization. The new entity contains the following kinds of fields:\n\n-   **Common attributes** – Attributes that aren't specific to **Person** or **Organization**, such as **Name**. These fields are mapped to DirPartyTable.\n-   **Person-specific attributes** – **Gender**, **Marital Status**, and so on. These fields are mapped to derived data source DirPartyTable\\_DirPerson.\n-   **Organization-specific attributes** – **OrgNumber**, **ABC**, and so on. These fields are mapped to derived data source DirPartyTable\\_DirOrganization.\n\n[![sub9](./media/sub9.png)](./media/sub9.png) Mapping fields from base and multiple derived types in a single data entity is a design-time task. However, at run time, we must specify when each derived type should be created. This can be based on fields such as **InstanceRelationType**, or a computed column can be created to use **String** to represent different types. In the **Party** entity example, a **PartyType** computed column can be created to represent the **Person** and **Organization** derived types. The following code snippet illustrates this approach. [![sub10](./media/sub10.png)](./media/sub10.png) In this example, the **Party** type is computed by using the **InstanceRelationType** column on DirPartyTable. This approach works for reading data. However, to do **Create** or **Update** operations, you must write code where you override the **initializeEntityDataSource** method on the data entity, based on type, and set a correct instance of the derived type for the data source run-time context buffer. [![sub11](./media/sub11.png)](./media/sub11.png)\n\n"}