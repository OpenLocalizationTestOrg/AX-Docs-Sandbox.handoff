{"nodes":[{"pos":[32,65],"content":"X++ conversion run-time functions","needQuote":true,"needEscape":true,"nodes":[{"content":"X++ conversion run-time functions","pos":[0,33]}]},{"pos":[79,134],"content":"This topic describes the conversion run-time functions.","needQuote":true,"needEscape":true,"nodes":[{"content":"This topic describes the conversion run-time functions.","pos":[0,55]}]},{"pos":[630,663],"content":"X++ conversion run-time functions","linkify":"X++ conversion run-time functions","nodes":[{"content":"X++ conversion run-time functions","pos":[0,33]}]},{"content":"This topic describes the conversion run-time functions.","pos":[665,720]},{"pos":[722,730],"content":"any2Date","linkify":"any2Date","nodes":[{"content":"any2Date","pos":[0,8]}]},{"pos":[741,791],"content":"Converts an <bpt id=\"p1\">**</bpt>anytype<ept id=\"p1\">**</ept> value to a <bpt id=\"p2\">**</bpt>date<ept id=\"p2\">**</ept> value.","source":"Converts an **anytype** value to a **date** value."},{"pos":[832,842],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[846,855]},{"content":"Description","pos":[858,869]},{"content":"object","pos":[942,948]},{"content":"The value to convert to a date.","pos":[954,985]},{"pos":[993,1005],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[1007,1024],"content":"A <bpt id=\"p1\">**</bpt>date<ept id=\"p1\">**</ept> value.","source":"A **date** value."},{"pos":[1030,1037],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> parameter can be of most data types, but useful output is obtained when it's of the <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>int<ept id=\"p3\">**</ept> type.","pos":[1039,1160],"source":"The *object* parameter can be of most data types, but useful output is obtained when it's of the **str** or **int** type."},{"content":"Inappropriate content generates a run-time error.","pos":[1161,1210]},{"pos":[1216,1223],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1898,1906],"content":"any2Enum","linkify":"any2Enum","nodes":[{"content":"any2Enum","pos":[0,8]}]},{"pos":[1907,2001],"content":"Converts an <bpt id=\"p1\">**</bpt>anytype<ept id=\"p1\">**</ept> value to the <bpt id=\"p2\">**</bpt>Name<ept id=\"p2\">**</ept> property value of an element in the target enum.","source":"Converts an **anytype** value to the **Name** property value of an element in the target enum."},{"pos":[2042,2052],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[2056,2065]},{"content":"Description","pos":[2068,2079]},{"content":"object","pos":[2240,2246]},{"pos":[2252,2327],"content":"The value to match the <bpt id=\"p1\">**</bpt>Value<ept id=\"p1\">**</ept> property of an element in the target enum.","source":"The value to match the **Value** property of an element in the target enum."},{"pos":[2335,2347],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[2349,2483],"content":"The value of the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> property for whichever element in the target enum has a <bpt id=\"p2\">**</bpt>Value<ept id=\"p2\">**</ept> property that matches the input parameter.","source":"The value of the **Name** property for whichever element in the target enum has a **Value** property that matches the input parameter."},{"pos":[2489,2496],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> parameter can be of most data types, but useful data is obtained only when you use a parameter of the <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>int<ept id=\"p3\">**</ept> type.","pos":[2498,2637],"source":"The *object* parameter can be of most data types, but useful data is obtained only when you use a parameter of the **str** or **int** type."},{"content":"This input <bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> parameter refers to the <bpt id=\"p2\">**</bpt>Value<ept id=\"p2\">**</ept> property of an individual element in the target enum.","pos":[2638,2745],"source":" This input *object* parameter refers to the **Value** property of an individual element in the target enum."},{"pos":[2751,2758],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3498,3506],"content":"any2Guid","linkify":"any2Guid","nodes":[{"content":"any2Guid","pos":[0,8]}]},{"pos":[3507,3566],"content":"Converts the specified <bpt id=\"p1\">**</bpt>anytype<ept id=\"p1\">**</ept> object to a GUID object.","source":"Converts the specified **anytype** object to a GUID object."},{"pos":[3607,3617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[3621,3630]},{"content":"Description","pos":[3633,3644]},{"content":"object","pos":[3731,3737]},{"content":"The value to convert to a GUID object.","pos":[3743,3781]},{"pos":[3789,3801],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"A GUID object.","pos":[3803,3817]},{"pos":[3822,3829],"content":"any2Int","linkify":"any2Int","nodes":[{"content":"any2Int","pos":[0,7]}]},{"pos":[3830,3880],"content":"Converts an <bpt id=\"p1\">**</bpt>anytype<ept id=\"p1\">**</ept> value to an <bpt id=\"p2\">**</bpt>int<ept id=\"p2\">**</ept> value.","source":"Converts an **anytype** value to an **int** value."},{"pos":[3919,3929],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[3933,3942]},{"content":"Description","pos":[3945,3956]},{"content":"object","pos":[4009,4015]},{"content":"The value to convert.","pos":[4021,4042]},{"pos":[4050,4062],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[4064,4081],"content":"An <bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept> value.","source":"An **int** value."},{"pos":[4087,4094],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[4096,4246],"content":"The <bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> parameter can be of most data types, but useful data is obtained only when you use parameters of the <bpt id=\"p2\">**</bpt>enum<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>real<ept id=\"p3\">**</ept>, or <bpt id=\"p4\">**</bpt>str<ept id=\"p4\">**</ept> type.","source":"The *object* parameter can be of most data types, but useful data is obtained only when you use parameters of the **enum**, **real**, or **str** type."},{"pos":[4252,4259],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[5121,5130],"content":"any2Int64","linkify":"any2Int64","nodes":[{"content":"any2Int64","pos":[0,9]}]},{"pos":[5131,5185],"content":"Converts an <bpt id=\"p1\">**</bpt>anytype<ept id=\"p1\">**</ept> object to an <bpt id=\"p2\">**</bpt>int64<ept id=\"p2\">**</ept> object.","source":"Converts an **anytype** object to an **int64** object."},{"pos":[5228,5238],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[5242,5251]},{"content":"Description","pos":[5254,5265]},{"content":"object","pos":[5344,5350]},{"pos":[5356,5390],"content":"The <bpt id=\"p1\">**</bpt>anytype<ept id=\"p1\">**</ept> object to convert.","source":"The **anytype** object to convert."},{"pos":[5398,5410],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[5412,5432],"content":"An <bpt id=\"p1\">**</bpt>int64<ept id=\"p1\">**</ept> object.","source":"An **int64** object."},{"pos":[5437,5445],"content":"any2Real","linkify":"any2Real","nodes":[{"content":"any2Real","pos":[0,8]}]},{"pos":[5446,5496],"content":"Converts an <bpt id=\"p1\">**</bpt>anytype<ept id=\"p1\">**</ept> value to a <bpt id=\"p2\">**</bpt>real<ept id=\"p2\">**</ept> value.","source":"Converts an **anytype** value to a **real** value."},{"pos":[5537,5547],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[5551,5560]},{"content":"Description","pos":[5563,5574]},{"content":"object","pos":[5627,5633]},{"content":"The value to convert.","pos":[5639,5660]},{"pos":[5668,5680],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[5682,5699],"content":"A <bpt id=\"p1\">**</bpt>real<ept id=\"p1\">**</ept> value.","source":"A **real** value."},{"pos":[5705,5712],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[5714,5867],"content":"The <bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> parameter can be of most data types, but useful output is obtained for input elements of the <bpt id=\"p2\">**</bpt>date<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>int<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>enum<ept id=\"p4\">**</ept>, and <bpt id=\"p5\">**</bpt>str<ept id=\"p5\">**</ept> types.","source":"The *object* parameter can be of most data types, but useful output is obtained for input elements of the **date**, **int**, **enum**, and **str** types."},{"pos":[5873,5880],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[6766,6773],"content":"any2Str","linkify":"any2Str","nodes":[{"content":"any2Str","pos":[0,7]}]},{"pos":[6774,6823],"content":"Converts an <bpt id=\"p1\">**</bpt>anytype<ept id=\"p1\">**</ept> value to a <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept> value.","source":"Converts an **anytype** value to a **str** value."},{"pos":[6862,6872],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[6876,6885]},{"content":"Description","pos":[6888,6899]},{"content":"object","pos":[6952,6958]},{"content":"The value to convert.","pos":[6964,6985]},{"pos":[6993,7005],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[7007,7023],"content":"A <bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept> value.","source":"A **str** value."},{"pos":[7029,7036],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[7038,7183],"content":"The <bpt id=\"p1\">*</bpt>object<ept id=\"p1\">*</ept> parameter can be of most data types, but useful output is obtained from input elements of the <bpt id=\"p2\">**</bpt>date<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>int<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>enum<ept id=\"p4\">**</ept> types.","source":"The *object* parameter can be of most data types, but useful output is obtained from input elements of the **date**, **int**, and **enum** types."},{"pos":[7189,7196],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[7823,7838],"content":"anytodate (new)","linkify":"anytodate (new)","nodes":[{"content":"anytodate (new)","pos":[0,15]}]},{"pos":[7839,7854],"content":"anytoenum (new)","linkify":"anytoenum (new)","nodes":[{"content":"anytoenum (new)","pos":[0,15]}]},{"pos":[7875,7890],"content":"anytoguid (new)","linkify":"anytoguid (new)","nodes":[{"content":"anytoguid (new)","pos":[0,15]}]},{"pos":[7891,7905],"content":"anytoint (new)","linkify":"anytoint (new)","nodes":[{"content":"anytoint (new)","pos":[0,14]}]},{"pos":[7925,7941],"content":"anytoint64 (new)","linkify":"anytoint64 (new)","nodes":[{"content":"anytoint64 (new)","pos":[0,16]}]},{"pos":[7942,7957],"content":"anytoreal (new)","linkify":"anytoreal (new)","nodes":[{"content":"anytoreal (new)","pos":[0,15]}]},{"pos":[7978,7992],"content":"anytostr (new)","linkify":"anytostr (new)","nodes":[{"content":"anytostr (new)","pos":[0,14]}]},{"pos":[7993,8001],"content":"char2Num","linkify":"char2Num","nodes":[{"content":"char2Num","pos":[0,8]}]},{"content":"Converts a character in a string to the ASCII value of the character.","pos":[8012,8081]},{"pos":[8129,8139],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[8143,8152]},{"content":"Description","pos":[8155,8166]},{"content":"text","pos":[8265,8269]},{"content":"The string that contains the character.","pos":[8277,8316]},{"content":"position","pos":[8326,8334]},{"content":"The position of the character in the string.","pos":[8338,8382]},{"pos":[8390,8402],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[8404,8458],"content":"The ASCII value of the character as an <bpt id=\"p1\">**</bpt>int<ept id=\"p1\">**</ept> object.","source":"The ASCII value of the character as an **int** object."},{"pos":[8464,8471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[8625,8633],"content":"date2Num","linkify":"date2Num","nodes":[{"content":"date2Num","pos":[0,8]}]},{"content":"Converts a date to an integer that corresponds to the number of days since January 1, 1900.","pos":[8634,8725]},{"pos":[8761,8771],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[8775,8784]},{"content":"Description","pos":[8787,8798]},{"content":"<ph id=\"ph1\">\\_</ph>date","pos":[8849,8855],"source":"\\_date"},{"content":"The date to convert.","pos":[8861,8881]},{"pos":[8889,8901],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The number of days between January 1, 1900, and the specified date.","pos":[8903,8970]},{"pos":[8976,8983],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[9194,9202],"content":"date2Str","linkify":"date2Str","nodes":[{"content":"date2Str","pos":[0,8]}]},{"content":"Converts the specified date to a string.","pos":[9203,9243]},{"pos":[9386,9396],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[9400,9409]},{"content":"Description","pos":[9413,9424]},{"content":"date","pos":[9842,9846]},{"content":"The date to convert.","pos":[9855,9875]},{"content":"sequence","pos":[10063,10071]},{"pos":[10076,10208],"content":"A three-digit number that indicates the sequence for the components of the date: <bpt id=\"p1\">**</bpt>1<ept id=\"p1\">**</ept> for day, <bpt id=\"p2\">**</bpt>2<ept id=\"p2\">**</ept> for month, and <bpt id=\"p3\">**</bpt>3<ept id=\"p3\">**</ept> for year.","source":"A three-digit number that indicates the sequence for the components of the date: **1** for day, **2** for month, and **3** for year."},{"content":"day","pos":[10284,10287]},{"content":"A enumeration value that indicates the format for the day component of the date.","pos":[10297,10377]},{"content":"separator1","pos":[10505,10515]},{"content":"A enumeration value that indicates the separator to use between the first two components of the date.","pos":[10518,10619]},{"content":"month","pos":[10726,10731]},{"content":"A enumeration value that indicates the format for the month component of the date.","pos":[10739,10821]},{"content":"separator2","pos":[10947,10957]},{"content":"A enumeration value that indicates the separator to use between the last two components of the date.","pos":[10960,11060]},{"content":"year","pos":[11168,11172]},{"content":"A enumeration value that indicates the format for the year component of the date.","pos":[11181,11262]},{"content":"flags","pos":[11389,11394]},{"pos":[11402,11605],"content":"A <bpt id=\"p1\">**</bpt>DateFlags<ept id=\"p1\">**</ept> enumeration value that indicates whether the language settings on the local computer should be used to calculate the proper left-to-right or right-to-left sequence in the returned string.","source":"A **DateFlags** enumeration value that indicates whether the language settings on the local computer should be used to calculate the proper left-to-right or right-to-left sequence in the returned string."},{"pos":[11613,11625],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"A string that represents the specified date.","pos":[11627,11671]},{"pos":[11677,11684],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"MorphX allocates valid values to the formatting parameters if the specified values aren't valid.","pos":[11686,11782]},{"content":"To use the date format that the user specified in Regional Settings, use the <bpt id=\"p1\">**</bpt>strFmt<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>date2Str<ept id=\"p2\">**</ept> function and specify <bpt id=\"p3\">**</bpt>-1<ept id=\"p3\">**</ept> in all the formatting parameters.","pos":[11783,11948],"source":" To use the date format that the user specified in Regional Settings, use the **strFmt** or **date2Str** function and specify **-1** in all the formatting parameters."},{"content":"When the regional settings control the date format, the settings can change from user to user.","pos":[11949,12043]},{"content":"If <bpt id=\"p1\">**</bpt>-1<ept id=\"p1\">**</ept> is used for either <bpt id=\"p2\">*</bpt>separator<ept id=\"p2\">*</ept> parameter, both separators default to Regional Settings.","pos":[12044,12141],"source":" If **-1** is used for either *separator* parameter, both separators default to Regional Settings."},{"content":"The <bpt id=\"p1\">*</bpt>sequence<ept id=\"p1\">*</ept> parameter values must be any three-digit number that contains exactly one occurrence of each the digits 1, 2 and 3.","pos":[12142,12272],"source":" The *sequence* parameter values must be any three-digit number that contains exactly one occurrence of each the digits 1, 2 and 3."},{"content":"The digits 1, 2, and 3 represent day, month, and year, respectively.","pos":[12273,12341]},{"content":"For example, <bpt id=\"p1\">**</bpt>321<ept id=\"p1\">**</ept> produces the sequence year, month, and day.","pos":[12342,12406],"source":" For example, **321** produces the sequence year, month, and day."},{"content":"Or the value can be <bpt id=\"p1\">**</bpt>-1<ept id=\"p1\">**</ept> to use Regional Settings.","pos":[12407,12459],"source":" Or the value can be **-1** to use Regional Settings."},{"content":"No enumeration type should be used for this parameter, because numbers such as 321 exceed the range of valid values for enumeration values, which is 0 through 250, inclusive.","pos":[12460,12634]},{"content":"The default value of the <bpt id=\"p1\">*</bpt>flags<ept id=\"p1\">*</ept> parameter is the <bpt id=\"p2\">**</bpt>DateFlags::None<ept id=\"p2\">**</ept> enumeration value, which means no left-to-right or right-to-left sequence processing is done.","pos":[12635,12798],"source":" The default value of the *flags* parameter is the **DateFlags::None** enumeration value, which means no left-to-right or right-to-left sequence processing is done."},{"pos":[12804,12811],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example displays the current date in the sequence of year, month, and day.","pos":[12813,12901]},{"pos":[13484,13496],"content":"datetime2Str","linkify":"datetime2Str","nodes":[{"content":"datetime2Str","pos":[0,12]}]},{"pos":[13497,13544],"content":"Converts a <bpt id=\"p1\">**</bpt>utcdatetime<ept id=\"p1\">**</ept> value into a string.","source":"Converts a **utcdatetime** value into a string."},{"pos":[13626,13636],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[13640,13649]},{"content":"Description","pos":[13652,13663]},{"content":"datetime","pos":[13882,13890]},{"pos":[13894,13931],"content":"The <bpt id=\"p1\">**</bpt>utcdatetime<ept id=\"p1\">**</ept> value to convert.","source":"The **utcdatetime** value to convert."},{"content":"flags","pos":[14003,14008]},{"pos":[14015,14119],"content":"A <bpt id=\"p1\">**</bpt>DateFlags<ept id=\"p1\">**</ept> enumeration value that indicates whether to use local settings for right-to-left output.","source":"A **DateFlags** enumeration value that indicates whether to use local settings for right-to-left output."},{"pos":[14127,14139],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[14141,14239],"content":"A string that represents the <bpt id=\"p1\">**</bpt>utcdatetime<ept id=\"p1\">**</ept> value that was specified as the <bpt id=\"p2\">*</bpt>datetime<ept id=\"p2\">*</ept> parameter.","source":"A string that represents the **utcdatetime** value that was specified as the *datetime* parameter."},{"pos":[14245,14252],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[14259,14279],"content":"Null date-time input","linkify":"Null date-time input","nodes":[{"content":"Null date-time input","pos":[0,20]}]},{"content":"If the minimum <bpt id=\"p1\">**</bpt>utcdatetime<ept id=\"p1\">**</ept> value is specified for the <bpt id=\"p2\">*</bpt>datetime<ept id=\"p2\">*</ept> parameter, the <bpt id=\"p3\">**</bpt>datetime2Str<ept id=\"p3\">**</ept> function treats it as a null input value.","pos":[14281,14423],"source":"If the minimum **utcdatetime** value is specified for the *datetime* parameter, the **datetime2Str** function treats it as a null input value."},{"content":"This causes the function to return an empty string.","pos":[14424,14475]},{"content":"The date-time <bpt id=\"p1\">**</bpt>1900-01-01T00:00:00<ept id=\"p1\">**</ept> is returned by the <bpt id=\"p2\">**</bpt>DateTimeUtil::minValue<ept id=\"p2\">**</ept> method.","pos":[14476,14567],"source":" The date-time **1900-01-01T00:00:00** is returned by the **DateTimeUtil::minValue** method."},{"content":"This minimum value is treated as null.","pos":[14568,14606]},{"pos":[14613,14641],"content":"Right-to-left local settings","linkify":"Right-to-left local settings","nodes":[{"content":"Right-to-left local settings","pos":[0,28]}]},{"content":"The default behavior of this function is to generate the string in left-to-right sequence, where the year portion is leftmost.","pos":[14643,14769]},{"content":"However, the <bpt id=\"p1\">*</bpt>flags<ept id=\"p1\">*</ept> parameter value of the <bpt id=\"p2\">**</bpt>DateFlags::FormatAll<ept id=\"p2\">**</ept> enumeration value directs the function to generate the string in right-to-left sequence if the local settings are configured for right-to-left.","pos":[14770,14982],"source":" However, the *flags* parameter value of the **DateFlags::FormatAll** enumeration value directs the function to generate the string in right-to-left sequence if the local settings are configured for right-to-left."},{"content":"The format of the <bpt id=\"p1\">**</bpt>toStr<ept id=\"p1\">**</ept> method of the <bpt id=\"p2\">**</bpt>DateTimeUtil<ept id=\"p2\">**</ept> class is unaffected by regional settings.","pos":[14983,15083],"source":" The format of the **toStr** method of the **DateTimeUtil** class is unaffected by regional settings."},{"pos":[15089,15096],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[15299,15307],"content":"enum2Str","linkify":"enum2Str","nodes":[{"content":"enum2Str","pos":[0,8]}]},{"content":"Converts the specified enumerated text to a character representation.","pos":[15308,15377]},{"pos":[15412,15422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[15426,15435]},{"content":"Description","pos":[15438,15449]},{"content":"enum","pos":[15522,15526]},{"content":"The enumerated text to convert.","pos":[15534,15565]},{"pos":[15573,15585],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The value of the enumeration as a string.","pos":[15587,15628]},{"pos":[15634,15641],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example returns the string \"Not included.\"","pos":[15643,15699]},{"content":"This is the label for the <bpt id=\"p1\">**</bpt>IncludeNot<ept id=\"p1\">**</ept> value of the <bpt id=\"p2\">**</bpt>ListCode<ept id=\"p2\">**</ept> enumeration type.","pos":[15700,15784],"source":" This is the label for the **IncludeNot** value of the **ListCode** enumeration type."},{"pos":[15939,15947],"content":"guid2Str","linkify":"guid2Str","nodes":[{"content":"guid2Str","pos":[0,8]}]},{"content":"Converts the specified GUID object to the equivalent string.","pos":[15948,16008]},{"pos":[16047,16057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[16061,16070]},{"content":"Description","pos":[16073,16084]},{"content":"<ph id=\"ph1\">\\_</ph>uuid","pos":[16149,16155],"source":"\\_uuid"},{"content":"The GUID object to convert.","pos":[16161,16188]},{"pos":[16196,16208],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The string equivalent of the specified GUID object.","pos":[16210,16261]},{"pos":[16267,16274],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[16699,16706],"content":"int2Str","linkify":"int2Str","nodes":[{"content":"int2Str","pos":[0,7]}]},{"content":"Converts an integer to the equivalent string.","pos":[16707,16752]},{"pos":[16788,16798],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[16802,16811]},{"content":"Description","pos":[16814,16825]},{"content":"integer","pos":[16882,16889]},{"content":"The integer to convert.","pos":[16894,16917]},{"pos":[16925,16937],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"A string representation of the integer.","pos":[16939,16978]},{"pos":[16984,16991],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17193,17202],"content":"int642Str","linkify":"int642Str","nodes":[{"content":"int642Str","pos":[0,9]}]},{"pos":[17203,17276],"content":"Converts the specified <bpt id=\"p1\">*</bpt>integer<ept id=\"p1\">*</ept> parameter to the equivalent text string.","source":"Converts the specified *integer* parameter to the equivalent text string."},{"pos":[17316,17326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[17330,17339]},{"content":"Description","pos":[17342,17353]},{"content":"integer","pos":[17430,17437]},{"content":"The int64 to convert to a string.","pos":[17442,17475]},{"pos":[17483,17495],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[17497,17551],"content":"The equivalent text string of the <bpt id=\"p1\">*</bpt>integer<ept id=\"p1\">*</ept> parameter.","source":"The equivalent text string of the *integer* parameter."},{"pos":[17557,17564],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[17750,17758],"content":"num2Char","linkify":"num2Char","nodes":[{"content":"num2Char","pos":[0,8]}]},{"content":"Converts an integer to the corresponding ASCII character.","pos":[17759,17816]},{"pos":[17852,17862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[17866,17875]},{"content":"Description","pos":[17878,17889]},{"content":"figure","pos":[17976,17982]},{"content":"The integer to convert to a character.","pos":[17988,18026]},{"pos":[18034,18046],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The character that is represented by the specified integer.","pos":[18048,18107]},{"pos":[18113,18120],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[18321,18329],"content":"num2Date","linkify":"num2Date","nodes":[{"content":"num2Date","pos":[0,8]}]},{"content":"Retrieves the date that corresponds to the specified number of days after January 1, 1900.","pos":[18330,18420]},{"pos":[18456,18466],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[18470,18479]},{"content":"Description","pos":[18482,18493]},{"content":"<ph id=\"ph1\">\\_</ph>days","pos":[18940,18946],"source":"\\_days"},{"content":"The number of days after January 1, 1900 to return the date for.","pos":[18952,19016]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> The first valid date is January 1, 1901.","pos":[19017,19067],"source":"**Note:** The first valid date is January 1, 1901."},{"content":"Therefore, the <bpt id=\"p1\">**</bpt>num2Date<ept id=\"p1\">**</ept> function doesn't return a valid date unless <bpt id=\"p2\">*</bpt><ph id=\"ph1\">\\_</ph>days<ept id=\"p2\">*</ept> is more than <bpt id=\"p3\">**</bpt>365<ept id=\"p3\">**</ept>.","pos":[19068,19170],"source":" Therefore, the **num2Date** function doesn't return a valid date unless *\\_days* is more than **365**."},{"pos":[19178,19190],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[19192,19294],"content":"The date that is the number of days that is specified by the <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\_</ph>days<ept id=\"p1\">*</ept> parameter after January 1, 1900.","source":"The date that is the number of days that is specified by the *\\_days* parameter after January 1, 1900."},{"pos":[19300,19307],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[19380,19387],"content":"num2Str","linkify":"num2Str","nodes":[{"content":"num2Str","pos":[0,7]}]},{"content":"Converts a real number to a string.","pos":[19388,19423]},{"pos":[19520,19530],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[19534,19543]},{"content":"Description","pos":[19547,19558]},{"content":"number","pos":[19696,19702]},{"content":"The real number to convert to a string.","pos":[19709,19748]},{"content":"character","pos":[19777,19786]},{"content":"The minimum number of characters that are required in the text.","pos":[19790,19853]},{"content":"decimals","pos":[19858,19866]},{"content":"The required number of decimal places.","pos":[19871,19909]},{"content":"separator1","pos":[19939,19949]},{"pos":[19952,19993],"content":"A <bpt id=\"p1\">**</bpt>DecimalSeparator<ept id=\"p1\">**</ept> enumeration value.","source":"A **DecimalSeparator** enumeration value."},{"content":"separator2","pos":[20020,20030]},{"pos":[20033,20075],"content":"A <bpt id=\"p1\">**</bpt>ThousandSeparator<ept id=\"p1\">**</ept> enumeration value.","source":"A **ThousandSeparator** enumeration value."},{"pos":[20104,20116],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"A string that represents the number.","pos":[20118,20154]},{"pos":[20160,20167],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"For the <bpt id=\"p1\">*</bpt>decimals<ept id=\"p1\">*</ept> parameter, the maximum value is <bpt id=\"p2\">**</bpt>16<ept id=\"p2\">**</ept>.","pos":[20169,20227],"source":"For the *decimals* parameter, the maximum value is **16**."},{"content":"If a larger number is used, this method obtains a value for the <bpt id=\"p1\">*</bpt>decimals<ept id=\"p1\">*</ept> parameter from the local computer instead.","pos":[20228,20345],"source":" If a larger number is used, this method obtains a value for the *decimals* parameter from the local computer instead."},{"content":"In both cases, rounding occurs.","pos":[20346,20377]},{"content":"Here are the possible enumeration values for the <bpt id=\"p1\">*</bpt>separator1<ept id=\"p1\">*</ept> parameter:","pos":[20378,20450],"source":" Here are the possible enumeration values for the *separator1* parameter:"},{"pos":[20456,20473],"content":"<bpt id=\"p1\">**</bpt>1<ept id=\"p1\">**</ept> – Point (.)","source":"**1** – Point (.)"},{"pos":[20478,20495],"content":"<bpt id=\"p1\">**</bpt>2<ept id=\"p1\">**</ept> – Comma (,)","source":"**2** – Comma (,)"},{"pos":[20497,20557],"content":"Here are the possible values for the <bpt id=\"p1\">*</bpt>separator2<ept id=\"p1\">*</ept> parameter:","source":"Here are the possible values for the *separator2* parameter:"},{"content":"**0 **– No thousands separator","pos":[20563,20593]},{"content":"**1 **– Point (.)","pos":[20598,20615]},{"content":"**2 **– Comma (,)","pos":[20620,20637]},{"content":"**3 **– Space ( )","pos":[20642,20659]},{"pos":[20665,20672],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[20674,20828],"content":"In the following code example, the first call to the <bpt id=\"p1\">**</bpt>num2str<ept id=\"p1\">**</ept> method provides <bpt id=\"p2\">**</bpt>16<ept id=\"p2\">**</ept> for the <bpt id=\"p3\">*</bpt>decimals<ept id=\"p3\">*</ept> parameter, and the second call provides <bpt id=\"p4\">**</bpt>17<ept id=\"p4\">**</ept>.","source":"In the following code example, the first call to the **num2str** method provides **16** for the *decimals* parameter, and the second call provides **17**."},{"pos":[21092,21098],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"content":"The messages are in the following Infolog output.","pos":[21100,21149]},{"content":"The first number in the output contains 16 decimal place digits, whereas the second number contains only two decimal place digits.","pos":[21150,21280]},{"pos":[21341,21349],"content":"str2Date","linkify":"str2Date","nodes":[{"content":"str2Date","pos":[0,8]}]},{"pos":[21350,21400],"content":"Converts the specified string to a <bpt id=\"p1\">**</bpt>date<ept id=\"p1\">**</ept> value.","source":"Converts the specified string to a **date** value."},{"pos":[21451,21461],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[21465,21474]},{"content":"Description","pos":[21478,21489]},{"content":"<ph id=\"ph1\">\\_</ph>text","pos":[21709,21715],"source":"\\_text"},{"pos":[21722,21764],"content":"The string to convert to a <bpt id=\"p1\">**</bpt>date<ept id=\"p1\">**</ept> value.","source":"The string to convert to a **date** value."},{"content":"<ph id=\"ph1\">\\_</ph>sequence","pos":[21831,21841],"source":"\\_sequence"},{"content":"A three-digit integer that describes the positions of the day, month, and year in the string to convert.","pos":[21844,21948]},{"pos":[21956,21968],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[21970,21987],"content":"A <bpt id=\"p1\">**</bpt>date<ept id=\"p1\">**</ept> value.","source":"A **date** value."},{"pos":[21993,22000],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[22002,22110],"content":"Use the following values to specify the positions of the day, month, and year in the <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\_</ph>sequence<ept id=\"p1\">*</ept> parameter:","source":"Use the following values to specify the positions of the day, month, and year in the *\\_sequence* parameter:"},{"pos":[22116,22126],"content":"<bpt id=\"p1\">**</bpt>Day:<ept id=\"p1\">**</ept> 1","source":"**Day:** 1"},{"pos":[22131,22143],"content":"<bpt id=\"p1\">**</bpt>Month:<ept id=\"p1\">**</ept> 2","source":"**Month:** 2"},{"pos":[22148,22159],"content":"<bpt id=\"p1\">**</bpt>Year:<ept id=\"p1\">**</ept> 3","source":"**Year:** 3"},{"content":"For example, if the sequence in the string is month, year, and then day, the <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\_</ph>sequence<ept id=\"p1\">*</ept> parameter must be <bpt id=\"p2\">**</bpt>231<ept id=\"p2\">**</ept>.","pos":[22161,22277],"source":"For example, if the sequence in the string is month, year, and then day, the *\\_sequence* parameter must be **231**."},{"content":"A <bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept> (zero) date is returned if the input parameters specify an invalid date.","pos":[22278,22358],"source":" A **0** (zero) date is returned if the input parameters specify an invalid date."},{"content":"The following two examples specify an invalid date.","pos":[22359,22410]},{"pos":[22624,22631],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[22778,22790],"content":"str2Datetime","linkify":"str2Datetime","nodes":[{"content":"str2Datetime","pos":[0,12]}]},{"pos":[22791,22880],"content":"Generates a <bpt id=\"p1\">**</bpt>utcdatetime<ept id=\"p1\">**</ept> value from the specified string of date and time information.","source":"Generates a **utcdatetime** value from the specified string of date and time information."},{"pos":[22942,22952],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[22956,22965]},{"content":"Description","pos":[22968,22979]},{"content":"text","pos":[23182,23186]},{"pos":[23194,23243],"content":"The string to convert to a <bpt id=\"p1\">**</bpt>utcdatetime<ept id=\"p1\">**</ept> value.","source":"The string to convert to a **utcdatetime** value."},{"content":"sequence","pos":[23295,23303]},{"pos":[23307,23403],"content":"A three-digit number that describes the sequence of the date components in the <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> parameter.","source":"A three-digit number that describes the sequence of the date components in the *text* parameter."},{"pos":[23411,23423],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[23425,23493],"content":"A <bpt id=\"p1\">**</bpt>utcdatetime<ept id=\"p1\">**</ept> value that represents the specified date and time.","source":"A **utcdatetime** value that represents the specified date and time."},{"pos":[23499,23506],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The syntax requirements for the date portion of the <bpt id=\"p1\">*</bpt>text<ept id=\"p1\">*</ept> parameter are flexible.","pos":[23508,23590],"source":"The syntax requirements for the date portion of the *text* parameter are flexible."},{"content":"The variety of valid formats is the same as in the <bpt id=\"p1\">**</bpt>date2str<ept id=\"p1\">**</ept> function.","pos":[23591,23664],"source":" The variety of valid formats is the same as in the **date2str** function."},{"content":"Each of the following calls to <bpt id=\"p1\">**</bpt>str2datetime<ept id=\"p1\">**</ept> is valid, and all of them produce the same output.","pos":[23665,23763],"source":" Each of the following calls to **str2datetime** is valid, and all of them produce the same output."},{"pos":[23937,24023],"content":"Each component of the date time is represented by a digit in the <bpt id=\"p1\">*</bpt>sequence<ept id=\"p1\">*</ept> parameter:","source":"Each component of the date time is represented by a digit in the *sequence* parameter:"},{"pos":[24029,24040],"content":"<bpt id=\"p1\">**</bpt>1<ept id=\"p1\">**</ept> – Day","source":"**1** – Day"},{"pos":[24045,24058],"content":"<bpt id=\"p1\">**</bpt>2<ept id=\"p1\">**</ept> – Month","source":"**2** – Month"},{"pos":[24063,24075],"content":"<bpt id=\"p1\">**</bpt>3<ept id=\"p1\">**</ept> – Year","source":"**3** – Year"},{"content":"For example, year, month, day order is <bpt id=\"p1\">**</bpt>321<ept id=\"p1\">**</ept>.","pos":[24077,24124],"source":"For example, year, month, day order is **321**."},{"content":"All valid values contain each of these three digits exactly one time.","pos":[24125,24194]},{"content":"If the value of the <bpt id=\"p1\">*</bpt>sequence<ept id=\"p1\">*</ept> parameter isn't valid, the regional settings are used to interpret the input <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept> parameter.","pos":[24195,24320],"source":" If the value of the *sequence* parameter isn't valid, the regional settings are used to interpret the input *text* parameter."},{"content":"If the input parameters describe an invalid date and time, an empty string is returned.","pos":[24321,24408]},{"pos":[24414,24421],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[24689,24697],"content":"str2Enum","linkify":"str2Enum","nodes":[{"content":"str2Enum","pos":[0,8]}]},{"pos":[24698,24799],"content":"Retrieves the enum element for which the localized <bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept> property value matches the input string.","source":"Retrieves the enum element for which the localized **Label** property value matches the input string."},{"pos":[24847,24857],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[24861,24870]},{"content":"Description","pos":[24873,24884]},{"content":"<ph id=\"ph1\">\\_</ph>type","pos":[25039,25045],"source":"\\_type"},{"pos":[25051,25100],"content":"A variable that is declared of the <bpt id=\"p1\">**</bpt>enum<ept id=\"p1\">**</ept> type.","source":"A variable that is declared of the **enum** type."},{"content":"<ph id=\"ph1\">\\_</ph>text","pos":[25128,25134],"source":"\\_text"},{"pos":[25140,25212],"content":"The localized <bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept> property text of the target element in the enum.","source":"The localized **Label** property text of the target element in the enum."},{"pos":[25220,25232],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"An element of the target enum, which also represents an int.","pos":[25234,25294]},{"pos":[25300,25307],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The related function <bpt id=\"p1\">**</bpt>enum2str<ept id=\"p1\">**</ept> returns the value of a <bpt id=\"p2\">**</bpt>Label<ept id=\"p2\">**</ept> property from one element in the enum.","pos":[25309,25414],"source":"The related function **enum2str** returns the value of a **Label** property from one element in the enum."},{"content":"The value that is returned by <bpt id=\"p1\">**</bpt>enum2str<ept id=\"p1\">**</ept> function can be the input for the <bpt id=\"p2\">*</bpt><ph id=\"ph1\">\\_</ph>type<ept id=\"p2\">*</ept> parameter of the <bpt id=\"p3\">**</bpt>str2enum<ept id=\"p3\">**</ept> function.","pos":[25415,25540],"source":" The value that is returned by **enum2str** function can be the input for the *\\_type* parameter of the **str2enum** function."},{"content":"An appropriate value for the <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\_</ph>text<ept id=\"p1\">*</ept> parameter is <bpt id=\"p2\">**</bpt>enum2Str(BankAccountType::SavingsAccount)<ept id=\"p2\">**</ept>.","pos":[25541,25638],"source":" An appropriate value for the *\\_text* parameter is **enum2Str(BankAccountType::SavingsAccount)**."},{"content":"Each element of an enum has a <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> property and a <bpt id=\"p2\">**</bpt>Label<ept id=\"p2\">**</ept> property.","pos":[25639,25712],"source":" Each element of an enum has a **Name** property and a **Label** property."},{"content":"In a fresh install, the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> values are almost always English words.","pos":[25713,25785],"source":" In a fresh install, the **Name** values are almost always English words."},{"content":"In the English edition, the <bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept> property value is almost always the same as the <bpt id=\"p2\">**</bpt>Name<ept id=\"p2\">**</ept> value.","pos":[25786,25887],"source":" In the English edition, the **Label** property value is almost always the same as the **Name** value."},{"content":"However, in non-English editions, the <bpt id=\"p1\">**</bpt>Label<ept id=\"p1\">**</ept> values are localized and therefore don't match the <bpt id=\"p2\">**</bpt>Name<ept id=\"p2\">**</ept> values.","pos":[25888,26003],"source":" However, in non-English editions, the **Label** values are localized and therefore don't match the **Name** values."},{"pos":[26009,26016],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"To avoid string mismatches that are caused by localization to other spoken languages, we recommend that you use the <bpt id=\"p1\">**</bpt>enum2str<ept id=\"p1\">**</ept> function to generate the input into the <bpt id=\"p2\">**</bpt>str2enum<ept id=\"p2\">**</ept> function.","pos":[26018,26209],"source":"To avoid string mismatches that are caused by localization to other spoken languages, we recommend that you use the **enum2str** function to generate the input into the **str2enum** function."},{"content":"The following example shows the appropriate way to use the <bpt id=\"p1\">**</bpt>str2enum<ept id=\"p1\">**</ept> function together with the <bpt id=\"p2\">**</bpt>enum2str<ept id=\"p2\">**</ept> function.","pos":[26210,26331],"source":" The following example shows the appropriate way to use the **str2enum** function together with the **enum2str** function."},{"pos":[27023,27031],"content":"str2Guid","linkify":"str2Guid","nodes":[{"content":"str2Guid","pos":[0,8]}]},{"content":"Converts a string to a GUID object.","pos":[27032,27067]},{"pos":[27102,27112],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[27116,27125]},{"content":"Description","pos":[27128,27139]},{"content":"guid","pos":[27214,27218]},{"content":"A string that represents a GUID.","pos":[27226,27258]},{"pos":[27266,27278],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"A GUID that is represented by the input string.","pos":[27280,27327]},{"pos":[27333,27340],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[27342,27475],"content":"For example, a valid value for the <bpt id=\"p1\">*</bpt>guid<ept id=\"p1\">*</ept> parameter is <bpt id=\"p2\">**</bpt>{12345678-1234-abCD-3456-123456789012}<ept id=\"p2\">**</ept>, either with or without the braces.","source":"For example, a valid value for the *guid* parameter is **{12345678-1234-abCD-3456-123456789012}**, either with or without the braces."},{"pos":[27480,27487],"content":"str2Int","linkify":"str2Int","nodes":[{"content":"str2Int","pos":[0,7]}]},{"content":"Converts a string to the equivalent integer.","pos":[27488,27532]},{"pos":[27566,27576],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[27580,27589]},{"content":"Description","pos":[27592,27603]},{"content":"<ph id=\"ph1\">\\_</ph>text","pos":[27686,27692],"source":"\\_text"},{"content":"The string to convert to an integer.","pos":[27698,27734]},{"pos":[27742,27754],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The integer equivalent of the specified string.","pos":[27756,27803]},{"pos":[27809,27816],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[27973,27982],"content":"str2Int64","linkify":"str2Int64","nodes":[{"content":"str2Int64","pos":[0,9]}]},{"pos":[27983,28025],"content":"Converts a string into an <bpt id=\"p1\">**</bpt>Int64<ept id=\"p1\">**</ept> value.","source":"Converts a string into an **Int64** value."},{"pos":[28060,28070],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[28074,28083]},{"content":"Description","pos":[28086,28097]},{"content":"text","pos":[28152,28156]},{"content":"The string to convert.","pos":[28164,28186]},{"pos":[28194,28206],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[28208,28252],"content":"The <bpt id=\"p1\">**</bpt>Int64<ept id=\"p1\">**</ept> value of the specified string.","source":"The **Int64** value of the specified string."},{"pos":[28258,28265],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[28667,28674],"content":"str2Num","linkify":"str2Num","nodes":[{"content":"str2Num","pos":[0,7]}]},{"content":"Converts a string to a real number.","pos":[28675,28710]},{"pos":[28745,28755],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[28759,28768]},{"content":"Description","pos":[28771,28782]},{"content":"<ph id=\"ph1\">\\_</ph>text","pos":[28871,28877],"source":"\\_text"},{"content":"The string to convert to a real number.","pos":[28883,28922]},{"pos":[28930,28942],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[28944,29033],"content":"The real number if the specified string contains a valid number; otherwise, <bpt id=\"p1\">**</bpt>0<ept id=\"p1\">**</ept> (zero).","source":"The real number if the specified string contains a valid number; otherwise, **0** (zero)."},{"pos":[29039,29046],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following examples show how this function is used.","pos":[29048,29102]},{"content":"Scanning occurs from left to right and ends when a character can't be converted to part of a real number.","pos":[29242,29347]},{"pos":[29353,29360],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[30350,30358],"content":"str2Time","linkify":"str2Time","nodes":[{"content":"str2Time","pos":[0,8]}]},{"pos":[30359,30402],"content":"Converts a string to a <bpt id=\"p1\">**</bpt>timeOfDay<ept id=\"p1\">**</ept> value.","source":"Converts a string to a **timeOfDay** value."},{"pos":[30437,30447],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[30451,30460]},{"content":"Description","pos":[30463,30474]},{"content":"<ph id=\"ph1\">\\_</ph>text","pos":[30617,30623],"source":"\\_text"},{"content":"The time to use to calculate the number of seconds since midnight.","pos":[30629,30695]},{"pos":[30703,30715],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[30717,30802],"content":"The number of seconds between midnight and the <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\_</ph>text<ept id=\"p1\">*</ept> parameter; otherwise, <bpt id=\"p2\">**</bpt>-1<ept id=\"p2\">**</ept>.","source":"The number of seconds between midnight and the *\\_text* parameter; otherwise, **-1**."},{"pos":[30808,30815],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[30924,30931],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[31067,31075],"content":"time2Str","linkify":"time2Str","nodes":[{"content":"time2Str","pos":[0,8]}]},{"pos":[31076,31161],"content":"Converts a <bpt id=\"p1\">**</bpt>timeOfDay<ept id=\"p1\">**</ept> value to a string that includes hours, minutes, and seconds.","source":"Converts a **timeOfDay** value to a string that includes hours, minutes, and seconds."},{"pos":[31229,31239],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[31243,31252]},{"content":"Description","pos":[31258,31269]},{"content":"<ph id=\"ph1\">\\_</ph>time","pos":[31541,31547],"source":"\\_time"},{"pos":[31556,31578],"content":"A <bpt id=\"p1\">**</bpt>timeOfDay<ept id=\"p1\">**</ept> value.","source":"A **timeOfDay** value."},{"content":"<ph id=\"ph1\">\\_</ph>separator","pos":[31690,31701],"source":"\\_separator"},{"pos":[31705,31834],"content":"A <bpt id=\"p1\">**</bpt>TimeSeparator<ept id=\"p1\">**</ept> enumeration value that indicates the characters between the hours, minutes, and seconds in the output string.","source":"A **TimeSeparator** enumeration value that indicates the characters between the hours, minutes, and seconds in the output string."},{"content":"<ph id=\"ph1\">\\_</ph>timeFormat","pos":[31839,31851],"source":"\\_timeFormat"},{"pos":[31854,31955],"content":"A <bpt id=\"p1\">**</bpt>TimeFormat<ept id=\"p1\">**</ept> enumeration value that indicates whether a 12-hour clock or a 24-hour clock is used.","source":"A **TimeFormat** enumeration value that indicates whether a 12-hour clock or a 24-hour clock is used."},{"pos":[31991,32003],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"A string that represents the specified time.","pos":[32005,32049]},{"pos":[32055,32062],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32064,32140],"content":"The value of the <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\_</ph>time<ept id=\"p1\">*</ept> parameter is the number of seconds since midnight.","source":"The value of the *\\_time* parameter is the number of seconds since midnight."},{"pos":[32146,32153],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[32388,32396],"content":"uint2Str","linkify":"uint2Str","nodes":[{"content":"uint2Str","pos":[0,8]}]},{"content":"Converts an integer to a string.","pos":[32397,32429]},{"content":"The assumption is that the integer is unsigned.","pos":[32430,32477]},{"pos":[32514,32524],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"Parameter","pos":[32528,32537]},{"content":"Description","pos":[32540,32551]},{"content":"integer","pos":[32608,32615]},{"content":"The integer to convert.","pos":[32620,32643]},{"pos":[32651,32663],"content":"Return value","linkify":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"content":"The string equivalent to the specified unsigned integer.","pos":[32665,32721]},{"pos":[32727,32734],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[32736,32834],"content":"Use this function instead of the <bpt id=\"p1\">**</bpt>int2str<ept id=\"p1\">**</ept> function for very large integers, such as record IDs.","source":"Use this function instead of the **int2str** function for very large integers, such as record IDs."}],"content":"---\n# required metadata\n\ntitle: X++ conversion run-time functions\ndescription: This topic describes the conversion run-time functions.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 04/04/2017\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: 61\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 31321\nms.assetid: cf3e4f05-5ef0-49b1-b76e-8269913ee29d\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# X++ conversion run-time functions\n\nThis topic describes the conversion run-time functions.\n\nany2Date\n--------\n\nConverts an **anytype** value to a **date** value.\n\n    date any2Date(anytype object)\n\n### Parameters\n\n| Parameter | Description                     |\n|-----------|---------------------------------|\n| object    | The value to convert to a date. |\n\n### Return value\n\nA **date** value.\n\n### Remarks\n\nThe *object* parameter can be of most data types, but useful output is obtained when it's of the **str** or **int** type. Inappropriate content generates a run-time error.\n\n### Example\n\n    static void any2DateExample(Args _args)\n    {\n            date myDate;\n            str s;\n            int i;\n            s = \"2010 6 17\"; // A string object, of yyyy mm dd.\n            myDate = any2Date(s);\n            Global::info(strFmt(\"%1  is output, from input of \"2010 6 17\"\", myDate));\n            i = 40361; // An int object, which represents the number of days from 1900/01/01.\n            myDate = any2Date(i);\n            Global::info(strFmt(\"%1  is output, from input of 40361\", myDate));\n    }\n    /**** Infolog display.\n    Message (04:44:15 pm)\n    6/17/2010 is output, from input of \"2010 6 17\"\n    7/4/2010 is output, from input of 40361\n    ****/\n\n## any2Enum\nConverts an **anytype** value to the **Name** property value of an element in the target enum.\n\n    enum any2Enum(anytype object)\n\n### Parameters\n\n| Parameter | Description                                                                 |\n|-----------|-----------------------------------------------------------------------------|\n| object    | The value to match the **Value** property of an element in the target enum. |\n\n### Return value\n\nThe value of the **Name** property for whichever element in the target enum has a **Value** property that matches the input parameter.\n\n### Remarks\n\nThe *object* parameter can be of most data types, but useful data is obtained only when you use a parameter of the **str** or **int** type. This input *object* parameter refers to the **Value** property of an individual element in the target enum.\n\n### Example\n\n    static void any2EnumExample(Args _args)\n    {\n            NoYes myNoYes;  // NoYes is an enum.\n            int i;\n            str s;\n            i = 0;  // An int that will be converted.\n            myNoYes = any2Enum(i);\n            Global::info(strfmt(\"'%1' - is the output, from input of the %2 as int.\", myNoYes, i));\n            s = \"1\";  // A str that will be converted.\n            myNoYes = any2Enum(s);\n            Global::info(strfmt(\"'%1' - is the output, from input of the %2 as str.\", myNoYes, s));\n            /**** Infolog display.\n            Message (01:05:32 pm)\n            'No' - is the output, from input of the 0 as int.\n            'Yes' - is the output, from input of the 1 as str.\n            ****/\n    }\n\n## any2Guid\nConverts the specified **anytype** object to a GUID object.\n\n    guid any2Guid(anytype object)\n\n### Parameters\n\n| Parameter | Description                            |\n|-----------|----------------------------------------|\n| object    | The value to convert to a GUID object. |\n\n### Return value\n\nA GUID object.\n\n## any2Int\nConverts an **anytype** value to an **int** value.\n\n    int any2Int(anytype object)\n\n### Parameters\n\n| Parameter | Description           |\n|-----------|-----------------------|\n| object    | The value to convert. |\n\n### Return value\n\nAn **int** value.\n\n### Remarks\n\nThe *object* parameter can be of most data types, but useful data is obtained only when you use parameters of the **enum**, **real**, or **str** type.\n\n### Example\n\n    static void any2IntExample(Args _args)\n    {\n            int myInt;\n            str s;\n            NoYes a;\n            real r;\n            s = \"31\";\n            myInt = any2Int(s);\n            Global::info(strfmt(\"%1 is the output, from input of 31 as a str value.\", myInt));\n            a = NoYes::No;\n            myInt = any2Int(a);\n            Global::info(strfmt(\"%1 is the output, from input of NoYes::No as an enum value.\", myInt));\n            r = 5.34e2;\n            myInt = any2Int(r);\n            Global::info(strfmt(\"%1 is the output, from the input of 5.34e2 as a real value.\", myInt));\n    }\n    /**** Infolog display.\n    Message (02:23:59 pm)\n    31 is the output, from input of 31 as a str value.\n    0 is the output, from input of NoYes::No as an enum value.\n    534 is the output, from the input of 5.34e2 as a real value.\n    ****/\n\n## any2Int64\nConverts an **anytype** object to an **int64** object.\n\n    int64 any2Int64(anytype object)\n\n### Parameters\n\n| Parameter | Description                        |\n|-----------|------------------------------------|\n| object    | The **anytype** object to convert. |\n\n### Return value\n\nAn **int64** object.\n\n## any2Real\nConverts an **anytype** value to a **real** value.\n\n    real any2Real(anytype object)\n\n### Parameters\n\n| Parameter | Description           |\n|-----------|-----------------------|\n| object    | The value to convert. |\n\n### Return value\n\nA **real** value.\n\n### Remarks\n\nThe *object* parameter can be of most data types, but useful output is obtained for input elements of the **date**, **int**, **enum**, and **str** types.\n\n### Example\n\n    static void any2RealExample(Args _args)\n    {\n            real myReal;\n            str s;\n            int i;\n            NoYes a;\n            s = \"5.12\";\n            myReal = any2Real(s);\n            Global::info(strfmt(\"%1 is the output from the input of 5.12 as a str object\", myReal));\n            i = 64;\n            myReal = any2Real(i);\n            Global::info(strfmt(\"%1 is the output from the input of 64 as an int object\", myReal));\n            a = NoYes::Yes;\n            myReal = any2Real(a);\n            Global::info(strfmt(\"%1 is the output from the input of NoYes::Yes as an enum object\", myReal));\n    }\n    /****Infolog display.\n    Message (02:43:57 pm)\n    5.12 is the output from the input of 5.12 as a str object\n    64.00 is the output from the input of 64 as an int object\n    1.00 is the output from the input of NoYes::Yes as an enum object\n    ****/\n\n## any2Str\nConverts an **anytype** value to a **str** value.\n\n    str any2Str(anytype object)\n\n### Parameters\n\n| Parameter | Description           |\n|-----------|-----------------------|\n| object    | The value to convert. |\n\n### Return value\n\nA **str** value.\n\n### Remarks\n\nThe *object* parameter can be of most data types, but useful output is obtained from input elements of the **date**, **int**, and **enum** types.\n\n### Example\n\n    static void any2StrExample(Args _args)\n    {\n            str myStr;\n            anytype a;\n            a = \"Any to string\";\n            myStr = any2Str(a);\n            Global::info(strFmt(\"%1 is output, from input of Any to string as a str value\", myStr));\n            a = NoYes::Yes;\n            myStr = any2Str(a);\n            Global::info(strFmt(\"%1 is output, from input of NoYes::Yes as an enumeration\", myStr));\n    }\n    /****Infolog Display\n    Message (09:08:46 am)\n    Any to string is output, from input of Any to string as a str value\n    1 is output, from input of NoYes::Yes as an enumeration\n    ****/\n\n## anytodate (new)\nanytoenum (new)\n---------------\n\n## anytoguid (new)\nanytoint (new)\n--------------\n\n## anytoint64 (new)\nanytoreal (new)\n---------------\n\n## anytostr (new)\nchar2Num\n--------\n\nConverts a character in a string to the ASCII value of the character.\n\n    int char2Num(str text, int position)\n\n### Parameters\n\n| Parameter | Description                                  |\n|-----------|----------------------------------------------|\n| text      | The string that contains the character.      |\n| position  | The position of the character in the string. |\n\n### Return value\n\nThe ASCII value of the character as an **int** object.\n\n### Remarks\n\n    char2Num(\"ABCDEFG\",3); //Returns the numeric value of C, which is 67.\n    char2Num(\"ABCDEFG\",1); //Returns the numeric value of A, which is 65.\n\n## date2Num\nConverts a date to an integer that corresponds to the number of days since January 1, 1900.\n\n    int date2Num(date _date)\n\n### Parameters\n\n| Parameter | Description          |\n|-----------|----------------------|\n| \\_date    | The date to convert. |\n\n### Return value\n\nThe number of days between January 1, 1900, and the specified date.\n\n### Example\n\n    //Returns the value377.\n    date2Num(1311901);\n    static void date2NumExample(Args _arg)\n    {\n            date d = today();\n            int i;\n            i = date2Num(d);\n            print i;\n    }\n\n## date2Str\nConverts the specified date to a string.\n\n    str date2Str(date date, int sequence, int day, int separator1, int month, int separator2, int year [, int flags = DateFlags::None])\n\n### Parameters\n\n| Parameter  | Description                                                                                                                                                                                                 |\n|------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| date       | The date to convert.                                                                                                                                                                                        |\n| sequence   | A three-digit number that indicates the sequence for the components of the date: **1** for day, **2** for month, and **3** for year.                                                                        |\n| day        | A enumeration value that indicates the format for the day component of the date.                                                                                                                            |\n| separator1 | A enumeration value that indicates the separator to use between the first two components of the date.                                                                                                       |\n| month      | A enumeration value that indicates the format for the month component of the date.                                                                                                                          |\n| separator2 | A enumeration value that indicates the separator to use between the last two components of the date.                                                                                                        |\n| year       | A enumeration value that indicates the format for the year component of the date.                                                                                                                           |\n| flags      | A **DateFlags** enumeration value that indicates whether the language settings on the local computer should be used to calculate the proper left-to-right or right-to-left sequence in the returned string. |\n\n### Return value\n\nA string that represents the specified date.\n\n### Remarks\n\nMorphX allocates valid values to the formatting parameters if the specified values aren't valid. To use the date format that the user specified in Regional Settings, use the **strFmt** or **date2Str** function and specify **-1** in all the formatting parameters. When the regional settings control the date format, the settings can change from user to user. If **-1** is used for either *separator* parameter, both separators default to Regional Settings. The *sequence* parameter values must be any three-digit number that contains exactly one occurrence of each the digits 1, 2 and 3. The digits 1, 2, and 3 represent day, month, and year, respectively. For example, **321** produces the sequence year, month, and day. Or the value can be **-1** to use Regional Settings. No enumeration type should be used for this parameter, because numbers such as 321 exceed the range of valid values for enumeration values, which is 0 through 250, inclusive. The default value of the *flags* parameter is the **DateFlags::None** enumeration value, which means no left-to-right or right-to-left sequence processing is done.\n\n### Example\n\nThe following example displays the current date in the sequence of year, month, and day.\n\n    static void Job2(Args _args)\n    {\n            date currentDate = today();\n            str s;\n            int iEnum;\n            s = date2Str\n            (currentDate, \n                    321,\n                    DateDay::Digits2,\n                    DateSeparator::Hyphen, // separator1\n                    DateMonth::Digits2,\n                    DateSeparator::Hyphen, // separator2\n                    DateYear::Digits4\n            );\n            info(\"Today is:  \" + s);\n    }\n    /** Example Infolog output\n    Message (12:36:21 pm)\n    Today is:  2009-01-13\n    **/\n\n## datetime2Str\nConverts a **utcdatetime** value into a string.\n\n    str datetime2Str(utcdatetime datetime [, int flags = DateFlags::None])\n\n### Parameters\n\n| Parameter | Description                                                                                              |\n|-----------|----------------------------------------------------------------------------------------------------------|\n| datetime  | The **utcdatetime** value to convert.                                                                    |\n| flags     | A **DateFlags** enumeration value that indicates whether to use local settings for right-to-left output. |\n\n### Return value\n\nA string that represents the **utcdatetime** value that was specified as the *datetime* parameter.\n\n### Remarks\n\n#### Null date-time input\n\nIf the minimum **utcdatetime** value is specified for the *datetime* parameter, the **datetime2Str** function treats it as a null input value. This causes the function to return an empty string. The date-time **1900-01-01T00:00:00** is returned by the **DateTimeUtil::minValue** method. This minimum value is treated as null.\n\n#### Right-to-left local settings\n\nThe default behavior of this function is to generate the string in left-to-right sequence, where the year portion is leftmost. However, the *flags* parameter value of the **DateFlags::FormatAll** enumeration value directs the function to generate the string in right-to-left sequence if the local settings are configured for right-to-left. The format of the **toStr** method of the **DateTimeUtil** class is unaffected by regional settings.\n\n### Example\n\n    static void jobTestDatetime2str( Args _args )\n    {\n            utcdatetime utc2 = 1959-06-17T15:44:33;\n            str s3;\n            s3 = datetime2Str( utc2 );\n            info( s3 );\n    }\n\n## enum2Str\nConverts the specified enumerated text to a character representation.\n\n    str enum2Str(enum enum)\n\n### Parameters\n\n| Parameter | Description                     |\n|-----------|---------------------------------|\n| enum      | The enumerated text to convert. |\n\n### Return value\n\nThe value of the enumeration as a string.\n\n### Example\n\nThe following example returns the string \"Not included.\" This is the label for the **IncludeNot** value of the **ListCode** enumeration type.\n\n    static void enum2StrExample(Args _arg)\n    {\n            ListCode l;\n            l =  ListCode::IncludeNot;\n            print enum2Str(l);\n    }\n\n## guid2Str\nConverts the specified GUID object to the equivalent string.\n\n    str guid2String(guid _uuid)\n\n### Parameters\n\n| Parameter | Description                 |\n|-----------|-----------------------------|\n| \\_uuid    | The GUID object to convert. |\n\n### Return value\n\nThe string equivalent of the specified GUID object.\n\n### Example\n\n    static void guid2StrExample()\n    {\n            guid _guid;\n            str stringGuid;\n            _guid = Global::guidFromString(\"{12345678-1234-1234-1234-123456789abc}\");\n            print strfmt(\"GUID is %1\", _guid);\n            stringGuid = guid2str(_guid);\n            info(\"String GUID is \" + stringGuid);\n    }\n    /**** Output to Infolog\n    String GUID is {12345678-1234-1234-1234-123456789ABC}\n    ****/\n\n## int2Str\nConverts an integer to the equivalent string.\n\n    str int2Str(int integer)\n\n### Parameters\n\n| Parameter | Description             |\n|-----------|-------------------------|\n| integer   | The integer to convert. |\n\n### Return value\n\nA string representation of the integer.\n\n### Example\n\n    static void int2StrExample(Args _arg)\n    {\n            print \"This is int2Str, value is \" + int2Str(intMax());\n            print \"This is int642Str, value is \" + int642Str(int64Max());\n    }\n\n## int642Str\nConverts the specified *integer* parameter to the equivalent text string.\n\n    str int642Str(int64 integer)\n\n### Parameters\n\n| Parameter | Description                       |\n|-----------|-----------------------------------|\n| integer   | The int64 to convert to a string. |\n\n### Return value\n\nThe equivalent text string of the *integer* parameter.\n\n### Example\n\n    static void example()\n    {\n            print \"This is int2Str, value is \" + int2Str(intMax());\n            print \"This is int642Str, value is \" + int642Str(int64Max());\n    }\n\n## num2Char\nConverts an integer to the corresponding ASCII character.\n\n    str num2Char(int figure)\n\n### Parameters\n\n| Parameter | Description                            |\n|-----------|----------------------------------------|\n| figure    | The integer to convert to a character. |\n\n### Return value\n\nThe character that is represented by the specified integer.\n\n### Example\n\n    static void num2CharExample(Args _arg)\n    {\n            str s;\n            s = num2Char(42);\n            // Prints an asterisk * -the character represented by 42.\n            print s;\n    }\n\n## num2Date\nRetrieves the date that corresponds to the specified number of days after January 1, 1900.\n\n    date num2Date(int _days)\n\n### Parameters\n\n| Parameter | Description                                                                                                                                                                                                                |\n|-----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| \\_days    | The number of days after January 1, 1900 to return the date for. **Note:** The first valid date is January 1, 1901. Therefore, the **num2Date** function doesn't return a valid date unless *\\_days* is more than **365**. |\n\n### Return value\n\nThe date that is the number of days that is specified by the *\\_days* parameter after January 1, 1900.\n\n### Remarks\n\n    num2Date(366); //Returns the date 01/01/1901 (1 January 1901).\n\n## num2Str\nConverts a real number to a string.\n\n    str num2Str(real number, int character, int decimals, int separator1, int separator2)\n\n### Parameters\n\n| Parameter  | Description                                                     |\n|------------|-----------------------------------------------------------------|\n| number     | The real number to convert to a string.                         |\n| character  | The minimum number of characters that are required in the text. |\n| decimals   | The required number of decimal places.                          |\n| separator1 | A **DecimalSeparator** enumeration value.                       |\n| separator2 | A **ThousandSeparator** enumeration value.                      |\n\n### Return value\n\nA string that represents the number.\n\n### Remarks\n\nFor the *decimals* parameter, the maximum value is **16**. If a larger number is used, this method obtains a value for the *decimals* parameter from the local computer instead. In both cases, rounding occurs. Here are the possible enumeration values for the *separator1* parameter:\n\n-   **1** – Point (.)\n-   **2** – Comma (,)\n\nHere are the possible values for the *separator2* parameter:\n\n-   **0 **– No thousands separator\n-   **1 **– Point (.)\n-   **2 **– Comma (,)\n-   **3 **– Space ( )\n\n### Example\n\nIn the following code example, the first call to the **num2str** method provides **16** for the *decimals* parameter, and the second call provides **17**.\n\n    static void Job_Num2Str(Args _args)\n    {\n            real realNum = 0.1294567890123456777; // 19 decimals places.\n            info(Num2Str(realNum,0,16,1,3)); // 16 decimal places\n            info(Num2Str(realNum,0,17,1,3)); // 17 decimal places\n    }\n\n### Output\n\nThe messages are in the following Infolog output. The first number in the output contains 16 decimal place digits, whereas the second number contains only two decimal place digits.\n\n    Message (10:18:12)\n    0.1294567890123457\n    0.13\n\n## str2Date\nConverts the specified string to a **date** value.\n\n    date str2Date(str _text, str _sequence)\n\n### Parameters\n\n| Parameter  | Description                                                                                              |\n|------------|----------------------------------------------------------------------------------------------------------|\n| \\_text     | The string to convert to a **date** value.                                                               |\n| \\_sequence | A three-digit integer that describes the positions of the day, month, and year in the string to convert. |\n\n### Return value\n\nA **date** value.\n\n### Remarks\n\nUse the following values to specify the positions of the day, month, and year in the *\\_sequence* parameter:\n\n-   **Day:** 1\n-   **Month:** 2\n-   **Year:** 3\n\nFor example, if the sequence in the string is month, year, and then day, the *\\_sequence* parameter must be **231**. A **0** (zero) date is returned if the input parameters specify an invalid date. The following two examples specify an invalid date.\n\n    str2Date(\"31/12/44\", 123) // Year must be four digits to reach the minimum of January 1 1901.\n    str2Date(\"31/12/2044\", 213) // 213 means the month occurs first in the string, but 31 cannot be a month.\n\n### Example\n\n    static void str2DateExample(Args _arg)\n    {\n            date d;\n            d = str2Date(\"22/11/2007\", 123);\n            print d;\n    }\n\n## str2Datetime\nGenerates a **utcdatetime** value from the specified string of date and time information.\n\n    utcdatetime str2datetime( str text, int sequence )\n\n### Parameters\n\n| Parameter | Description                                                                                      |\n|-----------|--------------------------------------------------------------------------------------------------|\n| text      | The string to convert to a **utcdatetime** value.                                                |\n| sequence  | A three-digit number that describes the sequence of the date components in the *text* parameter. |\n\n### Return value\n\nA **utcdatetime** value that represents the specified date and time.\n\n### Remarks\n\nThe syntax requirements for the date portion of the *text* parameter are flexible. The variety of valid formats is the same as in the **date2str** function. Each of the following calls to **str2datetime** is valid, and all of them produce the same output.\n\n    utc3 = str2datetime( \"1985/02/25 23:04:59\" ,321 );\n    utc3 = str2datetime( \"Feb-1985-25 11:04:59 pm\" ,231 );\n    utc3 = str2datetime( \"2 25 1985 11:04:59 pm\" ,123 );\n\nEach component of the date time is represented by a digit in the *sequence* parameter:\n\n-   **1** – Day\n-   **2** – Month\n-   **3** – Year\n\nFor example, year, month, day order is **321**. All valid values contain each of these three digits exactly one time. If the value of the *sequence* parameter isn't valid, the regional settings are used to interpret the input *text* parameter. If the input parameters describe an invalid date and time, an empty string is returned.\n\n### Example\n\n    static void JobTestStr2datetime( Args _args )\n    {\n            utcdatetime utc3;\n            str sTemp;\n            utc3 = str2datetime( \"1985/02/25 23:04:59\" ,321 );\n            sTemp = datetime2str( utc3 );\n            print( \"sTemp == \" + sTemp );\n    }\n\n## str2Enum\nRetrieves the enum element for which the localized **Label** property value matches the input string.\n\n    enum str2Enum(enum _type, str _text)\n\n### Parameters\n\n| Parameter | Description                                                              |\n|-----------|--------------------------------------------------------------------------|\n| \\_type    | A variable that is declared of the **enum** type.                        |\n| \\_text    | The localized **Label** property text of the target element in the enum. |\n\n### Return value\n\nAn element of the target enum, which also represents an int.\n\n### Remarks\n\nThe related function **enum2str** returns the value of a **Label** property from one element in the enum. The value that is returned by **enum2str** function can be the input for the *\\_type* parameter of the **str2enum** function. An appropriate value for the *\\_text* parameter is **enum2Str(BankAccountType::SavingsAccount)**. Each element of an enum has a **Name** property and a **Label** property. In a fresh install, the **Name** values are almost always English words. In the English edition, the **Label** property value is almost always the same as the **Name** value. However, in non-English editions, the **Label** values are localized and therefore don't match the **Name** values.\n\n### Example\n\nTo avoid string mismatches that are caused by localization to other spoken languages, we recommend that you use the **enum2str** function to generate the input into the **str2enum** function. The following example shows the appropriate way to use the **str2enum** function together with the **enum2str** function.\n\n    static void str2Enum_AcrossLangs(Args _arg)\n    {\n            BankAccountType bat;\n            str sEnumValueLabelLocalized;\n            int nInt;\n            // enum2str.\n            sEnumValueLabelLocalized = enum2str(BankAccountType::SavingsAccount);\n            info(\"Localized friendly string: \"\n                    + sEnumValueLabelLocalized);\n            // str2enum.\n            bat = str2Enum(bat, sEnumValueLabelLocalized);\n            nInt = bat;\n            info(\"nInt = \" + int2str(nInt));\n            /********** Actual output:\n            Message (04:32:12 pm)\n            Localized friendly string: Savings account\n            nInt = 1\n            **********/\n    }\n\n## str2Guid\nConverts a string to a GUID object.\n\n    Guid str2Guid(str text)\n\n### Parameters\n\n| Parameter | Description                      |\n|-----------|----------------------------------|\n| guid      | A string that represents a GUID. |\n\n### Return value\n\nA GUID that is represented by the input string.\n\n### Remarks\n\nFor example, a valid value for the *guid* parameter is **{12345678-1234-abCD-3456-123456789012}**, either with or without the braces.\n\n## str2Int\nConverts a string to the equivalent integer.\n\n    int str2Int(str _text)\n\n### Parameters\n\n| Parameter | Description                          |\n|-----------|--------------------------------------|\n| \\_text    | The string to convert to an integer. |\n\n### Return value\n\nThe integer equivalent of the specified string.\n\n### Example\n\n    static void str2IntExample(Args _arg)\n    {\n            int i;\n            i = str2Int(\"1234567890\");\n            print \"i = \" + int2Str(i);\n    }\n\n## str2Int64\nConverts a string into an **Int64** value.\n\n    int str2Int64(str text)\n\n### Parameters\n\n| Parameter | Description            |\n|-----------|------------------------|\n| text      | The string to convert. |\n\n### Return value\n\nThe **Int64** value of the specified string.\n\n### Example\n\n    static void str2Int64Example(Args _args)\n    {\n            str myStr;\n            str tooBig;\n            Int64 myInt64;\n            myStr = \"1234567890\";\n            tooBig = int642str(int64Max()+1);\n            myInt64 = str2Int64(mystr);\n            print strfmt (\"int64: %1\",myInt64);\n            myInt64 = str2Int64(tooBig);\n            print strfmt (\"Too big int64: %1\",myInt64);\n    }\n\n## str2Num\nConverts a string to a real number.\n\n    real str2Num(str _text)\n\n### Parameters\n\n| Parameter | Description                             |\n|-----------|-----------------------------------------|\n| \\_text    | The string to convert to a real number. |\n\n### Return value\n\nThe real number if the specified string contains a valid number; otherwise, **0** (zero).\n\n### Remarks\n\nThe following examples show how this function is used.\n\n    str2Num(\"123.45\") returns the value 123.45.\n    str2Num(\"a123\") returns the value 0.0.\n    str2Num(\"123a\") returns the value 123.00.\n\nScanning occurs from left to right and ends when a character can't be converted to part of a real number.\n\n### Example\n\n    static void str2NumToReal(Args _arg)\n    {\n            real r;\n            str s;\n            r = str2Num(\"3.15\");\n            s = strFmt(\"r = %1\", r);\n            info(s);\n    }\n    /*** Infolog output.\n    Message_@SYS14327 (02:36:12 pm)\n    r = 3.15\n    ***/\n\n    static void str2NumExponentialSyntax(Args _args)\n    {\n            Qty qty1, qty2, qty3;\n            qty1 = str2num('1e-3'); // Bad syntax by the user.\n            qty2 = str2num('1.e-3');\n            qty3 = str2num('1.0e-3');\n            info(strfmt('Result: %1; Expected: %2', num2str(qty1, 0,3,2,0), '0.001'));\n            info(strfmt('Result: %1; Expected: %2', num2str(qty2, 0,3,2,0), '0.001'));\n            info(strfmt('Result: %1; Expected: %2', num2str(qty3, 0,3,2,0), '0.001'));\n    }\n    /*** Infolog output. The first result differs from expectations.\n    Message_@SYS14327 (02:20:55 pm)\n    Result: 1,000; Expected: 0.001\n    Result: 0,001; Expected: 0.001\n    Result: 0,001; Expected: 0.001\n    ***/\n\n## str2Time\nConverts a string to a **timeOfDay** value.\n\n    int str2Time(str _text)\n\n### Parameters\n\n| Parameter | Description                                                        |\n|-----------|--------------------------------------------------------------------|\n| \\_text    | The time to use to calculate the number of seconds since midnight. |\n\n### Return value\n\nThe number of seconds between midnight and the *\\_text* parameter; otherwise, **-1**.\n\n### Remarks\n\n    str2Time(\"05:01:37\") //Returns the value 18097.\n    str2Time(\"7 o'clock\") //Returns the value -1.\n\n### Example\n\n    static void str2TimeExample(Args _arg)\n    {\n            int i;\n            i = str2Time(\"11:30\");\n            print i;\n    }\n\n## time2Str\nConverts a **timeOfDay** value to a string that includes hours, minutes, and seconds.\n\n    str time2Str(int _time, int _separator, int _timeFormat)\n\n### Parameters\n\n| Parameter    | Description                                                                                                                       |\n|--------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| \\_time       | A **timeOfDay** value.                                                                                                            |\n| \\_separator  | A **TimeSeparator** enumeration value that indicates the characters between the hours, minutes, and seconds in the output string. |\n| \\_timeFormat | A **TimeFormat** enumeration value that indicates whether a 12-hour clock or a 24-hour clock is used.                             |\n\n### Return value\n\nA string that represents the specified time.\n\n### Remarks\n\nThe value of the *\\_time* parameter is the number of seconds since midnight.\n\n### Example\n\n    static void TimeJob4(Args _args)\n    {\n            timeOfDay theTime = timeNow();\n            info( time2Str(theTime, TimeSeparator::Colon, TimeFormat::AMPM) );\n    }\n    /**\n    Message (04:33:56 pm)\n    04:33:56 pm\n    **/\n\n## uint2Str\nConverts an integer to a string. The assumption is that the integer is unsigned.\n\n    str uint2Str(int integer)\n\n### Parameters\n\n| Parameter | Description             |\n|-----------|-------------------------|\n| integer   | The integer to convert. |\n\n### Return value\n\nThe string equivalent to the specified unsigned integer.\n\n### Remarks\n\nUse this function instead of the **int2str** function for very large integers, such as record IDs.\n\n    info(int2str(3123456789)); //returns -1171510507 as a string.\n    info(uint2str(3123456789)); //returns 3123456789 as a string.\n\n"}