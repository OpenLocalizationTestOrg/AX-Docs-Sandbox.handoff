{"nodes":[{"pos":[32,102],"content":"Use delegates to solve dependencies between models when migrating code","needQuote":true,"needEscape":true,"nodes":[{"content":"Use delegates to solve dependencies between models when migrating code","pos":[0,70]}]},{"pos":[116,253],"content":"This topic explains how delegate methods serve as a means for defining a contract between the delegate instance and the delegate handler.","needQuote":true,"needEscape":true,"nodes":[{"content":"This topic explains how delegate methods serve as a means for defining a contract between the delegate instance and the delegate handler.","pos":[0,137]}]},{"pos":[753,823],"content":"Use delegates to solve dependencies between models when migrating code","linkify":"Use delegates to solve dependencies between models when migrating code","nodes":[{"content":"Use delegates to solve dependencies between models when migrating code","pos":[0,70]}]},{"content":"This topic explains how delegate methods serve as a means for defining a contract between the delegate instance and the delegate handler.","pos":[825,962]},{"pos":[964,972],"content":"Overview","linkify":"Overview","nodes":[{"content":"Overview","pos":[0,8]}]},{"content":"Microsoft Dynamics 365 for Operations is split into more several models, with each model in separate package.","pos":[983,1092]},{"content":"The principal 3 models are Application Platform, Application Foundation, and Application Suite (See <bpt id=\"p1\">[</bpt>Models<ept id=\"p1\">](..\\dev-tools\\models.md)</ept> to learn about models and packages).","pos":[1093,1262],"source":" The principal 3 models are Application Platform, Application Foundation, and Application Suite (See [Models](..\\dev-tools\\models.md) to learn about models and packages)."},{"content":"With the model split, a hierarchy has been created where a higher model can take dependencies and access elements in the models below, but not in models above.","pos":[1263,1422]},{"content":"In this setup, Application Suite has full access to its elements, Application Foundation’s elements, and Application Platform’s elements.","pos":[1423,1560]},{"content":"Application Foundation can access its own elements and those of Application Platform.","pos":[1561,1646]},{"content":"Finally, Application Platform can only access its own elements.","pos":[1647,1710]},{"pos":[1713,1758],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>Del1<ept id=\"p1\">](./media/del1.jpg)](./media/del1.jpg)</ept>","source":"[![Del1](./media/del1.jpg)](./media/del1.jpg)"},{"content":"While the model split provides many benefits, it creates a problem when trying to access elements defined in higher models.","pos":[1761,1884]},{"content":"Delegates are the recommended method for accessing elements in higher models from a lower model.","pos":[1885,1981]},{"content":"Delegates are very similar to events in that when a delegate instance is invoked, a handler with compatible signature code is executed.","pos":[1982,2117]},{"content":"This permits higher layer code, the handler, to be called by lower layer code, the delegate instance.","pos":[2118,2219]},{"pos":[2224,2253],"content":"Create delegates and handlers","linkify":"Create delegates and handlers","nodes":[{"content":"Create delegates and handlers","pos":[0,29]}]},{"content":"A delegate declaration must have three things:","pos":[2254,2300]},{"content":"The delegate keyword","pos":[2306,2326]},{"content":"Type void","pos":[2331,2340]},{"content":"Empty method","pos":[2345,2357]},{"content":"Delegate methods serve as a means for defining a contract between the delegate instance and the delegate handler.","pos":[2359,2472]},{"content":"A delegate takes no action itself.","pos":[2473,2507]},{"content":"This is enforced by having a void type and having no code in the method.","pos":[2508,2580]},{"pos":[2583,2621],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>1<ept id=\"p1\">](./media/12.png)](./media/12.png)</ept>","source":"[![1](./media/12.png)](./media/12.png)"},{"content":"Adding the SubscribesTo keyword to a method will create a static delegate handler.","pos":[2624,2706]},{"content":"SubscribesTo requires the class name of the delegate, and the string name of the delegate method.","pos":[2707,2804]},{"pos":[2807,2845],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>2<ept id=\"p1\">](./media/21.png)](./media/21.png)</ept>","source":"[![2](./media/21.png)](./media/21.png)"},{"content":"In order for a delegate to be properly handled, the delegate method declaration, the delegate instance, and the delegate handler must have the <bpt id=\"p1\">*</bpt>same<ept id=\"p1\">*</ept> method signature.","pos":[2848,3015],"source":"In order for a delegate to be properly handled, the delegate method declaration, the delegate instance, and the delegate handler must have the *same* method signature."},{"content":"For example, the delegate instance below takes two inputs, a real number and an EventHandlerResult, matching the delegate declaration and handler signatures above.","pos":[3016,3179]},{"pos":[3182,3220],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>3<ept id=\"p1\">](./media/32.png)](./media/32.png)</ept>","source":"[![3](./media/32.png)](./media/32.png)"},{"content":"Due to the fact that delegates do not have a return value, an EventHandlerResult is passed as a parameter to provide access to the needed result value after the delegate has returned.","pos":[3223,3406]},{"content":"This topic focuses on static delegate handlers using the SubscribesTo.","pos":[3407,3477]},{"content":"The delegate functionality from Dynamics AX 2012 remains.","pos":[3478,3535]},{"content":"<bpt id=\"p1\">[</bpt>How to use X++ Delegates in Dynamics AX 2012<ept id=\"p1\">](http://blogs.msdn.com/b/x/archive/2011/08/02/how-to-use-x-delegates-in-dynamics-ax-2012.aspx)</ept> is a great blog post on MSDN by Microsoft developer Marcos Calderon on delegate concepts in Dynamics AX 2012.","pos":[3536,3786],"source":"[How to use X++ Delegates in Dynamics AX 2012](http://blogs.msdn.com/b/x/archive/2011/08/02/how-to-use-x-delegates-in-dynamics-ax-2012.aspx) is a great blog post on MSDN by Microsoft developer Marcos Calderon on delegate concepts in Dynamics AX 2012."},{"content":"These concepts still apply.","pos":[3787,3814]},{"pos":[3819,3836],"content":"Example scenarios","linkify":"Example scenarios","nodes":[{"content":"Example scenarios","pos":[0,17]}]},{"pos":[3841,3872],"content":"Overlaying an existing delegate","linkify":"Overlaying an existing delegate","nodes":[{"content":"Overlaying an existing delegate","pos":[0,31]}]},{"content":"In many cases where delegates are needed, the code that was formerly overlayed has already been moved to a delegate handler by Microsoft.","pos":[3874,4011]},{"content":"In these instances, Microsoft created delegates that can be leveraged and the code can be overlayed in a similar manner in the delegate handler.","pos":[4012,4156]},{"content":"In this scenario, an Independent Software Vendor (ISV) is migrating code from Dynamics  AX 2012 R3 where they have overlayed the showSalesTax() method in the LogisticsEntityPostalAddressFormHandler class.","pos":[4157,4361]},{"content":"After migration, the CodeUpgrade project will contain the LogisticsEntityPostalAddressFormHandler with the <bpt id=\"p1\">*</bpt>Your Solution<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>Microsoft AX 2012,<ept id=\"p2\">*</ept> and <bpt id=\"p3\">*</bpt>Microsoft AX<ept id=\"p3\">*</ept> sections to resolve for the showSalesTax() method.","pos":[4362,4576],"source":" After migration, the CodeUpgrade project will contain the LogisticsEntityPostalAddressFormHandler with the *Your Solution*, *Microsoft AX 2012,* and *Microsoft AX* sections to resolve for the showSalesTax() method."},{"content":"The commented Your Solution section shows that the showSalesTax() method was overlayed by adding an additional table to approve showing sales tax from.","pos":[4577,4728]},{"content":"This overlay is shown between the <ph id=\"ph1\">&amp;lt;</ph>isv<ph id=\"ph2\">&amp;gt;</ph> tags circled in red below.","pos":[4729,4801],"source":" This overlay is shown between the &lt;isv&gt; tags circled in red below."},{"pos":[4804,4842],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>4<ept id=\"p1\">](./media/41.png)](./media/41.png)</ept>","source":"[![4](./media/41.png)](./media/41.png)"},{"content":"When comparing this overlay with the code from Dynamics AX 2012, this is a simple change.","pos":[4844,4933]},{"content":"The overlay has added an additional table to the switch statement.","pos":[4934,5000]},{"pos":[5003,5041],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>5<ept id=\"p1\">](./media/51.png)](./media/51.png)</ept>","source":"[![5](./media/51.png)](./media/51.png)"},{"content":"However, the Dynamics 365 for Operations section does not appear to resemble either of the Dynamics AX 2012 code snippets.","pos":[5044,5166]},{"pos":[5169,5207],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>6<ept id=\"p1\">](./media/61.png)](./media/61.png)</ept>","source":"[![6](./media/61.png)](./media/61.png)"},{"content":"Upon deeper inspection, the code is calling a delegate method, showSalesTax<ph id=\"ph1\">\\_</ph>delegate().","pos":[5210,5298],"source":"Upon deeper inspection, the code is calling a delegate method, showSalesTax\\_delegate()."},{"pos":[5301,5444],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>this.showSalesTax<ph id=\"ph2\">\\_</ph>delegate(this.getCallerRecord().TableId, result);<ept id=\"p1\">](./media/showsalestax_delegate.png)](./media/showsalestax_delegate.png)</ept>","source":"[![this.showSalesTax\\_delegate(this.getCallerRecord().TableId, result);](./media/showsalestax_delegate.png)](./media/showsalestax_delegate.png)"},{"content":"The use of a delegate implies that code has been moved to another location.","pos":[5447,5522]},{"content":"The showSalesTax<ph id=\"ph1\">\\_</ph>delegate() has been declared in the Application Foundation and handled in the Application Suite.","pos":[5523,5637],"source":" The showSalesTax\\_delegate() has been declared in the Application Foundation and handled in the Application Suite."},{"content":"To view the code that has been moved, find the delegate handler.","pos":[5638,5702]},{"content":"The <bpt id=\"p1\">**</bpt>Finding Delegates and Handlers<ept id=\"p1\">**</ept> section contains methods to locate delegates and handlers.","pos":[5703,5800],"source":" The **Finding Delegates and Handlers** section contains methods to locate delegates and handlers."},{"content":"After finding the delegate handler method in the Application Suite, we see the code that has been moved from the showSalesTax() method.","pos":[5801,5936]},{"content":"The same overlayered changes applied in Dynamics AX 2012 can be applied in the delegate handler.","pos":[5937,6033]},{"pos":[6036,6163],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>Finding delegates and handlers code sample<ept id=\"p1\">](./media/findingdelegatesandhandles.png)](./media/findingdelegatesandhandles.png)</ept>","source":"[![Finding delegates and handlers code sample](./media/findingdelegatesandhandles.png)](./media/findingdelegatesandhandles.png)"},{"content":"After adding the new table to the switch statement in the delegate handler, the code will function as it did in Dynamics AX 2012.","pos":[6166,6295]},{"pos":[6298,6391],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>ShowSalesTax method code<ept id=\"p1\">](./media/showsalestaxmethod.png)](./media/showsalestaxmethod.png)</ept>","source":"[![ShowSalesTax method code](./media/showsalestaxmethod.png)](./media/showsalestaxmethod.png)"},{"pos":[6397,6418],"content":"Adding a new delegate","linkify":"Adding a new delegate","nodes":[{"content":"Adding a new delegate","pos":[0,21]}]},{"content":"In this scenario, we will modify an existing tax calculation method that resides in the Application Foundation to account for discounts created in the Application Suite.","pos":[6420,6589]},{"content":"The following class in the Foundation layer calculates the tax based on the gross total.","pos":[6590,6678]},{"pos":[6681,6722],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>10<ept id=\"p1\">](./media/101.png)](./media/101.png)</ept>","source":"[![10](./media/101.png)](./media/101.png)"},{"content":"In the Application Suite, we have introduced the notion of discounts by adding a ProductDiscount class that contains the current discount.","pos":[6725,6863]},{"pos":[6866,6907],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>11<ept id=\"p1\">](./media/112.png)](./media/112.png)</ept>","source":"[![11](./media/112.png)](./media/112.png)"},{"content":"The TaxCalculator class, in the lower Foundation layer, does not have access to the DiscountRate in the Suite layer and must use a delegate to update receipt total to use in the tax calculation.","pos":[6910,7104]},{"content":"In the SimpleTax class, we create a delegate method, applyDiscountDelegate, with the state information that is needed by the handler in the signature.","pos":[7105,7255]},{"content":"A delegate method is always empty because its only purpose is to define the contract between the delegate instance and the handler.","pos":[7256,7387]},{"pos":[7390,7431],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>12<ept id=\"p1\">](./media/121.png)](./media/121.png)</ept>","source":"[![12](./media/121.png)](./media/121.png)"},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> The signature for the delegate declaration, the delegate instance, and the delegate handler must match.","pos":[7434,7547],"source":"**Note:** The signature for the delegate declaration, the delegate instance, and the delegate handler must match."},{"content":"We now have to create an instance of the delegate at the point in the code where we would like the delegate handler to be run.","pos":[7548,7674]},{"content":"The changes in between the <ph id=\"ph1\">&amp;lt;</ph>isv<ph id=\"ph2\">&amp;gt;</ph> tags represent the added code.","pos":[7675,7744],"source":" The changes in between the &lt;isv&gt; tags represent the added code."},{"pos":[7747,7788],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>13<ept id=\"p1\">](./media/131.png)](./media/131.png)</ept>","source":"[![13](./media/131.png)](./media/131.png)"},{"content":"With the delegate in place, we now add a handler method in the Application Suite layer that has access to the discount information.","pos":[7791,7922]},{"pos":[7925,7964],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>14<ept id=\"p1\">](./media/14.png)](./media/14.png)</ept>","source":"[![14](./media/14.png)](./media/14.png)"},{"content":"Using the SubscribesTo keyword, we tie the applyDiscountDelegateHandler method as a handler to the applyDiscountDelegate delegate.","pos":[7967,8097]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> There can be more than one handler per delegate.","pos":[8098,8156],"source":"**Note:** There can be more than one handler per delegate."},{"content":"There is <bpt id=\"p1\">**</bpt>not<ept id=\"p1\">**</ept> a defined order in the processing of handler methods.","pos":[8157,8227],"source":" There is **not** a defined order in the processing of handler methods."},{"content":"If order is important, delegate handler pairs should be chained together.","pos":[8228,8301]},{"content":"With the final classes below, when the calculateTotalTax() method is run, the applyDiscountDelegate is fired and handled, updating the receiptTotal to provide an accurate tax calculation.","pos":[8302,8489]},{"pos":[8496,8505],"content":"Full Code","linkify":"Full Code","nodes":[{"content":"Full Code","pos":[0,9]}]},{"pos":[8513,8564],"content":"SimpleTax class in the Application Foundation Layer","linkify":"SimpleTax class in the Application Foundation Layer","nodes":[{"content":"SimpleTax class in the Application Foundation Layer","pos":[0,51]}]},{"pos":[8566,8605],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>15<ept id=\"p1\">](./media/15.png)](./media/15.png)</ept>","source":"[![15](./media/15.png)](./media/15.png)"},{"pos":[8613,8665],"content":"ProductDiscount class in the Application Suite layer","linkify":"ProductDiscount class in the Application Suite layer","nodes":[{"content":"ProductDiscount class in the Application Suite layer","pos":[0,52]}]},{"pos":[8667,8706],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>16<ept id=\"p1\">](./media/16.png)](./media/16.png)</ept>","source":"[![16](./media/16.png)](./media/16.png)"},{"pos":[8711,8738],"content":"Find delegates and handlers","linkify":"Find delegates and handlers","nodes":[{"content":"Find delegates and handlers","pos":[0,27]}]},{"content":"There are three key ways to find delegates and handlers","pos":[8739,8794]},{"content":"Metadata search","pos":[8800,8815]},{"content":"Class references","pos":[8820,8836]},{"content":"SubscribesTo references","pos":[8841,8864]},{"content":"The Metadata search tool, described on the <bpt id=\"p1\">[</bpt>Metadata search in Visual Studio<ept id=\"p1\">](..\\dev-tools\\metadata-search-visual-studio.md)</ept> page, is the best way to find either delegates or their handlers.","pos":[8866,9056],"source":"The Metadata search tool, described on the [Metadata search in Visual Studio](..\\dev-tools\\metadata-search-visual-studio.md) page, is the best way to find either delegates or their handlers."},{"content":"In Visual Studio, go to **Dynamics 365 **<ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p1\">**</bpt>Metadata Search<ept id=\"p1\">**</ept> to open the metadata search tool.","pos":[9057,9156],"source":" In Visual Studio, go to **Dynamics 365 **&gt; **Metadata Search** to open the metadata search tool."},{"pos":[9159,9207],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>Del15<ept id=\"p1\">](./media/del15.png)](./media/del15.png)</ept>","source":"[![Del15](./media/del15.png)](./media/del15.png)"},{"content":"In the search field, type “code:<ph id=\"ph1\">&amp;lt;</ph>delegate name<ph id=\"ph2\">&amp;gt;</ph>” which will restrict the search to code and find any use of the delegate name, returning both the delegate and handler.","pos":[9210,9383],"source":"In the search field, type “code:&lt;delegate name&gt;” which will restrict the search to code and find any use of the delegate name, returning both the delegate and handler."},{"content":"Metadata search will search the entire code base and may take some time to complete, but will return any use of the search term in code.","pos":[9384,9520]},{"pos":[9523,9571],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>Del16<ept id=\"p1\">](./media/del16.png)](./media/del16.png)</ept>","source":"[![Del16](./media/del16.png)](./media/del16.png)"},{"content":"Methods two and three can be used in parallel to the metadata search.","pos":[9574,9643]},{"content":"The class where a delegate is defined can also serve as a means to narrow down the search for a delegate or handler.","pos":[9644,9760]},{"content":"The SubscribesTo keyword requires the class name where the delegate was defined.","pos":[9761,9841]},{"content":"Visual Studio’s find references (right-click the class name <ph id=\"ph1\">&amp;gt;</ph> find references) will return a list of files that reference the class.","pos":[9842,9977],"source":" Visual Studio’s find references (right-click the class name &gt; find references) will return a list of files that reference the class."},{"content":"This list will include both the class definition where the delegate is declared and the handler referencing the class.","pos":[9978,10096]},{"content":"Finding class references is not a perfect method and will require some manual searching through class references.","pos":[10097,10210]},{"content":"However, it produces a smaller subset of files and can be faster than a metadata search.","pos":[10211,10299]},{"pos":[10302,10359],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>Del17<ept id=\"p1\">](./media/del17-1024x300.png)](./media/del17.png)</ept>","source":"[![Del17](./media/del17-1024x300.png)](./media/del17.png)"},{"content":"Similar to finding class references, finding all references can be done on the SubscribesTo keyword.","pos":[10362,10462]},{"content":"The resulting list will include all static delegate handlers.","pos":[10463,10524]},{"content":"Manually going through this list provides another means for finding static delegate handlers.","pos":[10525,10618]},{"content":"This will not return dynamically declared delegate handlers that do not use the SubscribesTo keyword.","pos":[10619,10720]},{"pos":[10723,10780],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">![</ph>Del18<ept id=\"p1\">](./media/del18-1024x328.png)](./media/del18.png)</ept>","source":"[![Del18](./media/del18-1024x328.png)](./media/del18.png)"}],"content":"---\n# required metadata\n\ntitle: Use delegates to solve dependencies between models when migrating code\ndescription: This topic explains how delegate methods serve as a means for defining a contract between the delegate instance and the delegate handler.\nauthor: maertenm\nmanager: AnnBe\nms.date: 04/04/2017\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: robinr\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 27001\nms.assetid: 6640ae38-58f0-4a29-abca-5acd9489d45d\nms.search.region: Global\n# ms.search.industry: \nms.author: maertenm\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# Use delegates to solve dependencies between models when migrating code\n\nThis topic explains how delegate methods serve as a means for defining a contract between the delegate instance and the delegate handler.\n\nOverview\n--------\n\nMicrosoft Dynamics 365 for Operations is split into more several models, with each model in separate package. The principal 3 models are Application Platform, Application Foundation, and Application Suite (See [Models](..\\dev-tools\\models.md) to learn about models and packages). With the model split, a hierarchy has been created where a higher model can take dependencies and access elements in the models below, but not in models above. In this setup, Application Suite has full access to its elements, Application Foundation’s elements, and Application Platform’s elements. Application Foundation can access its own elements and those of Application Platform. Finally, Application Platform can only access its own elements. \n\n[![Del1](./media/del1.jpg)](./media/del1.jpg) \n\nWhile the model split provides many benefits, it creates a problem when trying to access elements defined in higher models. Delegates are the recommended method for accessing elements in higher models from a lower model. Delegates are very similar to events in that when a delegate instance is invoked, a handler with compatible signature code is executed. This permits higher layer code, the handler, to be called by lower layer code, the delegate instance.\n\n## Create delegates and handlers\nA delegate declaration must have three things:\n\n-   The delegate keyword\n-   Type void\n-   Empty method\n\nDelegate methods serve as a means for defining a contract between the delegate instance and the delegate handler. A delegate takes no action itself. This is enforced by having a void type and having no code in the method. \n\n[![1](./media/12.png)](./media/12.png) \n\nAdding the SubscribesTo keyword to a method will create a static delegate handler. SubscribesTo requires the class name of the delegate, and the string name of the delegate method. \n\n[![2](./media/21.png)](./media/21.png) \n\nIn order for a delegate to be properly handled, the delegate method declaration, the delegate instance, and the delegate handler must have the *same* method signature. For example, the delegate instance below takes two inputs, a real number and an EventHandlerResult, matching the delegate declaration and handler signatures above. \n\n[![3](./media/32.png)](./media/32.png) \n\nDue to the fact that delegates do not have a return value, an EventHandlerResult is passed as a parameter to provide access to the needed result value after the delegate has returned. This topic focuses on static delegate handlers using the SubscribesTo. The delegate functionality from Dynamics AX 2012 remains. [How to use X++ Delegates in Dynamics AX 2012](http://blogs.msdn.com/b/x/archive/2011/08/02/how-to-use-x-delegates-in-dynamics-ax-2012.aspx) is a great blog post on MSDN by Microsoft developer Marcos Calderon on delegate concepts in Dynamics AX 2012. These concepts still apply.\n\n## Example scenarios\n### Overlaying an existing delegate\n\nIn many cases where delegates are needed, the code that was formerly overlayed has already been moved to a delegate handler by Microsoft. In these instances, Microsoft created delegates that can be leveraged and the code can be overlayed in a similar manner in the delegate handler. In this scenario, an Independent Software Vendor (ISV) is migrating code from Dynamics  AX 2012 R3 where they have overlayed the showSalesTax() method in the LogisticsEntityPostalAddressFormHandler class. After migration, the CodeUpgrade project will contain the LogisticsEntityPostalAddressFormHandler with the *Your Solution*, *Microsoft AX 2012,* and *Microsoft AX* sections to resolve for the showSalesTax() method. The commented Your Solution section shows that the showSalesTax() method was overlayed by adding an additional table to approve showing sales tax from. This overlay is shown between the &lt;isv&gt; tags circled in red below. \n\n[![4](./media/41.png)](./media/41.png)\n\nWhen comparing this overlay with the code from Dynamics AX 2012, this is a simple change. The overlay has added an additional table to the switch statement. \n\n[![5](./media/51.png)](./media/51.png) \n\nHowever, the Dynamics 365 for Operations section does not appear to resemble either of the Dynamics AX 2012 code snippets. \n\n[![6](./media/61.png)](./media/61.png) \n\nUpon deeper inspection, the code is calling a delegate method, showSalesTax\\_delegate(). \n\n[![this.showSalesTax\\_delegate(this.getCallerRecord().TableId, result);](./media/showsalestax_delegate.png)](./media/showsalestax_delegate.png) \n\nThe use of a delegate implies that code has been moved to another location. The showSalesTax\\_delegate() has been declared in the Application Foundation and handled in the Application Suite. To view the code that has been moved, find the delegate handler. The **Finding Delegates and Handlers** section contains methods to locate delegates and handlers. After finding the delegate handler method in the Application Suite, we see the code that has been moved from the showSalesTax() method. The same overlayered changes applied in Dynamics AX 2012 can be applied in the delegate handler. \n\n[![Finding delegates and handlers code sample](./media/findingdelegatesandhandles.png)](./media/findingdelegatesandhandles.png) \n\nAfter adding the new table to the switch statement in the delegate handler, the code will function as it did in Dynamics AX 2012. \n\n[![ShowSalesTax method code](./media/showsalestaxmethod.png)](./media/showsalestaxmethod.png)\n\n### Adding a new delegate\n\nIn this scenario, we will modify an existing tax calculation method that resides in the Application Foundation to account for discounts created in the Application Suite. The following class in the Foundation layer calculates the tax based on the gross total. \n\n[![10](./media/101.png)](./media/101.png) \n\nIn the Application Suite, we have introduced the notion of discounts by adding a ProductDiscount class that contains the current discount. \n\n[![11](./media/112.png)](./media/112.png) \n\nThe TaxCalculator class, in the lower Foundation layer, does not have access to the DiscountRate in the Suite layer and must use a delegate to update receipt total to use in the tax calculation. In the SimpleTax class, we create a delegate method, applyDiscountDelegate, with the state information that is needed by the handler in the signature. A delegate method is always empty because its only purpose is to define the contract between the delegate instance and the handler. \n\n[![12](./media/121.png)](./media/121.png) \n\n**Note:** The signature for the delegate declaration, the delegate instance, and the delegate handler must match. We now have to create an instance of the delegate at the point in the code where we would like the delegate handler to be run. The changes in between the &lt;isv&gt; tags represent the added code. \n\n[![13](./media/131.png)](./media/131.png) \n\nWith the delegate in place, we now add a handler method in the Application Suite layer that has access to the discount information. \n\n[![14](./media/14.png)](./media/14.png) \n\nUsing the SubscribesTo keyword, we tie the applyDiscountDelegateHandler method as a handler to the applyDiscountDelegate delegate. **Note:** There can be more than one handler per delegate. There is **not** a defined order in the processing of handler methods. If order is important, delegate handler pairs should be chained together. With the final classes below, when the calculateTotalTax() method is run, the applyDiscountDelegate is fired and handled, updating the receiptTotal to provide an accurate tax calculation.\n\n#### Full Code\n\n##### SimpleTax class in the Application Foundation Layer\n\n[![15](./media/15.png)](./media/15.png)\n\n##### ProductDiscount class in the Application Suite layer\n\n[![16](./media/16.png)](./media/16.png)\n\n## Find delegates and handlers\nThere are three key ways to find delegates and handlers\n\n-   Metadata search\n-   Class references\n-   SubscribesTo references\n\nThe Metadata search tool, described on the [Metadata search in Visual Studio](..\\dev-tools\\metadata-search-visual-studio.md) page, is the best way to find either delegates or their handlers. In Visual Studio, go to **Dynamics 365 **&gt; **Metadata Search** to open the metadata search tool. \n\n[![Del15](./media/del15.png)](./media/del15.png) \n\nIn the search field, type “code:&lt;delegate name&gt;” which will restrict the search to code and find any use of the delegate name, returning both the delegate and handler. Metadata search will search the entire code base and may take some time to complete, but will return any use of the search term in code. \n\n[![Del16](./media/del16.png)](./media/del16.png) \n\nMethods two and three can be used in parallel to the metadata search. The class where a delegate is defined can also serve as a means to narrow down the search for a delegate or handler. The SubscribesTo keyword requires the class name where the delegate was defined. Visual Studio’s find references (right-click the class name &gt; find references) will return a list of files that reference the class. This list will include both the class definition where the delegate is declared and the handler referencing the class. Finding class references is not a perfect method and will require some manual searching through class references. However, it produces a smaller subset of files and can be faster than a metadata search. \n\n[![Del17](./media/del17-1024x300.png)](./media/del17.png) \n\nSimilar to finding class references, finding all references can be done on the SubscribesTo keyword. The resulting list will include all static delegate handlers. Manually going through this list provides another means for finding static delegate handlers. This will not return dynamically declared delegate handlers that do not use the SubscribesTo keyword. \n\n[![Del18](./media/del18-1024x328.png)](./media/del18.png)\n\n"}