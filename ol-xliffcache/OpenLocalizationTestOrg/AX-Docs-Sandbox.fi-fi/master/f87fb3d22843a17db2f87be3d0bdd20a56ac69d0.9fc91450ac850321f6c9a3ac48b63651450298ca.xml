{"content":"---\n# required metadata\n\ntitle: X++ syntax\ndescription: This topic contains contains the syntax reference for X++. \nauthor: RobinARH\nmanager: AnnBe\nms.date: 04/04/2017\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \n# ms.reviewer: 61\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 72211\nms.assetid: bb238a46-3a43-4f3c-a9b6-86b26e988881\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# X++ syntax\n\n[!include[banner](../includes/banner.md)]\n\n\nThis topic contains contains the syntax reference for X++. \n\nX++ Keywords\n------------\n\nThe X++ keywords shown in the following table are reserved. These keywords cannot be used for any other purpose.\n\n<table>\n<colgroup>\n<col width=\"33%\" />\n<col width=\"33%\" />\n<col width=\"33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Reserved word</th>\n<th>Description</th>\n<th>More information</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><strong>!</strong></td>\n<td>Not.</td>\n<td>Relational Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>!=</strong></td>\n<td>Inequality operator (not equal to).</td>\n<td>Relational Operators</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>#</strong></td>\n<td>Prefix on macro names.</td>\n<td>How to: Use #define and #if to Test a Macro</td>\n</tr>\n<tr class=\"even\">\n<td><strong>&amp;</strong></td>\n<td>Binary AND.</td>\n<td>Arithmetic Operators</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>&amp;&amp;</strong></td>\n<td>Logical AND.</td>\n<td>Relational Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>(</strong></td>\n<td>Function call operator, which indicates the beginning of the function call.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>)</strong></td>\n<td>Function call operator, which indicates the end of the function call.</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><strong>*</strong></td>\n<td>Multiply. The asterisk (<span class=\"code\">*</span>) is also used in X++ SQL. One use is to signify all fields from the tables on a <code>select</code> statement. Another use is as a wildcard with the <code>like</code> operator, to signify 0 to many characters of any kind. The <code>like</code> operator also uses the <span class=\"code\">?</span> character.</td>\n<td>Arithmetic Operators</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>^</strong></td>\n<td>Binary XOR.</td>\n<td>Arithmetic Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>|</strong></td>\n<td>Binary OR.</td>\n<td>Arithmetic Operators</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>||</strong></td>\n<td>Logical OR.</td>\n<td>Relational Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>~</strong></td>\n<td>Not.</td>\n<td>Arithmetic Operators</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>+</strong></td>\n<td>Plus.</td>\n<td>Arithmetic Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>++</strong></td>\n<td>Increment.</td>\n<td>Assignment Operators</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>+=</strong></td>\n<td>Additive assignment.</td>\n<td>Assignment Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>,</strong></td>\n<td>Comma operator. Expressions separated by commas are evaluated left-to-right.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>-</strong></td>\n<td>Minus.</td>\n<td>Arithmetic Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>--</strong></td>\n<td>Decrement operator.</td>\n<td>Assignment Operators</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>-=</strong></td>\n<td>Subtractive assignment.</td>\n<td>Assignment Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>.</strong></td>\n<td>Class member access operator, for example, <code>formRun.run</code> accesses the <code>run</code> method of an object of the class type <code>FormRun</code>.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>/</strong></td>\n<td>Divide.</td>\n<td>Arithmetic Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>\\</strong></td>\n<td>Escape in strings. Escapes extra quotation marks, and certain letters such as <span class=\"code\">\\t</span> for tab.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>@</strong></td>\n<td>Escape of keywords. For example, <span class=\"code\">str @abstract;</span> would fail to compile without the <strong>@</strong> sign. Also affects literal strings, by negating the effect of the \\ escape character, and by enabling the string to span more than one line in the source code. The new line is represented by one character of hexadecimal 0x0A, which is commonly called a line feed. No carriage return character of hexadecimal 0x0D is included, as in 0x0D0A.</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><strong>:</strong></td>\n<td>Field declaration or label specifier. The colon (<span class=\"code\">:</span>) character is also used on the <code>switch</code> statement.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>::</strong></td>\n<td>Used to call static (class) methods: <span class=\"code\">ClassName::methodName</span>.</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><strong>;</strong></td>\n<td>Terminates statements. Used in <code>for</code> loops or as a separator of statements.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>&lt;</strong></td>\n<td>Less than.</td>\n<td>Relational Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>&lt;&lt;</strong></td>\n<td>Left shift.</td>\n<td>Arithmetic Operators</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>&lt;=</strong></td>\n<td>Less than or equal.</td>\n<td>Arithmetic Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>=</strong></td>\n<td>Assignment operator. The argument to the left of &quot;<strong>=</strong>&quot; is set to the value of the argument to the right.</td>\n<td>Assignment Operators</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>==</strong></td>\n<td>Returns true if both expressions are equal.</td>\n<td>Relational Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>&gt;</strong></td>\n<td>Greater than.</td>\n<td>Relational Operators</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>&gt;=</strong></td>\n<td>Greater than or equal.</td>\n<td>Relational Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>&gt;&gt;</strong></td>\n<td>Right shift.</td>\n<td>Arithmetic Operators</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>?</strong></td>\n<td>Ternary operator. The question mark (<span class=\"code\">?</span>) character is also used by the <code>like</code> operator to signify exactly one character of any kind. The <code>like</code> operator also uses the <span class=\"code\">*</span> character.</td>\n<td>Ternary Operator (?)</td>\n</tr>\n<tr class=\"even\">\n<td><strong>[</strong></td>\n<td>Array declarator, open. Must be used with &quot;<strong>]</strong>&quot;.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>]</strong></td>\n<td>Array declarator, close. Must be used with &quot;<strong>[</strong>&quot;.</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><strong>{</strong></td>\n<td>Indicates the beginning of a number of statements. The last of these statements must be followed by a &quot;<strong>}</strong>&quot;.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>}</strong></td>\n<td>Indicates the end of a number of statements. A &quot;<strong>{</strong>&quot; must appear before the first of these statements.</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><strong>abstract</strong></td>\n<td>Class and method modifier. An <strong>abstract</strong> class cannot be constructed with the <strong>new</strong> keyword. An <strong>abstract</strong> method cannot be called. A table can also be modified as abstract by setting its <span class=\"ui\">Abstract</span> property to <span class=\"ui\">Yes</span> in the AOT, or by using the <code>DictTable</code> class. The <span class=\"ui\">Abstract</span> property defaults to <span class=\"ui\">No</span>, and it cannot be set unless the table is extended by another table. Each row in an abstract table must have a dependent row in a derived table. This means that each row in an abstract table has a value greater than 0 (zero) in its <span class=\"ui\">InstanceRelationType</span> property field. There are no other effects from marking a table as abstract. Informally, programmers often use the term <span class=\"term\">concrete</span> to describe a class that is non-<strong>abstract</strong>.</td>\n<td>Method Modifiers Table Inheritance Overview</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>anytype</strong></td>\n<td>The method can return any data type.</td>\n<td>Anytype</td>\n</tr>\n<tr class=\"even\">\n<td><strong>as</strong></td>\n<td>Needed when you assign a base class variable to a derived class variable. For example, given a <code>Derived</code> class that <strong>extends</strong> a <code>Base</code> class, the statement <code>myDerived = myBase as Derived;</code> avoids a compiler error by using the <strong>as</strong> keyword. This keyword also applies when you assign a base table variable to a derived table variable.</td>\n<td>Expression Operators: Is and As for Inheritance</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>asc</strong></td>\n<td>An option on the <code>order</code> <code>by</code> or <code>group</code> <code>by</code> clause in a <code>select</code> statement. The sorting is ascending.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>at</strong></td>\n<td>Specifies the position of a print window.</td>\n<td>Print Statements</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>avg</strong></td>\n<td>Returns the average of the fields from the rows specified by the <code>group by</code> clause in a <code>select</code> statement.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>break</strong></td>\n<td>Immediate exit from code block.</td>\n<td>Break Statements</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>breakpoint</strong></td>\n<td>Represents a breakpoint that is set for debugging purposes. To set a breakpoint in your code, write: <code>breakpoint;</code></td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><strong>by</strong></td>\n<td>Part of a reserved term, such as group by and order by.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>byref</strong></td>\n<td>Specifies that the parameter being passed to the called method is being passed by reference (address), instead of by value. <strong>Byref</strong> is used in X++ when calling a .NET method that takes a parameter by reference (such as with the C# keywords <strong>out</strong> or <strong>ref</strong>).</td>\n<td>How to: Use the byref Keyword for CLR Interop.</td>\n</tr>\n<tr class=\"even\">\n<td><strong>case</strong></td>\n<td>Selection within a <code>switch</code> statement.</td>\n<td>Switch Statements</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>catch</strong></td>\n<td>Used in exception handling.</td>\n<td>Exception Handling with try and catch Keywords</td>\n</tr>\n<tr class=\"even\">\n<td><strong>changeCompany</strong></td>\n<td>Changes database settings to another company.</td>\n<td>Change Company Design Pattern</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>class</strong></td>\n<td>Declares a class.</td>\n<td>Classes in X++</td>\n</tr>\n<tr class=\"even\">\n<td><strong>client</strong></td>\n<td>Method modifier.</td>\n<td>Method Modifiers</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>container</strong></td>\n<td>Specifies a variable of type <code>container</code>.</td>\n<td>Containers</td>\n</tr>\n<tr class=\"even\">\n<td><strong>continue</strong></td>\n<td>Forces the next iteration of a loop.</td>\n<td>Continue Statements</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>count</strong></td>\n<td>Returns the number of records from the rows specified by the <code>group by</code> clause in a <code>select</code> statement.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>crossCompany</strong></td>\n<td>Causes a <code>select</code> statement to return data for all companies that the user is authorized to read from.</td>\n<td>Cross-Company X++ Code Basics</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>date</strong></td>\n<td>Specifies a variable of type <code>date</code>.</td>\n<td>Dates</td>\n</tr>\n<tr class=\"even\">\n<td><strong>default</strong></td>\n<td>Default case within <code>switch</code> statements.</td>\n<td>Switch Statements</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>delegate</strong></td>\n<td>A class member that is able to store multiple references to methods in other classes, and to call all those methods when prompted to do so. A delegate can store references to various kinds of methods including the following:\n<ul>\n<li>static methods on X++ classes</li>\n<li>instance methods on X++ classes</li>\n<li>methods on .NET Framework classes</li>\n</ul></td>\n<td>Event Terminology and Keywords X++, C# Comparison: Event</td>\n</tr>\n<tr class=\"even\">\n<td><strong>delete_from</strong></td>\n<td>Allows you to delete multiple records from the database at the same time.</td>\n<td>delete_from</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>desc</strong></td>\n<td>An option on the <code>order by</code> or <code>group by</code> clause in a <code>select</code> statement. The sorting is descending.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>display</strong></td>\n<td>Method modifier.</td>\n<td>Method Modifiers</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>div</strong></td>\n<td>Integer division.</td>\n<td>Arithmetic Operators</td>\n</tr>\n<tr class=\"even\">\n<td><strong>do</strong></td>\n<td>Beginning of a <code>do...while</code> loop.</td>\n<td>Do...while Loops</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>edit</strong></td>\n<td>Method modifier.</td>\n<td>Method Modifiers</td>\n</tr>\n<tr class=\"even\">\n<td><strong>else</strong></td>\n<td>Conditional execution (<code>if...else</code>).</td>\n<td>if and if ... else Statements</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>eventHandler</strong></td>\n<td>Must be used each time you either add or delete a method reference from a delegate by using the <span class=\"code\">+=</span> or <span class=\"code\">-=</span> operator. For example: <span class=\"code\">myDelegate += eventHandler(OtherClass::myStaticMethod);</span></td>\n<td>Event Terminology and Keywords X++, C# Comparison: Event</td>\n</tr>\n<tr class=\"even\">\n<td><strong>exists</strong></td>\n<td>Used with <code>join</code> clauses in <code>select</code> statements.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>extends</strong></td>\n<td>A class or interface declaration clause. If your class does not explicitly extend another class, your class is considered to extend the <code>Object</code> class (as if you had written &quot;extends Object&quot;).</td>\n<td>Creating a Subclass</td>\n</tr>\n<tr class=\"even\">\n<td><strong>false</strong></td>\n<td>Boolean literal.</td>\n<td>Booleans</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>final</strong></td>\n<td>Class and method modifier.</td>\n<td>Method Modifiers</td>\n</tr>\n<tr class=\"even\">\n<td><strong>firstFast</strong></td>\n<td>Used in <code>select</code> statements to speed up the fetch for the first row.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>firstOnly</strong></td>\n<td>Used in <code>select</code> statements to fetch only the first record. The <code>firstOnly</code> keyword does not guarantee that a maximum of one record is retrieved by an X++ SQL <code>select</code> statement. If the AOS can use the <code>EntireTable</code> cache to satisfy the data demands of the <code>select</code> statement, the <code>firstOnly</code> keyword is ignored.</td>\n<td>Select Statement Syntax Set-based Caching</td>\n</tr>\n<tr class=\"even\">\n<td><strong>firstOnly10</strong></td>\n<td>Same as <strong>firstOnly</strong>, except returns 10 rows instead of one.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>firstOnly100</strong></td>\n<td>Same as <strong>firstOnly</strong>, except returns 100 rows instead of one.</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><strong>firstOnly1000</strong></td>\n<td>Same as <strong>firstOnly</strong>, except returns 1000 rows instead of one.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>flush</strong></td>\n<td>Clears an entire table cache. Here is the syntax for the <code>flush</code> statement: <code>YourTable ytBuffer;</code>  <code>flush ytBuffer;</code></td>\n<td>Set-based Caching</td>\n</tr>\n<tr class=\"even\">\n<td><strong>for</strong></td>\n<td>For loop iteration.</td>\n<td>For Loops</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>forceLiterals</strong></td>\n<td>Used in <code>select</code> statements to reveal actual values that are used in <code>where</code> clauses to the Microsoft SQL Server database at the time of optimization.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>forceNestedLoop</strong></td>\n<td>Forces the SQL Server database to use a nested-loop algorithm to process a particular SQL statement containing a <code>join</code>.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>forcePlaceholders</strong></td>\n<td>Used in <code>select</code> statements to instruct the kernel not to reveal the actual values used in <code>where</code> clauses to the Microsoft SQL Server database at the time of optimization.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>forceSelectOrder</strong></td>\n<td>Forces the SQL Server database to access the tables in a join in the specified order.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>forUpdate</strong></td>\n<td>Selects records exclusively for update. The operation to be performed on the records that are fetched is an update. Depending on the underlying database, the records may be locked for other users.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>from</strong></td>\n<td>Part of a <code>select</code> statement. The <code>from</code> clause specifies the table in which the columns exists.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>group</strong></td>\n<td>Part of the <code>group by</code> clause in a <code>select</code> statement.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>if</strong></td>\n<td>Conditional execution.</td>\n<td>if and if ... else Statements</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>implements</strong></td>\n<td>Implements an interface.</td>\n<td>Interfaces Overview</td>\n</tr>\n<tr class=\"even\">\n<td><strong>insert_recordset</strong></td>\n<td>Copies data from one or more tables into one resulting destination table on a single server trip.</td>\n<td>insert_recordset</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>int</strong></td>\n<td>Specifies a variable of type <code>integer</code> (32-bit).</td>\n<td>Integers</td>\n</tr>\n<tr class=\"even\">\n<td><strong>int64</strong></td>\n<td>Specifies a variable of type <code>integer</code> (64-bit).</td>\n<td>Integers</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>interface</strong></td>\n<td>Interface declaration.</td>\n<td>Interfaces Overview</td>\n</tr>\n<tr class=\"even\">\n<td><strong>is</strong></td>\n<td>Asks whether the object referenced by a class variable either inherits from the given class or is of the given class. For example, given a <code>Derived</code> class that <strong>extends</strong> a <code>Base</code> class, the expression <code>(myDerived is Base)</code> returns <strong>true</strong>. This keyword applies to class inheritance and table inheritance.</td>\n<td>Expression Operators: Is and As for Inheritance</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>join</strong></td>\n<td>Tables are joined on columns common to both tables. You can generate a single result set based on multiple tables through the use of joins.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>like</strong></td>\n<td>Tests for matches by pattern, with wildcard symbols * and ?. The string on the right side of the <code>like</code> operator must use four backslash characters to represent one backslash. Examples follow:\n<ul>\n<li><span class=\"code\">(&quot;\\\\&quot; like &quot;*\\\\*&quot; )</span> //Resolves to false.</li>\n<li><span class=\"code\">(&quot;\\\\&quot; like &quot;*\\\\\\\\*&quot;)</span> //Resolves to true.</li>\n</ul></td>\n<td>Relational Operators</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>maxof</strong></td>\n<td>Returns the maximum of the fields from the rows specified by the <code>group by</code> clause.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>minof</strong></td>\n<td>Returns the minimum of the fields from the rows specified by the <code>group by</code> clause.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>mod</strong></td>\n<td>Returns the integer remainder of the left expression1 divided by the right expression2. Informally this is sometimes called the modulo operator. <code>((12 mod 7) == 5)</code> is true.</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><strong>new</strong></td>\n<td>Operator. Creates an instance of an anonymous class that is assignment-compatible with the named class/interface reference variables, or allocates memory for an array.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>next</strong></td>\n<td>Fetches the next record in a table.</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><strong>noFetch</strong></td>\n<td>Indicates that no records are to be fetched at present.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>notExists</strong></td>\n<td>Used with <code>join</code> clauses in <code>select</code> statements.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>null</strong></td>\n<td>Symbolic constant.</td>\n<td></td>\n</tr>\n<tr class=\"odd\">\n<td><strong>optimisticLock</strong></td>\n<td>Forces a statement to run with optimistic concurrency control, even if a different value is set on the table.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>order</strong></td>\n<td>Part of the <code>order by</code> clause in a <code>select</code> statement.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>outer</strong></td>\n<td><span class=\"keyword\">outer join</span>.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>pause</strong></td>\n<td>Halts the execution of a job. The user is asked to state whether execution should continue.</td>\n<td>Select Statements</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>pessimisticLock</strong></td>\n<td>Forces a statement to run with pessimistic concurrency control, even if a different value is set on the table.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"even\">\n<td><strong>print</strong></td>\n<td>Allows you to display output on the screen.</td>\n<td>Print Statements</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>private</strong></td>\n<td>Method access modifier.</td>\n<td>Method Access Control</td>\n</tr>\n<tr class=\"even\">\n<td><strong>protected</strong></td>\n<td>Method access modifier.</td>\n<td>Method Access Control</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>public</strong></td>\n<td>Method access modifier.</td>\n<td>Method Access Control</td>\n</tr>\n<tr class=\"even\">\n<td><strong>real</strong></td>\n<td>Specifies a variable of type <code>real</code>.</td>\n<td>Reals</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>repeatableRead</strong></td>\n<td>Specifies that no other transactions can modify data that has been read by logic inside the current transaction, until after the current transaction completes. An explicit transaction completes at either <strong>ttsAbort</strong> or at the outermost <strong>ttsCommit</strong>. For a stand-alone <strong>select</strong> statement, the transaction duration is the duration of the <strong>select</strong> command. However, the database sometimes enforces the equivalent of <strong>repeatableRead</strong> in individual <strong>select</strong> statements even without this keyword appearing in your X++ code (depending on how the database decides to scan the tables).</td>\n<td>For more information, see the documentation for the underlying relational database product.</td>\n</tr>\n<tr class=\"even\">\n<td><strong>retry</strong></td>\n<td>Used in exception handling.</td>\n<td>Exception Handling with try and catch Keywords</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>return</strong></td>\n<td>Exits from a method.</td>\n<td>Declaration of Methods</td>\n</tr>\n<tr class=\"even\">\n<td><strong>reverse</strong></td>\n<td>Records are returned in reverse order.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>select</strong></td>\n<td>The <code>select</code> clause designates which columns or views are shown in the result set.</td>\n<td>Select Statements</td>\n</tr>\n<tr class=\"even\">\n<td><strong>server</strong></td>\n<td>Method modifier.</td>\n<td>Method Modifiers</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>setting</strong></td>\n<td>Used with the <span class=\"code\">update_recordset</span> command.</td>\n<td>update_recordset</td>\n</tr>\n<tr class=\"even\">\n<td><strong>static</strong></td>\n<td>Static methods may not refer to instance variables (only to static variables); may be invoked by using the class name rather than on an instance of the class (&quot;<code>MyClass.aStaticProcedure</code>&quot;).</td>\n<td>Method Modifiers</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>str</strong></td>\n<td>Specifies a variable of type <code>string</code>.</td>\n<td>Strings</td>\n</tr>\n<tr class=\"even\">\n<td><strong>sum</strong></td>\n<td>Returns the sum of the fields from the rows specified by the <code>group by</code> clause in a <code>select</code> statement.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>super</strong></td>\n<td>Calls the method that was overridden by the current method.</td>\n<td>Table Methods</td>\n</tr>\n<tr class=\"even\">\n<td><strong>switch</strong></td>\n<td>Switch selection statement.</td>\n<td>Switch Statements</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>tableLock</strong></td>\n<td>Obsolete; <strong>tableLock</strong> is no longer available.</td>\n<td></td>\n</tr>\n<tr class=\"even\">\n<td><strong>this</strong></td>\n<td>A reference to the current instance of the class. Used in X++ code inside a method of the class. Used to reference <em>method</em> members of the class, but not <em>field</em> members of the class.<code>public str getFullName()</code>  <span class=\"code\">{</span>  <span class=\"code\">    // Next statement fails to compile without 'this.'.</span>  <code>    return this.concatenateFirstAndLastNames();</code>  <span class=\"code\">}</span></td>\n<td>Loosely similar to the system variable that is named <code>element</code>. You use <code>element</code> in form control methods to reference the containing form. For more information, see Using Variables with Forms.</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>throw</strong></td>\n<td>Used in exception handling.</td>\n<td>Exception Handling with try and catch Keywords</td>\n</tr>\n<tr class=\"even\">\n<td><strong>true</strong></td>\n<td>Boolean literal.</td>\n<td>Booleans</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>try</strong></td>\n<td>Used in exception handling.</td>\n<td>Exception Handling with try and catch Keywords</td>\n</tr>\n<tr class=\"even\">\n<td><strong>ttsAbort</strong></td>\n<td>Discards all changes in the current transaction.</td>\n<td>Transaction Integrity</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>ttsBegin</strong></td>\n<td>Marks the beginning of a transaction.</td>\n<td>Transaction Integrity</td>\n</tr>\n<tr class=\"even\">\n<td><strong>ttsCommit</strong></td>\n<td>Marks the end of a transaction.</td>\n<td>Transaction Integrity</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>update_recordset</strong></td>\n<td>Allows the manipulation of row sets within one operation.</td>\n<td>update_recordset</td>\n</tr>\n<tr class=\"even\">\n<td><strong>validTimeState</strong></td>\n<td>Filters rows that are retrieved from a valid time state table by an X++ SQL <code>select</code> statement. For example: <span class=\"code\">select validTimeState(myDateEffective) * from xMyTable;</span> ...or...  <span class=\"code\">select validTimeState(myDateFrom, myDateTo) * from xMyTable;</span></td>\n<td>Effects of Valid Time State Tables on Read and Write Operations</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>void</strong></td>\n<td>Identifies a method that does not return a value.</td>\n<td>Declaration of Methods</td>\n</tr>\n<tr class=\"even\">\n<td><strong>where</strong></td>\n<td>Part of a <code>select</code> statement. The <code>where</code> clause specifies the conditions to be satisfied; that is, the rows that you want to include in the result.</td>\n<td>Select Statement Syntax</td>\n</tr>\n<tr class=\"odd\">\n<td><strong>while</strong></td>\n<td>Iteration statement. Executes a statement or block repeatedly when a test condition is true.</td>\n<td>While Loops while select Statements</td>\n</tr>\n<tr class=\"even\">\n<td><strong>window</strong></td>\n<td>Allows you to alter the size of the output window.</td>\n<td>Print Statements</td>\n</tr>\n</tbody>\n</table>\n\n## Expressions Syntax\nAn expression in X++ is used in either a mathematical or logical way. Expressions are built on the data types of the language; that is, an expression returns a value of some type. This value can be used in calculations, assignments, conditional statements, and so on.\n\n### EBNF Description of Expressions in X++\n\n|                    |     |                                                                                  |\n|--------------------|-----|----------------------------------------------------------------------------------|\n| Expression         | =   | Simple-expression \\[RelationalOperator Simple-expression \\]                      |\n| RelationalOperator | =   | = | != | &lt; | &gt; | &lt;= | &gt;= | like                                      |\n| Simple-expression  | =   | Simple-expression \\[ + | - | | \\] Term | Term                                    |\n| Term               | =   | Compfactor { Mult-operator CompFactor }                                          |\n| Mult-operator      | =   | \\* | / | div | mod | &lt;&lt; | &gt;&gt; | & | ^ | |                             |\n| CompFactor         | =   | \\[ ! \\] \\[ - | ~ \\] Factor                                                       |\n| Factor             | =   | Literal | Enum | Variable | FunctionCall | ( If-expression ) | Select-expression |\n| Enum               | =   | EnumName :: Literal                                                              |\n| Variable           | =   | Identifier \\[ \\[ Expression \\] \\] \\[ . Expression \\]                             |\n| FunctionCall       | =   | \\[ Expression (. | ::) | this . \\] FunctionName ( argumentlist )                 |\n| If-expression      | =   | Expression ? Expression : Expression                                             |\n\nSemantic restrictions apply on the preceding syntax. You cannot call any method using the :: operator. Similarly, you cannot use the **this** keyword without an active object; that is, if you are not within a method and so on.\n\n### Examples\n\n| Example of expression                                       | Description                                                                                                                                    |\n|-------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------|\n| `1`                                                         | An integer literal.                                                                                                                            |\n| NoYes::No                                                   | An enum-reference.                                                                                                                             |\n| `A`                                                         | A variable-reference.                                                                                                                          |\n| Debtor::Find(\"1\")                                           | A static method-call (returns a customer variable).                                                                                            |\n| (A &gt; 3 ? true : false)                                   | An if-expression that returns **true** or **false**.                                                                                           |\n| (select CustTable where CustTable.Account == \"100\").NameRef | A select-expression. Returns the nameref field in the customer table. This is a string.                                                        |\n| A &gt;= B                                                   | A logical expression. Returns **true** or **false**.                                                                                           |\n| A + B                                                       | An arithmetic expression. Sums A and B.                                                                                                        |\n| A + B / C                                                   | Calculates B/C, and then adds this to A.                                                                                                       |\n| ~A + this.Value()                                           | Sums binary not A and the result of the method-call Value on the object in scope (this).                                                       |\n| Debtor::Find(\"1\").NameRef                                   | Returns the NameRef field of the found customer record.                                                                                        |\n| Debtor::Find(\"1\").Balance()                                 | A method call to `Balance` in the customer table (Debtor::Find returns a customer). Returns the balance of the customer with account number 1. |\n\n## EBNF Overview\nExtended Backus Naur Form (EBNF) is a metalanguage and is used in this guide to describe the language syntax. An EBNF definition consists of production rules, nonterminals, and terminals. The key terms are shown in the following table.\n\n| Key terms        | Example                       | Description                                                                                                                                                                                                                                                                                                                                                                            |\n|------------------|-------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Terminals        | Work\\_Team                    | A terminal is one character or a string of characters that never change.                                                                                                                                                                                                                                                                                                               |\n| Nonterminals     | `Employee`                    | A nonterminal is a description of part of a valid sentence in the language that is defined either by a production rule or a textual description. A nonterminal symbol can always be expanded to one or more terminal symbols.                                                                                                                                                          |\n| Production rules | Employee = Developer | Tester | A production rule is a description of a valid sentence. A production rule defines how a nonterminal symbol on the left side expands into a number of terminal and nonterminal symbols on the right side. If you continue to expand all nonterminal symbols on the right side of the production rules in a particular grammar, you will eventually have a sequence of terminal symbols. |\n\n### Example\n\nWork\\_Team = Manager Employee {, Employee}  Employee = Developer | Tester This example defines a Work\\_Team as consisting of a `Manager` and one or more `Employees`. An `Employee` is defined as being a `Developer`, or a `Tester`. The symbols used in the example are described in the following table.\n\n### Special Symbols in EBNF\n\n| Symbol                        | Description                                                                                                                             |\n|-------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| (*Expression*)                | Parentheses hold the symbols (terminals and nonterminals) together. They can be placed anywhere on the right side of a production rule. |\n| *Expression1* | *Expression2* | Or: Specifies that all the items on one side of the | apply, or else all the items on the other side of the | apply.                    |\n| \\[*Expression*\\]              | Optional: The items between \\[ and \\] are optional. All or none of the items in the brackets are included.                              |\n| {Expression}                  | Repeat: The items between { and } are optional, but can be repeated as many times as necessary.                                         |\n\nFor example, if the accessories you buy for your bicycle consist of a saddle, water-bottle holders, bells, and horns, and you could have either a bell or a horn, and zero, one, or more water bottle holders, and exactly one saddle, this could be expressed as: Bicycle\\_Accessories = saddle \\[bell | horn\\] {water\\_bottle\\_holders} This grammar defines the following possibilities: `saddle`  `saddle bell`  `saddle horn`  saddle water\\_bottle\\_holder  saddle bell water\\_bottle\\_holder  saddle bell water\\_bottle\\_holder water\\_bottle\\_holder And so on.\n\n## X++ Grammar\nThis topic shows the formal grammar of the X++ language.\n\n### How to Interpret the Formal BNF Grammar\n\nThis section describes the grammar of X++ in Backus Naur Form (BNF). A small example of BNF is described here.\n\nBNF code\n\nInterpretation\n\nCopy Code\n\n    AA ::= BB  CC_SYM\n    BB ::= JJ_SYM\n       ::= KK_SYM\n\n \n\n`AA` is the name of a production rule. An `AA` requires a `BB`, followed by a CC\\_SYM. A `BB` is also a production rule. Therefore, `BB` is not a terminal. `BB` must be either a JJ\\_SYM or a KK\\_SYM. Both JJ\\_SYM and KK\\_SYM are terminals because they are not the names of any other production rules. CC\\_SYM is also a terminal.\n\nIn the BNF for X++ grammar, most of the terminals have \\_SYM as the suffix of their name.\n\n### The Formal X++ Grammar in BNF\n\nThis section contains the BNF that defines the grammar of X++.\n\nCopy Code\n\n    CMPL_UNIT ::= RETTYPEID  FUNC_HDR  FUNC_HEAD  BODY\n              ::= RETTYPEID  DATA_HDR  CLASS_DECL\n              ::= EXPR_HDR  IF_EXPR  SEMIOPT\n              ::= RETTYPEID  FUNC_HDR  EVENT_DECL  BODY\n    SEMIOPT ::= SEMICOLON_SYM\n            ::= \n    CLASS_DECL ::= CLASS_HEADER  LEFTBR_SYM  DCL_EVENTMAP  DCL_LIST  RIGHTBR_SYM\n    CLASS_HEADER ::= ATTRIBUTE_DEF  CLASS_MODIFIERS  CLASSORINTERFACE  STD_ID  EXTENDS  IMPLEMENTS\n    ATTRIBUTE_DEF ::= LEFT_BRKT_SYM  ATTRIBUTE_INIT  ATTRIBUTE_LIST  RETTYPEID  RGHT_BRKT_SYM\n                  ::= \n    ATTRIBUTE_INIT ::= \n                   .\n    ATTRIBUTE_LIST ::= ATTRIBUTE\n                   ::= ATTRIBUTE_LIST  LIST_SEP_SYM  ATTRIBUTE\n    ATTRIBUTE ::= STD_ID\n              ::= ATTRIBUTE_WITH_ARGS_BEGINS  ATTRIBUTE_WITH_ARGS_ENDS\n    ATTRIBUTE_WITH_ARGS_BEGINS ::= STD_ID  LEFT_PAR_SYM\n    ATTRIBUTE_WITH_ARGS_ENDS ::= ATTRIBUTE_ARGS  RGHT_PAR_SYM\n    ATTRIBUTE_ARGS ::= ATTRIBUTE_CONSTANT\n                   ::= ATTRIBUTE_ARGS  LIST_SEP_SYM  ATTRIBUTE_CONSTANT\n    ATTRIBUTE_CONSTANT ::= INT_SYM\n                       ::= DBL_SYM\n                       ::= STR_SYM\n                       ::= DATE_SYM\n                       ::= DATETIME_SYM\n                       ::= STD_ID  DBLCOLON_SYM  STD_ID\n                       ::= TRUE_SYM\n                       ::= FALSE_SYM\n                       ::= INT64_SYM\n                       ::= ATTRIBUTE_INTRINSIC\n    ATTRIBUTE_INTRINSIC ::= INTRI_ID  LEFT_PAR_SYM  IARGS  RGHT_PAR_SYM\n    CLASSORINTERFACE ::= CLASS_SYM\n                     ::= INTERFACE_SYM\n    CLASS_MODIFIERS ::= CLASS_MODS\n                    ::= \n    CLASS_MODS ::= CLASS_MODIFIER\n               ::= CLASS_MODS  RETTYPEID  CLASS_MODIFIER\n    CLASS_MODIFIER ::= PUBLIC_SYM\n                   ::= FINAL_SYM\n                   ::= STATIC_SYM\n                   ::= ABSTRACT_SYM\n                   ::= PRIVATE_SYM\n    EXTENDS ::= EXTENDS_SYM  STD_ID\n            ::= \n    IMPLEMENTS ::= IMPLEMENTS_SYM  IMPLEMENTLIST\n               ::= \n    IMPLEMENTLIST ::= STD_ID\n                  ::= IMPLEMENTLIST  LIST_SEP_SYM  STD_ID\n    DCL_EVENTMAP ::= \n    EVENT_DECL ::= ATTRIBUTE_DEF  EVENT_HEADER  PARM_DCL_LIST\n    EVENT_HEADER ::= EVENT_MODIFIER  VOID_TYPE_SYM  STD_ID\n    EVENT_MODIFIER ::= EVENT_SYM\n    FUNC_HEAD ::= ATTRIBUTE_DEF  FUNCNAME  PARM_DCL_LIST\n    FUNCNAME ::= FUNCTYPE  STD_ID\n    FUNCTYPE ::= FUNC_MODIFIERS  DECL_TYPE\n    FUNC_MODIFIERS ::= FUNC_MODS\n                   ::= \n    FUNC_MODS ::= RETTYPEID  FUNC_MODIFIER\n              ::= FUNC_MODS  RETTYPEID  FUNC_MODIFIER\n    FUNC_MODIFIER ::= PUBLIC_SYM\n                  ::= PRIVATE_SYM\n                  ::= PROTECTED_SYM\n                  ::= FINAL_SYM\n                  ::= STATIC_SYM\n                  ::= ABSTRACT_SYM\n                  ::= DISPLAY_SYM\n                  ::= EDIT_SYM\n                  ::= SERVER_SYM\n                  ::= CLIENT_SYM\n    BODY ::= LEFTBR_SYM  DCL_FUNC_LIST  SEMIOPT  SECAUTHZCHECK  STMTLIST  SECAUTHZEND  RIGHTBR_SYM\n    SECAUTHZCHECK ::= \n    SECAUTHZEND ::= \n    RETTYPEID ::= \n    FUNCTION_DEF ::= FUNC_HEADER  PARM_DCL_LIST  LOCAL_BODY\n    FUNC_HEADER ::= DECL_TYPE  STD_ID\n    PARM_DCL_LIST ::= RETTYPEID  PARM_START  PARM_LIST_OPT  RGHT_PAR_SYM  RETTYPEID\n    PARM_START ::= LEFT_PAR_SYM\n    PARM_LIST_OPT ::= PARM_LIST\n                  ::= \n    PARM_LIST ::= DCL_INIT\n              ::= PARM_LIST  LIST_SEP_SYM  DCL_INIT\n    LOCAL_BODY ::= LEFTBR_SYM  DCL_LIST  SEMIOPT  STMTLIST  RETTYPEID  RIGHTBR_SYM\n    DCL_LIST ::= DCL_LIST2\n             ::= \n    DCL_LIST2 ::= DCL_STMT\n              ::= DCL_LIST2  DCL_STMT\n    DCL_FUNC_LIST ::= DCL_FUNC_LIST2\n                  ::= \n    DCL_FUNC_LIST2 ::= DCL_STMT\n                   ::= FUNCTION_DEF\n                   ::= DCL_FUNC_LIST2  DCL_STMT\n                   ::= DCL_FUNC_LIST2  FUNCTION_DEF\n    DCL_STMT ::= DCL_INIT_LIST  RETTYPEID  SEMICOLON_SYM\n    DCL_INIT_LIST ::= DCL_INIT\n                  ::= DCL_CLIST  ASG_CLAUSE\n    DCL_CLIST ::= DCL_INIT_LIST  LIST_SEP_SYM  STD_ID  ARR_DCL_IDX\n    DCL_INIT ::= DECL  ASG_CLAUSE\n    DECL ::= DECL_TYPE  STD_ID  ARR_DCL_IDX\n    DECL_TYPE ::= STR_TYPE_SYM  STR_LEN\n              ::= INT_TYPE_SYM\n              ::= DBL_TYPE_SYM\n              ::= DATE_TYPE_SYM\n              ::= DATETIME_TYPE_SYM\n              ::= TYPE_ID\n              ::= QUEUE_TYPE_SYM\n              ::= VOID_TYPE_SYM\n              ::= ANY_TYPE_SYM\n              ::= GUID_TYPE_SYM\n              ::= INT64_TYPE_SYM\n              ::= CLR_TYPE\n    CLR_TYPE ::= CLR_NAMESPACE  TYPE_ID  CLR_ARRAY_TYPE_EXT\n             ::= CLR_NAMESPACE  CLR_TYPE\n    CLR_NAMESPACE ::= TYPE_ID  PERIOD_SYM\n    CLR_ARRAY_TYPE_EXT ::= CLR_ARRAY_SPEC\n                       ::= \n    CLR_ARRAY_SPEC ::= CLR_ARRAY_PART\n                   ::= CLR_ARRAY_SPEC  CLR_ARRAY_PART\n    CLR_ARRAY_PART ::= CLR_ARRAY_LEFT_PART  CLR_RECTANGULAR_LIST  RGHT_BRKT_SYM\n    CLR_ARRAY_LEFT_PART ::= LEFT_BRKT_SYM\n    CLR_RECTANGULAR_LIST ::= CLR_COMMA_LIST\n                         ::= \n    CLR_COMMA_LIST ::= LIST_SEP_SYM\n                   ::= CLR_COMMA_LIST  LIST_SEP_SYM\n    STR_LEN ::= INT_SYM\n            ::= \n    ARR_DCL_IDX ::= LEFT_BRKT_SYM  RANGE  ARRAY_MEM  RGHT_BRKT_SYM\n                ::= \n    RANGE ::= IF_EXPR\n          ::= \n    ARRAY_MEM ::= LIST_SEP_SYM  IF_EXPR\n              ::= \n    ASG_CLAUSE ::= INIT_START  IF_EXPR\n               ::= \n    INIT_START ::= ASG_SYM\n    ASG_STMT ::= LVAL_FLD  ASSIGN  IF_EXPR\n             ::= LVAL_LIST  ASG_SYM  IF_EXPR\n             ::= LVAL_FLD  ASG_INC_DEC\n             ::= ASG_INC_DEC  LVAL_FLD\n             ::= LVAL_FLD  ASG_EVENT_HANDLER\n    ASSIGN ::= ASG_SYM\n           ::= ASGINC_SYM\n           ::= ASGDEC_SYM\n    ASG_INCDEC ::= ASGINC_SYM\n               ::= ASGDEC_SYM\n    ASG_EVENT_HANDLER ::= ASG_INCDEC  EVENTHANDLER_SYM  LEFT_PAR_SYM  QUALIFIER  STD_ID  RGHT_PAR_SYM\n      ::= ASG_INCDEC  EVENTHANDLER_SYM  LEFT_PAR_SYM  STD_ID  DBLCOLON_SYM  STD_ID  RGHT_PAR_SYM\n      ::= ASG_INCDEC  EVENTHANDLER_SYM  LEFT_PAR_SYM  QUALIFIER  EVAL_CLR_TYPE  DBLCOLON_SYM  STD_ID  RGHT_PAR_SYM\n    ASG_INC_DEC ::= INC_SYM\n                ::= DEC_SYM\n    LVAL_FLD ::= FIELD\n    LVAL_START ::= LEFT_BRKT_SYM\n    LVAL_LIST ::= LVAL_START  LVALUES  RGHT_BRKT_SYM\n    LVALUE ::= FIELD\n    LVALUES ::= LVALUE\n            ::= LVALUES  NEXTLVAL  LVALUE\n    NEXTLVAL ::= LIST_SEP_SYM\n    IF_EXPR ::= COND_TRUE  IF_EXPR\n            ::= BOOL_EXPR\n    COND_TRUE ::= COND_TEST  IF_EXPR  COLON_SYM\n    COND_TEST ::= BOOL_EXPR  QUEST_SYM\n    BOOL_EXPR ::= BOOL_EXPR  LOGOP  EXPR\n              ::= EXPR\n    LOGOP ::= AND_SYM\n          ::= OR_SYM\n    EXPR ::= SMPL_EXPR  RELOP  SMPL_EXPR\n         ::= SMPL_EXPR  AS_SYM  STD_ID\n         ::= SMPL_EXPR  IS_SYM  STD_ID\n         ::= SMPL_EXPR  AS_SYM  EVAL_CLR_TYPE\n         ::= SMPL_EXPR  IS_SYM  EVAL_CLR_TYPE\n         ::= SMPL_EXPR\n    RELOP ::= LT_SYM\n          ::= LE_SYM\n          ::= EQ_SYM\n          ::= NE_SYM\n          ::= GT_SYM\n          ::= GE_SYM\n          ::= LIKE_SYM\n    SMPL_EXPR ::= SMPL_EXPR  ADDOP  TERM\n              ::= TERM\n    ADDOP ::= PLUS_SYM\n          ::= MINUS_SYM\n          ::= PHYSOR_SYM\n    TERM ::= TERM  MULOP  CMPL_FACT\n         ::= CMPL_FACT\n    MULOP ::= MULT_SYM\n          ::= DIV_SYM\n          ::= MOD_SYM\n          ::= INTDIV_SYM\n          ::= SHIFTL_SYM\n          ::= SHIFTR_SYM\n          ::= PHYSAND_SYM\n          ::= PHYSXOR_SYM\n    CMPL_FACT ::= NOT_SYM  SGND_FACT\n              ::= SGND_FACT\n    SGND_FACT ::= SIGNOP  FACTOR\n              ::= FACTOR\n    SIGNOP ::= UMINUS_SYM\n           ::= PHYSNOT_SYM\n    FACTOR ::= LEFT_PAR_SYM  IF_EXPR  RGHT_PAR_SYM\n           ::= CONSTANT\n           ::= FIELD\n           ::= DIRSEARCH\n           ::= FUNCTION\n           ::= INTRINSICS\n           ::= EVAL\n           ::= CONLITTERAL\n           ::= NEW_CLR_ARRAY\n    NEW_CLR_ARRAY ::= NEW_SYM  EVAL_CLR_TYPE  NEW_CLR_ARRAY_PART  LEFT_PAR_SYM  RGHT_PAR_SYM\n    NEW_CLR_ARRAY_PART ::= CLR_SIZED_ARRAY  CLR_NOSIZED_ARRAY_SPEC\n    CLR_SIZED_ARRAY ::= LEFT_BRKT_SYM  CLR_SMPL_EXPR_COMMA_LIST  RGHT_BRKT_SYM\n    CLR_SMPL_EXPR_COMMA_LIST ::= SMPL_EXPR\n      ::= CLR_SMPL_EXPR_COMMA_LIST  LIST_SEP_SYM  SMPL_EXPR\n    CLR_NOSIZED_ARRAY_SPEC ::= CLR_NOSIZED_ARRAY_LIST\n                           ::= \n    CLR_NOSIZED_ARRAY_LIST ::= CLR_NOSIZED_ARRAY\n                           ::= CLR_NOSIZED_ARRAY_LIST  CLR_NOSIZED_ARRAY\n    CLR_NOSIZED_ARRAY ::= LEFT_BRKT_SYM  CLR_EMPTY_COMMA_LIST  RGHT_BRKT_SYM\n    CLR_EMPTY_COMMA_LIST ::= CLR_EMPTY_RECT_COMMA_LIST\n                         ::= \n    CLR_EMPTY_RECT_COMMA_LIST ::= LIST_SEP_SYM\n                              ::= CLR_EMPTY_RECT_COMMA_LIST  LIST_SEP_SYM\n    CONLITTERAL ::= LEFT_BRKT_SYM  IF_EXPR  EXPR_LIST  RGHT_BRKT_SYM\n    CONSTANT ::= INT_SYM\n             ::= DBL_SYM\n             ::= STR_SYM\n             ::= DATE_SYM\n             ::= DATETIME_SYM\n             ::= STD_ID  DBLCOLON_SYM  STD_ID\n             ::= TRUE_SYM\n             ::= FALSE_SYM\n             ::= NULL_SYM\n             ::= INT64_SYM\n             ::= QUALIFIER  EVAL_CLR_TYPE  DBLCOLON_SYM  STD_ID\n             ::= QUALIFIER  STD_ID  DBLCOLON_SYM  STD_ID\n    DIRSEARCH ::= DIRS_HEADER  PERIOD_SYM  STD_ID  ARR_IDX\n              ::= DIRS_HEADER  PERIOD_SYM  FLD_NUM  ARR_IDX\n    DIRS_HEADER ::= LEFT_PAR_SYM  SET_DIRS  FIND_JOIN  RGHT_PAR_SYM\n    SET_DIRS ::= \n    FIELD ::= QUALIFIER  STD_ID  ARR_IDX\n          ::= QUALIFIER  FLD_NUM  ARR_IDX\n          ::= STD_ID  ARR_IDX\n    QUALIFIER ::= EVAL  PERIOD_SYM\n              ::= STD_ID  PERIOD_SYM\n    FLD_NUM ::= LEFT_PAR_SYM  IF_EXPR  RGHT_PAR_SYM\n    ARR_IDX ::= LEFT_BRKT_SYM  SMPL_EXPR  RGHT_BRKT_SYM\n            ::= \n    EXPR_LIST ::= EXPR_LIST2\n              ::= \n    EXPR_LIST2 ::= LIST_SEP_SYM  IF_EXPR\n               ::= EXPR_LIST2  LIST_SEP_SYM  IF_EXPR\n    FUNCTION ::= FUNC_ID  LEFT_PAR_SYM  EVAL_FUNCTION_NAME  PAR_LIST  RGHT_PAR_SYM\n    EVAL_FUNCTION_NAME ::= \n    EVAL_NAME ::= EVAL_ID  LEFT_PAR_SYM\n              ::= STD_ID  LEFT_PAR_SYM\n              ::= STD_ID  DBLCOLON_SYM  STD_ID  LEFT_PAR_SYM\n              ::= SUPER_SYM  LEFT_PAR_SYM\n              ::= NEW_SYM  STD_ID  LEFT_PAR_SYM\n              ::= NEW_SYM  EVAL_CLR_TYPE  LEFT_PAR_SYM\n              ::= QUALIFIER  EVAL_CLR_TYPE  DBLCOLON_SYM  STD_ID  LEFT_PAR_SYM\n              ::= QUALIFIER  STD_ID  LEFT_PAR_SYM\n              ::= QUALIFIER  STD_ID  DBLCOLON_SYM  STD_ID  LEFT_PAR_SYM\n    EVAL_CLR_TYPE ::= NAMESPACE  STD_ID\n                  ::= NAMESPACE  EVAL_CLR_TYPE\n    NAMESPACE ::= STD_ID  PERIOD_SYM\n    EVAL ::= EVAL_NAME  PAR_LIST  RGHT_PAR_SYM\n    PAR_LIST ::= PRM_LIST\n             ::= \n    PRM_LIST ::= PAR_ELEM\n             ::= PRM_LIST  LIST_SEP_SYM  PAR_ELEM\n    PAR_ELEM ::= IF_EXPR\n             ::= BYREF_SYM  FIELD\n    INTRINSICS ::= INTRI_ID  LEFT_PAR_SYM  IARGS  RGHT_PAR_SYM\n    IARGS ::= STD_ID\n          ::= STR_SYM\n          ::= STD_ID  LIST_SEP_SYM  STD_ID\n          ::= \n    STMTLIST ::= STATEMENTS\n             ::= \n    STATEMENTS ::= STATEMENT\n               ::= STATEMENTS  STATEMENT\n    STATEMENT ::= COMPOUND_STMT\n              ::= WHILE_STMT\n              ::= FOR_STMT\n              ::= DO_STMT\n              ::= SEARCH_STMT\n              ::= FIND_STMT\n              ::= PRINT_STMT\n              ::= WINDOW_STMT\n              ::= IF_STMT\n              ::= SWITCH_STMT\n              ::= EXPR_STMT\n              ::= PAUSE_STMT\n              ::= BP_CLAUSE\n              ::= BREAK_STMT\n              ::= CONTINUE_STMT\n              ::= RETURN_CLAUSE\n              ::= MOVE_REC_STMT\n              ::= THROW_STMT\n              ::= TRY_STMT\n              ::= RETRY_STMT\n              ::= TTS_STMT\n              ::= FLUSH_STMT\n              ::= TBLLOCK_STMT\n              ::= CHANGE_STMT\n              ::= UPDATE_STMT\n              ::= INSERT_STMT\n              ::= UNCHECKED_STMT\n    COMPOUND_STMT ::= LEFTBR_SYM  STMTLIST  RIGHTBR_SYM\n    THROW_STMT ::= THROW_SYM  IF_EXPR  SEMICOLON_SYM\n    TRY_STMT ::= TRY_BLOCK  CATCH_LIST\n    TRY_BLOCK ::= TRY_START  STATEMENT\n    TRY_START ::= TRY_SYM\n    CATCH_LIST ::= CATCH_STMT\n               ::= CATCH_LIST  CATCH_STMT\n    CATCH_STMT ::= CATCH_EXPR  PRE_CATCH  STATEMENT  POST_CATCH\n    CATCH_EXPR ::= CATCH_SYM  LEFT_PAR_SYM  IF_EXPR  RGHT_PAR_SYM\n      ::= CATCH_SYM  LEFT_PAR_SYM  IF_EXPR  LIST_SEP_SYM  TABLEINSTANCE  RGHT_PAR_SYM\n      ::= CATCH_SYM\n    PRE_CATCH ::= \n    POST_CATCH ::= \n    TABLEINSTANCE ::= INSTANCENAME\n    INSTANCENAME ::= QUALIFIER  STD_ID  ARR_IDX\n                 ::= STD_ID  ARR_IDX\n    RETRY_STMT ::= RETRY_SYM  SEMICOLON_SYM\n    WHILE_STMT ::= WHILE_TEST  STATEMENT\n    WHILE_TEST ::= WHILE  LEFT_PAR_SYM  IF_EXPR  RGHT_PAR_SYM\n    WHILE ::= WHILE_SYM\n    DO_STMT ::= DO_BODY  DO_TEST  SEMICOLON_SYM\n    DO_BODY ::= DO_HEADER  STATEMENT\n    DO_HEADER ::= DO_SYM\n    DO_TEST ::= WHILE_SYM  LEFT_PAR_SYM  IF_EXPR  RGHT_PAR_SYM\n    FOR_STMT ::= FOR_HEADER  STATEMENT\n    FOR_HEADER ::= FOR_TEST  SEMICOLON_SYM  FOR_ASG  RGHT_PAR_SYM\n    FOR_TEST ::= FOR_INIT  SEMICOLON_SYM  IF_EXPR\n    FOR_INIT ::= FOR_SYM  LEFT_PAR_SYM  FOR_ASG\n    FOR_ASG ::= LVAL_FLD  ASSIGN  IF_EXPR\n            ::= LVAL_FLD  ASG_INC_DEC\n            ::= ASG_INC_DEC  LVAL_FLD\n    JOIN_LIST ::= JOIN_SPECS\n              ::= \n    JOIN_SPECS ::= JOIN_SPEC\n               ::= JOIN_SPECS  JOIN_SPEC\n    JOIN_SPEC ::= JOIN_ORDER  WHERE  IF_EXPR\n              ::= JOIN_ORDER\n    JOIN_ORDER ::= JOIN_USING\n               ::= JOIN_USING  ORDER_GROUP\n    JOIN_USING ::= JOIN_CLAUSE  USING_INDEX  STD_ID\n               ::= JOIN_CLAUSE  USING_INDEX  HINT_SYM  STD_ID\n               ::= JOIN_CLAUSE\n    JOIN_CLAUSE ::= OUTER  JOIN_SYM  SELECTOPT  TABLE\n    OUTER ::= OUTER_SYM\n          ::= EXISTS_SYM\n          ::= NOTEXISTS_SYM\n          ::= \n    SEARCH_STMT ::= SEARCH_JOIN  STATEMENT\n    SEARCH_JOIN ::= SEARCH_WHERE  JOIN_LIST\n    SEARCH_WHERE ::= SEARCH_ORDER  WHERE  IF_EXPR\n                 ::= SEARCH_ORDER\n    WHERE ::= WHERE_SYM\n    SUM_ELEM ::= SUM_FUNC  LEFT_PAR_SYM  STD_ID  RGHT_PAR_SYM\n    SUM_FUNC ::= SUM_SYM\n             ::= AVG_SYM\n             ::= CNT_SYM\n             ::= MINOF_SYM\n             ::= MAXOF_SYM\n    SEARCH_ORDER ::= SEARCH_USING\n                 ::= SEARCH_USING  ORDER_GROUP\n    ORDER_GROUP ::= ORDERBY_CLAUSE  OPT_GROUPBY\n                ::= GROUPBY_CLAUSE  OPT_ORDERBY\n    OPT_GROUPBY ::= GROUPBY_CLAUSE\n                ::= \n    OPT_ORDERBY ::= ORDERBY_CLAUSE\n                ::= \n    ORDERBY_CLAUSE ::= ORDER_SYM  OPT_BY  ORDER_ELEM\n                   ::= ORDERBY_CLAUSE  LIST_SEP_SYM  ORDER_ELEM\n    GROUPBY_CLAUSE ::= GROUP_SYM  OPT_BY  ORDER_ELEM\n                   ::= GROUPBY_CLAUSE  LIST_SEP_SYM  ORDER_ELEM\n    ORDER_ELEM ::= STD_ID  INDEX  DIRECTION\n               ::= ORDER_QUALIFIER  STD_ID  INDEX  DIRECTION\n    ORDER_QUALIFIER ::= STD_ID  PERIOD_SYM\n    INDEX ::= LEFT_BRKT_SYM  INT_SYM  RGHT_BRKT_SYM\n          ::= \n    DIRECTION ::= ASCEND_SYM\n              ::= DESCEND_SYM\n              ::= \n    OPT_BY ::= BY_SYM\n           ::= \n    SEARCH_USING ::= SEARCH_CLAUSE  USING_INDEX  STD_ID\n                 ::= SEARCH_CLAUSE  USING_INDEX  HINT_SYM  STD_ID\n                 ::= SEARCH_CLAUSE\n    USING_INDEX ::= INDEX_SYM\n    SEARCH_CLAUSE ::= WHILE_SYM  SELECT_SYM  SELECTOPT  CROSSCOMPANY_CLAUSE  VALIDTIMESTATE_CLAUSE  TABLE\n    CROSSCOMPANY_CLAUSE ::= CROSSCOMPANY_SYM\n                        ::= CROSSCOMPANY_SYM  COLON_SYM  STD_ID\n                        ::= \n    VALIDTIMESTATE_CLAUSE ::= VALIDTIMESTATE_SYM  LEFT_PAR_SYM  STD_ID  LIST_SEP_SYM  STD_ID  RGHT_PAR_SYM\n      ::= VALIDTIMESTATE_SYM  LEFT_PAR_SYM  STD_ID  RGHT_PAR_SYM\n      ::= \n    SELECTOPT ::= \n              ::= SELECTOPT  REVERSE_SYM\n              ::= SELECTOPT  FIRSTFAST_SYM\n              ::= SELECTOPT  FIRSTONLY_SYM\n              ::= SELECTOPT  FIRSTONLY_SYM1\n              ::= SELECTOPT  FIRSTONLY_SYM10\n              ::= SELECTOPT  FIRSTONLY_SYM100\n              ::= SELECTOPT  FIRSTONLY_SYM1000\n              ::= SELECTOPT  FORUPDATE_SYM\n              ::= SELECTOPT  NOFETCH_SYM\n              ::= SELECTOPT  FORCE_SELECT_ORDER_SYM\n              ::= SELECTOPT  FORCE_NESTED_LOOP_SYM\n              ::= SELECTOPT  FORCE_LITERALS_SYM\n              ::= SELECTOPT  FORCE_PLACEHOLDERS_SYM\n              ::= SELECTOPT  REPEATABLEREAD_SYM\n              ::= SELECTOPT  OPTIMISTICLOCK_SYM\n              ::= SELECTOPT  PESSIMISTICLOCK_SYM\n              ::= SELECTOPT  GENERATEONLY_SYM\n    FIND_STMT ::= FIND_JOIN  SEMICOLON_SYM\n    FIND_JOIN ::= FIND_WHERE  JOIN_LIST\n    FIND_WHERE ::= FIND_ORDER  WHERE  IF_EXPR\n               ::= FIND_ORDER\n    FIND_ORDER ::= FIND_USING\n               ::= FIND_USING  ORDER_GROUP\n    FIND_USING ::= FIND_TABLE  USING_INDEX  STD_ID\n               ::= FIND_TABLE  USING_INDEX  HINT_SYM  STD_ID\n               ::= FIND_TABLE\n    FIND_TABLE ::= SELECT_SYM  SELECTOPT  CROSSCOMPANY_CLAUSE  VALIDTIMESTATE_CLAUSE  TABLE\n      ::= DELETE_SYM  SELECTOPT  CROSSCOMPANY_CLAUSE  VALIDTIMESTATE_CLAUSE  TABLE\n    TABLE ::= FLD_LIST  OPT_FROM\n    FLD_LIST ::= MULT_SYM\n             ::= FIELD_LIST\n    FIELD_LIST ::= FIELD_SPEC\n               ::= FIELD_LIST  LIST_SEP_SYM  FIELD_SPEC\n    FIELD_SPEC ::= STD_ID  INDEX\n               ::= SUM_ELEM\n    OPT_FROM ::= FROM_SYM  STD_ID\n             ::= \n    SETFIELDSMODE ::= \n    UPDATE_STMT ::= UPDATETABLE  SET_SYM  SETFIELDSMODE  FIELDASSIGNMENTS  OPT_WHERE  JOIN_LIST  SEMICOLON_SYM\n    UPDATETABLE ::= UPDATE_SYM  SELECTOPT  CROSSCOMPANY_CLAUSE  STD_ID\n    OPT_WHERE ::= WHERE  IF_EXPR\n              ::= \n    FIELDASSIGNMENTS ::= FIELDASSIGNMENTS  LIST_SEP_SYM  FIELDASSIGNMENT\n                     ::= FIELDASSIGNMENT\n    FIELDASSIGNMENT ::= STD_ID  INDEX  ASG_SYM  IF_EXPR\n    INSERT_PART ::= INSERT_SYM  CROSSCOMPANY_CLAUSE  INSERT_NAME  LEFT_PAR_SYM  INSERTFIELDLIST  RGHT_PAR_SYM\n    INSERT_NAME ::= STD_ID\n    INSERT_STMT ::= INSERT_PART  FIND_JOIN  SEMICOLON_SYM\n    INSERTFIELDLIST ::= INSERTFIELD\n                    ::= INSERTFIELDLIST  LIST_SEP_SYM  INSERTFIELD\n    INSERTFIELD ::= STD_ID  INDEX\n    PRINT_STMT ::= PRINT_CLAUSE  AT_CLAUSE  SEMICOLON_SYM\n    PRINT_CLAUSE ::= PRINT  IF_EXPR  EXPR_LIST\n    PRINT ::= PRINT_SYM\n    AT_CLAUSE ::= AT_SYM  IF_EXPR  LIST_SEP_SYM  IF_EXPR\n              ::= \n    WINDOW_STMT ::= WINDOW_SYM  IF_EXPR  LIST_SEP_SYM  IF_EXPR  AT_CLAUSE  SEMICOLON_SYM\n    IF_STMT ::= ELSE_STMT\n            ::= IF_CONDS\n    IF_CONDS ::= IF_COND  STATEMENT\n    IF_COND ::= IF_SYM  LEFT_PAR_SYM  IF_EXPR  RGHT_PAR_SYM\n    ELSE_STMT ::= ELSE  STATEMENT\n    ELSE ::= IF_CONDS  ELSE_SYM\n    SWITCH_STMT ::= CASE_LIST  RIGHTBR_SYM\n    CASE_LIST ::= SWITCH_SYM  LEFT_PAR_SYM  IF_EXPR  RGHT_PAR_SYM  LEFTBR_SYM\n              ::= CASE_TESTS  STMTLIST\n    CASE_TESTS ::= CASE_HEADER  COLON_SYM\n               ::= CASE_LIST  DEFAULT_SYM  COLON_SYM\n    CASE_HEADER ::= CASE  IF_EXPR\n                ::= CASEALT  IF_EXPR\n    CASE ::= CASE_LIST  CASE_SYM\n    CASEALT ::= CASE_HEADER  LIST_SEP_SYM\n    EXPR_STMT ::= ASG_STMT  SEMICOLON_SYM\n              ::= FUNCTION  SEMICOLON_SYM\n              ::= INTRINSICS  SEMICOLON_SYM\n              ::= EVAL  SEMICOLON_SYM\n    PAUSE_STMT ::= PAUSE_SYM  SEMICOLON_SYM\n    BP_CLAUSE ::= BP_SYM  SEMICOLON_SYM\n    BREAK_STMT ::= BREAK_SYM  SEMICOLON_SYM\n    CONTINUE_STMT ::= CONTINUE_SYM  SEMICOLON_SYM\n    RETURN_CLAUSE ::= RETURN_SYM  SEMICOLON_SYM\n                  ::= RETURN_SYM  IF_EXPR  SEMICOLON_SYM\n    TTS_STMT ::= TTSABORT_SYM  SEMICOLON_SYM\n             ::= TTSBEGIN_SYM  SEMICOLON_SYM\n             ::= TTSEND_SYM  SEMICOLON_SYM\n    FLUSH_STMT ::= FLUSH  ID_LIST  SEMICOLON_SYM\n    FLUSH ::= FLUSH_SYM\n    TBLLOCK_STMT ::= TABLELOCK  ID_LIST  SEMICOLON_SYM\n    TABLELOCK ::= TABLELOCK_SYM\n    ID_LIST ::= STD_ID\n            ::= ID_LIST  LIST_SEP_SYM  STD_ID\n    MOVE_REC_STMT ::= NEXT_SYM  TABLE  SEMICOLON_SYM\n    CHANGE_STMT ::= CHANGE_HEADER  STATEMENT\n    CHANGE_HEADER ::= CHANGE  LEFT_PAR_SYM  IF_EXPR  RGHT_PAR_SYM\n    CHANGE ::= CHANGECOMP_SYM\n           ::= CHANGESITE_SYM\n    UNCHECKED_STMT ::= UNCHECKED_HEADER  STATEMENT\n    UNCHECKED_HEADER ::= UNCHECKED_SYM  LEFT_PAR_SYM  IF_EXPR  RGHT_PAR_SYM\n\n \n\n## X++ Language Syntax is Stricter in Microsoft Dynamics AX 2012\nStarting in Microsoft Dynamics AX 2012, the syntax rules for X++ are stricter than in previous versions of the product. This topic describes the syntax changes.\n\n### Table of X++ Syntax Changes\n\nThe following table displays a list of syntax changes that start in Microsoft Dynamics AX 2012.\n\n<table>\n<colgroup>\n<col width=\"25%\" />\n<col width=\"25%\" />\n<col width=\"25%\" />\n<col width=\"25%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Area</th>\n<th>Syntax rule</th>\n<th>Before Microsoft Dynamics AX 2012</th>\n<th>Starting with Microsoft Dynamics AX 2012</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Escape</td>\n<td>The backslash character <span class=\"code\">\\</span> is rejected by the compiler for unrecognized escapes</td>\n<td>The compiler used to accept &quot;31\\12\\2002&quot;, but during run time the literal string was interpreted as a different value.</td>\n<td>Now the following X++ statement is rejected by the compiler: <span class=\"code\">str myDateString = &quot;31\\12\\2002&quot;;</span> The proper syntax is <span class=\"code\">&quot;31\\\\12\\\\2002&quot;</span>.</td>\n</tr>\n<tr class=\"even\">\n<td>Exceptions</td>\n<td>Retry is no longer allowed outside of a catch block</td>\n<td>It was possible to write the <strong>retry</strong> keyword outside of a <strong>catch</strong> block. This caused the program to end when the <strong>retry</strong> was reached during runtime.</td>\n<td>Now <strong>retry</strong> can occur only inside a <strong>catch</strong> block. For more information, see Exception Handling with try and catch Keywords.</td>\n</tr>\n<tr class=\"odd\">\n<td>Exceptions</td>\n<td>Now you can throw and catch only <code>int</code> values</td>\n<td>It was possible to throw scalar expressions like strings and dates, such as <code>throw &quot;hello world&quot;;</code>, and get no compile error. At runtime this was catch-able by a <code>catch</code> block that was not decorated with any specific value, such as <span class=\"code\">catch {print(&quot;Catch worked.&quot;);}</span>.</td>\n<td>Now the only expression you can put on the <strong>throw</strong> keyword is an <code>int</code>. Often the best thing to throw is <span class=\"code\">Global::error(&quot;Explanation&quot;);</span>. Often the best thing to catch is an element of the <code>Exception</code> enum. For more information, see Exception Handling with try and catch Keywords.</td>\n</tr>\n<tr class=\"even\">\n<td>Inheritance</td>\n<td>Downcasting can now be explicit.\n<table>\n<thead>\n<tr class=\"header\">\n<th><strong>Note</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>It is good programming practice to avoid implicit downcasts.</td>\n</tr>\n</tbody>\n</table></td>\n<td>It was possible to assign a base object to a derived object with the simple assignment operator, which is the equals sign (<code>=</code>). The compiler accepted these assignments, but during run time any misuse of an improper downcast assignment caused an error.</td>\n<td>Now all downcasts can be explicit. This is accomplished with the new <strong>as</strong> expression operator. Explicit downcasting with the <strong>as</strong> keyword is illustrated by the following code example, in which <code>ThingClass</code> extends <code>Object</code>: <code>ThingClass myThing = new ThingClass();</code>  <code>Object myObject = myThing;</code>  <code>myThing = myObject as ThingClass; // Explicit downcast, good.</code> For more information, see Expression Operators: Is and As for Inheritance.</td>\n</tr>\n<tr class=\"odd\">\n<td>Inheritance</td>\n<td>Override of a base method cannot be less accessible than the base method</td>\n<td>It was possible to have a base method be decorated with <strong>protected</strong> and yet have an override of that method be <strong>private</strong>.</td>\n<td>Now when a base method is <strong>protected</strong>, the override method must be either <strong>protected</strong> or <strong>public</strong>, and the override method cannot be <strong>private</strong>. For more information, see Method Access Control.</td>\n</tr>\n<tr class=\"even\">\n<td>Inheritance</td>\n<td>Override of a base method must have the exact same return type and parameter signature as the base method</td>\n<td>Suppose a base class had a method that inputs a parameter of the <code>Common</code> table, which is the base of all tables. In a derived class it was possible to override the method to instead input <code>MyTable</code>.</td>\n<td>Now the parameter signatures of the base method and its override method must match exactly. Also, the return types must match exactly. For more information, see Overriding a Method.</td>\n</tr>\n<tr class=\"odd\">\n<td>Interfaces</td>\n<td>Implementation of an interface method must match the parameter signature exactly</td>\n<td>Suppose an interface had a method that input a parameter of an <code>int</code>. In a class that implements the interface, it was possible to write the method with a parameter of a <code>str</code>.</td>\n<td>Now the parameter signatures of the method must exactly match between the interface and the implementation of the method on a class. Also, the return types must match exactly. For more information, see Interfaces Overview.</td>\n</tr>\n<tr class=\"even\">\n<td>Interfaces</td>\n<td>A non-abstract base class that implements an interface cannot rely on a derived class for that implementation</td>\n<td>When a base class implements an interface, it was possible for the class to not implement the methods of the interface if a derived class implemented the methods. The only limitation was that the <code>new</code> constructor method could not be called on the class.</td>\n<td>Now the compiler requires that every class that implements an interface must have or inherit a complete implementation of every method of the interface. For more information, see X++, C# Comparison: Object Oriented Programming.</td>\n</tr>\n<tr class=\"odd\">\n<td>Modifiers</td>\n<td>The <strong>static</strong> modifier should not be applied to an interface</td>\n<td>It was possible to write <span class=\"code\">static interface IMyInterface {}</span>, but the <strong>static</strong> modifier had no effect because it makes no sense in this context.</td>\n<td>Sometime after Microsoft Dynamics 365 for Operations 2009 the X++ compiler might stop allowing the <strong>static</strong> modifier on interface declarations. For more information, see Interfaces Overview.</td>\n</tr>\n<tr class=\"even\">\n<td>Modifiers</td>\n<td>The <strong>static</strong> modifier must not be applied to the <code>new</code> constructor</td>\n<td>It was possible to apply the <strong>static</strong> modifier to the declaration of the <code>new</code> constructor method. This caused <code>new MyClass();</code> to behave as a null operation. Instead, the statement <span class=\"code\">MyClass::new();</span> would call the static <code>new</code> method, but that would not construct an object.</td>\n<td>Now the compiler issues an error when the <strong>static</strong> modifier is applied to the <code>new</code> method. For more information, see Constructors.</td>\n</tr>\n<tr class=\"odd\">\n<td>Modifiers</td>\n<td>Use an explicit access modifier on each method</td>\n<td>In the past the menu item of <span class=\"ui\">AOT</span> &gt; <span class=\"ui\">Classes</span> &gt; <em>MyClass</em> &gt; <span class=\"ui\">New Method</span> created the method without any access modifier. This meant that the method was implicitly <strong>public</strong>, although some X++ developers might not have been fully aware of the default. This created extra work later when a developer needed to modify the code in the method, because the developer had to research everywhere that the method might be called from.</td>\n<td>Now the <span class=\"ui\">New Method</span> menu item explicitly includes the <strong>private</strong> keyword in its automatic declaration of the new method. The developer can type in a different modifier if appropriate. For more information, see Method Modifiers.</td>\n</tr>\n<tr class=\"even\">\n<td>Parameters</td>\n<td>Parameters given in a call to a <code>new</code> constructor method must match the parameters on the <code>new</code> constructor method</td>\n<td>It was possible to pass in multiple parameters on call to a <code>new</code> constructor method even when the <code>new</code> method was declared to input no parameters.</td>\n<td>Now the call to the <code>new</code> method must exactly match the declared parameter signature of the <code>new</code> method. For more information, see Creating a Subclass.</td>\n</tr>\n<tr class=\"odd\">\n<td>Parameters</td>\n<td>Parameters with default values must come after all parameters that do not have default values</td>\n<td>It was possible to declare a method that takes in two parameters, and have only the first parameter offer a default value. There was no purpose to this. There was no way to accept the default of the first parameter because the call must specify a value for the second parameter and cannot omit the first parameter.</td>\n<td>Now in the declaration of a method, any parameter that offers a default value must come after all the parameters that do not. For more information, see the following topics:\n<ul>\n<li>Using Optional Parameters</li>\n<li>Best Practices for Parameters</li>\n</ul></td>\n</tr>\n<tr class=\"even\">\n<td>Parameters</td>\n<td>Override of a method must have the same default parameters as the overridden method</td>\n<td>It was possible to declare a method as <span class=\"code\">public void myMethod(int i=22){}</span> and the override as <span class=\"code\">public void myMethod(){}</span>. But if the override method was called as <code>derivedObject(333);</code> an error occurred.</td>\n<td>Now the override method must list the same parameter types in the same sequence that they are declared in the overridden method. For more information, see Overriding a Method.</td>\n</tr>\n<tr class=\"odd\">\n<td>Preprocessor</td>\n<td>A <strong>TODO</strong> in a comment must be the first non-whitespace in the first line of the comment</td>\n<td>The X++ preprocessor used to detect the <strong>TODO</strong> keyword in a multi-line <span class=\"code\">/* ... */</span> task comment even when the <strong>TODO</strong> appeared after other text after the first comment line.</td>\n<td>Now the X++ preprocessor detects the <strong>TODO</strong> keyword only if <strong>TODO</strong> appears on the first line of the comment, and as the first non-whitespace in the comment. For more information, see TODO Comments for X++ Developer Tasks.</td>\n</tr>\n</tbody>\n</table>\n\n\n\nSee also\n--------\n\n[X++ Language Reference](xpp-language-reference.md)\n\n\n\n","nodes":[{"pos":[32,42],"content":"X++ syntax","needQuote":true,"needEscape":true,"nodes":[{"content":"X++ syntax","pos":[0,10]}]},{"pos":[56,114],"content":"This topic contains contains the syntax reference for X++.","needQuote":true,"needEscape":true,"nodes":[{"content":"This topic contains contains the syntax reference for X++.","pos":[0,58]}]},{"pos":[611,621],"content":"X++ syntax","linkify":"X++ syntax","nodes":[{"content":"X++ syntax","pos":[0,10]}]},{"content":"This topic contains contains the syntax reference for X++.","pos":[667,725]},{"pos":[728,740],"content":"X++ Keywords","linkify":"X++ Keywords","nodes":[{"content":"X++ Keywords","pos":[0,12]}]},{"content":"The X++ keywords shown in the following table are reserved.","pos":[755,814]},{"content":"These keywords cannot be used for any other purpose.","pos":[815,867]},{"content":"Reserved word","pos":[992,1005]},{"content":"Description","pos":[1015,1026]},{"content":"More information","pos":[1036,1052]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>!<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[1102,1120],"source":"<strong>!</strong>"},{"content":"Not.","pos":[1130,1134]},{"content":"Relational Operators","pos":[1144,1164]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>!=<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[1198,1217],"source":"<strong>!=</strong>"},{"content":"Inequality operator (not equal to).","pos":[1227,1262]},{"content":"Relational Operators","pos":[1272,1292]},{"content":"Prefix on macro names.","pos":[1353,1375]},{"content":"How to: Use #define and #if to Test a Macro","pos":[1385,1428]},{"content":"Binary AND.","pos":[1494,1505]},{"content":"Arithmetic Operators","pos":[1515,1535]},{"content":"Logical AND.","pos":[1605,1617]},{"content":"Relational Operators","pos":[1627,1647]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>(<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[1681,1699],"source":"<strong>(</strong>"},{"content":"Function call operator, which indicates the beginning of the function call.","pos":[1709,1784]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>)<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[1827,1845],"source":"<strong>)</strong>"},{"content":"Function call operator, which indicates the end of the function call.","pos":[1855,1924]},{"content":"Multiply.","pos":[1996,2005]},{"content":"The asterisk (<bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt><ept id=\"p1\">*&lt;/span&gt;</ept>) is also used in X++ SQL.","pos":[2006,2073],"source":" The asterisk (<span class=\"code\">*</span>) is also used in X++ SQL."},{"content":"One use is to signify all fields from the tables on a <ph id=\"ph1\">&lt;code&gt;select&lt;/code&gt;</ph> statement.","pos":[2074,2158],"source":" One use is to signify all fields from the tables on a <code>select</code> statement."},{"content":"Another use is as a wildcard with the <ph id=\"ph1\">&lt;code&gt;like&lt;/code&gt;</ph> operator, to signify 0 to many characters of any kind.","pos":[2159,2269],"source":" Another use is as a wildcard with the <code>like</code> operator, to signify 0 to many characters of any kind."},{"content":"The <ph id=\"ph1\">&lt;code&gt;like&lt;/code&gt;</ph> operator also uses the <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>?<ept id=\"p1\">&lt;/span&gt;</ept>","pos":[2270,2342],"source":" The <code>like</code> operator also uses the <span class=\"code\">?</span>"},{"content":"character.","pos":[2343,2353]},{"content":"Arithmetic Operators","pos":[2363,2383]},{"content":"Binary XOR.","pos":[2444,2455]},{"content":"Arithmetic Operators","pos":[2465,2485]},{"content":"Binary OR.","pos":[2547,2557]},{"content":"Arithmetic Operators","pos":[2567,2587]},{"content":"Logical OR.","pos":[2649,2660]},{"content":"Relational Operators","pos":[2670,2690]},{"content":"Not.","pos":[2752,2756]},{"content":"Arithmetic Operators","pos":[2766,2786]},{"content":"Plus.","pos":[2847,2852]},{"content":"Arithmetic Operators","pos":[2862,2882]},{"content":"Increment.","pos":[2945,2955]},{"content":"Assignment Operators","pos":[2965,2985]},{"content":"Additive assignment.","pos":[3047,3067]},{"content":"Assignment Operators","pos":[3077,3097]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>,<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[3131,3149],"source":"<strong>,</strong>"},{"content":"Comma operator.","pos":[3159,3174]},{"content":"Expressions separated by commas are evaluated left-to-right.","pos":[3175,3235]},{"content":"Minus.","pos":[3306,3312]},{"content":"Arithmetic Operators","pos":[3322,3342]},{"content":"Decrement operator.","pos":[3405,3424]},{"content":"Assignment Operators","pos":[3434,3454]},{"content":"Subtractive assignment.","pos":[3516,3539]},{"content":"Assignment Operators","pos":[3549,3569]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>.<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[3603,3621],"source":"<strong>.</strong>"},{"content":"Class member access operator, for example, <ph id=\"ph1\">&lt;code&gt;formRun.run&lt;/code&gt;</ph> accesses the <ph id=\"ph2\">&lt;code&gt;run&lt;/code&gt;</ph> method of an object of the class type <ph id=\"ph3\">&lt;code&gt;FormRun&lt;/code&gt;</ph>.","pos":[3631,3788],"source":"Class member access operator, for example, <code>formRun.run</code> accesses the <code>run</code> method of an object of the class type <code>FormRun</code>."},{"content":"Divide.","pos":[3859,3866]},{"content":"Arithmetic Operators","pos":[3876,3896]},{"content":"Escape in strings.","pos":[3958,3976]},{"content":"Escapes extra quotation marks, and certain letters such as <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>\\t<ept id=\"p1\">&lt;/span&gt;</ept> for tab.","pos":[3977,4073],"source":" Escapes extra quotation marks, and certain letters such as <span class=\"code\">\\t</span> for tab."},{"content":"Escape of keywords.","pos":[4144,4163]},{"content":"For example, <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>str <ph id=\"ph1\">@abstract</ph>;<ept id=\"p1\">&lt;/span&gt;</ept> would fail to compile without the <bpt id=\"p2\">&lt;strong&gt;</bpt><ph id=\"ph2\">@</ph><ept id=\"p2\">&lt;/strong&gt;</ept> sign.","pos":[4164,4276],"source":" For example, <span class=\"code\">str @abstract;</span> would fail to compile without the <strong>@</strong> sign."},{"content":"Also affects literal strings, by negating the effect of the \\ escape character, and by enabling the string to span more than one line in the source code.","pos":[4277,4430]},{"content":"The new line is represented by one character of hexadecimal 0x0A, which is commonly called a line feed.","pos":[4431,4534]},{"content":"No carriage return character of hexadecimal 0x0D is included, as in 0x0D0A.","pos":[4535,4610]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>:<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[4654,4672],"source":"<strong>:</strong>"},{"content":"Field declaration or label specifier.","pos":[4682,4719]},{"content":"The colon (<bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>:<ept id=\"p1\">&lt;/span&gt;</ept>) character is also used on the <ph id=\"ph1\">&lt;code&gt;switch&lt;/code&gt;</ph> statement.","pos":[4720,4820],"source":" The colon (<span class=\"code\">:</span>) character is also used on the <code>switch</code> statement."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>::<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[4863,4882],"source":"<strong>::</strong>"},{"content":"Used to call static (class) methods: <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>ClassName::methodName<ept id=\"p1\">&lt;/span&gt;</ept>.","pos":[4892,4977],"source":"Used to call static (class) methods: <span class=\"code\">ClassName::methodName</span>."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>;<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[5021,5039],"source":"<strong>;</strong>"},{"content":"Terminates statements.","pos":[5049,5071]},{"content":"Used in <ph id=\"ph1\">&lt;code&gt;for&lt;/code&gt;</ph> loops or as a separator of statements.","pos":[5072,5135],"source":" Used in <code>for</code> loops or as a separator of statements."},{"content":"Less than.","pos":[5209,5219]},{"content":"Relational Operators","pos":[5229,5249]},{"content":"Left shift.","pos":[5318,5329]},{"content":"Arithmetic Operators","pos":[5339,5359]},{"content":"Less than or equal.","pos":[5424,5443]},{"content":"Arithmetic Operators","pos":[5453,5473]},{"content":"Assignment operator.","pos":[5535,5555]},{"content":"The argument to the left of <ph id=\"ph1\">&amp;quot;</ph><bpt id=\"p1\">&lt;strong&gt;</bpt><ph id=\"ph2\">=</ph><ept id=\"p1\">&lt;/strong&gt;</ept><ph id=\"ph3\">&amp;quot;</ph> is set to the value of the argument to the right.","pos":[5556,5664],"source":" The argument to the left of &quot;<strong>=</strong>&quot; is set to the value of the argument to the right."},{"content":"Assignment Operators","pos":[5674,5694]},{"content":"Returns true if both expressions are equal.","pos":[5756,5799]},{"content":"Relational Operators","pos":[5809,5829]},{"content":"Greater than.","pos":[5894,5907]},{"content":"Relational Operators","pos":[5917,5937]},{"content":"Greater than or equal.","pos":[6002,6024]},{"content":"Relational Operators","pos":[6034,6054]},{"content":"Right shift.","pos":[6123,6135]},{"content":"Arithmetic Operators","pos":[6145,6165]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>?<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[6198,6216],"source":"<strong>?</strong>"},{"content":"Ternary operator.","pos":[6226,6243]},{"content":"The question mark (<bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>?<ept id=\"p1\">&lt;/span&gt;</ept>) character is also used by the <ph id=\"ph1\">&lt;code&gt;like&lt;/code&gt;</ph> operator to signify exactly one character of any kind.","pos":[6244,6394],"source":" The question mark (<span class=\"code\">?</span>) character is also used by the <code>like</code> operator to signify exactly one character of any kind."},{"content":"The <ph id=\"ph1\">&lt;code&gt;like&lt;/code&gt;</ph> operator also uses the <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt><ept id=\"p1\">*&lt;/span&gt;</ept> character.","pos":[6395,6478],"source":" The <code>like</code> operator also uses the <span class=\"code\">*</span> character."},{"content":"Ternary Operator (?)","pos":[6488,6508]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>[<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[6542,6560],"source":"<strong>[</strong>"},{"content":"Array declarator, open.","pos":[6570,6593]},{"content":"Must be used with <ph id=\"ph1\">&amp;quot;</ph><bpt id=\"p1\">&lt;strong&gt;</bpt>]<ept id=\"p1\">&lt;/strong&gt;</ept><ph id=\"ph2\">&amp;quot;</ph>.","pos":[6594,6643],"source":" Must be used with &quot;<strong>]</strong>&quot;."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>]<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[6686,6704],"source":"<strong>]</strong>"},{"content":"Array declarator, close.","pos":[6714,6738]},{"content":"Must be used with <ph id=\"ph1\">&amp;quot;</ph><bpt id=\"p1\">&lt;strong&gt;</bpt>[<ept id=\"p1\">&lt;/strong&gt;</ept><ph id=\"ph2\">&amp;quot;</ph>.","pos":[6739,6788],"source":" Must be used with &quot;<strong>[</strong>&quot;."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>{<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[6832,6850],"source":"<strong>{</strong>"},{"content":"Indicates the beginning of a number of statements.","pos":[6860,6910]},{"content":"The last of these statements must be followed by a <ph id=\"ph1\">&amp;quot;</ph><bpt id=\"p1\">&lt;strong&gt;</bpt>}<ept id=\"p1\">&lt;/strong&gt;</ept><ph id=\"ph2\">&amp;quot;</ph>.","pos":[6911,6993],"source":" The last of these statements must be followed by a &quot;<strong>}</strong>&quot;."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>}<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[7036,7054],"source":"<strong>}</strong>"},{"content":"Indicates the end of a number of statements.","pos":[7064,7108]},{"content":"A <ph id=\"ph1\">&amp;quot;</ph><bpt id=\"p1\">&lt;strong&gt;</bpt>{<ept id=\"p1\">&lt;/strong&gt;</ept><ph id=\"ph2\">&amp;quot;</ph> must appear before the first of these statements.","pos":[7109,7191],"source":" A &quot;<strong>{</strong>&quot; must appear before the first of these statements."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>abstract<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[7235,7260],"source":"<strong>abstract</strong>"},{"content":"Class and method modifier.","pos":[7270,7296]},{"content":"An <bpt id=\"p1\">&lt;strong&gt;</bpt>abstract<ept id=\"p1\">&lt;/strong&gt;</ept> class cannot be constructed with the <bpt id=\"p2\">&lt;strong&gt;</bpt>new<ept id=\"p2\">&lt;/strong&gt;</ept> keyword.","pos":[7297,7392],"source":" An <strong>abstract</strong> class cannot be constructed with the <strong>new</strong> keyword."},{"content":"An <bpt id=\"p1\">&lt;strong&gt;</bpt>abstract<ept id=\"p1\">&lt;/strong&gt;</ept> method cannot be called.","pos":[7393,7446],"source":" An <strong>abstract</strong> method cannot be called."},{"content":"A table can also be modified as abstract by setting its <bpt id=\"p1\">&lt;span class=\"ui\"&gt;</bpt>Abstract<ept id=\"p1\">&lt;/span&gt;</ept> property to <bpt id=\"p2\">&lt;span class=\"ui\"&gt;</bpt>Yes<ept id=\"p2\">&lt;/span&gt;</ept> in the AOT, or by using the <ph id=\"ph1\">&lt;code&gt;DictTable&lt;/code&gt;</ph> class.","pos":[7447,7633],"source":" A table can also be modified as abstract by setting its <span class=\"ui\">Abstract</span> property to <span class=\"ui\">Yes</span> in the AOT, or by using the <code>DictTable</code> class."},{"content":"The <bpt id=\"p1\">&lt;span class=\"ui\"&gt;</bpt>Abstract<ept id=\"p1\">&lt;/span&gt;</ept> property defaults to <bpt id=\"p2\">&lt;span class=\"ui\"&gt;</bpt>No<ept id=\"p2\">&lt;/span&gt;</ept>, and it cannot be set unless the table is extended by another table.","pos":[7634,7787],"source":" The <span class=\"ui\">Abstract</span> property defaults to <span class=\"ui\">No</span>, and it cannot be set unless the table is extended by another table."},{"content":"Each row in an abstract table must have a dependent row in a derived table.","pos":[7788,7863]},{"content":"This means that each row in an abstract table has a value greater than 0 (zero) in its <bpt id=\"p1\">&lt;span class=\"ui\"&gt;</bpt>InstanceRelationType<ept id=\"p1\">&lt;/span&gt;</ept> property field.","pos":[7864,8011],"source":" This means that each row in an abstract table has a value greater than 0 (zero) in its <span class=\"ui\">InstanceRelationType</span> property field."},{"content":"There are no other effects from marking a table as abstract.","pos":[8012,8072]},{"content":"Informally, programmers often use the term <bpt id=\"p1\">&lt;span class=\"term\"&gt;</bpt>concrete<ept id=\"p1\">&lt;/span&gt;</ept> to describe a class that is non-<bpt id=\"p2\">&lt;strong&gt;</bpt>abstract<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[8073,8209],"source":" Informally, programmers often use the term <span class=\"term\">concrete</span> to describe a class that is non-<strong>abstract</strong>."},{"content":"Method Modifiers Table Inheritance Overview","pos":[8219,8262]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>anytype<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[8295,8319],"source":"<strong>anytype</strong>"},{"content":"The method can return any data type.","pos":[8329,8365]},{"content":"Anytype","pos":[8375,8382]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>as<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[8416,8435],"source":"<strong>as</strong>"},{"content":"Needed when you assign a base class variable to a derived class variable.","pos":[8445,8518]},{"content":"For example, given a <ph id=\"ph1\">&lt;code&gt;Derived&lt;/code&gt;</ph> class that <bpt id=\"p1\">&lt;strong&gt;</bpt>extends<ept id=\"p1\">&lt;/strong&gt;</ept> a <ph id=\"ph2\">&lt;code&gt;Base&lt;/code&gt;</ph> class, the statement <ph id=\"ph3\">&lt;code&gt;myDerived = myBase as Derived;&lt;/code&gt;</ph> avoids a compiler error by using the <bpt id=\"p2\">&lt;strong&gt;</bpt>as<ept id=\"p2\">&lt;/strong&gt;</ept> keyword.","pos":[8519,8747],"source":" For example, given a <code>Derived</code> class that <strong>extends</strong> a <code>Base</code> class, the statement <code>myDerived = myBase as Derived;</code> avoids a compiler error by using the <strong>as</strong> keyword."},{"content":"This keyword also applies when you assign a base table variable to a derived table variable.","pos":[8748,8840]},{"content":"Expression Operators: Is and As for Inheritance","pos":[8850,8897]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>asc<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[8930,8950],"source":"<strong>asc</strong>"},{"content":"An option on the <ph id=\"ph1\">&lt;code&gt;order&lt;/code&gt;</ph><ph id=\"ph2\"> &lt;code&gt;by&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;group&lt;/code&gt;</ph><ph id=\"ph4\"> &lt;code&gt;by&lt;/code&gt;</ph> clause in a <ph id=\"ph5\">&lt;code&gt;select&lt;/code&gt;</ph> statement.","pos":[8960,9092],"source":"An option on the <code>order</code> <code>by</code> or <code>group</code> <code>by</code> clause in a <code>select</code> statement."},{"content":"The sorting is ascending.","pos":[9093,9118]},{"content":"Select Statement Syntax","pos":[9128,9151]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>at<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[9185,9204],"source":"<strong>at</strong>"},{"content":"Specifies the position of a print window.","pos":[9214,9255]},{"content":"Print Statements","pos":[9265,9281]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>avg<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[9314,9334],"source":"<strong>avg</strong>"},{"content":"Returns the average of the fields from the rows specified by the <ph id=\"ph1\">&lt;code&gt;group by&lt;/code&gt;</ph> clause in a <ph id=\"ph2\">&lt;code&gt;select&lt;/code&gt;</ph> statement.","pos":[9344,9473],"source":"Returns the average of the fields from the rows specified by the <code>group by</code> clause in a <code>select</code> statement."},{"content":"Select Statement Syntax","pos":[9483,9506]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>break<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[9540,9562],"source":"<strong>break</strong>"},{"content":"Immediate exit from code block.","pos":[9572,9603]},{"content":"Break Statements","pos":[9613,9629]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>breakpoint<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[9662,9689],"source":"<strong>breakpoint</strong>"},{"content":"Represents a breakpoint that is set for debugging purposes.","pos":[9699,9758]},{"content":"To set a breakpoint in your code, write: <ph id=\"ph1\">&lt;code&gt;breakpoint;&lt;/code&gt;</ph>","pos":[9759,9824],"source":" To set a breakpoint in your code, write: <code>breakpoint;</code>"},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>by<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[9868,9887],"source":"<strong>by</strong>"},{"content":"Part of a reserved term, such as group by and order by.","pos":[9897,9952]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>byref<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[9995,10017],"source":"<strong>byref</strong>"},{"content":"Specifies that the parameter being passed to the called method is being passed by reference (address), instead of by value.","pos":[10027,10150]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Byref<ept id=\"p1\">&lt;/strong&gt;</ept> is used in X++ when calling a .NET method that takes a parameter by reference (such as with the C# keywords <bpt id=\"p2\">&lt;strong&gt;</bpt>out<ept id=\"p2\">&lt;/strong&gt;</ept> or <bpt id=\"p3\">&lt;strong&gt;</bpt>ref<ept id=\"p3\">&lt;/strong&gt;</ept>).","pos":[10151,10328],"source":"<strong>Byref</strong> is used in X++ when calling a .NET method that takes a parameter by reference (such as with the C# keywords <strong>out</strong> or <strong>ref</strong>)."},{"content":"How to: Use the byref Keyword for CLR Interop.","pos":[10338,10384]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>case<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[10418,10439],"source":"<strong>case</strong>"},{"content":"Selection within a <ph id=\"ph1\">&lt;code&gt;switch&lt;/code&gt;</ph> statement.","pos":[10449,10498],"source":"Selection within a <code>switch</code> statement."},{"content":"Switch Statements","pos":[10508,10525]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>catch<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[10558,10580],"source":"<strong>catch</strong>"},{"content":"Used in exception handling.","pos":[10590,10617]},{"content":"Exception Handling with try and catch Keywords","pos":[10627,10673]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>changeCompany<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[10707,10737],"source":"<strong>changeCompany</strong>"},{"content":"Changes database settings to another company.","pos":[10747,10792]},{"content":"Change Company Design Pattern","pos":[10802,10831]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>class<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[10864,10886],"source":"<strong>class</strong>"},{"content":"Declares a class.","pos":[10896,10913]},{"content":"Classes in X++","pos":[10923,10937]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>client<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[10971,10994],"source":"<strong>client</strong>"},{"content":"Method modifier.","pos":[11004,11020]},{"content":"Method Modifiers","pos":[11030,11046]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>container<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[11079,11105],"source":"<strong>container</strong>"},{"content":"Specifies a variable of type <ph id=\"ph1\">&lt;code&gt;container&lt;/code&gt;</ph>.","pos":[11115,11167],"source":"Specifies a variable of type <code>container</code>."},{"content":"Containers","pos":[11177,11187]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>continue<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[11221,11246],"source":"<strong>continue</strong>"},{"content":"Forces the next iteration of a loop.","pos":[11256,11292]},{"content":"Continue Statements","pos":[11302,11321]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>count<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[11354,11376],"source":"<strong>count</strong>"},{"content":"Returns the number of records from the rows specified by the <ph id=\"ph1\">&lt;code&gt;group by&lt;/code&gt;</ph> clause in a <ph id=\"ph2\">&lt;code&gt;select&lt;/code&gt;</ph> statement.","pos":[11386,11511],"source":"Returns the number of records from the rows specified by the <code>group by</code> clause in a <code>select</code> statement."},{"content":"Select Statement Syntax","pos":[11521,11544]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>crossCompany<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[11578,11607],"source":"<strong>crossCompany</strong>"},{"content":"Causes a <ph id=\"ph1\">&lt;code&gt;select&lt;/code&gt;</ph> statement to return data for all companies that the user is authorized to read from.","pos":[11617,11730],"source":"Causes a <code>select</code> statement to return data for all companies that the user is authorized to read from."},{"content":"Cross-Company X++ Code Basics","pos":[11740,11769]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>date<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[11802,11823],"source":"<strong>date</strong>"},{"content":"Specifies a variable of type <ph id=\"ph1\">&lt;code&gt;date&lt;/code&gt;</ph>.","pos":[11833,11880],"source":"Specifies a variable of type <code>date</code>."},{"content":"Dates","pos":[11890,11895]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>default<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[11929,11953],"source":"<strong>default</strong>"},{"content":"Default case within <ph id=\"ph1\">&lt;code&gt;switch&lt;/code&gt;</ph> statements.","pos":[11963,12014],"source":"Default case within <code>switch</code> statements."},{"content":"Switch Statements","pos":[12024,12041]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>delegate<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[12074,12099],"source":"<strong>delegate</strong>"},{"content":"A class member that is able to store multiple references to methods in other classes, and to call all those methods when prompted to do so.","pos":[12109,12248]},{"content":"A delegate can store references to various kinds of methods including the following:","pos":[12249,12333],"source":" A delegate can store references to various kinds of methods including the following:\n"},{"content":"static methods on X++ classes","pos":[12343,12372]},{"content":"instance methods on X++ classes","pos":[12382,12413]},{"content":"methods on .NET Framework classes","pos":[12423,12456]},{"content":"Event Terminology and Keywords X++, C# Comparison: Event","pos":[12477,12533]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>delete_from<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[12567,12595],"source":"<strong>delete_from</strong>"},{"content":"Allows you to delete multiple records from the database at the same time.","pos":[12605,12678]},{"content":"delete_from","pos":[12688,12699]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>desc<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[12732,12753],"source":"<strong>desc</strong>"},{"content":"An option on the <ph id=\"ph1\">&lt;code&gt;order by&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;group by&lt;/code&gt;</ph> clause in a <ph id=\"ph3\">&lt;code&gt;select&lt;/code&gt;</ph> statement.","pos":[12763,12869],"source":"An option on the <code>order by</code> or <code>group by</code> clause in a <code>select</code> statement."},{"content":"The sorting is descending.","pos":[12870,12896]},{"content":"Select Statement Syntax","pos":[12906,12929]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>display<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[12963,12987],"source":"<strong>display</strong>"},{"content":"Method modifier.","pos":[12997,13013]},{"content":"Method Modifiers","pos":[13023,13039]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>div<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[13072,13092],"source":"<strong>div</strong>"},{"content":"Integer division.","pos":[13102,13119]},{"content":"Arithmetic Operators","pos":[13129,13149]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>do<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[13183,13202],"source":"<strong>do</strong>"},{"content":"Beginning of a <ph id=\"ph1\">&lt;code&gt;do...while&lt;/code&gt;</ph> loop.","pos":[13212,13256],"source":"Beginning of a <code>do...while</code> loop."},{"content":"Do...while Loops","pos":[13266,13282]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>edit<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[13315,13336],"source":"<strong>edit</strong>"},{"content":"Method modifier.","pos":[13346,13362]},{"content":"Method Modifiers","pos":[13372,13388]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>else<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[13422,13443],"source":"<strong>else</strong>"},{"content":"Conditional execution (<ph id=\"ph1\">&lt;code&gt;if...else&lt;/code&gt;</ph>).","pos":[13453,13500],"source":"Conditional execution (<code>if...else</code>)."},{"content":"if and if ... else Statements","pos":[13510,13539]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>eventHandler<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[13572,13601],"source":"<strong>eventHandler</strong>"},{"content":"Must be used each time you either add or delete a method reference from a delegate by using the <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt><ph id=\"ph1\">+=</ph><ept id=\"p1\">&lt;/span&gt;</ept> or <bpt id=\"p2\">&lt;span class=\"code\"&gt;</bpt><ph id=\"ph2\">-=</ph><ept id=\"p2\">&lt;/span&gt;</ept> operator.","pos":[13611,13777],"source":"Must be used each time you either add or delete a method reference from a delegate by using the <span class=\"code\">+=</span> or <span class=\"code\">-=</span> operator."},{"content":"For example: <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>myDelegate += eventHandler(OtherClass::myStaticMethod);<ept id=\"p1\">&lt;/span&gt;</ept>","pos":[13778,13872],"source":" For example: <span class=\"code\">myDelegate += eventHandler(OtherClass::myStaticMethod);</span>"},{"content":"Event Terminology and Keywords X++, C# Comparison: Event","pos":[13882,13938]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>exists<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[13972,13995],"source":"<strong>exists</strong>"},{"content":"Used with <ph id=\"ph1\">&lt;code&gt;join&lt;/code&gt;</ph> clauses in <ph id=\"ph2\">&lt;code&gt;select&lt;/code&gt;</ph> statements.","pos":[14005,14075],"source":"Used with <code>join</code> clauses in <code>select</code> statements."},{"content":"Select Statement Syntax","pos":[14085,14108]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>extends<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[14141,14165],"source":"<strong>extends</strong>"},{"content":"A class or interface declaration clause.","pos":[14175,14215]},{"content":"If your class does not explicitly extend another class, your class is considered to extend the <ph id=\"ph1\">&lt;code&gt;Object&lt;/code&gt;</ph> class (as if you had written <ph id=\"ph2\">&amp;quot;</ph>extends Object<ph id=\"ph3\">&amp;quot;</ph>).","pos":[14216,14388],"source":" If your class does not explicitly extend another class, your class is considered to extend the <code>Object</code> class (as if you had written &quot;extends Object&quot;)."},{"content":"Creating a Subclass","pos":[14398,14417]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>false<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[14451,14473],"source":"<strong>false</strong>"},{"content":"Boolean literal.","pos":[14483,14499]},{"content":"Booleans","pos":[14509,14517]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>final<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[14550,14572],"source":"<strong>final</strong>"},{"content":"Class and method modifier.","pos":[14582,14608]},{"content":"Method Modifiers","pos":[14618,14634]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>firstFast<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[14668,14694],"source":"<strong>firstFast</strong>"},{"content":"Used in <ph id=\"ph1\">&lt;code&gt;select&lt;/code&gt;</ph> statements to speed up the fetch for the first row.","pos":[14704,14783],"source":"Used in <code>select</code> statements to speed up the fetch for the first row."},{"content":"Select Statement Syntax","pos":[14793,14816]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>firstOnly<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[14849,14875],"source":"<strong>firstOnly</strong>"},{"content":"Used in <ph id=\"ph1\">&lt;code&gt;select&lt;/code&gt;</ph> statements to fetch only the first record.","pos":[14885,14955],"source":"Used in <code>select</code> statements to fetch only the first record."},{"content":"The <ph id=\"ph1\">&lt;code&gt;firstOnly&lt;/code&gt;</ph> keyword does not guarantee that a maximum of one record is retrieved by an X++ SQL <ph id=\"ph2\">&lt;code&gt;select&lt;/code&gt;</ph> statement.","pos":[14956,15096],"source":" The <code>firstOnly</code> keyword does not guarantee that a maximum of one record is retrieved by an X++ SQL <code>select</code> statement."},{"content":"If the AOS can use the <ph id=\"ph1\">&lt;code&gt;EntireTable&lt;/code&gt;</ph> cache to satisfy the data demands of the <ph id=\"ph2\">&lt;code&gt;select&lt;/code&gt;</ph> statement, the <ph id=\"ph3\">&lt;code&gt;firstOnly&lt;/code&gt;</ph> keyword is ignored.","pos":[15097,15263],"source":" If the AOS can use the <code>EntireTable</code> cache to satisfy the data demands of the <code>select</code> statement, the <code>firstOnly</code> keyword is ignored."},{"content":"Select Statement Syntax Set-based Caching","pos":[15273,15314]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>firstOnly10<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[15348,15376],"source":"<strong>firstOnly10</strong>"},{"content":"Same as <bpt id=\"p1\">&lt;strong&gt;</bpt>firstOnly<ept id=\"p1\">&lt;/strong&gt;</ept>, except returns 10 rows instead of one.","pos":[15386,15460],"source":"Same as <strong>firstOnly</strong>, except returns 10 rows instead of one."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>firstOnly100<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[15503,15532],"source":"<strong>firstOnly100</strong>"},{"content":"Same as <bpt id=\"p1\">&lt;strong&gt;</bpt>firstOnly<ept id=\"p1\">&lt;/strong&gt;</ept>, except returns 100 rows instead of one.","pos":[15542,15617],"source":"Same as <strong>firstOnly</strong>, except returns 100 rows instead of one."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>firstOnly1000<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[15661,15691],"source":"<strong>firstOnly1000</strong>"},{"content":"Same as <bpt id=\"p1\">&lt;strong&gt;</bpt>firstOnly<ept id=\"p1\">&lt;/strong&gt;</ept>, except returns 1000 rows instead of one.","pos":[15701,15777],"source":"Same as <strong>firstOnly</strong>, except returns 1000 rows instead of one."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>flush<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[15820,15842],"source":"<strong>flush</strong>"},{"content":"Clears an entire table cache.","pos":[15852,15881]},{"content":"Here is the syntax for the <ph id=\"ph1\">&lt;code&gt;flush&lt;/code&gt;</ph> statement: <ph id=\"ph2\">&lt;code&gt;YourTable ytBuffer;&lt;/code&gt;</ph><ph id=\"ph3\">  &lt;code&gt;flush ytBuffer;&lt;/code&gt;</ph>","pos":[15882,16001],"source":" Here is the syntax for the <code>flush</code> statement: <code>YourTable ytBuffer;</code>  <code>flush ytBuffer;</code>"},{"content":"Set-based Caching","pos":[16011,16028]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>for<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[16062,16082],"source":"<strong>for</strong>"},{"content":"For loop iteration.","pos":[16092,16111]},{"content":"For Loops","pos":[16121,16130]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>forceLiterals<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[16163,16193],"source":"<strong>forceLiterals</strong>"},{"content":"Used in <ph id=\"ph1\">&lt;code&gt;select&lt;/code&gt;</ph> statements to reveal actual values that are used in <ph id=\"ph2\">&lt;code&gt;where&lt;/code&gt;</ph> clauses to the Microsoft SQL Server database at the time of optimization.","pos":[16203,16375],"source":"Used in <code>select</code> statements to reveal actual values that are used in <code>where</code> clauses to the Microsoft SQL Server database at the time of optimization."},{"content":"Select Statement Syntax","pos":[16385,16408]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>forceNestedLoop<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[16442,16474],"source":"<strong>forceNestedLoop</strong>"},{"content":"Forces the SQL Server database to use a nested-loop algorithm to process a particular SQL statement containing a <ph id=\"ph1\">&lt;code&gt;join&lt;/code&gt;</ph>.","pos":[16484,16615],"source":"Forces the SQL Server database to use a nested-loop algorithm to process a particular SQL statement containing a <code>join</code>."},{"content":"Select Statement Syntax","pos":[16625,16648]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>forcePlaceholders<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[16681,16715],"source":"<strong>forcePlaceholders</strong>"},{"content":"Used in <ph id=\"ph1\">&lt;code&gt;select&lt;/code&gt;</ph> statements to instruct the kernel not to reveal the actual values used in <ph id=\"ph2\">&lt;code&gt;where&lt;/code&gt;</ph> clauses to the Microsoft SQL Server database at the time of optimization.","pos":[16725,16919],"source":"Used in <code>select</code> statements to instruct the kernel not to reveal the actual values used in <code>where</code> clauses to the Microsoft SQL Server database at the time of optimization."},{"content":"Select Statement Syntax","pos":[16929,16952]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>forceSelectOrder<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[16986,17019],"source":"<strong>forceSelectOrder</strong>"},{"content":"Forces the SQL Server database to access the tables in a join in the specified order.","pos":[17029,17114]},{"content":"Select Statement Syntax","pos":[17124,17147]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>forUpdate<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[17180,17206],"source":"<strong>forUpdate</strong>"},{"content":"Selects records exclusively for update.","pos":[17216,17255]},{"content":"The operation to be performed on the records that are fetched is an update.","pos":[17256,17331]},{"content":"Depending on the underlying database, the records may be locked for other users.","pos":[17332,17412]},{"content":"Select Statement Syntax","pos":[17422,17445]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>from<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[17479,17500],"source":"<strong>from</strong>"},{"content":"Part of a <ph id=\"ph1\">&lt;code&gt;select&lt;/code&gt;</ph> statement.","pos":[17510,17550],"source":"Part of a <code>select</code> statement."},{"content":"The <ph id=\"ph1\">&lt;code&gt;from&lt;/code&gt;</ph> clause specifies the table in which the columns exists.","pos":[17551,17628],"source":" The <code>from</code> clause specifies the table in which the columns exists."},{"content":"Select Statement Syntax","pos":[17638,17661]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>group<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[17694,17716],"source":"<strong>group</strong>"},{"content":"Part of the <ph id=\"ph1\">&lt;code&gt;group by&lt;/code&gt;</ph> clause in a <ph id=\"ph2\">&lt;code&gt;select&lt;/code&gt;</ph> statement.","pos":[17726,17802],"source":"Part of the <code>group by</code> clause in a <code>select</code> statement."},{"content":"Select Statement Syntax","pos":[17812,17835]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>if<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[17869,17888],"source":"<strong>if</strong>"},{"content":"Conditional execution.","pos":[17898,17920]},{"content":"if and if ... else Statements","pos":[17930,17959]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>implements<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[17992,18019],"source":"<strong>implements</strong>"},{"content":"Implements an interface.","pos":[18029,18053]},{"content":"Interfaces Overview","pos":[18063,18082]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>insert_recordset<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[18116,18149],"source":"<strong>insert_recordset</strong>"},{"content":"Copies data from one or more tables into one resulting destination table on a single server trip.","pos":[18159,18256]},{"content":"insert_recordset","pos":[18266,18282]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>int<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[18315,18335],"source":"<strong>int</strong>"},{"content":"Specifies a variable of type <ph id=\"ph1\">&lt;code&gt;integer&lt;/code&gt;</ph> (32-bit).","pos":[18345,18404],"source":"Specifies a variable of type <code>integer</code> (32-bit)."},{"content":"Integers","pos":[18414,18422]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>int64<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[18456,18478],"source":"<strong>int64</strong>"},{"content":"Specifies a variable of type <ph id=\"ph1\">&lt;code&gt;integer&lt;/code&gt;</ph> (64-bit).","pos":[18488,18547],"source":"Specifies a variable of type <code>integer</code> (64-bit)."},{"content":"Integers","pos":[18557,18565]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>interface<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[18598,18624],"source":"<strong>interface</strong>"},{"content":"Interface declaration.","pos":[18634,18656]},{"content":"Interfaces Overview","pos":[18666,18685]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>is<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[18719,18738],"source":"<strong>is</strong>"},{"content":"Asks whether the object referenced by a class variable either inherits from the given class or is of the given class.","pos":[18748,18865]},{"content":"For example, given a <ph id=\"ph1\">&lt;code&gt;Derived&lt;/code&gt;</ph> class that <bpt id=\"p1\">&lt;strong&gt;</bpt>extends<ept id=\"p1\">&lt;/strong&gt;</ept> a <ph id=\"ph2\">&lt;code&gt;Base&lt;/code&gt;</ph> class, the expression <ph id=\"ph3\">&lt;code&gt;(myDerived is Base)&lt;/code&gt;</ph> returns <bpt id=\"p2\">&lt;strong&gt;</bpt>true<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[18866,19049],"source":" For example, given a <code>Derived</code> class that <strong>extends</strong> a <code>Base</code> class, the expression <code>(myDerived is Base)</code> returns <strong>true</strong>."},{"content":"This keyword applies to class inheritance and table inheritance.","pos":[19050,19114]},{"content":"Expression Operators: Is and As for Inheritance","pos":[19124,19171]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>join<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[19204,19225],"source":"<strong>join</strong>"},{"content":"Tables are joined on columns common to both tables.","pos":[19235,19286]},{"content":"You can generate a single result set based on multiple tables through the use of joins.","pos":[19287,19374]},{"content":"Select Statement Syntax","pos":[19384,19407]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>like<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[19441,19462],"source":"<strong>like</strong>"},{"content":"Tests for matches by pattern, with wildcard symbols * and ?.","pos":[19472,19532]},{"content":"The string on the right side of the <ph id=\"ph1\">&lt;code&gt;like&lt;/code&gt;</ph> operator must use four backslash characters to represent one backslash.","pos":[19533,19658],"source":" The string on the right side of the <code>like</code> operator must use four backslash characters to represent one backslash."},{"content":"Examples follow:","pos":[19659,19675],"source":" Examples follow:\n"},{"content":"<bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>(<ph id=\"ph1\">&amp;quot;</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">&amp;quot;</ph> like <ph id=\"ph4\">&amp;quot;</ph><bpt id=\"p2\">*</bpt><ph id=\"ph5\">\\\\</ph><ept id=\"p2\">*</ept><ph id=\"ph6\">&amp;quot;</ph> )<ept id=\"p1\">&lt;/span&gt;</ept> //Resolves to false.","pos":[19685,19771],"source":"<span class=\"code\">(&quot;\\\\&quot; like &quot;*\\\\*&quot; )</span> //Resolves to false."},{"content":"<bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>(<ph id=\"ph1\">&amp;quot;</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">&amp;quot;</ph> like <ph id=\"ph4\">&amp;quot;</ph><bpt id=\"p2\">*</bpt><ph id=\"ph5\">\\\\</ph><ph id=\"ph6\">\\\\</ph><ept id=\"p2\">*</ept><ph id=\"ph7\">&amp;quot;</ph>)<ept id=\"p1\">&lt;/span&gt;</ept> //Resolves to true.","pos":[19781,19867],"source":"<span class=\"code\">(&quot;\\\\&quot; like &quot;*\\\\\\\\*&quot;)</span> //Resolves to true."},{"content":"Relational Operators","pos":[19888,19908]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>maxof<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[19941,19963],"source":"<strong>maxof</strong>"},{"content":"Returns the maximum of the fields from the rows specified by the <ph id=\"ph1\">&lt;code&gt;group by&lt;/code&gt;</ph> clause.","pos":[19973,20067],"source":"Returns the maximum of the fields from the rows specified by the <code>group by</code> clause."},{"content":"Select Statement Syntax","pos":[20077,20100]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>minof<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[20134,20156],"source":"<strong>minof</strong>"},{"content":"Returns the minimum of the fields from the rows specified by the <ph id=\"ph1\">&lt;code&gt;group by&lt;/code&gt;</ph> clause.","pos":[20166,20260],"source":"Returns the minimum of the fields from the rows specified by the <code>group by</code> clause."},{"content":"Select Statement Syntax","pos":[20270,20293]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>mod<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[20326,20346],"source":"<strong>mod</strong>"},{"content":"Returns the integer remainder of the left expression1 divided by the right expression2.","pos":[20356,20443]},{"content":"Informally this is sometimes called the modulo operator.","pos":[20444,20500]},{"content":"<ph id=\"ph1\">&lt;code&gt;((12 mod 7) == 5)&lt;/code&gt;</ph> is true.","pos":[20501,20540],"source":"<code>((12 mod 7) == 5)</code> is true."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>new<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[20584,20604],"source":"<strong>new</strong>"},{"content":"Operator.","pos":[20614,20623]},{"content":"Creates an instance of an anonymous class that is assignment-compatible with the named class/interface reference variables, or allocates memory for an array.","pos":[20624,20781]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>next<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[20824,20845],"source":"<strong>next</strong>"},{"content":"Fetches the next record in a table.","pos":[20855,20890]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>noFetch<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[20934,20958],"source":"<strong>noFetch</strong>"},{"content":"Indicates that no records are to be fetched at present.","pos":[20968,21023]},{"content":"Select Statement Syntax","pos":[21033,21056]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>notExists<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[21089,21115],"source":"<strong>notExists</strong>"},{"content":"Used with <ph id=\"ph1\">&lt;code&gt;join&lt;/code&gt;</ph> clauses in <ph id=\"ph2\">&lt;code&gt;select&lt;/code&gt;</ph> statements.","pos":[21125,21195],"source":"Used with <code>join</code> clauses in <code>select</code> statements."},{"content":"Select Statement Syntax","pos":[21205,21228]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>null<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[21262,21283],"source":"<strong>null</strong>"},{"content":"Symbolic constant.","pos":[21293,21311]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>optimisticLock<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[21354,21385],"source":"<strong>optimisticLock</strong>"},{"content":"Forces a statement to run with optimistic concurrency control, even if a different value is set on the table.","pos":[21395,21504]},{"content":"Select Statement Syntax","pos":[21514,21537]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>order<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[21571,21593],"source":"<strong>order</strong>"},{"content":"Part of the <ph id=\"ph1\">&lt;code&gt;order by&lt;/code&gt;</ph> clause in a <ph id=\"ph2\">&lt;code&gt;select&lt;/code&gt;</ph> statement.","pos":[21603,21679],"source":"Part of the <code>order by</code> clause in a <code>select</code> statement."},{"content":"Select Statement Syntax","pos":[21689,21712]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>outer<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[21745,21767],"source":"<strong>outer</strong>"},{"content":"<bpt id=\"p1\">&lt;span class=\"keyword\"&gt;</bpt>outer join<ept id=\"p1\">&lt;/span&gt;</ept>.","pos":[21777,21817],"source":"<span class=\"keyword\">outer join</span>."},{"content":"Select Statement Syntax","pos":[21827,21850]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>pause<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[21884,21906],"source":"<strong>pause</strong>"},{"content":"Halts the execution of a job.","pos":[21916,21945]},{"content":"The user is asked to state whether execution should continue.","pos":[21946,22007]},{"content":"Select Statements","pos":[22017,22034]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>pessimisticLock<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[22067,22099],"source":"<strong>pessimisticLock</strong>"},{"content":"Forces a statement to run with pessimistic concurrency control, even if a different value is set on the table.","pos":[22109,22219]},{"content":"Select Statement Syntax","pos":[22229,22252]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>print<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[22286,22308],"source":"<strong>print</strong>"},{"content":"Allows you to display output on the screen.","pos":[22318,22361]},{"content":"Print Statements","pos":[22371,22387]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>private<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[22420,22444],"source":"<strong>private</strong>"},{"content":"Method access modifier.","pos":[22454,22477]},{"content":"Method Access Control","pos":[22487,22508]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>protected<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[22542,22568],"source":"<strong>protected</strong>"},{"content":"Method access modifier.","pos":[22578,22601]},{"content":"Method Access Control","pos":[22611,22632]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>public<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[22665,22688],"source":"<strong>public</strong>"},{"content":"Method access modifier.","pos":[22698,22721]},{"content":"Method Access Control","pos":[22731,22752]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>real<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[22786,22807],"source":"<strong>real</strong>"},{"content":"Specifies a variable of type <ph id=\"ph1\">&lt;code&gt;real&lt;/code&gt;</ph>.","pos":[22817,22864],"source":"Specifies a variable of type <code>real</code>."},{"content":"Reals","pos":[22874,22879]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>repeatableRead<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[22912,22943],"source":"<strong>repeatableRead</strong>"},{"content":"Specifies that no other transactions can modify data that has been read by logic inside the current transaction, until after the current transaction completes.","pos":[22953,23112]},{"content":"An explicit transaction completes at either <bpt id=\"p1\">&lt;strong&gt;</bpt>ttsAbort<ept id=\"p1\">&lt;/strong&gt;</ept> or at the outermost <bpt id=\"p2\">&lt;strong&gt;</bpt>ttsCommit<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[23113,23230],"source":" An explicit transaction completes at either <strong>ttsAbort</strong> or at the outermost <strong>ttsCommit</strong>."},{"content":"For a stand-alone <bpt id=\"p1\">&lt;strong&gt;</bpt>select<ept id=\"p1\">&lt;/strong&gt;</ept> statement, the transaction duration is the duration of the <bpt id=\"p2\">&lt;strong&gt;</bpt>select<ept id=\"p2\">&lt;/strong&gt;</ept> command.","pos":[23231,23364],"source":" For a stand-alone <strong>select</strong> statement, the transaction duration is the duration of the <strong>select</strong> command."},{"content":"However, the database sometimes enforces the equivalent of <bpt id=\"p1\">&lt;strong&gt;</bpt>repeatableRead<ept id=\"p1\">&lt;/strong&gt;</ept> in individual <bpt id=\"p2\">&lt;strong&gt;</bpt>select<ept id=\"p2\">&lt;/strong&gt;</ept> statements even without this keyword appearing in your X++ code (depending on how the database decides to scan the tables).","pos":[23365,23617],"source":" However, the database sometimes enforces the equivalent of <strong>repeatableRead</strong> in individual <strong>select</strong> statements even without this keyword appearing in your X++ code (depending on how the database decides to scan the tables)."},{"content":"For more information, see the documentation for the underlying relational database product.","pos":[23627,23718]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>retry<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[23752,23774],"source":"<strong>retry</strong>"},{"content":"Used in exception handling.","pos":[23784,23811]},{"content":"Exception Handling with try and catch Keywords","pos":[23821,23867]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>return<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[23900,23923],"source":"<strong>return</strong>"},{"content":"Exits from a method.","pos":[23933,23953]},{"content":"Declaration of Methods","pos":[23963,23985]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>reverse<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[24019,24043],"source":"<strong>reverse</strong>"},{"content":"Records are returned in reverse order.","pos":[24053,24091]},{"content":"Select Statement Syntax","pos":[24101,24124]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>select<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[24157,24180],"source":"<strong>select</strong>"},{"content":"The <ph id=\"ph1\">&lt;code&gt;select&lt;/code&gt;</ph> clause designates which columns or views are shown in the result set.","pos":[24190,24283],"source":"The <code>select</code> clause designates which columns or views are shown in the result set."},{"content":"Select Statements","pos":[24293,24310]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>server<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[24344,24367],"source":"<strong>server</strong>"},{"content":"Method modifier.","pos":[24377,24393]},{"content":"Method Modifiers","pos":[24403,24419]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>setting<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[24452,24476],"source":"<strong>setting</strong>"},{"content":"Used with the <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>update_recordset<ept id=\"p1\">&lt;/span&gt;</ept> command.","pos":[24486,24551],"source":"Used with the <span class=\"code\">update_recordset</span> command."},{"content":"update_recordset","pos":[24561,24577]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>static<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[24611,24634],"source":"<strong>static</strong>"},{"content":"Static methods may not refer to instance variables (only to static variables); may be invoked by using the class name rather than on an instance of the class (<ph id=\"ph1\">&amp;quot;</ph><ph id=\"ph2\">&lt;code&gt;MyClass.aStaticProcedure&lt;/code&gt;</ph><ph id=\"ph3\">&amp;quot;</ph>).","pos":[24644,24854],"source":"Static methods may not refer to instance variables (only to static variables); may be invoked by using the class name rather than on an instance of the class (&quot;<code>MyClass.aStaticProcedure</code>&quot;)."},{"content":"Method Modifiers","pos":[24864,24880]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>str<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[24913,24933],"source":"<strong>str</strong>"},{"content":"Specifies a variable of type <ph id=\"ph1\">&lt;code&gt;string&lt;/code&gt;</ph>.","pos":[24943,24992],"source":"Specifies a variable of type <code>string</code>."},{"content":"Strings","pos":[25002,25009]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>sum<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[25043,25063],"source":"<strong>sum</strong>"},{"content":"Returns the sum of the fields from the rows specified by the <ph id=\"ph1\">&lt;code&gt;group by&lt;/code&gt;</ph> clause in a <ph id=\"ph2\">&lt;code&gt;select&lt;/code&gt;</ph> statement.","pos":[25073,25198],"source":"Returns the sum of the fields from the rows specified by the <code>group by</code> clause in a <code>select</code> statement."},{"content":"Select Statement Syntax","pos":[25208,25231]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>super<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[25264,25286],"source":"<strong>super</strong>"},{"content":"Calls the method that was overridden by the current method.","pos":[25296,25355]},{"content":"Table Methods","pos":[25365,25378]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>switch<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[25412,25435],"source":"<strong>switch</strong>"},{"content":"Switch selection statement.","pos":[25445,25472]},{"content":"Switch Statements","pos":[25482,25499]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>tableLock<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[25532,25558],"source":"<strong>tableLock</strong>"},{"content":"Obsolete; <bpt id=\"p1\">&lt;strong&gt;</bpt>tableLock<ept id=\"p1\">&lt;/strong&gt;</ept> is no longer available.","pos":[25568,25628],"source":"Obsolete; <strong>tableLock</strong> is no longer available."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>this<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[25672,25693],"source":"<strong>this</strong>"},{"content":"A reference to the current instance of the class.","pos":[25703,25752]},{"content":"Used in X++ code inside a method of the class.","pos":[25753,25799]},{"content":"Used to reference <bpt id=\"p1\">&lt;em&gt;</bpt>method<ept id=\"p1\">&lt;/em&gt;</ept> members of the class, but not <bpt id=\"p2\">&lt;em&gt;</bpt>field<ept id=\"p2\">&lt;/em&gt;</ept> members of the class.<ph id=\"ph1\">&lt;code&gt;public str getFullName()&lt;/code&gt;</ph><bpt id=\"p3\">  &lt;span class=\"code\"&gt;</bpt>{<ept id=\"p3\">&lt;/span&gt;</ept><bpt id=\"p4\">  &lt;span class=\"code\"&gt;</bpt>    // Next statement fails to compile without 'this.'.<ept id=\"p4\">&lt;/span&gt;</ept><ph id=\"ph2\">  &lt;code&gt;    return this.concatenateFirstAndLastNames();&lt;/code&gt;</ph><bpt id=\"p5\">  &lt;span class=\"code\"&gt;</bpt>}<ept id=\"p5\">&lt;/span&gt;</ept>","pos":[25800,26140],"source":" Used to reference <em>method</em> members of the class, but not <em>field</em> members of the class.<code>public str getFullName()</code>  <span class=\"code\">{</span>  <span class=\"code\">    // Next statement fails to compile without 'this.'.</span>  <code>    return this.concatenateFirstAndLastNames();</code>  <span class=\"code\">}</span>"},{"content":"Loosely similar to the system variable that is named <ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph>.","pos":[26150,26224],"source":"Loosely similar to the system variable that is named <code>element</code>."},{"content":"You use <ph id=\"ph1\">&lt;code&gt;element&lt;/code&gt;</ph> in form control methods to reference the containing form.","pos":[26225,26311],"source":" You use <code>element</code> in form control methods to reference the containing form."},{"content":"For more information, see Using Variables with Forms.","pos":[26312,26365]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>throw<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[26398,26420],"source":"<strong>throw</strong>"},{"content":"Used in exception handling.","pos":[26430,26457]},{"content":"Exception Handling with try and catch Keywords","pos":[26467,26513]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>true<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[26547,26568],"source":"<strong>true</strong>"},{"content":"Boolean literal.","pos":[26578,26594]},{"content":"Booleans","pos":[26604,26612]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>try<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[26645,26665],"source":"<strong>try</strong>"},{"content":"Used in exception handling.","pos":[26675,26702]},{"content":"Exception Handling with try and catch Keywords","pos":[26712,26758]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>ttsAbort<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[26792,26817],"source":"<strong>ttsAbort</strong>"},{"content":"Discards all changes in the current transaction.","pos":[26827,26875]},{"content":"Transaction Integrity","pos":[26885,26906]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>ttsBegin<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[26939,26964],"source":"<strong>ttsBegin</strong>"},{"content":"Marks the beginning of a transaction.","pos":[26974,27011]},{"content":"Transaction Integrity","pos":[27021,27042]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>ttsCommit<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[27076,27102],"source":"<strong>ttsCommit</strong>"},{"content":"Marks the end of a transaction.","pos":[27112,27143]},{"content":"Transaction Integrity","pos":[27153,27174]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>update_recordset<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[27207,27240],"source":"<strong>update_recordset</strong>"},{"content":"Allows the manipulation of row sets within one operation.","pos":[27250,27307]},{"content":"update_recordset","pos":[27317,27333]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>validTimeState<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[27367,27398],"source":"<strong>validTimeState</strong>"},{"content":"Filters rows that are retrieved from a valid time state table by an X++ SQL <ph id=\"ph1\">&lt;code&gt;select&lt;/code&gt;</ph> statement.","pos":[27408,27514],"source":"Filters rows that are retrieved from a valid time state table by an X++ SQL <code>select</code> statement."},{"content":"For example: <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>select validTimeState(myDateEffective) * from xMyTable;<ept id=\"p1\">&lt;/span&gt;</ept> ...or...  <bpt id=\"p2\">&lt;span class=\"code\"&gt;</bpt>select validTimeState(myDateFrom, myDateTo) * from xMyTable;<ept id=\"p2\">&lt;/span&gt;</ept>","pos":[27515,27706],"source":" For example: <span class=\"code\">select validTimeState(myDateEffective) * from xMyTable;</span> ...or...  <span class=\"code\">select validTimeState(myDateFrom, myDateTo) * from xMyTable;</span>"},{"content":"Effects of Valid Time State Tables on Read and Write Operations","pos":[27716,27779]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>void<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[27812,27833],"source":"<strong>void</strong>"},{"content":"Identifies a method that does not return a value.","pos":[27843,27892]},{"content":"Declaration of Methods","pos":[27902,27924]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>where<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[27958,27980],"source":"<strong>where</strong>"},{"content":"Part of a <ph id=\"ph1\">&lt;code&gt;select&lt;/code&gt;</ph> statement.","pos":[27990,28030],"source":"Part of a <code>select</code> statement."},{"content":"The <ph id=\"ph1\">&lt;code&gt;where&lt;/code&gt;</ph> clause specifies the conditions to be satisfied; that is, the rows that you want to include in the result.","pos":[28031,28160],"source":" The <code>where</code> clause specifies the conditions to be satisfied; that is, the rows that you want to include in the result."},{"content":"Select Statement Syntax","pos":[28170,28193]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>while<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[28226,28248],"source":"<strong>while</strong>"},{"content":"Iteration statement.","pos":[28258,28278]},{"content":"Executes a statement or block repeatedly when a test condition is true.","pos":[28279,28350]},{"content":"While Loops while select Statements","pos":[28360,28395]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>window<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[28429,28452],"source":"<strong>window</strong>"},{"content":"Allows you to alter the size of the output window.","pos":[28462,28512]},{"content":"Print Statements","pos":[28522,28538]},{"pos":[28572,28590],"content":"Expressions Syntax","linkify":"Expressions Syntax","nodes":[{"content":"Expressions Syntax","pos":[0,18]}]},{"content":"An expression in X++ is used in either a mathematical or logical way.","pos":[28591,28660]},{"content":"Expressions are built on the data types of the language; that is, an expression returns a value of some type.","pos":[28661,28770]},{"content":"This value can be used in calculations, assignments, conditional statements, and so on.","pos":[28771,28858]},{"pos":[28864,28902],"content":"EBNF Description of Expressions in X++","linkify":"EBNF Description of Expressions in X++","nodes":[{"content":"EBNF Description of Expressions in X++","pos":[0,38]}]},{"content":"Expression","pos":[29130,29140]},{"content":"Simple-expression <ph id=\"ph1\">\\[</ph>RelationalOperator Simple-expression <ph id=\"ph2\">\\]</ph>","pos":[29157,29216],"source":"Simple-expression \\[RelationalOperator Simple-expression \\]"},{"content":"RelationalOperator","pos":[29242,29260]},{"content":"!=","pos":[29273,29275]},{"content":"like","pos":[29308,29312]},{"content":"Simple-expression","pos":[29354,29371]},{"content":"Simple-expression <ph id=\"ph1\">\\[</ph><ph id=\"ph2\"> +</ph>","pos":[29381,29403],"source":"Simple-expression \\[ +"},{"content":"<ph id=\"ph1\">\\]</ph> Term","pos":[29412,29419],"source":"\\] Term"},{"content":"Term","pos":[29422,29426]},{"content":"Term","pos":[29466,29470]},{"content":"Compfactor { Mult-operator CompFactor }","pos":[29493,29532]},{"content":"Mult-operator","pos":[29578,29591]},{"content":"div","pos":[29614,29617]},{"content":"mod","pos":[29620,29623]},{"content":"CompFactor","pos":[29690,29700]},{"content":"<ph id=\"ph1\">\\[</ph> !","pos":[29717,29721],"source":"\\[ !"},{"content":"<ph id=\"ph1\">\\]</ph> <ph id=\"ph2\">\\[</ph><ph id=\"ph3\"> -</ph>","pos":[29722,29729],"source":"\\] \\[ -"},{"content":"<ph id=\"ph1\">~ </ph><ph id=\"ph2\">\\]</ph> Factor","pos":[29732,29743],"source":"~ \\] Factor"},{"content":"Factor","pos":[29802,29808]},{"content":"Literal","pos":[29829,29836]},{"content":"Enum","pos":[29839,29843]},{"content":"Variable","pos":[29846,29854]},{"content":"FunctionCall","pos":[29857,29869]},{"content":"( If-expression )","pos":[29872,29889]},{"content":"Select-expression","pos":[29892,29909]},{"content":"Enum","pos":[29914,29918]},{"content":"EnumName :: Literal","pos":[29941,29960]},{"content":"Variable","pos":[30026,30034]},{"content":"Identifier <ph id=\"ph1\">\\[</ph> <ph id=\"ph2\">\\[</ph> Expression <ph id=\"ph3\">\\]</ph> <ph id=\"ph4\">\\]</ph> <ph id=\"ph5\">\\[</ph> .","pos":[30053,30091],"source":"Identifier \\[ \\[ Expression \\] \\] \\[ ."},{"content":"Expression <ph id=\"ph1\">\\]</ph>","pos":[30092,30105],"source":" Expression \\]"},{"content":"FunctionCall","pos":[30138,30150]},{"content":"<ph id=\"ph1\">\\[</ph> Expression (.","pos":[30165,30181],"source":"\\[ Expression (."},{"content":"::)","pos":[30184,30187]},{"content":"this .","pos":[30190,30196]},{"content":"<ph id=\"ph1\">\\]</ph> FunctionName ( argumentlist )","pos":[30197,30229],"source":"\\] FunctionName ( argumentlist )"},{"content":"If-expression","pos":[30250,30263]},{"content":"Expression ?","pos":[30277,30289]},{"content":"Expression : Expression","pos":[30290,30313]},{"content":"Semantic restrictions apply on the preceding syntax.","pos":[30361,30413]},{"content":"You cannot call any method using the :: operator.","pos":[30414,30463]},{"content":"Similarly, you cannot use the <bpt id=\"p1\">**</bpt>this<ept id=\"p1\">**</ept> keyword without an active object; that is, if you are not within a method and so on.","pos":[30464,30587],"source":" Similarly, you cannot use the **this** keyword without an active object; that is, if you are not within a method and so on."},{"pos":[30593,30601],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Example of expression","pos":[30605,30626]},{"content":"Description","pos":[30667,30678]},{"content":"An integer literal.","pos":[31085,31104]},{"content":"NoYes::No","pos":[31232,31241]},{"content":"An enum-reference.","pos":[31294,31312]},{"content":"A variable-reference.","pos":[31503,31524]},{"content":"Debtor::Find(\"1\")","pos":[31650,31667]},{"content":"A static method-call (returns a customer variable).","pos":[31712,31763]},{"content":"(A <ph id=\"ph1\">&amp;gt;</ph> 3 ?","pos":[31859,31870],"source":"(A &gt; 3 ?"},{"content":"true : false)","pos":[31871,31884]},{"pos":[31921,31973],"content":"An if-expression that returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","source":"An if-expression that returns **true** or **false**."},{"content":"(select CustTable where CustTable.Account == \"100\").NameRef","pos":[32068,32127]},{"content":"A select-expression.","pos":[32130,32150]},{"content":"Returns the nameref field in the customer table.","pos":[32151,32199]},{"content":"This is a string.","pos":[32200,32217]},{"content":"A <ph id=\"ph1\">&amp;gt;</ph>= B","pos":[32277,32286],"source":"A &gt;= B"},{"content":"A logical expression.","pos":[32339,32360]},{"content":"Returns <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","pos":[32361,32391],"source":" Returns **true** or **false**."},{"content":"A + B","pos":[32486,32491]},{"content":"An arithmetic expression.","pos":[32548,32573]},{"content":"Sums A and B.","pos":[32574,32587]},{"content":"A + B / C","pos":[32695,32704]},{"content":"Calculates B/C, and then adds this to A.","pos":[32757,32797]},{"content":"~A + this.Value()","pos":[32904,32921]},{"content":"Sums binary not A and the result of the method-call Value on the object in scope (this).","pos":[32966,33054]},{"content":"Debtor::Find(\"1\").NameRef","pos":[33113,33138]},{"content":"Returns the NameRef field of the found customer record.","pos":[33175,33230]},{"content":"Debtor::Find(\"1\").Balance()","pos":[33322,33349]},{"content":"A method call to <ph id=\"ph1\">`Balance`</ph> in the customer table (Debtor::Find returns a customer).","pos":[33384,33467],"source":"A method call to `Balance` in the customer table (Debtor::Find returns a customer)."},{"content":"Returns the balance of the customer with account number 1.","pos":[33468,33526]},{"pos":[33533,33546],"content":"EBNF Overview","linkify":"EBNF Overview","nodes":[{"content":"EBNF Overview","pos":[0,13]}]},{"content":"Extended Backus Naur Form (EBNF) is a metalanguage and is used in this guide to describe the language syntax.","pos":[33547,33656]},{"content":"An EBNF definition consists of production rules, nonterminals, and terminals.","pos":[33657,33734]},{"content":"The key terms are shown in the following table.","pos":[33735,33782]},{"content":"Key terms","pos":[33786,33795]},{"content":"Example","pos":[33805,33812]},{"content":"Description","pos":[33837,33848]},{"content":"Terminals","pos":[34646,34655]},{"content":"Work<ph id=\"ph1\">\\_</ph>Team","pos":[34665,34675],"source":"Work\\_Team"},{"content":"A terminal is one character or a string of characters that never change.","pos":[34697,34769]},{"content":"Nonterminals","pos":[35076,35088]},{"content":"A nonterminal is a description of part of a valid sentence in the language that is defined either by a production rule or a textual description.","pos":[35127,35271]},{"content":"A nonterminal symbol can always be expanded to one or more terminal symbols.","pos":[35272,35348]},{"content":"Production rules","pos":[35506,35522]},{"content":"Employee = Developer","pos":[35525,35545]},{"content":"Tester","pos":[35548,35554]},{"content":"A production rule is a description of a valid sentence.","pos":[35557,35612]},{"content":"A production rule defines how a nonterminal symbol on the left side expands into a number of terminal and nonterminal symbols on the right side.","pos":[35613,35757]},{"content":"If you continue to expand all nonterminal symbols on the right side of the production rules in a particular grammar, you will eventually have a sequence of terminal symbols.","pos":[35758,35931]},{"pos":[35939,35946],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Work<ph id=\"ph1\">\\_</ph>Team = Manager Employee {, Employee}  Employee = Developer | Tester This example defines a Work<ph id=\"ph2\">\\_</ph>Team as consisting of a <ph id=\"ph3\">`Manager`</ph> and one or more <ph id=\"ph4\">`Employees`</ph>.","pos":[35948,36113],"source":"Work\\_Team = Manager Employee {, Employee}  Employee = Developer | Tester This example defines a Work\\_Team as consisting of a `Manager` and one or more `Employees`."},{"content":"An <ph id=\"ph1\">`Employee`</ph> is defined as being a <ph id=\"ph2\">`Developer`</ph>, or a <ph id=\"ph3\">`Tester`</ph>.","pos":[36114,36177],"source":" An `Employee` is defined as being a `Developer`, or a `Tester`."},{"content":"The symbols used in the example are described in the following table.","pos":[36178,36247]},{"pos":[36253,36276],"content":"Special Symbols in EBNF","linkify":"Special Symbols in EBNF","nodes":[{"content":"Special Symbols in EBNF","pos":[0,23]}]},{"content":"Symbol","pos":[36280,36286]},{"content":"Description","pos":[36312,36323]},{"pos":[36624,36638],"content":"(<bpt id=\"p1\">*</bpt>Expression<ept id=\"p1\">*</ept>)","source":"(*Expression*)"},{"content":"Parentheses hold the symbols (terminals and nonterminals) together.","pos":[36656,36723]},{"content":"They can be placed anywhere on the right side of a production rule.","pos":[36724,36791]},{"pos":[36796,36809],"content":"<bpt id=\"p1\">*</bpt>Expression1<ept id=\"p1\">*</ept>","source":"*Expression1*"},{"pos":[36812,36825],"content":"<bpt id=\"p1\">*</bpt>Expression2<ept id=\"p1\">*</ept>","source":"*Expression2*"},{"content":"Or: Specifies that all the items on one side of the","pos":[36828,36879]},{"content":"apply, or else all the items on the other side of the","pos":[36882,36935]},{"content":"apply.","pos":[36938,36944]},{"pos":[36968,36984],"content":"<ph id=\"ph1\">\\[</ph><bpt id=\"p1\">*</bpt>Expression<ept id=\"p1\">*</ept><ph id=\"ph2\">\\]</ph>","source":"\\[*Expression*\\]"},{"content":"Optional: The items between <ph id=\"ph1\">\\[</ph> and <ph id=\"ph2\">\\]</ph> are optional.","pos":[37000,37051],"source":"Optional: The items between \\[ and \\] are optional."},{"content":"All or none of the items in the brackets are included.","pos":[37052,37106]},{"content":"{Expression}","pos":[37140,37152]},{"content":"Repeat: The items between { and } are optional, but can be repeated as many times as necessary.","pos":[37172,37267]},{"pos":[37311,37862],"content":"For example, if the accessories you buy for your bicycle consist of a saddle, water-bottle holders, bells, and horns, and you could have either a bell or a horn, and zero, one, or more water bottle holders, and exactly one saddle, this could be expressed as: Bicycle<ph id=\"ph1\">\\_</ph>Accessories = saddle <ph id=\"ph2\">\\[</ph>bell | horn<ph id=\"ph3\">\\]</ph> {water<ph id=\"ph4\">\\_</ph>bottle<ph id=\"ph5\">\\_</ph>holders} This grammar defines the following possibilities: <ph id=\"ph6\">`saddle`</ph>  <ph id=\"ph7\">`saddle bell`</ph>  <ph id=\"ph8\">`saddle horn`</ph>  saddle water<ph id=\"ph9\">\\_</ph>bottle<ph id=\"ph10\">\\_</ph>holder  saddle bell water<ph id=\"ph11\">\\_</ph>bottle<ph id=\"ph12\">\\_</ph>holder  saddle bell water<ph id=\"ph13\">\\_</ph>bottle<ph id=\"ph14\">\\_</ph>holder water<ph id=\"ph15\">\\_</ph>bottle<ph id=\"ph16\">\\_</ph>holder And so on.","source":"For example, if the accessories you buy for your bicycle consist of a saddle, water-bottle holders, bells, and horns, and you could have either a bell or a horn, and zero, one, or more water bottle holders, and exactly one saddle, this could be expressed as: Bicycle\\_Accessories = saddle \\[bell | horn\\] {water\\_bottle\\_holders} This grammar defines the following possibilities: `saddle`  `saddle bell`  `saddle horn`  saddle water\\_bottle\\_holder  saddle bell water\\_bottle\\_holder  saddle bell water\\_bottle\\_holder water\\_bottle\\_holder And so on."},{"pos":[37867,37878],"content":"X++ Grammar","linkify":"X++ Grammar","nodes":[{"content":"X++ Grammar","pos":[0,11]}]},{"content":"This topic shows the formal grammar of the X++ language.","pos":[37879,37935]},{"pos":[37941,37980],"content":"How to Interpret the Formal BNF Grammar","linkify":"How to Interpret the Formal BNF Grammar","nodes":[{"content":"How to Interpret the Formal BNF Grammar","pos":[0,39]}]},{"content":"This section describes the grammar of X++ in Backus Naur Form (BNF).","pos":[37982,38050]},{"content":"A small example of BNF is described here.","pos":[38051,38092]},{"content":"BNF code","pos":[38094,38102]},{"content":"Interpretation","pos":[38104,38118]},{"content":"Copy Code","pos":[38120,38129]},{"content":"<ph id=\"ph1\">`AA`</ph> is the name of a production rule.","pos":[38193,38231],"source":"`AA` is the name of a production rule."},{"content":"An <ph id=\"ph1\">`AA`</ph> requires a <ph id=\"ph2\">`BB`</ph>, followed by a CC<ph id=\"ph3\">\\_</ph>SYM.","pos":[38232,38279],"source":" An `AA` requires a `BB`, followed by a CC\\_SYM."},{"content":"A <ph id=\"ph1\">`BB`</ph> is also a production rule.","pos":[38280,38313],"source":" A `BB` is also a production rule."},{"content":"Therefore, <ph id=\"ph1\">`BB`</ph> is not a terminal.","pos":[38314,38348],"source":" Therefore, `BB` is not a terminal."},{"content":"<ph id=\"ph1\">`BB`</ph> must be either a JJ<ph id=\"ph2\">\\_</ph>SYM or a KK<ph id=\"ph3\">\\_</ph>SYM.","pos":[38349,38392],"source":"`BB` must be either a JJ\\_SYM or a KK\\_SYM."},{"content":"Both JJ<ph id=\"ph1\">\\_</ph>SYM and KK<ph id=\"ph2\">\\_</ph>SYM are terminals because they are not the names of any other production rules.","pos":[38393,38493],"source":" Both JJ\\_SYM and KK\\_SYM are terminals because they are not the names of any other production rules."},{"content":"CC<ph id=\"ph1\">\\_</ph>SYM is also a terminal.","pos":[38494,38521],"source":" CC\\_SYM is also a terminal."},{"content":"In the BNF for X++ grammar, most of the terminals have <ph id=\"ph1\">\\_</ph>SYM as the suffix of their name.","pos":[38523,38612],"source":"In the BNF for X++ grammar, most of the terminals have \\_SYM as the suffix of their name."},{"pos":[38618,38647],"content":"The Formal X++ Grammar in BNF","linkify":"The Formal X++ Grammar in BNF","nodes":[{"content":"The Formal X++ Grammar in BNF","pos":[0,29]}]},{"content":"This section contains the BNF that defines the grammar of X++.","pos":[38649,38711]},{"content":"Copy Code","pos":[38713,38722]},{"pos":[58710,58771],"content":"X++ Language Syntax is Stricter in Microsoft Dynamics AX 2012","linkify":"X++ Language Syntax is Stricter in Microsoft Dynamics AX 2012","nodes":[{"content":"X++ Language Syntax is Stricter in Microsoft Dynamics AX 2012","pos":[0,61]}]},{"content":"Starting in Microsoft Dynamics AX 2012, the syntax rules for X++ are stricter than in previous versions of the product.","pos":[58772,58891]},{"content":"This topic describes the syntax changes.","pos":[58892,58932]},{"pos":[58938,58965],"content":"Table of X++ Syntax Changes","linkify":"Table of X++ Syntax Changes","nodes":[{"content":"Table of X++ Syntax Changes","pos":[0,27]}]},{"content":"The following table displays a list of syntax changes that start in Microsoft Dynamics AX 2012.","pos":[58967,59062]},{"content":"Area","pos":[59207,59211]},{"content":"Syntax rule","pos":[59221,59232]},{"content":"Before Microsoft Dynamics AX 2012","pos":[59242,59275]},{"content":"Starting with Microsoft Dynamics AX 2012","pos":[59285,59325]},{"content":"Escape","pos":[59375,59381]},{"content":"The backslash character <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt><ph id=\"ph1\">\\</ph><ept id=\"p1\">&lt;/span&gt;</ept> is rejected by the compiler for unrecognized escapes","pos":[59391,59495],"source":"The backslash character <span class=\"code\">\\</span> is rejected by the compiler for unrecognized escapes"},{"content":"The compiler used to accept <ph id=\"ph1\">&amp;quot;</ph>31\\12\\2002<ph id=\"ph2\">&amp;quot;</ph>, but during run time the literal string was interpreted as a different value.","pos":[59505,59633],"source":"The compiler used to accept &quot;31\\12\\2002&quot;, but during run time the literal string was interpreted as a different value."},{"content":"Now the following X++ statement is rejected by the compiler: <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>str myDateString = <ph id=\"ph1\">&amp;quot;</ph>31\\12\\2002<ph id=\"ph2\">&amp;quot;</ph>;<ept id=\"p1\">&lt;/span&gt;</ept> The proper syntax is <bpt id=\"p2\">&lt;span class=\"code\"&gt;</bpt><ph id=\"ph3\">&amp;quot;</ph>31<ph id=\"ph4\">\\\\</ph>12<ph id=\"ph5\">\\\\</ph>2002<ph id=\"ph6\">&amp;quot;</ph><ept id=\"p2\">&lt;/span&gt;</ept>.","pos":[59643,59845],"source":"Now the following X++ statement is rejected by the compiler: <span class=\"code\">str myDateString = &quot;31\\12\\2002&quot;;</span> The proper syntax is <span class=\"code\">&quot;31\\\\12\\\\2002&quot;</span>."},{"content":"Exceptions","pos":[59879,59889]},{"content":"Retry is no longer allowed outside of a catch block","pos":[59899,59950]},{"content":"It was possible to write the <bpt id=\"p1\">&lt;strong&gt;</bpt>retry<ept id=\"p1\">&lt;/strong&gt;</ept> keyword outside of a <bpt id=\"p2\">&lt;strong&gt;</bpt>catch<ept id=\"p2\">&lt;/strong&gt;</ept> block.","pos":[59960,60062],"source":"It was possible to write the <strong>retry</strong> keyword outside of a <strong>catch</strong> block."},{"content":"This caused the program to end when the <bpt id=\"p1\">&lt;strong&gt;</bpt>retry<ept id=\"p1\">&lt;/strong&gt;</ept> was reached during runtime.","pos":[60063,60153],"source":" This caused the program to end when the <strong>retry</strong> was reached during runtime."},{"content":"Now <bpt id=\"p1\">&lt;strong&gt;</bpt>retry<ept id=\"p1\">&lt;/strong&gt;</ept> can occur only inside a <bpt id=\"p2\">&lt;strong&gt;</bpt>catch<ept id=\"p2\">&lt;/strong&gt;</ept> block.","pos":[60163,60243],"source":"Now <strong>retry</strong> can occur only inside a <strong>catch</strong> block."},{"content":"For more information, see Exception Handling with try and catch Keywords.","pos":[60244,60317]},{"content":"Exceptions","pos":[60350,60360]},{"content":"Now you can throw and catch only <ph id=\"ph1\">&lt;code&gt;int&lt;/code&gt;</ph> values","pos":[60370,60426],"source":"Now you can throw and catch only <code>int</code> values"},{"content":"It was possible to throw scalar expressions like strings and dates, such as <ph id=\"ph1\">&lt;code&gt;throw &amp;quot;hello world&amp;quot;;&lt;/code&gt;</ph>, and get no compile error.","pos":[60436,60582],"source":"It was possible to throw scalar expressions like strings and dates, such as <code>throw &quot;hello world&quot;;</code>, and get no compile error."},{"content":"At runtime this was catch-able by a <ph id=\"ph1\">&lt;code&gt;catch&lt;/code&gt;</ph> block that was not decorated with any specific value, such as <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>catch {print(<ph id=\"ph2\">&amp;quot;</ph>Catch worked.<ph id=\"ph3\">&amp;quot;</ph>);}<ept id=\"p1\">&lt;/span&gt;</ept>.","pos":[60583,60768],"source":" At runtime this was catch-able by a <code>catch</code> block that was not decorated with any specific value, such as <span class=\"code\">catch {print(&quot;Catch worked.&quot;);}</span>."},{"content":"Now the only expression you can put on the <bpt id=\"p1\">&lt;strong&gt;</bpt>throw<ept id=\"p1\">&lt;/strong&gt;</ept> keyword is an <ph id=\"ph1\">&lt;code&gt;int&lt;/code&gt;</ph>.","pos":[60778,60875],"source":"Now the only expression you can put on the <strong>throw</strong> keyword is an <code>int</code>."},{"content":"Often the best thing to throw is <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>Global::error(<ph id=\"ph1\">&amp;quot;</ph>Explanation<ph id=\"ph2\">&amp;quot;</ph>);<ept id=\"p1\">&lt;/span&gt;</ept>.","pos":[60876,60975],"source":" Often the best thing to throw is <span class=\"code\">Global::error(&quot;Explanation&quot;);</span>."},{"content":"Often the best thing to catch is an element of the <ph id=\"ph1\">&lt;code&gt;Exception&lt;/code&gt;</ph> enum.","pos":[60976,61055],"source":" Often the best thing to catch is an element of the <code>Exception</code> enum."},{"content":"For more information, see Exception Handling with try and catch Keywords.","pos":[61056,61129]},{"content":"Inheritance","pos":[61163,61174]},{"content":"Downcasting can now be explicit.","pos":[61184,61216]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Note<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[61257,61278],"source":"<strong>Note</strong>"},{"content":"It is good programming practice to avoid implicit downcasts.","pos":[61328,61388]},{"content":"It was possible to assign a base object to a derived object with the simple assignment operator, which is the equals sign (<ph id=\"ph1\">&lt;code&gt;=&lt;/code&gt;</ph>).","pos":[61427,61566],"source":"It was possible to assign a base object to a derived object with the simple assignment operator, which is the equals sign (<code>=</code>)."},{"content":"The compiler accepted these assignments, but during run time any misuse of an improper downcast assignment caused an error.","pos":[61567,61690]},{"content":"Now all downcasts can be explicit.","pos":[61700,61734]},{"content":"This is accomplished with the new <bpt id=\"p1\">&lt;strong&gt;</bpt>as<ept id=\"p1\">&lt;/strong&gt;</ept> expression operator.","pos":[61735,61809],"source":" This is accomplished with the new <strong>as</strong> expression operator."},{"content":"Explicit downcasting with the <bpt id=\"p1\">&lt;strong&gt;</bpt>as<ept id=\"p1\">&lt;/strong&gt;</ept> keyword is illustrated by the following code example, in which <ph id=\"ph1\">&lt;code&gt;ThingClass&lt;/code&gt;</ph> extends <ph id=\"ph2\">&lt;code&gt;Object&lt;/code&gt;</ph>: <ph id=\"ph3\">&lt;code&gt;ThingClass myThing = new ThingClass();&lt;/code&gt;</ph><ph id=\"ph4\">  &lt;code&gt;Object myObject = myThing;&lt;/code&gt;</ph><ph id=\"ph5\">  &lt;code&gt;myThing = myObject as ThingClass; // Explicit downcast, good.&lt;/code&gt;</ph> For more information, see Expression Operators: Is and As for Inheritance.","pos":[61810,62219],"source":" Explicit downcasting with the <strong>as</strong> keyword is illustrated by the following code example, in which <code>ThingClass</code> extends <code>Object</code>: <code>ThingClass myThing = new ThingClass();</code>  <code>Object myObject = myThing;</code>  <code>myThing = myObject as ThingClass; // Explicit downcast, good.</code> For more information, see Expression Operators: Is and As for Inheritance."},{"content":"Inheritance","pos":[62252,62263]},{"content":"Override of a base method cannot be less accessible than the base method","pos":[62273,62345]},{"content":"It was possible to have a base method be decorated with <bpt id=\"p1\">&lt;strong&gt;</bpt>protected<ept id=\"p1\">&lt;/strong&gt;</ept> and yet have an override of that method be <bpt id=\"p2\">&lt;strong&gt;</bpt>private<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[62355,62506],"source":"It was possible to have a base method be decorated with <strong>protected</strong> and yet have an override of that method be <strong>private</strong>."},{"content":"Now when a base method is <bpt id=\"p1\">&lt;strong&gt;</bpt>protected<ept id=\"p1\">&lt;/strong&gt;</ept>, the override method must be either <bpt id=\"p2\">&lt;strong&gt;</bpt>protected<ept id=\"p2\">&lt;/strong&gt;</ept> or <bpt id=\"p3\">&lt;strong&gt;</bpt>public<ept id=\"p3\">&lt;/strong&gt;</ept>, and the override method cannot be <bpt id=\"p4\">&lt;strong&gt;</bpt>private<ept id=\"p4\">&lt;/strong&gt;</ept>.","pos":[62516,62719],"source":"Now when a base method is <strong>protected</strong>, the override method must be either <strong>protected</strong> or <strong>public</strong>, and the override method cannot be <strong>private</strong>."},{"content":"For more information, see Method Access Control.","pos":[62720,62768]},{"content":"Inheritance","pos":[62802,62813]},{"content":"Override of a base method must have the exact same return type and parameter signature as the base method","pos":[62823,62928]},{"content":"Suppose a base class had a method that inputs a parameter of the <ph id=\"ph1\">&lt;code&gt;Common&lt;/code&gt;</ph> table, which is the base of all tables.","pos":[62938,63062],"source":"Suppose a base class had a method that inputs a parameter of the <code>Common</code> table, which is the base of all tables."},{"content":"In a derived class it was possible to override the method to instead input <ph id=\"ph1\">&lt;code&gt;MyTable&lt;/code&gt;</ph>.","pos":[63063,63159],"source":" In a derived class it was possible to override the method to instead input <code>MyTable</code>."},{"content":"Now the parameter signatures of the base method and its override method must match exactly.","pos":[63169,63260]},{"content":"Also, the return types must match exactly.","pos":[63261,63303]},{"content":"For more information, see Overriding a Method.","pos":[63304,63350]},{"content":"Interfaces","pos":[63383,63393]},{"content":"Implementation of an interface method must match the parameter signature exactly","pos":[63403,63483]},{"content":"Suppose an interface had a method that input a parameter of an <ph id=\"ph1\">&lt;code&gt;int&lt;/code&gt;</ph>.","pos":[63493,63573],"source":"Suppose an interface had a method that input a parameter of an <code>int</code>."},{"content":"In a class that implements the interface, it was possible to write the method with a parameter of a <ph id=\"ph1\">&lt;code&gt;str&lt;/code&gt;</ph>.","pos":[63574,63691],"source":" In a class that implements the interface, it was possible to write the method with a parameter of a <code>str</code>."},{"content":"Now the parameter signatures of the method must exactly match between the interface and the implementation of the method on a class.","pos":[63701,63833]},{"content":"Also, the return types must match exactly.","pos":[63834,63876]},{"content":"For more information, see Interfaces Overview.","pos":[63877,63923]},{"content":"Interfaces","pos":[63957,63967]},{"content":"A non-abstract base class that implements an interface cannot rely on a derived class for that implementation","pos":[63977,64086]},{"content":"When a base class implements an interface, it was possible for the class to not implement the methods of the interface if a derived class implemented the methods.","pos":[64096,64258]},{"content":"The only limitation was that the <ph id=\"ph1\">&lt;code&gt;new&lt;/code&gt;</ph> constructor method could not be called on the class.","pos":[64259,64361],"source":" The only limitation was that the <code>new</code> constructor method could not be called on the class."},{"content":"Now the compiler requires that every class that implements an interface must have or inherit a complete implementation of every method of the interface.","pos":[64371,64523]},{"content":"For more information, see X++, C# Comparison: Object Oriented Programming.","pos":[64524,64598]},{"content":"Modifiers","pos":[64631,64640]},{"content":"The <bpt id=\"p1\">&lt;strong&gt;</bpt>static<ept id=\"p1\">&lt;/strong&gt;</ept> modifier should not be applied to an interface","pos":[64650,64724],"source":"The <strong>static</strong> modifier should not be applied to an interface"},{"content":"It was possible to write <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>static interface IMyInterface {}<ept id=\"p1\">&lt;/span&gt;</ept>, but the <bpt id=\"p2\">&lt;strong&gt;</bpt>static<ept id=\"p2\">&lt;/strong&gt;</ept> modifier had no effect because it makes no sense in this context.","pos":[64734,64916],"source":"It was possible to write <span class=\"code\">static interface IMyInterface {}</span>, but the <strong>static</strong> modifier had no effect because it makes no sense in this context."},{"content":"Sometime after Microsoft Dynamics 365 for Operations 2009 the X++ compiler might stop allowing the <bpt id=\"p1\">&lt;strong&gt;</bpt>static<ept id=\"p1\">&lt;/strong&gt;</ept> modifier on interface declarations.","pos":[64926,65084],"source":"Sometime after Microsoft Dynamics 365 for Operations 2009 the X++ compiler might stop allowing the <strong>static</strong> modifier on interface declarations."},{"content":"For more information, see Interfaces Overview.","pos":[65085,65131]},{"content":"Modifiers","pos":[65165,65174]},{"content":"The <bpt id=\"p1\">&lt;strong&gt;</bpt>static<ept id=\"p1\">&lt;/strong&gt;</ept> modifier must not be applied to the <ph id=\"ph1\">&lt;code&gt;new&lt;/code&gt;</ph> constructor","pos":[65184,65276],"source":"The <strong>static</strong> modifier must not be applied to the <code>new</code> constructor"},{"content":"It was possible to apply the <bpt id=\"p1\">&lt;strong&gt;</bpt>static<ept id=\"p1\">&lt;/strong&gt;</ept> modifier to the declaration of the <ph id=\"ph1\">&lt;code&gt;new&lt;/code&gt;</ph> constructor method.","pos":[65286,65410],"source":"It was possible to apply the <strong>static</strong> modifier to the declaration of the <code>new</code> constructor method."},{"content":"This caused <ph id=\"ph1\">&lt;code&gt;new MyClass();&lt;/code&gt;</ph> to behave as a null operation.","pos":[65411,65481],"source":" This caused <code>new MyClass();</code> to behave as a null operation."},{"content":"Instead, the statement <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>MyClass::new();<ept id=\"p1\">&lt;/span&gt;</ept> would call the static <ph id=\"ph1\">&lt;code&gt;new&lt;/code&gt;</ph> method, but that would not construct an object.","pos":[65482,65633],"source":" Instead, the statement <span class=\"code\">MyClass::new();</span> would call the static <code>new</code> method, but that would not construct an object."},{"content":"Now the compiler issues an error when the <bpt id=\"p1\">&lt;strong&gt;</bpt>static<ept id=\"p1\">&lt;/strong&gt;</ept> modifier is applied to the <ph id=\"ph1\">&lt;code&gt;new&lt;/code&gt;</ph> method.","pos":[65643,65760],"source":"Now the compiler issues an error when the <strong>static</strong> modifier is applied to the <code>new</code> method."},{"content":"For more information, see Constructors.","pos":[65761,65800]},{"content":"Modifiers","pos":[65833,65842]},{"content":"Use an explicit access modifier on each method","pos":[65852,65898]},{"content":"In the past the menu item of <bpt id=\"p1\">&lt;span class=\"ui\"&gt;</bpt>AOT<ept id=\"p1\">&lt;/span&gt;</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p2\">&lt;span class=\"ui\"&gt;</bpt>Classes<ept id=\"p2\">&lt;/span&gt;</ept> <ph id=\"ph2\">&amp;gt;</ph> <bpt id=\"p3\">&lt;em&gt;</bpt>MyClass<ept id=\"p3\">&lt;/em&gt;</ept> <ph id=\"ph3\">&amp;gt;</ph> <bpt id=\"p4\">&lt;span class=\"ui\"&gt;</bpt>New Method<ept id=\"p4\">&lt;/span&gt;</ept> created the method without any access modifier.","pos":[65908,66111],"source":"In the past the menu item of <span class=\"ui\">AOT</span> &gt; <span class=\"ui\">Classes</span> &gt; <em>MyClass</em> &gt; <span class=\"ui\">New Method</span> created the method without any access modifier."},{"content":"This meant that the method was implicitly <bpt id=\"p1\">&lt;strong&gt;</bpt>public<ept id=\"p1\">&lt;/strong&gt;</ept>, although some X++ developers might not have been fully aware of the default.","pos":[66112,66255],"source":" This meant that the method was implicitly <strong>public</strong>, although some X++ developers might not have been fully aware of the default."},{"content":"This created extra work later when a developer needed to modify the code in the method, because the developer had to research everywhere that the method might be called from.","pos":[66256,66430]},{"content":"Now the <bpt id=\"p1\">&lt;span class=\"ui\"&gt;</bpt>New Method<ept id=\"p1\">&lt;/span&gt;</ept> menu item explicitly includes the <bpt id=\"p2\">&lt;strong&gt;</bpt>private<ept id=\"p2\">&lt;/strong&gt;</ept> keyword in its automatic declaration of the new method.","pos":[66440,66597],"source":"Now the <span class=\"ui\">New Method</span> menu item explicitly includes the <strong>private</strong> keyword in its automatic declaration of the new method."},{"content":"The developer can type in a different modifier if appropriate.","pos":[66598,66660]},{"content":"For more information, see Method Modifiers.","pos":[66661,66704]},{"content":"Parameters","pos":[66738,66748]},{"content":"Parameters given in a call to a <ph id=\"ph1\">&lt;code&gt;new&lt;/code&gt;</ph> constructor method must match the parameters on the <ph id=\"ph2\">&lt;code&gt;new&lt;/code&gt;</ph> constructor method","pos":[66758,66894],"source":"Parameters given in a call to a <code>new</code> constructor method must match the parameters on the <code>new</code> constructor method"},{"content":"It was possible to pass in multiple parameters on call to a <ph id=\"ph1\">&lt;code&gt;new&lt;/code&gt;</ph> constructor method even when the <ph id=\"ph2\">&lt;code&gt;new&lt;/code&gt;</ph> method was declared to input no parameters.","pos":[66904,67074],"source":"It was possible to pass in multiple parameters on call to a <code>new</code> constructor method even when the <code>new</code> method was declared to input no parameters."},{"content":"Now the call to the <ph id=\"ph1\">&lt;code&gt;new&lt;/code&gt;</ph> method must exactly match the declared parameter signature of the <ph id=\"ph2\">&lt;code&gt;new&lt;/code&gt;</ph> method.","pos":[67084,67211],"source":"Now the call to the <code>new</code> method must exactly match the declared parameter signature of the <code>new</code> method."},{"content":"For more information, see Creating a Subclass.","pos":[67212,67258]},{"content":"Parameters","pos":[67291,67301]},{"content":"Parameters with default values must come after all parameters that do not have default values","pos":[67311,67404]},{"content":"It was possible to declare a method that takes in two parameters, and have only the first parameter offer a default value.","pos":[67414,67536]},{"content":"There was no purpose to this.","pos":[67537,67566]},{"content":"There was no way to accept the default of the first parameter because the call must specify a value for the second parameter and cannot omit the first parameter.","pos":[67567,67728]},{"content":"Now in the declaration of a method, any parameter that offers a default value must come after all the parameters that do not.","pos":[67738,67863]},{"content":"For more information, see the following topics:","pos":[67864,67911],"source":" For more information, see the following topics:\n"},{"content":"Using Optional Parameters","pos":[67921,67946]},{"content":"Best Practices for Parameters","pos":[67956,67985]},{"content":"Parameters","pos":[68030,68040]},{"content":"Override of a method must have the same default parameters as the overridden method","pos":[68050,68133]},{"content":"It was possible to declare a method as <bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>public void myMethod(int i=22){}<ept id=\"p1\">&lt;/span&gt;</ept> and the override as <bpt id=\"p2\">&lt;span class=\"code\"&gt;</bpt>public void myMethod(){}<ept id=\"p2\">&lt;/span&gt;</ept>.","pos":[68143,68312],"source":"It was possible to declare a method as <span class=\"code\">public void myMethod(int i=22){}</span> and the override as <span class=\"code\">public void myMethod(){}</span>."},{"content":"But if the override method was called as <ph id=\"ph1\">&lt;code&gt;derivedObject(333);&lt;/code&gt;</ph> an error occurred.","pos":[68313,68405],"source":" But if the override method was called as <code>derivedObject(333);</code> an error occurred."},{"content":"Now the override method must list the same parameter types in the same sequence that they are declared in the overridden method.","pos":[68415,68543]},{"content":"For more information, see Overriding a Method.","pos":[68544,68590]},{"content":"Preprocessor","pos":[68623,68635]},{"content":"A <bpt id=\"p1\">&lt;strong&gt;</bpt>TODO<ept id=\"p1\">&lt;/strong&gt;</ept> in a comment must be the first non-whitespace in the first line of the comment","pos":[68645,68747],"source":"A <strong>TODO</strong> in a comment must be the first non-whitespace in the first line of the comment"},{"content":"The X++ preprocessor used to detect the <bpt id=\"p1\">&lt;strong&gt;</bpt>TODO<ept id=\"p1\">&lt;/strong&gt;</ept> keyword in a multi-line <bpt id=\"p2\">&lt;span class=\"code\"&gt;</bpt>/* ... */<ept id=\"p2\">&lt;/span&gt;</ept> task comment even when the <bpt id=\"p3\">&lt;strong&gt;</bpt>TODO<ept id=\"p3\">&lt;/strong&gt;</ept> appeared after other text after the first comment line.","pos":[68757,68983],"source":"The X++ preprocessor used to detect the <strong>TODO</strong> keyword in a multi-line <span class=\"code\">/* ... */</span> task comment even when the <strong>TODO</strong> appeared after other text after the first comment line."},{"content":"Now the X++ preprocessor detects the <bpt id=\"p1\">&lt;strong&gt;</bpt>TODO<ept id=\"p1\">&lt;/strong&gt;</ept> keyword only if <bpt id=\"p2\">&lt;strong&gt;</bpt>TODO<ept id=\"p2\">&lt;/strong&gt;</ept> appears on the first line of the comment, and as the first non-whitespace in the comment.","pos":[68993,69179],"source":"Now the X++ preprocessor detects the <strong>TODO</strong> keyword only if <strong>TODO</strong> appears on the first line of the comment, and as the first non-whitespace in the comment."},{"content":"For more information, see TODO Comments for X++ Developer Tasks.","pos":[69180,69244]},{"pos":[69277,69285],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[69296,69347],"content":"<bpt id=\"p1\">[</bpt>X++ Language Reference<ept id=\"p1\">](xpp-language-reference.md)</ept>","source":"[X++ Language Reference](xpp-language-reference.md)"}]}