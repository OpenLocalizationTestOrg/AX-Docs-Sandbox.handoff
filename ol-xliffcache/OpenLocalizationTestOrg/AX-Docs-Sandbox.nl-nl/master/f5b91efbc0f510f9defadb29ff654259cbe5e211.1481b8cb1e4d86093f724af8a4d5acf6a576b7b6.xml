{"nodes":[{"pos":[32,94],"content":"X++ statements, loops, and exception handling | Microsoft Docs","needQuote":true,"needEscape":true,"nodes":[{"content":"X++ statements, loops, and exception handling | Microsoft Docs","pos":[0,62]}]},{"pos":[108,178],"content":"This topic describes statements, loops, and exception handling in X++.","needQuote":true,"needEscape":true,"nodes":[{"content":"This topic describes statements, loops, and exception handling in X++.","pos":[0,70]}]},{"pos":[590,635],"content":"X++ statements, loops, and exception handling","linkify":"X++ statements, loops, and exception handling","nodes":[{"content":"X++ statements, loops, and exception handling","pos":[0,45]}]},{"pos":[637,645],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"content":"It is good practice to add comments to your code.","pos":[656,705]},{"content":"This makes a program easier to read and understand.","pos":[706,757]},{"content":"Comments are ignored when the program is compiled.","pos":[758,808]},{"content":"You can use \"//\" and \"/<ph id=\"ph1\">\\*</ph> …","pos":[809,836],"source":" You can use \"//\" and \"/\\* …"},{"content":"<ph id=\"ph1\">\\*</ph>/\" style comments, although it is best practice to use \"//\"-style comments, even for multi-line comments.","pos":[837,944],"source":"\\*/\" style comments, although it is best practice to use \"//\"-style comments, even for multi-line comments."},{"pos":[1038,1054],"content":"Print statements","linkify":"Print statements","nodes":[{"content":"Print statements","pos":[0,16]}]},{"content":"You use the <bpt id=\"p1\">**</bpt>print<ept id=\"p1\">**</ept> statement to display text or selected results in a temporary window.","pos":[1055,1145],"source":"You use the **print** statement to display text or selected results in a temporary window."},{"content":"The messages are displayed in a window that appears when the first <bpt id=\"p1\">**</bpt>print<ept id=\"p1\">**</ept> statement is executed.","pos":[1146,1245],"source":" The messages are displayed in a window that appears when the first **print** statement is executed."},{"content":"The <bpt id=\"p1\">**</bpt>print<ept id=\"p1\">**</ept> statement can be a convenient alternative to the <bpt id=\"p2\">**</bpt>Global::info<ept id=\"p2\">**</ept> method during testing.","pos":[1246,1348],"source":" The **print** statement can be a convenient alternative to the **Global::info** method during testing."},{"content":"The <bpt id=\"p1\">**</bpt>info<ept id=\"p1\">**</ept> method displays text in the <bpt id=\"p2\">**</bpt>Infolog<ept id=\"p2\">**</ept> window.","pos":[1349,1409],"source":" The **info** method displays text in the **Infolog** window."},{"content":"The following table compares the <bpt id=\"p1\">**</bpt>print<ept id=\"p1\">**</ept> statement against the <bpt id=\"p2\">**</bpt>Global::info<ept id=\"p2\">**</ept> method.","pos":[1410,1499],"source":" The following table compares the **print** statement against the **Global::info** method."},{"content":"Feature","pos":[1503,1510]},{"pos":[1524,1543],"content":"<bpt id=\"p1\">**</bpt>Print<ept id=\"p1\">**</ept> statement","source":"**Print** statement"},{"pos":[1669,1684],"content":"<bpt id=\"p1\">**</bpt>Info<ept id=\"p1\">**</ept> method","source":"**Info** method"},{"content":"Ease of invocation","pos":[1977,1995]},{"content":"The <bpt id=\"p1\">**</bpt>Print<ept id=\"p1\">**</ept> statement automatically converts various data types to strings.","pos":[1998,2075],"source":"The **Print** statement automatically converts various data types to strings."},{"content":"It can convert multiple data types in one invocation.","pos":[2076,2129]},{"pos":[2143,2209],"content":"The <bpt id=\"p1\">**</bpt>Info<ept id=\"p1\">**</ept> method requires that the input parameter be a string.","source":"The **Info** method requires that the input parameter be a string."},{"content":"Copy to clipboard","pos":[2214,2231]},{"content":"The <bpt id=\"p1\">**</bpt>Print<ept id=\"p1\">**</ept> window contents cannot be copied to the clipboard.","pos":[2235,2299],"source":"The **Print** window contents cannot be copied to the clipboard."},{"content":"You cannot give the <bpt id=\"p1\">**</bpt>Print<ept id=\"p1\">**</ept> window focus.","pos":[2300,2343],"source":" You cannot give the **Print** window focus."},{"pos":[2380,2436],"content":"<bpt id=\"p1\">**</bpt>Infolog<ept id=\"p1\">**</ept> contents are easily copied to the clipboard.","source":"**Infolog** contents are easily copied to the clipboard."},{"content":"Scope of lifetime","pos":[2451,2468]},{"pos":[2472,2590],"content":"The <bpt id=\"p1\">**</bpt>Print<ept id=\"p1\">**</ept> window closes when the X++ application ends, and the window might close before you have time to read it.","source":"The **Print** window closes when the X++ application ends, and the window might close before you have time to read it."},{"pos":[2617,2678],"content":"The <bpt id=\"p1\">**</bpt>Infolog<ept id=\"p1\">**</ept> window persists for the whole client session.","source":"The **Infolog** window persists for the whole client session."},{"content":"Size and location","pos":[2688,2705]},{"pos":[2709,2795],"content":"The <bpt id=\"p1\">**</bpt>Print<ept id=\"p1\">**</ept> window can be a specific size, and in a specific location on the screen.","source":"The **Print** window can be a specific size, and in a specific location on the screen."},{"pos":[2854,2911],"content":"The <bpt id=\"p1\">**</bpt>Infolog<ept id=\"p1\">**</ept> window is sized and placed by the system.","source":"The **Infolog** window is sized and placed by the system."},{"content":"Common usage","pos":[2925,2937]},{"content":"The <bpt id=\"p1\">**</bpt>Print<ept id=\"p1\">**</ept> statement is used for convenience during testing.","pos":[2946,3009],"source":"The **Print** statement is used for convenience during testing."},{"content":"It can help you debug small problems without needing to run a formal debugger.","pos":[3010,3088]},{"pos":[3091,3148],"content":"The <bpt id=\"p1\">**</bpt>Info<ept id=\"p1\">**</ept> method is appropriate for use in production.","source":"The **Info** method is appropriate for use in production."},{"pos":[3165,3193],"content":"Print statement code example","linkify":"Print statement code example","nodes":[{"content":"Print statement code example","pos":[0,28]}]},{"pos":[4074,4087],"content":"TODO comments","linkify":"TODO comments","nodes":[{"content":"TODO comments","pos":[0,13]}]},{"content":"The compiler recognizes the string <bpt id=\"p1\">**</bpt>TODO<ept id=\"p1\">**</ept> when it occurs at the start of a comment.","pos":[4088,4173],"source":"The compiler recognizes the string **TODO** when it occurs at the start of a comment."},{"content":"The <bpt id=\"p1\">**</bpt>TODO<ept id=\"p1\">**</ept> string prompts the compiler to report the rest of the comment text on in the <bpt id=\"p2\">**</bpt>Task List<ept id=\"p2\">**</ept> window of Visual Studio.","pos":[4174,4302],"source":" The **TODO** string prompts the compiler to report the rest of the comment text on in the **Task List** window of Visual Studio."},{"content":"To open the <bpt id=\"p1\">**</bpt>Task List<ept id=\"p1\">**</ept> window, select <bpt id=\"p2\">**</bpt>View<ept id=\"p2\">**</ept> and then select <bpt id=\"p3\">**</bpt>Task Window<ept id=\"p3\">**</ept>.","pos":[4303,4385],"source":" To open the **Task List** window, select **View** and then select **Task Window**."},{"content":"The <bpt id=\"p1\">**</bpt>Task Window <ept id=\"p1\">**</ept>reports the line number in the code where the <bpt id=\"p2\">**</bpt>TODO<ept id=\"p2\">**</ept> comment can be found.","pos":[4386,4482],"source":" The **Task Window **reports the line number in the code where the **TODO** comment can be found."},{"content":"The rules for using <bpt id=\"p1\">**</bpt>TODO<ept id=\"p1\">**</ept> in comments are as follows:","pos":[4483,4539],"source":" The rules for using **TODO** in comments are as follows:"},{"pos":[4545,4633],"content":"The <bpt id=\"p1\">**</bpt>TODO<ept id=\"p1\">**</ept> string can appear in either the <bpt id=\"p2\">**</bpt><ph id=\"ph1\">//</ph><ept id=\"p2\">**</ept> or the <bpt id=\"p3\">**</bpt><ph id=\"ph2\">/</ph><ph id=\"ph3\">\\*</ph> <ph id=\"ph4\">\\*</ph><ph id=\"ph5\">/</ph><ept id=\"p3\">**</ept> style of comment.","source":"The **TODO** string can appear in either the **//** or the **/\\* \\*/** style of comment."},{"content":"The <bpt id=\"p1\">**</bpt>TODO<ept id=\"p1\">**</ept> string must be the very first non-white space string in the comment.","pos":[4638,4719],"source":"The **TODO** string must be the very first non-white space string in the comment."},{"content":"White space is considered to be a carriage return, a line feed, a tab, or a space.","pos":[4720,4802]},{"pos":[4807,4884],"content":"No white space is required between the start of the comment and the <bpt id=\"p1\">**</bpt>TODO<ept id=\"p1\">**</ept>.","source":"No white space is required between the start of the comment and the **TODO**."},{"content":"The <bpt id=\"p1\">**</bpt>TODO<ept id=\"p1\">**</ept> string is case insensitive.","pos":[4889,4929],"source":"The **TODO** string is case insensitive."},{"content":"However, the convention is to write <bpt id=\"p1\">**</bpt>TODO<ept id=\"p1\">**</ept> in all uppercase letters, instead of <bpt id=\"p2\">**</bpt>ToDo<ept id=\"p2\">**</ept> or another variation.","pos":[4930,5042],"source":" However, the convention is to write **TODO** in all uppercase letters, instead of **ToDo** or another variation."},{"pos":[5047,5186],"content":"The <bpt id=\"p1\">**</bpt>TODO<ept id=\"p1\">**</ept> string can have any characters appended to it, but the convention is to either append a colon, or for a white space to follow.","source":"The **TODO** string can have any characters appended to it, but the convention is to either append a colon, or for a white space to follow."},{"content":"The rest of the comment after the <bpt id=\"p1\">**</bpt>TODO<ept id=\"p1\">**</ept> string is reported as the task description.","pos":[5191,5277],"source":"The rest of the comment after the **TODO** string is reported as the task description."},{"content":"If the comment is longer than 200 characters, it might display truncated in the <bpt id=\"p1\">**</bpt>Tasks<ept id=\"p1\">**</ept> tab.","pos":[5278,5372],"source":" If the comment is longer than 200 characters, it might display truncated in the **Tasks** tab."},{"pos":[5377,5484],"content":"The <bpt id=\"p1\">**</bpt>TODO<ept id=\"p1\">**</ept> task description can be spread over multiple lines when the <bpt id=\"p2\">**</bpt><ph id=\"ph1\">/</ph><ph id=\"ph2\">\\*</ph> <ph id=\"ph3\">\\*</ph><ph id=\"ph4\">/</ph><ept id=\"p2\">**</ept> comment style is used.","source":"The **TODO** task description can be spread over multiple lines when the **/\\* \\*/** comment style is used."},{"pos":[5490,5508],"content":"TODO code examples","linkify":"TODO code examples","nodes":[{"content":"TODO code examples","pos":[0,18]}]},{"pos":[5510,5613],"content":"The following table shows examples of using <bpt id=\"p1\">**</bpt>TODO<ept id=\"p1\">**</ept> in the <bpt id=\"p2\">**</bpt><ph id=\"ph1\">//</ph><ept id=\"p2\">**</ept> or the <bpt id=\"p3\">**</bpt><ph id=\"ph2\">/</ph><ph id=\"ph3\">\\*</ph> <ph id=\"ph4\">\\*</ph><ph id=\"ph5\">/</ph><ept id=\"p3\">**</ept> style of comment.","source":"The following table shows examples of using **TODO** in the **//** or the **/\\* \\*/** style of comment."},{"pos":[5937,5950],"content":"Using clauses","linkify":"Using clauses","nodes":[{"content":"Using clauses","pos":[0,13]}]},{"content":"You use <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> clauses so that you do not have to provide the fully-qualified name of a type.","pos":[5951,6047],"source":"You use **using** clauses so that you do not have to provide the fully-qualified name of a type."},{"content":"The <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> clause must precede the class which it applies, and it is required in every source file you want it to apply to.","pos":[6048,6174],"source":" The **using** clause must precede the class which it applies, and it is required in every source file you want it to apply to."},{"content":"Typically, all <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> clauses are placed at the beginning of the source file.","pos":[6175,6255],"source":" Typically, all **using** clauses are placed at the beginning of the source file."},{"content":"It's also possible to provide aliases that introduce a short name for a fully qualified name.","pos":[6256,6349]},{"content":"Aliases can denote namespaces or classes.","pos":[6350,6391]},{"content":"The following example shows a using clause, a namespace alias, and a class alias.","pos":[6392,6473]},{"pos":[6952,6974],"content":"Conditional statements","linkify":"Conditional statements","nodes":[{"content":"Conditional statements","pos":[0,22]}]},{"content":"The conditional statements are <bpt id=\"p1\">**</bpt>if<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>if ... else<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>switch<ept id=\"p3\">**</ept>, and the <bpt id=\"p4\">**</bpt>ternary operator (?)<ept id=\"p4\">**</ept>.","pos":[6975,7076],"source":"The conditional statements are **if**, **if ... else**, **switch**, and the **ternary operator (?)**."},{"content":"You use conditional statements to specify whether a block of code is executed or not.","pos":[7077,7162]},{"content":"Different conditional statements offer advantages depending on the details of the situation.","pos":[7163,7255]},{"pos":[7260,7287],"content":"if and if...else statements","linkify":"if and if...else statements","nodes":[{"content":"if and if...else statements","pos":[0,27]}]},{"content":"The <bpt id=\"p1\">**</bpt>if<ept id=\"p1\">**</ept> statement evaluates a conditional expression and executes a statement or set of statements if the conditional expression evaluates to <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>.","pos":[7288,7442],"source":"The **if** statement evaluates a conditional expression and executes a statement or set of statements if the conditional expression evaluates to **true**."},{"content":"You can provide an alternative statement or set of statements that are executed if the condition is false by using the <bpt id=\"p1\">**</bpt>else<ept id=\"p1\">**</ept> clause.","pos":[7443,7578],"source":" You can provide an alternative statement or set of statements that are executed if the condition is false by using the **else** clause."},{"content":"The syntax for an if... else statement is <bpt id=\"p1\">**</bpt>if<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>(<ept id=\"p2\">**</ept> <bpt id=\"p3\">*</bpt>expression<ept id=\"p3\">*</ept> <bpt id=\"p4\">**</bpt>)<ept id=\"p4\">**</ept> <bpt id=\"p5\">*</bpt>statement<ept id=\"p5\">*</ept> <bpt id=\"p6\">**</bpt><ph id=\"ph1\">\\[</ph><ept id=\"p6\">**</ept> <bpt id=\"p7\">**</bpt>else<ept id=\"p7\">**</ept> <bpt id=\"p8\">*</bpt>statement<ept id=\"p8\">*</ept> <bpt id=\"p9\">**</bpt><ph id=\"ph2\">\\]</ph><ept id=\"p9\">**</ept> .","pos":[7579,7701],"source":" The syntax for an if... else statement is **if** **(** *expression* **)** *statement* **\\[** **else** *statement* **\\]** ."},{"content":"Both statements can be compound statements.","pos":[7702,7745]},{"content":"The expression in the parentheses (the conditional expression) can be any valid expression that evaluates to <bpt id=\"p1\">**</bpt>true<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>.","pos":[7746,7877],"source":" The expression in the parentheses (the conditional expression) can be any valid expression that evaluates to **true** or **false**."},{"content":"All numbers different from zero are <bpt id=\"p1\">**</bpt>true;<ept id=\"p1\">**</ept> all non-empty strings are also <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>.","pos":[7878,7964],"source":" All numbers different from zero are **true;** all non-empty strings are also **true**."},{"content":"You can nest <bpt id=\"p1\">**</bpt>if<ept id=\"p1\">**</ept> statements, but if the nesting of <bpt id=\"p2\">**</bpt>if<ept id=\"p2\">**</ept> statements becomes too deep, consider using a <bpt id=\"p3\">**</bpt>switch<ept id=\"p3\">**</ept> statement instead.","pos":[7965,8101],"source":" You can nest **if** statements, but if the nesting of **if** statements becomes too deep, consider using a **switch** statement instead."},{"pos":[8107,8138],"content":"if and if... else code examples","linkify":"if and if... else code examples","nodes":[{"content":"if and if... else code examples","pos":[0,31]}]},{"pos":[8349,8365],"content":"switch statement","linkify":"switch statement","nodes":[{"content":"switch statement","pos":[0,16]}]},{"content":"The <bpt id=\"p1\">**</bpt>switch<ept id=\"p1\">**</ept> statement is a multi-branch language construct.","pos":[8366,8428],"source":"The **switch** statement is a multi-branch language construct."},{"content":"This is in contrast to the <bpt id=\"p1\">**</bpt>if<ept id=\"p1\">**</ept> statement where you have to nest <bpt id=\"p2\">**</bpt>if<ept id=\"p2\">**</ept> statements to create the same effect.","pos":[8429,8540],"source":" This is in contrast to the **if** statement where you have to nest **if** statements to create the same effect."},{"content":"The conditional expression of the <bpt id=\"p1\">**</bpt>switch<ept id=\"p1\">**</ept> is evaluated and checked against each case value.","pos":[8541,8635],"source":" The conditional expression of the **switch** is evaluated and checked against each case value."},{"content":"The case values must be constants that can be evaluated by the compiler.","pos":[8636,8708]},{"content":"If a case constant matches the switch expression, the case statement is executed.","pos":[8709,8790]},{"content":"If the case also contains a <bpt id=\"p1\">**</bpt>break<ept id=\"p1\">**</ept> statement, the program then jumps out of the switch.","pos":[8791,8881],"source":" If the case also contains a **break** statement, the program then jumps out of the switch."},{"content":"If there is no <bpt id=\"p1\">**</bpt>break<ept id=\"p1\">**</ept> statement, the program continues executing the next set of case statements.","pos":[8882,8982],"source":" If there is no **break** statement, the program continues executing the next set of case statements."},{"content":"If no matches are found, the <bpt id=\"p1\">**</bpt>default<ept id=\"p1\">**</ept> statement is executed.","pos":[8983,9046],"source":" If no matches are found, the **default** statement is executed."},{"content":"If there are no matches and no default, none of the statements inside the <bpt id=\"p1\">**</bpt>switch<ept id=\"p1\">**</ept> are executed.","pos":[9047,9145],"source":" If there are no matches and no default, none of the statements inside the **switch** are executed."},{"content":"The syntax for a switch statement is: Switch statement = <bpt id=\"p1\">**</bpt>switch<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>(<ept id=\"p2\">**</ept>  <bpt id=\"p3\">*</bpt>expression<ept id=\"p3\">*</ept> <bpt id=\"p4\">**</bpt>) { { case } <ph id=\"ph1\">\\[</ph> default:<ept id=\"p4\">**</ept>  <bpt id=\"p5\">*</bpt>statement<ept id=\"p5\">*</ept>  <bpt id=\"p6\">**</bpt><ph id=\"ph2\">\\]</ph> }<ept id=\"p6\">**</ept> The syntax for a case is: case <bpt id=\"p7\">**</bpt>= case<ept id=\"p7\">**</ept>  <bpt id=\"p8\">*</bpt>expression<ept id=\"p8\">*</ept>  <bpt id=\"p9\">**</bpt>{ ,<ept id=\"p9\">**</ept>  <bpt id=\"p10\">*</bpt>expression<ept id=\"p10\">*</ept>  <bpt id=\"p11\">**</bpt>} :<ept id=\"p11\">**</ept>  <bpt id=\"p12\">*</bpt>statement<ept id=\"p12\">*</ept> Each of the previous s<bpt id=\"p13\">*</bpt>tatement<ept id=\"p13\">*</ept> lines can be replaced with a block of statements by enclosing the block in <bpt id=\"p14\">**</bpt>{...}<ept id=\"p14\">**</ept>","pos":[9146,9504],"source":" The syntax for a switch statement is: Switch statement = **switch** **(**  *expression* **) { { case } \\[ default:**  *statement*  **\\] }** The syntax for a case is: case **= case**  *expression*  **{ ,**  *expression*  **} :**  *statement* Each of the previous s*tatement* lines can be replaced with a block of statements by enclosing the block in **{...}**"},{"content":"braces.","pos":[9505,9512]},{"pos":[9518,9548],"content":"Switch statement code examples","linkify":"Switch statement code examples","nodes":[{"content":"Switch statement code examples","pos":[0,30]}]},{"pos":[11690,11710],"content":"Ternary operator (?)","linkify":"Ternary operator (?)","nodes":[{"content":"Ternary operator (?)","pos":[0,20]}]},{"content":"The <bpt id=\"p1\">**</bpt>ternary operator<ept id=\"p1\">**</ept> (<bpt id=\"p2\">**</bpt>?<ept id=\"p2\">**</ept>) is a conditional statement that resolves to one of two expressions.","pos":[11711,11811],"source":"The **ternary operator** (**?**) is a conditional statement that resolves to one of two expressions."},{"content":"The result can be assigned to a variable.","pos":[11812,11853]},{"content":"In comparison, an <bpt id=\"p1\">**</bpt>if<ept id=\"p1\">**</ept> statement provides conditional branching of program flow but cannot be assigned to a variable.","pos":[11854,11973],"source":" In comparison, an **if** statement provides conditional branching of program flow but cannot be assigned to a variable."},{"content":"The syntax for the ternary operator is <bpt id=\"p1\">*</bpt>expression1<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>?<ept id=\"p2\">**</ept>","pos":[11974,12032],"source":" The syntax for the ternary operator is *expression1* **?**"},{"content":"<bpt id=\"p1\">*</bpt>expression2<ept id=\"p1\">*</ept> <bpt id=\"p2\">**</bpt>:<ept id=\"p2\">**</ept> <bpt id=\"p3\">*</bpt>expression3<ept id=\"p3\">*</ept> <bpt id=\"p4\">*</bpt>expression1<ept id=\"p4\">*</ept> must return a value of <bpt id=\"p5\">**</bpt>true<ept id=\"p5\">**</ept> or <bpt id=\"p6\">**</bpt>false.<ept id=\"p6\">**</ept>","pos":[12033,12126],"source":"*expression2* **:** *expression3* *expression1* must return a value of **true** or **false.**"},{"content":"If <bpt id=\"p1\">*</bpt>expression1<ept id=\"p1\">*</ept> is <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>, the whole ternary statement returns <bpt id=\"p3\">*</bpt>expression2<ept id=\"p3\">*</ept>; otherwise it returns <bpt id=\"p4\">*</bpt>expression3<ept id=\"p4\">*</ept>.","pos":[12127,12243],"source":" If *expression1* is **true**, the whole ternary statement returns *expression2*; otherwise it returns *expression3*."},{"content":"<bpt id=\"p1\">*</bpt>expression2<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>expression3<ept id=\"p2\">*</ept> must have the same type.","pos":[12244,12300],"source":"*expression2* and *expression3* must have the same type."},{"pos":[12306,12327],"content":"Ternary code examples","linkify":"Ternary code examples","nodes":[{"content":"Ternary code examples","pos":[0,21]}]},{"pos":[13376,13391],"content":"Loop statements","linkify":"Loop statements","nodes":[{"content":"Loop statements","pos":[0,15]}]},{"content":"There are three loop statements,  <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>while<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>do...while.<ept id=\"p3\">**</ept>","pos":[13392,13465],"source":"There are three loop statements,  **for**, **while**, and **do...while.**"},{"content":"A loop repeats its statement until the condition set for the loop is <bpt id=\"p1\">**</bpt>false.<ept id=\"p1\">**</ept>","pos":[13466,13545],"source":" A loop repeats its statement until the condition set for the loop is **false.**"},{"content":"Within the loop statements, you can use <bpt id=\"p1\">**</bpt>break<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>continue<ept id=\"p2\">**</ept> statements.","pos":[13546,13624],"source":" Within the loop statements, you can use **break** and **continue** statements."},{"pos":[13629,13637],"content":"for loop","linkify":"for loop","nodes":[{"content":"for loop","pos":[0,8]}]},{"content":"The <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop repeatedly executes one or more statements, as long as the conditional expression is <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>.","pos":[13638,13749],"source":"The **for** loop repeatedly executes one or more statements, as long as the conditional expression is **true**."},{"content":"The statement is executed as many times as the condition is met.","pos":[13750,13814]},{"content":"The body of the <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop may be executed zero or more times according to the results of the condition test.","pos":[13815,13926],"source":" The body of the **for** loop may be executed zero or more times according to the results of the condition test."},{"content":"A <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> loop differs from other loops because of the following additions because the initial value to a control variable can be assigned and because there is a statement for incrementing or decrementing the variable.","pos":[13927,14145],"source":" A **for** loop differs from other loops because of the following additions because the initial value to a control variable can be assigned and because there is a statement for incrementing or decrementing the variable."},{"content":"These additions make it especially useful for traversing lists, containers, and arrays because they have a fixed number of elements.","pos":[14146,14278]},{"content":"You can also apply a statement to each element and increment your way through the elements, setting the condition to test for the last element.","pos":[14279,14422]},{"content":"The syntax for a <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> statement is: <bpt id=\"p2\">**</bpt>for<ept id=\"p2\">**</ept> ( initialization ; test ; increment ) { <bpt id=\"p3\">*</bpt>statement<ept id=\"p3\">*</ept> } <bpt id=\"p4\">*</bpt>Statement<ept id=\"p4\">*</ept> can be a block of statements.","pos":[14423,14565],"source":" The syntax for a **for** statement is: **for** ( initialization ; test ; increment ) { *statement* } *Statement* can be a block of statements."},{"pos":[14571,14593],"content":"for loop code examples","linkify":"for loop code examples","nodes":[{"content":"for loop code examples","pos":[0,22]}]},{"pos":[14807,14817],"content":"while loop","linkify":"while loop","nodes":[{"content":"while loop","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">**</bpt>while<ept id=\"p1\">**</ept> loop repeatedly executes one or more statements, as long as the condition expression is <bpt id=\"p2\">**</bpt>true<ept id=\"p2\">**</ept>.","pos":[14818,14927],"source":"A **while** loop repeatedly executes one or more statements, as long as the condition expression is **true**."},{"content":"The statements are executed from zero to many times, depending on how many times the condition is met.","pos":[14928,15030]},{"content":"The syntax for a <bpt id=\"p1\">**</bpt>while<ept id=\"p1\">**</ept> loop is: <bpt id=\"p2\">**</bpt>while<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>(<ept id=\"p3\">**</ept> <bpt id=\"p4\">*</bpt>expression<ept id=\"p4\">*</ept> <bpt id=\"p5\">**</bpt>)<ept id=\"p5\">**</ept> <bpt id=\"p6\">*</bpt>statement<ept id=\"p6\">*</ept> <bpt id=\"p7\">*</bpt>Statement<ept id=\"p7\">*</ept> can be replaced by a block of statements.","pos":[15031,15167],"source":" The syntax for a **while** loop is: **while** **(** *expression* **)** *statement* *Statement* can be replaced by a block of statements."},{"pos":[15173,15196],"content":"while loop code example","linkify":"while loop code example","nodes":[{"content":"while loop code example","pos":[0,23]}]},{"pos":[15544,15559],"content":"do...while loop","linkify":"do...while loop","nodes":[{"content":"do...while loop","pos":[0,15]}]},{"content":"The <bpt id=\"p1\">**</bpt>do...while<ept id=\"p1\">**</ept> loop is similar to the while loop, but differs in that the condition follows the statements to be executed.","pos":[15560,15686],"source":"The **do...while** loop is similar to the while loop, but differs in that the condition follows the statements to be executed."},{"content":"The statements are always executed at least once, as the condition is tested after the statements are executed.","pos":[15687,15798]},{"content":"The <bpt id=\"p1\">**</bpt>do...while<ept id=\"p1\">**</ept> loop is well-suited for tasks that always must be done at least once, such as getting parameters for a report.","pos":[15799,15928],"source":" The **do...while** loop is well-suited for tasks that always must be done at least once, such as getting parameters for a report."},{"content":"The syntax for a <bpt id=\"p1\">**</bpt>do...while<ept id=\"p1\">**</ept> loop is: <bpt id=\"p2\">**</bpt>do {<ept id=\"p2\">**</ept> <bpt id=\"p3\">*</bpt>statement<ept id=\"p3\">*</ept> <bpt id=\"p4\">**</bpt>} while (<ept id=\"p4\">**</ept> <bpt id=\"p5\">*</bpt>expression<ept id=\"p5\">*</ept> <bpt id=\"p6\">**</bpt>) ;<ept id=\"p6\">**</ept> <bpt id=\"p7\">*</bpt>Statement<ept id=\"p7\">*</ept> can be a block of statements.","pos":[15929,16067],"source":" The syntax for a **do...while** loop is: **do {** *statement* **} while (** *expression* **) ;** *Statement* can be a block of statements."},{"pos":[16073,16101],"content":"do...while loop code example","linkify":"do...while loop code example","nodes":[{"content":"do...while loop code example","pos":[0,28]}]},{"pos":[16455,16484],"content":"continue and break statements","linkify":"continue and break statements","nodes":[{"content":"continue and break statements","pos":[0,29]}]},{"content":"The <bpt id=\"p1\">**</bpt>continue<ept id=\"p1\">**</ept> statement causes execution to move directly to the next iteration of a <bpt id=\"p2\">**</bpt>for<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>while,<ept id=\"p3\">**</ept> or <bpt id=\"p4\">**</bpt>do...while<ept id=\"p4\">**</ept> loop.","pos":[16485,16616],"source":"The **continue** statement causes execution to move directly to the next iteration of a **for**, **while,** or **do...while** loop."},{"content":"For <bpt id=\"p1\">**</bpt>do<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>while<ept id=\"p2\">**</ept>, the test is executed immediately.","pos":[16617,16675],"source":" For **do** or **while**, the test is executed immediately."},{"content":"In a <bpt id=\"p1\">**</bpt>for<ept id=\"p1\">**</ept> statement, the increment step is executed.","pos":[16676,16731],"source":" In a **for** statement, the increment step is executed."},{"content":"The <bpt id=\"p1\">**</bpt>break<ept id=\"p1\">**</ept> statement is used within a loop to terminate a loop.","pos":[16732,16798],"source":" The **break** statement is used within a loop to terminate a loop."},{"content":"Execution moves directly to the first statement following the loop.","pos":[16799,16866]},{"pos":[16872,16903],"content":"continue statement code example","linkify":"continue statement code example","nodes":[{"content":"continue statement code example","pos":[0,31]}]},{"pos":[17247,17262],"content":"using statement","linkify":"using statement","nodes":[{"content":"using statement","pos":[0,15]}]},{"content":"The <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> statement ensure that objects that implement <bpt id=\"p2\">**</bpt>IDisposable<ept id=\"p2\">**</ept> are disposed of correctly.","pos":[17263,17364],"source":"The **using** statement ensure that objects that implement **IDisposable** are disposed of correctly."},{"content":"When you use an <bpt id=\"p1\">**</bpt>IDisposable<ept id=\"p1\">**</ept> object, you should declare and instantiate it in a <bpt id=\"p2\">**</bpt>using<ept id=\"p2\">**</ept> statement.","pos":[17365,17468],"source":" When you use an **IDisposable** object, you should declare and instantiate it in a **using** statement."},{"content":"The <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> statement calls the <bpt id=\"p2\">**</bpt>Dispose<ept id=\"p2\">**</ept> method on the object in the correct way, even if an exception occurs while you are calling methods on the object.","pos":[17469,17628],"source":" The **using** statement calls the **Dispose** method on the object in the correct way, even if an exception occurs while you are calling methods on the object."},{"content":"You could achieve the same result by putting the object inside a try block, and then explicitly calling <bpt id=\"p1\">**</bpt>Dispose<ept id=\"p1\">**</ept> in a finally block.","pos":[17629,17764],"source":" You could achieve the same result by putting the object inside a try block, and then explicitly calling **Dispose** in a finally block."},{"content":"The <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> statement simplifies the syntax and disposes of the object correctly.","pos":[17765,17848],"source":" The **using** statement simplifies the syntax and disposes of the object correctly."},{"content":"The syntax for a <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> statement is <bpt id=\"p2\">**</bpt>using<ept id=\"p2\">**</ept> ( <bpt id=\"p3\">*</bpt>expression<ept id=\"p3\">*</ept> ) { <bpt id=\"p4\">*</bpt>statement<ept id=\"p4\">*</ept> }.","pos":[17849,17932],"source":" The syntax for a **using** statement is **using** ( *expression* ) { *statement* }."},{"content":"<bpt id=\"p1\">*</bpt>Statement<ept id=\"p1\">*</ept> can be a block of statements.","pos":[17933,17974],"source":"*Statement* can be a block of statements."},{"content":"Expression declares and instantiates an object that implements IDisposable.","pos":[17975,18050]},{"content":"The following example creates and uses a <bpt id=\"p1\">**</bpt>StreamReader<ept id=\"p1\">**</ept> object.","pos":[18051,18116],"source":" The following example creates and uses a **StreamReader** object."},{"pos":[18343,18405],"content":"Exception handling with throw, try...catch, finally, and retry","linkify":"Exception handling with throw, try...catch, finally, and retry","nodes":[{"content":"Exception handling with throw, try...catch, finally, and retry","pos":[0,62]}]},{"content":"You handle errors by using the <bpt id=\"p1\">**</bpt>throw,<ept id=\"p1\">**</ept> <bpt id=\"p2\">**</bpt>try...catch<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>finally<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>retry<ept id=\"p4\">**</ept> statements to generate and handle exceptions.","pos":[18406,18536],"source":"You handle errors by using the **throw,** **try...catch**, **finally** and **retry** statements to generate and handle exceptions."},{"content":"An <bpt id=\"p1\">**</bpt>exception<ept id=\"p1\">**</ept> is a regulated jump away from the sequence of program execution.","pos":[18537,18618],"source":" An **exception** is a regulated jump away from the sequence of program execution."},{"content":"The instruction at which program execution resumes is determined by <bpt id=\"p1\">**</bpt>try<ept id=\"p1\">**</ept>...<bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> blocks and the type of exception that is thrown.","pos":[18619,18755],"source":" The instruction at which program execution resumes is determined by **try**...**catch** blocks and the type of exception that is thrown."},{"content":"An exception is represented by a value of the <bpt id=\"p1\">**</bpt>enum<ept id=\"p1\">**</ept> named <bpt id=\"p2\">**</bpt>Exception<ept id=\"p2\">**</ept>.","pos":[18756,18831],"source":" An exception is represented by a value of the **enum** named **Exception**."},{"content":"A frequently thrown exception is <bpt id=\"p1\">**</bpt>Exception::error<ept id=\"p1\">**</ept> enumeration value.","pos":[18832,18904],"source":" A frequently thrown exception is **Exception::error** enumeration value."},{"content":"It is common practice to write diagnostic information to the <bpt id=\"p1\">**</bpt>Infolog<ept id=\"p1\">**</ept> before throwing the exception, and the <bpt id=\"p2\">**</bpt>Global::error<ept id=\"p2\">**</ept> method is often the best way to do that.","pos":[18905,19075],"source":" It is common practice to write diagnostic information to the **Infolog** before throwing the exception, and the **Global::error** method is often the best way to do that."},{"content":"For example, your method might receive an input parameter value that is invalid.","pos":[19076,19156]},{"content":"Your method can <bpt id=\"p1\">**</bpt>throw<ept id=\"p1\">**</ept> an exception to immediately transfer control to a <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> code block that contains logic to handle this particular error situation.","pos":[19157,19316],"source":" Your method can **throw** an exception to immediately transfer control to a **catch** code block that contains logic to handle this particular error situation."},{"content":"You do not necessarily need to know the location of the <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> block that will receive control when the exception is thrown.","pos":[19317,19444],"source":" You do not necessarily need to know the location of the **catch** block that will receive control when the exception is thrown."},{"pos":[19449,19464],"content":"throw statement","linkify":"throw statement","nodes":[{"content":"throw statement","pos":[0,15]}]},{"content":"You use the <bpt id=\"p1\">**</bpt>throw<ept id=\"p1\">**</ept> keyword to throw an <bpt id=\"p2\">**</bpt>Exception<ept id=\"p2\">**</ept> enum value.","pos":[19465,19532],"source":"You use the **throw** keyword to throw an **Exception** enum value."},{"content":"For example, the following statement throws an error exception:","pos":[19533,19596]},{"pos":[19627,19756],"content":"Instead of throwing an enum value, it is a best practice to use the <bpt id=\"p1\">**</bpt>Global::error<ept id=\"p1\">**</ept> method output as the operand for <bpt id=\"p2\">**</bpt>throw<ept id=\"p2\">**</ept>:","source":"Instead of throwing an enum value, it is a best practice to use the **Global::error** method output as the operand for **throw**:"},{"content":"The <bpt id=\"p1\">**</bpt>Global::error<ept id=\"p1\">**</ept> method can automatically convert a label into the corresponding text.","pos":[19819,19910],"source":"The **Global::error** method can automatically convert a label into the corresponding text."},{"content":"This helps you to write code that can be more easily localized.","pos":[19911,19974]},{"content":"The static methods on the <bpt id=\"p1\">**</bpt>Global<ept id=\"p1\">**</ept> class can be called without the <bpt id=\"p2\">**</bpt>Global::<ept id=\"p2\">**</ept> prefix.","pos":[20015,20104],"source":"The static methods on the **Global** class can be called without the **Global::** prefix."},{"content":"For example, the <bpt id=\"p1\">**</bpt>Global::error<ept id=\"p1\">**</ept> method can be called simply as","pos":[20105,20170],"source":" For example, the **Global::error** method can be called simply as"},{"pos":[20202,20243],"content":"try, catch, finally, and retry statements","linkify":"try, catch, finally, and retry statements","nodes":[{"content":"try, catch, finally, and retry statements","pos":[0,41]}]},{"content":"When an exception is thrown, it is first processed through the <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> list of the innermost <bpt id=\"p2\">**</bpt>try<ept id=\"p2\">**</ept> block.","pos":[20244,20353],"source":"When an exception is thrown, it is first processed through the **catch** list of the innermost **try** block."},{"content":"If a <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> block is found that handles the kind of exception that is being thrown, program control jumps to that <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> block.","pos":[20354,20487],"source":" If a **catch** block is found that handles the kind of exception that is being thrown, program control jumps to that **catch** block."},{"content":"If the <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> list has no block that specifies the particular exception, the system passes the exception to the catch list of the next innermost try block.","pos":[20488,20646],"source":" If the **catch** list has no block that specifies the particular exception, the system passes the exception to the catch list of the next innermost try block."},{"content":"The <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> statements are processed in the same sequence that they appear in the code.","pos":[20647,20736],"source":" The **catch** statements are processed in the same sequence that they appear in the code."},{"content":"It is common to have the first <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> statement handle the <bpt id=\"p2\">**</bpt>Exception::Error<ept id=\"p2\">**</ept> enumeration value.","pos":[20737,20838],"source":" It is common to have the first **catch** statement handle the **Exception::Error** enumeration value."},{"content":"One strategy is to have the last <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> statement leave the exception type unspecified.","pos":[20839,20929],"source":" One strategy is to have the last **catch** statement leave the exception type unspecified."},{"content":"This means it handles all exceptions that are not handled by a previous <bpt id=\"p1\">**</bpt>catch.<ept id=\"p1\">**</ept>","pos":[20930,21012],"source":" This means it handles all exceptions that are not handled by a previous **catch.**"},{"content":"This strategy is appropriate for the outermost <bpt id=\"p1\">**</bpt>try...catch<ept id=\"p1\">**</ept> blocks.","pos":[21013,21083],"source":" This strategy is appropriate for the outermost **try...catch** blocks."},{"content":"<bpt id=\"p1\">**</bpt>try...catch<ept id=\"p1\">**</ept> statements can include an optional <bpt id=\"p2\">**</bpt>finally<ept id=\"p2\">**</ept> clause.","pos":[21084,21154],"source":"**try...catch** statements can include an optional **finally** clause."},{"content":"The semantics are the same as they are in C<ph id=\"ph1\">\\#</ph>. The statements in the finally clause are executed when control leaves the try block, either normally or through an exception.","pos":[21155,21327],"source":" The semantics are the same as they are in C\\#. The statements in the finally clause are executed when control leaves the try block, either normally or through an exception."},{"content":"The <bpt id=\"p1\">**</bpt>retry<ept id=\"p1\">**</ept> statement can be written only in a <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> block.","pos":[21328,21393],"source":" The **retry** statement can be written only in a **catch** block."},{"content":"The <bpt id=\"p1\">**</bpt>retry<ept id=\"p1\">**</ept> statement causes control to jump up to the first line of code in the associated <bpt id=\"p2\">**</bpt>try<ept id=\"p2\">**</ept> block.","pos":[21394,21502],"source":" The **retry** statement causes control to jump up to the first line of code in the associated **try** block."},{"content":"The <bpt id=\"p1\">**</bpt>retry<ept id=\"p1\">**</ept> statement is used when the cause of the exception can be fixed by the code in the <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> block.","pos":[21503,21615],"source":" The **retry** statement is used when the cause of the exception can be fixed by the code in the **catch** block."},{"content":"The <bpt id=\"p1\">**</bpt>retry<ept id=\"p1\">**</ept> statement gives the code in the <bpt id=\"p2\">**</bpt>try<ept id=\"p2\">**</ept> block another chance to succeed.","pos":[21616,21702],"source":" The **retry** statement gives the code in the **try** block another chance to succeed."},{"content":"The <bpt id=\"p1\">**</bpt>retry<ept id=\"p1\">**</ept> statement erases messages that were written to the <bpt id=\"p2\">**</bpt>Infolog<ept id=\"p2\">**</ept> since program control entered the try block.","pos":[21703,21824],"source":" The **retry** statement erases messages that were written to the **Infolog** since program control entered the try block."},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> You must prevent your use of <bpt id=\"p2\">**</bpt>retry<ept id=\"p2\">**</ept> from causing an infinite loop.","pos":[21825,21904],"source":"**Note:** You must prevent your use of **retry** from causing an infinite loop."},{"content":"The best practice is to include a variable in the <bpt id=\"p1\">**</bpt>try<ept id=\"p1\">**</ept> block that you can test to see if you are in a loop.","pos":[21905,22015],"source":" The best practice is to include a variable in the **try** block that you can test to see if you are in a loop."},{"pos":[22299,22327],"content":"The system exception handler","linkify":"The system exception handler","nodes":[{"content":"The system exception handler","pos":[0,28]}]},{"content":"If no <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> statement handles the exception, it is handled by the <bpt id=\"p2\">**</bpt>system exception handler<ept id=\"p2\">**</ept>.","pos":[22329,22428],"source":"If no **catch** statement handles the exception, it is handled by the **system exception handler**."},{"content":"The system exception handler does not write to the <bpt id=\"p1\">**</bpt>Infolog<ept id=\"p1\">**</ept>.","pos":[22429,22492],"source":" The system exception handler does not write to the **Infolog**."},{"content":"This means that an unhandled exception can be hard to diagnose.","pos":[22493,22556]},{"content":"We recommended that you do all the following to provide effective exception handling:","pos":[22557,22642]},{"pos":[22648,22744],"content":"Have a <bpt id=\"p1\">**</bpt>try<ept id=\"p1\">**</ept> block that contains all your statements in the outermost frame on the call stack.","source":"Have a **try** block that contains all your statements in the outermost frame on the call stack."},{"pos":[22749,22829],"content":"Have an unqualified <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> block at the end of your outermost <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> list.","source":"Have an unqualified **catch** block at the end of your outermost **catch** list."},{"pos":[22834,22886],"content":"Avoid throwing an <bpt id=\"p1\">**</bpt>Exception<ept id=\"p1\">**</ept> enum value directly.","source":"Avoid throwing an **Exception** enum value directly."},{"content":"<bpt id=\"p1\">**</bpt>Throw<ept id=\"p1\">**</ept> the enum value that is returned from one of the <bpt id=\"p2\">**</bpt>Global::error<ept id=\"p2\">**</ept> method, the <bpt id=\"p3\">**</bpt>Global::warning<ept id=\"p3\">**</ept> method, or the <bpt id=\"p4\">**</bpt>Global::info<ept id=\"p4\">**</ept> method on the <bpt id=\"p5\">**</bpt>Global<ept id=\"p5\">**</ept> class.","pos":[22891,23062],"source":"**Throw** the enum value that is returned from one of the **Global::error** method, the **Global::warning** method, or the **Global::info** method on the **Global** class."},{"content":"You have the option of omitting the implicit <bpt id=\"p1\">**</bpt>Global::<ept id=\"p1\">**</ept> prefix).","pos":[23063,23129],"source":" You have the option of omitting the implicit **Global::** prefix)."},{"pos":[23134,23263],"content":"When you <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> an exception that has not been displayed in the <bpt id=\"p2\">**</bpt>Infolog<ept id=\"p2\">**</ept>, call the <bpt id=\"p3\">**</bpt>Global::info<ept id=\"p3\">**</ept> function to display it.","source":"When you **catch** an exception that has not been displayed in the **Infolog**, call the **Global::info** function to display it."},{"pos":[23265,23445],"content":"<bpt id=\"p1\">**</bpt>Exception::CLRError<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Exception::UpdateConflictNotRecovered<ept id=\"p2\">**</ept>, and system kernel exceptions are examples of exceptions that are not automatically displayed in the <bpt id=\"p3\">**</bpt>Infolog<ept id=\"p3\">**</ept>.","source":"**Exception::CLRError**, **Exception::UpdateConflictNotRecovered**, and system kernel exceptions are examples of exceptions that are not automatically displayed in the **Infolog**."},{"pos":[23451,23477],"content":"Exceptions and CLR interop","linkify":"Exceptions and CLR interop","nodes":[{"content":"Exceptions and CLR interop","pos":[0,26]}]},{"content":"You can call .NET Framework classes and methods that reside in assemblies that are managed by the common language runtime (CLR).","pos":[23479,23607]},{"content":"When a .NET Framework <bpt id=\"p1\">**</bpt>System.Exception<ept id=\"p1\">**</ept> instance is thrown, your code can <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> it by referencing <bpt id=\"p3\">**</bpt>Exception::CLRError<ept id=\"p3\">**</ept>.","pos":[23608,23737],"source":" When a .NET Framework **System.Exception** instance is thrown, your code can **catch** it by referencing **Exception::CLRError**."},{"content":"Your code can obtain a reference to the <bpt id=\"p1\">**</bpt>System.Exception<ept id=\"p1\">**</ept> instance by calling the <bpt id=\"p2\">**</bpt>CLRInterop::getLastException<ept id=\"p2\">**</ept> method.","pos":[23738,23863],"source":" Your code can obtain a reference to the **System.Exception** instance by calling the **CLRInterop::getLastException** method."},{"pos":[23869,23900],"content":"Ensure exceptions are displayed","linkify":"Ensure exceptions are displayed","nodes":[{"content":"Ensure exceptions are displayed","pos":[0,31]}]},{"content":"Exceptions of type <bpt id=\"p1\">**</bpt>Exception::CLRError<ept id=\"p1\">**</ept> are not displayed in the <bpt id=\"p2\">**</bpt>Infolog<ept id=\"p2\">**</ept>.","pos":[23902,23982],"source":"Exceptions of type **Exception::CLRError** are not displayed in the **Infolog**."},{"content":"These exceptions are not issued by a call to a method such as <bpt id=\"p1\">**</bpt>Global::error<ept id=\"p1\">**</ept>.","pos":[23983,24063],"source":" These exceptions are not issued by a call to a method such as **Global::error**."},{"content":"In your catch block, your code can call <bpt id=\"p1\">**</bpt>Global::error<ept id=\"p1\">**</ept> to report the specific exception.","pos":[24064,24155],"source":" In your catch block, your code can call **Global::error** to report the specific exception."},{"pos":[24160,24180],"content":"Global class methods","linkify":"Global class methods","nodes":[{"content":"Global class methods","pos":[0,20]}]},{"content":"This section describes some <bpt id=\"p1\">**</bpt>Global<ept id=\"p1\">**</ept> class methods in more detail.","pos":[24181,24249],"source":"This section describes some **Global** class methods in more detail."},{"content":"These class methods include the <bpt id=\"p1\">**</bpt>Global::error<ept id=\"p1\">**</ept> method, the <bpt id=\"p2\">**</bpt>Global::info<ept id=\"p2\">**</ept> method, and the <bpt id=\"p3\">**</bpt>Global::exceptionTextFallThrough<ept id=\"p3\">**</ept> method.","pos":[24250,24389],"source":" These class methods include the **Global::error** method, the **Global::info** method, and the **Global::exceptionTextFallThrough** method."},{"pos":[24395,24415],"content":"Global::error method","linkify":"Global::error method","nodes":[{"content":"Global::error method","pos":[0,20]}]},{"content":"The error method is declared as follows:","pos":[24417,24457]},{"content":"The return type is the <bpt id=\"p1\">**</bpt>Exception::Error<ept id=\"p1\">**</ept> enum value.","pos":[24600,24655],"source":"The return type is the **Exception::Error** enum value."},{"content":"The <bpt id=\"p1\">**</bpt>error<ept id=\"p1\">**</ept> method does not throw an exception.","pos":[24656,24705],"source":" The **error** method does not throw an exception."},{"content":"It only provides an enum value that could be used in a <bpt id=\"p1\">**</bpt>throw<ept id=\"p1\">**</ept> statement.","pos":[24706,24781],"source":" It only provides an enum value that could be used in a **throw** statement."},{"content":"The <bpt id=\"p1\">**</bpt>throw<ept id=\"p1\">**</ept> statement throws the exception.","pos":[24782,24827],"source":" The **throw** statement throws the exception."},{"content":"Only the first parameter is required.","pos":[24828,24865]},{"content":"The parameters are described in the following list:","pos":[24866,24917]},{"content":"The <bpt id=\"p1\">**</bpt>SysInfoLogStr<ept id=\"p1\">**</ept> txt is a <bpt id=\"p2\">**</bpt>str<ept id=\"p2\">**</ept> of the message text.","pos":[24923,24982],"source":"The **SysInfoLogStr** txt is a **str** of the message text."},{"content":"This can also be a label reference, such as <bpt id=\"p1\">**</bpt><ph id=\"ph1\">strFmt(\"@SYS12345\",</ph> strThingName)<ept id=\"p1\">**</ept>.","pos":[24983,25065],"source":" This can also be a label reference, such as **strFmt(\"@SYS12345\", strThingName)**."},{"content":"The <bpt id=\"p1\">**</bpt>URL<ept id=\"p1\">**</ept> helpUrl is a reference to the location of a Help topic in the Application Explorer.","pos":[25070,25165],"source":"The **URL** helpUrl is a reference to the location of a Help topic in the Application Explorer."},{"content":"For example:<bpt id=\"p1\">**</bpt>\"KernDoc:<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">\\\\</ph><ph id=\"ph4\">\\\\</ph>Functions<ph id=\"ph5\">\\\\</ph><ph id=\"ph6\">\\\\</ph>substr\"<ept id=\"p1\">**</ept>This parameter value is ignored if <ph id=\"ph7\">\\_</ph>sysInfoAction is supplied.","pos":[25166,25282],"source":" For example:**\"KernDoc:\\\\\\\\\\\\\\\\Functions\\\\\\\\substr\"**This parameter value is ignored if \\_sysInfoAction is supplied."},{"content":"The <bpt id=\"p1\">**</bpt>SysInfoAction<ept id=\"p1\">**</ept> <ph id=\"ph1\">\\_</ph>sysInfoAction is an instance of a class that extends the <bpt id=\"p2\">**</bpt>SysInfoAction<ept id=\"p2\">**</ept> class.","pos":[25287,25392],"source":"The **SysInfoAction** \\_sysInfoAction is an instance of a class that extends the **SysInfoAction** class."},{"content":"The method overrides we recommend for the child class are the <bpt id=\"p1\">**</bpt>description<ept id=\"p1\">**</ept> method, the <bpt id=\"p2\">**</bpt>run<ept id=\"p2\">**</ept> method, the <bpt id=\"p3\">**</bpt>pack<ept id=\"p3\">**</ept> method, and the <bpt id=\"p4\">**</bpt>unpack<ept id=\"p4\">**</ept> method.","pos":[25393,25546],"source":" The method overrides we recommend for the child class are the **description** method, the **run** method, the **pack** method, and the **unpack** method."},{"pos":[25552,25571],"content":"Global::info method","linkify":"Global::info method","nodes":[{"content":"Global::info method","pos":[0,19]}]},{"content":"The <bpt id=\"p1\">**</bpt>Global::info<ept id=\"p1\">**</ept> method is routinely used to display text in the <bpt id=\"p2\">**</bpt>Infolog<ept id=\"p2\">**</ept>.","pos":[25573,25654],"source":"The **Global::info** method is routinely used to display text in the **Infolog**."},{"content":"It is often written in programs as <bpt id=\"p1\">**</bpt>info(\"My message.\");<ept id=\"p1\">**</ept>.","pos":[25655,25715],"source":" It is often written in programs as **info(\"My message.\");**."},{"content":"Even though the <bpt id=\"p1\">**</bpt>info<ept id=\"p1\">**</ept> method returns an <bpt id=\"p2\">**</bpt>Exception::Info<ept id=\"p2\">**</ept> enumeration value it would be rare to want to throw an <bpt id=\"p3\">**</bpt>Exception::Info<ept id=\"p3\">**</ept> because nothing unexpected has occurred.","pos":[25716,25894],"source":" Even though the **info** method returns an **Exception::Info** enumeration value it would be rare to want to throw an **Exception::Info** because nothing unexpected has occurred."},{"pos":[25900,25939],"content":"Global::exceptionTextFallThrough method","linkify":"Global::exceptionTextFallThrough method","nodes":[{"content":"Global::exceptionTextFallThrough method","pos":[0,39]}]},{"content":"Occasionally you want to do nothing inside your <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> block.","pos":[25941,26005],"source":"Occasionally you want to do nothing inside your **catch** block."},{"content":"The X++ compiler issues a warning when you have an empty <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> block.","pos":[26006,26079],"source":" The X++ compiler issues a warning when you have an empty **catch** block."},{"content":"You should avoid this warning by calling the <bpt id=\"p1\">**</bpt>Global::exceptionTextFallThrough<ept id=\"p1\">**</ept> method in the <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> block.","pos":[26080,26192],"source":" You should avoid this warning by calling the **Global::exceptionTextFallThrough** method in the **catch** block."},{"content":"The method does nothing, but it satisfies the compiler.","pos":[26193,26248]},{"pos":[26253,26283],"content":"Exceptions inside transactions","linkify":"Exceptions inside transactions","nodes":[{"content":"Exceptions inside transactions","pos":[0,30]}]},{"content":"If an exception is thrown inside a transaction, the transaction is automatically aborted (a <bpt id=\"p1\">**</bpt>ttsAbort<ept id=\"p1\">**</ept> operation occurs).","pos":[26284,26407],"source":"If an exception is thrown inside a transaction, the transaction is automatically aborted (a **ttsAbort** operation occurs)."},{"content":"This applies both for exceptions thrown manually and for exceptions thrown by the system.","pos":[26408,26497]},{"content":"When an exception is thrown inside a <bpt id=\"p1\">**</bpt>ttsBegin<ept id=\"p1\">**</ept><ph id=\"ph1\"> - </ph><bpt id=\"p2\">**</bpt>ttsCommit<ept id=\"p2\">**</ept> transaction block, no <bpt id=\"p3\">**</bpt>catch<ept id=\"p3\">**</ept> statement inside that transaction block can process the exception.","pos":[26498,26662],"source":" When an exception is thrown inside a **ttsBegin** - **ttsCommit** transaction block, no **catch** statement inside that transaction block can process the exception."},{"content":"Instead, the innermost <bpt id=\"p1\">**</bpt>catch<ept id=\"p1\">**</ept> statements that are outside the transaction block are the first <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> statements to be tested.","pos":[26663,26794],"source":" Instead, the innermost **catch** statements that are outside the transaction block are the first **catch** statements to be tested."},{"pos":[26799,26830],"content":"Exceptionhandling code examples","linkify":"Exceptionhandling code examples","nodes":[{"content":"Exceptionhandling code examples","pos":[0,31]}]},{"pos":[26835,26868],"content":"Display exceptions in the Infolog","linkify":"Display exceptions in the Infolog","nodes":[{"content":"Display exceptions in the Infolog","pos":[0,33]}]},{"content":"This code example displays exceptions in the Infolog.","pos":[26870,26923]},{"pos":[27649,27707],"content":"error method to write exception information to the Infolog","linkify":"error method to write exception information to the Infolog","nodes":[{"content":"error method to write exception information to the Infolog","pos":[0,58]}]},{"pos":[27709,27799],"content":"This code example uses the <bpt id=\"p1\">**</bpt>error<ept id=\"p1\">**</ept> method to write exception information to the Infolog.","source":"This code example uses the **error** method to write exception information to the Infolog."},{"pos":[28522,28539],"content":"Handle a CLRError","linkify":"Handle a CLRError","nodes":[{"content":"Handle a CLRError","pos":[0,17]}]},{"pos":[28541,28582],"content":"This code example handles a <bpt id=\"p1\">**</bpt>CLRError.<ept id=\"p1\">**</ept>","source":"This code example handles a **CLRError.**"},{"pos":[30373,30396],"content":"Use the retry statement","linkify":"Use the retry statement","nodes":[{"content":"Use the retry statement","pos":[0,23]}]},{"pos":[30398,30445],"content":"This code example uses the <bpt id=\"p1\">**</bpt>retry<ept id=\"p1\">**</ept> statement.","source":"This code example uses the **retry** statement."},{"pos":[32302,32341],"content":"Throw an exception inside a transaction","linkify":"Throw an exception inside a transaction","nodes":[{"content":"Throw an exception inside a transaction","pos":[0,39]}]},{"content":"This code example throws an exception in a transaction block.","pos":[32343,32404]},{"pos":[33855,33903],"content":"Use Global::error with a SysInfoAction parameter","linkify":"Use Global::error with a SysInfoAction parameter","nodes":[{"content":"Use Global::error with a SysInfoAction parameter","pos":[0,48]}]},{"content":"When your code throws an exception, your code can write messages to the <bpt id=\"p1\">**</bpt>Infolog<ept id=\"p1\">**</ept> window.","pos":[33905,33996],"source":"When your code throws an exception, your code can write messages to the **Infolog** window."},{"content":"You can make those <bpt id=\"p1\">**</bpt>Infolog<ept id=\"p1\">**</ept> messages more helpful by using the <bpt id=\"p2\">**</bpt>SysInfoAction<ept id=\"p2\">**</ept> class.","pos":[33997,34087],"source":" You can make those **Infolog** messages more helpful by using the **SysInfoAction** class."},{"content":"In the following example, a <bpt id=\"p1\">**</bpt>SysInfoAction<ept id=\"p1\">**</ept> parameter is passed in to the <bpt id=\"p2\">**</bpt>Global::error<ept id=\"p2\">**</ept> method.","pos":[34088,34189],"source":" In the following example, a **SysInfoAction** parameter is passed in to the **Global::error** method."},{"content":"The <bpt id=\"p1\">**</bpt>error<ept id=\"p1\">**</ept> method writes the message to the <bpt id=\"p2\">**</bpt>Infolog<ept id=\"p2\">**</ept>.","pos":[34190,34249],"source":" The **error** method writes the message to the **Infolog**."},{"content":"When the user double-clicks the <bpt id=\"p1\">**</bpt>Infolog<ept id=\"p1\">**</ept> message, the <bpt id=\"p2\">**</bpt>SysInfoAction.run<ept id=\"p2\">**</ept> method is run.","pos":[34250,34343],"source":" When the user double-clicks the **Infolog** message, the **SysInfoAction.run** method is run."},{"content":"You can write code in the <bpt id=\"p1\">**</bpt>run<ept id=\"p1\">**</ept> method that helps to diagnose or fix the problem that caused the exception.","pos":[34344,34453],"source":" You can write code in the **run** method that helps to diagnose or fix the problem that caused the exception."},{"content":"The object that is passed in to the <bpt id=\"p1\">**</bpt>Global::error<ept id=\"p1\">**</ept> method is constructed from a class that you write that extends <bpt id=\"p2\">**</bpt>SysInfoAction<ept id=\"p2\">**</ept>.","pos":[34454,34589],"source":" The object that is passed in to the **Global::error** method is constructed from a class that you write that extends **SysInfoAction**."},{"content":"The following code sample is shown in two parts.","pos":[34590,34638]},{"content":"The first part shows a job that calls the <bpt id=\"p1\">**</bpt>Global::error<ept id=\"p1\">**</ept> method, and then throws the returned value.","pos":[34639,34742],"source":" The first part shows a job that calls the **Global::error** method, and then throws the returned value."},{"content":"An instance of the <bpt id=\"p1\">**</bpt>SysInfoAction<ph id=\"ph1\">\\_</ph>PrintWindow<ph id=\"ph2\">\\_</ph>Demo<ept id=\"p1\">**</ept> class is passed into the <bpt id=\"p2\">**</bpt>error<ept id=\"p2\">**</ept> method.","pos":[34743,34841],"source":" An instance of the **SysInfoAction\\_PrintWindow\\_Demo** class is passed into the **error** method."},{"content":"The second part shows the <bpt id=\"p1\">**</bpt>SysInfoAction<ph id=\"ph1\">\\_</ph>PrintWindow<ph id=\"ph2\">\\_</ph>Demo<ept id=\"p1\">**</ept> class.","pos":[34842,34911],"source":" The second part shows the **SysInfoAction\\_PrintWindow\\_Demo** class."},{"pos":[34918,34944],"content":"Part 1: Call Global::error","linkify":"Part 1: Call Global::error","nodes":[{"content":"Part 1: Call Global::error","pos":[0,26]}]},{"pos":[35327,35377],"content":"Part 2: The SysInfoAction\\_PrintWindow\\_Demo class","linkify":"Part 2: The SysInfoAction\\_PrintWindow\\_Demo class","nodes":[{"content":"Part 2: The SysInfoAction<ph id=\"ph1\">\\_</ph>PrintWindow<ph id=\"ph2\">\\_</ph>Demo class","pos":[0,50],"source":"Part 2: The SysInfoAction\\_PrintWindow\\_Demo class"}]},{"pos":[36271,36289],"content":"List of exceptions","linkify":"List of exceptions","nodes":[{"content":"List of exceptions","pos":[0,18]}]},{"pos":[36290,36390],"content":"The exception literals shown in the following table are the values of the <bpt id=\"p1\">**</bpt>Exception<ept id=\"p1\">**</ept> enumeration.","source":"The exception literals shown in the following table are the values of the **Exception** enumeration."},{"content":"Exception literal","pos":[36394,36411]},{"content":"Description","pos":[36434,36445]},{"pos":[36850,36859],"content":"<bpt id=\"p1\">**</bpt>Break<ept id=\"p1\">**</ept>","source":"**Break**"},{"content":"Indicates that the user has pressed BREAK or CTRL+C.","pos":[36890,36942]},{"pos":[37078,37090],"content":"<bpt id=\"p1\">**</bpt>CLRError<ept id=\"p1\">**</ept>","source":"**CLRError**"},{"content":"Indicates that an error has occurred during the use of the common language runtime (CLR) functionality.","pos":[37118,37221]},{"pos":[37306,37328],"content":"<bpt id=\"p1\">**</bpt>CodeAccessSecurity<ept id=\"p1\">**</ept>","source":"**CodeAccessSecurity**"},{"pos":[37346,37444],"content":"Indicates that an error has occurred during the use of the <bpt id=\"p1\">**</bpt>CodeAccessPermission.demand<ept id=\"p1\">**</ept> method.","source":"Indicates that an error has occurred during the use of the **CodeAccessPermission.demand** method."},{"pos":[37534,37546],"content":"<bpt id=\"p1\">**</bpt>DDEerror<ept id=\"p1\">**</ept>","source":"**DDEerror**"},{"pos":[37574,37646],"content":"Indicates that an error occurred in the use of the <bpt id=\"p1\">**</bpt>DDE<ept id=\"p1\">**</ept> system class.","source":"Indicates that an error occurred in the use of the **DDE** system class."},{"pos":[37762,37774],"content":"<bpt id=\"p1\">**</bpt>Deadlock<ept id=\"p1\">**</ept>","source":"**Deadlock**"},{"content":"Indicates that there is a database deadlock because several transactions are waiting for each other.","pos":[37802,37902]},{"pos":[37990,38015],"content":"<bpt id=\"p1\">**</bpt>DuplicateKeyException<ept id=\"p1\">**</ept>","source":"**DuplicateKeyException**"},{"content":"Indicates that an error has occurred in a transaction that is using Optimistic Concurrency Control.","pos":[38030,38129]},{"content":"The transaction can be retried (use a <bpt id=\"p1\">**</bpt>retry<ept id=\"p1\">**</ept> statement in the <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> block).","pos":[38130,38212],"source":" The transaction can be retried (use a **retry** statement in the **catch** block)."},{"pos":[38218,38255],"content":"<bpt id=\"p1\">**</bpt>DuplicateKeyExceptionNotRecovered<ept id=\"p1\">**</ept>","source":"**DuplicateKeyExceptionNotRecovered**"},{"content":"Indicates that an error has occurred in a transaction that is using Optimistic Concurrency Control.","pos":[38258,38357]},{"content":"The code will not be retried.","pos":[38358,38387]},{"content":"This exception cannot be caught inside a transaction.","pos":[38388,38441]},{"pos":[38446,38455],"content":"<bpt id=\"p1\">**</bpt>Error<ept id=\"p1\">**</ept>","source":"**Error**"},{"content":"Indicates that a fatal error has occurred.","pos":[38486,38528]},{"content":"The transaction has been stopped.","pos":[38529,38562]},{"pos":[38674,38682],"content":"<bpt id=\"p1\">**</bpt>Info<ept id=\"p1\">**</ept>","source":"**Info**"},{"pos":[38714,38782],"content":"Holds a message for the user.Do not <bpt id=\"p1\">**</bpt>throw<ept id=\"p1\">**</ept> an <bpt id=\"p2\">**</bpt>info<ept id=\"p2\">**</ept> exception.","source":"Holds a message for the user.Do not **throw** an **info** exception."},{"pos":[38902,38914],"content":"<bpt id=\"p1\">**</bpt>Internal<ept id=\"p1\">**</ept>","source":"**Internal**"},{"content":"Indicates an internal error in the development system.","pos":[38942,38996]},{"pos":[39130,39141],"content":"<bpt id=\"p1\">**</bpt>Numeric<ept id=\"p1\">**</ept>","source":"**Numeric**"},{"pos":[39170,39282],"content":"Indicates that an error has occurred during the use of the <bpt id=\"p1\">**</bpt>str2int<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>str2int64<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>str2num<ept id=\"p3\">**</ept> functions.","source":"Indicates that an error has occurred during the use of the **str2int**, **str2int64**, or **str2num** functions."},{"pos":[39358,39370],"content":"<bpt id=\"p1\">**</bpt>Sequence<ept id=\"p1\">**</ept>","source":"**Sequence**"},{"pos":[39586,39604],"content":"<bpt id=\"p1\">**</bpt>UpdateConflict<ept id=\"p1\">**</ept>","source":"**UpdateConflict**"},{"content":"Indicates that an error has occurred in a transaction that is using Optimistic Concurrency Control.","pos":[39626,39725]},{"content":"The transaction can be retried (use a <bpt id=\"p1\">**</bpt>retry<ept id=\"p1\">**</ept> statement in the <bpt id=\"p2\">**</bpt>catch<ept id=\"p2\">**</ept> block).","pos":[39726,39808],"source":" The transaction can be retried (use a **retry** statement in the **catch** block)."},{"pos":[39814,39844],"content":"<bpt id=\"p1\">**</bpt>UpdateConflictNotRecovered<ept id=\"p1\">**</ept>","source":"**UpdateConflictNotRecovered**"},{"content":"Indicates that an error has occurred in a transaction that is using Optimistic Concurrency Control.","pos":[39854,39953]},{"content":"The code will not be retried.","pos":[39954,39983]},{"content":"This exception cannot be caught within a transaction.","pos":[39984,40037]},{"pos":[40042,40053],"content":"<bpt id=\"p1\">**</bpt>Warning<ept id=\"p1\">**</ept>","source":"**Warning**"},{"content":"Indicates that something exceptional has happened.","pos":[40082,40132]},{"content":"The user might have to take action, but the event is not fatal.","pos":[40133,40196]},{"content":"Do not throw a <bpt id=\"p1\">**</bpt>warning<ept id=\"p1\">**</ept> exception.","pos":[40197,40234],"source":" Do not throw a **warning** exception."},{"pos":[40272,40312],"content":"changeSite, pause, and window statements","linkify":"changeSite, pause, and window statements","nodes":[{"content":"changeSite, pause, and window statements","pos":[0,40]}]},{"content":"The <bpt id=\"p1\">**</bpt>changeSite<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>pause<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>window<ept id=\"p3\">**</ept> keywords are no longer a part of the X++ language.","pos":[40313,40409],"source":"The **changeSite**, **pause**, and **window** keywords are no longer a part of the X++ language."},{"content":"Using these keywords will cause compilation errors.","pos":[40410,40461]}],"content":"---\n# required metadata\n\ntitle: X++ statements, loops, and exception handling | Microsoft Docs\ndescription: This topic describes statements, loops, and exception handling in X++.\nauthor: annbe\nmanager: AnnBe\nms.date: 2016-08-27 00:35:31\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# keywords: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: 61\nms.suite: Released- Dynamics AX 7.0.0\n# ms.tgt_pltfrm: \nms.custom: 150213\nms.assetid: fc5b1f4d-9438-415e-a1ee-1fff73ff6276\n# ms.region: \n# ms.industry: \nms.author: annbe\n\n---\n\n# X++ statements, loops, and exception handling\n\nComments\n--------\n\nIt is good practice to add comments to your code. This makes a program easier to read and understand. Comments are ignored when the program is compiled. You can use \"//\" and \"/\\* … \\*/\" style comments, although it is best practice to use \"//\"-style comments, even for multi-line comments.\n\n    // This is an example of a comment.\n    /* Here is another example of a comment. */\n\n## Print statements\nYou use the **print** statement to display text or selected results in a temporary window. The messages are displayed in a window that appears when the first **print** statement is executed. The **print** statement can be a convenient alternative to the **Global::info** method during testing. The **info** method displays text in the **Infolog** window. The following table compares the **print** statement against the **Global::info** method.\n\n| Feature            | **Print** statement                                                                                                                            | **Info** method                                                    |\n|--------------------|------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------|\n| Ease of invocation | The **Print** statement automatically converts various data types to strings. It can convert multiple data types in one invocation.            | The **Info** method requires that the input parameter be a string. |\n| Copy to clipboard  | The **Print** window contents cannot be copied to the clipboard. You cannot give the **Print** window focus.                                   | **Infolog** contents are easily copied to the clipboard.           |\n| Scope of lifetime  | The **Print** window closes when the X++ application ends, and the window might close before you have time to read it.                         | The **Infolog** window persists for the whole client session.      |\n| Size and location  | The **Print** window can be a specific size, and in a specific location on the screen.                                                         | The **Infolog** window is sized and placed by the system.          |\n| Common usage       | The **Print** statement is used for convenience during testing. It can help you debug small problems without needing to run a formal debugger. | The **Info** method is appropriate for use in production.          |\n\n### Print statement code example\n\n    // This example demonstrates the print statement automatically converting any\n    // date type to a string. \n    static void PrintJob2(Args _args)\n    {\n        str s1 = \"Hello\";\n        int n2 = 42;\n        utcDateTime udt3 = DateTimeUtil::utcNow();\n        Dialog dlog4 = new Dialog();\n        print \"The print statement automatically converts data types to strings.\";\n        print s1, \" -- \", n2, \" -- \", udt3, \" -- \", dlog4;\n        Global::info(\"User clicked 'Yes' to continue to this call to info.\");\n        info(int2Str(n2)); // int2Str converter is needed.\n    }\n     \n    /***  Output to the Print window:\n    The print statement automatically converts data types to strings.\n    Hello -- 42 -- 10/3/2011 09:18:10 pm -- 1\n    ***/\n\n    /***  Output to Infolog window:\n    Message (02:18:10 pm)\n    User clicked 'Yes' to continue to this call to info.\n    ***/\n\n## TODO comments\nThe compiler recognizes the string **TODO** when it occurs at the start of a comment. The **TODO** string prompts the compiler to report the rest of the comment text on in the **Task List** window of Visual Studio. To open the **Task List** window, select **View** and then select **Task Window**. The **Task Window **reports the line number in the code where the **TODO** comment can be found. The rules for using **TODO** in comments are as follows:\n\n-   The **TODO** string can appear in either the **//** or the **/\\* \\*/** style of comment.\n-   The **TODO** string must be the very first non-white space string in the comment. White space is considered to be a carriage return, a line feed, a tab, or a space.\n-   No white space is required between the start of the comment and the **TODO**.\n-   The **TODO** string is case insensitive. However, the convention is to write **TODO** in all uppercase letters, instead of **ToDo** or another variation.\n-   The **TODO** string can have any characters appended to it, but the convention is to either append a colon, or for a white space to follow.\n-   The rest of the comment after the **TODO** string is reported as the task description. If the comment is longer than 200 characters, it might display truncated in the **Tasks** tab.\n-   The **TODO** task description can be spread over multiple lines when the **/\\* \\*/** comment style is used.\n\n### TODO code examples\n\nThe following table shows examples of using **TODO** in the **//** or the **/\\* \\*/** style of comment.\n\n    // An example of using TODO in the // style of comment.\n    public boolean isLate()\n    {\n        // TODO: Finish this stub. \n        return true;\n    }\n\n    // An example of using TODO in the /* */ style of comment.\n    public boolean isLate()\n    {\n        /* TODO Finish this stub */\n        return true;\n    }\n\n## Using clauses\nYou use **using** clauses so that you do not have to provide the fully-qualified name of a type. The **using** clause must precede the class which it applies, and it is required in every source file you want it to apply to. Typically, all **using** clauses are placed at the beginning of the source file. It's also possible to provide aliases that introduce a short name for a fully qualified name. Aliases can denote namespaces or classes. The following example shows a using clause, a namespace alias, and a class alias.\n\n     \n    using System;\n    using IONS=System.IO; // Namespace alias\n    using Alist=System.Collections.ArrayList; // Class alias\n\n    public class MyClass2\n    {\n        public static void Main(Args a)\n        {\n            Int32 I; // Alternative to System.Int32\n            Alist al; // Using a class alias\n\n            al = new Alist();\n            str s;\n\n            al.Add(1);\n\n            s = IONS.Path::ChangeExtension(@\"c:\\tmp\\test.xml\", \".txt\");\n        }\n    }\n\n## Conditional statements\nThe conditional statements are **if**, **if ... else**, **switch**, and the **ternary operator (?)**. You use conditional statements to specify whether a block of code is executed or not. Different conditional statements offer advantages depending on the details of the situation.\n\n## if and if...else statements\nThe **if** statement evaluates a conditional expression and executes a statement or set of statements if the conditional expression evaluates to **true**. You can provide an alternative statement or set of statements that are executed if the condition is false by using the **else** clause. The syntax for an if... else statement is **if** **(** *expression* **)** *statement* **\\[** **else** *statement* **\\]** . Both statements can be compound statements. The expression in the parentheses (the conditional expression) can be any valid expression that evaluates to **true** or **false**. All numbers different from zero are **true;** all non-empty strings are also **true**. You can nest **if** statements, but if the nesting of **if** statements becomes too deep, consider using a **switch** statement instead.\n\n### if and if... else code examples\n\n    // if statement\n    if(a > 4)\n    {\n       print a;\n    }\n     \n    // if... else statement \n    if(a > 4)\n    {\n       print a;\n    }\n    else\n    {\n       print \"a is less than or equal to 4\";\n    }\n\n## switch statement\nThe **switch** statement is a multi-branch language construct. This is in contrast to the **if** statement where you have to nest **if** statements to create the same effect. The conditional expression of the **switch** is evaluated and checked against each case value. The case values must be constants that can be evaluated by the compiler. If a case constant matches the switch expression, the case statement is executed. If the case also contains a **break** statement, the program then jumps out of the switch. If there is no **break** statement, the program continues executing the next set of case statements. If no matches are found, the **default** statement is executed. If there are no matches and no default, none of the statements inside the **switch** are executed. The syntax for a switch statement is: Switch statement = **switch** **(**  *expression* **) { { case } \\[ default:**  *statement*  **\\] }** The syntax for a case is: case **= case**  *expression*  **{ ,**  *expression*  **} :**  *statement* Each of the previous s*tatement* lines can be replaced with a block of statements by enclosing the block in **{...}** braces.\n\n### Switch statement code examples\n\n    // When the break keyword is used within a switch statement, the execution of \n    // the case branch terminates, and the statement following the \n    // switch is executed as shown in the following example.\n    // If the Debtor account number is 1000, the program executes \n    // \"do something\", and then continues execution after the switch statement.\n    switch (Debtor.AccountNo)\n    {\n        case \"1000\":\n            // do something\n            break;\n        case \"2000\":\n            // do something else\n            break;\n        default:\n            // default statement\n            break;\n    }\n     \n    // Switch statement example to make the execution drop \n    // through case branches by omitting a break statement. \n    // If x is 10, b is assigned to a, and d is assigned to c, the break \n    // statement is omitted after the case 10: statement. If x is 11, d \n    // is assigned to c. If x is 12, f is assigned to e.\n    switch (x)\n    {\n        case 10:\n            a = b;\n        case 11:\n            c = d;\n            break;\n        case 12:\n            e = f;\n            break;\n    } \n     \n    // If you do not use the break statement, the program flow in the switch\n    // statement continues into the next case. Code segments A and B\n    // have the same behavior. \n    // Code segment A (break omitted)\n    case 13:\n    case 17:\n    case 21:\n    case 500:\n        print \"g\";\n        break;\n    // Code segment B (the values are comma-delimited)\n    case 13, 17, 21, 500;\n        print \"g\";\n        break;\n\n    // Break statement example within a while loop. When used within\n    // a loop, the loop is terminated and execution continues\n    // from the statement following the loop. This works for do... while\n    // and for loops as well. \n    var mainMenu = SysDictMenu::newMainMenu();\n    var enum = mainMenu.getEnumerator();\n    var found = false;\n    while (enum.moveNext())\n    {\n        var menuItem = enum.current();\n        if (menuItem.label() == \"StringOfInterest\")\n        {\n            found = true;\n            break;\n        }\n    }\n\n    if (found) \n    {\n        // do something\n    }\n\n## Ternary operator (?)\nThe **ternary operator** (**?**) is a conditional statement that resolves to one of two expressions. The result can be assigned to a variable. In comparison, an **if** statement provides conditional branching of program flow but cannot be assigned to a variable. The syntax for the ternary operator is *expression1* **?** *expression2* **:** *expression3* *expression1* must return a value of **true** or **false.** If *expression1* is **true**, the whole ternary statement returns *expression2*; otherwise it returns *expression3*. *expression2* and *expression3* must have the same type.\n\n### Ternary code examples\n\n    // Returns one of two strings based on a Boolean return value from a method call. \n    // The Boolean expression indicated whether the CustTable table has a row\n    // with a RecId field value of 1. If this Boolean expression is true \n    // (meaning RecId != 0), found is assigned to result. \n    // Otherwise, the alternative not found is assigned to result.\n    result = (custTable::find(\"1\").RecId) ? \"found\" : \"not found\";\n     \n    // An example of a nested ternary statement. \n    // If z is not greater than 1000, the expression is equal to the third \n    // expression and low is printed. If AccountNum is greater than 1000, the second \n    // expression is evaluated, and this also contains a ternary operator. If AccountNum \n    // is greater than 1000 and less than 2000, In interval is printed. If AccountNum is \n    // greater than 1000 and greater than or equal to 2000, Above 2000 is printed.str z = \"5\";\n\n    print( (z > \"1000\") ?\n             ( (z < \"2000\") ? \"In interval\" : \"Above 2000\")\n             : \"low\");\n    ); \n\n## Loop statements\nThere are three loop statements,  **for**, **while**, and **do...while.** A loop repeats its statement until the condition set for the loop is **false.** Within the loop statements, you can use **break** and **continue** statements.\n\n## for loop\nThe **for** loop repeatedly executes one or more statements, as long as the conditional expression is **true**. The statement is executed as many times as the condition is met. The body of the **for** loop may be executed zero or more times according to the results of the condition test. A **for** loop differs from other loops because of the following additions because the initial value to a control variable can be assigned and because there is a statement for incrementing or decrementing the variable. These additions make it especially useful for traversing lists, containers, and arrays because they have a fixed number of elements. You can also apply a statement to each element and increment your way through the elements, setting the condition to test for the last element. The syntax for a **for** statement is: **for** ( initialization ; test ; increment ) { *statement* } *Statement* can be a block of statements.\n\n### for loop code examples\n\n    // An example where all items are printed in \n    // a fixed array called ra with 100 reals. \n    int ra[10];\n\n    int i; // Control variable.\n    for (i=1; i<=100; i+=1)\n    {\n        print ra[i];\n    }\n\n## while loop\nA **while** loop repeatedly executes one or more statements, as long as the condition expression is **true**. The statements are executed from zero to many times, depending on how many times the condition is met. The syntax for a **while** loop is: **while** **(** *expression* **)** *statement* *Statement* can be replaced by a block of statements.\n\n### while loop code example\n\n    // This example demonstrates a while loop that traverses \n    // a container, cont, and prints out the contents of the container.\n    public static void Iteration()\n    {\n        container cont;\n\n        int no = 1;\n        while (no <= conlen(cont))\n        {\n            print conpeek(cont,no);\n            no = no + 1;\n        }\n    }\n\n## do...while loop\nThe **do...while** loop is similar to the while loop, but differs in that the condition follows the statements to be executed. The statements are always executed at least once, as the condition is tested after the statements are executed. The **do...while** loop is well-suited for tasks that always must be done at least once, such as getting parameters for a report. The syntax for a **do...while** loop is: **do {** *statement* **} while (** *expression* **) ;** *Statement* can be a block of statements.\n\n### do...while loop code example\n\n    // An example of a do...while loop designed to find \n    // the smallest power of 10 that is larger than _Value.\n    int FindPower(real _Value)\n    {\n        int ex=-1;\n        real curVal;\n        ;\n        do\n        {\n            ex += 1;\n            curVal = power(10, ex);\n        }\n        while (_Value>curVal);\n        return ex;\n    }\n\n## continue and break statements\nThe **continue** statement causes execution to move directly to the next iteration of a **for**, **while,** or **do...while** loop. For **do** or **while**, the test is executed immediately. In a **for** statement, the increment step is executed. The **break** statement is used within a loop to terminate a loop. Execution moves directly to the first statement following the loop.\n\n### continue statement code example\n\n    // An example of a continue statement. \n    // If Iarray[i] <= 0, the remaining statements in the loop are not executed, \n    // and i is incremented before the if statement is tried again.\n    int i;\n    int Iarray[100];\n    for (i=1; i<100; i++)\n    {\n        if (Iarray[i] <= 0)\n        continue;\n        // Some statements.\n    }\n\n## using statement\nThe **using** statement ensure that objects that implement **IDisposable** are disposed of correctly. When you use an **IDisposable** object, you should declare and instantiate it in a **using** statement. The **using** statement calls the **Dispose** method on the object in the correct way, even if an exception occurs while you are calling methods on the object. You could achieve the same result by putting the object inside a try block, and then explicitly calling **Dispose** in a finally block. The **using** statement simplifies the syntax and disposes of the object correctly. The syntax for a **using** statement is **using** ( *expression* ) { *statement* }. *Statement* can be a block of statements. Expression declares and instantiates an object that implements IDisposable. The following example creates and uses a **StreamReader** object.\n\n    static void AnotherMethod()\n    {\n        str textFromFile;\n\n        using (System.IO.StreamReader sr = new System.IO.StreamReader(\"c:\\\\test.txt\"))\n        {\n            textFromFile = sr.ReadToEnd();\n        }\n    }\n\n## Exception handling with throw, try...catch, finally, and retry\nYou handle errors by using the **throw,** **try...catch**, **finally** and **retry** statements to generate and handle exceptions. An **exception** is a regulated jump away from the sequence of program execution. The instruction at which program execution resumes is determined by **try**...**catch** blocks and the type of exception that is thrown. An exception is represented by a value of the **enum** named **Exception**. A frequently thrown exception is **Exception::error** enumeration value. It is common practice to write diagnostic information to the **Infolog** before throwing the exception, and the **Global::error** method is often the best way to do that. For example, your method might receive an input parameter value that is invalid. Your method can **throw** an exception to immediately transfer control to a **catch** code block that contains logic to handle this particular error situation. You do not necessarily need to know the location of the **catch** block that will receive control when the exception is thrown.\n\n## throw statement\nYou use the **throw** keyword to throw an **Exception** enum value. For example, the following statement throws an error exception:\n\n    throw Exception::error;\n\nInstead of throwing an enum value, it is a best practice to use the **Global::error** method output as the operand for **throw**:\n\n    throw Global::error(\"The parameter value is invalid.\");\n\nThe **Global::error** method can automatically convert a label into the corresponding text. This helps you to write code that can be more easily localized.\n\n    throw Global::error(\"@SYS98765\");\n\nThe static methods on the **Global** class can be called without the **Global::** prefix. For example, the **Global::error** method can be called simply as\n\n    error(\"My message.\");\n\n## try, catch, finally, and retry statements\nWhen an exception is thrown, it is first processed through the **catch** list of the innermost **try** block. If a **catch** block is found that handles the kind of exception that is being thrown, program control jumps to that **catch** block. If the **catch** list has no block that specifies the particular exception, the system passes the exception to the catch list of the next innermost try block. The **catch** statements are processed in the same sequence that they appear in the code. It is common to have the first **catch** statement handle the **Exception::Error** enumeration value. One strategy is to have the last **catch** statement leave the exception type unspecified. This means it handles all exceptions that are not handled by a previous **catch.** This strategy is appropriate for the outermost **try...catch** blocks. **try...catch** statements can include an optional **finally** clause. The semantics are the same as they are in C\\#. The statements in the finally clause are executed when control leaves the try block, either normally or through an exception. The **retry** statement can be written only in a **catch** block. The **retry** statement causes control to jump up to the first line of code in the associated **try** block. The **retry** statement is used when the cause of the exception can be fixed by the code in the **catch** block. The **retry** statement gives the code in the **try** block another chance to succeed. The **retry** statement erases messages that were written to the **Infolog** since program control entered the try block. **Note:** You must prevent your use of **retry** from causing an infinite loop. The best practice is to include a variable in the **try** block that you can test to see if you are in a loop.\n\n    try \n    { \n        // Code here.\n    }\n    catch (Exception::Numeric) \n    { \n        info(\"Caught a Numeric exception.\"); \n    }\n    catch \n    { \n        info(\"Caught an exception.\"); \n    }\n    finally\n    {\n        // Executed no matter how the try block exits.\n    }\n\n### The system exception handler\n\nIf no **catch** statement handles the exception, it is handled by the **system exception handler**. The system exception handler does not write to the **Infolog**. This means that an unhandled exception can be hard to diagnose. We recommended that you do all the following to provide effective exception handling:\n\n-   Have a **try** block that contains all your statements in the outermost frame on the call stack.\n-   Have an unqualified **catch** block at the end of your outermost **catch** list.\n-   Avoid throwing an **Exception** enum value directly.\n-   **Throw** the enum value that is returned from one of the **Global::error** method, the **Global::warning** method, or the **Global::info** method on the **Global** class. You have the option of omitting the implicit **Global::** prefix).\n-   When you **catch** an exception that has not been displayed in the **Infolog**, call the **Global::info** function to display it.\n\n**Exception::CLRError**, **Exception::UpdateConflictNotRecovered**, and system kernel exceptions are examples of exceptions that are not automatically displayed in the **Infolog**.\n\n### Exceptions and CLR interop\n\nYou can call .NET Framework classes and methods that reside in assemblies that are managed by the common language runtime (CLR). When a .NET Framework **System.Exception** instance is thrown, your code can **catch** it by referencing **Exception::CLRError**. Your code can obtain a reference to the **System.Exception** instance by calling the **CLRInterop::getLastException** method.\n\n### Ensure exceptions are displayed\n\nExceptions of type **Exception::CLRError** are not displayed in the **Infolog**. These exceptions are not issued by a call to a method such as **Global::error**. In your catch block, your code can call **Global::error** to report the specific exception.\n\n## Global class methods\nThis section describes some **Global** class methods in more detail. These class methods include the **Global::error** method, the **Global::info** method, and the **Global::exceptionTextFallThrough** method.\n\n### Global::error method\n\nThe error method is declared as follows:\n\n    server client static Exception error\n        (SysInfoLogStr txt,\n        URL helpURL = '',\n        SysInfoAction _sysInfoAction = null)\n\nThe return type is the **Exception::Error** enum value. The **error** method does not throw an exception. It only provides an enum value that could be used in a **throw** statement. The **throw** statement throws the exception. Only the first parameter is required. The parameters are described in the following list:\n\n-   The **SysInfoLogStr** txt is a **str** of the message text. This can also be a label reference, such as **strFmt(\"@SYS12345\", strThingName)**.\n-   The **URL** helpUrl is a reference to the location of a Help topic in the Application Explorer. For example:**\"KernDoc:\\\\\\\\\\\\\\\\Functions\\\\\\\\substr\"**This parameter value is ignored if \\_sysInfoAction is supplied.\n-   The **SysInfoAction** \\_sysInfoAction is an instance of a class that extends the **SysInfoAction** class. The method overrides we recommend for the child class are the **description** method, the **run** method, the **pack** method, and the **unpack** method.\n\n### Global::info method\n\nThe **Global::info** method is routinely used to display text in the **Infolog**. It is often written in programs as **info(\"My message.\");**. Even though the **info** method returns an **Exception::Info** enumeration value it would be rare to want to throw an **Exception::Info** because nothing unexpected has occurred.\n\n### Global::exceptionTextFallThrough method\n\nOccasionally you want to do nothing inside your **catch** block. The X++ compiler issues a warning when you have an empty **catch** block. You should avoid this warning by calling the **Global::exceptionTextFallThrough** method in the **catch** block. The method does nothing, but it satisfies the compiler.\n\n## Exceptions inside transactions\nIf an exception is thrown inside a transaction, the transaction is automatically aborted (a **ttsAbort** operation occurs). This applies both for exceptions thrown manually and for exceptions thrown by the system. When an exception is thrown inside a **ttsBegin** - **ttsCommit** transaction block, no **catch** statement inside that transaction block can process the exception. Instead, the innermost **catch** statements that are outside the transaction block are the first **catch** statements to be tested.\n\n## Exceptionhandling code examples\n### Display exceptions in the Infolog\n\nThis code example displays exceptions in the Infolog.\n\n    // This example shows that a direct throw of Exception::Error does not\n    // display a message in the Infolog. This is why we recommend the \n    // Global::error method. \n    static void TryCatchThrowError1Job(Args _args)\n    {\n    /***\n      The 'throw' does not directly add a message to the Infolog.\n      The exception is caught.\n    ***/\n        \n        try\n        {\n            info(\"In the 'try' block. (j1)\");\n            throw Exception::Error;\n        }\n        catch (Exception::Error)\n        {\n            info(\"Caught 'Exception::Error'.\");\n        }\n    /**********  Actual Infolog output\n    Message (03:43:45 pm)\n    In the 'try' block. (j1)\n    Caught 'Exception::Error'.\n    **********/\n    }\n\n### error method to write exception information to the Infolog\n\nThis code example uses the **error** method to write exception information to the Infolog.\n\n    // This example shows that the use of the Global::error method \n    // is a reliable way to display exceptions in the Infolog. \n    static void TryCatchGlobalError2Job(Args _args)\n    {\n        /***\n        The 'Global::error()' does directly add a message to the Infolog.\n        The exception is caught.\n        ***/\n        try\n        {\n            info(\"In the 'try' block. (j2)\");\n            throw Global::error(\"Written to the Infolog.\");\n        }\n        catch (Exception::Error)\n        {\n            info(\"Caught 'Exception::Error'.\");\n        }\n    /***  Infolog output\n    Message (03:51:44 pm)\n    In the 'try' block. (j2)\n    Written to the Infolog.\n    Caught 'Exception::Error'.\n    ***/\n    }\n\n### Handle a CLRError\n\nThis code example handles a **CLRError.**\n\n    // This example shows that a CLRError exception is not displayed \n    // in the Infolog unless you catch the exception and manually\n    // call the info method. The use of the CLRInterop::getLastException\n    // method is also demonstrated. \n    static void TryCatchCauseCLRError3Job(Args _args)\n    {\n        /***\n        The 'netString.Substring(-2)' causes a CLRError,\n        but it does not directly add a message to the Infolog.\n        The exception is caught.\n        ***/\n        System.String netString = \"Net string.\";\n        System.Exception netExcepn;\n        try\n        {\n            info(\"In the 'try' block. (j3)\");\n            netString.Substring(-2); // Causes CLR Exception.\n        }\n        catch (Exception::Error)\n        {\n            info(\"Caught 'Exception::Error'.\");\n        }\n        catch (Exception::CLRError)\n        {\n            info(\"Caught 'Exception::CLRError'.\");\n            netExcepn = CLRInterop::getLastException();\n            info(netExcepn.ToString());\n        }\n    /**********  Actual Infolog output (truncated for display)\n    Message (03:55:10 pm)\n    In the 'try' block. (j3)\n    Caught 'Exception::CLRError'.\n    System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> \n        System.ArgumentOutOfRangeException: StartIndex cannot be less than zero.\n    Parameter name: startIndex\n       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)\n       at System.String.Substring(Int32 startIndex)\n       at ClrBridgeImpl.InvokeClrInstanceMethod(ClrBridgeImpl* , ObjectWrapper* objectWrapper, Char* pszMethodName, \n       Int32 argsLength, ObjectWrapper** arguments, Boolean* argsAreByRef, Boolean* isException)\n    **********/\n    }\n\n### Use the retry statement\n\nThis code example uses the **retry** statement.\n\n    // This example shows how to use the retry statement. The print\n    // statements are included becuase retry causes earlier Infolog \n    // messages to be erased. \n    static void TryCatchRetry4Job(Args _args)\n    {\n        /***\n        Demonstration of 'retry'. The Infolog output is partially erased\n        by 'retry', but the Print window is fully displayed.\n        ***/\n        Exception excepnEnum;\n        int nCounter = 0;\n        try\n        {\n            info(\"        .\");\n            print(\"        .\");\n            info(\"In the 'try' block, [\" + int2str(nCounter) + \"]. (j4)\");\n            print(\"In the 'try' block, [\" + int2str(nCounter) + \"]. (j4)\");\n            nCounter++;\n            if (nCounter >= 3) // Prevent infinite loop.\n            {\n                info(\"---- Will now throw a warning, which is not caught.\");\n                print(\"---- Will now throw a warning, which is not caught.\");\n                throw Global::warning(\"This warning will not be caught. [\" + int2str(nCounter) + \"]\");\n            }\n            else\n            {\n                info(\"Did not throw a warning this loop. [\" + int2str(nCounter) + \"]\");\n                print(\"Did not throw a warning this loop. [\" + int2str(nCounter) + \"]\");\n            }\n            excepnEnum = Global::error(\"This error message is written to the Infolog.\");\n            throw excepnEnum;\n        }\n        catch (Exception::Error)\n        {\n            info(\"Caught 'Exception::Error'.\");\n            print(\"Caught 'Exception::Error'.\");\n            retry;\n        }\n        info(\"End of job.\");\n        print(\"End of job.\");\n    /**********  Actual Infolog output\n    Message (04:33:56 pm)\n            .\n    In the 'try' block, [2]. (j4)\n    ---- Will now throw a warning, which is not caught.\n    This warning will not be caught. [3]\n    **********/\n    }\n\n### Throw an exception inside a transaction\n\nThis code example throws an exception in a transaction block.\n\n    // This examples uses three levels of try nesting to illustrate\n    // where an exception is caught when the exception is thrown inside\n    // a ttsBegin-ttsCommit transaction block. \n    static void TryCatchTransaction5Job(Args _args)\n    {\n        /***\n        Shows an exception that is thrown inside a ttsBegin - ttsCommit\n        transaction block cannot be caught inside that block.\n        ***/\n        try\n        {\n            try\n            {\n                ttsbegin;\n                try\n                {\n                    throw error(\"Throwing exception inside transaction.\");\n                }\n                catch (Exception::Error)\n                {\n                    info(\"Catch_1: Unexpected, caught in 'catch' inside the transaction block.\");\n                }\n                ttscommit;\n            }\n            catch (Exception::Error)\n            {\n                info(\"Catch_2: Expected, caught in the innermost 'catch' that is outside of the transaction block.\");\n            }\n        }\n        catch (Exception::Error)\n        {\n            info(\"Catch_3: Unexpected, caught in 'catch' far outside the transaction block.\");\n        }\n        info(\"End of job.\");\n    /**********  Actual Infolog output\n    Message (04:12:34 pm)\n    Throwing exception inside transaction.\n    Catch_2: Expected, caught in the innermost 'catch' that is outside of the transaction block.\n    End of job.\n    **********/\n    }\n\n### Use Global::error with a SysInfoAction parameter\n\nWhen your code throws an exception, your code can write messages to the **Infolog** window. You can make those **Infolog** messages more helpful by using the **SysInfoAction** class. In the following example, a **SysInfoAction** parameter is passed in to the **Global::error** method. The **error** method writes the message to the **Infolog**. When the user double-clicks the **Infolog** message, the **SysInfoAction.run** method is run. You can write code in the **run** method that helps to diagnose or fix the problem that caused the exception. The object that is passed in to the **Global::error** method is constructed from a class that you write that extends **SysInfoAction**. The following code sample is shown in two parts. The first part shows a job that calls the **Global::error** method, and then throws the returned value. An instance of the **SysInfoAction\\_PrintWindow\\_Demo** class is passed into the **error** method. The second part shows the **SysInfoAction\\_PrintWindow\\_Demo** class.\n\n#### Part 1: Call Global::error\n\n    static void Job_SysInfoAction(Args _args)\n    {\n        try\n        {\n            throw Global::error\n                (\"Click me to make the Print window display.\"\n                ,\"\"\n                ,new SysInfoAction_PrintWindow_Demo()\n                );\n        }\n        catch\n        {\n            warning(\"Issuing a warning from the catch block.\");\n        }\n    }\n\n#### Part 2: The SysInfoAction\\_PrintWindow\\_Demo class\n\n    public class SysInfoAction_PrintWindow_Demo extends SysInfoAction\n    {\n        str m_sGreeting; // In classDeclaration.\n        public str description()\n        {\n            return \"Starts the Print Window for demonstration.\";\n        }\n\n        public void run()\n        {\n            print(\"This appears in the Print window.\");\n            print(m_sGreeting);\n        \n            /*********** Actual Infolog output\n            Message (03:19:28 pm)\n            Click me to make the Print window display.\n            Issuing a warning from the catch block.\n            ***************/\n        }\n\n        public container pack()\n        {\n            return [\"Packed greeting.\"]; // Literal container.\n        }\n\n        public boolean unpack(container packedClass, Object object = null)\n        {\n            [m_sGreeting] = packedClass;\n            return true;\n        }\n    }\n\n## List of exceptions\nThe exception literals shown in the following table are the values of the **Exception** enumeration.\n\n| Exception literal                     | Description                                                                                                                                                                             |\n|---------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Break**                             | Indicates that the user has pressed BREAK or CTRL+C.                                                                                                                                    |\n| **CLRError**                          | Indicates that an error has occurred during the use of the common language runtime (CLR) functionality.                                                                                 |\n| **CodeAccessSecurity**                | Indicates that an error has occurred during the use of the **CodeAccessPermission.demand** method.                                                                                      |\n| **DDEerror**                          | Indicates that an error occurred in the use of the **DDE** system class.                                                                                                                |\n| **Deadlock**                          | Indicates that there is a database deadlock because several transactions are waiting for each other.                                                                                    |\n| **DuplicateKeyException**             | Indicates that an error has occurred in a transaction that is using Optimistic Concurrency Control. The transaction can be retried (use a **retry** statement in the **catch** block).  |\n| **DuplicateKeyExceptionNotRecovered** | Indicates that an error has occurred in a transaction that is using Optimistic Concurrency Control. The code will not be retried. This exception cannot be caught inside a transaction. |\n| **Error**                             | Indicates that a fatal error has occurred. The transaction has been stopped.                                                                                                            |\n| **Info**                              | Holds a message for the user.Do not **throw** an **info** exception.                                                                                                                    |\n| **Internal**                          | Indicates an internal error in the development system.                                                                                                                                  |\n| **Numeric**                           | Indicates that an error has occurred during the use of the **str2int**, **str2int64**, or **str2num** functions.                                                                        |\n| **Sequence**                          |                                                                                                                                                                                         |\n| **UpdateConflict**                    | Indicates that an error has occurred in a transaction that is using Optimistic Concurrency Control. The transaction can be retried (use a **retry** statement in the **catch** block).  |\n| **UpdateConflictNotRecovered**        | Indicates that an error has occurred in a transaction that is using Optimistic Concurrency Control. The code will not be retried. This exception cannot be caught within a transaction. |\n| **Warning**                           | Indicates that something exceptional has happened. The user might have to take action, but the event is not fatal. Do not throw a **warning** exception.                                |\n\n## changeSite, pause, and window statements\nThe **changeSite**, **pause**, and **window** keywords are no longer a part of the X++ language. Using these keywords will cause compilation errors.\n\n"}