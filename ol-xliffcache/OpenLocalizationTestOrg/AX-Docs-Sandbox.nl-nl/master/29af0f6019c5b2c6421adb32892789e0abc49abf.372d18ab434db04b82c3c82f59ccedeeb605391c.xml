{"content":"---\n# required metadata\n\ntitle: Advanced filtering and query syntax\ndescription: This article describes the filtering and query options that are available when you use the \"matches\" operator in the Advanced filter/sort dialog.\nauthor: jasongre\nmanager: AnnBe\nms.date: 04/04/2017\nms.topic: business-process\nms.prod: \nms.service: dynamics-ax-applications\nms.technology: \n\n# optional metadata\n\nms.search.form: SysQueryForm\n# ROBOTS: \naudience: Application User\n# ms.devlang: \n# ms.reviewer: 71\nms.search.scope: AX 7.0.0, Operations, Core\n# ms.tgt_pltfrm: \nms.custom: 3811\nms.assetid: b4969b30-2fe1-4a3c-bbea-725dc37c8b60\nms.search.region: Global\n# ms.search.industry: \nms.author: jasongre\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# Advanced filtering and query syntax\n\n[!include[banner](../includes/banner.md)]\n\n\nThis article describes the filtering and query options that are available when you use the \"matches\" operator in the Advanced filter/sort dialog.\n\nAdvanced query syntax\n---------------------\n\n<table>\n<colgroup>\n<col width=\"25%\" />\n<col width=\"25%\" />\n<col width=\"25%\" />\n<col width=\"25%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Syntax</th>\n<th>Character description</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><em>value</em></td>\n<td>Equal to the value that is entered</td>\n<td>Type the value to find.</td>\n<td><strong>Smith</strong> finds &quot;Smith&quot;.</td>\n</tr>\n<tr class=\"even\">\n<td>!<em>value</em> (exclamation point)</td>\n<td>Not equal to the value that is entered</td>\n<td>Type an exclamation point and then the value to exclude.</td>\n<td><strong>!Smith</strong> finds all values except &quot;Smith&quot;.</td>\n</tr>\n<tr class=\"odd\">\n<td><em>from-value</em>..<em>to-value</em> (double period)</td>\n<td>Between the two values that are separated by double periods</td>\n<td>Type the from-value, then two periods, and then the to-value.</td>\n<td><strong>1..10</strong> finds all values from 1 through 10. However, in a string field, <strong>A..C</strong> finds all values that start with &quot;A&quot; and &quot;B&quot;, and values that are exactly equal to &quot;C&quot;. For example, this query won't find &quot;Ca&quot;. To find all values from &quot;A*&quot; through &quot;C*&quot;, type <strong>A..D</strong>.</td>\n</tr>\n<tr class=\"even\">\n<td>..<em>value</em> (double period)</td>\n<td>Less than or equal to the value that is entered</td>\n<td>Type two periods and then the value.</td>\n<td><strong>..1000</strong> finds any number that is less than or equal to 1000, such as &quot;100&quot;, &quot;999.95&quot;, and &quot;1,000&quot;.</td>\n</tr>\n<tr class=\"odd\">\n<td><em>value</em>.. (double period)</td>\n<td>Greater than or equal to the value that is entered</td>\n<td>Type the value and then two periods.</td>\n<td><strong>1000..</strong> finds any number that is greater than or equal to 1000, such as &quot;1,000&quot;, &quot;1,000.01&quot;, and &quot;1,000,000&quot;.</td>\n</tr>\n<tr class=\"even\">\n<td>&gt;<em>value</em> (greater than sign)</td>\n<td>Greater than the value that is entered</td>\n<td>Type a greater than sign (<strong>&gt;</strong>) and then the value.</td>\n<td><strong>&gt;1000</strong> finds any number that is greater than 1000, such as &quot;1000.01&quot;, &quot;20,000&quot;, and &quot;1,000,000&quot;.</td>\n</tr>\n<tr class=\"odd\">\n<td>&lt;<em>value</em> (less than sign)</td>\n<td>Less than the value that is entered</td>\n<td>Type a less than sign (<strong>&lt;</strong>) and then the value.</td>\n<td><strong>&lt;1000</strong> finds any number that is less than 1000, such as &quot;999.99&quot;, &quot;1&quot;, and &quot;-200&quot;.</td>\n</tr>\n<tr class=\"even\">\n<td><em>value</em>* (asterisk)</td>\n<td>Starting from the value that is entered</td>\n<td>Type the starting value and then an asterisk (<strong>*</strong>).</td>\n<td><strong>S*</strong> finds any string that starts with &quot;S&quot;, such as &quot;Stockholm&quot;, &quot;Sydney&quot;, and &quot;San Francisco&quot;.</td>\n</tr>\n<tr class=\"odd\">\n<td>*<em>value</em> (asterisk)</td>\n<td>Ending with the value that is entered</td>\n<td>Type an asterisk and then the ending value.</td>\n<td><strong>*east</strong> finds any string that ends with &quot;east&quot;, such as &quot;Northeast&quot; and &quot;Southeast&quot;.</td>\n</tr>\n<tr class=\"even\">\n<td>*<em>value</em>* (asterisk)</td>\n<td>Containing the value that is entered</td>\n<td>Type an asterisk, then a value, and then another asterisk.</td>\n<td><strong>*th*</strong> finds any string that contains &quot;th&quot;, such as &quot;Northeast&quot; and &quot;Southeast&quot;.</td>\n</tr>\n<tr class=\"odd\">\n<td>? (question mark)</td>\n<td>Having one or more unknown characters</td>\n<td>Type a question mark at the position of the unknown character in the value.</td>\n<td><strong>Sm?th</strong> finds &quot;Smith&quot; and &quot;Smyth&quot;.</td>\n</tr>\n<tr class=\"even\">\n<td><em>value</em>,<em>value</em> (comma)</td>\n<td>Matching the values that are separated by commas</td>\n<td>Type all your criteria, and separate them by using commas.</td>\n<td><strong>A, D, F, G</strong> finds exactly &quot;A&quot;, &quot;D&quot;, &quot;F&quot;, and &quot;G&quot;. <strong>10, 20, 30, 100</strong> finds exactly &quot;10, 20, 30, 100&quot;.</td>\n</tr>\n<tr class=\"odd\">\n<td>(<span class=\"code\">SQL statement</span>) (SQL statement between parentheses)</td>\n<td>Matching a defined query</td>\n<td>Type a query as an SQL statement between parentheses.</td>\n<td><strong><span class=\"code\">(data source.Fieldname != &quot;A&quot;)</span></strong></td>\n</tr>\n<tr class=\"even\">\n<td>T</td>\n<td>Today's date</td>\n<td>Type <strong>T</strong>.</td>\n<td><strong>T</strong> matches today's date.</td>\n</tr>\n<tr class=\"odd\">\n<td>(methodName(parameters)) (<strong>SysQueryRangeUtil</strong> method between parentheses)</td>\n<td>Matching the value or range of values that are specified by the parameters of the <strong>SysQueryRangeUtil</strong> method</td>\n<td>Type a <strong>SysQueryRangeUtil</strong> method that has parameters that specify the value or range of values.</td>\n<td><ol>\n<li>Click <strong>Accounts receivable</strong> &gt; <strong>Invoices</strong> &gt; <strong>Open customer invoices</strong>.</li>\n<li>Press Ctrl+Shift+F3 to open the <strong>Inquiry</strong> page.</li>\n<li>On the <strong>Range</strong> tab, click <strong>Add</strong>.</li>\n<li>In the <strong>Table</strong> field, select <strong>Open customer transactions</strong>.</li>\n<li>In the <strong>Field</strong> field, select <strong>Due date</strong>.</li>\n<li>In the <strong>Criteria</strong> field, enter <strong>(yearRange(-2,0))</strong>.</li>\n<li>Click <strong>OK</strong>. The list page is updated and lists the invoices that match the criterion that you entered. For this example, invoices that were due in the previous two years are listed.</li>\n</ol>\nSee the table in the next section for additional details about <strong>SysQueryRangeUtil</strong> date methods, and several examples.</td>\n</tr>\n</tbody>\n</table>\n\n## Advanced date queries that use SysQueryRangeUtil methods\n<table>\n<colgroup>\n<col width=\"33%\" />\n<col width=\"33%\" />\n<col width=\"33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Method</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Day (_relativeDays=0)</td>\n<td>Find a date relative to the session date. Positive values indicate future dates, and negative values indicate past dates.</td>\n<td><ul>\n<li><strong>Tomorrow</strong> – Enter <strong>(Day(1))</strong>.</li>\n<li><strong>Today</strong> – Enter <strong>(Day(0))</strong>.</li>\n<li><strong>Yesterday</strong> – Enter <strong>(Day(-1))</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"even\">\n<td>DayRange (_relativeDaysFrom=0, _relativeDaysTo=0)</td>\n<td>Find a range of dates relative to the session date. Positive values indicate future dates, and negative values indicate past dates.</td>\n<td><ul>\n<li><strong>Last 30 days</strong> – Enter <strong>(DayRange(-30,0))</strong>.</li>\n<li><strong>Previous 30 days and next 30 days</strong> – Enter <strong>(DayRange(-30,30))</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"odd\">\n<td>GreaterThanDate (_relativeDays=0) GreaterThanUtcDate (_relativeDays=0)</td>\n<td>Find all dates after the specified relative date.</td>\n<td><ul>\n<li><strong>More than 30 days from now</strong> – Enter <strong>(GreaterThanDate(30))</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"even\">\n<td>GreaterThanUtcNow ()</td>\n<td>Find all date/time entries after the current time.</td>\n<td><ul>\n<li><strong>All future date/times</strong> – Enter <strong>(GreaterThanUtcNow())</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"odd\">\n<td>LessThanDate (_relativeDays=0) LessThanUtcDate (_relativeDays=0)</td>\n<td>Find all dates before the specified relative date.</td>\n<td><ul>\n<li><strong>Less than seven days from now</strong> – Enter <strong>(LessThanDate(7))</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"even\">\n<td>LessThanUtcNow ()</td>\n<td>Find all date/time entries before the current time.</td>\n<td><ul>\n<li><strong>All past date/times</strong> – Enter <strong>(LessThanUtcNow())</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"odd\">\n<td>MonthRange (_relativeFrom=0, _relativeTo=0)</td>\n<td>Find a range of dates, based on months relative to the current month.</td>\n<td><ul>\n<li><strong>Previous two months</strong> – Enter <strong>(MonthRange(-2,0))</strong>.</li>\n<li><strong>Next three months</strong> – Enter <strong>(MonthRange(0,3))</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"even\">\n<td>YearRange (_relativeFrom=0, _relativeTo=0)</td>\n<td>Find a range of dates, based on years relative to the current year.</td>\n<td><ul>\n<li><strong>Next year</strong> – Enter <strong>(YearRange(0, 1))</strong>.</li>\n<li><strong>Previous year</strong> – Enter <strong>(YearRange(-1,0))</strong>.</li>\n</ul></td>\n</tr>\n</tbody>\n</table>\n\n\n\n\n\n","nodes":[{"content":"Advanced filtering and query syntax","nodes":[{"pos":[0,35],"content":"Advanced filtering and query syntax","nodes":[{"content":"Advanced filtering and query syntax","pos":[0,35]}]}],"pos":[31,67],"yaml":true},{"content":"This article describes the filtering and query options that are available when you use the \"matches\" operator in the Advanced filter/sort dialog.","nodes":[{"pos":[0,145],"content":"This article describes the filtering and query options that are available when you use the \"matches\" operator in the Advanced filter/sort dialog.","nodes":[{"content":"This article describes the filtering and query options that are available when you use the \"matches\" operator in the Advanced filter/sort dialog.","pos":[0,145]}]}],"pos":[80,226],"yaml":true},{"pos":[758,793],"content":"Advanced filtering and query syntax","linkify":"Advanced filtering and query syntax","nodes":[{"content":"Advanced filtering and query syntax","pos":[0,35]}]},{"content":"This article describes the filtering and query options that are available when you use the \"matches\" operator in the Advanced filter/sort dialog.","pos":[839,984]},{"pos":[986,1007],"content":"Advanced query syntax","linkify":"Advanced query syntax","nodes":[{"content":"Advanced query syntax","pos":[0,21]}]},{"content":"Syntax","pos":[1174,1180]},{"content":"Character description","pos":[1190,1211]},{"content":"Description","pos":[1221,1232]},{"content":"Example","pos":[1242,1249]},{"content":"<bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept>","pos":[1299,1313],"source":"<em>value</em>"},{"content":"Equal to the value that is entered","pos":[1323,1357]},{"content":"Type the value to find.","pos":[1367,1390]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Smith<ept id=\"p1\">&lt;/strong&gt;</ept> finds <ph id=\"ph1\">&amp;quot;</ph>Smith<ph id=\"ph2\">&amp;quot;</ph>.","pos":[1400,1447],"source":"<strong>Smith</strong> finds &quot;Smith&quot;."},{"content":"!<bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept> (exclamation point)","pos":[1481,1516],"source":"!<em>value</em> (exclamation point)"},{"content":"Not equal to the value that is entered","pos":[1526,1564]},{"content":"Type an exclamation point and then the value to exclude.","pos":[1574,1630]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>!Smith<ept id=\"p1\">&lt;/strong&gt;</ept> finds all values except <ph id=\"ph1\">&amp;quot;</ph>Smith<ph id=\"ph2\">&amp;quot;</ph>.","pos":[1640,1706],"source":"<strong>!Smith</strong> finds all values except &quot;Smith&quot;."},{"content":"<bpt id=\"p1\">&lt;em&gt;</bpt>from-value<ept id=\"p1\">&lt;/em&gt;</ept>..<bpt id=\"p2\">&lt;em&gt;</bpt>to-value<ept id=\"p2\">&lt;/em&gt;</ept> (double period)","pos":[1739,1793],"source":"<em>from-value</em>..<em>to-value</em> (double period)"},{"content":"Between the two values that are separated by double periods","pos":[1803,1862]},{"content":"Type the from-value, then two periods, and then the to-value.","pos":[1872,1933]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>1..10<ept id=\"p1\">&lt;/strong&gt;</ept> finds all values from 1 through 10.","pos":[1943,2001],"source":"<strong>1..10</strong> finds all values from 1 through 10."},{"content":"However, in a string field, <bpt id=\"p1\">&lt;strong&gt;</bpt>A..C<ept id=\"p1\">&lt;/strong&gt;</ept> finds all values that start with <ph id=\"ph1\">&amp;quot;</ph>A<ph id=\"ph2\">&amp;quot;</ph> and <ph id=\"ph3\">&amp;quot;</ph>B<ph id=\"ph4\">&amp;quot;</ph>, and values that are exactly equal to <ph id=\"ph5\">&amp;quot;</ph>C<ph id=\"ph6\">&amp;quot;</ph>.","pos":[2002,2169],"source":" However, in a string field, <strong>A..C</strong> finds all values that start with &quot;A&quot; and &quot;B&quot;, and values that are exactly equal to &quot;C&quot;."},{"content":"For example, this query won't find <ph id=\"ph1\">&amp;quot;</ph>Ca<ph id=\"ph2\">&amp;quot;</ph>.","pos":[2170,2220],"source":" For example, this query won't find &quot;Ca&quot;."},{"content":"To find all values from <ph id=\"ph1\">&amp;quot;</ph>A<bpt id=\"p1\">*</bpt><ph id=\"ph2\">&amp;quot;</ph> through <ph id=\"ph3\">&amp;quot;</ph>C<ept id=\"p1\">*</ept><ph id=\"ph4\">&amp;quot;</ph>, type <bpt id=\"p2\">&lt;strong&gt;</bpt>A..D<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[2221,2311],"source":" To find all values from &quot;A*&quot; through &quot;C*&quot;, type <strong>A..D</strong>."},{"content":"..<bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept> (double period)","pos":[2345,2377],"source":"..<em>value</em> (double period)"},{"content":"Less than or equal to the value that is entered","pos":[2387,2434]},{"content":"Type two periods and then the value.","pos":[2444,2480]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>..1000<ept id=\"p1\">&lt;/strong&gt;</ept> finds any number that is less than or equal to 1000, such as <ph id=\"ph1\">&amp;quot;</ph>100<ph id=\"ph2\">&amp;quot;</ph>, <ph id=\"ph3\">&amp;quot;</ph>999.95<ph id=\"ph4\">&amp;quot;</ph>, and <ph id=\"ph5\">&amp;quot;</ph>1,000<ph id=\"ph6\">&amp;quot;</ph>.","pos":[2490,2634],"source":"<strong>..1000</strong> finds any number that is less than or equal to 1000, such as &quot;100&quot;, &quot;999.95&quot;, and &quot;1,000&quot;."},{"content":"<bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept>..","pos":[2667,2683],"source":"<em>value</em>.."},{"content":"(double period)","pos":[2684,2699]},{"content":"Greater than or equal to the value that is entered","pos":[2709,2759]},{"content":"Type the value and then two periods.","pos":[2769,2805]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>1000..<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[2815,2838],"source":"<strong>1000..</strong>"},{"content":"finds any number that is greater than or equal to 1000, such as <ph id=\"ph1\">&amp;quot;</ph>1,000<ph id=\"ph2\">&amp;quot;</ph>, <ph id=\"ph3\">&amp;quot;</ph>1,000.01<ph id=\"ph4\">&amp;quot;</ph>, and <ph id=\"ph5\">&amp;quot;</ph>1,000,000<ph id=\"ph6\">&amp;quot;</ph>.","pos":[2839,2970],"source":" finds any number that is greater than or equal to 1000, such as &quot;1,000&quot;, &quot;1,000.01&quot;, and &quot;1,000,000&quot;."},{"content":"<ph id=\"ph1\">&amp;gt;</ph><bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept> (greater than sign)","pos":[3004,3042],"source":"&gt;<em>value</em> (greater than sign)"},{"content":"Greater than the value that is entered","pos":[3052,3090]},{"content":"Type a greater than sign (<bpt id=\"p1\">&lt;strong&gt;</bpt><ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">&lt;/strong&gt;</ept>) and then the value.","pos":[3100,3168],"source":"Type a greater than sign (<strong>&gt;</strong>) and then the value."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt><ph id=\"ph1\">&amp;gt;</ph>1000<ept id=\"p1\">&lt;/strong&gt;</ept> finds any number that is greater than 1000, such as <ph id=\"ph2\">&amp;quot;</ph>1000.01<ph id=\"ph3\">&amp;quot;</ph>, <ph id=\"ph4\">&amp;quot;</ph>20,000<ph id=\"ph5\">&amp;quot;</ph>, and <ph id=\"ph6\">&amp;quot;</ph>1,000,000<ph id=\"ph7\">&amp;quot;</ph>.","pos":[3178,3323],"source":"<strong>&gt;1000</strong> finds any number that is greater than 1000, such as &quot;1000.01&quot;, &quot;20,000&quot;, and &quot;1,000,000&quot;."},{"content":"<ph id=\"ph1\">&amp;lt;</ph><bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept> (less than sign)","pos":[3356,3391],"source":"&lt;<em>value</em> (less than sign)"},{"content":"Less than the value that is entered","pos":[3401,3436]},{"content":"Type a less than sign (<bpt id=\"p1\">&lt;strong&gt;</bpt><ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">&lt;/strong&gt;</ept>) and then the value.","pos":[3446,3511],"source":"Type a less than sign (<strong>&lt;</strong>) and then the value."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt><ph id=\"ph1\">&amp;lt;</ph>1000<ept id=\"p1\">&lt;/strong&gt;</ept> finds any number that is less than 1000, such as <ph id=\"ph2\">&amp;quot;</ph>999.99<ph id=\"ph3\">&amp;quot;</ph>, <ph id=\"ph4\">&amp;quot;</ph>1<ph id=\"ph5\">&amp;quot;</ph>, and <ph id=\"ph6\">&amp;quot;</ph>-200<ph id=\"ph7\">&amp;quot;</ph>.","pos":[3521,3652],"source":"<strong>&lt;1000</strong> finds any number that is less than 1000, such as &quot;999.99&quot;, &quot;1&quot;, and &quot;-200&quot;."},{"content":"<bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept><ph id=\"ph1\">*</ph> (asterisk)","pos":[3686,3712],"source":"<em>value</em>* (asterisk)"},{"content":"Starting from the value that is entered","pos":[3722,3761]},{"content":"Type the starting value and then an asterisk (<bpt id=\"p1\">&lt;strong&gt;</bpt><ept id=\"p1\">*&lt;/strong&gt;</ept>).","pos":[3771,3837],"source":"Type the starting value and then an asterisk (<strong>*</strong>)."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>S*<ept id=\"p1\">&lt;/strong&gt;</ept> finds any string that starts with <ph id=\"ph1\">&amp;quot;</ph>S<ph id=\"ph2\">&amp;quot;</ph>, such as <ph id=\"ph3\">&amp;quot;</ph>Stockholm<ph id=\"ph4\">&amp;quot;</ph>, <ph id=\"ph5\">&amp;quot;</ph>Sydney<ph id=\"ph6\">&amp;quot;</ph>, and <ph id=\"ph7\">&amp;quot;</ph>San Francisco<ph id=\"ph8\">&amp;quot;</ph>.","pos":[3847,3997],"source":"<strong>S*</strong> finds any string that starts with &quot;S&quot;, such as &quot;Stockholm&quot;, &quot;Sydney&quot;, and &quot;San Francisco&quot;."},{"content":"<bpt id=\"p1\">*&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept> (asterisk)","pos":[4030,4056],"source":"*<em>value</em> (asterisk)"},{"content":"Ending with the value that is entered","pos":[4066,4103]},{"content":"Type an asterisk and then the ending value.","pos":[4113,4156]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>*east<ept id=\"p1\">&lt;/strong&gt;</ept> finds any string that ends with <ph id=\"ph1\">&amp;quot;</ph>east<ph id=\"ph2\">&amp;quot;</ph>, such as <ph id=\"ph3\">&amp;quot;</ph>Northeast<ph id=\"ph4\">&amp;quot;</ph> and <ph id=\"ph5\">&amp;quot;</ph>Southeast<ph id=\"ph6\">&amp;quot;</ph>.","pos":[4166,4295],"source":"<strong>*east</strong> finds any string that ends with &quot;east&quot;, such as &quot;Northeast&quot; and &quot;Southeast&quot;."},{"content":"<bpt id=\"p1\">*&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept><ph id=\"ph1\">*</ph> (asterisk)","pos":[4329,4356],"source":"*<em>value</em>* (asterisk)"},{"content":"Containing the value that is entered","pos":[4366,4402]},{"content":"Type an asterisk, then a value, and then another asterisk.","pos":[4412,4470]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt><bpt id=\"p2\">*</bpt>th<ept id=\"p2\">*</ept><ept id=\"p1\">&lt;/strong&gt;</ept> finds any string that contains <ph id=\"ph1\">&amp;quot;</ph>th<ph id=\"ph2\">&amp;quot;</ph>, such as <ph id=\"ph3\">&amp;quot;</ph>Northeast<ph id=\"ph4\">&amp;quot;</ph> and <ph id=\"ph5\">&amp;quot;</ph>Southeast<ph id=\"ph6\">&amp;quot;</ph>.","pos":[4480,4605],"source":"<strong>*th*</strong> finds any string that contains &quot;th&quot;, such as &quot;Northeast&quot; and &quot;Southeast&quot;."},{"content":"?","pos":[4638,4639]},{"content":"(question mark)","pos":[4640,4655]},{"content":"Having one or more unknown characters","pos":[4665,4702]},{"content":"Type a question mark at the position of the unknown character in the value.","pos":[4712,4787]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Sm?th<ept id=\"p1\">&lt;/strong&gt;</ept> finds <ph id=\"ph1\">&amp;quot;</ph>Smith<ph id=\"ph2\">&amp;quot;</ph> and <ph id=\"ph3\">&amp;quot;</ph>Smyth<ph id=\"ph4\">&amp;quot;</ph>.","pos":[4797,4866],"source":"<strong>Sm?th</strong> finds &quot;Smith&quot; and &quot;Smyth&quot;."},{"content":"<bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept>,<bpt id=\"p2\">&lt;em&gt;</bpt>value<ept id=\"p2\">&lt;/em&gt;</ept> (comma)","pos":[4900,4937],"source":"<em>value</em>,<em>value</em> (comma)"},{"content":"Matching the values that are separated by commas","pos":[4947,4995]},{"content":"Type all your criteria, and separate them by using commas.","pos":[5005,5063]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>A, D, F, G<ept id=\"p1\">&lt;/strong&gt;</ept> finds exactly <ph id=\"ph1\">&amp;quot;</ph>A<ph id=\"ph2\">&amp;quot;</ph>, <ph id=\"ph3\">&amp;quot;</ph>D<ph id=\"ph4\">&amp;quot;</ph>, <ph id=\"ph5\">&amp;quot;</ph>F<ph id=\"ph6\">&amp;quot;</ph>, and <ph id=\"ph7\">&amp;quot;</ph>G<ph id=\"ph8\">&amp;quot;</ph>.","pos":[5073,5178],"source":"<strong>A, D, F, G</strong> finds exactly &quot;A&quot;, &quot;D&quot;, &quot;F&quot;, and &quot;G&quot;."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>10, 20, 30, 100<ept id=\"p1\">&lt;/strong&gt;</ept> finds exactly <ph id=\"ph1\">&amp;quot;</ph>10, 20, 30, 100<ph id=\"ph2\">&amp;quot;</ph>.","pos":[5179,5254],"source":"<strong>10, 20, 30, 100</strong> finds exactly &quot;10, 20, 30, 100&quot;."},{"content":"(<bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>SQL statement<ept id=\"p1\">&lt;/span&gt;</ept>) (SQL statement between parentheses)","pos":[5287,5364],"source":"(<span class=\"code\">SQL statement</span>) (SQL statement between parentheses)"},{"content":"Matching a defined query","pos":[5374,5398]},{"content":"Type a query as an SQL statement between parentheses.","pos":[5408,5461]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt><bpt id=\"p2\">&lt;span class=\"code\"&gt;</bpt>(data source.Fieldname != <ph id=\"ph1\">&amp;quot;</ph>A<ph id=\"ph2\">&amp;quot;</ph>)<ept id=\"p2\">&lt;/span&gt;</ept><ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[5471,5554],"source":"<strong><span class=\"code\">(data source.Fieldname != &quot;A&quot;)</span></strong>"},{"content":"T","pos":[5588,5589]},{"content":"Today's date","pos":[5599,5611]},{"content":"Type <bpt id=\"p1\">&lt;strong&gt;</bpt>T<ept id=\"p1\">&lt;/strong&gt;</ept>.","pos":[5621,5645],"source":"Type <strong>T</strong>."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>T<ept id=\"p1\">&lt;/strong&gt;</ept> matches today's date.","pos":[5655,5695],"source":"<strong>T</strong> matches today's date."},{"content":"(methodName(parameters)) (<bpt id=\"p1\">&lt;strong&gt;</bpt>SysQueryRangeUtil<ept id=\"p1\">&lt;/strong&gt;</ept> method between parentheses)","pos":[5728,5816],"source":"(methodName(parameters)) (<strong>SysQueryRangeUtil</strong> method between parentheses)"},{"content":"Matching the value or range of values that are specified by the parameters of the <bpt id=\"p1\">&lt;strong&gt;</bpt>SysQueryRangeUtil<ept id=\"p1\">&lt;/strong&gt;</ept> method","pos":[5826,5949],"source":"Matching the value or range of values that are specified by the parameters of the <strong>SysQueryRangeUtil</strong> method"},{"content":"Type a <bpt id=\"p1\">&lt;strong&gt;</bpt>SysQueryRangeUtil<ept id=\"p1\">&lt;/strong&gt;</ept> method that has parameters that specify the value or range of values.","pos":[5959,6070],"source":"Type a <strong>SysQueryRangeUtil</strong> method that has parameters that specify the value or range of values."},{"content":"Click <bpt id=\"p1\">&lt;strong&gt;</bpt>Accounts receivable<ept id=\"p1\">&lt;/strong&gt;</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p2\">&lt;strong&gt;</bpt>Invoices<ept id=\"p2\">&lt;/strong&gt;</ept> <ph id=\"ph2\">&amp;gt;</ph> <bpt id=\"p3\">&lt;strong&gt;</bpt>Open customer invoices<ept id=\"p3\">&lt;/strong&gt;</ept>.","pos":[6089,6208],"source":"Click <strong>Accounts receivable</strong> &gt; <strong>Invoices</strong> &gt; <strong>Open customer invoices</strong>."},{"content":"Press Ctrl+Shift+F3 to open the <bpt id=\"p1\">&lt;strong&gt;</bpt>Inquiry<ept id=\"p1\">&lt;/strong&gt;</ept> page.","pos":[6218,6280],"source":"Press Ctrl+Shift+F3 to open the <strong>Inquiry</strong> page."},{"content":"On the <bpt id=\"p1\">&lt;strong&gt;</bpt>Range<ept id=\"p1\">&lt;/strong&gt;</ept> tab, click <bpt id=\"p2\">&lt;strong&gt;</bpt>Add<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[6290,6352],"source":"On the <strong>Range</strong> tab, click <strong>Add</strong>."},{"content":"In the <bpt id=\"p1\">&lt;strong&gt;</bpt>Table<ept id=\"p1\">&lt;/strong&gt;</ept> field, select <bpt id=\"p2\">&lt;strong&gt;</bpt>Open customer transactions<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[6362,6450],"source":"In the <strong>Table</strong> field, select <strong>Open customer transactions</strong>."},{"content":"In the <bpt id=\"p1\">&lt;strong&gt;</bpt>Field<ept id=\"p1\">&lt;/strong&gt;</ept> field, select <bpt id=\"p2\">&lt;strong&gt;</bpt>Due date<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[6460,6530],"source":"In the <strong>Field</strong> field, select <strong>Due date</strong>."},{"content":"In the <bpt id=\"p1\">&lt;strong&gt;</bpt>Criteria<ept id=\"p1\">&lt;/strong&gt;</ept> field, enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(yearRange(-2,0))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[6540,6621],"source":"In the <strong>Criteria</strong> field, enter <strong>(yearRange(-2,0))</strong>."},{"content":"Click <bpt id=\"p1\">&lt;strong&gt;</bpt>OK<ept id=\"p1\">&lt;/strong&gt;</ept>.","pos":[6631,6657],"source":"Click <strong>OK</strong>."},{"content":"The list page is updated and lists the invoices that match the criterion that you entered.","pos":[6658,6748]},{"content":"For this example, invoices that were due in the previous two years are listed.","pos":[6749,6827]},{"content":"See the table in the next section for additional details about <bpt id=\"p1\">&lt;strong&gt;</bpt>SysQueryRangeUtil<ept id=\"p1\">&lt;/strong&gt;</ept> date methods, and several examples.","pos":[6839,6972],"source":"\nSee the table in the next section for additional details about <strong>SysQueryRangeUtil</strong> date methods, and several examples."},{"pos":[7006,7062],"content":"Advanced date queries that use SysQueryRangeUtil methods","linkify":"Advanced date queries that use SysQueryRangeUtil methods","nodes":[{"content":"Advanced date queries that use SysQueryRangeUtil methods","pos":[0,56]}]},{"content":"Method","pos":[7186,7192]},{"content":"Description","pos":[7202,7213]},{"content":"Example","pos":[7223,7230]},{"content":"Day (_relativeDays=0)","pos":[7280,7301]},{"content":"Find a date relative to the session date.","pos":[7311,7352]},{"content":"Positive values indicate future dates, and negative values indicate past dates.","pos":[7353,7432]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Tomorrow<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(Day(1))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[7451,7511],"source":"<strong>Tomorrow</strong> – Enter <strong>(Day(1))</strong>."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Today<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(Day(0))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[7521,7578],"source":"<strong>Today</strong> – Enter <strong>(Day(0))</strong>."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Yesterday<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(Day(-1))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[7588,7650],"source":"<strong>Yesterday</strong> – Enter <strong>(Day(-1))</strong>."},{"content":"DayRange (_relativeDaysFrom=0, _relativeDaysTo=0)","pos":[7695,7744]},{"content":"Find a range of dates relative to the session date.","pos":[7754,7805]},{"content":"Positive values indicate future dates, and negative values indicate past dates.","pos":[7806,7885]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Last 30 days<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(DayRange(-30,0))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[7904,7977],"source":"<strong>Last 30 days</strong> – Enter <strong>(DayRange(-30,0))</strong>."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Previous 30 days and next 30 days<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(DayRange(-30,30))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[7987,8082],"source":"<strong>Previous 30 days and next 30 days</strong> – Enter <strong>(DayRange(-30,30))</strong>."},{"content":"GreaterThanDate (_relativeDays=0) GreaterThanUtcDate (_relativeDays=0)","pos":[8126,8196]},{"content":"Find all dates after the specified relative date.","pos":[8206,8255]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>More than 30 days from now<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(GreaterThanDate(30))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[8274,8365],"source":"<strong>More than 30 days from now</strong> – Enter <strong>(GreaterThanDate(30))</strong>."},{"content":"GreaterThanUtcNow ()","pos":[8410,8430]},{"content":"Find all date/time entries after the current time.","pos":[8440,8490]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>All future date/times<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(GreaterThanUtcNow())<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[8509,8595],"source":"<strong>All future date/times</strong> – Enter <strong>(GreaterThanUtcNow())</strong>."},{"content":"LessThanDate (_relativeDays=0) LessThanUtcDate (_relativeDays=0)","pos":[8639,8703]},{"content":"Find all dates before the specified relative date.","pos":[8713,8763]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Less than seven days from now<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(LessThanDate(7))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[8782,8872],"source":"<strong>Less than seven days from now</strong> – Enter <strong>(LessThanDate(7))</strong>."},{"content":"LessThanUtcNow ()","pos":[8917,8934]},{"content":"Find all date/time entries before the current time.","pos":[8944,8995]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>All past date/times<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(LessThanUtcNow())<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[9014,9095],"source":"<strong>All past date/times</strong> – Enter <strong>(LessThanUtcNow())</strong>."},{"content":"MonthRange (_relativeFrom=0, _relativeTo=0)","pos":[9139,9182]},{"content":"Find a range of dates, based on months relative to the current month.","pos":[9192,9261]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Previous two months<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(MonthRange(-2,0))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[9280,9361],"source":"<strong>Previous two months</strong> – Enter <strong>(MonthRange(-2,0))</strong>."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Next three months<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(MonthRange(0,3))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[9371,9449],"source":"<strong>Next three months</strong> – Enter <strong>(MonthRange(0,3))</strong>."},{"content":"YearRange (_relativeFrom=0, _relativeTo=0)","pos":[9494,9536]},{"content":"Find a range of dates, based on years relative to the current year.","pos":[9546,9613]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Next year<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(YearRange(0, 1))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[9632,9702],"source":"<strong>Next year</strong> – Enter <strong>(YearRange(0, 1))</strong>."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Previous year<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(YearRange(-1,0))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[9712,9786],"source":"<strong>Previous year</strong> – Enter <strong>(YearRange(-1,0))</strong>."}]}