{"nodes":[{"pos":[32,85],"content":"F Classes - FormChangeTracker to FormControlEventArgs","needQuote":true,"needEscape":true,"nodes":[{"content":"F Classes - FormChangeTracker to FormControlEventArgs","pos":[0,53]}]},{"pos":[99,172],"content":"API reference for classes from FormChangeTracker to FormControlEventArgs.","needQuote":true,"needEscape":true,"nodes":[{"content":"API reference for classes from FormChangeTracker to FormControlEventArgs.","pos":[0,73]}]},{"pos":[685,738],"content":"F Classes - FormChangeTracker to FormControlEventArgs","linkify":"F Classes - FormChangeTracker to FormControlEventArgs","nodes":[{"content":"F Classes - FormChangeTracker to FormControlEventArgs","pos":[0,53]}]},{"content":"API reference for classes from FormChangeTracker to FormControlEventArgs.","pos":[740,813]},{"pos":[815,838],"content":"Class FormChangeTracker","linkify":"Class FormChangeTracker","nodes":[{"content":"Class FormChangeTracker","pos":[0,23]}]},{"pos":[912,919],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[925,933],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[939,946],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[950,956]},{"content":"Description","pos":[999,1010]},{"content":"public void notifyUpdate(<ph id=\"ph1\">\\[</ph>str propertyName<ph id=\"ph2\">\\]</ph>)","pos":[1080,1126],"source":"public void notifyUpdate(\\[str propertyName\\])"},{"content":"private void new()","pos":[1145,1163]},{"pos":[1213,1232],"content":"Method notifyUpdate","linkify":"Method notifyUpdate","nodes":[{"content":"Method notifyUpdate","pos":[0,19]}]},{"pos":[1289,1299],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"propertyName","pos":[1301,1313]},{"pos":[1321,1331],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[1360,1385],"content":"Class FormCheckBoxControl","linkify":"Class FormCheckBoxControl","nodes":[{"content":"Class FormCheckBoxControl","pos":[0,25]}]},{"pos":[1441,1448],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1454,1462],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[1468,1475],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[1479,1485]},{"content":"Description","pos":[1589,1600]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2043,2089],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[2153,2193]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2325,2368],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[2435,2502]},{"content":"public boolean allowSysSetup()","pos":[2607,2637]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[2717,2800]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[2889,2938],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[2999,3097]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3171,3212],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[3281,3330]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[3453,3488],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[3563,3625]},{"content":"public int beginDrag(int x, int y)","pos":[3735,3769]},{"content":"Is called when the user starts to drag a form control.","pos":[3845,3899]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4017,4058],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[4299,4353]},{"content":"Retrieves the size of the control.","pos":[4409,4443]},{"content":"public boolean checked(<ph id=\"ph1\">\\[</ph>boolean check<ph id=\"ph2\">\\]</ph>)","pos":[4581,4622],"source":"public boolean checked(\\[boolean check\\])"},{"content":"Gets or sets the value of a check box.","pos":[4691,4729]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[4863,4900],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[4973,5018]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[5145,5217],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[5255,5322]},{"content":"public List configurationKeyEx()","pos":[5427,5459]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[5537,5633]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[5709,5753],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[5819,5897]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[5991,6050],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[6273,6316],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[6555,6591],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[6837,6879],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[6947,7072]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[7119,7159],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[7229,7294]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[7401,7440],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[7511,7678]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[7683,7717],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[7793,7874]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[7965,8046]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[8075,8169]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[8247,8324]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[8357,8453]},{"content":"public str dragText()","pos":[8529,8550]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[8639,8709]},{"content":"public boolean drawFocusRect(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[8811,8858],"source":"public boolean drawFocusRect(\\[boolean value\\])"},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[9093,9134],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[9203,9254]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[9375,9416],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[9485,9536]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[9657,9699],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[9767,9855]},{"content":"public boolean hasUserSetting()","pos":[9939,9970]},{"content":"Indicates whether the control has custom user settings.","pos":[10049,10104]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[10221,10263],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[10331,10370]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10503,10539],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[10613,10675]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[10785,10822],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[10895,10934]},{"content":"public str helpField()","pos":[11067,11089]},{"content":"Retrieves the Help text for the control.","pos":[11177,11217]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[11349,11383],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[11459,11563]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[11631,11672],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[11741,11804]},{"content":"public int hWnd()","pos":[11913,11930]},{"content":"Retrieves the Windows handle for the control.","pos":[12023,12068]},{"content":"public boolean isContainer()","pos":[12195,12223]},{"content":"public boolean isDisplayed()","pos":[12477,12505]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[12587,12653]},{"content":"public boolean isRestricted()","pos":[12759,12788]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[12869,12936]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[13041,13097]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[13151,13252]},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[13323,13354],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[13433,13470]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[13605,13645],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[13887,13922],"source":"public int labelBold(\\[int value\\])"},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[14169,14212],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[14451,14486],"source":"public str labelFont(\\[str value\\])"},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[14733,14772],"source":"public int labelFontSize(\\[int value\\])"},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[15015,15061],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[15297,15333],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[15579,15626],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[15861,15902],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[16143,16185],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[16425,16470],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[16707,16791]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[16989,17069]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[17271,17349]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[17553,17592],"source":"public int labelPosition(\\[int value\\])"},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[17835,17883],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[18117,18163],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[18399,18439],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[18681,18722],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[18963,18985]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[19245,19285],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[19355,19419]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[19527,19561],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[19637,19698]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[19809,19844],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[19919,19983]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[20091,20138],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[20201,20254]},{"content":"public boolean modified()","pos":[20373,20398]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[20655,20734]},{"content":"Is called when the control is double-clicked by the user.","pos":[20765,20822]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[20937,21012]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[21047,21112]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[21219,21294]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[21329,21394]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[21501,21574]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[21611,21683]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[21783,21813],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[21893,22028]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[22065,22107],"source":"public int neededPermission(\\[int value\\])"},{"content":"public boolean optionalRecordControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[22347,22402],"source":"public boolean optionalRecordControl(\\[boolean value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[22629,22668]},{"content":"public FormControl parentControl()","pos":[22911,22945]},{"content":"Retrieves the parent control for the control.","pos":[23021,23066]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[23193,23233],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[23475,23511],"source":"public int promptrect(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[23757,23814],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[23867,23926]},{"content":"public int showContextMenu(int menuHandle)","pos":[24039,24081]},{"content":"Shows the shortcut menu for the control.","pos":[24149,24189]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[24321,24364],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[24603,24641],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[24713,24840]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[24885,24929],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[25167,25198],"source":"public int style(\\[int value\\])"},{"content":"public str toolTip()","pos":[25449,25469]},{"content":"Retrieves the tooltip text for the control.","pos":[25559,25602]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[25731,25770],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[25841,25903]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[26013,26046],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[26123,26182]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[26295,26329],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[26405,26467]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[26577,26607],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[26859,26910]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[27141,27175],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[27251,27294]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[27423,27461],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[27533,27581]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[27705,27744],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[27815,27874]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[27987,28024],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[28097,28180]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[28269,28305],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[28379,28431]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[28551,28585],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[28661,28743]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[28833,28875],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[28943,28999]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[29115,29155],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[29225,29279]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[29397,29437],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[29507,29556]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[29679,29722],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[29789,29842]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[29961,29995],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[30071,30219]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[30243,30278],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[30353,30404]},{"content":"public boolean validate()","pos":[30525,30550]},{"content":"public int value(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[30807,30838],"source":"public int value(\\[int value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[31089,31149],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[31199,31260]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[31371,31425],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[31481,31540]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[31653,31699],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[31763,31824]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[31935,31973],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[32217,32258],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[32327,32397]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[32499,32540],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[32609,32647]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[32781,32816],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[32891,32953]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[33063,33099],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[33173,33211]},{"content":"public void clicked()","pos":[33345,33366]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[33627,33701],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void paste()","pos":[33909,33928]},{"content":"Pastes the contents of the clipboard into the control.","pos":[34019,34073]},{"content":"public void jumpRef()","pos":[34191,34212]},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[34473,34549],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnClicked(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[34755,34829],"source":"private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[35037,35074],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void mouseLeave()","pos":[35319,35343]},{"content":"Indicates that the mouse pointer has left the control.","pos":[35429,35483]},{"content":"public void lostFocus()","pos":[35601,35624]},{"content":"Indicates that the control has lost focus.","pos":[35711,35753]},{"content":"public void inputSearch(str searchStr)","pos":[35883,35921]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[35993,36064]},{"content":"public void undo()","pos":[36165,36183]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[36447,36522],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void prefColumnSize(int width, int height)","pos":[36729,36778]},{"content":"Specifies the preferred column width and height for the form control.","pos":[36839,36908]},{"content":"public void setFocus()","pos":[37011,37033]},{"content":"Sets the focus on the control.","pos":[37121,37151]},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[37293,37368],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[37575,37648]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[37685,37783]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[37857,37964],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void context()","pos":[38139,38160]},{"content":"Shows the shortcut menu for the control.","pos":[38249,38289]},{"content":"public void endDrag()","pos":[38421,38442]},{"content":"Is called when the user has finished dragging a form control.","pos":[38531,38592]},{"content":"public void displayControl()","pos":[38703,38731]},{"content":"Displays the control.","pos":[38813,38834]},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[38985,39058],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[39267,39344],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[39549,39618]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[39659,39759]},{"content":"public void dragLeave()","pos":[39831,39854]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[39941,40037]},{"content":"public void resetUserSetting()","pos":[40113,40143]},{"content":"Resets the user settings for the control.","pos":[40223,40264]},{"content":"public void copy()","pos":[40395,40413]},{"content":"Copies the contents of the control to the clipboard.","pos":[40505,40557]},{"content":"public void enter()","pos":[40677,40696]},{"content":"public void lookup()","pos":[40959,40979]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[41241,41313],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void cut()","pos":[41523,41540]},{"content":"Cuts the contents of the control.","pos":[41633,41666]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[41805,41881],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void gotFocus()","pos":[42087,42109]},{"content":"Indicates that the control has received focus.","pos":[42197,42243]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[42369,42446]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[42479,42549]},{"pos":[42654,42673],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[42675,42715]},{"pos":[42772,42782],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[42784,42789]},{"pos":[42798,42810],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[42812,42868]},{"pos":[42875,42882],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[42884,42963]},{"pos":[42969,42985],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[42987,43054]},{"pos":[43108,43118],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[43120,43125]},{"pos":[43134,43146],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[43148,43200]},{"pos":[43207,43214],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[43216,43342]},{"pos":[43348,43368],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[43370,43453]},{"pos":[43496,43508],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[43510,43578]},{"pos":[43584,43606],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[43608,43706]},{"pos":[43766,43776],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[43778,43783]},{"pos":[43792,43804],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[43806,43885]},{"pos":[43892,43899],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[43901,43938]},{"pos":[43944,43966],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[43968,44017]},{"pos":[44069,44079],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[44081,44086]},{"pos":[44095,44107],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[44109,44153]},{"pos":[44160,44167],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[44169,44237]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[44243,44313]},{"content":"The second byte contains a value for green.","pos":[44318,44361]},{"content":"The third byte contains a value for blue.","pos":[44366,44407]},{"content":"The high-order byte must be zero.","pos":[44412,44445]},{"content":"The maximum value for a single byte is 255.","pos":[44450,44493]},{"pos":[44499,44515],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[44517,44579]},{"pos":[44625,44635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[44637,44642]},{"pos":[44651,44663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[44665,44726]},{"pos":[44732,44748],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[44750,44804]},{"pos":[44851,44861],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[44863,44864]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[44867,44937]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[44938,45005]},{"content":"y","pos":[45017,45018]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[45021,45091]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[45092,45159]},{"pos":[45166,45178],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[45180,45219]},{"pos":[45226,45233],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[45235,45316]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[45317,45421]},{"pos":[45427,45449],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[45501,45511],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[45513,45518]},{"pos":[45527,45539],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[45545,45567],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[45569,45603]},{"pos":[45670,45680],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[45682,45687]},{"content":"The number of lines to use to determine the height.","pos":[45690,45741]},{"content":"lines","pos":[45753,45758]},{"content":"The number of lines to use to determine the height.","pos":[45761,45812]},{"pos":[45819,45831],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[45833,45879]},{"pos":[45885,45899],"content":"Method checked","linkify":"Method checked","nodes":[{"content":"Method checked","pos":[0,14]}]},{"content":"Gets or sets the value of a check box.","pos":[45901,45939]},{"pos":[45991,46001],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"check","pos":[46003,46008]},{"content":"A Boolean value that indicates whether the check box is selected; optional.","pos":[46011,46086]},{"content":"A value of true selects the check box, and a value of false clears it.","pos":[46087,46157]},{"pos":[46164,46176],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the check box is selected; otherwise false.","pos":[46178,46229]},{"pos":[46236,46243],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method uses the Win32 API to get and set the value of the check box without querying the properties.","pos":[46245,46350]},{"pos":[46356,46374],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[46376,46421]},{"pos":[46469,46479],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[46481,46486]},{"pos":[46495,46507],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[46509,46552]},{"pos":[46559,46566],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[46568,46629]},{"content":"Value.","pos":[46633,46639]},{"content":"Style.","pos":[46642,46648]},{"content":"0","pos":[46719,46720]},{"content":"Default.","pos":[46728,46736]},{"content":"1","pos":[46762,46763]},{"content":"The MicrosoftWindows palette.","pos":[46771,46800]},{"content":"2","pos":[46805,46806]},{"content":"The true-color scheme.","pos":[46814,46836]},{"pos":[46851,46874],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[46876,46943]},{"pos":[47026,47036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[47038,47043]},{"pos":[47052,47064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[47066,47138]},{"pos":[47145,47152],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[47154,47235]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[47236,47329]},{"pos":[47335,47360],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[47362,47458]},{"pos":[47503,47515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[47517,47603]},{"pos":[47610,47617],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[47619,47668]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[47669,47817]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[47818,47952]},{"pos":[47958,47983],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[47985,48063]},{"pos":[48118,48128],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[48130,48135]},{"content":"The string that contains the country region/codes to set; optional.","pos":[48138,48205]},{"pos":[48212,48224],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[48226,48291]},{"pos":[48297,48329],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[48399,48409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[48411,48416]},{"pos":[48425,48437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48443,48459],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"pos":[48513,48523],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[48525,48530]},{"pos":[48539,48551],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48557,48574],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[48621,48631],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[48633,48638]},{"pos":[48647,48659],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[48665,48688],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[48690,48815]},{"pos":[48868,48878],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[48880,48885]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[48888,48962]},{"pos":[48969,48981],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[48983,49095]},{"pos":[49102,49109],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[49111,49238]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[49239,49332]},{"pos":[49338,49355],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source to be used by the control or the form.","pos":[49357,49422]},{"pos":[49473,49483],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[49485,49490]},{"pos":[49499,49511],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source to be used.","pos":[49513,49558]},{"pos":[49564,49584],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[49586,49753]},{"pos":[49803,49813],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[49815,49820]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[49823,49897]},{"pos":[49904,49916],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[49918,50046]},{"pos":[50052,50067],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[50069,50150]},{"pos":[50195,50205],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[50207,50212]},{"pos":[50221,50233],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[50235,50295]},{"pos":[50301,50316],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[50318,50412]},{"pos":[50506,50516],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[50518,50528]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[50531,50616]},{"content":"dragMode","pos":[50628,50636]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[50639,50724]},{"content":"x","pos":[50736,50737]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[50740,50825]},{"content":"y","pos":[50837,50838]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[50841,50926]},{"pos":[50933,50945],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[50947,51012]},{"pos":[51018,51035],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[51037,51133]},{"pos":[51223,51233],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[51235,51245]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[51248,51333]},{"content":"dragMode","pos":[51345,51353]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[51356,51441]},{"content":"x","pos":[51453,51454]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[51457,51542]},{"content":"y","pos":[51554,51555]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[51558,51643]},{"pos":[51650,51662],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[51664,51729]},{"pos":[51735,51750],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[51752,51822]},{"pos":[51856,51868],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[51870,52001]},{"pos":[52007,52027],"content":"Method drawFocusRect","linkify":"Method drawFocusRect","nodes":[{"content":"Method drawFocusRect","pos":[0,20]}]},{"pos":[52085,52095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[52097,52102]},{"pos":[52111,52123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[52129,52143],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[52145,52196]},{"pos":[52248,52258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[52260,52265]},{"pos":[52274,52286],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[52288,52336]},{"pos":[52343,52350],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[52352,52427]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[52428,52523]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[52524,52658]},{"pos":[52664,52686],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[52688,52739]},{"pos":[52791,52801],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[52803,52808]},{"pos":[52817,52829],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[52831,52875]},{"pos":[52882,52889],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[52891,52959]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[52965,53035]},{"content":"The second byte contains a value for green.","pos":[53040,53083]},{"content":"The third byte contains a value for blue.","pos":[53088,53129]},{"content":"The high-order byte must be zero.","pos":[53134,53167]},{"content":"The maximum value for a single byte is 255.","pos":[53172,53215]},{"pos":[53221,53238],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[53240,53328]},{"pos":[53381,53391],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[53393,53396]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[53399,53469]},{"pos":[53476,53488],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[53490,53557]},{"pos":[53563,53584],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[53586,53641]},{"pos":[53685,53697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[53699,53762]},{"pos":[53768,53781],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[53783,53822]},{"pos":[53875,53885],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[53887,53892]},{"content":"mode","pos":[53906,53910]},{"pos":[53919,53931],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[53933,53969]},{"pos":[53976,53983],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[53985,54092]},{"content":"Mode.","pos":[54096,54101]},{"content":"Height calculation.","pos":[54115,54134]},{"content":"-1 Exact.","pos":[54322,54331]},{"content":"The exact height in pixels of the controls is used.","pos":[54341,54392]},{"content":"0 Auto.","pos":[54435,54442]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[54454,54543]},{"content":"1 Column height.","pos":[54548,54564]},{"content":"The layout of the form determines the height of the control.","pos":[54567,54627]},{"content":"The height and height calculation mode can be set separately.","pos":[54660,54721]},{"pos":[54727,54744],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[54746,54808]},{"pos":[54855,54865],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[54867,54872]},{"pos":[54881,54893],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[54895,54916]},{"pos":[54923,54930],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[54932,54986]},{"content":"Mode.","pos":[54990,54995]},{"content":"Height Calculation.","pos":[55007,55026]},{"content":"Exact.","pos":[55212,55218]},{"content":"The exact height in pixels of the controls is used.","pos":[55229,55280]},{"content":"Auto.","pos":[55323,55328]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[55340,55429]},{"content":"Column height.","pos":[55434,55448]},{"content":"The layout of the form determines the height of the control.","pos":[55451,55511]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[55544,55629]},{"pos":[55635,55653],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[55655,55694]},{"pos":[55742,55752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[55754,55759]},{"pos":[55768,55780],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[55782,55803]},{"pos":[55810,55817],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[55819,55909]},{"pos":[55915,55931],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[55933,55973]},{"pos":[56008,56020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[56022,56110]},{"pos":[56117,56124],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[56126,56196]},{"content":"Use the helpText method to set the value of the Help text.","pos":[56197,56255]},{"pos":[56261,56276],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[56278,56382]},{"pos":[56427,56437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[56439,56444]},{"pos":[56453,56465],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[56467,56522]},{"pos":[56529,56536],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.","pos":[56538,56651]},{"pos":[56657,56679],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[56681,56744]},{"pos":[56796,56806],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[56808,56813]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[56816,56883]},{"pos":[56890,56902],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[56904,56954]},{"pos":[56960,56971],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[56973,57018]},{"pos":[57048,57060],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[57062,57089]},{"pos":[57096,57103],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[57105,57149]},{"pos":[57155,57173],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[57214,57226],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[57232,57250],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[57252,57318]},{"pos":[57359,57371],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[57373,57424]},{"pos":[57431,57438],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[57440,57508]},{"pos":[57514,57533],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[57535,57602]},{"pos":[57644,57656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[57658,57710]},{"pos":[57716,57741],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[57743,57844]},{"pos":[57913,57923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[57925,57942]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[57945,58073]},{"pos":[58080,58092],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[58094,58253]},{"pos":[58260,58267],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[58269,58346]},{"content":"FormAllowUserSetup::No 0","pos":[58686,58710]},{"content":"No changes can be made to the control.","pos":[58721,58759]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[58760,58849]},{"content":"FormAllowUserSetup::Restricted 1","pos":[58854,58886]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[58889,58981]},{"content":"The user cannot move the control.","pos":[58982,59015]},{"content":"FormAllowUserSetup::Yes 2","pos":[59022,59047]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[59057,59149]},{"content":"The user can also move the control.","pos":[59150,59185]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[59189,59378]},{"pos":[59384,59396],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[59398,59435]},{"pos":[59477,59487],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[59489,59494]},{"pos":[59503,59515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[59517,59555]},{"pos":[59562,59569],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[59571,59703]},{"pos":[59709,59730],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[59781,59791],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[59793,59798]},{"pos":[59807,59819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59825,59841],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"pos":[59887,59897],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[59899,59904]},{"pos":[59913,59925],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[59931,59955],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[60009,60019],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[60021,60026]},{"pos":[60035,60047],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60053,60069],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"pos":[60115,60125],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[60127,60132]},{"pos":[60141,60153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60159,60179],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"pos":[60229,60239],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[60241,60246]},{"pos":[60255,60267],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60273,60300],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[60357,60367],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[60369,60374]},{"pos":[60383,60395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60401,60418],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[60465,60475],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[60477,60482]},{"pos":[60491,60503],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60509,60527],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[60585,60595],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[60597,60602]},{"content":"mode","pos":[60616,60620]},{"pos":[60629,60641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60647,60669],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[60721,60731],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[60733,60738]},{"pos":[60747,60759],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60765,60788],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[60841,60851],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[60853,60858]},{"pos":[60867,60879],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[60885,60903],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"pos":[60959,60969],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[60971,60976]},{"pos":[60985,60997],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61003,61028],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"pos":[61125,61135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[61137,61138]},{"content":"y","pos":[61152,61153]},{"content":"button","pos":[61167,61173]},{"content":"Ctrl","pos":[61187,61191]},{"content":"Shift","pos":[61205,61210]},{"pos":[61219,61231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61237,61258],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"pos":[61351,61361],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[61363,61364]},{"content":"y","pos":[61378,61379]},{"content":"button","pos":[61393,61399]},{"content":"Ctrl","pos":[61413,61417]},{"content":"Shift","pos":[61431,61436]},{"pos":[61445,61457],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61463,61482],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"pos":[61573,61583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[61585,61586]},{"content":"y","pos":[61600,61601]},{"content":"button","pos":[61615,61621]},{"content":"Ctrl","pos":[61635,61639]},{"content":"Shift","pos":[61653,61658]},{"pos":[61667,61679],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61685,61705],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"pos":[61755,61765],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[61767,61772]},{"pos":[61781,61793],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61799,61820],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"pos":[61879,61889],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[61891,61896]},{"pos":[61905,61917],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[61923,61940],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[61997,62007],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[62009,62014]},{"content":"mode","pos":[62028,62032]},{"pos":[62041,62053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62059,62080],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[62131,62141],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[62143,62148]},{"pos":[62157,62169],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62175,62197],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[62249,62259],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[62261,62266]},{"pos":[62275,62287],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62293,62305],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[62340,62352],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[62358,62369],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[62371,62435]},{"pos":[62486,62496],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[62498,62503]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[62506,62592]},{"content":"mode","pos":[62604,62608]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[62611,62697]},{"pos":[62704,62716],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[62718,62769]},{"pos":[62775,62790],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[62792,62853]},{"pos":[62898,62908],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[62910,62915]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[62918,63004]},{"pos":[63011,63023],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[63025,63081]},{"pos":[63087,63103],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[63105,63169]},{"pos":[63215,63225],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63227,63232]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[63235,63316]},{"pos":[63323,63335],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[63337,63388]},{"pos":[63394,63414],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[63416,63469]},{"pos":[63527,63537],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[63539,63544]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[63547,63641]},{"pos":[63648,63660],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[63662,63735]},{"pos":[63741,63756],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[63794,63806],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[63812,63832],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[63834,63891]},{"pos":[63983,63993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[63995,63996]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[63999,64060]},{"content":"y","pos":[64072,64073]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[64076,64137]},{"content":"button","pos":[64149,64155]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[64158,64219]},{"content":"Ctrl","pos":[64231,64235]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[64238,64299]},{"content":"Shift","pos":[64311,64316]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[64319,64380]},{"pos":[64387,64399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[64401,64440]},{"pos":[64447,64454],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[64456,64560]},{"pos":[64566,64582],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[64584,64649]},{"pos":[64737,64747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[64749,64750]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[64753,64814]},{"content":"y","pos":[64826,64827]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[64830,64891]},{"content":"button","pos":[64903,64909]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[64912,64973]},{"content":"Ctrl","pos":[64985,64989]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[64992,65053]},{"content":"Shift","pos":[65065,65070]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[65073,65134]},{"pos":[65141,65153],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[65155,65194]},{"pos":[65201,65208],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[65210,65314]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[65315,65450]},{"pos":[65456,65472],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[65474,65539]},{"pos":[65627,65637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[65639,65640]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[65643,65704]},{"content":"y","pos":[65716,65717]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[65720,65781]},{"content":"button","pos":[65793,65799]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[65802,65863]},{"content":"Ctrl","pos":[65875,65879]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[65882,65943]},{"content":"Shift","pos":[65955,65960]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[65963,66024]},{"pos":[66031,66043],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[66045,66084]},{"pos":[66091,66098],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[66100,66204]},{"pos":[66210,66224],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[66226,66298]},{"pos":[66384,66394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[66396,66397]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[66400,66461]},{"content":"y","pos":[66473,66474]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[66477,66538]},{"content":"button","pos":[66550,66556]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[66559,66620]},{"content":"Ctrl","pos":[66632,66636]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[66639,66700]},{"content":"Shift","pos":[66712,66717]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[66720,66781]},{"pos":[66788,66800],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[66802,66841]},{"pos":[66848,66855],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[66857,66961]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[66962,67097]},{"pos":[67103,67114],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[67116,67251]},{"pos":[67292,67302],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67304,67309]},{"content":"The name to assign to the control; optional.","pos":[67312,67356]},{"pos":[67363,67375],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[67377,67441]},{"pos":[67448,67455],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[67457,67551]},{"content":"It must start with a letter.","pos":[67557,67585]},{"content":"It cannot exceed 250 characters.","pos":[67590,67622]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[67627,67681],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[67686,67726]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[67731,67841]},{"pos":[67847,67870],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[67923,67933],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[67935,67940]},{"pos":[67949,67961],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[67967,67995],"content":"Method optionalRecordControl","linkify":"Method optionalRecordControl","nodes":[{"content":"Method optionalRecordControl","pos":[0,28]}]},{"pos":[68061,68071],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68073,68078]},{"pos":[68087,68099],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68105,68132],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[68184,68196],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68202,68222],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[68224,68269]},{"pos":[68316,68328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[68330,68365]},{"pos":[68371,68392],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[68443,68453],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68455,68460]},{"pos":[68469,68481],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68487,68504],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[68551,68561],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68563,68568]},{"pos":[68577,68589],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[68595,68613],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[68615,68674]},{"pos":[68742,68752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[68754,68759]},{"content":"The ID of the security key being assigned to the control; optional.","pos":[68762,68829]},{"pos":[68836,68848],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[68850,68949]},{"pos":[68955,68977],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[68979,69019]},{"pos":[69074,69084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[69086,69096]},{"content":"The ID of the menu to show.","pos":[69099,69126]},{"pos":[69133,69145],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[69147,69206]},{"pos":[69212,69228],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"pos":[69282,69292],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[69294,69299]},{"pos":[69308,69320],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[69326,69337],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[69339,69466]},{"pos":[69515,69525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[69527,69532]},{"content":"The value to assign to the skip property of the control; optional.","pos":[69535,69601]},{"pos":[69608,69620],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[69622,69728]},{"pos":[69735,69742],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[69744,69939]},{"pos":[69945,69956],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[70011,70021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[70023,70036]},{"pos":[70045,70057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70063,70075],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[70117,70127],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70129,70134]},{"pos":[70143,70155],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[70161,70175],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[70177,70220]},{"pos":[70253,70265],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[70267,70369]},{"pos":[70376,70383],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[70385,70457]},{"pos":[70463,70473],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[70475,70537]},{"pos":[70587,70597],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[70599,70604]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[70607,70691]},{"content":"mode","pos":[70703,70707]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[70710,70794]},{"pos":[70801,70813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[70815,70864]},{"pos":[70870,70884],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[70886,70945]},{"pos":[70989,70999],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71001,71006]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[71009,71093]},{"pos":[71100,71112],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[71114,71168]},{"pos":[71174,71189],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[71191,71253]},{"pos":[71298,71308],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71310,71315]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[71318,71397]},{"pos":[71404,71416],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[71418,71467]},{"pos":[71473,71484],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[71525,71535],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71537,71542]},{"pos":[71551,71563],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71569,71596],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[71660,71670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[71672,71676]},{"pos":[71685,71697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[71703,71718],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[71720,71763]},{"pos":[71808,71818],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[71820,71825]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[71828,71900]},{"pos":[71907,71919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[71921,71951]},{"pos":[71957,71976],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[71978,72026]},{"pos":[72075,72085],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72087,72092]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[72095,72172]},{"pos":[72179,72191],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[72193,72228]},{"pos":[72234,72254],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[72256,72315]},{"pos":[72365,72375],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72377,72382]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[72385,72473]},{"pos":[72480,72492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[72494,72540]},{"pos":[72546,72564],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[72566,72649]},{"pos":[72697,72707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[72709,72714]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[72717,72797]},{"pos":[72804,72816],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[72818,72874]},{"pos":[72880,72897],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[72899,72951]},{"pos":[72998,73008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73010,73015]},{"content":"The user height for the control; optional.","pos":[73018,73060]},{"pos":[73067,73079],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[73081,73120]},{"pos":[73126,73141],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[73143,73225]},{"pos":[73270,73280],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73282,73287]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[73290,73369]},{"pos":[73376,73388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[73390,73445]},{"pos":[73452,73459],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[73461,73631]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[73632,73707]},{"content":"This method lets you programmatically determine and set the value.","pos":[73708,73774]},{"pos":[73780,73803],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[73805,73861]},{"pos":[73914,73924],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[73926,73931]},{"content":"The organization container to set for the control; optional.","pos":[73934,73994]},{"pos":[74001,74013],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[74015,74058]},{"pos":[74064,74085],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[74087,74141]},{"pos":[74192,74202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74204,74209]},{"content":"The organization sibling to set for the control; optional.","pos":[74212,74270]},{"pos":[74277,74289],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[74291,74332]},{"pos":[74338,74359],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[74361,74410]},{"pos":[74461,74471],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74473,74478]},{"content":"The user label text to set for the control; optional.","pos":[74481,74534]},{"pos":[74541,74553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[74555,74591]},{"pos":[74597,74621],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[74623,74676]},{"pos":[74730,74740],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[74742,74747]},{"content":"The user security level to set for the control; optional.","pos":[74750,74807]},{"pos":[74814,74826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[74828,74868]},{"pos":[74874,74889],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[74891,75039]},{"pos":[75084,75094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75096,75101]},{"content":"The value to assign to the userSkip property; optional.","pos":[75104,75159]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[75160,75255]},{"pos":[75262,75274],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[75276,75345]},{"pos":[75351,75367],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[75369,75420]},{"pos":[75466,75476],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[75478,75483]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[75486,75552]},{"pos":[75559,75571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[75573,75702]},{"pos":[75709,75716],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[75718,75812]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[75813,75929],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[75930,76080]},{"pos":[76086,76101],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[76139,76151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76157,76169],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[76211,76221],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76223,76228]},{"pos":[76237,76249],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[76255,76277],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[76279,76340]},{"pos":[76409,76419],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[76421,76426]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[76429,76506]},{"content":"mode","pos":[76518,76522]},{"content":"An integer value that indicates the AutoMode value for the control; optional.","pos":[76525,76602]},{"pos":[76609,76621],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[76623,76671]},{"pos":[76677,76703],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[76705,76764]},{"pos":[76829,76839],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[76841,76845]},{"pos":[76854,76866],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[76868,76922]},{"pos":[76928,76955],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[76957,77018]},{"pos":[77075,77085],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77087,77092]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[77095,77173]},{"pos":[77180,77192],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[77194,77242]},{"pos":[77248,77267],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[77316,77326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77328,77333]},{"pos":[77342,77354],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[77360,77374],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[77376,77446]},{"pos":[77498,77508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77510,77515]},{"content":"The value to assign to the visible setting for the control; optional.","pos":[77518,77587]},{"pos":[77594,77606],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[77608,77657]},{"pos":[77663,77675],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[77677,77715]},{"pos":[77767,77777],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[77779,77784]},{"content":"mode","pos":[77798,77802]},{"pos":[77811,77823],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[77825,77860]},{"pos":[77867,77874],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[77876,77982]},{"content":"Mode.","pos":[77986,77991]},{"content":"Width calculation.","pos":[78004,78022]},{"content":"-1 Exact.","pos":[78208,78217]},{"content":"The exact width in pixels of the controls is used.","pos":[78226,78276]},{"content":"0 Auto.","pos":[78319,78326]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[78337,78425]},{"content":"1 Column width.","pos":[78430,78445]},{"content":"The layout of the form determines the width of the control.","pos":[78448,78507]},{"content":"The width and width calculation mode can be set separately.","pos":[78540,78599]},{"pos":[78605,78621],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[78623,78685]},{"pos":[78731,78741],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[78743,78748]},{"pos":[78757,78769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[78771,78832]},{"pos":[78839,78846],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[78848,78901]},{"content":"Mode.","pos":[78905,78910]},{"content":"Width Calculation.","pos":[78921,78939]},{"content":"Exact.","pos":[79123,79129]},{"content":"The exact width in pixels of the controls is used.","pos":[79139,79189]},{"content":"Auto.","pos":[79232,79237]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[79248,79336]},{"content":"Column width.","pos":[79341,79354]},{"content":"The layout of the form determines the width of the control.","pos":[79357,79416]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[79449,79532]},{"pos":[79538,79555],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[79557,79595]},{"pos":[79642,79652],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[79654,79659]},{"pos":[79668,79680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[79682,79717]},{"pos":[79724,79731],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[79733,79806]},{"pos":[79812,79826],"content":"Method clicked","linkify":"Method clicked","nodes":[{"content":"Method clicked","pos":[0,14]}]},{"pos":[79859,79875],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[79958,79968],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[79970,79976]},{"content":"e","pos":[79990,79991]},{"pos":[79999,80011],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[80013,80067]},{"pos":[80098,80112],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[80145,80163],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[80248,80258],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[80260,80266]},{"content":"e","pos":[80280,80281]},{"pos":[80289,80305],"content":"Method OnClicked","linkify":"Method OnClicked","nodes":[{"content":"Method OnClicked","pos":[0,16]}]},{"pos":[80388,80398],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[80400,80406]},{"content":"e","pos":[80420,80421]},{"pos":[80429,80442],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[80490,80500],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[80502,80511]},{"pos":[80519,80536],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[80538,80592]},{"pos":[80628,80644],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[80646,80688]},{"pos":[80723,80741],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[80743,80814]},{"pos":[80865,80875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[80877,80886]},{"content":"The string value to use to filter data; optional.","pos":[80889,80938]},{"pos":[80944,80955],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[80985,81002],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[81086,81096],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[81098,81104]},{"content":"e","pos":[81118,81119]},{"pos":[81127,81148],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[81150,81219]},{"pos":[81281,81291],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[81293,81298]},{"content":"The preferred height of the control.","pos":[81301,81337]},{"content":"height","pos":[81349,81355]},{"content":"The preferred height of the control.","pos":[81358,81394]},{"pos":[81400,81415],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[81417,81447]},{"pos":[81481,81498],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[81582,81592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[81594,81600]},{"content":"e","pos":[81614,81615]},{"pos":[81623,81634],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[81636,81734]},{"pos":[81820,81830],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[81832,81842]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[81845,81930]},{"content":"dragMode","pos":[81942,81950]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[81953,82038]},{"content":"x","pos":[82050,82051]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[82054,82139]},{"content":"y","pos":[82151,82152]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[82155,82240]},{"pos":[82246,82275],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[82393,82403],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[82405,82421]},{"content":"objectMethodToCall","pos":[82435,82453]},{"content":"overrideObject","pos":[82467,82481]},{"pos":[82489,82503],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[82505,82545]},{"pos":[82578,82592],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[82594,82655]},{"pos":[82689,82696],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[82698,82826]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[82827,82931]},{"pos":[82937,82958],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[82960,82981]},{"pos":[83021,83036],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[83118,83128],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[83130,83136]},{"content":"e","pos":[83150,83151]},{"pos":[83159,83178],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[83264,83274],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[83276,83282]},{"content":"e","pos":[83296,83297]},{"pos":[83305,83318],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[83320,83420]},{"pos":[83502,83512],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[83514,83524]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[83527,83612]},{"content":"dragMode","pos":[83624,83632]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[83635,83720]},{"content":"x","pos":[83732,83733]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[83736,83821]},{"content":"y","pos":[83833,83834]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[83837,83922]},{"pos":[83928,83944],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[83946,84042]},{"pos":[84077,84100],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[84102,84143]},{"pos":[84185,84196],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[84198,84250]},{"pos":[84280,84292],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[84323,84336],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[84368,84382],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[84463,84473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[84475,84481]},{"content":"e","pos":[84495,84496]},{"pos":[84504,84514],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[84516,84549]},{"pos":[84578,84596],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[84681,84691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[84693,84699]},{"content":"e","pos":[84713,84714]},{"pos":[84722,84737],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[84739,84785]},{"pos":[84819,84836],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[84838,84908]},{"pos":[84998,85008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[85010,85011]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[85014,85075]},{"content":"y","pos":[85087,85088]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[85091,85152]},{"content":"button","pos":[85164,85170]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[85173,85234]},{"content":"Ctrl","pos":[85246,85250]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[85253,85314]},{"content":"Shift","pos":[85326,85331]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[85334,85395]},{"pos":[85400,85425],"content":"Class FormComboBoxControl","linkify":"Class FormComboBoxControl","nodes":[{"content":"Class FormComboBoxControl","pos":[0,25]}]},{"pos":[85481,85488],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[85494,85502],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[85508,85515],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[85519,85525]},{"content":"Description","pos":[85629,85640]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[86083,86129],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether the control should be aligned with other controls.","pos":[86193,86262]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[86365,86408],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can modify the contents of the control.","pos":[86475,86542]},{"content":"public boolean allowSysSetup()","pos":[86647,86677]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[86757,86840]},{"content":"public boolean appendNew(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[86929,86972],"source":"public boolean appendNew(\\[boolean value\\])"},{"content":"public int arrayIndex(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[87211,87247],"source":"public int arrayIndex(\\[int value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[87493,87542],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[87603,87701]},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[87775,87816],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[87885,87934]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[88057,88092],"source":"public int backStyle(\\[int value\\])"},{"content":"Determines whether the control’s background can be transparent.","pos":[88167,88230]},{"content":"public int beginDrag(int x, int y)","pos":[88339,88373]},{"content":"Is called when the user starts to drag a form control.","pos":[88449,88503]},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[88621,88651],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font that is used to display text in the control.","pos":[88731,88807]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[88903,88935],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the border line for the control.","pos":[89013,89071]},{"content":"public int cacheDataMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[89185,89226],"source":"public int cacheDataMethod(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[89467,89521]},{"content":"Retrieves the size of the control.","pos":[89577,89611]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[89749,89787],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[89859,89902]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[90031,90068],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[90141,90186]},{"content":"public int comboType(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[90313,90348],"source":"public int comboType(\\[int value\\])"},{"content":"Sets or returns the type of combo box for the control.","pos":[90423,90477]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[90595,90667],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[90705,90772]},{"content":"public List configurationKeyEx()","pos":[90877,90909]},{"content":"Returns a list that contains the IDs of configuration keys that are in effect for the control.","pos":[90987,91081]},{"content":"public int count()","pos":[91159,91177]},{"content":"Returns the number of items in the combo box control.","pos":[91269,91322]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[91441,91485],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[91551,91629]},{"content":"public FieldId countryRegionContextField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[91723,91782],"source":"public FieldId countryRegionContextField(\\[FieldId value\\])"},{"content":"public FieldId dataField(<ph id=\"ph1\">\\[</ph>FieldId value<ph id=\"ph2\">\\]</ph>)","pos":[92005,92048],"source":"public FieldId dataField(\\[FieldId value\\])"},{"content":"Sets or returns the data field for the combo box control.","pos":[92115,92172]},{"content":"public str dataMethod(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[92287,92323],"source":"public str dataMethod(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[92569,92611],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[92679,92804]},{"content":"public int dataSource(<ph id=\"ph1\">\\[</ph>AnyType value<ph id=\"ph2\">\\]</ph>)","pos":[92851,92891],"source":"public int dataSource(\\[AnyType value\\])"},{"content":"Gets or sets a data source that should be used by the control or the form.","pos":[92961,93035]},{"content":"public int displayLength(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[93133,93191],"source":"public int displayLength(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode displayLengthMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[93415,93467],"source":"public AutoMode displayLengthMode(\\[AutoMode mode\\])"},{"content":"public int displayLengthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[93697,93741],"source":"public int displayLengthValue(\\[int value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[93979,94018],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[94089,94256]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[94261,94295],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether drag-and-drop operations are enabled or disabled for the control.","pos":[94371,94455]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[94543,94624]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[94653,94747]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[94825,94902]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[94935,95031]},{"content":"public str dragText()","pos":[95107,95128]},{"content":"Returns the text that is displayed when the form combo box control is dragged.","pos":[95217,95295]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[95389,95430],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether the object is enabled or disabled.","pos":[95499,95552]},{"content":"public EnumId enumType(<ph id=\"ph1\">\\[</ph>EnumId value<ph id=\"ph2\">\\]</ph>)","pos":[95671,95711],"source":"public EnumId enumType(\\[EnumId value\\])"},{"content":"public EnumId enumTypeValue()","pos":[95953,95982]},{"content":"public ExtendedTypeId extendedDataType(<ph id=\"ph1\">\\[</ph>ExtendedTypeId value<ph id=\"ph2\">\\]</ph>)","pos":[96235,96299],"source":"public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])"},{"content":"public int fastTabSummary(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[96517,96557],"source":"public int fastTabSummary(\\[int value\\])"},{"content":"public int find(str string)","pos":[96799,96826]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[97081,97111],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font that should be used for the control.","pos":[97191,97261]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[97363,97397],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font that should be used for the control.","pos":[97473,97543]},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[97645,97686],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[97755,97806]},{"content":"public str getEditText()","pos":[97927,97951]},{"content":"public str getText(int index)","pos":[98209,98238]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[98491,98533],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the form combo box control have changed.","pos":[98601,98704]},{"content":"public boolean hasUserSetting()","pos":[98773,98804]},{"content":"Indicates whether the control has custom user settings.","pos":[98883,98938]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[99055,99097],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control in pixels.","pos":[99165,99214]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[99337,99373],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[99447,99509]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[99619,99656],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[99729,99768]},{"content":"public str helpField()","pos":[99901,99923]},{"content":"Returns the Help text for the control.","pos":[100011,100049]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[100183,100217],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.","pos":[100293,100404]},{"content":"public boolean hideFirstEntry(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[100465,100513],"source":"public boolean hideFirstEntry(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the first entry in the combo box control is hidden.","pos":[100575,100673]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[100747,100788],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[100857,100920]},{"content":"public int hWnd()","pos":[101029,101046]},{"content":"Returns the Windows handle for the control.","pos":[101139,101182]},{"content":"public boolean isContainer()","pos":[101311,101339]},{"content":"Returns a value that indicates whether the control is a container.","pos":[101421,101487]},{"content":"public boolean isDisplayed()","pos":[101593,101621]},{"content":"Returns a value that indicates whether the control is displayed.","pos":[101703,101767]},{"content":"public boolean isRestricted()","pos":[101875,101904]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[101985,102052]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[102157,102213]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[102267,102366]},{"content":"public boolean isValid()","pos":[102439,102463]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[102721,102761],"source":"public boolean italic(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the text in the control is italic.","pos":[102831,102912]},{"content":"public int item(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[103003,103033],"source":"public int item(\\[int value\\])"},{"content":"public int items(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[103285,103316],"source":"public int items(\\[int value\\])"},{"content":"public str label(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[103567,103598],"source":"public str label(\\[str value\\])"},{"content":"Gets or sets the label for a control.","pos":[103677,103714]},{"content":"public int labelAlignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[103849,103889],"source":"public int labelAlignment(\\[int value\\])"},{"content":"public int labelBold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[104131,104166],"source":"public int labelBold(\\[int value\\])"},{"content":"Sets or returns a value that indicates the bold setting for the label in the control.","pos":[104241,104326]},{"content":"public int labelCharacterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[104413,104456],"source":"public int labelCharacterSet(\\[int value\\])"},{"content":"public str labelFont(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[104695,104730],"source":"public str labelFont(\\[str value\\])"},{"content":"Sets or returns a font for the label text in a form combo box control.","pos":[104805,104875]},{"content":"public int labelFontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[104977,105016],"source":"public int labelFontSize(\\[int value\\])"},{"content":"Sets or returns the font size in points for the label text in a form combo box control.","pos":[105087,105174]},{"content":"public int labelForegroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[105259,105305],"source":"public int labelForegroundColor(\\[int value\\])"},{"content":"public int labelGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[105541,105577],"source":"public int labelGuide(\\[int value\\])"},{"content":"public int labelHeight(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[105823,105870],"source":"public int labelHeight(int value, \\[int mode\\])"},{"content":"public int labelHeightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[106105,106146],"source":"public int labelHeightMode(\\[int value\\])"},{"content":"public int labelHeightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[106387,106429],"source":"public int labelHeightValue(\\[int value\\])"},{"content":"public boolean labelItalic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[106669,106714],"source":"public boolean labelItalic(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the text in the label of the control is italic.","pos":[106779,106873]},{"content":"public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[106951,107035]},{"content":"Is called when the label for the control is double-clicked by the user.","pos":[107061,107132]},{"content":"public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[107233,107313]},{"content":"Is called when the user clicks the mouse button over the label for the control.","pos":[107343,107422]},{"content":"public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[107515,107593]},{"content":"Is called when the user releases the mouse button over the label for the control.","pos":[107625,107706]},{"content":"public int labelPosition(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[107797,107836],"source":"public int labelPosition(\\[int value\\])"},{"content":"Sets or returns the position of the label for the control.","pos":[107907,107965]},{"content":"public boolean labelUnderline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[108079,108127],"source":"public boolean labelUnderline(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the text in the label of the control is underlined.","pos":[108189,108287]},{"content":"public int labelWidth(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[108361,108407],"source":"public int labelWidth(int value, \\[int mode\\])"},{"content":"public int labelWidthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[108643,108683],"source":"public int labelWidthMode(\\[int value\\])"},{"content":"public int labelWidthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[108925,108966],"source":"public int labelWidthValue(\\[int value\\])"},{"content":"public boolean leave()","pos":[109207,109229]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[109489,109529],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[109599,109663]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[109771,109805],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[109881,109942]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[110053,110088],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[110163,110227]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[110335,110382],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[110445,110498]},{"content":"public boolean modified()","pos":[110617,110642]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[110899,110978]},{"content":"Is called when the control is double-clicked by the user.","pos":[111009,111066]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[111181,111256]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[111291,111356]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[111463,111538]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[111573,111638]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[111745,111818]},{"content":"Is called when the user releases the mouse button over the control.","pos":[111855,111922]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[112027,112057],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[112137,112272]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[112309,112351],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[112591,112630]},{"content":"public FormControl parentControl()","pos":[112873,112907]},{"content":"Retrieves the parent control for the control.","pos":[112983,113028]},{"content":"public str previewPartRef(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[113155,113195],"source":"public str previewPartRef(\\[str value\\])"},{"content":"public int promptrect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[113437,113473],"source":"public int promptrect(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[113719,113776],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[113829,113888]},{"content":"public int selection(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[114001,114036],"source":"public int selection(\\[int value\\])"},{"content":"public int selectionChange()","pos":[114283,114311]},{"content":"Indicates that the user has changed the selected item in the combo box control.","pos":[114393,114472]},{"content":"public int selectText(str string)","pos":[114565,114598]},{"content":"public int showContextMenu(int menuHandle)","pos":[114847,114889]},{"content":"Shows the shortcut menu for the control.","pos":[114957,114997]},{"content":"public boolean showLabel(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[115129,115172],"source":"public boolean showLabel(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the label for the control is displayed in the form.","pos":[115239,115337]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[115411,115449],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[115521,115648]},{"content":"public int sort(<ph id=\"ph1\">\\[</ph>SortOrder sortDirection<ph id=\"ph2\">\\]</ph>)","pos":[115693,115737],"source":"public int sort(\\[SortOrder sortDirection\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[115975,116005],"source":"public str text(\\[str value\\])"},{"content":"Sets or returns the text for the control.","pos":[116085,116126]},{"content":"public str toolTip()","pos":[116257,116277]},{"content":"Returns the tooltip text for the control.","pos":[116367,116408]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[116539,116578],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[116649,116711]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[116821,116854],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[116931,116990]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[117103,117137],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[117213,117275]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[117385,117415],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[117667,117710],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[117777,117844]},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[117949,118000]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[118231,118265],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[118341,118384]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[118513,118551],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[118623,118671]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[118795,118834],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[118905,118964]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119077,119114],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[119187,119270]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119359,119395],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[119469,119521]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119641,119675],"source":"public int userHide(\\[int value\\])"},{"content":"Returns or sets the value that indicates whether the form combo box control is hidden from the user.","pos":[119751,119851]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[119923,119965],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[120033,120089]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[120205,120245],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[120315,120369]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[120487,120527],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[120597,120646]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[120769,120812],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[120879,120932]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[121051,121085],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form combo box control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[121161,121319]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[121333,121368],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the form combo box control in pixels.","pos":[121443,121509]},{"content":"public boolean validate()","pos":[121615,121640]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[121897,121957],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[122007,122068]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[122179,122233],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[122289,122348]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[122461,122507],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[122571,122632]},{"content":"public int viewEditMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[122743,122781],"source":"public int viewEditMode(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[123025,123066],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[123135,123205]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[123307,123348],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[123417,123455]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[123589,123624],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[123699,123761]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[123871,123907],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[123981,124019]},{"content":"public void filter(<ph id=\"ph1\">\\[</ph>str filterStr<ph id=\"ph2\">\\]</ph>)","pos":[124153,124190],"source":"public void filter(\\[str filterStr\\])"},{"content":"public void displayControl()","pos":[124435,124463]},{"content":"Displays the control.","pos":[124545,124566]},{"content":"private void OnValidated(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[124717,124793],"source":"private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dragLeave()","pos":[124999,125022]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[125109,125205]},{"content":"public void resetUserSetting()","pos":[125281,125311]},{"content":"Resets the user settings for the control.","pos":[125391,125432]},{"content":"private void OnModified(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[125563,125638],"source":"private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void context()","pos":[125845,125866]},{"content":"Shows the shortcut menu for the control.","pos":[125955,125995]},{"content":"public void beginUpdate()","pos":[126127,126152]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[126409,126484],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setEditText(str string)","pos":[126691,126726]},{"content":"public void enter()","pos":[126973,126992]},{"content":"public void inputSearch(str searchStr)","pos":[127255,127293]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[127365,127436]},{"content":"public void paste()","pos":[127537,127556]},{"content":"Pastes the form combo box control into the form.","pos":[127647,127695]},{"content":"public void clear()","pos":[127819,127838]},{"content":"Clears the entries in the combo box list.","pos":[127929,127970]},{"content":"public void gotFocus()","pos":[128101,128123]},{"content":"Indicates that the control has received focus.","pos":[128211,128257]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[128383,128459],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[128665,128738]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[128775,128873]},{"content":"public void copy()","pos":[128947,128965]},{"content":"Copies the form combo box control.","pos":[129057,129091]},{"content":"private void OnSelectionChanging(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[129229,129313],"source":"private void OnSelectionChanging(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void endDrag()","pos":[129511,129532]},{"content":"Is called when the user has finished dragging a form combo box control.","pos":[129621,129692]},{"content":"public void lookup()","pos":[129793,129813]},{"content":"public void setFocus()","pos":[130075,130097]},{"content":"Sets the focus on the control.","pos":[130185,130215]},{"content":"public void insert(str string, int index)","pos":[130357,130398]},{"content":"Inserts a string value into the combo box list at the specified position.","pos":[130467,130540]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[130639,130716]},{"content":"Is called when the user moves the mouse pointer into the control.","pos":[130749,130814]},{"content":"private void OnEnter(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[130921,130993],"source":"private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void delete(str string)","pos":[131203,131233]},{"content":"Removes a string value from the combo box list.","pos":[131313,131360]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[131485,131592],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void add(str string)","pos":[131767,131794]},{"content":"Adds a string value to the combo box list.","pos":[131877,131919]},{"content":"public void prefColumnSize(int width, int height)","pos":[132049,132098]},{"content":"Specifies the preferred column width and height for the form combo box control.","pos":[132159,132238]},{"content":"private void OnValidating(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[132331,132408],"source":"private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void undo()","pos":[132613,132631]},{"content":"public void jumpRef()","pos":[132895,132916]},{"content":"private void OnSelectionChanged(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[133177,133260],"source":"private void OnSelectionChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void endUpdate()","pos":[133459,133482]},{"content":"public void lostFocus()","pos":[133741,133764]},{"content":"Indicates that the control has lost focus.","pos":[133851,133893]},{"content":"public void mouseLeave()","pos":[134023,134047]},{"content":"Indicates that the mouse pointer has left the control.","pos":[134133,134187]},{"content":"private void OnLookup(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[134305,134378],"source":"private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void cut()","pos":[134587,134604]},{"content":"Cuts the contents of the control.","pos":[134697,134730]},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[134869,134938]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[134979,135079]},{"content":"private void OnLeaving(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[135151,135225],"source":"private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void setDropSize(<ph id=\"ph1\">\\[</ph>int lines<ph id=\"ph2\">\\]</ph>)","pos":[135433,135471],"source":"public void setDropSize(\\[int lines\\])"},{"pos":[135718,135737],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether the control should be aligned with other controls.","pos":[135739,135808]},{"pos":[135865,135875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[135877,135882]},{"content":"A Boolean value that indicates whether the form combo box control is aligned with other controls; optional.","pos":[135885,135992]},{"pos":[135999,136011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[136013,136069]},{"pos":[136076,136083],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned based on the longest label.","pos":[136085,136160]},{"pos":[136167,136175],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows a call to the alignControl method to align a form combo box control with other controls, based on the length of the longest label.","pos":[136177,136335]},{"pos":[136603,136619],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can modify the contents of the control.","pos":[136621,136688]},{"pos":[136742,136752],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[136754,136759]},{"content":"The value to assign to the allowEdit property; optional.","pos":[136762,136818]},{"pos":[136825,136837],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be modified; otherwise, false.","pos":[136839,136893]},{"pos":[136900,136907],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[136909,137029]},{"pos":[137036,137044],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the value of the allowEdit property.","pos":[137046,137132]},{"pos":[137270,137290],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[137292,137375]},{"pos":[137418,137430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[137432,137500]},{"pos":[137506,137522],"content":"Method appendNew","linkify":"Method appendNew","nodes":[{"content":"Method appendNew","pos":[0,16]}]},{"pos":[137576,137586],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137588,137593]},{"pos":[137602,137614],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137620,137637],"content":"Method arrayIndex","linkify":"Method arrayIndex","nodes":[{"content":"Method arrayIndex","pos":[0,17]}]},{"pos":[137684,137694],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137696,137701]},{"pos":[137710,137722],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[137728,137750],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[137752,137850]},{"pos":[137910,137920],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[137922,137927]},{"content":"The value to assign to the autoDeclaration property; optional.","pos":[137930,137992]},{"pos":[137999,138011],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[138013,138092]},{"pos":[138099,138106],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[138108,138145]},{"pos":[138151,138173],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[138175,138224]},{"pos":[138276,138286],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[138288,138293]},{"content":"The value to assign as the background color of the control; optional.","pos":[138296,138365]},{"content":"This can be one of the values from the control’s color scheme or a Winapi::RGB2int value.","pos":[138366,138455]},{"pos":[138462,138474],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[138476,138520]},{"pos":[138527,138534],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the RGB color as follows:","pos":[138536,138599]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[138605,138675]},{"content":"The second byte contains a value for green.","pos":[138680,138723]},{"content":"The third byte contains a value for blue.","pos":[138728,138769]},{"content":"The high-order byte must be 0 (zero).","pos":[138774,138811]},{"content":"The maximum value for a single byte is 255.","pos":[138816,138859]},{"pos":[138866,138874],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the background color for a control.","pos":[138876,138961]},{"pos":[139174,139190],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determines whether the control’s background can be transparent.","pos":[139192,139255]},{"pos":[139301,139311],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[139313,139318]},{"content":"The value to assign as the background style of the control; optional.","pos":[139321,139390]},{"pos":[139397,139409],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[139411,139472]},{"pos":[139479,139487],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the background style.","pos":[139489,139560]},{"pos":[139748,139764],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[139766,139820]},{"pos":[139867,139877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[139879,139880]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[139883,139953]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[139954,140021]},{"content":"y","pos":[140033,140034]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[140037,140107]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[140108,140175]},{"pos":[140182,140194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[140196,140235]},{"pos":[140242,140249],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[140251,140332]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[140333,140437]},{"pos":[140444,140452],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example displays the x-coordinate and y-coordinate in the Infolog when the user starts to drag the form combo box control.","pos":[140454,140590]},{"pos":[140783,140794],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font that is used to display text in the control.","pos":[140796,140872]},{"pos":[140913,140923],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[140925,140930]},{"content":"The value to assign to the control's bold setting; optional.","pos":[140933,140993]},{"pos":[141000,141012],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between 0 (zero) and 9, inclusive.","pos":[141014,141065]},{"pos":[141072,141079],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the font weight as follows:","pos":[141081,141146]},{"content":"0 – Use the default font weight.","pos":[141152,141184]},{"content":"1 – Thin.","pos":[141189,141198]},{"content":"2 – Extra-light.","pos":[141203,141219]},{"content":"3 – Light.","pos":[141224,141234]},{"content":"4 – Normal.","pos":[141239,141250]},{"content":"5 – Medium.","pos":[141255,141266]},{"content":"6 – Semibold.","pos":[141271,141284]},{"content":"7 – Bold.","pos":[141289,141298]},{"content":"8 – Extra-bold.","pos":[141303,141318]},{"content":"9 – Heavy.","pos":[141323,141333]},{"pos":[141339,141352],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the border line for the control.","pos":[141354,141412]},{"pos":[141455,141465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[141467,141472]},{"content":"The value to assign as the border style for the control; optional.","pos":[141475,141541]},{"pos":[141548,141560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between 0 (zero) and 4, inclusive.","pos":[141562,141607]},{"pos":[141614,141621],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the border style line as follows.","pos":[141623,141694]},{"content":"0 – Auto.","pos":[141700,141709]},{"content":"1 – 3D.","pos":[141714,141721]},{"content":"2 – Single line.","pos":[141726,141742]},{"content":"3 – Flat.","pos":[141747,141756]},{"content":"4 – None.","pos":[141761,141770]},{"pos":[141777,141785],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve and set the border style for a control.","pos":[141787,141870]},{"pos":[142011,142033],"content":"Method cacheDataMethod","linkify":"Method cacheDataMethod","nodes":[{"content":"Method cacheDataMethod","pos":[0,22]}]},{"pos":[142085,142095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[142097,142102]},{"pos":[142111,142123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[142129,142151],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[142153,142187]},{"pos":[142254,142264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[142266,142271]},{"content":"The number of lines to use to determine the height.","pos":[142274,142325]},{"content":"lines","pos":[142337,142342]},{"content":"The number of lines to use to determine the height.","pos":[142345,142396]},{"pos":[142403,142415],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[142417,142463]},{"pos":[142469,142488],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[142490,142533]},{"pos":[142582,142592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[142594,142599]},{"pos":[142608,142620],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[142622,142684]},{"pos":[142691,142698],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[142700,142804]},{"content":"Value.","pos":[142808,142814]},{"content":"Description.","pos":[142817,142829]},{"content":"0","pos":[142876,142877]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[142885,142898],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[142910,142911]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[142919,142935],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[142944,142945]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[142953,142968],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[142978,142980]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[142987,142999],"source":"MAC\\_CHARSET"},{"content":"128","pos":[143012,143015]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143021,143038],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[143046,143049]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143055,143070],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[143080,143083]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143089,143104],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[143114,143117]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143123,143143],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[143148,143151]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143157,143171],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[143182,143185]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143191,143207],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[143216,143219]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143225,143244],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[143250,143253]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143259,143274],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[143284,143287]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143293,143309],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[143318,143321]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143327,143346],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[143352,143355]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143361,143373],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[143385,143473]},{"content":"Value.","pos":[143477,143483]},{"content":"Description.","pos":[143486,143498]},{"content":"130","pos":[143533,143536]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143542,143556],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[143560,143646]},{"content":"Value.","pos":[143650,143656]},{"content":"Description.","pos":[143659,143671]},{"content":"177","pos":[143708,143711]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143717,143732],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[143737,143740]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143746,143761],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[143765,143842]},{"content":"Value.","pos":[143846,143852]},{"content":"Description.","pos":[143855,143867]},{"content":"222","pos":[143900,143903]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[143909,143922],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[143926,144005]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[144006,144097],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[144098,144212]},{"pos":[144218,144236],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[144238,144283]},{"pos":[144331,144341],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[144343,144348]},{"pos":[144357,144369],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[144371,144414]},{"pos":[144421,144428],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[144430,144491]},{"content":"Value.","pos":[144495,144501]},{"content":"Style.","pos":[144504,144510]},{"content":"0","pos":[144567,144568]},{"content":"Default.","pos":[144576,144584]},{"content":"1","pos":[144603,144604]},{"content":"The Windows palette.","pos":[144612,144632]},{"content":"2","pos":[144639,144640]},{"content":"The true-color scheme.","pos":[144648,144670]},{"pos":[144678,144694],"content":"Method comboType","linkify":"Method comboType","nodes":[{"content":"Method comboType","pos":[0,16]}]},{"content":"Sets or returns the type of combo box for the control.","pos":[144696,144750]},{"pos":[144796,144806],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[144808,144813]},{"content":"The value to assign as the type of combo box for the control; optional.","pos":[144816,144887]},{"pos":[144894,144906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The type of combo box for the control.","pos":[144908,144946]},{"pos":[144953,144960],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table shows the values for the combo box type.","pos":[144962,145022]},{"content":"Value","pos":[145026,145031]},{"content":"Description","pos":[145034,145045]},{"content":"0","pos":[145074,145075]},{"content":"Standard","pos":[145082,145090]},{"content":"1","pos":[145098,145099]},{"content":"List","pos":[145106,145110]},{"pos":[145126,145134],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve and set the type of combo box that is used for the control.","pos":[145136,145239]},{"pos":[145414,145437],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[145439,145506]},{"pos":[145589,145599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[145601,145606]},{"content":"The ID of the configuration key to assign to the control.","pos":[145609,145666]},{"pos":[145673,145685],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the configuration key that is assigned to the control.","pos":[145687,145751]},{"pos":[145758,145765],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[145767,145848]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[145849,145942]},{"pos":[145949,145957],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows the setting and retrieval of the configuration key for a control.","pos":[145959,146052]},{"pos":[146630,146655],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Returns a list that contains the IDs of configuration keys that are in effect for the control.","pos":[146657,146751]},{"pos":[146796,146808],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[146810,146896]},{"pos":[146903,146910],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The list does not contain duplicate IDs.","pos":[146912,146952]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[146953,147101]},{"content":"In addition, the returned list contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[147102,147244]},{"pos":[147251,147259],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows the retrieval of the configuration key IDs for a control.","pos":[147261,147346]},{"pos":[147943,147955],"content":"Method count","linkify":"Method count","nodes":[{"content":"Method count","pos":[0,12]}]},{"content":"Returns the number of items in the combo box control.","pos":[147957,148010]},{"pos":[148041,148053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of items in the combo box control.","pos":[148055,148100]},{"pos":[148107,148115],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to use the count method.","pos":[148117,148173]},{"pos":[148214,148239],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[148241,148319]},{"pos":[148374,148384],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148386,148391]},{"content":"The string that contains the country/region codes to set; optional.","pos":[148394,148461]},{"pos":[148468,148480],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[148482,148547]},{"pos":[148553,148585],"content":"Method countryRegionContextField","linkify":"Method countryRegionContextField","nodes":[{"content":"Method countryRegionContextField","pos":[0,32]}]},{"pos":[148655,148665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148667,148672]},{"pos":[148681,148693],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[148699,148715],"content":"Method dataField","linkify":"Method dataField","nodes":[{"content":"Method dataField","pos":[0,16]}]},{"content":"Sets or returns the data field for the combo box control.","pos":[148717,148774]},{"pos":[148828,148838],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[148840,148845]},{"content":"The value to assign as the data field ID for the combo box control; optional.","pos":[148848,148925]},{"pos":[148932,148944],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of the data field ID for the combo box control.","pos":[148946,149003]},{"pos":[149010,149018],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to set and return the data field for the combo box control.","pos":[149020,149111]},{"pos":[149375,149392],"content":"Method dataMethod","linkify":"Method dataMethod","nodes":[{"content":"Method dataMethod","pos":[0,17]}]},{"pos":[149439,149449],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149451,149456]},{"pos":[149465,149477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[149483,149506],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[149508,149633]},{"pos":[149686,149696],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[149698,149703]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[149706,149780]},{"pos":[149787,149799],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[149801,149913]},{"pos":[149920,149927],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[149929,150056]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[150057,150150]},{"pos":[150156,150173],"content":"Method dataSource","linkify":"Method dataSource","nodes":[{"content":"Method dataSource","pos":[0,17]}]},{"content":"Gets or sets a data source that should be used by the control or the form.","pos":[150175,150249]},{"pos":[150300,150310],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[150312,150317]},{"content":"The value to assign as the data source for the combo box control; optional.","pos":[150320,150395]},{"pos":[150402,150414],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the data source that should be used.","pos":[150416,150470]},{"pos":[150477,150485],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to set and return the data source for the combo box control.","pos":[150487,150579]},{"pos":[150828,150848],"content":"Method displayLength","linkify":"Method displayLength","nodes":[{"content":"Method displayLength","pos":[0,20]}]},{"pos":[150915,150925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[150927,150932]},{"content":"mode","pos":[150946,150950]},{"pos":[150959,150971],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[150977,151001],"content":"Method displayLengthMode","linkify":"Method displayLengthMode","nodes":[{"content":"Method displayLengthMode","pos":[0,24]}]},{"pos":[151064,151074],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[151076,151080]},{"pos":[151089,151101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[151107,151132],"content":"Method displayLengthValue","linkify":"Method displayLengthValue","nodes":[{"content":"Method displayLengthValue","pos":[0,25]}]},{"pos":[151187,151197],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[151199,151204]},{"pos":[151213,151225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[151231,151251],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[151253,151420]},{"pos":[151470,151480],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[151482,151487]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[151490,151564]},{"pos":[151571,151583],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[151585,151713]},{"pos":[151719,151734],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether drag-and-drop operations are enabled or disabled for the control.","pos":[151736,151820]},{"pos":[151865,151875],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[151877,151882]},{"content":"An integer value that indicates whether drag-and-drop behavior is enabled; optional.","pos":[151885,151969]},{"pos":[151976,151988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[151990,152050]},{"pos":[152057,152065],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return or set the value that indicates whether drag-and-drop behavior is enabled.","pos":[152067,152183]},{"pos":[152462,152477],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[152479,152573]},{"pos":[152667,152677],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[152679,152689]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[152692,152777]},{"content":"dragMode","pos":[152789,152797]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[152800,152885]},{"content":"x","pos":[152897,152898]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[152901,152986]},{"content":"y","pos":[152998,152999]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[153002,153087]},{"pos":[153094,153106],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[153108,153173]},{"pos":[153179,153196],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[153198,153294]},{"pos":[153384,153394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[153396,153406]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[153409,153494]},{"content":"dragMode","pos":[153506,153514]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[153517,153602]},{"content":"x","pos":[153614,153615]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[153618,153703]},{"content":"y","pos":[153715,153716]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[153719,153804]},{"pos":[153811,153823],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[153825,153890]},{"pos":[153896,153911],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Returns the text that is displayed when the form combo box control is dragged.","pos":[153913,153991]},{"pos":[154025,154037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the combo box control is dragged; an empty string if there is no text to display when the combo box control is dragged.","pos":[154039,154190]},{"pos":[154196,154210],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether the object is enabled or disabled.","pos":[154212,154265]},{"pos":[154317,154327],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[154329,154334]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[154337,154409]},{"pos":[154416,154428],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[154430,154478]},{"pos":[154485,154492],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property lets you enable or disable controls at run time.","pos":[154494,154563]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[154564,154659]},{"content":"You can also disable a control that is used only for display purposes, such as an error message that provides read-only information.","pos":[154660,154792]},{"pos":[154799,154807],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the enabled property for a control.","pos":[154809,154894]},{"pos":[155059,155074],"content":"Method enumType","linkify":"Method enumType","nodes":[{"content":"Method enumType","pos":[0,15]}]},{"pos":[155125,155135],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155137,155142]},{"pos":[155151,155163],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155169,155189],"content":"Method enumTypeValue","linkify":"Method enumTypeValue","nodes":[{"content":"Method enumTypeValue","pos":[0,20]}]},{"pos":[155231,155243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155249,155272],"content":"Method extendedDataType","linkify":"Method extendedDataType","nodes":[{"content":"Method extendedDataType","pos":[0,23]}]},{"pos":[155347,155357],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155359,155364]},{"pos":[155373,155385],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155391,155412],"content":"Method fastTabSummary","linkify":"Method fastTabSummary","nodes":[{"content":"Method fastTabSummary","pos":[0,21]}]},{"pos":[155463,155473],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155475,155480]},{"pos":[155489,155501],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155507,155518],"content":"Method find","linkify":"Method find","nodes":[{"content":"Method find","pos":[0,11]}]},{"pos":[155558,155568],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[155570,155576]},{"pos":[155585,155597],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[155603,155614],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font that should be used for the control.","pos":[155616,155686]},{"pos":[155727,155737],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[155739,155744]},{"content":"A String data type that indicates the font to use for text in a form combo box control; optional.","pos":[155747,155844]},{"pos":[155851,155863],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font that should be used, such as Tahoma or Verdana.","pos":[155865,155933]},{"pos":[155940,155948],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the font for a form combo box control.","pos":[155950,156038]},{"pos":[156275,156290],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font that should be used for the control.","pos":[156292,156362]},{"pos":[156407,156417],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[156419,156424]},{"content":"An Integer data type that indicates the font size in points for text in a form combo box control; optional.","pos":[156427,156534]},{"pos":[156541,156553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[156555,156588]},{"pos":[156595,156603],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the font size for a form combo box control.","pos":[156605,156698]},{"pos":[156921,156943],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[156945,156996]},{"pos":[157048,157058],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[157060,157065]},{"pos":[157074,157086],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[157088,157132]},{"pos":[157139,157146],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[157148,157216]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[157222,157292]},{"content":"The second byte contains a value for green.","pos":[157297,157340]},{"content":"The third byte contains a value for blue.","pos":[157345,157386]},{"content":"The high-order byte must be zero.","pos":[157391,157424]},{"content":"The maximum value for a single byte is 255.","pos":[157429,157472]},{"pos":[157478,157496],"content":"Method getEditText","linkify":"Method getEditText","nodes":[{"content":"Method getEditText","pos":[0,18]}]},{"pos":[157533,157545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157551,157565],"content":"Method getText","linkify":"Method getText","nodes":[{"content":"Method getText","pos":[0,14]}]},{"pos":[157607,157617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"index","pos":[157619,157624]},{"pos":[157633,157645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[157651,157668],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the form combo box control have changed.","pos":[157670,157773]},{"pos":[157826,157836],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[157838,157841]},{"content":"A value to assign as the hasChanged value for the combo box control; optional.","pos":[157844,157922]},{"pos":[157929,157941],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the combo box control have changed; otherwise, false.","pos":[157943,158020]},{"pos":[158027,158035],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the value that indicates whether the contents of the combo box control have changed.","pos":[158037,158171]},{"pos":[158438,158459],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[158461,158516]},{"pos":[158560,158572],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[158574,158637]},{"pos":[158643,158656],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control in pixels.","pos":[158658,158707]},{"pos":[158760,158770],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[158772,158777]},{"content":"An integer value that indicates how the height is calculated; optional.","pos":[158780,158851]},{"content":"mode","pos":[158863,158867]},{"content":"An integer value that indicates how the height is calculated; optional.","pos":[158870,158941]},{"pos":[158948,158960],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[158962,158998]},{"pos":[159005,159012],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[159014,159067]},{"content":"Calculate the height according to the following table.","pos":[159068,159122]},{"content":"Mode","pos":[159126,159130]},{"content":"Height calculation","pos":[159146,159164]},{"content":"-1 – Exact","pos":[159356,159366]},{"content":"The exact height of the control in pixels is used.","pos":[159376,159426]},{"content":"0 – Auto","pos":[159471,159479]},{"content":"The height of the control is calculated automatically, and the value parameter is ignored.","pos":[159491,159581]},{"content":"1 – Column height","pos":[159586,159603]},{"content":"The layout of the form determines the height of the control.","pos":[159606,159666]},{"content":"The height and height calculation mode can be set separately.","pos":[159700,159761]},{"pos":[159767,159784],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[159786,159848]},{"pos":[159895,159905],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[159907,159912]},{"content":"An integer value that indicates how the height of the control is calculated; optional.","pos":[159915,160001]},{"pos":[160008,160020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[160022,160043]},{"pos":[160050,160057],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[160059,160113]},{"content":"Mode","pos":[160117,160121]},{"content":"Height calculation","pos":[160133,160151]},{"content":"Exact","pos":[160339,160344]},{"content":"The exact height of the control in pixels is used.","pos":[160355,160405]},{"content":"Auto","pos":[160450,160454]},{"content":"The height of the control is calculated automatically, and the value parameter is ignored.","pos":[160466,160556]},{"content":"Column height","pos":[160561,160574]},{"content":"The layout of the form determines the height of the control.","pos":[160577,160637]},{"content":"The height of the control might change when the calculation mode is set to Auto or Column height.","pos":[160671,160768]},{"pos":[160775,160783],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the height calculation mode for a form combo box control:","pos":[160785,160892]},{"pos":[161190,161208],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[161210,161249]},{"pos":[161297,161307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[161309,161314]},{"content":"An integer value that specifies the height in pixels; optional.","pos":[161317,161380]},{"pos":[161387,161399],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[161401,161422]},{"pos":[161429,161436],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the Exact height calculation mode is used.","pos":[161438,161528]},{"pos":[161535,161543],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the height value of a combo box control.","pos":[161545,161635]},{"pos":[161914,161930],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Returns the Help text for the control.","pos":[161932,161970]},{"pos":[162005,162017],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[162019,162107]},{"pos":[162114,162121],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[162123,162193]},{"content":"Use the helpText method to set the value of the Help text.","pos":[162194,162252]},{"pos":[162259,162267],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to use the helpField method.","pos":[162269,162329]},{"pos":[162386,162401],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.","pos":[162403,162514]},{"pos":[162559,162569],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[162571,162576]},{"content":"The value to assign as the Help text for the control; optional.","pos":[162579,162642]},{"pos":[162649,162661],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that should be displayed at the bottom of the screen.","pos":[162663,162727]},{"pos":[162734,162741],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[162743,162811]},{"content":"The Help text must not exceed 250 characters.","pos":[162812,162857]},{"pos":[162864,162872],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to set and return the Help text for a control.","pos":[162874,162952]},{"pos":[163149,163170],"content":"Method hideFirstEntry","linkify":"Method hideFirstEntry","nodes":[{"content":"Method hideFirstEntry","pos":[0,21]}]},{"content":"Sets or returns a value that indicates whether the first entry in the combo box control is hidden.","pos":[163172,163270]},{"pos":[163329,163339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[163341,163346]},{"content":"A value that indicates whether the first entry in the combo box control is hidden; optional.","pos":[163349,163441]},{"pos":[163448,163460],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the first entry in the combo box control is hidden; otherwise, false.","pos":[163462,163539]},{"pos":[163546,163553],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"By hiding the first entry in the combo box control, you enable the control to emulate the behavior of an enum database field where the Mandatory property is set to Yes.","pos":[163555,163723]},{"pos":[163730,163738],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the value that indicates whether the first entry in the combo box control is hidden.","pos":[163740,163874]},{"pos":[164179,164201],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[164203,164266]},{"pos":[164318,164328],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[164330,164335]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[164338,164405]},{"pos":[164412,164424],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[164426,164476]},{"pos":[164482,164493],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Returns the Windows handle for the control.","pos":[164495,164538]},{"pos":[164568,164580],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[164582,164609]},{"pos":[164616,164623],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[164625,164669]},{"pos":[164676,164684],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve the Windows handle for a control.","pos":[164686,164763]},{"pos":[164838,164856],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"content":"Returns a value that indicates whether the control is a container.","pos":[164858,164924]},{"pos":[164965,164977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is a container; otherwise, false.","pos":[164979,165032]},{"pos":[165039,165047],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to determine whether a control is a container.","pos":[165049,165127]},{"pos":[165191,165209],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Returns a value that indicates whether the control is displayed.","pos":[165211,165275]},{"pos":[165316,165328],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[165330,165381]},{"pos":[165388,165395],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[165397,165465]},{"pos":[165472,165480],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to determine whether a control is visible.","pos":[165482,165556]},{"pos":[165620,165639],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[165641,165708]},{"pos":[165750,165762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[165764,165816]},{"pos":[165822,165847],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[165849,165948]},{"pos":[166017,166027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[166029,166046]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[166049,166177]},{"pos":[166184,166196],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[166198,166357]},{"pos":[166364,166371],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[166373,166450]},{"content":"FormAllowUserSetup::No 0","pos":[166790,166814]},{"content":"No changes can be made to the control.","pos":[166825,166863]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[166864,166953]},{"content":"FormAllowUserSetup::Restricted 1","pos":[166958,166990]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[166993,167085]},{"content":"The user cannot move the control.","pos":[167086,167119]},{"content":"FormAllowUserSetup::Yes 2","pos":[167126,167151]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[167161,167253]},{"content":"The user can also move the control.","pos":[167254,167289]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must be at least as high as the level that is specified by the neededSetupRights parameter.","pos":[167293,167485]},{"pos":[167492,167500],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to determine the user setup rights for a control.","pos":[167502,167583]},{"pos":[168197,168211],"content":"Method isValid","linkify":"Method isValid","nodes":[{"content":"Method isValid","pos":[0,14]}]},{"pos":[168248,168260],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168266,168279],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"content":"Sets or returns a value that indicates whether the text in the control is italic.","pos":[168281,168362]},{"pos":[168413,168423],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168425,168430]},{"content":"The value to assign to the italic setting of the control; optional.","pos":[168433,168500]},{"pos":[168507,168519],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is italic; otherwise, false.","pos":[168521,168581]},{"pos":[168587,168598],"content":"Method item","linkify":"Method item","nodes":[{"content":"Method item","pos":[0,11]}]},{"pos":[168639,168649],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168651,168656]},{"pos":[168665,168677],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168683,168695],"content":"Method items","linkify":"Method items","nodes":[{"content":"Method items","pos":[0,12]}]},{"pos":[168737,168747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168749,168754]},{"pos":[168763,168775],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[168781,168793],"content":"Method label","linkify":"Method label","nodes":[{"content":"Method label","pos":[0,12]}]},{"content":"Gets or sets the label for a control.","pos":[168795,168832]},{"pos":[168874,168884],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[168886,168891]},{"content":"The value to assign as the label of the control; optional.","pos":[168894,168952]},{"pos":[168959,168971],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The current value of the label string.","pos":[168973,169011]},{"pos":[169018,169025],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The label determines the text that is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.","pos":[169027,169162]},{"pos":[169169,169177],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the label of the control.","pos":[169179,169254]},{"pos":[169412,169433],"content":"Method labelAlignment","linkify":"Method labelAlignment","nodes":[{"content":"Method labelAlignment","pos":[0,21]}]},{"pos":[169484,169494],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[169496,169501]},{"pos":[169510,169522],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[169528,169544],"content":"Method labelBold","linkify":"Method labelBold","nodes":[{"content":"Method labelBold","pos":[0,16]}]},{"content":"Sets or returns a value that indicates the bold setting for the label in the control.","pos":[169546,169631]},{"pos":[169677,169687],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[169689,169694]},{"content":"The value to assign to the label bold setting.","pos":[169697,169743]},{"content":"This can be one of the values from the ReportControlBold enumeration.","pos":[169744,169813]},{"pos":[169820,169832],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A value from the ReportControlBold enumeration that indicates the bold setting for the label in the control.","pos":[169834,169942]},{"pos":[169948,169972],"content":"Method labelCharacterSet","linkify":"Method labelCharacterSet","nodes":[{"content":"Method labelCharacterSet","pos":[0,24]}]},{"pos":[170026,170036],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170038,170043]},{"pos":[170052,170064],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[170070,170086],"content":"Method labelFont","linkify":"Method labelFont","nodes":[{"content":"Method labelFont","pos":[0,16]}]},{"content":"Sets or returns a font for the label text in a form combo box control.","pos":[170088,170158]},{"pos":[170204,170214],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170216,170221]},{"content":"A String data type that indicates the font for the label text in a form combo box control; optional.","pos":[170224,170324]},{"pos":[170331,170343],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A String data type value that indicates the font for the label text in a form combo box control.","pos":[170345,170441]},{"pos":[170448,170456],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the font for the label text in a form combo box control.","pos":[170458,170564]},{"pos":[170823,170843],"content":"Method labelFontSize","linkify":"Method labelFontSize","nodes":[{"content":"Method labelFontSize","pos":[0,20]}]},{"content":"Sets or returns the font size in points for the label text in a form combo box control.","pos":[170845,170932]},{"pos":[170982,170992],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[170994,170999]},{"content":"An Integer data type that indicates the font size in points for the label text in a form combo box control; optional.","pos":[171002,171119]},{"pos":[171126,171138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An Integer data type value that indicates the label font size in points for the text in a form combo box control.","pos":[171140,171253]},{"pos":[171260,171268],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the label font size for a form combo box control.","pos":[171270,171369]},{"pos":[171614,171641],"content":"Method labelForegroundColor","linkify":"Method labelForegroundColor","nodes":[{"content":"Method labelForegroundColor","pos":[0,27]}]},{"pos":[171698,171708],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171710,171715]},{"pos":[171724,171736],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171742,171759],"content":"Method labelGuide","linkify":"Method labelGuide","nodes":[{"content":"Method labelGuide","pos":[0,17]}]},{"pos":[171806,171816],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171818,171823]},{"pos":[171832,171844],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171850,171868],"content":"Method labelHeight","linkify":"Method labelHeight","nodes":[{"content":"Method labelHeight","pos":[0,18]}]},{"pos":[171926,171936],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[171938,171943]},{"content":"mode","pos":[171957,171961]},{"pos":[171970,171982],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[171988,172010],"content":"Method labelHeightMode","linkify":"Method labelHeightMode","nodes":[{"content":"Method labelHeightMode","pos":[0,22]}]},{"pos":[172062,172072],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[172074,172079]},{"pos":[172088,172100],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[172106,172129],"content":"Method labelHeightValue","linkify":"Method labelHeightValue","nodes":[{"content":"Method labelHeightValue","pos":[0,23]}]},{"pos":[172182,172192],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[172194,172199]},{"pos":[172208,172220],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[172226,172244],"content":"Method labelItalic","linkify":"Method labelItalic","nodes":[{"content":"Method labelItalic","pos":[0,18]}]},{"content":"Sets or returns a value that indicates whether the text in the label of the control is italic.","pos":[172246,172340]},{"pos":[172396,172406],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[172408,172413]},{"content":"The value to assign to the italic setting of the label of the control; optional.","pos":[172416,172496]},{"pos":[172503,172515],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the label of the control is italic; otherwise, false.","pos":[172517,172590]},{"pos":[172596,172621],"content":"Method labelMouseDblClick","linkify":"Method labelMouseDblClick","nodes":[{"content":"Method labelMouseDblClick","pos":[0,25]}]},{"content":"Is called when the label for the control is double-clicked by the user.","pos":[172623,172694]},{"pos":[172791,172801],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[172803,172804]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[172807,172868]},{"content":"y","pos":[172880,172881]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[172884,172945]},{"content":"button","pos":[172957,172963]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[172966,173027]},{"content":"Ctrl","pos":[173039,173043]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[173046,173107]},{"content":"Shift","pos":[173119,173124]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[173127,173188]},{"pos":[173195,173207],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[173209,173248]},{"pos":[173255,173262],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[173264,173368]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[173369,173504]},{"pos":[173511,173519],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to display the parameters of a labelMouseDblClick event in the Infolog.","pos":[173521,173624]},{"pos":[174228,174249],"content":"Method labelMouseDown","linkify":"Method labelMouseDown","nodes":[{"content":"Method labelMouseDown","pos":[0,21]}]},{"content":"Is called when the user clicks the mouse button over the label for the control.","pos":[174251,174330]},{"pos":[174423,174433],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[174435,174436]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[174439,174500]},{"content":"y","pos":[174512,174513]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[174516,174577]},{"content":"button","pos":[174589,174595]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[174598,174659]},{"content":"Ctrl","pos":[174671,174675]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[174678,174739]},{"content":"Shift","pos":[174751,174756]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[174759,174820]},{"pos":[174827,174839],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[174841,174880]},{"pos":[174887,174894],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[174896,175000]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[175001,175136]},{"pos":[175143,175151],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to display the parameters of a labelMouseDown event in the Infolog.","pos":[175153,175252]},{"pos":[175841,175860],"content":"Method labelMouseUp","linkify":"Method labelMouseUp","nodes":[{"content":"Method labelMouseUp","pos":[0,19]}]},{"content":"Is called when the user releases the mouse button over the label for the control.","pos":[175862,175943]},{"pos":[176034,176044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[176046,176047]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[176050,176111]},{"content":"y","pos":[176123,176124]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[176127,176188]},{"content":"button","pos":[176200,176206]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[176209,176270]},{"content":"Ctrl","pos":[176282,176286]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[176289,176350]},{"content":"Shift","pos":[176362,176367]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[176370,176431]},{"pos":[176438,176450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[176452,176491]},{"pos":[176498,176505],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[176507,176611]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[176612,176747]},{"pos":[176754,176762],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to display the parameters of a labelMouseUp event in the Infolog.","pos":[176764,176861]},{"pos":[177459,177479],"content":"Method labelPosition","linkify":"Method labelPosition","nodes":[{"content":"Method labelPosition","pos":[0,20]}]},{"content":"Sets or returns the position of the label for the control.","pos":[177481,177539]},{"pos":[177589,177599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[177601,177606]},{"content":"The value to assign to the label position; optional.","pos":[177609,177661]},{"pos":[177668,177680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that represents the position of the label.","pos":[177682,177735]},{"pos":[177742,177749],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the value parameter is set to 0 (zero), the label is put to the left of the control.","pos":[177751,177838]},{"content":"If the value parameter is set to 1, the label is put above the control.","pos":[177839,177910]},{"content":"A return value of 0 (zero) indicates that the label is put to the left of the control.","pos":[177911,177997]},{"content":"A return value of 1 indicates that the label is put above the control.","pos":[177998,178068]},{"pos":[178075,178083],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the label position.","pos":[178085,178154]},{"pos":[178338,178359],"content":"Method labelUnderline","linkify":"Method labelUnderline","nodes":[{"content":"Method labelUnderline","pos":[0,21]}]},{"content":"Sets or returns a value that indicates whether the text in the label of the control is underlined.","pos":[178361,178459]},{"pos":[178518,178528],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178530,178535]},{"content":"The value to assign to the underline setting of the label of the control; optional.","pos":[178538,178621]},{"pos":[178628,178640],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the label of the control is underlined; otherwise, false.","pos":[178642,178719]},{"pos":[178725,178742],"content":"Method labelWidth","linkify":"Method labelWidth","nodes":[{"content":"Method labelWidth","pos":[0,17]}]},{"pos":[178799,178809],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178811,178816]},{"content":"mode","pos":[178830,178834]},{"pos":[178843,178855],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178861,178882],"content":"Method labelWidthMode","linkify":"Method labelWidthMode","nodes":[{"content":"Method labelWidthMode","pos":[0,21]}]},{"pos":[178933,178943],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[178945,178950]},{"pos":[178959,178971],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[178977,178999],"content":"Method labelWidthValue","linkify":"Method labelWidthValue","nodes":[{"content":"Method labelWidthValue","pos":[0,22]}]},{"pos":[179051,179061],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179063,179068]},{"pos":[179077,179089],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[179095,179107],"content":"Method leave","linkify":"Method leave","nodes":[{"content":"Method leave","pos":[0,12]}]},{"pos":[179142,179154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[179160,179171],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[179173,179237]},{"pos":[179288,179298],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179300,179305]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[179308,179394]},{"content":"mode","pos":[179406,179410]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[179413,179499]},{"pos":[179506,179518],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[179520,179571]},{"pos":[179577,179592],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[179594,179655]},{"pos":[179700,179710],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[179712,179717]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[179720,179806]},{"pos":[179813,179825],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[179827,179883]},{"pos":[179889,179905],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[179907,179971]},{"pos":[180017,180027],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[180029,180034]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[180037,180118]},{"pos":[180125,180137],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[180139,180190]},{"pos":[180196,180216],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[180218,180271]},{"pos":[180329,180339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[180341,180346]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[180349,180443]},{"pos":[180450,180462],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[180464,180537]},{"pos":[180543,180558],"content":"Method modified","linkify":"Method modified","nodes":[{"content":"Method modified","pos":[0,15]}]},{"pos":[180596,180608],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[180614,180634],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[180636,180693]},{"pos":[180785,180795],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[180797,180798]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[180801,180862]},{"content":"y","pos":[180874,180875]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[180878,180939]},{"content":"button","pos":[180951,180957]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[180960,181021]},{"content":"Ctrl","pos":[181033,181037]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[181040,181101]},{"content":"Shift","pos":[181113,181118]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[181121,181182]},{"pos":[181189,181201],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[181203,181242]},{"pos":[181249,181257],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[181259,181363]},{"content":"The following example shows how to display the parameters of a mouseDblClick event in the Infolog.","pos":[181364,181462]},{"pos":[182027,182043],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[182045,182110]},{"pos":[182198,182208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[182210,182211]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[182214,182275]},{"content":"y","pos":[182287,182288]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[182291,182352]},{"content":"button","pos":[182364,182370]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[182373,182434]},{"content":"Ctrl","pos":[182446,182450]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[182453,182514]},{"content":"Shift","pos":[182526,182531]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[182534,182595]},{"pos":[182602,182614],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[182616,182655]},{"pos":[182662,182669],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[182671,182775]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[182776,182911]},{"pos":[182918,182926],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to display the parameters of a mouseDown event in the Infolog.","pos":[182928,183022]},{"pos":[183614,183630],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[183632,183697]},{"pos":[183785,183795],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[183797,183798]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[183801,183862]},{"content":"y","pos":[183874,183875]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[183878,183939]},{"content":"button","pos":[183951,183957]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[183960,184021]},{"content":"Ctrl","pos":[184033,184037]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[184040,184101]},{"content":"Shift","pos":[184113,184118]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[184121,184182]},{"pos":[184189,184201],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[184203,184242]},{"pos":[184249,184257],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[184259,184363]},{"content":"The following example shows how to display the parameters of a mouseMove event in the Infolog.","pos":[184364,184458]},{"pos":[185006,185020],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control.","pos":[185022,185089]},{"pos":[185175,185185],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[185187,185188]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[185191,185252]},{"content":"y","pos":[185264,185265]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[185268,185329]},{"content":"button","pos":[185341,185347]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[185350,185411]},{"content":"Ctrl","pos":[185423,185427]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[185430,185491]},{"content":"Shift","pos":[185503,185508]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[185511,185572]},{"pos":[185579,185591],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[185593,185632]},{"pos":[185639,185647],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[185649,185753]},{"content":"The following example shows how to display the parameters of a mouseUp event in the Infolog.","pos":[185754,185846]},{"pos":[186384,186395],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[186397,186532]},{"pos":[186573,186583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[186585,186590]},{"content":"The name to assign to the control; optional.","pos":[186593,186637]},{"pos":[186644,186656],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[186658,186722]},{"pos":[186729,186736],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[186738,186832]},{"content":"It must start with a letter.","pos":[186838,186866]},{"content":"It cannot exceed 250 characters.","pos":[186871,186903]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[186908,186962],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[186967,187007]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[187012,187122]},{"pos":[187128,187151],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[187204,187214],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[187216,187221]},{"pos":[187230,187242],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[187248,187275],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[187327,187339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[187345,187365],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[187367,187412]},{"pos":[187459,187471],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[187473,187508]},{"pos":[187514,187535],"content":"Method previewPartRef","linkify":"Method previewPartRef","nodes":[{"content":"Method previewPartRef","pos":[0,21]}]},{"pos":[187586,187596],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[187598,187603]},{"pos":[187612,187624],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[187630,187647],"content":"Method promptrect","linkify":"Method promptrect","nodes":[{"content":"Method promptrect","pos":[0,17]}]},{"pos":[187694,187704],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[187706,187711]},{"pos":[187720,187732],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[187738,187756],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[187758,187817]},{"pos":[187885,187895],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[187897,187902]},{"content":"The ID of the security key to assign to the control; optional.","pos":[187905,187967]},{"pos":[187974,187986],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[187988,188087]},{"pos":[188094,188102],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows the retrieval and assignment of a security key ID for a control.","pos":[188104,188196]},{"pos":[188743,188759],"content":"Method selection","linkify":"Method selection","nodes":[{"content":"Method selection","pos":[0,16]}]},{"pos":[188805,188815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[188817,188822]},{"pos":[188831,188843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[188849,188871],"content":"Method selectionChange","linkify":"Method selectionChange","nodes":[{"content":"Method selectionChange","pos":[0,22]}]},{"content":"Indicates that the user has changed the selected item in the combo box control.","pos":[188873,188952]},{"pos":[188993,189005],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the event was processed successfully; otherwise, false.","pos":[189007,189070]},{"pos":[189077,189085],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how the selectionChange method can be overridden to display an Infolog message when the user changes the selected item in the combo box control.","pos":[189087,189259]},{"pos":[189421,189438],"content":"Method selectText","linkify":"Method selectText","nodes":[{"content":"Method selectText","pos":[0,17]}]},{"pos":[189484,189494],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[189496,189502]},{"pos":[189511,189523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[189529,189551],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[189553,189593]},{"pos":[189648,189658],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[189660,189670]},{"content":"The ID of the menu to show.","pos":[189673,189700]},{"pos":[189707,189719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[189721,189780]},{"pos":[189786,189802],"content":"Method showLabel","linkify":"Method showLabel","nodes":[{"content":"Method showLabel","pos":[0,16]}]},{"content":"Sets or returns a value that indicates whether the label for the control is displayed in the form.","pos":[189804,189902]},{"pos":[189956,189966],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[189968,189973]},{"content":"The value to assign to the showLabel property for the control.","pos":[189976,190038]},{"pos":[190045,190057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the label should be displayed; otherwise, false.","pos":[190059,190115]},{"pos":[190122,190130],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the showLabel property for a control.","pos":[190132,190219]},{"pos":[190376,190387],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[190389,190516]},{"pos":[190565,190575],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[190577,190582]},{"content":"The value to assign to the skip property of the control; optional.","pos":[190585,190651]},{"pos":[190658,190670],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[190672,190778]},{"pos":[190784,190795],"content":"Method sort","linkify":"Method sort","nodes":[{"content":"Method sort","pos":[0,11]}]},{"pos":[190850,190860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sortDirection","pos":[190862,190875]},{"pos":[190884,190896],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[190902,190913],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"content":"Sets or returns the text for the control.","pos":[190915,190956]},{"pos":[190997,191007],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191009,191014]},{"content":"The value to assign as the text for the control; optional.","pos":[191017,191075]},{"pos":[191082,191094],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text for the control; an empty string if no text has been assigned for the control.","pos":[191096,191183]},{"pos":[191189,191203],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Returns the tooltip text for the control.","pos":[191205,191246]},{"pos":[191279,191291],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[191293,191395]},{"pos":[191402,191409],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method can be overridden to provide a value to the toolTip method.","pos":[191411,191481]},{"pos":[191488,191496],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to override the toolTip method.","pos":[191498,191561]},{"pos":[191670,191680],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[191682,191744]},{"pos":[191794,191804],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[191806,191811]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[191814,191898]},{"content":"mode","pos":[191910,191914]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[191917,192001]},{"pos":[192008,192020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[192022,192071]},{"pos":[192077,192091],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[192093,192152]},{"pos":[192196,192206],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192208,192213]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[192216,192300]},{"pos":[192307,192319],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[192321,192375]},{"pos":[192381,192396],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[192398,192460]},{"pos":[192505,192515],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192517,192522]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[192525,192604]},{"pos":[192611,192623],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[192625,192674]},{"pos":[192680,192691],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[192732,192742],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192744,192749]},{"pos":[192758,192770],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[192776,192792],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[192794,192861]},{"pos":[192915,192925],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[192927,192932]},{"content":"The value to assign to the underline property of the control; optional.","pos":[192935,193006]},{"pos":[193013,193025],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[193027,193091]},{"pos":[193097,193124],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[193188,193198],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[193200,193204]},{"pos":[193213,193225],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[193231,193246],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[193248,193291]},{"pos":[193336,193346],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[193348,193353]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[193356,193428]},{"pos":[193435,193447],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[193449,193479]},{"pos":[193485,193504],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[193506,193554]},{"pos":[193603,193613],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[193615,193620]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[193623,193700]},{"pos":[193707,193719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[193721,193756]},{"pos":[193762,193782],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[193784,193843]},{"pos":[193893,193903],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[193905,193910]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[193913,194001]},{"pos":[194008,194020],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[194022,194068]},{"pos":[194074,194092],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[194094,194177]},{"pos":[194225,194235],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194237,194242]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[194245,194325]},{"pos":[194332,194344],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[194346,194402]},{"pos":[194408,194425],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[194427,194479]},{"pos":[194526,194536],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194538,194543]},{"content":"The user height for the control; optional.","pos":[194546,194588]},{"pos":[194595,194607],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[194609,194648]},{"pos":[194654,194669],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Returns or sets the value that indicates whether the form combo box control is hidden from the user.","pos":[194671,194771]},{"pos":[194816,194826],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[194828,194833]},{"content":"A value that indicates whether the control is hidden from the user; optional.","pos":[194836,194913]},{"pos":[194920,194932],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[194934,194989]},{"pos":[194996,195003],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a combo box control is hidden by right-clicking the control when it can be viewed or by right-clicking another control when the original control is hidden.","pos":[195005,195187]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[195188,195263]},{"content":"The userHide method lets you programmatically determine and set the value.","pos":[195264,195338]},{"pos":[195345,195353],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the value that indicates whether the combo box control is hidden from the user.","pos":[195355,195484]},{"pos":[195733,195756],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[195758,195814]},{"pos":[195867,195877],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[195879,195884]},{"content":"The organization container to set for the control; optional.","pos":[195887,195947]},{"pos":[195954,195966],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[195968,196011]},{"pos":[196017,196038],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[196040,196094]},{"pos":[196145,196155],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196157,196162]},{"content":"The organization sibling to set for the control; optional.","pos":[196165,196223]},{"pos":[196230,196242],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[196244,196285]},{"pos":[196291,196312],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[196314,196363]},{"pos":[196414,196424],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196426,196431]},{"content":"The user label text to set for the control; optional.","pos":[196434,196487]},{"pos":[196494,196506],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[196508,196544]},{"pos":[196550,196574],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[196576,196629]},{"pos":[196683,196693],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[196695,196700]},{"content":"The user security level to set for the control; optional.","pos":[196703,196760]},{"pos":[196767,196779],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[196781,196821]},{"pos":[196827,196842],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form combo box control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[196844,197002]},{"pos":[197047,197057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[197059,197064]},{"content":"The value to assign to the userSkip property; optional.","pos":[197067,197122]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[197123,197218]},{"pos":[197225,197237],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[197239,197308]},{"pos":[197315,197323],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the userSkip property.","pos":[197325,197397]},{"pos":[197645,197661],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the form combo box control in pixels.","pos":[197663,197729]},{"pos":[197775,197785],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[197787,197792]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[197795,197861]},{"pos":[197868,197880],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[197882,198011]},{"pos":[198018,198025],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[198027,198121]},{"content":"For example, if the user has specified 30 characters as the width of the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[198122,198238],"source":" For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[198239,198389]},{"pos":[198396,198404],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the user width of a form combo box control.","pos":[198406,198499]},{"pos":[198762,198777],"content":"Method validate","linkify":"Method validate","nodes":[{"content":"Method validate","pos":[0,15]}]},{"pos":[198815,198827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[198833,198855],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[198857,198918]},{"pos":[198987,198997],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[198999,199004]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[199007,199078]},{"content":"mode","pos":[199090,199094]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[199097,199168]},{"pos":[199175,199187],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[199189,199237]},{"pos":[199243,199269],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[199271,199330]},{"pos":[199395,199405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[199407,199411]},{"content":"A AutoMode enumeration value for the control; optional.","pos":[199414,199469]},{"pos":[199476,199488],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[199490,199544]},{"pos":[199550,199577],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[199579,199640]},{"pos":[199697,199707],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[199709,199714]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[199717,199795]},{"pos":[199802,199814],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[199816,199864]},{"pos":[199870,199889],"content":"Method viewEditMode","linkify":"Method viewEditMode","nodes":[{"content":"Method viewEditMode","pos":[0,19]}]},{"pos":[199938,199948],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[199950,199955]},{"pos":[199964,199976],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[199982,199996],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[199998,200068]},{"pos":[200120,200130],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200132,200137]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[200140,200212]},{"pos":[200219,200231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[200233,200282]},{"pos":[200288,200300],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[200302,200340]},{"pos":[200392,200402],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[200404,200409]},{"content":"An integer value that indicates how the width is calculated; optional.","pos":[200412,200482]},{"content":"mode","pos":[200494,200498]},{"content":"An integer value that indicates how the width is calculated; optional.","pos":[200501,200571]},{"pos":[200578,200590],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[200592,200627]},{"pos":[200634,200641],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[200643,200696]},{"content":"Calculate the width according to the following table.","pos":[200697,200750]},{"content":"Mode","pos":[200754,200758]},{"content":"Width calculation","pos":[200773,200790]},{"content":"-1 – Exact","pos":[200980,200990]},{"content":"The exact width of the control in pixels is used.","pos":[200999,201048]},{"content":"0 – Auto","pos":[201093,201101]},{"content":"The width of the control is calculated automatically, and the value parameter is ignored.","pos":[201112,201201]},{"content":"1 – Column width","pos":[201206,201222]},{"content":"The layout of the form determines the width of the control.","pos":[201225,201284]},{"content":"The width and width calculation mode can be set separately.","pos":[201318,201377]},{"pos":[201383,201399],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[201401,201463]},{"pos":[201509,201519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[201521,201526]},{"content":"An integer value that indicates how a control width is calculated.","pos":[201529,201595]},{"content":"The value can be -1 for Exact mode, 0 for Auto mode, or 1 for Column width mode.","pos":[201596,201676]},{"pos":[201683,201695],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[201697,201758]},{"pos":[201765,201772],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[201774,201827]},{"content":"Mode","pos":[201831,201835]},{"content":"Width Calculation.","pos":[201846,201864]},{"content":"Exact","pos":[202049,202054]},{"content":"The exact width of the control in pixels is used.","pos":[202064,202113]},{"content":"Auto","pos":[202158,202162]},{"content":"The width of the control is calculated automatically, and the value parameter is ignored.","pos":[202173,202262]},{"content":"Column width","pos":[202267,202279]},{"content":"The layout of the form determines the width of the control.","pos":[202282,202341]},{"content":"The width of the control might change when the calculation mode is set to Auto or Column width.","pos":[202375,202470]},{"pos":[202477,202485],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the width calculation mode for a combo box control in a form.","pos":[202487,202598]},{"pos":[202901,202918],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[202920,202958]},{"pos":[203005,203015],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[203017,203022]},{"content":"An integer value that specifies the width in pixels; optional.","pos":[203025,203087]},{"pos":[203094,203106],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[203108,203143]},{"pos":[203150,203157],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the Exact width calculation mode.","pos":[203159,203232]},{"pos":[203239,203247],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the width value of a form combo box control.","pos":[203249,203343]},{"pos":[203620,203633],"content":"Method filter","linkify":"Method filter","nodes":[{"content":"Method filter","pos":[0,13]}]},{"pos":[203681,203691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"filterStr","pos":[203693,203702]},{"pos":[203710,203731],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[203733,203754]},{"pos":[203794,203812],"content":"Method OnValidated","linkify":"Method OnValidated","nodes":[{"content":"Method OnValidated","pos":[0,18]}]},{"pos":[203897,203907],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[203909,203915]},{"content":"e","pos":[203929,203930]},{"pos":[203938,203954],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[203956,204052]},{"pos":[204087,204110],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[204112,204153]},{"pos":[204195,204212],"content":"Method OnModified","linkify":"Method OnModified","nodes":[{"content":"Method OnModified","pos":[0,17]}]},{"pos":[204296,204306],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[204308,204314]},{"content":"e","pos":[204328,204329]},{"pos":[204337,204351],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[204353,204393]},{"pos":[204426,204444],"content":"Method beginUpdate","linkify":"Method beginUpdate","nodes":[{"content":"Method beginUpdate","pos":[0,18]}]},{"pos":[204481,204498],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[204582,204592],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[204594,204600]},{"content":"e","pos":[204614,204615]},{"pos":[204623,204641],"content":"Method setEditText","linkify":"Method setEditText","nodes":[{"content":"Method setEditText","pos":[0,18]}]},{"pos":[204689,204699],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[204701,204707]},{"pos":[204715,204727],"content":"Method enter","linkify":"Method enter","nodes":[{"content":"Method enter","pos":[0,12]}]},{"pos":[204758,204776],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[204778,204849]},{"pos":[204900,204910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[204912,204921]},{"content":"The string value to use to filter data; optional.","pos":[204924,204973]},{"pos":[204979,204991],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the form combo box control into the form.","pos":[204993,205041]},{"pos":[205072,205084],"content":"Method clear","linkify":"Method clear","nodes":[{"content":"Method clear","pos":[0,12]}]},{"content":"Clears the entries in the combo box list.","pos":[205086,205127]},{"pos":[205159,205167],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to clear the entries in the combo box list.","pos":[205169,205244]},{"pos":[205269,205284],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[205286,205332]},{"pos":[205366,205384],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[205469,205479],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[205481,205487]},{"content":"e","pos":[205501,205502]},{"pos":[205510,205521],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[205523,205621]},{"pos":[205707,205717],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[205719,205729]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[205732,205817]},{"content":"dragMode","pos":[205829,205837]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[205840,205925]},{"content":"x","pos":[205937,205938]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[205941,206026]},{"content":"y","pos":[206038,206039]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[206042,206127]},{"pos":[206133,206144],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the form combo box control.","pos":[206146,206180]},{"pos":[206210,206236],"content":"Method OnSelectionChanging","linkify":"Method OnSelectionChanging","nodes":[{"content":"Method OnSelectionChanging","pos":[0,26]}]},{"pos":[206329,206339],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[206341,206347]},{"content":"e","pos":[206361,206362]},{"pos":[206370,206384],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form combo box control.","pos":[206386,206457]},{"pos":[206491,206498],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[206500,206628]},{"content":"To drag the control, the user presses the mouse button in the control area and then moves the mouse pointer.","pos":[206629,206737]},{"pos":[206744,206752],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example displays a message in the Infolog when the user has finished dragging the form combo box control.","pos":[206754,206873]},{"pos":[206974,206987],"content":"Method lookup","linkify":"Method lookup","nodes":[{"content":"Method lookup","pos":[0,13]}]},{"pos":[207019,207034],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[207036,207066]},{"pos":[207100,207113],"content":"Method insert","linkify":"Method insert","nodes":[{"content":"Method insert","pos":[0,13]}]},{"content":"Inserts a string value into the combo box list at the specified position.","pos":[207115,207188]},{"pos":[207242,207252],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[207254,207260]},{"content":"The position to insert the string after.","pos":[207263,207303]},{"content":"If you want the string to be the first item in the list, set the value to 0 (zero).","pos":[207304,207387]},{"content":"index","pos":[207399,207404]},{"content":"The position to insert the string after.","pos":[207407,207447]},{"content":"If you want the string to be the first item in the list, set the value to 0 (zero).","pos":[207448,207531]},{"pos":[207538,207546],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to insert a string into the combo box list.","pos":[207548,207623]},{"pos":[207660,207677],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control.","pos":[207679,207744]},{"pos":[207834,207844],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[207846,207847]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[207850,207911]},{"content":"y","pos":[207923,207924]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[207927,207988]},{"content":"button","pos":[208000,208006]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[208009,208070]},{"content":"Ctrl","pos":[208082,208086]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[208089,208150]},{"content":"Shift","pos":[208162,208167]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[208170,208231]},{"pos":[208238,208246],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to display the parameters of a mouseEnter event in the Infolog.","pos":[208248,208343]},{"pos":[208873,208887],"content":"Method OnEnter","linkify":"Method OnEnter","nodes":[{"content":"Method OnEnter","pos":[0,14]}]},{"pos":[208968,208978],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[208980,208986]},{"content":"e","pos":[209000,209001]},{"pos":[209009,209022],"content":"Method delete","linkify":"Method delete","nodes":[{"content":"Method delete","pos":[0,13]}]},{"content":"Removes a string value from the combo box list.","pos":[209024,209071]},{"pos":[209114,209124],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[209126,209132]},{"content":"The string value to remove from the combo box list.","pos":[209135,209186]},{"pos":[209193,209201],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to remove a string value from the combo box list.","pos":[209203,209284]},{"pos":[209323,209352],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[209470,209480],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[209482,209498]},{"content":"objectMethodToCall","pos":[209512,209530]},{"content":"overrideObject","pos":[209544,209558]},{"pos":[209566,209576],"content":"Method add","linkify":"Method add","nodes":[{"content":"Method add","pos":[0,10]}]},{"content":"Adds a string value to the combo box list.","pos":[209578,209620]},{"pos":[209660,209670],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"string","pos":[209672,209678]},{"content":"The string value to add to the combo box list.","pos":[209681,209727]},{"pos":[209734,209741],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The string is added to the end of the list.","pos":[209743,209786]},{"content":"If you want to put the string in a specific position in the list, use the insert method.","pos":[209787,209875]},{"pos":[209882,209890],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to add a string to the combo box list.","pos":[209892,209962]},{"pos":[210037,210058],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form combo box control.","pos":[210060,210139]},{"pos":[210201,210211],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[210213,210218]},{"content":"The preferred height of the control.","pos":[210221,210257]},{"content":"height","pos":[210269,210275]},{"content":"The preferred height of the control.","pos":[210278,210314]},{"pos":[210321,210329],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to set the preferred width and height of a combo box control.","pos":[210331,210424]},{"pos":[210660,210679],"content":"Method OnValidating","linkify":"Method OnValidating","nodes":[{"content":"Method OnValidating","pos":[0,19]}]},{"pos":[210765,210775],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[210777,210783]},{"content":"e","pos":[210797,210798]},{"pos":[210806,210817],"content":"Method undo","linkify":"Method undo","nodes":[{"content":"Method undo","pos":[0,11]}]},{"pos":[210847,210861],"content":"Method jumpRef","linkify":"Method jumpRef","nodes":[{"content":"Method jumpRef","pos":[0,14]}]},{"pos":[210894,210919],"content":"Method OnSelectionChanged","linkify":"Method OnSelectionChanged","nodes":[{"content":"Method OnSelectionChanged","pos":[0,25]}]},{"pos":[211011,211021],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[211023,211029]},{"content":"e","pos":[211043,211044]},{"pos":[211052,211068],"content":"Method endUpdate","linkify":"Method endUpdate","nodes":[{"content":"Method endUpdate","pos":[0,16]}]},{"pos":[211103,211119],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[211121,211163]},{"pos":[211198,211215],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[211217,211271]},{"pos":[211307,211322],"content":"Method OnLookup","linkify":"Method OnLookup","nodes":[{"content":"Method OnLookup","pos":[0,15]}]},{"pos":[211404,211414],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[211416,211422]},{"content":"e","pos":[211436,211437]},{"pos":[211445,211455],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[211457,211490]},{"pos":[211519,211532],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[211534,211634]},{"pos":[211716,211726],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[211728,211738]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[211741,211826]},{"content":"dragMode","pos":[211838,211846]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[211849,211934]},{"content":"x","pos":[211946,211947]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[211950,212035]},{"content":"y","pos":[212047,212048]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[212051,212136]},{"pos":[212142,212158],"content":"Method OnLeaving","linkify":"Method OnLeaving","nodes":[{"content":"Method OnLeaving","pos":[0,16]}]},{"pos":[212241,212251],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[212253,212259]},{"content":"e","pos":[212273,212274]},{"pos":[212282,212300],"content":"Method setDropSize","linkify":"Method setDropSize","nodes":[{"content":"Method setDropSize","pos":[0,18]}]},{"pos":[212349,212359],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lines","pos":[212361,212366]},{"pos":[212373,212403],"content":"Class FormCommandButtonControl","linkify":"Class FormCommandButtonControl","nodes":[{"content":"Class FormCommandButtonControl","pos":[0,30]}]},{"pos":[212464,212471],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[212477,212485],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[212491,212498],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[212502,212508]},{"content":"Description","pos":[212612,212623]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[213066,213112],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether to align the control.","pos":[213176,213216]},{"content":"public int alignment(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[213348,213383],"source":"public int alignment(\\[int value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[213630,213673],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can change the contents of the control.","pos":[213740,213807]},{"content":"public boolean allowSysSetup()","pos":[213912,213942]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[214022,214105]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[214194,214243],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[214304,214402]},{"content":"public boolean autoRefreshData(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[214476,214525],"source":"public boolean autoRefreshData(\\[boolean value\\])"},{"content":"public int backgroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[214758,214799],"source":"public int backgroundColor(\\[int value\\])"},{"content":"Gets or sets the background color of the control.","pos":[214868,214917]},{"content":"public int backStyle(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[215040,215075],"source":"public int backStyle(\\[int value\\])"},{"content":"Determiness whether the control background can be transparent.","pos":[215150,215212]},{"content":"public int beginDrag(int x, int y)","pos":[215322,215356]},{"content":"Is called when the user starts to drag a form control.","pos":[215432,215486]},{"content":"public boolean big(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[215604,215641],"source":"public boolean big(\\[boolean value\\])"},{"content":"public int bold(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[215886,215916],"source":"public int bold(\\[int value\\])"},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[215996,216063]},{"content":"public int border(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[216168,216200],"source":"public int border(\\[int value\\])"},{"content":"Gets or sets the style of the borderline of the control.","pos":[216278,216334]},{"content":"public int buttonDisplay(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[216450,216489],"source":"public int buttonDisplay(\\[int value\\])"},{"content":"Gets or sets the appearance of the button control.","pos":[216560,216610]},{"content":"public container calcControlSize(int chars, int lines)","pos":[216732,216786]},{"content":"Retrieves the size of the control.","pos":[216842,216876]},{"content":"public str caption(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[217014,217047],"source":"public str caption(\\[str value\\])"},{"content":"Gets or set the caption of the control.","pos":[217124,217163]},{"content":"public int characterSet(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[217296,217334],"source":"public int characterSet(\\[int value\\])"},{"content":"Gets or sets the character set of the font.","pos":[217406,217449]},{"content":"public int colorScheme(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[217578,217615],"source":"public int colorScheme(\\[int value\\])"},{"content":"Gets or sets the color scheme of the control.","pos":[217688,217733]},{"content":"public int command(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[217860,217893],"source":"public int command(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[218142,218214],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[218252,218319]},{"content":"public List configurationKeyEx()","pos":[218424,218456]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[218534,218630]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[218706,218750],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[218816,218894]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[218988,219030],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[219098,219223]},{"content":"public boolean defaultButton(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[219270,219317],"source":"public boolean defaultButton(\\[boolean value\\])"},{"content":"Determines whether the button should be the default button in the form.","pos":[219380,219451]},{"content":"public str disabledImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[219552,219591],"source":"public str disabledImage(\\[str value\\])"},{"content":"Gets or sets the disabled image of the button.","pos":[219662,219708]},{"content":"public int disabledImageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[219834,219881],"source":"public int disabledImageLocation(\\[int value\\])"},{"content":"public int disabledResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[220116,220158],"source":"public int disabledResource(\\[int value\\])"},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[220226,220304]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[220398,220437],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[220508,220675]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[220680,220714],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[220790,220871]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[220962,221043]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[221072,221166]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[221244,221321]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[221354,221450]},{"content":"public str dragText()","pos":[221526,221547]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[221636,221706]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[221808,221849],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether to enable or disable the object.","pos":[221918,221969]},{"content":"public str font(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[222090,222120],"source":"public str font(\\[str value\\])"},{"content":"Gets or sets the name of the font for the control to use.","pos":[222200,222257]},{"content":"public int fontSize(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[222372,222406],"source":"public int fontSize(\\[int value\\])"},{"content":"Gets or sets the size of the font for the control to use.","pos":[222482,222539]},{"content":"public boolean forcedToOverflow(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[222654,222704],"source":"public boolean forcedToOverflow(\\[boolean value\\])"},{"content":"public int foregroundColor(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[222936,222977],"source":"public int foregroundColor(\\[int value\\])"},{"content":"Gets or sets the text color for the control to use.","pos":[223046,223097]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[223218,223260],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[223328,223416]},{"content":"public boolean hasUserSetting()","pos":[223500,223531]},{"content":"Indicates whether the control has custom user settings.","pos":[223610,223665]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[223782,223824],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[223892,223931]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[224064,224100],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[224174,224236]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[224346,224383],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[224456,224495]},{"content":"public str helpField()","pos":[224628,224650]},{"content":"Retrieves the Help text for the control.","pos":[224738,224778]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[224910,224944],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[225020,225124]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[225192,225233],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[225302,225365]},{"content":"public int hWnd()","pos":[225474,225491]},{"content":"Retrieves the Windows handle for the control.","pos":[225584,225629]},{"content":"public int imageLocation(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[225756,225795],"source":"public int imageLocation(\\[int value\\])"},{"content":"public boolean isContainer()","pos":[226038,226066]},{"content":"public boolean isDisplayed()","pos":[226320,226348]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[226430,226496]},{"content":"public boolean isRestricted()","pos":[226602,226631]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[226712,226779]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[226884,226940]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[226994,227093]},{"content":"public boolean italic(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[227166,227206],"source":"public boolean italic(\\[boolean value\\])"},{"content":"public str keyTip(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[227448,227480],"source":"public str keyTip(\\[str value\\])"},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[227730,227770],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[227840,227904]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[228012,228046],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[228122,228183]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[228294,228329],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[228404,228468]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[228576,228623],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[228686,228739]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[228858,228937]},{"content":"Is called when the control is double-clicked by the user.","pos":[228968,229025]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[229140,229215]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[229250,229315]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[229422,229497]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[229532,229597]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[229704,229777]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[229814,229886]},{"content":"public int multiSelect(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[229986,230023],"source":"public int multiSelect(\\[int value\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[230268,230298],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[230378,230513]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[230550,230592],"source":"public int neededPermission(\\[int value\\])"},{"content":"public int needsRecord(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[230832,230869],"source":"public int needsRecord(\\[int value\\])"},{"content":"public str normalImage(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[231114,231151],"source":"public str normalImage(\\[str value\\])"},{"content":"public int normalResource(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[231396,231436],"source":"public int normalResource(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[231678,231717]},{"content":"public str parameters(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[231960,231996],"source":"public str parameters(\\[str value\\])"},{"content":"public FormControl parentControl()","pos":[232242,232276]},{"content":"Retrieves the parent control for the control.","pos":[232352,232397]},{"content":"public boolean primary(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[232524,232565],"source":"public boolean primary(\\[boolean value\\])"},{"content":"public boolean saveRecord(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[232806,232850],"source":"public boolean saveRecord(\\[boolean value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[233088,233145],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[233198,233257]},{"content":"public int shortkey(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[233370,233404],"source":"public int shortkey(\\[int value\\])"},{"content":"public int showContextMenu(int menuHandle)","pos":[233652,233694]},{"content":"Shows the shortcut menu for the control.","pos":[233762,233802]},{"content":"public boolean showShortCut(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[233934,233980],"source":"public boolean showShortCut(\\[boolean value\\])"},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[234216,234254],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[234326,234453]},{"content":"public int style(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[234498,234529],"source":"public int style(\\[int value\\])"},{"content":"public str text(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[234780,234810],"source":"public str text(\\[str value\\])"},{"content":"public int toggleButton(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[235062,235100],"source":"public int toggleButton(\\[int value\\])"},{"content":"public int toggleValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[235344,235381],"source":"public int toggleValue(\\[int value\\])"},{"content":"public str toolTip()","pos":[235626,235646]},{"content":"Retrieves the tooltip text for the control.","pos":[235736,235779]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[235908,235947],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[236018,236080]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[236190,236223],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[236300,236359]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[236472,236506],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[236582,236644]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[236754,236784],"source":"public int type(\\[int value\\])"},{"content":"public boolean underline(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[237036,237079],"source":"public boolean underline(\\[boolean value\\])"},{"content":"Sets or returns the underline property for the text in the control.","pos":[237146,237213]},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[237318,237369]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[237600,237634],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[237710,237753]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[237882,237920],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[237992,238040]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[238164,238203],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[238274,238333]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[238446,238483],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[238556,238639]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[238728,238764],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[238838,238890]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[239010,239044],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[239120,239202]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[239292,239334],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[239402,239458]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[239574,239614],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[239684,239738]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[239856,239896],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[239966,240015]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[240138,240181],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[240248,240301]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[240420,240454],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[240530,240678]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[240702,240737],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[240812,240863]},{"content":"public boolean value(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[240984,241023],"source":"public boolean value(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[241266,241326],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[241376,241437]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[241548,241602],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[241658,241717]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[241830,241876],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[241940,242001]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[242112,242153],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[242222,242292]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[242394,242435],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[242504,242542]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[242676,242711],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[242786,242848]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[242958,242994],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[243068,243106]},{"content":"private void OnClicked(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[243240,243314],"source":"private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void displayControl()","pos":[243522,243550]},{"content":"Displays the control.","pos":[243632,243653]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[243804,243877]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[243914,244012]},{"content":"public void inputSearch(str searchStr)","pos":[244086,244124]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[244196,244267]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[244368,244444],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[244650,244719]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[244760,244860]},{"content":"public void cut()","pos":[244932,244949]},{"content":"Cuts the contents of the control.","pos":[245042,245075]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[245214,245291]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[245324,245394]},{"content":"public void setFocus()","pos":[245496,245518]},{"content":"Sets the focus on the control.","pos":[245606,245636]},{"content":"public void paste()","pos":[245778,245797]},{"content":"Pastes the contents of the clipboard into the control.","pos":[245888,245942]},{"content":"public void gotFocus()","pos":[246060,246082]},{"content":"Indicates that the control has received focus.","pos":[246170,246216]},{"content":"public void resetUserSetting()","pos":[246342,246372]},{"content":"Resets the user settings for the control.","pos":[246452,246493]},{"content":"public void lostFocus()","pos":[246624,246647]},{"content":"Indicates that the control has lost focus.","pos":[246734,246776]},{"content":"public void prefColumnSize(int width, int height)","pos":[246906,246955]},{"content":"Specifies the preferred column width and height for the form control.","pos":[247016,247085]},{"content":"public void clicked()","pos":[247188,247209]},{"content":"public void copy()","pos":[247470,247488]},{"content":"Copies the contents of the control to the clipboard.","pos":[247580,247632]},{"content":"public void dragLeave()","pos":[247752,247775]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[247862,247958]},{"content":"public void mouseLeave()","pos":[248034,248058]},{"content":"Indicates that the mouse pointer has left the control.","pos":[248144,248198]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[248316,248423],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void endDrag()","pos":[248598,248619]},{"content":"Is called when the user has finished dragging a form control.","pos":[248708,248769]},{"content":"public void context()","pos":[248880,248901]},{"content":"Shows the shortcut menu for the control.","pos":[248990,249030]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[249162,249237],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"pos":[249447,249466],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether to align the control.","pos":[249468,249508]},{"pos":[249565,249575],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249577,249582]},{"content":"The new value for the property; optional.","pos":[249585,249626]},{"pos":[249633,249645],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[249647,249703]},{"pos":[249710,249717],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned according to the longest label.","pos":[249719,249798]},{"pos":[249804,249820],"content":"Method alignment","linkify":"Method alignment","nodes":[{"content":"Method alignment","pos":[0,16]}]},{"pos":[249866,249876],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[249878,249883]},{"pos":[249892,249904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[249910,249926],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can change the contents of the control.","pos":[249928,249995]},{"pos":[250049,250059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[250061,250066]},{"content":"The value to assign to the allowEdit property.","pos":[250069,250115]},{"pos":[250122,250134],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be edited; otherwise, false.","pos":[250136,250188]},{"pos":[250195,250202],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"When this property is set on a container control, modifications are disabled or enabled for all controls within the container.","pos":[250204,250330]},{"pos":[250336,250356],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[250358,250441]},{"pos":[250484,250496],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[250498,250566]},{"pos":[250572,250594],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[250596,250694]},{"pos":[250754,250764],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[250766,250771]},{"content":"If specified, the property is set to this value.","pos":[250774,250822]},{"pos":[250829,250841],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[250843,250922]},{"pos":[250929,250936],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[250938,250975]},{"pos":[250981,251003],"content":"Method autoRefreshData","linkify":"Method autoRefreshData","nodes":[{"content":"Method autoRefreshData","pos":[0,22]}]},{"pos":[251063,251073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[251075,251080]},{"pos":[251089,251101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[251107,251129],"content":"Method backgroundColor","linkify":"Method backgroundColor","nodes":[{"content":"Method backgroundColor","pos":[0,22]}]},{"content":"Gets or sets the background color of the control.","pos":[251131,251180]},{"pos":[251232,251242],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[251244,251249]},{"pos":[251258,251270],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[251272,251316]},{"pos":[251323,251330],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[251332,251400]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[251406,251476]},{"content":"The second byte contains a value for green.","pos":[251481,251524]},{"content":"The third byte contains a value for blue.","pos":[251529,251570]},{"content":"The high-order byte must be zero.","pos":[251575,251608]},{"content":"The maximum value for a single byte is 255.","pos":[251613,251656]},{"pos":[251662,251678],"content":"Method backStyle","linkify":"Method backStyle","nodes":[{"content":"Method backStyle","pos":[0,16]}]},{"content":"Determiness whether the control background can be transparent.","pos":[251680,251742]},{"pos":[251788,251798],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[251800,251805]},{"pos":[251814,251826],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control background can be transparent; otherwise, 0.","pos":[251828,251889]},{"pos":[251895,251911],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[251913,251967]},{"pos":[252014,252024],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[252026,252027]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[252030,252100]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[252101,252168]},{"content":"y","pos":[252180,252181]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[252184,252254]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[252255,252322]},{"pos":[252329,252341],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[252343,252382]},{"pos":[252389,252396],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[252398,252479]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[252480,252584]},{"pos":[252590,252600],"content":"Method big","linkify":"Method big","nodes":[{"content":"Method big","pos":[0,10]}]},{"pos":[252648,252658],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[252660,252665]},{"pos":[252674,252686],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[252692,252703],"content":"Method bold","linkify":"Method bold","nodes":[{"content":"Method bold","pos":[0,11]}]},{"content":"Gets or sets the weight of font used to output text in the control.","pos":[252705,252772]},{"pos":[252813,252823],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[252825,252830]},{"pos":[252839,252851],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value between zero and nine, inclusive.","pos":[252853,252903]},{"pos":[252910,252917],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the weight of the font as follows:","pos":[252919,252991]},{"content":"0 Use the default font weight.","pos":[252997,253027]},{"content":"1 Thin.","pos":[253032,253039]},{"content":"2 Extra-light.","pos":[253044,253058]},{"content":"3 Light.","pos":[253063,253071]},{"content":"4 Normal.","pos":[253076,253085]},{"content":"5 Medium.","pos":[253090,253099]},{"content":"6 Semibold.","pos":[253104,253115]},{"content":"7 Bold.","pos":[253120,253127]},{"content":"8 Extra-bold.","pos":[253132,253145]},{"content":"9 Heavy.","pos":[253150,253158]},{"pos":[253164,253177],"content":"Method border","linkify":"Method border","nodes":[{"content":"Method border","pos":[0,13]}]},{"content":"Gets or sets the style of the borderline of the control.","pos":[253179,253235]},{"pos":[253278,253288],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[253290,253295]},{"pos":[253304,253316],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and four, inclusive.","pos":[253318,253362]},{"pos":[253369,253376],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains the style of the borderline of the control as follows:","pos":[253378,253470]},{"content":"Value.","pos":[253474,253480]},{"content":"Description.","pos":[253483,253495]},{"content":"0","pos":[253526,253527]},{"content":"Auto.","pos":[253535,253540]},{"content":"1","pos":[253552,253553]},{"content":"3D.","pos":[253561,253564]},{"content":"2","pos":[253578,253579]},{"content":"Single line.","pos":[253587,253599]},{"content":"3","pos":[253604,253605]},{"content":"Flat.","pos":[253613,253618]},{"content":"4","pos":[253630,253631]},{"content":"None.","pos":[253639,253644]},{"pos":[253659,253679],"content":"Method buttonDisplay","linkify":"Method buttonDisplay","nodes":[{"content":"Method buttonDisplay","pos":[0,20]}]},{"content":"Gets or sets the appearance of the button control.","pos":[253681,253731]},{"pos":[253781,253791],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[253793,253798]},{"pos":[253807,253819],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and five, inclusive.","pos":[253821,253865]},{"pos":[253872,253879],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The value of the property defines whether the text, the image, or both should be displayed on the button.","pos":[253881,253986]},{"content":"This property also controls relative positions of text and image if both are displayed.The integer value that is returned contains the appearace of the button control as follows:","pos":[253987,254165]},{"content":"Value.","pos":[254169,254175]},{"content":"Description.","pos":[254178,254190]},{"content":"0","pos":[254325,254326]},{"content":"Text only.","pos":[254334,254344]},{"content":"1","pos":[254403,254404]},{"content":"Image Only.","pos":[254412,254423]},{"content":"2","pos":[254481,254482]},{"content":"Text and image; the image is displayed below the text.","pos":[254490,254544]},{"content":"3","pos":[254559,254560]},{"content":"Text and image; the image is displayed above the text.","pos":[254568,254622]},{"content":"4","pos":[254637,254638]},{"content":"Text and image; the image is displayed to the left of the text.","pos":[254646,254709]},{"content":"5","pos":[254715,254716]},{"content":"Text and image; the image is displayed to the right of the text.","pos":[254724,254788]},{"pos":[254796,254818],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[254820,254854]},{"pos":[254921,254931],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[254933,254938]},{"content":"The number of lines to use to determine the height.","pos":[254941,254992]},{"content":"lines","pos":[255004,255009]},{"content":"The number of lines to use to determine the height.","pos":[255012,255063]},{"pos":[255070,255082],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[255084,255130]},{"pos":[255136,255150],"content":"Method caption","linkify":"Method caption","nodes":[{"content":"Method caption","pos":[0,14]}]},{"content":"Gets or set the caption of the control.","pos":[255152,255191]},{"pos":[255235,255245],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[255247,255252]},{"pos":[255261,255273],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that is used as the caption of the control.","pos":[255275,255329]},{"pos":[255335,255354],"content":"Method characterSet","linkify":"Method characterSet","nodes":[{"content":"Method characterSet","pos":[0,19]}]},{"content":"Gets or sets the character set of the font.","pos":[255356,255399]},{"pos":[255448,255458],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[255460,255465]},{"pos":[255474,255486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the character set of the font.","pos":[255488,255550]},{"pos":[255557,255564],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The values for the integer that is returned indicate the character set according to the following table:","pos":[255566,255670]},{"content":"Value.","pos":[255674,255680]},{"content":"Description.","pos":[255683,255695]},{"content":"0","pos":[255742,255743]},{"content":"ANSI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[255751,255764],"source":"ANSI\\_CHARSET"},{"content":"1","pos":[255776,255777]},{"content":"DEFAULT<ph id=\"ph1\">\\_</ph>CHARSET","pos":[255785,255801],"source":"DEFAULT\\_CHARSET"},{"content":"2","pos":[255810,255811]},{"content":"SYMBOL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[255819,255834],"source":"SYMBOL\\_CHARSET"},{"content":"77","pos":[255844,255846]},{"content":"MAC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[255853,255865],"source":"MAC\\_CHARSET"},{"content":"128","pos":[255878,255881]},{"content":"SHIFTJIS<ph id=\"ph1\">\\_</ph>CHARSET","pos":[255887,255904],"source":"SHIFTJIS\\_CHARSET"},{"content":"129","pos":[255912,255915]},{"content":"HANGUL<ph id=\"ph1\">\\_</ph>CHARSET","pos":[255921,255936],"source":"HANGUL\\_CHARSET"},{"content":"134","pos":[255946,255949]},{"content":"GB2312<ph id=\"ph1\">\\_</ph>CHARSET","pos":[255955,255970],"source":"GB2312\\_CHARSET"},{"content":"136","pos":[255980,255983]},{"content":"CHINESEBIG5<ph id=\"ph1\">\\_</ph>CHARSET","pos":[255989,256009],"source":"CHINESEBIG5\\_CHARSET"},{"content":"161","pos":[256014,256017]},{"content":"GREEK<ph id=\"ph1\">\\_</ph>CHARSET","pos":[256023,256037],"source":"GREEK\\_CHARSET"},{"content":"162","pos":[256048,256051]},{"content":"TURKISH<ph id=\"ph1\">\\_</ph>CHARSET","pos":[256057,256073],"source":"TURKISH\\_CHARSET"},{"content":"163","pos":[256082,256085]},{"content":"VIETNAMESE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[256091,256110],"source":"VIETNAMESE\\_CHARSET"},{"content":"186","pos":[256116,256119]},{"content":"BALTIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[256125,256140],"source":"BALTIC\\_CHARSET"},{"content":"204","pos":[256150,256153]},{"content":"RUSSIAN<ph id=\"ph1\">\\_</ph>CHARSET","pos":[256159,256175],"source":"RUSSIAN\\_CHARSET"},{"content":"238","pos":[256184,256187]},{"content":"EASTEUROPE<ph id=\"ph1\">\\_</ph>CHARSET","pos":[256193,256212],"source":"EASTEUROPE\\_CHARSET"},{"content":"255","pos":[256218,256221]},{"content":"OEM<ph id=\"ph1\">\\_</ph>CHARSET","pos":[256227,256239],"source":"OEM\\_CHARSET"},{"content":"The value in the following table is for the Korean language edition of MicrosoftWindows.","pos":[256251,256339]},{"content":"Value.","pos":[256343,256349]},{"content":"Description.","pos":[256352,256364]},{"content":"130","pos":[256399,256402]},{"content":"JOHAB<ph id=\"ph1\">\\_</ph>CHARSET","pos":[256408,256422],"source":"JOHAB\\_CHARSET"},{"content":"The values in the following table are for the Middle East language edition of Windows.","pos":[256426,256512]},{"content":"Value.","pos":[256516,256522]},{"content":"Description.","pos":[256525,256537]},{"content":"177","pos":[256574,256577]},{"content":"HEBREW<ph id=\"ph1\">\\_</ph>CHARSET","pos":[256583,256598],"source":"HEBREW\\_CHARSET"},{"content":"178","pos":[256603,256606]},{"content":"ARABIC<ph id=\"ph1\">\\_</ph>CHARSET","pos":[256612,256627],"source":"ARABIC\\_CHARSET"},{"content":"The value in the following table is for the Thai language edition of Windows.","pos":[256631,256708]},{"content":"Value.","pos":[256712,256718]},{"content":"Description.","pos":[256721,256733]},{"content":"222","pos":[256766,256769]},{"content":"THAI<ph id=\"ph1\">\\_</ph>CHARSET","pos":[256775,256788],"source":"THAI\\_CHARSET"},{"content":"The default character set is set to a value based on the current system locale.","pos":[256792,256871]},{"content":"For example, when the system locale is English (United States), it is set as ANSI<ph id=\"ph1\">\\_</ph>CHARSET.","pos":[256872,256963],"source":" For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET."},{"content":"For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.","pos":[256964,257078]},{"pos":[257084,257102],"content":"Method colorScheme","linkify":"Method colorScheme","nodes":[{"content":"Method colorScheme","pos":[0,18]}]},{"content":"Gets or sets the color scheme of the control.","pos":[257104,257149]},{"pos":[257197,257207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257209,257214]},{"pos":[257223,257235],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer between zero and two, inclusive.","pos":[257237,257280]},{"pos":[257287,257294],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The color scheme is defined according to the following table:","pos":[257296,257357]},{"content":"Value.","pos":[257361,257367]},{"content":"Style.","pos":[257370,257376]},{"content":"0","pos":[257449,257450]},{"content":"Default.","pos":[257458,257466]},{"content":"1","pos":[257493,257494]},{"content":"The Microsoft Windows palette.","pos":[257502,257532]},{"content":"2","pos":[257537,257538]},{"content":"The true-color scheme.","pos":[257546,257568]},{"pos":[257584,257598],"content":"Method command","linkify":"Method command","nodes":[{"content":"Method command","pos":[0,14]}]},{"pos":[257642,257652],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257654,257659]},{"pos":[257668,257680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[257686,257709],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[257711,257778]},{"pos":[257861,257871],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[257873,257878]},{"content":"The ID of the configuration key to assign to the control; optional.","pos":[257881,257948]},{"pos":[257955,257967],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The identifier of the configuration key that is assigned to the control.","pos":[257969,258041]},{"pos":[258048,258055],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[258057,258138]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[258139,258232]},{"pos":[258238,258263],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[258265,258361]},{"pos":[258406,258418],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[258420,258506]},{"pos":[258513,258520],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[258522,258571]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[258572,258720]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[258721,258855]},{"pos":[258861,258886],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[258888,258966]},{"pos":[259021,259031],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[259033,259038]},{"content":"The string that contains the country/region codes to set; optional.","pos":[259041,259108]},{"pos":[259115,259127],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[259129,259194]},{"pos":[259200,259223],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[259225,259350]},{"pos":[259403,259413],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[259415,259420]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[259423,259497]},{"pos":[259504,259516],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[259518,259630]},{"pos":[259637,259644],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[259646,259773]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[259774,259867]},{"pos":[259873,259893],"content":"Method defaultButton","linkify":"Method defaultButton","nodes":[{"content":"Method defaultButton","pos":[0,20]}]},{"content":"Determines whether the button should be the default button in the form.","pos":[259895,259966]},{"pos":[260024,260034],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[260036,260041]},{"pos":[260050,260062],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the button should be the default button; otherwise, false.","pos":[260064,260130]},{"pos":[260136,260156],"content":"Method disabledImage","linkify":"Method disabledImage","nodes":[{"content":"Method disabledImage","pos":[0,20]}]},{"content":"Gets or sets the disabled image of the button.","pos":[260158,260204]},{"pos":[260254,260264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[260266,260271]},{"pos":[260280,260292],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The full name of an image file.","pos":[260294,260325]},{"content":"The system supports all of the GDI-supported image formats.","pos":[260326,260385]},{"pos":[260392,260399],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This property has precedence over the disabledResource property.","pos":[260401,260465]},{"content":"It is used if both of these properties are set.","pos":[260466,260513]},{"pos":[260519,260547],"content":"Method disabledImageLocation","linkify":"Method disabledImageLocation","nodes":[{"content":"Method disabledImageLocation","pos":[0,28]}]},{"pos":[260605,260615],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[260617,260622]},{"pos":[260631,260643],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[260649,260672],"content":"Method disabledResource","linkify":"Method disabledResource","nodes":[{"content":"Method disabledResource","pos":[0,23]}]},{"content":"Gets or sets the resource ID of the image to use as the disabled button image.","pos":[260674,260752]},{"pos":[260805,260815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[260817,260822]},{"pos":[260831,260843],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The resource ID of the image to use as the disabled button image.","pos":[260845,260910]},{"content":"Both icon and bitmap images are supported.","pos":[260911,260953]},{"pos":[260959,260979],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[260981,261148]},{"pos":[261198,261208],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[261210,261215]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[261218,261292]},{"pos":[261299,261311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[261313,261441]},{"pos":[261447,261462],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether to enable or disable drag-and-drop operations for the control.","pos":[261464,261545]},{"pos":[261590,261600],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[261602,261607]},{"content":"An Integer data type that indicates whether drag-and-drop behavior is enabled; optional.","pos":[261610,261698]},{"pos":[261705,261717],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[261719,261779]},{"pos":[261786,261793],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the dragLeave, the dragOver, and the dragOverEx to specify the behavior.","pos":[261795,261871]},{"pos":[261877,261892],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[261894,261988]},{"pos":[262082,262092],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[262094,262104]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[262107,262192]},{"content":"dragMode","pos":[262204,262212]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[262215,262300]},{"content":"x","pos":[262312,262313]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[262316,262401]},{"content":"y","pos":[262413,262414]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[262417,262502]},{"pos":[262509,262521],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[262523,262588]},{"pos":[262594,262611],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[262613,262709]},{"pos":[262799,262809],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[262811,262821]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[262824,262909]},{"content":"dragMode","pos":[262921,262929]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[262932,263017]},{"content":"x","pos":[263029,263030]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[263033,263118]},{"content":"y","pos":[263130,263131]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[263134,263219]},{"pos":[263226,263238],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[263240,263305]},{"pos":[263311,263326],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[263328,263398]},{"pos":[263432,263444],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[263446,263577]},{"pos":[263583,263597],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether to enable or disable the object.","pos":[263599,263650]},{"pos":[263702,263712],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[263714,263719]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[263722,263794]},{"pos":[263801,263813],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[263815,263863]},{"pos":[263870,263877],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property allows controls to be enabled or disabled at run time.","pos":[263879,263954]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[263955,264050]},{"content":"You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.","pos":[264051,264185]},{"pos":[264191,264202],"content":"Method font","linkify":"Method font","nodes":[{"content":"Method font","pos":[0,11]}]},{"content":"Gets or sets the name of the font for the control to use.","pos":[264204,264261]},{"pos":[264302,264312],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264314,264319]},{"pos":[264328,264340],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name of the font to use, such as Tahoma or Verdana.","pos":[264342,264397]},{"pos":[264403,264418],"content":"Method fontSize","linkify":"Method fontSize","nodes":[{"content":"Method fontSize","pos":[0,15]}]},{"content":"Gets or sets the size of the font for the control to use.","pos":[264420,264477]},{"pos":[264522,264532],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264534,264539]},{"pos":[264548,264560],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the font in points.","pos":[264562,264595]},{"pos":[264601,264624],"content":"Method forcedToOverflow","linkify":"Method forcedToOverflow","nodes":[{"content":"Method forcedToOverflow","pos":[0,23]}]},{"pos":[264685,264695],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264697,264702]},{"pos":[264711,264723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[264729,264751],"content":"Method foregroundColor","linkify":"Method foregroundColor","nodes":[{"content":"Method foregroundColor","pos":[0,22]}]},{"content":"Gets or sets the text color for the control to use.","pos":[264753,264804]},{"pos":[264856,264866],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[264868,264873]},{"pos":[264882,264894],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer that contains a packed RGB color.","pos":[264896,264940]},{"pos":[264947,264954],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The integer that is returned contains a packed RGB color as follows:","pos":[264956,265024]},{"content":"The low-order byte contains a value for the relative intensity of red.","pos":[265030,265100]},{"content":"The second byte contains a value for green.","pos":[265105,265148]},{"content":"The third byte contains a value for blue.","pos":[265153,265194]},{"content":"The high-order byte must be zero.","pos":[265199,265232]},{"content":"The maximum value for a single byte is 255.","pos":[265237,265280]},{"pos":[265286,265303],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[265305,265393]},{"pos":[265446,265456],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[265458,265461]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[265464,265534]},{"pos":[265541,265553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[265555,265622]},{"pos":[265628,265649],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[265651,265706]},{"pos":[265750,265762],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[265764,265827]},{"pos":[265833,265846],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[265848,265887]},{"pos":[265940,265950],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[265952,265957]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[265960,266035]},{"content":"mode","pos":[266047,266051]},{"content":"An Integer data type that indicates how the height is calculated; optional.","pos":[266054,266129]},{"pos":[266136,266148],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[266150,266186]},{"pos":[266193,266200],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the height according to the following table:","pos":[266202,266309]},{"content":"Mode.","pos":[266313,266318]},{"content":"Height calculation.","pos":[266332,266351]},{"content":"-1 Exact.","pos":[266539,266548]},{"content":"The exact height in pixels of the controls is used.","pos":[266558,266609]},{"content":"0 Auto.","pos":[266652,266659]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[266671,266760]},{"content":"1 Column height.","pos":[266765,266781]},{"content":"The layout of the form determines the height of the control.","pos":[266784,266844]},{"content":"The height and height calculation mode can be set separately.","pos":[266877,266938]},{"pos":[266944,266961],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[266963,267025]},{"pos":[267072,267082],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[267084,267089]},{"content":"An Integer data type value that indicates how control height is calculated; optional.","pos":[267092,267177]},{"pos":[267184,267196],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[267198,267219]},{"pos":[267226,267233],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table:","pos":[267235,267289]},{"content":"Mode.","pos":[267293,267298]},{"content":"Height Calculation.","pos":[267310,267329]},{"content":"Exact.","pos":[267515,267521]},{"content":"The exact height in pixels of the controls is used.","pos":[267532,267583]},{"content":"Auto.","pos":[267626,267631]},{"content":"The height of the control is calculated automatically and the value parameter is ignored.","pos":[267643,267732]},{"content":"Column height.","pos":[267737,267751]},{"content":"The layout of the form determines the height of the control.","pos":[267754,267814]},{"content":"The height of the control might change when the mode is set to auto or column height.","pos":[267847,267932]},{"pos":[267938,267956],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[267958,267997]},{"pos":[268045,268055],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[268057,268062]},{"content":"An Integer data type that specifies the height in pixels; optional.","pos":[268065,268132]},{"pos":[268139,268151],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[268153,268174]},{"pos":[268181,268188],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the exact height calculation mode is used.","pos":[268190,268280]},{"pos":[268286,268302],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[268304,268344]},{"pos":[268379,268391],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[268393,268481]},{"pos":[268488,268495],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[268497,268567]},{"content":"Use the helpText method to set the value of the Help text.","pos":[268568,268626]},{"pos":[268632,268647],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.","pos":[268649,268753]},{"pos":[268798,268808],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[268810,268815]},{"content":"The value to assign as the help text for the control.","pos":[268818,268871]},{"pos":[268878,268890],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string to be displayed at the bottom of the screen.","pos":[268892,268947]},{"pos":[268954,268961],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.","pos":[268963,269076]},{"pos":[269082,269104],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[269106,269169]},{"pos":[269221,269231],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[269233,269238]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[269241,269308]},{"pos":[269315,269327],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[269329,269379]},{"pos":[269385,269396],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[269398,269443]},{"pos":[269473,269485],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[269487,269514]},{"pos":[269521,269528],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the WindowsAPI.","pos":[269530,269573]},{"pos":[269579,269599],"content":"Method imageLocation","linkify":"Method imageLocation","nodes":[{"content":"Method imageLocation","pos":[0,20]}]},{"pos":[269649,269659],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[269661,269666]},{"pos":[269675,269687],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[269693,269711],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[269752,269764],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[269770,269788],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[269790,269856]},{"pos":[269897,269909],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[269911,269962]},{"pos":[269969,269976],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[269978,270046]},{"pos":[270052,270071],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[270073,270140]},{"pos":[270182,270194],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[270196,270248]},{"pos":[270254,270279],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Returns a value that indicates whether the control allows for the specified level of customization.","pos":[270281,270380]},{"pos":[270449,270459],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[270461,270478]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[270481,270609]},{"pos":[270616,270628],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[270630,270789]},{"pos":[270796,270803],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[270805,270882]},{"content":"FormAllowUserSetup::No 0","pos":[271222,271246]},{"content":"No changes can be made to the control.","pos":[271257,271295]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[271296,271385]},{"content":"FormAllowUserSetup::Restricted 1","pos":[271390,271422]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[271425,271517]},{"content":"The user cannot move the control.","pos":[271518,271551]},{"content":"FormAllowUserSetup::Yes 2","pos":[271558,271583]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[271593,271685]},{"content":"The user can also move the control.","pos":[271686,271721]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[271725,271914]},{"pos":[271920,271933],"content":"Method italic","linkify":"Method italic","nodes":[{"content":"Method italic","pos":[0,13]}]},{"pos":[271984,271994],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[271996,272001]},{"pos":[272010,272022],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[272028,272041],"content":"Method keyTip","linkify":"Method keyTip","nodes":[{"content":"Method keyTip","pos":[0,13]}]},{"pos":[272084,272094],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272096,272101]},{"pos":[272110,272122],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[272128,272139],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[272141,272205]},{"pos":[272256,272266],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272268,272273]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[272276,272362]},{"content":"mode","pos":[272374,272378]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[272381,272467]},{"pos":[272474,272486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[272488,272539]},{"pos":[272545,272560],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[272562,272623]},{"pos":[272668,272678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272680,272685]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[272688,272774]},{"pos":[272781,272793],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[272795,272851]},{"pos":[272857,272873],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[272875,272939]},{"pos":[272985,272995],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[272997,273002]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[273005,273086]},{"pos":[273093,273105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[273107,273158]},{"pos":[273164,273184],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[273186,273239]},{"pos":[273297,273307],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[273309,273314]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[273317,273411]},{"pos":[273418,273430],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[273432,273505]},{"pos":[273511,273531],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[273533,273590]},{"pos":[273682,273692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[273694,273695]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[273698,273759]},{"content":"y","pos":[273771,273772]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[273775,273836]},{"content":"button","pos":[273848,273854]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[273857,273918]},{"content":"Ctrl","pos":[273930,273934]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[273937,273998]},{"content":"Shift","pos":[274010,274015]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[274018,274079]},{"pos":[274086,274098],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[274100,274139]},{"pos":[274146,274153],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[274155,274259]},{"pos":[274265,274281],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[274283,274348]},{"pos":[274436,274446],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[274448,274449]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[274452,274513]},{"content":"y","pos":[274525,274526]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[274529,274590]},{"content":"button","pos":[274602,274608]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[274611,274672]},{"content":"Ctrl","pos":[274684,274688]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[274691,274752]},{"content":"Shift","pos":[274764,274769]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[274772,274833]},{"pos":[274840,274852],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[274854,274893]},{"pos":[274900,274907],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[274909,275013]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[275014,275149]},{"pos":[275155,275171],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[275173,275238]},{"pos":[275326,275336],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[275338,275339]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[275342,275403]},{"content":"y","pos":[275415,275416]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[275419,275480]},{"content":"button","pos":[275492,275498]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[275501,275562]},{"content":"Ctrl","pos":[275574,275578]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[275581,275642]},{"content":"Shift","pos":[275654,275659]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[275662,275723]},{"pos":[275730,275742],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[275744,275783]},{"pos":[275790,275797],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[275799,275903]},{"pos":[275909,275923],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[275925,275997]},{"pos":[276083,276093],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[276095,276096]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[276099,276160]},{"content":"y","pos":[276172,276173]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[276176,276237]},{"content":"button","pos":[276249,276255]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[276258,276319]},{"content":"Ctrl","pos":[276331,276335]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[276338,276399]},{"content":"Shift","pos":[276411,276416]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[276419,276480]},{"pos":[276487,276499],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[276501,276540]},{"pos":[276547,276554],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[276556,276660]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[276661,276796]},{"pos":[276802,276820],"content":"Method multiSelect","linkify":"Method multiSelect","nodes":[{"content":"Method multiSelect","pos":[0,18]}]},{"pos":[276868,276878],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[276880,276885]},{"pos":[276894,276906],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[276912,276923],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[276925,277060]},{"pos":[277101,277111],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277113,277118]},{"content":"The name to assign to the control; optional.","pos":[277121,277165]},{"pos":[277172,277184],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[277186,277250]},{"pos":[277257,277264],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[277266,277360]},{"content":"It must start with a letter.","pos":[277366,277394]},{"content":"It cannot exceed 250 characters.","pos":[277399,277431]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[277436,277490],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[277495,277535]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[277540,277650]},{"pos":[277656,277679],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[277732,277742],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277744,277749]},{"pos":[277758,277770],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277776,277794],"content":"Method needsRecord","linkify":"Method needsRecord","nodes":[{"content":"Method needsRecord","pos":[0,18]}]},{"pos":[277842,277852],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277854,277859]},{"pos":[277868,277880],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277886,277904],"content":"Method normalImage","linkify":"Method normalImage","nodes":[{"content":"Method normalImage","pos":[0,18]}]},{"pos":[277952,277962],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[277964,277969]},{"pos":[277978,277990],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[277996,278017],"content":"Method normalResource","linkify":"Method normalResource","nodes":[{"content":"Method normalResource","pos":[0,21]}]},{"pos":[278068,278078],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278080,278085]},{"pos":[278094,278106],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278112,278139],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[278191,278203],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278209,278226],"content":"Method parameters","linkify":"Method parameters","nodes":[{"content":"Method parameters","pos":[0,17]}]},{"pos":[278273,278283],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278285,278290]},{"pos":[278299,278311],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278317,278337],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[278339,278384]},{"pos":[278431,278443],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[278445,278480]},{"pos":[278486,278500],"content":"Method primary","linkify":"Method primary","nodes":[{"content":"Method primary","pos":[0,14]}]},{"pos":[278552,278562],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278564,278569]},{"pos":[278578,278590],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278596,278613],"content":"Method saveRecord","linkify":"Method saveRecord","nodes":[{"content":"Method saveRecord","pos":[0,17]}]},{"pos":[278668,278678],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278680,278685]},{"pos":[278694,278706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[278712,278730],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[278732,278791]},{"pos":[278859,278869],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[278871,278876]},{"content":"The ID of the security key to assign to the control; optional.","pos":[278879,278941]},{"pos":[278948,278960],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[278962,279061]},{"pos":[279067,279082],"content":"Method shortkey","linkify":"Method shortkey","nodes":[{"content":"Method shortkey","pos":[0,15]}]},{"pos":[279127,279137],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[279139,279144]},{"pos":[279153,279165],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[279171,279193],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[279195,279235]},{"pos":[279290,279300],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[279302,279312]},{"content":"The ID of the menu to show.","pos":[279315,279342]},{"pos":[279349,279361],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[279363,279422]},{"pos":[279428,279447],"content":"Method showShortCut","linkify":"Method showShortCut","nodes":[{"content":"Method showShortCut","pos":[0,19]}]},{"pos":[279504,279514],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[279516,279521]},{"pos":[279530,279542],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[279548,279559],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[279561,279688]},{"pos":[279737,279747],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[279749,279754]},{"content":"The value to assign to the skip property of the control; optional.","pos":[279757,279823]},{"pos":[279830,279842],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[279844,279950]},{"pos":[279956,279968],"content":"Method style","linkify":"Method style","nodes":[{"content":"Method style","pos":[0,12]}]},{"pos":[280010,280020],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[280022,280027]},{"pos":[280036,280048],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[280054,280065],"content":"Method text","linkify":"Method text","nodes":[{"content":"Method text","pos":[0,11]}]},{"pos":[280106,280116],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[280118,280123]},{"pos":[280132,280144],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[280150,280169],"content":"Method toggleButton","linkify":"Method toggleButton","nodes":[{"content":"Method toggleButton","pos":[0,19]}]},{"pos":[280218,280228],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[280230,280235]},{"pos":[280244,280256],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[280262,280280],"content":"Method toggleValue","linkify":"Method toggleValue","nodes":[{"content":"Method toggleValue","pos":[0,18]}]},{"pos":[280328,280338],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[280340,280345]},{"pos":[280354,280366],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[280372,280386],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[280388,280431]},{"pos":[280464,280476],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[280478,280580]},{"pos":[280587,280594],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[280596,280668]},{"pos":[280674,280684],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[280686,280748]},{"pos":[280798,280808],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[280810,280815]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[280818,280902]},{"content":"mode","pos":[280914,280918]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[280921,281005]},{"pos":[281012,281024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[281026,281075]},{"pos":[281081,281095],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[281097,281156]},{"pos":[281200,281210],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[281212,281217]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[281220,281304]},{"pos":[281311,281323],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[281325,281379]},{"pos":[281385,281400],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[281402,281464]},{"pos":[281509,281519],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[281521,281526]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[281529,281608]},{"pos":[281615,281627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[281629,281678]},{"pos":[281684,281695],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[281736,281746],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[281748,281753]},{"pos":[281762,281774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[281780,281796],"content":"Method underline","linkify":"Method underline","nodes":[{"content":"Method underline","pos":[0,16]}]},{"content":"Sets or returns the underline property for the text in the control.","pos":[281798,281865]},{"pos":[281919,281929],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[281931,281936]},{"content":"The value to assign to the underline property of the control; optional.","pos":[281939,282010]},{"pos":[282017,282029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the text in the control is underlined; otherwise, false.","pos":[282031,282095]},{"pos":[282101,282128],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[282192,282202],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[282204,282208]},{"pos":[282217,282229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[282235,282250],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[282252,282295]},{"pos":[282340,282350],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[282352,282357]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[282360,282432]},{"pos":[282439,282451],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[282453,282483]},{"pos":[282489,282508],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[282510,282558]},{"pos":[282607,282617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[282619,282624]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[282627,282704]},{"pos":[282711,282723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[282725,282760]},{"pos":[282766,282786],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[282788,282847]},{"pos":[282897,282907],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[282909,282914]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[282917,283005]},{"pos":[283012,283024],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[283026,283072]},{"pos":[283078,283096],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[283098,283181]},{"pos":[283229,283239],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[283241,283246]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[283249,283329]},{"pos":[283336,283348],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[283350,283406]},{"pos":[283412,283429],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[283431,283483]},{"pos":[283530,283540],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[283542,283547]},{"content":"The user height for the control; optional.","pos":[283550,283592]},{"pos":[283599,283611],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[283613,283652]},{"pos":[283658,283673],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[283675,283757]},{"pos":[283802,283812],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[283814,283819]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[283822,283901]},{"pos":[283908,283920],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[283922,283977]},{"pos":[283984,283991],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[283993,284163]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[284164,284239]},{"content":"This method lets you programmatically determine and set the value.","pos":[284240,284306]},{"pos":[284312,284335],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[284337,284393]},{"pos":[284446,284456],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[284458,284463]},{"content":"The organization container to set for the control; optional.","pos":[284466,284526]},{"pos":[284533,284545],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[284547,284590]},{"pos":[284596,284617],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[284619,284673]},{"pos":[284724,284734],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[284736,284741]},{"content":"The organization sibling to set for the control; optional.","pos":[284744,284802]},{"pos":[284809,284821],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[284823,284864]},{"pos":[284870,284891],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[284893,284942]},{"pos":[284993,285003],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285005,285010]},{"content":"The user label text to set for the control; optional.","pos":[285013,285066]},{"pos":[285073,285085],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[285087,285123]},{"pos":[285129,285153],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[285155,285208]},{"pos":[285262,285272],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285274,285279]},{"content":"The user security level to set for the control; optional.","pos":[285282,285339]},{"pos":[285346,285358],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[285360,285400]},{"pos":[285406,285421],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[285423,285571]},{"pos":[285616,285626],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[285628,285633]},{"content":"The value to assign to the userSkip property; optional.","pos":[285636,285691]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[285692,285787]},{"pos":[285794,285806],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[285808,285877]},{"pos":[285883,285899],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[285901,285952]},{"pos":[285998,286008],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[286010,286015]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[286018,286084]},{"pos":[286091,286103],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[286105,286234]},{"pos":[286241,286248],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[286250,286344]},{"content":"For example, if the user has specified 30 characters as the width for the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[286345,286462],"source":" For example, if the user has specified 30 characters as the width for the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[286463,286613]},{"pos":[286619,286631],"content":"Method value","linkify":"Method value","nodes":[{"content":"Method value","pos":[0,12]}]},{"pos":[286681,286691],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[286693,286698]},{"pos":[286707,286719],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[286725,286747],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[286749,286810]},{"pos":[286879,286889],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[286891,286896]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[286899,286970]},{"content":"mode","pos":[286982,286986]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[286989,287060]},{"pos":[287067,287079],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[287081,287129]},{"pos":[287135,287161],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[287163,287222]},{"pos":[287287,287297],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[287299,287303]},{"pos":[287312,287324],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[287326,287380]},{"pos":[287386,287413],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[287415,287476]},{"pos":[287533,287543],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[287545,287550]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[287553,287631]},{"pos":[287638,287650],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[287652,287700]},{"pos":[287706,287720],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[287722,287792]},{"pos":[287844,287854],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[287856,287861]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[287864,287936]},{"pos":[287943,287955],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[287957,288006]},{"pos":[288012,288024],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[288026,288064]},{"pos":[288116,288126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[288128,288133]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[288136,288210]},{"content":"mode","pos":[288222,288226]},{"content":"An Integer data type that indicates how the width is calculated; optional.","pos":[288229,288303]},{"pos":[288310,288322],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[288324,288359]},{"pos":[288366,288373],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.Calculate the width according to the following table:","pos":[288375,288481]},{"content":"Mode.","pos":[288485,288490]},{"content":"Width calculation.","pos":[288503,288521]},{"content":"-1 Exact.","pos":[288707,288716]},{"content":"The exact width in pixels of the controls is used.","pos":[288725,288775]},{"content":"0 Auto.","pos":[288818,288825]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[288836,288924]},{"content":"1 Column width.","pos":[288929,288944]},{"content":"The layout of the form determines the width of the control.","pos":[288947,289006]},{"content":"The width and width calculation mode can be set separately.","pos":[289039,289098]},{"pos":[289104,289120],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[289122,289184]},{"pos":[289230,289240],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[289242,289247]},{"content":"An Integer data type value that indicates how control width is calculated; optional.","pos":[289250,289334]},{"pos":[289341,289353],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[289355,289416]},{"pos":[289423,289430],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table:","pos":[289432,289485]},{"content":"Mode.","pos":[289489,289494]},{"content":"Width Calculation.","pos":[289505,289523]},{"content":"Exact.","pos":[289707,289713]},{"content":"The exact width in pixels of the controls is used.","pos":[289723,289773]},{"content":"Auto.","pos":[289816,289821]},{"content":"The width of the control is calculated automatically and the value parameter is ignored.","pos":[289832,289920]},{"content":"Column width.","pos":[289925,289938]},{"content":"The layout of the form determines the width of the control.","pos":[289941,290000]},{"content":"The width of the control might change when the mode is set to auto or column width.","pos":[290033,290116]},{"pos":[290122,290139],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[290141,290179]},{"pos":[290226,290236],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[290238,290243]},{"content":"An Integer data type that specifies the width in pixels; optional.","pos":[290246,290312]},{"pos":[290319,290331],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width in pixels of the control.","pos":[290333,290368]},{"pos":[290375,290382],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the exact width calculation mode.","pos":[290384,290457]},{"pos":[290463,290479],"content":"Method OnClicked","linkify":"Method OnClicked","nodes":[{"content":"Method OnClicked","pos":[0,16]}]},{"pos":[290562,290572],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[290574,290580]},{"content":"e","pos":[290594,290595]},{"pos":[290603,290624],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[290626,290647]},{"pos":[290687,290698],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[290700,290798]},{"pos":[290884,290894],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[290896,290906]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[290909,290994]},{"content":"dragMode","pos":[291006,291014]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[291017,291102]},{"content":"x","pos":[291114,291115]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[291118,291203]},{"content":"y","pos":[291215,291216]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[291219,291304]},{"pos":[291310,291328],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[291330,291401]},{"pos":[291452,291462],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[291464,291473]},{"content":"The string value to use to filter data; optional.","pos":[291476,291525]},{"pos":[291531,291549],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[291634,291644],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[291646,291652]},{"content":"e","pos":[291666,291667]},{"pos":[291675,291688],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[291690,291790]},{"pos":[291872,291882],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[291884,291894]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[291897,291982]},{"content":"dragMode","pos":[291994,292002]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[292005,292090]},{"content":"x","pos":[292102,292103]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[292106,292191]},{"content":"y","pos":[292203,292204]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[292207,292292]},{"pos":[292298,292308],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[292310,292343]},{"pos":[292372,292389],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[292391,292461]},{"pos":[292551,292561],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[292563,292564]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292567,292628]},{"content":"y","pos":[292640,292641]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292644,292705]},{"content":"button","pos":[292717,292723]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292726,292787]},{"content":"Ctrl","pos":[292799,292803]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292806,292867]},{"content":"Shift","pos":[292879,292884]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[292887,292948]},{"pos":[292954,292969],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[292971,293001]},{"pos":[293035,293047],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[293049,293103]},{"pos":[293134,293149],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[293151,293197]},{"pos":[293231,293254],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[293256,293297]},{"pos":[293339,293355],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[293357,293399]},{"pos":[293434,293455],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[293457,293526]},{"pos":[293588,293598],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[293600,293605]},{"content":"The preferred height of the control.","pos":[293608,293644]},{"content":"height","pos":[293656,293662]},{"content":"The preferred height of the control.","pos":[293665,293701]},{"pos":[293707,293721],"content":"Method clicked","linkify":"Method clicked","nodes":[{"content":"Method clicked","pos":[0,14]}]},{"pos":[293754,293765],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[293767,293819]},{"pos":[293849,293865],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[293867,293963]},{"pos":[293998,294015],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[294017,294071]},{"pos":[294107,294136],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[294254,294264],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[294266,294282]},{"content":"objectMethodToCall","pos":[294296,294314]},{"content":"overrideObject","pos":[294328,294342]},{"pos":[294350,294364],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[294366,294427]},{"pos":[294461,294468],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[294470,294598]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[294599,294703]},{"pos":[294709,294723],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[294725,294765]},{"pos":[294798,294815],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[294899,294909],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[294911,294917]},{"content":"e","pos":[294931,294932]},{"pos":[294939,294958],"content":"Class FormContainer","linkify":"Class FormContainer","nodes":[{"content":"Class FormContainer","pos":[0,19]}]},{"pos":[295003,295010],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[295016,295024],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[295030,295037],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[295041,295047]},{"content":"Description","pos":[295062,295073]},{"content":"private void new()","pos":[295115,295133]},{"pos":[295155,295165],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[295194,295220],"content":"Class FormContainerControl","linkify":"Class FormContainerControl","nodes":[{"content":"Class FormContainerControl","pos":[0,26]}]},{"pos":[295277,295284],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[295290,295298],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[295304,295311],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[295315,295321]},{"content":"Description","pos":[295433,295444]},{"content":"public FormControl addControl(FormControlType controlType, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[295583,295687],"source":"public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addControlEx(str controlClass, str controlName, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>)","pos":[295717,295812],"source":"public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])"},{"content":"public FormControl addDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>FormControl insertAfter<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>int arrayIndex<ph id=\"ph4\">\\]</ph>)","pos":[295851,295966],"source":"public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\])"},{"content":"public boolean alignChild(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[295985,296029],"source":"public boolean alignChild(\\[boolean value\\])"},{"content":"public boolean alignChildren(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[296119,296166],"source":"public boolean alignChildren(\\[boolean value\\])"},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[296253,296299],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[296387,296430],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"public boolean allowSysSetup()","pos":[296521,296551]},{"content":"public int allowUserSetup(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[296655,296695],"source":"public int allowUserSetup(\\[int value\\])"},{"content":"public int arrangeGuide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[296789,296827],"source":"public int arrangeGuide(\\[int value\\])"},{"content":"public int arrangeMethod(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[296923,296962],"source":"public int arrangeMethod(\\[int value\\])"},{"content":"public int arrangeWhen(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[297057,297094],"source":"public int arrangeWhen(\\[int value\\])"},{"content":"public boolean autoDataGroup(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[297191,297238],"source":"public boolean autoDataGroup(\\[boolean value\\])"},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[297325,297374],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"public int beginDrag(int x, int y)","pos":[297459,297493]},{"content":"public int bottomMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[297593,297650],"source":"public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode bottomMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[297727,297778],"source":"public AutoMode bottomMarginMode(\\[AutoMode mode\\])"},{"content":"public int bottomMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[297861,297904],"source":"public int bottomMarginValue(\\[int value\\])"},{"content":"public container calcControlSize(int chars, int lines)","pos":[297995,298049]},{"content":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, <ph id=\"ph1\">\\[</ph>int arrayIndex<ph id=\"ph2\">\\]</ph>)","pos":[298129,298214],"source":"public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])"},{"content":"public boolean canContain(FormControl control)","pos":[298263,298309]},{"content":"public int columns(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>ColumnsMode mode<ph id=\"ph4\">\\]</ph>)","pos":[298397,298452],"source":"public int columns(\\[int value\\], \\[ColumnsMode mode\\])"},{"content":"public ColumnsMode columnsMode(<ph id=\"ph1\">\\[</ph>ColumnsMode mode<ph id=\"ph2\">\\]</ph>)","pos":[298531,298583],"source":"public ColumnsMode columnsMode(\\[ColumnsMode mode\\])"},{"content":"public int columnspace(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[298665,298721],"source":"public int columnspace(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode columnspaceMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[298799,298849],"source":"public AutoMode columnspaceMode(\\[AutoMode mode\\])"},{"content":"public int columnspaceValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[298933,298975],"source":"public int columnspaceValue(\\[int value\\])"},{"content":"public int columnsValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[299067,299105],"source":"public int columnsValue(\\[int value\\])"},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[299201,299273],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"public List configurationKeyEx()","pos":[299335,299367]},{"content":"public boolean contains(FormControl control)","pos":[299469,299513]},{"content":"public int controlCount()","pos":[299603,299628]},{"content":"public FormControl controlNum(int controlNo)","pos":[299737,299781]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[299871,299915],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[300005,300047],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[300139,300178],"source":"public int displayTarget(\\[int value\\])"},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[300273,300307],"source":"public int dragDrop(\\[int value\\])"},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[300407,300488]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[300541,300618]},{"content":"public str dragText()","pos":[300675,300696]},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[300809,300850],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[300943,300985],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"public boolean hasUserSetting()","pos":[301077,301108]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[301211,301253],"source":"public int height(int value, \\[int mode\\])"},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[301345,301381],"source":"public int heightMode(\\[int value\\])"},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[301479,301516],"source":"public int heightValue(\\[int value\\])"},{"content":"public str helpField()","pos":[301613,301635]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[301747,301781],"source":"public str helpText(\\[str value\\])"},{"content":"public boolean hideIfEmpty(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[301881,301926],"source":"public boolean hideIfEmpty(\\[boolean value\\])"},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[302015,302056],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"public int hWnd()","pos":[302149,302166]},{"content":"public boolean isContainer()","pos":[302283,302311]},{"content":"public boolean isDisplayed()","pos":[302417,302445]},{"content":"public boolean isRestricted()","pos":[302551,302580]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[302685,302741]},{"content":"public boolean isVisible()","pos":[302819,302845]},{"content":"public boolean isVisibleOnClient()","pos":[302953,302987]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[303087,303127],"source":"public int left(int value, \\[int mode\\])"},{"content":"public int leftMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[303221,303276],"source":"public int leftMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode leftMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[303355,303404],"source":"public AutoMode leftMarginMode(\\[AutoMode mode\\])"},{"content":"public int leftMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[303489,303530],"source":"public int leftMarginValue(\\[int value\\])"},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[303623,303657],"source":"public int leftMode(\\[int value\\])"},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[303757,303792],"source":"public int leftValue(\\[int value\\])"},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[303891,303938],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[304025,304104]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[304159,304234]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[304293,304368]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[304427,304500]},{"content":"public int moveControl(int controlId, <ph id=\"ph1\">\\[</ph>int insertAfterId<ph id=\"ph2\">\\]</ph>)","pos":[304561,304621],"source":"public int moveControl(int controlId, \\[int insertAfterId\\])"},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[304695,304725],"source":"public str name(\\[str value\\])"},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[304829,304871],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[304963,305002]},{"content":"public FormControl parentControl()","pos":[305097,305131]},{"content":"public int rightMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[305231,305287],"source":"public int rightMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode rightMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[305365,305415],"source":"public AutoMode rightMarginMode(\\[AutoMode mode\\])"},{"content":"public int rightMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[305499,305541],"source":"public int rightMarginValue(\\[int value\\])"},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[305633,305690],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"public int showContextMenu(int menuHandle)","pos":[305767,305809]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[305901,305939],"source":"public boolean skip(\\[boolean value\\])"},{"content":"public str toolTip()","pos":[306035,306055]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[306169,306208],"source":"public int top(int value, \\[int mode\\])"},{"content":"public int topMargin(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[306303,306357],"source":"public int topMargin(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode topMarginMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[306437,306485],"source":"public AutoMode topMarginMode(\\[AutoMode mode\\])"},{"content":"public int topMarginValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[306571,306611],"source":"public int topMarginValue(\\[int value\\])"},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[306705,306738],"source":"public int topMode(\\[int value\\])"},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[306839,306873],"source":"public int topValue(\\[int value\\])"},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[306973,307003],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[307107,307158]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[307241,307275],"source":"public int userData(\\[int value\\])"},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[307375,307413],"source":"public int userDataItem(\\[int value\\])"},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[307509,307548],"source":"public int userDataItems(\\[int value\\])"},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[307643,307680],"source":"public int userDisable(\\[int value\\])"},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[307777,307813],"source":"public int userHeight(\\[int value\\])"},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[307911,307945],"source":"public int userHide(\\[int value\\])"},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[308045,308087],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[308179,308219],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[308313,308353],"source":"public str userPromptText(\\[str value\\])"},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[308447,308490],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[308581,308615],"source":"public int userSkip(\\[int value\\])"},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[308715,308750],"source":"public int userWidth(\\[int value\\])"},{"content":"public boolean useUserLayout(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[308849,308896],"source":"public boolean useUserLayout(\\[boolean value\\])"},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[308983,309043],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[309117,309171],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[309251,309297],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[309385,309426],"source":"public boolean visible(\\[boolean value\\])"},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[309519,309560],"source":"public int width(int value, \\[int mode\\])"},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[309653,309688],"source":"public int widthMode(\\[int value\\])"},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[309787,309823],"source":"public int widthValue(\\[int value\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[309921,309990]},{"content":"public void inputSearch(str searchStr)","pos":[310055,310093]},{"content":"public void prefColumnSize(int width, int height)","pos":[310189,310238]},{"content":"public void gotFocus()","pos":[310323,310345]},{"content":"public void lostFocus()","pos":[310457,310480]},{"content":"public void mouseLeave()","pos":[310591,310615]},{"content":"public void setFocus()","pos":[310725,310747]},{"content":"public void copy()","pos":[310859,310877]},{"content":"private void OnGotFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[310993,311068],"source":"private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void displayControl()","pos":[311127,311155]},{"content":"public void paste()","pos":[311261,311280]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[311395,311468]},{"content":"private void OnLostFocus(<ph id=\"ph1\">\\[</ph>FormControl sender<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>FormControlEventArgs e<ph id=\"ph4\">\\]</ph>)","pos":[311529,311605],"source":"private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])"},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[311663,311740]},{"content":"public void resetUserSetting()","pos":[311797,311827]},{"content":"public void endDrag()","pos":[311931,311952]},{"content":"public void arrange()","pos":[312065,312086]},{"content":"public void dragLeave()","pos":[312199,312222]},{"content":"public void cut()","pos":[312333,312350]},{"content":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, <ph id=\"ph1\">\\[</ph>Object overrideObject<ph id=\"ph2\">\\]</ph>)","pos":[312467,312574],"source":"public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])"},{"content":"public void context()","pos":[312601,312622]},{"pos":[312738,312755],"content":"Method addControl","linkify":"Method addControl","nodes":[{"content":"Method addControl","pos":[0,17]}]},{"pos":[312870,312880],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlType","pos":[312882,312893]},{"content":"controlName","pos":[312907,312918]},{"content":"insertAfter","pos":[312932,312943]},{"pos":[312952,312964],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[312970,312989],"content":"Method addControlEx","linkify":"Method addControlEx","nodes":[{"content":"Method addControlEx","pos":[0,19]}]},{"pos":[313095,313105],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlClass","pos":[313107,313119]},{"content":"controlName","pos":[313133,313144]},{"content":"insertAfter","pos":[313158,313169]},{"pos":[313178,313190],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313196,313215],"content":"Method addDataField","linkify":"Method addDataField","nodes":[{"content":"Method addDataField","pos":[0,19]}]},{"pos":[313339,313349],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[313351,313363]},{"content":"fieldId","pos":[313377,313384]},{"content":"insertAfter","pos":[313398,313409]},{"content":"arrayIndex","pos":[313423,313433]},{"pos":[313442,313454],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313460,313477],"content":"Method alignChild","linkify":"Method alignChild","nodes":[{"content":"Method alignChild","pos":[0,17]}]},{"pos":[313532,313542],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313544,313549]},{"pos":[313558,313570],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313576,313596],"content":"Method alignChildren","linkify":"Method alignChildren","nodes":[{"content":"Method alignChildren","pos":[0,20]}]},{"pos":[313654,313664],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313666,313671]},{"pos":[313680,313692],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313698,313717],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"pos":[313774,313784],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313786,313791]},{"pos":[313800,313812],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313818,313834],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"pos":[313888,313898],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[313900,313905]},{"pos":[313914,313926],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[313932,313952],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"pos":[313995,314007],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314013,314034],"content":"Method allowUserSetup","linkify":"Method allowUserSetup","nodes":[{"content":"Method allowUserSetup","pos":[0,21]}]},{"pos":[314085,314095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314097,314102]},{"pos":[314111,314123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314129,314148],"content":"Method arrangeGuide","linkify":"Method arrangeGuide","nodes":[{"content":"Method arrangeGuide","pos":[0,19]}]},{"pos":[314197,314207],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314209,314214]},{"pos":[314223,314235],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314241,314261],"content":"Method arrangeMethod","linkify":"Method arrangeMethod","nodes":[{"content":"Method arrangeMethod","pos":[0,20]}]},{"pos":[314311,314321],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314323,314328]},{"pos":[314337,314349],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314355,314373],"content":"Method arrangeWhen","linkify":"Method arrangeWhen","nodes":[{"content":"Method arrangeWhen","pos":[0,18]}]},{"pos":[314421,314431],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314433,314438]},{"pos":[314447,314459],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314465,314485],"content":"Method autoDataGroup","linkify":"Method autoDataGroup","nodes":[{"content":"Method autoDataGroup","pos":[0,20]}]},{"pos":[314543,314553],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314555,314560]},{"pos":[314569,314581],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314587,314609],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"pos":[314669,314679],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314681,314686]},{"pos":[314695,314707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314713,314729],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"pos":[314776,314786],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[314788,314789]},{"content":"y","pos":[314803,314804]},{"pos":[314813,314825],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314831,314850],"content":"Method bottomMargin","linkify":"Method bottomMargin","nodes":[{"content":"Method bottomMargin","pos":[0,19]}]},{"pos":[314916,314926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[314928,314933]},{"content":"mode","pos":[314947,314951]},{"pos":[314960,314972],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[314978,315001],"content":"Method bottomMarginMode","linkify":"Method bottomMarginMode","nodes":[{"content":"Method bottomMarginMode","pos":[0,23]}]},{"pos":[315063,315073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[315075,315079]},{"pos":[315088,315100],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315106,315130],"content":"Method bottomMarginValue","linkify":"Method bottomMarginValue","nodes":[{"content":"Method bottomMarginValue","pos":[0,24]}]},{"pos":[315184,315194],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315196,315201]},{"pos":[315210,315222],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315228,315250],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"pos":[315317,315327],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[315329,315334]},{"content":"lines","pos":[315348,315353]},{"pos":[315362,315374],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315380,315402],"content":"Method canAddDataField","linkify":"Method canAddDataField","nodes":[{"content":"Method canAddDataField","pos":[0,22]}]},{"pos":[315498,315508],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dataSourceId","pos":[315510,315522]},{"content":"fieldId","pos":[315536,315543]},{"content":"arrayIndex","pos":[315557,315567]},{"pos":[315576,315588],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315594,315611],"content":"Method canContain","linkify":"Method canContain","nodes":[{"content":"Method canContain","pos":[0,17]}]},{"pos":[315670,315680],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[315682,315689]},{"pos":[315698,315710],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315716,315730],"content":"Method columns","linkify":"Method columns","nodes":[{"content":"Method columns","pos":[0,14]}]},{"pos":[315794,315804],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[315806,315811]},{"content":"mode","pos":[315825,315829]},{"pos":[315838,315850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315856,315874],"content":"Method columnsMode","linkify":"Method columnsMode","nodes":[{"content":"Method columnsMode","pos":[0,18]}]},{"pos":[315937,315947],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[315949,315953]},{"pos":[315962,315974],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[315980,315998],"content":"Method columnspace","linkify":"Method columnspace","nodes":[{"content":"Method columnspace","pos":[0,18]}]},{"pos":[316063,316073],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316075,316080]},{"content":"mode","pos":[316094,316098]},{"pos":[316107,316119],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316125,316147],"content":"Method columnspaceMode","linkify":"Method columnspaceMode","nodes":[{"content":"Method columnspaceMode","pos":[0,22]}]},{"pos":[316208,316218],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[316220,316224]},{"pos":[316233,316245],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316251,316274],"content":"Method columnspaceValue","linkify":"Method columnspaceValue","nodes":[{"content":"Method columnspaceValue","pos":[0,23]}]},{"pos":[316327,316337],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316339,316344]},{"pos":[316353,316365],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316371,316390],"content":"Method columnsValue","linkify":"Method columnsValue","nodes":[{"content":"Method columnsValue","pos":[0,19]}]},{"pos":[316439,316449],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316451,316456]},{"pos":[316465,316477],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316483,316506],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"pos":[316589,316599],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[316601,316606]},{"pos":[316615,316627],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316633,316658],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"pos":[316703,316715],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316721,316736],"content":"Method contains","linkify":"Method contains","nodes":[{"content":"Method contains","pos":[0,15]}]},{"pos":[316793,316803],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"control","pos":[316805,316812]},{"pos":[316821,316833],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316839,316858],"content":"Method controlCount","linkify":"Method controlCount","nodes":[{"content":"Method controlCount","pos":[0,19]}]},{"pos":[316896,316908],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[316914,316931],"content":"Method controlNum","linkify":"Method controlNum","nodes":[{"content":"Method controlNum","pos":[0,17]}]},{"pos":[316988,316998],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlNo","pos":[317000,317009]},{"pos":[317018,317030],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317036,317061],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"pos":[317116,317126],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317128,317133]},{"pos":[317142,317154],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317160,317183],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"pos":[317236,317246],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317248,317253]},{"pos":[317262,317274],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317280,317300],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"pos":[317350,317360],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317362,317367]},{"pos":[317376,317388],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317394,317409],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"pos":[317454,317464],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[317466,317471]},{"pos":[317480,317492],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317498,317513],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"pos":[317607,317617],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[317619,317629]},{"content":"dragMode","pos":[317643,317651]},{"content":"x","pos":[317665,317666]},{"content":"y","pos":[317680,317681]},{"pos":[317690,317702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317708,317725],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"pos":[317815,317825],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[317827,317837]},{"content":"dragMode","pos":[317851,317859]},{"content":"x","pos":[317873,317874]},{"content":"y","pos":[317888,317889]},{"pos":[317898,317910],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317916,317931],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"pos":[317965,317977],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[317983,317997],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"pos":[318049,318059],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318061,318066]},{"pos":[318075,318087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318093,318110],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"pos":[318163,318173],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[318175,318178]},{"pos":[318187,318199],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318205,318226],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"pos":[318270,318282],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318288,318301],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"pos":[318354,318364],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318366,318371]},{"content":"mode","pos":[318385,318389]},{"pos":[318398,318410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318416,318433],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"pos":[318480,318490],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318492,318497]},{"pos":[318506,318518],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318524,318542],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"pos":[318590,318600],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318602,318607]},{"pos":[318616,318628],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318634,318650],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"pos":[318685,318697],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318703,318718],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"pos":[318763,318773],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318775,318780]},{"pos":[318789,318801],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318807,318825],"content":"Method hideIfEmpty","linkify":"Method hideIfEmpty","nodes":[{"content":"Method hideIfEmpty","pos":[0,18]}]},{"pos":[318881,318891],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[318893,318898]},{"pos":[318907,318919],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[318925,318947],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"pos":[318999,319009],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319011,319016]},{"pos":[319025,319037],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319043,319054],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"pos":[319084,319096],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319102,319120],"content":"Method isContainer","linkify":"Method isContainer","nodes":[{"content":"Method isContainer","pos":[0,18]}]},{"pos":[319161,319173],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319179,319197],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"pos":[319238,319250],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319256,319275],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"pos":[319317,319329],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319335,319360],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"pos":[319429,319439],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[319441,319458]},{"pos":[319467,319479],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319485,319501],"content":"Method isVisible","linkify":"Method isVisible","nodes":[{"content":"Method isVisible","pos":[0,16]}]},{"pos":[319540,319552],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319558,319582],"content":"Method isVisibleOnClient","linkify":"Method isVisibleOnClient","nodes":[{"content":"Method isVisibleOnClient","pos":[0,24]}]},{"pos":[319629,319641],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319647,319658],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"pos":[319709,319719],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319721,319726]},{"content":"mode","pos":[319740,319744]},{"pos":[319753,319765],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319771,319788],"content":"Method leftMargin","linkify":"Method leftMargin","nodes":[{"content":"Method leftMargin","pos":[0,17]}]},{"pos":[319852,319862],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[319864,319869]},{"content":"mode","pos":[319883,319887]},{"pos":[319896,319908],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[319914,319935],"content":"Method leftMarginMode","linkify":"Method leftMarginMode","nodes":[{"content":"Method leftMarginMode","pos":[0,21]}]},{"pos":[319995,320005],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[320007,320011]},{"pos":[320020,320032],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320038,320060],"content":"Method leftMarginValue","linkify":"Method leftMarginValue","nodes":[{"content":"Method leftMarginValue","pos":[0,22]}]},{"pos":[320112,320122],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320124,320129]},{"pos":[320138,320150],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320156,320171],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"pos":[320216,320226],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320228,320233]},{"pos":[320242,320254],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320260,320276],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"pos":[320322,320332],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320334,320339]},{"pos":[320348,320360],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320366,320386],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"pos":[320444,320454],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[320456,320461]},{"pos":[320470,320482],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320488,320508],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"pos":[320600,320610],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[320612,320613]},{"content":"y","pos":[320627,320628]},{"content":"button","pos":[320642,320648]},{"content":"Ctrl","pos":[320662,320666]},{"content":"Shift","pos":[320680,320685]},{"pos":[320694,320706],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320712,320728],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"pos":[320816,320826],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[320828,320829]},{"content":"y","pos":[320843,320844]},{"content":"button","pos":[320858,320864]},{"content":"Ctrl","pos":[320878,320882]},{"content":"Shift","pos":[320896,320901]},{"pos":[320910,320922],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[320928,320944],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"pos":[321032,321042],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[321044,321045]},{"content":"y","pos":[321059,321060]},{"content":"button","pos":[321074,321080]},{"content":"Ctrl","pos":[321094,321098]},{"content":"Shift","pos":[321112,321117]},{"pos":[321126,321138],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321144,321158],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"pos":[321244,321254],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[321256,321257]},{"content":"y","pos":[321271,321272]},{"content":"button","pos":[321286,321292]},{"content":"Ctrl","pos":[321306,321310]},{"content":"Shift","pos":[321324,321329]},{"pos":[321338,321350],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321356,321374],"content":"Method moveControl","linkify":"Method moveControl","nodes":[{"content":"Method moveControl","pos":[0,18]}]},{"pos":[321445,321455],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"controlId","pos":[321457,321466]},{"content":"insertAfterId","pos":[321480,321493]},{"pos":[321502,321514],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321520,321531],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"pos":[321572,321582],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321584,321589]},{"pos":[321598,321610],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321616,321639],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[321692,321702],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[321704,321709]},{"pos":[321718,321730],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321736,321763],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[321815,321827],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321833,321853],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"pos":[321900,321912],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[321918,321936],"content":"Method rightMargin","linkify":"Method rightMargin","nodes":[{"content":"Method rightMargin","pos":[0,18]}]},{"pos":[322001,322011],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322013,322018]},{"content":"mode","pos":[322032,322036]},{"pos":[322045,322057],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322063,322085],"content":"Method rightMarginMode","linkify":"Method rightMarginMode","nodes":[{"content":"Method rightMarginMode","pos":[0,22]}]},{"pos":[322146,322156],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[322158,322162]},{"pos":[322171,322183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322189,322212],"content":"Method rightMarginValue","linkify":"Method rightMarginValue","nodes":[{"content":"Method rightMarginValue","pos":[0,23]}]},{"pos":[322265,322275],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322277,322282]},{"pos":[322291,322303],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322309,322327],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"pos":[322395,322405],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322407,322412]},{"pos":[322421,322433],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322439,322461],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"pos":[322516,322526],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[322528,322538]},{"pos":[322547,322559],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322565,322576],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"pos":[322625,322635],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322637,322642]},{"pos":[322651,322663],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322669,322683],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"pos":[322716,322728],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322734,322744],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"pos":[322794,322804],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322806,322811]},{"content":"mode","pos":[322825,322829]},{"pos":[322838,322850],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322856,322872],"content":"Method topMargin","linkify":"Method topMargin","nodes":[{"content":"Method topMargin","pos":[0,16]}]},{"pos":[322935,322945],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[322947,322952]},{"content":"mode","pos":[322966,322970]},{"pos":[322979,322991],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[322997,323017],"content":"Method topMarginMode","linkify":"Method topMarginMode","nodes":[{"content":"Method topMarginMode","pos":[0,20]}]},{"pos":[323076,323086],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[323088,323092]},{"pos":[323101,323113],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323119,323140],"content":"Method topMarginValue","linkify":"Method topMarginValue","nodes":[{"content":"Method topMarginValue","pos":[0,21]}]},{"pos":[323191,323201],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323203,323208]},{"pos":[323217,323229],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323235,323249],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"pos":[323293,323303],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323305,323310]},{"pos":[323319,323331],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323337,323352],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"pos":[323397,323407],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323409,323414]},{"pos":[323423,323435],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323441,323452],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[323493,323503],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323505,323510]},{"pos":[323519,323531],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323537,323564],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[323628,323638],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[323640,323644]},{"pos":[323653,323665],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323671,323686],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"pos":[323731,323741],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323743,323748]},{"pos":[323757,323769],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323775,323794],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"pos":[323843,323853],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323855,323860]},{"pos":[323869,323881],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[323887,323907],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"pos":[323957,323967],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[323969,323974]},{"pos":[323983,323995],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324001,324019],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"pos":[324067,324077],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324079,324084]},{"pos":[324093,324105],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324111,324128],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"pos":[324175,324185],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324187,324192]},{"pos":[324201,324213],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324219,324234],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"pos":[324279,324289],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324291,324296]},{"pos":[324305,324317],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324323,324346],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"pos":[324399,324409],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324411,324416]},{"pos":[324425,324437],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324443,324464],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"pos":[324515,324525],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324527,324532]},{"pos":[324541,324553],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324559,324580],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"pos":[324631,324641],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324643,324648]},{"pos":[324657,324669],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324675,324699],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"pos":[324753,324763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324765,324770]},{"pos":[324779,324791],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324797,324812],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"pos":[324857,324867],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324869,324874]},{"pos":[324883,324895],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[324901,324917],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"pos":[324963,324973],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[324975,324980]},{"pos":[324989,325001],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325007,325027],"content":"Method useUserLayout","linkify":"Method useUserLayout","nodes":[{"content":"Method useUserLayout","pos":[0,20]}]},{"pos":[325085,325095],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325097,325102]},{"pos":[325111,325123],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325129,325151],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"pos":[325220,325230],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325232,325237]},{"content":"mode","pos":[325251,325255]},{"pos":[325264,325276],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325282,325308],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"pos":[325373,325383],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[325385,325389]},{"pos":[325398,325410],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325416,325443],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"pos":[325500,325510],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325512,325517]},{"pos":[325526,325538],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325544,325558],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"pos":[325610,325620],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325622,325627]},{"pos":[325636,325648],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325654,325666],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"pos":[325718,325728],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325730,325735]},{"content":"mode","pos":[325749,325753]},{"pos":[325762,325774],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325780,325796],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"pos":[325842,325852],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325854,325859]},{"pos":[325868,325880],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325886,325903],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"pos":[325950,325960],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[325962,325967]},{"pos":[325976,325988],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[325994,326007],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"pos":[326089,326099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[326101,326111]},{"content":"dragMode","pos":[326125,326133]},{"content":"x","pos":[326147,326148]},{"content":"y","pos":[326162,326163]},{"pos":[326171,326189],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"pos":[326240,326250],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[326252,326261]},{"pos":[326269,326290],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"pos":[326352,326362],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[326364,326369]},{"content":"height","pos":[326383,326389]},{"pos":[326397,326412],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"pos":[326446,326462],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"pos":[326497,326514],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"pos":[326550,326565],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"pos":[326599,326610],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"pos":[326640,326657],"content":"Method OnGotFocus","linkify":"Method OnGotFocus","nodes":[{"content":"Method OnGotFocus","pos":[0,17]}]},{"pos":[326741,326751],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[326753,326759]},{"content":"e","pos":[326773,326774]},{"pos":[326782,326803],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"pos":[326843,326855],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"pos":[326886,326897],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"pos":[326983,326993],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[326995,327005]},{"content":"dragMode","pos":[327019,327027]},{"content":"x","pos":[327041,327042]},{"content":"y","pos":[327056,327057]},{"pos":[327065,327083],"content":"Method OnLostFocus","linkify":"Method OnLostFocus","nodes":[{"content":"Method OnLostFocus","pos":[0,18]}]},{"pos":[327168,327178],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"sender","pos":[327180,327186]},{"content":"e","pos":[327200,327201]},{"pos":[327209,327226],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"pos":[327316,327326],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[327328,327329]},{"content":"y","pos":[327343,327344]},{"content":"button","pos":[327358,327364]},{"content":"Ctrl","pos":[327378,327382]},{"content":"Shift","pos":[327396,327401]},{"pos":[327409,327432],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"pos":[327474,327488],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"pos":[327521,327535],"content":"Method arrange","linkify":"Method arrange","nodes":[{"content":"Method arrange","pos":[0,14]}]},{"pos":[327568,327584],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"pos":[327619,327629],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"pos":[327658,327687],"content":"Method registerOverrideMethod","linkify":"Method registerOverrideMethod","nodes":[{"content":"Method registerOverrideMethod","pos":[0,29]}]},{"pos":[327805,327815],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"methodToOverride","pos":[327817,327833]},{"content":"objectMethodToCall","pos":[327847,327865]},{"content":"overrideObject","pos":[327879,327893]},{"pos":[327901,327915],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"pos":[327947,327964],"content":"Class FormControl","linkify":"Class FormControl","nodes":[{"content":"Class FormControl","pos":[0,17]}]},{"content":"The FormControl class serves as the base class for all form controls.","pos":[328003,328072]},{"pos":[328078,328085],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"You should not create an instance of this class.","pos":[328087,328135]},{"content":"Use the specific control instead.","pos":[328136,328169]},{"pos":[328175,328183],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[328189,328196],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[328200,328206]},{"content":"Description","pos":[328353,328364]},{"content":"public boolean alignControl(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[328850,328896],"source":"public boolean alignControl(\\[boolean value\\])"},{"content":"Determines whether the control should be aligned.","pos":[329003,329052]},{"content":"public boolean allowEdit(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[329175,329218],"source":"public boolean allowEdit(\\[boolean value\\])"},{"content":"Determines whether the user can modify the contents of the control.","pos":[329328,329395]},{"content":"public boolean allowSysSetup()","pos":[329500,329530]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[329653,329736]},{"content":"public boolean autoDeclaration(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[329825,329874],"source":"public boolean autoDeclaration(\\[boolean value\\])"},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[329978,330076]},{"content":"public int beginDrag(int x, int y)","pos":[330150,330184]},{"content":"Is called when the user starts to drag a form control.","pos":[330303,330357]},{"content":"public FormBuildControl build()","pos":[330475,330506]},{"content":"public container calcControlSize(int chars, int lines)","pos":[330800,330854]},{"content":"Retrieves the size of the control.","pos":[330953,330987]},{"content":"public FormChangeTracker changeTracker()","pos":[331125,331165]},{"content":"public ConfigurationKeyId configurationKey(<ph id=\"ph1\">\\[</ph>ConfigurationKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[331450,331522],"source":"public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])"},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[331603,331670]},{"content":"public List configurationKeyEx()","pos":[331775,331807]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[331928,332024]},{"content":"public int containerId()","pos":[332100,332124]},{"content":"Retrieves the ID of the parent container for the control.","pos":[332253,332310]},{"content":"public str countryRegionCodes(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[332425,332469],"source":"public str countryRegionCodes(\\[str value\\])"},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[332578,332656]},{"content":"public int currentRow()","pos":[332750,332773]},{"content":"public str dataRelationPath(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[333075,333117],"source":"public str dataRelationPath(\\[str value\\])"},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[333228,333353]},{"content":"public FormDataSource dataSourceObject()","pos":[333400,333440]},{"content":"public int displayTarget(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[333725,333764],"source":"public int displayTarget(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[333878,334045]},{"content":"public int dragDrop(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[334050,334084],"source":"public int dragDrop(\\[int value\\])"},{"content":"Determines whether drag-and-drop operations are enabled or disabled for the control.","pos":[334203,334287]},{"content":"public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[334375,334456]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[334528,334622]},{"content":"public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[334700,334777]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[334853,334949]},{"content":"public str dragText()","pos":[335025,335046]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[335178,335248]},{"content":"public boolean editAutoPostback(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[335350,335400],"source":"public boolean editAutoPostback(\\[boolean value\\])"},{"content":"public boolean enabled(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[335675,335716],"source":"public boolean enabled(\\[boolean value\\])"},{"content":"Determines whether the object is enabled or disabled.","pos":[335828,335881]},{"content":"public str extendedStyle(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[336000,336039],"source":"public str extendedStyle(\\[str value\\])"},{"content":"public FieldBinding fieldBinding()","pos":[336325,336359]},{"content":"Retrieves the table and field bindings of the control into a FieldBinding derived class.","pos":[336478,336566]},{"content":"public str formatStr(<ph id=\"ph1\">\\[</ph>int rowNumber<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>boolean display<ph id=\"ph4\">\\]</ph>, <ph id=\"ph5\">\\[</ph>int maxWidth<ph id=\"ph6\">\\]</ph>, <ph id=\"ph7\">\\[</ph>boolean forceSignWhenDisplaceNegative<ph id=\"ph8\">\\]</ph>, <ph id=\"ph9\">\\[</ph>boolean formatForExport<ph id=\"ph10\">\\]</ph>)","pos":[336650,336800],"source":"public str formatStr(\\[int rowNumber\\], \\[boolean display\\], \\[int maxWidth\\], \\[boolean forceSignWhenDisplaceNegative\\], \\[boolean formatForExport\\])"},{"content":"public xFormRun formRun()","pos":[336975,337000]},{"content":"public FormBinding getBinding(str propertyName)","pos":[337300,337347]},{"content":"public boolean hasChanged(<ph id=\"ph1\">\\[</ph>boolean val<ph id=\"ph2\">\\]</ph>)","pos":[337625,337667],"source":"public boolean hasChanged(\\[boolean val\\])"},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[337778,337866]},{"content":"public boolean hasUserSetting()","pos":[337950,337981]},{"content":"Indicates whether the control has custom user settings.","pos":[338103,338158]},{"content":"public int height(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[338275,338317],"source":"public int height(int value, \\[int mode\\])"},{"content":"Gets or sets the height of the control.","pos":[338428,338467]},{"content":"public int heightMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[338600,338636],"source":"public int heightMode(\\[int value\\])"},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[338753,338815]},{"content":"public int heightValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[338925,338962],"source":"public int heightValue(\\[int value\\])"},{"content":"Gets or sets the height of the control.","pos":[339078,339117]},{"content":"public str helpField()","pos":[339250,339272]},{"content":"Retrieves the Help text for the control.","pos":[339403,339443]},{"content":"public str helpText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[339575,339609],"source":"public str helpText(\\[str value\\])"},{"content":"Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.","pos":[339728,339839]},{"content":"public str hierarchyParent(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[339900,339941],"source":"public str hierarchyParent(\\[str value\\])"},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[340053,340116]},{"content":"public int hWnd()","pos":[340225,340242]},{"content":"Retrieves the Windows handle for the control.","pos":[340378,340423]},{"content":"public int id()","pos":[340550,340565]},{"content":"Retrieves the ID of the control.","pos":[340703,340735]},{"content":"public boolean isDisplayed()","pos":[340875,340903]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[341028,341094]},{"content":"public boolean isEditable()","pos":[341200,341227]},{"content":"public boolean isEnabled()","pos":[341525,341551]},{"content":"public boolean isRestricted()","pos":[341850,341879]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[342003,342070]},{"content":"public boolean isUserSetupEnabled(int neededSetupRights)","pos":[342175,342231]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[342328,342429]},{"content":"public boolean isVisible()","pos":[342500,342526]},{"content":"Retrieves a value that indicates whether the control is visible.","pos":[342653,342717]},{"content":"public boolean isVisibleOnClient()","pos":[342825,342859]},{"content":"public str labelText()","pos":[343150,343172]},{"content":"Retrieves the label text for the control.","pos":[343303,343344]},{"content":"public int left(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[343475,343515],"source":"public int left(int value, \\[int mode\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[343628,343692]},{"content":"public int leftMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[343800,343834],"source":"public int leftMode(\\[int value\\])"},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[343953,344014]},{"content":"public int leftValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[344125,344160],"source":"public int leftValue(\\[int value\\])"},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[344278,344342]},{"content":"public boolean lockWindowUpdate(boolean lock)","pos":[344450,344495]},{"content":"Locks or unlocks the window of the control for update.","pos":[344603,344657]},{"content":"public boolean markAsUserAdd(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[344775,344822],"source":"public boolean markAsUserAdd(\\[boolean value\\])"},{"content":"Marks or unmarks the control as a user-added control.","pos":[344928,344981]},{"content":"public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[345100,345179]},{"content":"Is called when the control is double-clicked by the user.","pos":[345253,345310]},{"content":"public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[345425,345500]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[345578,345643]},{"content":"public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[345750,345825]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[345903,345968]},{"content":"public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[346075,346148]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[346228,346300]},{"content":"public str name(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[346400,346430],"source":"public str name(\\[str value\\])"},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[346553,346688]},{"content":"public int neededPermission(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[346725,346767],"source":"public int neededPermission(\\[int value\\])"},{"content":"public container SysObsoleteAttribute()","pos":[347050,347089]},{"content":"public FormControl parentControl()","pos":[347375,347409]},{"content":"Retrieves the parent control for the control.","pos":[347528,347573]},{"content":"public str resourceBundleName()","pos":[347700,347731]},{"content":"public SecurityKeyId securityKey(<ph id=\"ph1\">\\[</ph>SecurityKeyId value<ph id=\"ph2\">\\]</ph>)","pos":[348025,348082],"source":"public SecurityKeyId securityKey(\\[SecurityKeyId value\\])"},{"content":"Sets or returns the ID of the security key for the control.","pos":[348178,348237]},{"content":"public int showContextMenu(int menuHandle)","pos":[348350,348392]},{"content":"Shows the shortcut menu for the control.","pos":[348503,348543]},{"content":"public str getContextMenuOptions()","pos":[348675,348709]},{"content":"public boolean skip(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[349000,349038],"source":"public boolean skip(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[349153,349280]},{"content":"public str templateId()","pos":[349325,349348]},{"content":"public str toolTip()","pos":[349650,349670]},{"content":"Retrieves the tooltip text for the control.","pos":[349803,349846]},{"content":"public int top(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[349975,350014],"source":"public int top(int value, \\[int mode\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[350128,350190]},{"content":"public int topMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350300,350333],"source":"public int topMode(\\[int value\\])"},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[350453,350512]},{"content":"public int topValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350625,350659],"source":"public int topValue(\\[int value\\])"},{"content":"Gets or sets the vertical position of the control in the form.","pos":[350778,350840]},{"content":"public int type(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[350950,350980],"source":"public int type(\\[int value\\])"},{"content":"public boolean SysObsoleteAttribute(container data)","pos":[351275,351326]},{"content":"public int updateWindow()","pos":[351600,351625]},{"content":"Updates the window for the control.","pos":[351753,351788]},{"content":"public int userData(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[351925,351959],"source":"public int userData(\\[int value\\])"},{"content":"Gets or sets the user data for the control.","pos":[352078,352121]},{"content":"public int userDataItem(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[352250,352288],"source":"public int userDataItem(\\[int value\\])"},{"content":"Gets or sets the user data item for the control.","pos":[352403,352451]},{"content":"public int userDataItems(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[352575,352614],"source":"public int userDataItems(\\[int value\\])"},{"content":"Gets or sets the number of user data items for the control.","pos":[352728,352787]},{"content":"public int userDisable(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[352900,352937],"source":"public int userDisable(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[353053,353136]},{"content":"public int userHeight(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[353225,353261],"source":"public int userHeight(\\[int value\\])"},{"content":"Gets or sets the custom user height for the control.","pos":[353378,353430]},{"content":"public int userHide(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[353550,353584],"source":"public int userHide(\\[int value\\])"},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[353703,353785]},{"content":"public int userOrgContainer(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[353875,353917],"source":"public int userOrgContainer(\\[int value\\])"},{"content":"Gets or sets the organization container for the control.","pos":[354028,354084]},{"content":"public int userOrgSibling(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[354200,354240],"source":"public int userOrgSibling(\\[int value\\])"},{"content":"Gets or sets the organization sibling for the control.","pos":[354353,354407]},{"content":"public str userPromptText(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[354525,354565],"source":"public str userPromptText(\\[str value\\])"},{"content":"Gets or sets the user label text for the control.","pos":[354678,354727]},{"content":"public int userSecurityLevel(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[354850,354893],"source":"public int userSecurityLevel(\\[int value\\])"},{"content":"Gets or sets the user security level for the control.","pos":[355003,355056]},{"content":"public int userSkip(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[355175,355209],"source":"public int userSkip(\\[int value\\])"},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[355328,355476]},{"content":"public int userWidth(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[355500,355535],"source":"public int userWidth(\\[int value\\])"},{"content":"Sets or returns the width of the control in pixels.","pos":[355653,355704]},{"content":"public str valueStr()","pos":[355825,355846]},{"content":"Retrieves the value of the control in string format.","pos":[355978,356030]},{"content":"public int verticalSpacing(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>, <ph id=\"ph3\">\\[</ph>AutoMode mode<ph id=\"ph4\">\\]</ph>)","pos":[356150,356210],"source":"public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[356303,356364]},{"content":"public AutoMode verticalSpacingMode(<ph id=\"ph1\">\\[</ph>AutoMode mode<ph id=\"ph2\">\\]</ph>)","pos":[356475,356529],"source":"public AutoMode verticalSpacingMode(\\[AutoMode mode\\])"},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[356628,356687]},{"content":"public int verticalSpacingValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[356800,356846],"source":"public int verticalSpacingValue(\\[int value\\])"},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[356953,357014]},{"content":"public boolean visible(<ph id=\"ph1\">\\[</ph>boolean value<ph id=\"ph2\">\\]</ph>)","pos":[357125,357166],"source":"public boolean visible(\\[boolean value\\])"},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[357278,357348]},{"content":"public int width(int value, <ph id=\"ph1\">\\[</ph>int mode<ph id=\"ph2\">\\]</ph>)","pos":[357450,357491],"source":"public int width(int value, \\[int mode\\])"},{"content":"Gets or sets the width of the control.","pos":[357603,357641]},{"content":"public int widthMode(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[357775,357810],"source":"public int widthMode(\\[int value\\])"},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[357928,357990]},{"content":"public int widthValue(<ph id=\"ph1\">\\[</ph>int value<ph id=\"ph2\">\\]</ph>)","pos":[358100,358136],"source":"public int widthValue(\\[int value\\])"},{"content":"Gets or sets the width of the control.","pos":[358253,358291]},{"content":"public void displayControl()","pos":[358425,358453]},{"content":"Displays the control.","pos":[358578,358599]},{"content":"public void copy()","pos":[358750,358768]},{"content":"Copies the contents of the control to the clipboard.","pos":[358903,358955]},{"content":"public void paste()","pos":[359075,359094]},{"content":"Pastes the contents of the clipboard into the control.","pos":[359228,359282]},{"content":"public void setFocus()","pos":[359400,359422]},{"content":"Sets the focus on the control.","pos":[359553,359583]},{"content":"public void cut()","pos":[359725,359742]},{"content":"Cuts the contents of the control.","pos":[359878,359911]},{"content":"public void gotFocus()","pos":[360050,360072]},{"content":"Indicates that the control has received focus.","pos":[360203,360249]},{"content":"public void dragLeave()","pos":[360375,360398]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[360528,360624]},{"content":"public void lostFocus()","pos":[360700,360723]},{"content":"Indicates that the control has lost focus.","pos":[360853,360895]},{"content":"public void inputSearch(str searchStr)","pos":[361025,361063]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[361178,361249]},{"content":"public void setTemplateId(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[361350,361390],"source":"public void setTemplateId(\\[str value\\])"},{"content":"public void prefColumnSize(int width, int height)","pos":[361675,361724]},{"content":"Specifies the preferred column width and height for the form control.","pos":[361828,361897]},{"content":"public void update()","pos":[362000,362020]},{"content":"Updates the control.","pos":[362153,362173]},{"content":"public void run()","pos":[362325,362342]},{"content":"public void lock()","pos":[362650,362668]},{"content":"Locks the form control.","pos":[362803,362826]},{"content":"public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)","pos":[362975,363052]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[363128,363198]},{"content":"public void applyBuild()","pos":[363300,363324]},{"content":"public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)","pos":[363625,363698]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[363778,363876]},{"content":"public void resetUserSetting()","pos":[363950,363980]},{"content":"Resets the user settings for the control.","pos":[364103,364144]},{"content":"public void new(FormBuildControl build, xFormRun formRun)","pos":[364275,364332]},{"content":"public void context()","pos":[364600,364621]},{"content":"Shows the shortcut menu for the control.","pos":[364753,364793]},{"content":"public void unLock(boolean update)","pos":[364925,364959]},{"content":"Unlocks a form control.","pos":[365078,365101]},{"content":"public void setResourceBundleName(<ph id=\"ph1\">\\[</ph>str value<ph id=\"ph2\">\\]</ph>)","pos":[365250,365298],"source":"public void setResourceBundleName(\\[str value\\])"},{"content":"public void selectedMenuOption(int selectedOption)","pos":[365575,365625]},{"content":"public void mouseLeave()","pos":[365900,365924]},{"content":"Indicates that the mouse pointer has left the control.","pos":[366053,366107]},{"content":"public void onPropChanged(<ph id=\"ph1\">\\[</ph>str propName<ph id=\"ph2\">\\]</ph>)","pos":[366225,366268],"source":"public void onPropChanged(\\[str propName\\])"},{"content":"public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)","pos":[366550,366619]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[366703,366803]},{"content":"public void initialize()","pos":[366875,366899]},{"content":"public void endDrag()","pos":[367200,367221]},{"content":"Is called when the user has finished dragging a form control.","pos":[367353,367414]},{"pos":[367528,367547],"content":"Method alignControl","linkify":"Method alignControl","nodes":[{"content":"Method alignControl","pos":[0,19]}]},{"content":"Determines whether the control should be aligned.","pos":[367549,367598]},{"pos":[367655,367665],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[367667,367672]},{"content":"The new value for the property; optional.","pos":[367675,367716]},{"pos":[367723,367735],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control should be aligned; otherwise, false.","pos":[367737,367793]},{"pos":[367800,367807],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The upper-left corner of the control is aligned based on the longest label.","pos":[367809,367884]},{"pos":[367890,367906],"content":"Method allowEdit","linkify":"Method allowEdit","nodes":[{"content":"Method allowEdit","pos":[0,16]}]},{"content":"Determines whether the user can modify the contents of the control.","pos":[367908,367975]},{"pos":[368029,368039],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368041,368046]},{"content":"The value to assign to the allowEdit property.","pos":[368049,368095]},{"pos":[368102,368114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control can be modified; otherwise, false.","pos":[368116,368170]},{"pos":[368177,368184],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If this property is set on a container control, modifications are disabled or enabled for all controls in the container.","pos":[368186,368306]},{"pos":[368313,368321],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the value of the allowEdit property.","pos":[368323,368409]},{"pos":[368547,368567],"content":"Method allowSysSetup","linkify":"Method allowSysSetup","nodes":[{"content":"Method allowSysSetup","pos":[0,20]}]},{"content":"Retrieves a value that indicates whether the control is shown in the SysSetup form.","pos":[368569,368652]},{"pos":[368695,368707],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is shown in the SysSetup form; otherwise, false.","pos":[368709,368777]},{"pos":[368783,368805],"content":"Method autoDeclaration","linkify":"Method autoDeclaration","nodes":[{"content":"Method autoDeclaration","pos":[0,22]}]},{"content":"Determines whether the system can declare a member variable that has the same name as the control.","pos":[368807,368905]},{"pos":[368965,368975],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[368977,368982]},{"content":"The value to set the property to, if a value is supplied.","pos":[368985,369042]},{"pos":[369049,369061],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the member variable can be declared for this control; otherwise, false.","pos":[369063,369142]},{"pos":[369149,369156],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Controls cannot have identical names.","pos":[369158,369195]},{"pos":[369201,369217],"content":"Method beginDrag","linkify":"Method beginDrag","nodes":[{"content":"Method beginDrag","pos":[0,16]}]},{"content":"Is called when the user starts to drag a form control.","pos":[369219,369273]},{"pos":[369320,369330],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[369332,369333]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[369336,369406]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[369407,369474]},{"content":"y","pos":[369486,369487]},{"content":"An integer value that indicates the y-coordinate of the mouse pointer.","pos":[369490,369560]},{"content":"The coordinate is relative to the upper-left corner of the control.","pos":[369561,369628]},{"pos":[369635,369647],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[369649,369688]},{"pos":[369695,369702],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control.","pos":[369704,369785]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[369786,369890]},{"pos":[369897,369905],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example displays the x-coordinates and y-coordinates in the Infolog when the user starts to drag the form control.","pos":[369907,370035]},{"pos":[370228,370240],"content":"Method build","linkify":"Method build","nodes":[{"content":"Method build","pos":[0,12]}]},{"pos":[370284,370296],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370302,370324],"content":"Method calcControlSize","linkify":"Method calcControlSize","nodes":[{"content":"Method calcControlSize","pos":[0,22]}]},{"content":"Retrieves the size of the control.","pos":[370326,370360]},{"pos":[370427,370437],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"chars","pos":[370439,370444]},{"content":"The number of lines to use to determine the height.","pos":[370447,370498]},{"content":"lines","pos":[370510,370515]},{"content":"The number of lines to use to determine the height.","pos":[370518,370569]},{"pos":[370576,370588],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The container that holds the width and height.","pos":[370590,370636]},{"pos":[370642,370662],"content":"Method changeTracker","linkify":"Method changeTracker","nodes":[{"content":"Method changeTracker","pos":[0,20]}]},{"pos":[370715,370727],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[370733,370756],"content":"Method configurationKey","linkify":"Method configurationKey","nodes":[{"content":"Method configurationKey","pos":[0,23]}]},{"content":"Gets or sets the configuration key that is assigned to the control.","pos":[370758,370825]},{"pos":[370908,370918],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[370920,370925]},{"content":"The ID of the configuration key to assign to the control; optional.","pos":[370928,370995]},{"pos":[371002,371014],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the configuration key that is assigned to the control.","pos":[371016,371080]},{"pos":[371087,371094],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The configuration key is used to determine whether this control can be displayed.","pos":[371096,371177]},{"content":"If the configuration key is disabled in the system, the control is not displayed in the form.","pos":[371178,371271]},{"pos":[371278,371286],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to set and retrieve the configuration key for a control.","pos":[371288,371376]},{"pos":[371954,371979],"content":"Method configurationKeyEx","linkify":"Method configurationKeyEx","nodes":[{"content":"Method configurationKeyEx","pos":[0,25]}]},{"content":"Retrieves a list that contains the IDs of configuration keys that are in effect for the control.","pos":[371981,372077]},{"pos":[372122,372134],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A list that contains the IDs of configuration keys that are in effect for the control.","pos":[372136,372222]},{"pos":[372229,372236],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The returned list does not contain duplicate IDs.","pos":[372238,372287]},{"content":"If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field.","pos":[372288,372436]},{"content":"The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.","pos":[372437,372571]},{"pos":[372578,372586],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve the configuration key IDs for a control.","pos":[372588,372672]},{"pos":[373269,373287],"content":"Method containerId","linkify":"Method containerId","nodes":[{"content":"Method containerId","pos":[0,18]}]},{"content":"Retrieves the ID of the parent container for the control.","pos":[373289,373346]},{"pos":[373383,373395],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the parent container.","pos":[373397,373428]},{"pos":[373434,373459],"content":"Method countryRegionCodes","linkify":"Method countryRegionCodes","nodes":[{"content":"Method countryRegionCodes","pos":[0,25]}]},{"content":"Gets or sets the comma-separated list of country/region codes for the control.","pos":[373461,373539]},{"pos":[373594,373604],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[373606,373611]},{"content":"The string that contains the country/region codes to set; optional.","pos":[373614,373681]},{"pos":[373688,373700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The comma-separated list of country/region codes for the control.","pos":[373702,373767]},{"pos":[373773,373790],"content":"Method currentRow","linkify":"Method currentRow","nodes":[{"content":"Method currentRow","pos":[0,17]}]},{"pos":[373826,373838],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[373844,373867],"content":"Method dataRelationPath","linkify":"Method dataRelationPath","nodes":[{"content":"Method dataRelationPath","pos":[0,23]}]},{"content":"Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[373869,373994]},{"pos":[374047,374057],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[374059,374064]},{"content":"The string that contains the period-delimited list of relations; optional.","pos":[374067,374141]},{"pos":[374148,374160],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The period-delimited list of relations that links the field binding of the DataField object to a relative table.","pos":[374162,374274]},{"pos":[374281,374288],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This method is used by the reference group control to track exactly which relations produce the replacement field that is used.","pos":[374290,374417]},{"content":"It enables the reference group control to bind consistently to the controls that it contains.","pos":[374418,374511]},{"pos":[374517,374540],"content":"Method dataSourceObject","linkify":"Method dataSourceObject","nodes":[{"content":"Method dataSourceObject","pos":[0,23]}]},{"pos":[374593,374605],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[374611,374631],"content":"Method displayTarget","linkify":"Method displayTarget","nodes":[{"content":"Method displayTarget","pos":[0,20]}]},{"content":"Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.","pos":[374633,374800]},{"pos":[374850,374860],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[374862,374867]},{"content":"The integer value that indicates where the control is displayed; optional.","pos":[374870,374944]},{"pos":[374951,374963],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.","pos":[374965,375093]},{"pos":[375099,375114],"content":"Method dragDrop","linkify":"Method dragDrop","nodes":[{"content":"Method dragDrop","pos":[0,15]}]},{"content":"Determines whether drag-and-drop operations are enabled or disabled for the control.","pos":[375116,375200]},{"pos":[375245,375255],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[375257,375262]},{"content":"An integer value that indicates whether drag-and-drop behavior is enabled; optional.","pos":[375265,375349]},{"pos":[375356,375368],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if drag-and-drop operations are enabled; otherwise, false.","pos":[375370,375430]},{"pos":[375437,375445],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return or set the value that indicates whether drag-and-drop behavior is enabled.","pos":[375447,375563]},{"pos":[375831,375846],"content":"Method dragOver","linkify":"Method dragOver","nodes":[{"content":"Method dragOver","pos":[0,15]}]},{"content":"Raises the dragOver event to indicate that a mouse drag operation is over the current control.","pos":[375848,375942]},{"pos":[376036,376046],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[376048,376058]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[376061,376146]},{"content":"dragMode","pos":[376158,376166]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[376169,376254]},{"content":"x","pos":[376266,376267]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[376270,376355]},{"content":"y","pos":[376367,376368]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[376371,376456]},{"pos":[376463,376475],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[376477,376542]},{"pos":[376548,376565],"content":"Method dragOverEx","linkify":"Method dragOverEx","nodes":[{"content":"Method dragOverEx","pos":[0,17]}]},{"content":"Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.","pos":[376567,376663]},{"pos":[376753,376763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[376765,376775]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[376778,376863]},{"content":"dragMode","pos":[376875,376883]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[376886,376971]},{"content":"x","pos":[376983,376984]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[376987,377072]},{"content":"y","pos":[377084,377085]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[377088,377173]},{"pos":[377180,377192],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FormDrag enumeration value that indicates the mode of dragging.","pos":[377194,377259]},{"pos":[377265,377280],"content":"Method dragText","linkify":"Method dragText","nodes":[{"content":"Method dragText","pos":[0,15]}]},{"content":"Retrieves the text that is displayed when the form control is dragged.","pos":[377282,377352]},{"pos":[377386,377398],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.","pos":[377400,377531]},{"pos":[377537,377560],"content":"Method editAutoPostback","linkify":"Method editAutoPostback","nodes":[{"content":"Method editAutoPostback","pos":[0,23]}]},{"pos":[377621,377631],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[377633,377638]},{"pos":[377647,377659],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[377665,377679],"content":"Method enabled","linkify":"Method enabled","nodes":[{"content":"Method enabled","pos":[0,14]}]},{"content":"Determines whether the object is enabled or disabled.","pos":[377681,377734]},{"pos":[377786,377796],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[377798,377803]},{"content":"A Boolean value that specifies whether the control is enabled; optional.","pos":[377806,377878]},{"pos":[377885,377897],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the object is enabled; otherwise, false.","pos":[377899,377947]},{"pos":[377954,377961],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The enabled property lets you enable or disable controls at run time.","pos":[377963,378032]},{"content":"For example, you can disable objects that do not apply to the current state of the application.","pos":[378033,378128]},{"content":"You can also disable a control that is used only for display purposes, such as an error message that provides read-only information.","pos":[378129,378261]},{"pos":[378268,378276],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the enabled property for a control.","pos":[378278,378363]},{"pos":[378528,378548],"content":"Method extendedStyle","linkify":"Method extendedStyle","nodes":[{"content":"Method extendedStyle","pos":[0,20]}]},{"pos":[378598,378608],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[378610,378615]},{"pos":[378624,378636],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[378642,378661],"content":"Method fieldBinding","linkify":"Method fieldBinding","nodes":[{"content":"Method fieldBinding","pos":[0,19]}]},{"content":"Retrieves the table and field bindings of the control into a FieldBinding derived class.","pos":[378663,378751]},{"pos":[378798,378810],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"A FieldBinding derived class that contains the table and field bindings of the control.","pos":[378812,378899]},{"pos":[378905,378921],"content":"Method formatStr","linkify":"Method formatStr","nodes":[{"content":"Method formatStr","pos":[0,16]}]},{"pos":[379074,379084],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"rowNumber","pos":[379086,379095]},{"content":"display","pos":[379109,379116]},{"content":"maxWidth","pos":[379130,379138]},{"content":"forceSignWhenDisplaceNegative","pos":[379152,379181]},{"content":"formatForExport","pos":[379195,379210]},{"pos":[379219,379231],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[379237,379251],"content":"Method formRun","linkify":"Method formRun","nodes":[{"content":"Method formRun","pos":[0,14]}]},{"pos":[379289,379301],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[379307,379324],"content":"Method getBinding","linkify":"Method getBinding","nodes":[{"content":"Method getBinding","pos":[0,17]}]},{"pos":[379384,379394],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"propertyName","pos":[379396,379408]},{"pos":[379417,379429],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[379435,379452],"content":"Method hasChanged","linkify":"Method hasChanged","nodes":[{"content":"Method hasChanged","pos":[0,17]}]},{"content":"Sets or returns a value that indicates whether the contents of the control have changed.","pos":[379454,379542]},{"pos":[379595,379605],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"val","pos":[379607,379610]},{"content":"The value to assign as the hasChanged value for the control; optional.","pos":[379613,379683]},{"pos":[379690,379702],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the contents of the control have changed; otherwise, false.","pos":[379704,379771]},{"pos":[379778,379786],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the value that indicates whether the contents of the control have changed.","pos":[379788,379912]},{"pos":[380168,380189],"content":"Method hasUserSetting","linkify":"Method hasUserSetting","nodes":[{"content":"Method hasUserSetting","pos":[0,21]}]},{"content":"Indicates whether the control has custom user settings.","pos":[380191,380246]},{"pos":[380290,380302],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control has custom user settings; otherwise, false.","pos":[380304,380367]},{"pos":[380373,380386],"content":"Method height","linkify":"Method height","nodes":[{"content":"Method height","pos":[0,13]}]},{"content":"Gets or sets the height of the control.","pos":[380388,380427]},{"pos":[380480,380490],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[380492,380497]},{"content":"An integer value that indicates how the height is calculated; optional.","pos":[380500,380571]},{"content":"mode","pos":[380583,380587]},{"content":"An integer value that indicates how the height is calculated; optional.","pos":[380590,380661]},{"pos":[380668,380680],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height of the control in pixels.","pos":[380682,380718]},{"pos":[380725,380732],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[380734,380787]},{"content":"Calculate the height according to the following table.","pos":[380788,380842]},{"content":"Mode","pos":[380846,380850]},{"content":"Height calculation","pos":[380866,380884]},{"content":"-1 – Exact","pos":[381076,381086]},{"content":"The exact height of the control in pixels is used.","pos":[381096,381146]},{"content":"0 – Auto","pos":[381191,381199]},{"content":"The height of the control is calculated automatically, and the value parameter is ignored.","pos":[381211,381301]},{"content":"1 – Column height","pos":[381306,381323]},{"content":"The layout of the form determines the height of the control.","pos":[381326,381386]},{"content":"The height and height calculation mode can be set separately.","pos":[381420,381481]},{"pos":[381487,381504],"content":"Method heightMode","linkify":"Method heightMode","nodes":[{"content":"Method heightMode","pos":[0,17]}]},{"content":"Gets or sets a calculation mode for the height of the control.","pos":[381506,381568]},{"pos":[381615,381625],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[381627,381632]},{"content":"An integer value that indicates how the control height is calculated; optional.","pos":[381635,381714]},{"pos":[381721,381733],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The calculation mode.","pos":[381735,381756]},{"pos":[381763,381770],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the height according to the following table.","pos":[381772,381826]},{"content":"Mode","pos":[381830,381834]},{"content":"Height calculation","pos":[381846,381864]},{"content":"Exact","pos":[382052,382057]},{"content":"The exact height of the control in pixels is used.","pos":[382068,382118]},{"content":"Auto","pos":[382163,382167]},{"content":"The height of the control is calculated automatically, and the value parameter is ignored.","pos":[382179,382269]},{"content":"Column height","pos":[382274,382287]},{"content":"The layout of the form determines the height of the control.","pos":[382290,382350]},{"content":"The height of the control might change when the calculation mode is set to Auto or Column height.","pos":[382384,382481]},{"pos":[382488,382496],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the height calculation mode for a form control.","pos":[382498,382595]},{"pos":[382887,382905],"content":"Method heightValue","linkify":"Method heightValue","nodes":[{"content":"Method heightValue","pos":[0,18]}]},{"content":"Gets or sets the height of the control.","pos":[382907,382946]},{"pos":[382994,383004],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[383006,383011]},{"content":"An integer value that specifies the height in pixels; optional.","pos":[383014,383077]},{"pos":[383084,383096],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The height in pixels.","pos":[383098,383119]},{"pos":[383126,383133],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The height of the control is not changed unless the Exact height calculation mode is used.","pos":[383135,383225]},{"pos":[383232,383240],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the height value of a form control.","pos":[383242,383327]},{"pos":[383600,383616],"content":"Method helpField","linkify":"Method helpField","nodes":[{"content":"Method helpField","pos":[0,16]}]},{"content":"Retrieves the Help text for the control.","pos":[383618,383658]},{"pos":[383693,383705],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The Help text for the control; an empty string if there is no Help text for the control.","pos":[383707,383795]},{"pos":[383802,383809],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The helpField method cannot be used to set the value of the Help text.","pos":[383811,383881]},{"content":"Use the helpText method to set the value of the Help text.","pos":[383882,383940]},{"pos":[383947,383955],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to use the helpField method.","pos":[383957,384017]},{"pos":[384074,384089],"content":"Method helpText","linkify":"Method helpText","nodes":[{"content":"Method helpText","pos":[0,15]}]},{"content":"Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.","pos":[384091,384202]},{"pos":[384247,384257],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[384259,384264]},{"content":"The value to assign as the Help text for the control.","pos":[384267,384320]},{"pos":[384327,384339],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The string that should be displayed at the bottom of the screen.","pos":[384341,384405]},{"pos":[384412,384419],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Set the HelpText property for an object by using the property sheet.","pos":[384421,384489]},{"content":"The Help text must not exceed 250 characters.","pos":[384490,384535]},{"pos":[384542,384550],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to set and return the Help text for a control.","pos":[384552,384630]},{"pos":[384827,384849],"content":"Method hierarchyParent","linkify":"Method hierarchyParent","nodes":[{"content":"Method hierarchyParent","pos":[0,22]}]},{"content":"Gets or sets the HierarchyParent property value of the control.","pos":[384851,384914]},{"pos":[384966,384976],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[384978,384983]},{"content":"The value to assign to the HierarchyParent property of the control.","pos":[384986,385053]},{"pos":[385060,385072],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The HierarchyParent property value of the control.","pos":[385074,385124]},{"pos":[385130,385141],"content":"Method hWnd","linkify":"Method hWnd","nodes":[{"content":"Method hWnd","pos":[0,11]}]},{"content":"Retrieves the Windows handle for the control.","pos":[385143,385188]},{"pos":[385218,385230],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The handle for the control.","pos":[385232,385259]},{"pos":[385266,385273],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The handle can be used with the Windows API.","pos":[385275,385319]},{"pos":[385326,385334],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve the Windows handle for a control.","pos":[385336,385413]},{"pos":[385488,385497],"content":"Method id","linkify":"Method id","nodes":[{"content":"Method id","pos":[0,9]}]},{"content":"Retrieves the ID of the control.","pos":[385499,385531]},{"pos":[385559,385571],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the control.","pos":[385573,385595]},{"pos":[385601,385619],"content":"Method isDisplayed","linkify":"Method isDisplayed","nodes":[{"content":"Method isDisplayed","pos":[0,18]}]},{"content":"Retrieves a value that indicates whether the control is displayed.","pos":[385621,385687]},{"pos":[385728,385740],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is displayed; otherwise, false.","pos":[385742,385793]},{"pos":[385800,385807],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To modify the visible state of the control, call the visible method.","pos":[385809,385877]},{"pos":[385884,385892],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to determine whether a control is visible.","pos":[385894,385968]},{"pos":[386032,386049],"content":"Method isEditable","linkify":"Method isEditable","nodes":[{"content":"Method isEditable","pos":[0,17]}]},{"pos":[386089,386101],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[386107,386123],"content":"Method isEnabled","linkify":"Method isEnabled","nodes":[{"content":"Method isEnabled","pos":[0,16]}]},{"pos":[386162,386174],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[386180,386199],"content":"Method isRestricted","linkify":"Method isRestricted","nodes":[{"content":"Method isRestricted","pos":[0,19]}]},{"content":"Retrieves a value that indicates whether the control is restricted.","pos":[386201,386268]},{"pos":[386310,386322],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is restricted; otherwise, false.","pos":[386324,386376]},{"pos":[386382,386407],"content":"Method isUserSetupEnabled","linkify":"Method isUserSetupEnabled","nodes":[{"content":"Method isUserSetupEnabled","pos":[0,25]}]},{"content":"Retrieves a value that indicates whether the control allows for the specified level of customization.","pos":[386409,386510]},{"pos":[386579,386589],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"neededSetupRights","pos":[386591,386608]},{"content":"A value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.","pos":[386611,386739]},{"pos":[386746,386758],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.","pos":[386760,386919]},{"pos":[386926,386933],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The following table describes the values for the neededSetupRights parameter.","pos":[386935,387012]},{"content":"FormAllowUserSetup::No 0","pos":[387352,387376]},{"content":"No changes can be made to the control.","pos":[387387,387425]},{"content":"If this value is set for the neededSetupRights parameter, the method always returns true.","pos":[387426,387515]},{"content":"FormAllowUserSetup::Restricted 1","pos":[387520,387552]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[387555,387647]},{"content":"The user cannot move the control.","pos":[387648,387681]},{"content":"FormAllowUserSetup::Yes 2","pos":[387688,387713]},{"content":"The user can change the editable, visible, skip, label, and width properties of the control.","pos":[387723,387815]},{"content":"The user can also move the control.","pos":[387816,387851]},{"content":"For this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.","pos":[387855,388044]},{"pos":[388051,388059],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to determine the user setup rights for a control.","pos":[388061,388142]},{"pos":[388756,388772],"content":"Method isVisible","linkify":"Method isVisible","nodes":[{"content":"Method isVisible","pos":[0,16]}]},{"content":"Retrieves a value that indicates whether the control is visible.","pos":[388774,388838]},{"pos":[388877,388889],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[388891,388940]},{"pos":[388946,388970],"content":"Method isVisibleOnClient","linkify":"Method isVisibleOnClient","nodes":[{"content":"Method isVisibleOnClient","pos":[0,24]}]},{"pos":[389017,389029],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[389035,389051],"content":"Method labelText","linkify":"Method labelText","nodes":[{"content":"Method labelText","pos":[0,16]}]},{"content":"Retrieves the label text for the control.","pos":[389053,389094]},{"pos":[389129,389141],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The label text for the control; an empty string if there is no label text for the control.","pos":[389143,389233]},{"pos":[389239,389250],"content":"Method left","linkify":"Method left","nodes":[{"content":"Method left","pos":[0,11]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[389252,389316]},{"pos":[389367,389377],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[389379,389384]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[389387,389473]},{"content":"mode","pos":[389485,389489]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[389492,389578]},{"pos":[389585,389597],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[389599,389650]},{"pos":[389656,389671],"content":"Method leftMode","linkify":"Method leftMode","nodes":[{"content":"Method leftMode","pos":[0,15]}]},{"content":"Sets the horizontal arrange mode for the control in the form.","pos":[389673,389734]},{"pos":[389779,389789],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[389791,389796]},{"content":"An integer value that indicates the horizontal arrange mode for the control; optional.","pos":[389799,389885]},{"pos":[389892,389904],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal arrange mode for the control in the form.","pos":[389906,389962]},{"pos":[389968,389984],"content":"Method leftValue","linkify":"Method leftValue","nodes":[{"content":"Method leftValue","pos":[0,16]}]},{"content":"Gets or sets the horizontal position of the control in the form.","pos":[389986,390050]},{"pos":[390096,390106],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[390108,390113]},{"content":"An integer value that indicates the horizontal position of the control; optional.","pos":[390116,390197]},{"pos":[390204,390216],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The horizontal position of the control in the form.","pos":[390218,390269]},{"pos":[390275,390298],"content":"Method lockWindowUpdate","linkify":"Method lockWindowUpdate","nodes":[{"content":"Method lockWindowUpdate","pos":[0,23]}]},{"content":"Locks or unlocks the window of the control for update.","pos":[390300,390354]},{"pos":[390412,390422],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"lock","pos":[390424,390428]},{"content":"A Boolean value: true to lock the window, and false to unlock the window.","pos":[390431,390504]},{"pos":[390511,390523],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the operation was successful; otherwise, false.","pos":[390525,390580]},{"pos":[390586,390606],"content":"Method markAsUserAdd","linkify":"Method markAsUserAdd","nodes":[{"content":"Method markAsUserAdd","pos":[0,20]}]},{"content":"Marks or unmarks the control as a user-added control.","pos":[390608,390661]},{"pos":[390719,390729],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[390731,390736]},{"content":"The Boolean value that indicates whether the control should be marked as a user-added control.","pos":[390739,390833]},{"pos":[390840,390852],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control was marked as a user-added control; otherwise, false.","pos":[390854,390927]},{"pos":[390933,390953],"content":"Method mouseDblClick","linkify":"Method mouseDblClick","nodes":[{"content":"Method mouseDblClick","pos":[0,20]}]},{"content":"Is called when the control is double-clicked by the user.","pos":[390955,391012]},{"pos":[391104,391114],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[391116,391117]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[391120,391181]},{"content":"y","pos":[391193,391194]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[391197,391258]},{"content":"button","pos":[391270,391276]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[391279,391340]},{"content":"Ctrl","pos":[391352,391356]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[391359,391420]},{"content":"Shift","pos":[391432,391437]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[391440,391501]},{"pos":[391508,391520],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[391522,391561]},{"pos":[391568,391576],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[391578,391682]},{"content":"The following example shows how to display the parameters of a mouseDblClick event in the Infolog.","pos":[391683,391781]},{"pos":[392346,392362],"content":"Method mouseDown","linkify":"Method mouseDown","nodes":[{"content":"Method mouseDown","pos":[0,16]}]},{"content":"Is called when the user clicks the mouse button over the control.","pos":[392364,392429]},{"pos":[392517,392527],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[392529,392530]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[392533,392594]},{"content":"y","pos":[392606,392607]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[392610,392671]},{"content":"button","pos":[392683,392689]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[392692,392753]},{"content":"Ctrl","pos":[392765,392769]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[392772,392833]},{"content":"Shift","pos":[392845,392850]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[392853,392914]},{"pos":[392921,392933],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[392935,392974]},{"pos":[392981,392988],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[392990,393094]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[393095,393230]},{"pos":[393237,393245],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to display the parameters of a mouseDown event in the Infolog.","pos":[393247,393341]},{"pos":[393922,393938],"content":"Method mouseMove","linkify":"Method mouseMove","nodes":[{"content":"Method mouseMove","pos":[0,16]}]},{"content":"Is called when the user moves the mouse pointer over the control.","pos":[393940,394005]},{"pos":[394093,394103],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[394105,394106]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[394109,394170]},{"content":"y","pos":[394182,394183]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[394186,394247]},{"content":"button","pos":[394259,394265]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[394268,394329]},{"content":"Ctrl","pos":[394341,394345]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[394348,394409]},{"content":"Shift","pos":[394421,394426]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[394429,394490]},{"pos":[394497,394509],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[394511,394550]},{"pos":[394557,394565],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[394567,394671]},{"content":"The following example shows how to display the parameters of a mouseMove event in the Infolog.","pos":[394672,394766]},{"pos":[395311,395325],"content":"Method mouseUp","linkify":"Method mouseUp","nodes":[{"content":"Method mouseUp","pos":[0,14]}]},{"content":"Is called when the user releases the mouse button over the control area.","pos":[395327,395399]},{"pos":[395485,395495],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[395497,395498]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[395501,395562]},{"content":"y","pos":[395574,395575]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[395578,395639]},{"content":"button","pos":[395651,395657]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[395660,395721]},{"content":"Ctrl","pos":[395733,395737]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[395740,395801]},{"content":"Shift","pos":[395813,395818]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[395821,395882]},{"pos":[395889,395901],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"0 (zero) if the event has been handled.","pos":[395903,395942]},{"pos":[395949,395956],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Typically, when this method is overridden, the return value from a call to the super method is returned.","pos":[395958,396062]},{"content":"This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.","pos":[396063,396198]},{"pos":[396205,396213],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to display the parameters of a mouseUp event in the Infolog.","pos":[396215,396307]},{"pos":[396842,396853],"content":"Method name","linkify":"Method name","nodes":[{"content":"Method name","pos":[0,11]}]},{"content":"Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.","pos":[396855,396990]},{"pos":[397031,397041],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397043,397048]},{"content":"The name to assign to the control; optional.","pos":[397051,397095]},{"pos":[397102,397114],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The name that is used in code to identify an application object.","pos":[397116,397180]},{"pos":[397187,397194],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The name property value of an object must meet the following criteria to avoid code conflicts:","pos":[397196,397290]},{"content":"It must start with a letter.","pos":[397296,397324]},{"content":"It cannot exceed 250 characters.","pos":[397329,397361]},{"content":"It can include numbers and underscore (<ph id=\"ph1\">\\_</ph>) characters.","pos":[397366,397420],"source":"It can include numbers and underscore (\\_) characters."},{"content":"It cannot include punctuation or spaces.","pos":[397425,397465]},{"content":"Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.","pos":[397470,397580]},{"pos":[397586,397609],"content":"Method neededPermission","linkify":"Method neededPermission","nodes":[{"content":"Method neededPermission","pos":[0,23]}]},{"pos":[397662,397672],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[397674,397679]},{"pos":[397688,397700],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[397706,397733],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[397785,397797],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[397803,397823],"content":"Method parentControl","linkify":"Method parentControl","nodes":[{"content":"Method parentControl","pos":[0,20]}]},{"content":"Retrieves the parent control for the control.","pos":[397825,397870]},{"pos":[397917,397929],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The parent control for the control.","pos":[397931,397966]},{"pos":[397972,397997],"content":"Method resourceBundleName","linkify":"Method resourceBundleName","nodes":[{"content":"Method resourceBundleName","pos":[0,25]}]},{"pos":[398041,398053],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[398059,398077],"content":"Method securityKey","linkify":"Method securityKey","nodes":[{"content":"Method securityKey","pos":[0,18]}]},{"content":"Sets or returns the ID of the security key for the control.","pos":[398079,398138]},{"pos":[398206,398216],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[398218,398223]},{"content":"The ID of the security key to assign to the control; optional.","pos":[398226,398288]},{"pos":[398295,398307],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The ID of the security key for the control; 0 (zero) if no security key is assigned to the control.","pos":[398309,398408]},{"pos":[398415,398423],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to retrieve and assign a security key ID for a control.","pos":[398425,398512]},{"pos":[399052,399074],"content":"Method showContextMenu","linkify":"Method showContextMenu","nodes":[{"content":"Method showContextMenu","pos":[0,22]}]},{"content":"Shows the shortcut menu for the control.","pos":[399076,399116]},{"pos":[399171,399181],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"menuHandle","pos":[399183,399193]},{"content":"The ID of the menu to show.","pos":[399196,399223]},{"pos":[399230,399242],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates whether the call succeeded.","pos":[399244,399303]},{"pos":[399309,399337],"content":"Method getContextMenuOptions","linkify":"Method getContextMenuOptions","nodes":[{"content":"Method getContextMenuOptions","pos":[0,28]}]},{"pos":[399384,399396],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[399402,399413],"content":"Method skip","linkify":"Method skip","nodes":[{"content":"Method skip","pos":[0,11]}]},{"content":"Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.","pos":[399415,399542]},{"pos":[399591,399601],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[399603,399608]},{"content":"The value to assign to the skip property of the control; optional.","pos":[399611,399677]},{"pos":[399684,399696],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.","pos":[399698,399804]},{"pos":[399811,399818],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"If the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.","pos":[399820,400015]},{"pos":[400022,400030],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following code example shows how to return and set the skip property of a control.","pos":[400032,400118]},{"pos":[400281,400298],"content":"Method templateId","linkify":"Method templateId","nodes":[{"content":"Method templateId","pos":[0,17]}]},{"pos":[400334,400346],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[400352,400366],"content":"Method toolTip","linkify":"Method toolTip","nodes":[{"content":"Method toolTip","pos":[0,14]}]},{"content":"Retrieves the tooltip text for the control.","pos":[400368,400411]},{"pos":[400444,400456],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The tooltip text for the control; an empty string if no tooltip text has been defined for the control.","pos":[400458,400560]},{"pos":[400567,400574],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The method might be overridden to provide a value to the toolTip method.","pos":[400576,400648]},{"pos":[400655,400663],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to override the toolTip method.","pos":[400665,400728]},{"pos":[400837,400847],"content":"Method top","linkify":"Method top","nodes":[{"content":"Method top","pos":[0,10]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[400849,400911]},{"pos":[400961,400971],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[400973,400978]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[400981,401065]},{"content":"mode","pos":[401077,401081]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[401084,401168]},{"pos":[401175,401187],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[401189,401238]},{"pos":[401244,401258],"content":"Method topMode","linkify":"Method topMode","nodes":[{"content":"Method topMode","pos":[0,14]}]},{"content":"Sets the vertical arrange mode for the control in the form.","pos":[401260,401319]},{"pos":[401363,401373],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401375,401380]},{"content":"An integer value that indicates the vertical arrange mode for the control; optional.","pos":[401383,401467]},{"pos":[401474,401486],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical arrange mode for the control in the form.","pos":[401488,401542]},{"pos":[401548,401563],"content":"Method topValue","linkify":"Method topValue","nodes":[{"content":"Method topValue","pos":[0,15]}]},{"content":"Gets or sets the vertical position of the control in the form.","pos":[401565,401627]},{"pos":[401672,401682],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401684,401689]},{"content":"An integer value that indicates the vertical position of the control; optional.","pos":[401692,401771]},{"pos":[401778,401790],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical position of the control in the form.","pos":[401792,401841]},{"pos":[401847,401858],"content":"Method type","linkify":"Method type","nodes":[{"content":"Method type","pos":[0,11]}]},{"pos":[401899,401909],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[401911,401916]},{"pos":[401925,401937],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[401943,401970],"content":"Method SysObsoleteAttribute","linkify":"Method SysObsoleteAttribute","nodes":[{"content":"Method SysObsoleteAttribute","pos":[0,27]}]},{"pos":[402034,402044],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"data","pos":[402046,402050]},{"pos":[402059,402071],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[402077,402096],"content":"Method updateWindow","linkify":"Method updateWindow","nodes":[{"content":"Method updateWindow","pos":[0,19]}]},{"content":"Updates the window for the control.","pos":[402098,402133]},{"pos":[402171,402183],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the update was successful; otherwise, 0.","pos":[402185,402230]},{"pos":[402236,402251],"content":"Method userData","linkify":"Method userData","nodes":[{"content":"Method userData","pos":[0,15]}]},{"content":"Gets or sets the user data for the control.","pos":[402253,402296]},{"pos":[402341,402351],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[402353,402358]},{"content":"An integer value that indicates the user data for the control; optional.","pos":[402361,402433]},{"pos":[402440,402452],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data for the control.","pos":[402454,402484]},{"pos":[402490,402509],"content":"Method userDataItem","linkify":"Method userDataItem","nodes":[{"content":"Method userDataItem","pos":[0,19]}]},{"content":"Gets or sets the user data item for the control.","pos":[402511,402559]},{"pos":[402608,402618],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[402620,402625]},{"content":"An integer value that indicates the user data item for the control; optional.","pos":[402628,402705]},{"pos":[402712,402724],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user data item for the control.","pos":[402726,402761]},{"pos":[402767,402787],"content":"Method userDataItems","linkify":"Method userDataItems","nodes":[{"content":"Method userDataItems","pos":[0,20]}]},{"content":"Gets or sets the number of user data items for the control.","pos":[402789,402848]},{"pos":[402898,402908],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[402910,402915]},{"content":"An integer value that indicates the number of user data items for the control; optional.","pos":[402918,403006]},{"pos":[403013,403025],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of user data items for the control.","pos":[403027,403073]},{"pos":[403079,403097],"content":"Method userDisable","linkify":"Method userDisable","nodes":[{"content":"Method userDisable","pos":[0,18]}]},{"content":"Gets or sets the value that indicates whether the control is disabled for the user.","pos":[403099,403182]},{"pos":[403230,403240],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403242,403247]},{"content":"The value that indicates whether the control is disabled for the user; optional.","pos":[403250,403330]},{"pos":[403337,403349],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is disabled for the user; otherwise, 0.","pos":[403351,403407]},{"pos":[403413,403430],"content":"Method userHeight","linkify":"Method userHeight","nodes":[{"content":"Method userHeight","pos":[0,17]}]},{"content":"Gets or sets the custom user height for the control.","pos":[403432,403484]},{"pos":[403531,403541],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403543,403548]},{"content":"The user height for the control; optional.","pos":[403551,403593]},{"pos":[403600,403612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The custom user height for the control.","pos":[403614,403653]},{"pos":[403659,403674],"content":"Method userHide","linkify":"Method userHide","nodes":[{"content":"Method userHide","pos":[0,15]}]},{"content":"Gets or sets the value that indicates whether the control is hidden from the user.","pos":[403676,403758]},{"pos":[403803,403813],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[403815,403820]},{"content":"The value that indicates whether the control is hidden from the user; optional.","pos":[403823,403902]},{"pos":[403909,403921],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the control is hidden from the user; otherwise, 0.","pos":[403923,403978]},{"pos":[403985,403992],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden.","pos":[403994,404164]},{"content":"A right-click opens a menu that can be used to hide or display the control.","pos":[404165,404240]},{"content":"This method lets you programmatically determine and set the value.","pos":[404241,404307]},{"pos":[404314,404322],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the value that indicates whether the control is hidden from the user.","pos":[404324,404443]},{"pos":[404677,404700],"content":"Method userOrgContainer","linkify":"Method userOrgContainer","nodes":[{"content":"Method userOrgContainer","pos":[0,23]}]},{"content":"Gets or sets the organization container for the control.","pos":[404702,404758]},{"pos":[404811,404821],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[404823,404828]},{"content":"The organization container to set for the control; optional.","pos":[404831,404891]},{"pos":[404898,404910],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization container for the control.","pos":[404912,404955]},{"pos":[404961,404982],"content":"Method userOrgSibling","linkify":"Method userOrgSibling","nodes":[{"content":"Method userOrgSibling","pos":[0,21]}]},{"content":"Gets or sets the organization sibling for the control.","pos":[404984,405038]},{"pos":[405089,405099],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[405101,405106]},{"content":"The organization sibling to set for the control; optional.","pos":[405109,405167]},{"pos":[405174,405186],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The organization sibling for the control.","pos":[405188,405229]},{"pos":[405235,405256],"content":"Method userPromptText","linkify":"Method userPromptText","nodes":[{"content":"Method userPromptText","pos":[0,21]}]},{"content":"Gets or sets the user label text for the control.","pos":[405258,405307]},{"pos":[405358,405368],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[405370,405375]},{"content":"The user label text to set for the control; optional.","pos":[405378,405431]},{"pos":[405438,405450],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user label text for the control.","pos":[405452,405488]},{"pos":[405494,405518],"content":"Method userSecurityLevel","linkify":"Method userSecurityLevel","nodes":[{"content":"Method userSecurityLevel","pos":[0,24]}]},{"content":"Gets or sets the user security level for the control.","pos":[405520,405573]},{"pos":[405627,405637],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[405639,405644]},{"content":"The user security level to set for the control; optional.","pos":[405647,405704]},{"pos":[405711,405723],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The user security level for the control.","pos":[405725,405765]},{"pos":[405771,405786],"content":"Method userSkip","linkify":"Method userSkip","nodes":[{"content":"Method userSkip","pos":[0,15]}]},{"content":"Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.","pos":[405788,405936]},{"pos":[405981,405991],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[405993,405998]},{"content":"The value to assign to the userSkip property; optional.","pos":[406001,406056]},{"content":"The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.","pos":[406057,406152]},{"pos":[406159,406171],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"1 if the user setting to skip the control is in effect; otherwise, 0.","pos":[406173,406242]},{"pos":[406249,406257],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the userSkip property.","pos":[406259,406331]},{"pos":[406569,406585],"content":"Method userWidth","linkify":"Method userWidth","nodes":[{"content":"Method userWidth","pos":[0,16]}]},{"content":"Sets or returns the width of the control in pixels.","pos":[406587,406638]},{"pos":[406684,406694],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[406696,406701]},{"content":"The number of pixels to use as the width of the control; optional.","pos":[406704,406770]},{"pos":[406777,406789],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.","pos":[406791,406920]},{"pos":[406927,406934],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The userWidth method returns the width in pixels, based on six times the number of characters.","pos":[406936,407030]},{"content":"For example, if the user has specified 30 characters as the width for the control, the return value is 6 <ph id=\"ph1\">\\*</ph> 30 = 180.","pos":[407031,407148],"source":" For example, if the user has specified 30 characters as the width for the control, the return value is 6 \\* 30 = 180."},{"content":"To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.","pos":[407149,407299]},{"pos":[407306,407314],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the user width of a form control.","pos":[407316,407399]},{"pos":[407648,407663],"content":"Method valueStr","linkify":"Method valueStr","nodes":[{"content":"Method valueStr","pos":[0,15]}]},{"content":"Retrieves the value of the control in string format.","pos":[407665,407717]},{"pos":[407751,407763],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The value of the control in string format.","pos":[407765,407807]},{"pos":[407814,407821],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The valueStr method can be bound to the data source.","pos":[407823,407875]},{"content":"The valueStr method should never be used in control validation methods.","pos":[407876,407947]},{"content":"Instead, use the text method in control validation methods.","pos":[407948,408007]},{"pos":[408013,408035],"content":"Method verticalSpacing","linkify":"Method verticalSpacing","nodes":[{"content":"Method verticalSpacing","pos":[0,22]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[408037,408098]},{"pos":[408167,408177],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408179,408184]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[408187,408258]},{"content":"mode","pos":[408270,408274]},{"content":"An integer value that indicates the AutoMode for the control; optional.","pos":[408277,408348]},{"pos":[408355,408367],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[408369,408417]},{"pos":[408423,408449],"content":"Method verticalSpacingMode","linkify":"Method verticalSpacingMode","nodes":[{"content":"Method verticalSpacingMode","pos":[0,26]}]},{"content":"Sets the vertical spacing mode for the control in the form.","pos":[408451,408510]},{"pos":[408575,408585],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"mode","pos":[408587,408591]},{"pos":[408600,408612],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing mode for the control in the form.","pos":[408614,408668]},{"pos":[408674,408701],"content":"Method verticalSpacingValue","linkify":"Method verticalSpacingValue","nodes":[{"content":"Method verticalSpacingValue","pos":[0,27]}]},{"content":"Gets or sets the vertical spacing of the control in the form.","pos":[408703,408764]},{"pos":[408821,408831],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[408833,408838]},{"content":"An integer value that indicates the vertical spacing of the control; optional.","pos":[408841,408919]},{"pos":[408926,408938],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The vertical spacing of the control in the form.","pos":[408940,408988]},{"pos":[408994,409008],"content":"Method visible","linkify":"Method visible","nodes":[{"content":"Method visible","pos":[0,14]}]},{"content":"Sets or returns a value that indicates whether the control is visible.","pos":[409010,409080]},{"pos":[409132,409142],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409144,409149]},{"content":"The value to assign to the visibility setting for the control; optional.","pos":[409152,409224]},{"pos":[409231,409243],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"true if the control is visible; otherwise, false.","pos":[409245,409294]},{"pos":[409300,409312],"content":"Method width","linkify":"Method width","nodes":[{"content":"Method width","pos":[0,12]}]},{"content":"Gets or sets the width of the control.","pos":[409314,409352]},{"pos":[409404,409414],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[409416,409421]},{"content":"An integer value that indicates how the width is calculated; optional.","pos":[409424,409494]},{"content":"mode","pos":[409506,409510]},{"content":"An integer value that indicates how the width is calculated; optional.","pos":[409513,409583]},{"pos":[409590,409602],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[409604,409639]},{"pos":[409646,409653],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Exact mode is used if the value parameter is omitted.","pos":[409655,409708]},{"content":"Calculate the width according to the following table.","pos":[409709,409762]},{"content":"Mode","pos":[409766,409770]},{"content":"Width calculation","pos":[409785,409802]},{"content":"-1 – Exact","pos":[409992,410002]},{"content":"The exact width of the control in pixels is used.","pos":[410011,410060]},{"content":"0 – Auto","pos":[410105,410113]},{"content":"The width of the control is calculated automatically, and the value parameter is ignored.","pos":[410124,410213]},{"content":"1 – Column width","pos":[410218,410234]},{"content":"The layout of the form determines the width of the control.","pos":[410237,410296]},{"content":"The width and width calculation mode can be set separately.","pos":[410330,410389]},{"pos":[410395,410411],"content":"Method widthMode","linkify":"Method widthMode","nodes":[{"content":"Method widthMode","pos":[0,16]}]},{"content":"Gets or sets the calculation mode of the width of the control.","pos":[410413,410475]},{"pos":[410521,410531],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[410533,410538]},{"content":"An integer value that indicates how the control width is calculated; optional.","pos":[410541,410619]},{"pos":[410626,410638],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An integer value that indicates the current calculation mode.","pos":[410640,410701]},{"pos":[410708,410715],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Calculate the width according to the following table.","pos":[410717,410770]},{"content":"Mode","pos":[410774,410778]},{"content":"Width calculation","pos":[410789,410806]},{"content":"Exact","pos":[410992,410997]},{"content":"The exact width of the control in pixels is used.","pos":[411007,411056]},{"content":"Auto","pos":[411101,411105]},{"content":"The width of the control is calculated automatically, and the value parameter is ignored.","pos":[411116,411205]},{"content":"Column width","pos":[411210,411222]},{"content":"The layout of the form determines the width of the control.","pos":[411225,411284]},{"content":"The width of the control might change when the calculation mode is set to Auto or Column width.","pos":[411318,411413]},{"pos":[411420,411428],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the width calculation mode for a form control.","pos":[411430,411526]},{"pos":[411812,411829],"content":"Method widthValue","linkify":"Method widthValue","nodes":[{"content":"Method widthValue","pos":[0,17]}]},{"content":"Gets or sets the width of the control.","pos":[411831,411869]},{"pos":[411916,411926],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[411928,411933]},{"content":"An integer value that specifies the width in pixels; optional.","pos":[411936,411998]},{"pos":[412005,412017],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"The width of the control in pixels.","pos":[412019,412054]},{"pos":[412061,412068],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"To change the width of the control, use the Exact width calculation mode.","pos":[412070,412143]},{"pos":[412150,412158],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to return and set the width value of a form control.","pos":[412160,412244]},{"pos":[412508,412529],"content":"Method displayControl","linkify":"Method displayControl","nodes":[{"content":"Method displayControl","pos":[0,21]}]},{"content":"Displays the control.","pos":[412531,412552]},{"pos":[412592,412603],"content":"Method copy","linkify":"Method copy","nodes":[{"content":"Method copy","pos":[0,11]}]},{"content":"Copies the contents of the control to the clipboard.","pos":[412605,412657]},{"pos":[412687,412699],"content":"Method paste","linkify":"Method paste","nodes":[{"content":"Method paste","pos":[0,12]}]},{"content":"Pastes the contents of the clipboard into the control.","pos":[412701,412755]},{"pos":[412786,412801],"content":"Method setFocus","linkify":"Method setFocus","nodes":[{"content":"Method setFocus","pos":[0,15]}]},{"content":"Sets the focus on the control.","pos":[412803,412833]},{"pos":[412867,412877],"content":"Method cut","linkify":"Method cut","nodes":[{"content":"Method cut","pos":[0,10]}]},{"content":"Cuts the contents of the control.","pos":[412879,412912]},{"pos":[412941,412956],"content":"Method gotFocus","linkify":"Method gotFocus","nodes":[{"content":"Method gotFocus","pos":[0,15]}]},{"content":"Indicates that the control has received focus.","pos":[412958,413004]},{"pos":[413038,413054],"content":"Method dragLeave","linkify":"Method dragLeave","nodes":[{"content":"Method dragLeave","pos":[0,16]}]},{"content":"Raises the dragLeave event to indicate that a mouse drag operation has left the current control.","pos":[413056,413152]},{"pos":[413187,413203],"content":"Method lostFocus","linkify":"Method lostFocus","nodes":[{"content":"Method lostFocus","pos":[0,16]}]},{"content":"Indicates that the control has lost focus.","pos":[413205,413247]},{"pos":[413282,413300],"content":"Method inputSearch","linkify":"Method inputSearch","nodes":[{"content":"Method inputSearch","pos":[0,18]}]},{"content":"Performs data filtering for the control, based on the specified string.","pos":[413302,413373]},{"pos":[413424,413434],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"searchStr","pos":[413436,413445]},{"content":"The string value to use to filter data; optional.","pos":[413448,413497]},{"pos":[413503,413523],"content":"Method setTemplateId","linkify":"Method setTemplateId","nodes":[{"content":"Method setTemplateId","pos":[0,20]}]},{"pos":[413574,413584],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[413586,413591]},{"pos":[413599,413620],"content":"Method prefColumnSize","linkify":"Method prefColumnSize","nodes":[{"content":"Method prefColumnSize","pos":[0,21]}]},{"content":"Specifies the preferred column width and height for the form control.","pos":[413622,413691]},{"pos":[413753,413763],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"width","pos":[413765,413770]},{"content":"The preferred height of the control.","pos":[413773,413809]},{"content":"height","pos":[413821,413827]},{"content":"The preferred height of the control.","pos":[413830,413866]},{"pos":[413873,413881],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to set the preferred width and height of a form control.","pos":[413883,413971]},{"pos":[414147,414160],"content":"Method update","linkify":"Method update","nodes":[{"content":"Method update","pos":[0,13]}]},{"content":"Updates the control.","pos":[414162,414182]},{"pos":[414214,414224],"content":"Method run","linkify":"Method run","nodes":[{"content":"Method run","pos":[0,10]}]},{"pos":[414253,414264],"content":"Method lock","linkify":"Method lock","nodes":[{"content":"Method lock","pos":[0,11]}]},{"content":"Locks the form control.","pos":[414266,414289]},{"pos":[414320,414327],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"Use the Lock command when you modify an object and are not sure whether another user is about to make updates.","pos":[414329,414439]},{"content":"When you have saved your updates, use the Unlock command.","pos":[414440,414497]},{"pos":[414503,414520],"content":"Method mouseEnter","linkify":"Method mouseEnter","nodes":[{"content":"Method mouseEnter","pos":[0,17]}]},{"content":"Is called when the user moves the mouse pointer into the control area.","pos":[414522,414592]},{"pos":[414682,414692],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"x","pos":[414694,414695]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[414698,414759]},{"content":"y","pos":[414771,414772]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[414775,414836]},{"content":"button","pos":[414848,414854]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[414857,414918]},{"content":"Ctrl","pos":[414930,414934]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[414937,414998]},{"content":"Shift","pos":[415010,415015]},{"content":"A Boolean value that indicates whether the SHIFT key is down.","pos":[415018,415079]},{"pos":[415086,415094],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example shows how to display the parameters of a mouseEnter event in the Infolog.","pos":[415096,415191]},{"pos":[415614,415631],"content":"Method applyBuild","linkify":"Method applyBuild","nodes":[{"content":"Method applyBuild","pos":[0,17]}]},{"pos":[415667,415678],"content":"Method drop","linkify":"Method drop","nodes":[{"content":"Method drop","pos":[0,11]}]},{"content":"Raises the drop event to indicate that a drop operation is being performed on the current control.","pos":[415680,415778]},{"pos":[415864,415874],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[415876,415886]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[415889,415974]},{"content":"dragMode","pos":[415986,415994]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[415997,416082]},{"content":"x","pos":[416094,416095]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[416098,416183]},{"content":"y","pos":[416195,416196]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[416199,416284]},{"pos":[416290,416313],"content":"Method resetUserSetting","linkify":"Method resetUserSetting","nodes":[{"content":"Method resetUserSetting","pos":[0,23]}]},{"content":"Resets the user settings for the control.","pos":[416315,416356]},{"pos":[416398,416408],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[416478,416488],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"build","pos":[416490,416495]},{"content":"formRun","pos":[416509,416516]},{"pos":[416524,416538],"content":"Method context","linkify":"Method context","nodes":[{"content":"Method context","pos":[0,14]}]},{"content":"Shows the shortcut menu for the control.","pos":[416540,416580]},{"pos":[416613,416626],"content":"Method unLock","linkify":"Method unLock","nodes":[{"content":"Method unLock","pos":[0,13]}]},{"content":"Unlocks a form control.","pos":[416628,416651]},{"pos":[416698,416708],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"update","pos":[416710,416716]},{"content":"A Boolean value that indicates whether to save the changes that are made to the control.","pos":[416719,416807]},{"pos":[416813,416841],"content":"Method setResourceBundleName","linkify":"Method setResourceBundleName","nodes":[{"content":"Method setResourceBundleName","pos":[0,28]}]},{"pos":[416900,416910],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"value","pos":[416912,416917]},{"pos":[416925,416950],"content":"Method selectedMenuOption","linkify":"Method selectedMenuOption","nodes":[{"content":"Method selectedMenuOption","pos":[0,25]}]},{"pos":[417013,417023],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"selectedOption","pos":[417025,417039]},{"pos":[417047,417064],"content":"Method mouseLeave","linkify":"Method mouseLeave","nodes":[{"content":"Method mouseLeave","pos":[0,17]}]},{"content":"Indicates that the mouse pointer has left the control.","pos":[417066,417120]},{"pos":[417156,417176],"content":"Method onPropChanged","linkify":"Method onPropChanged","nodes":[{"content":"Method onPropChanged","pos":[0,20]}]},{"pos":[417230,417240],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"propName","pos":[417242,417250]},{"pos":[417258,417271],"content":"Method dropEx","linkify":"Method dropEx","nodes":[{"content":"Method dropEx","pos":[0,13]}]},{"content":"Raises the dropEx event to indicate that a drop operation is being performed on the current control.","pos":[417273,417373]},{"pos":[417455,417465],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"dragSource","pos":[417467,417477]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[417480,417565]},{"content":"dragMode","pos":[417577,417585]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[417588,417673]},{"content":"x","pos":[417685,417686]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[417689,417774]},{"content":"y","pos":[417786,417787]},{"content":"An integer value that indicates the vertical client coordinate of the mouse position.","pos":[417790,417875]},{"pos":[417881,417898],"content":"Method initialize","linkify":"Method initialize","nodes":[{"content":"Method initialize","pos":[0,17]}]},{"pos":[417934,417948],"content":"Method endDrag","linkify":"Method endDrag","nodes":[{"content":"Method endDrag","pos":[0,14]}]},{"content":"Is called when the user has finished dragging a form control.","pos":[417950,418011]},{"pos":[418045,418052],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"This event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started.","pos":[418054,418182]},{"content":"To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.","pos":[418183,418287]},{"pos":[418294,418302],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"content":"The following example displays a message in the Infolog when the user has finished dragging the form control.","pos":[418304,418413]},{"pos":[418514,418555],"content":"Class FormControlCancelableSuperEventArgs","linkify":"Class FormControlCancelableSuperEventArgs","nodes":[{"content":"Class FormControlCancelableSuperEventArgs","pos":[0,41]}]},{"pos":[418636,418643],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[418649,418657],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[418663,418670],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[418674,418680]},{"content":"Description","pos":[418706,418717]},{"content":"public void CancelSuperCall()","pos":[418770,418799]},{"content":"private void new()","pos":[418818,418836]},{"pos":[418869,418891],"content":"Method CancelSuperCall","linkify":"Method CancelSuperCall","nodes":[{"content":"Method CancelSuperCall","pos":[0,22]}]},{"pos":[418932,418942],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[418971,419003],"content":"Class FormControlCancelEventArgs","linkify":"Class FormControlCancelEventArgs","nodes":[{"content":"Class FormControlCancelEventArgs","pos":[0,32]}]},{"pos":[419075,419082],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[419088,419096],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[419102,419109],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[419113,419119]},{"content":"Description","pos":[419159,419170]},{"content":"::public static boolean cancelled()","pos":[419237,419272]},{"content":"::public static void cancel(boolean cancel)","pos":[419299,419342]},{"content":"public void new(boolean cancel)","pos":[419361,419392]},{"pos":[419426,419442],"content":"Method cancelled","linkify":"Method cancelled","nodes":[{"content":"Method cancelled","pos":[0,16]}]},{"pos":[419488,419500],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[419506,419519],"content":"Method cancel","linkify":"Method cancel","nodes":[{"content":"Method cancel","pos":[0,13]}]},{"pos":[419573,419583],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cancel","pos":[419585,419591]},{"pos":[419599,419609],"content":"Method new","linkify":"Method new","nodes":[{"content":"Method new","pos":[0,10]}]},{"pos":[419653,419663],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"cancel","pos":[419665,419671]},{"pos":[419678,419704],"content":"Class FormControlEventArgs","linkify":"Class FormControlEventArgs","nodes":[{"content":"Class FormControlEventArgs","pos":[0,26]}]},{"pos":[419741,419748],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[419754,419762],"content":"Examples","linkify":"Examples","nodes":[{"content":"Examples","pos":[0,8]}]},{"pos":[419768,419775],"content":"Methods","linkify":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"content":"Method","pos":[419779,419785]},{"content":"Description","pos":[419788,419799]}],"content":"---\n# required metadata\n\ntitle: F Classes - FormChangeTracker to FormControlEventArgs\ndescription: API reference for classes from FormChangeTracker to FormControlEventArgs.\nauthor: RobinARH\nmanager: AnnBe\nms.date: 2016-03-08 23 - 54 - 18\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\n# ms.search.form: \n# ROBOTS: \naudience: Developer\n# ms.devlang: \nms.reviewer: RobinARH\nms.search.scope: AX 7.0.0, Operations\n# ms.tgt_pltfrm: \nms.custom: 63793\nms.assetid: 9e05d1b3-530a-4f87-a8f0-197ad35616ef\nms.search.region: Global\n# ms.search.industry: \nms.author: robinr\nms.search.validFrom: 2016-02-28\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# F Classes - FormChangeTracker to FormControlEventArgs\n\nAPI reference for classes from FormChangeTracker to FormControlEventArgs.\n\nClass FormChangeTracker\n-----------------------\n\n    class FormChangeTracker extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                         | Description |\n|------------------------------------------------|-------------|\n| public void notifyUpdate(\\[str propertyName\\]) |             |\n| private void new()                             |             |\n\n### Method notifyUpdate\n\n    public void notifyUpdate([str propertyName])\n\n#### Parameters\n\npropertyName  \n\n### Method new\n\n    private void new()\n\n## Class FormCheckBoxControl\n    class FormCheckBoxControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public boolean checked(\\[boolean check\\])                                                                   | Gets or sets the value of a check box.                                                                                                                                  |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 |                                                                                                                                                                         |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source to be used by the control or the form.                                                                                                       |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean drawFocusRect(\\[boolean value\\])                                                             |                                                                                                                                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         |                                                                                                                                                                         |\n| public int labelFontSize(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               |                                                                                                                                                                         |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                        |                                                                                                                                                                         |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                            |                                                                                                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                              |                                                                                                                                                                         |\n| public int labelPosition(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean labelUnderline(\\[boolean value\\])                                                            |                                                                                                                                                                         |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public boolean modified()                                                                                   |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean optionalRecordControl(\\[boolean value\\])                                                     |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public str previewPartRef(\\[str value\\])                                                                    |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels.                                                                                                                     |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public int value(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void clicked()                                                                                       |                                                                                                                                                                         |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void undo()                                                                                          |                                                                                                                                                                         |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                   |                                                                                                                                                                         |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                               |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void lookup()                                                                                        |                                                                                                                                                                         |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method checked\n\nGets or sets the value of a check box.\n\n    public boolean checked([boolean check])\n\n#### Parameters\n\ncheck  \nA Boolean value that indicates whether the check box is selected; optional. A value of true selects the check box, and a value of false clears it.\n\n#### Return Value\n\ntrue if the check box is selected; otherwise false.\n\n#### Remarks\n\nThis method uses the Win32 API to get and set the value of the check box without querying the properties.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                        |\n|--------|-------------------------------|\n| 0      | Default.                      |\n| 1      | The MicrosoftWindows palette. |\n| 2      | The true-color scheme.        |\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country region/codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source to be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe identifier of the data source to be used.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method drawFocusRect\n\n    public boolean drawFocusRect([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines which text is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFontSize\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelMouseDblClick\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseDown\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelMouseUp\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method labelPosition\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelUnderline\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method optionalRecordControl\n\n    public boolean optionalRecordControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key being assigned to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method value\n\n    public int value([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visible setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method clicked\n\n    public void clicked()\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnClicked\n\n    private void OnClicked([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method undo\n\n    public void undo()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method enter\n\n    public void enter()\n\n### Method lookup\n\n    public void lookup()\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n## Class FormComboBoxControl\n    class FormComboBoxControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether the control should be aligned with other controls.                                                                                                   |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can modify the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean appendNew(\\[boolean value\\])                                                                 |                                                                                                                                                                         |\n| public int arrayIndex(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determines whether the control’s background can be transparent.                                                                                                         |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font that is used to display text in the control.                                                                                            |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the border line for the control.                                                                                                              |\n| public int cacheDataMethod(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public int comboType(\\[int value\\])                                                                         | Sets or returns the type of combo box for the control.                                                                                                                  |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Returns a list that contains the IDs of configuration keys that are in effect for the control.                                                                          |\n| public int count()                                                                                          | Returns the number of items in the combo box control.                                                                                                                   |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public FieldId countryRegionContextField(\\[FieldId value\\])                                                 |                                                                                                                                                                         |\n| public FieldId dataField(\\[FieldId value\\])                                                                 | Sets or returns the data field for the combo box control.                                                                                                               |\n| public str dataMethod(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public int dataSource(\\[AnyType value\\])                                                                    | Gets or sets a data source that should be used by the control or the form.                                                                                              |\n| public int displayLength(\\[int value\\], \\[AutoMode mode\\])                                                  |                                                                                                                                                                         |\n| public AutoMode displayLengthMode(\\[AutoMode mode\\])                                                        |                                                                                                                                                                         |\n| public int displayLengthValue(\\[int value\\])                                                                |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether drag-and-drop operations are enabled or disabled for the control.                                                                                    |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Returns the text that is displayed when the form combo box control is dragged.                                                                                          |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether the object is enabled or disabled.                                                                                                                   |\n| public EnumId enumType(\\[EnumId value\\])                                                                    |                                                                                                                                                                         |\n| public EnumId enumTypeValue()                                                                               |                                                                                                                                                                         |\n| public ExtendedTypeId extendedDataType(\\[ExtendedTypeId value\\])                                            |                                                                                                                                                                         |\n| public int fastTabSummary(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int find(str string)                                                                                 |                                                                                                                                                                         |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font that should be used for the control.                                                                                                  |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font that should be used for the control.                                                                                                  |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public str getEditText()                                                                                    |                                                                                                                                                                         |\n| public str getText(int index)                                                                               |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the form combo box control have changed.                                                                 |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control in pixels.                                                                                                                       |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Returns the Help text for the control.                                                                                                                                  |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.                                                         |\n| public boolean hideFirstEntry(\\[boolean value\\])                                                            | Sets or returns a value that indicates whether the first entry in the combo box control is hidden.                                                                      |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Returns the Windows handle for the control.                                                                                                                             |\n| public boolean isContainer()                                                                                | Returns a value that indicates whether the control is a container.                                                                                                      |\n| public boolean isDisplayed()                                                                                | Returns a value that indicates whether the control is displayed.                                                                                                        |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Returns a value that indicates whether the control allows for the specified level of customization.                                                                     |\n| public boolean isValid()                                                                                    |                                                                                                                                                                         |\n| public boolean italic(\\[boolean value\\])                                                                    | Sets or returns a value that indicates whether the text in the control is italic.                                                                                       |\n| public int item(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public int items(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public str label(\\[str value\\])                                                                             | Gets or sets the label for a control.                                                                                                                                   |\n| public int labelAlignment(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelBold(\\[int value\\])                                                                         | Sets or returns a value that indicates the bold setting for the label in the control.                                                                                   |\n| public int labelCharacterSet(\\[int value\\])                                                                 |                                                                                                                                                                         |\n| public str labelFont(\\[str value\\])                                                                         | Sets or returns a font for the label text in a form combo box control.                                                                                                  |\n| public int labelFontSize(\\[int value\\])                                                                     | Sets or returns the font size in points for the label text in a form combo box control.                                                                                 |\n| public int labelForegroundColor(\\[int value\\])                                                              |                                                                                                                                                                         |\n| public int labelGuide(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public int labelHeight(int value, \\[int mode\\])                                                             |                                                                                                                                                                         |\n| public int labelHeightMode(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public int labelHeightValue(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public boolean labelItalic(\\[boolean value\\])                                                               | Sets or returns a value that indicates whether the text in the label of the control is italic.                                                                          |\n| public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                        | Is called when the label for the control is double-clicked by the user.                                                                                                 |\n| public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                            | Is called when the user clicks the mouse button over the label for the control.                                                                                         |\n| public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                              | Is called when the user releases the mouse button over the label for the control.                                                                                       |\n| public int labelPosition(\\[int value\\])                                                                     | Sets or returns the position of the label for the control.                                                                                                              |\n| public boolean labelUnderline(\\[boolean value\\])                                                            | Sets or returns a value that indicates whether the text in the label of the control is underlined.                                                                      |\n| public int labelWidth(int value, \\[int mode\\])                                                              |                                                                                                                                                                         |\n| public int labelWidthMode(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public int labelWidthValue(\\[int value\\])                                                                   |                                                                                                                                                                         |\n| public boolean leave()                                                                                      |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public boolean modified()                                                                                   |                                                                                                                                                                         |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control.                                                                                                     |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public str previewPartRef(\\[str value\\])                                                                    |                                                                                                                                                                         |\n| public int promptrect(\\[int value\\])                                                                        |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int selection(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public int selectionChange()                                                                                | Indicates that the user has changed the selected item in the combo box control.                                                                                         |\n| public int selectText(str string)                                                                           |                                                                                                                                                                         |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showLabel(\\[boolean value\\])                                                                 | Sets or returns a value that indicates whether the label for the control is displayed in the form.                                                                      |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int sort(\\[SortOrder sortDirection\\])                                                                |                                                                                                                                                                         |\n| public str text(\\[str value\\])                                                                              | Sets or returns the text for the control.                                                                                                                               |\n| public str toolTip()                                                                                        | Returns the tooltip text for the control.                                                                                                                               |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                                                     |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Returns or sets the value that indicates whether the form combo box control is hidden from the user.                                                                    |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form combo box control is skipped when the user presses the TAB key to navigate the controls in the form.          |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the form combo box control in pixels.                                                                                                      |\n| public boolean validate()                                                                                   |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public int viewEditMode(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| public void filter(\\[str filterStr\\])                                                                       |                                                                                                                                                                         |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| private void OnValidated(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| private void OnModified(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| public void beginUpdate()                                                                                   |                                                                                                                                                                         |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n| public void setEditText(str string)                                                                         |                                                                                                                                                                         |\n| public void enter()                                                                                         |                                                                                                                                                                         |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void paste()                                                                                         | Pastes the form combo box control into the form.                                                                                                                        |\n| public void clear()                                                                                         | Clears the entries in the combo box list.                                                                                                                               |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void copy()                                                                                          | Copies the form combo box control.                                                                                                                                      |\n| private void OnSelectionChanging(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                        |                                                                                                                                                                         |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form combo box control.                                                                                                 |\n| public void lookup()                                                                                        |                                                                                                                                                                         |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void insert(str string, int index)                                                                   | Inserts a string value into the combo box list at the specified position.                                                                                               |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control.                                                                                                       |\n| private void OnEnter(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                    |                                                                                                                                                                         |\n| public void delete(str string)                                                                              | Removes a string value from the combo box list.                                                                                                                         |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void add(str string)                                                                                 | Adds a string value to the combo box list.                                                                                                                              |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form combo box control.                                                                                         |\n| private void OnValidating(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                               |                                                                                                                                                                         |\n| public void undo()                                                                                          |                                                                                                                                                                         |\n| public void jumpRef()                                                                                       |                                                                                                                                                                         |\n| private void OnSelectionChanged(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                         |                                                                                                                                                                         |\n| public void endUpdate()                                                                                     |                                                                                                                                                                         |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| private void OnLookup(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                   |                                                                                                                                                                         |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| private void OnLeaving(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void setDropSize(\\[int lines\\])                                                                      |                                                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether the control should be aligned with other controls.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that indicates whether the form combo box control is aligned with other controls; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned based on the longest label.\n\n#### Examples\n\nThe following example shows a call to the alignControl method to align a form combo box control with other controls, based on the length of the longest label.\n\n    boolean bAlign; \n    // The combo variable was previously assigned \n    // as a FormComboBoxControl type. \n    // Retrieve the alignControl property. \n    bAlign = combo.alignControl(); \n    // Set the alignControl property. \n    combo.alignControl(false);\n\n### Method allowEdit\n\nDetermines whether the user can modify the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property; optional.\n\n#### Return Value\n\ntrue if the control can be modified; otherwise, false.\n\n#### Remarks\n\nIf this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n#### Examples\n\nThe following example shows how to return and set the value of the allowEdit property.\n\n    // Return the value. \n    info (strfmt(\"allowEdit: %1\", this.allowEdit())); \n    // Set the value. \n    this.allowEdit(false);\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method appendNew\n\n    public boolean appendNew([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrayIndex\n\n    public int arrayIndex([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the autoDeclaration property; optional.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the background color of the control; optional. This can be one of the values from the control’s color scheme or a Winapi::RGB2int value.\n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains the RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be 0 (zero).\n-   The maximum value for a single byte is 255.\n\n#### Examples\n\nThe following example shows how to return and set the background color for a control.\n\n    // Retrieve the existing background color. \n    info (strfmt(\"Background color: %1\", this.backgroundColor())); \n    // Set the background color. \n    this.backgroundColor(WindowsPalette::DarkShadow3D);\n\n### Method backStyle\n\nDetermines whether the control’s background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the background style of the control; optional.\n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n#### Examples\n\nThe following example shows how to return and set the background style.\n\n    // Return the background style. \n    info (strfmt(\"Background style: %1\", this.backStyle())); \n    // Set the background style. \n    this.backStyle(FormBackStyle::Transparent);\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n#### Examples\n\nThe following example displays the x-coordinate and y-coordinate in the Infolog when the user starts to drag the form combo box control.\n\n    public int beginDrag(int _x, int _y) \n    { \n        int ret; \n        info(strfmt(\"beginDrag (x, y) : (%1, %2)\", _x, _y)); \n        ret = super(_x, _y); \n        return ret; \n    }\n\n### Method bold\n\nGets or sets the weight of font that is used to display text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the control's bold setting; optional.\n\n#### Return Value\n\nAn integer value between 0 (zero) and 9, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the font weight as follows:\n\n-   0 – Use the default font weight.\n-   1 – Thin.\n-   2 – Extra-light.\n-   3 – Light.\n-   4 – Normal.\n-   5 – Medium.\n-   6 – Semibold.\n-   7 – Bold.\n-   8 – Extra-bold.\n-   9 – Heavy.\n\n### Method border\n\nGets or sets the style of the border line for the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the border style for the control; optional.\n\n#### Return Value\n\nAn integer between 0 (zero) and 4, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the border style line as follows.\n\n-   0 – Auto.\n-   1 – 3D.\n-   2 – Single line.\n-   3 – Flat.\n-   4 – None.\n\n#### Examples\n\nThe following example shows how to retrieve and set the border style for a control.\n\n    // Retrieve the border style. \n    info (strfmt(\"border: %1\", this.border())); \n    // Set the border style. \n    this.border(2);\n\n### Method cacheDataMethod\n\n    public int cacheDataMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                 |\n|--------|------------------------|\n| 0      | Default.               |\n| 1      | The Windows palette.   |\n| 2      | The true-color scheme. |\n\n### Method comboType\n\nSets or returns the type of combo box for the control.\n\n    public int comboType([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the type of combo box for the control; optional.\n\n#### Return Value\n\nThe type of combo box for the control.\n\n#### Remarks\n\nThe following table shows the values for the combo box type.\n\n| Value | Description |\n|-------|-------------|\n| 0     | Standard    |\n| 1     | List        |\n\n#### Examples\n\nThe following example shows how to retrieve and set the type of combo box that is used for the control.\n\n    // Retrieve the type of combo box control. \n    info(strfmt(\"comboType: %1\", this.comboType())); \n    // Set the type of combo box control. \n    this.comboType(1);\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control.\n\n#### Return Value\n\nThe ID of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n#### Examples\n\nThe following example shows the setting and retrieval of the configuration key for a control.\n\n    DictConfigurationKey dck; \n    configurationKeyId cki; \n    // objCtrl previously assigned. \n    // Assign a configuration key to the control. \n    objCtrl.configurationKey(configurationkeynum(BankDeposit)); \n    // Retrieve the configuration key ID from the control. \n    cki = objCtrl.configurationKey(); \n    if (cki != 0) \n    { \n        dck = new DictConfigurationKey(cki); \n        if (dck) \n        { \n        print strfmt(\"Configuration Key ID: %1 Configuration Key Name: %2\", \n                      cki, \n                      dck.name()); \n        } \n    }\n\n### Method configurationKeyEx\n\nReturns a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. In addition, the returned list contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n#### Examples\n\nThe following example shows the retrieval of the configuration key IDs for a control.\n\n    DictConfigurationKey dck; \n    configurationKeyId cki; \n    List list; \n    ListEnumerator enum; \n    // objCtrl previously assigned. \n    list = objCtrl.configurationKeyEx(); \n    if (0 != list.elements()) \n    { \n        enum = list.getEnumerator(); \n        while (enum.moveNext()) \n        { \n           dck = new DictConfigurationKey(enum.current()); \n           if (dck) \n           { \n            print strfmt(\"Configuration Key ID: %1 Configuration Key Name: %2\", \n                         enum.current(), \n                         dck.name() ); \n           } \n        } \n    }\n\n### Method count\n\nReturns the number of items in the combo box control.\n\n    public int count()\n\n#### Return Value\n\nThe number of items in the combo box control.\n\n#### Examples\n\nThe following example shows how to use the count method.\n\n    int j; \n    j = this.count();\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method countryRegionContextField\n\n    public FieldId countryRegionContextField([FieldId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataField\n\nSets or returns the data field for the combo box control.\n\n    public FieldId dataField([FieldId value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the data field ID for the combo box control; optional.\n\n#### Return Value\n\nThe value of the data field ID for the combo box control.\n\n#### Examples\n\nThe following example shows how to set and return the data field for the combo box control.\n\n    fieldID i; \n    // The combo variable is a previously assigned  \n    // FormComboBoxControl value. \n    // Retrieve the data Field. \n    i = combo.dataField(); \n    // Set the data field. \n    combo.dataField(fieldnum(CustTable, IdentificationNumber));\n\n### Method dataMethod\n\n    public str dataMethod([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSource\n\nGets or sets a data source that should be used by the control or the form.\n\n    public int dataSource([AnyType value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the data source for the combo box control; optional.\n\n#### Return Value\n\nThe identifier of the data source that should be used.\n\n#### Examples\n\nThe following example shows how to set and return the data source for the combo box control.\n\n    int i; \n    // The combo variable was previously assigned  \n    // as a FormComboBoxControl variable. \n    // Retrieve the data source. \n    i = combo.dataSource(); \n    // Set the data source. \n    combo.dataSource(tablenum(CustTable));\n\n### Method displayLength\n\n    public int displayLength([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method displayLengthMode\n\n    public AutoMode displayLengthMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method displayLengthValue\n\n    public int displayLengthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether drag-and-drop operations are enabled or disabled for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Examples\n\nThe following example shows how to return or set the value that indicates whether drag-and-drop behavior is enabled.\n\n    boolean bDragDrop; \n    // The combo variable was previously assigned  \n    // as a FormComboBoxControl value. \n    // Retrieve the drag-and-drop-enabled value. \n    bDragDrop = combo.dragDrop(); \n    // Set the drag-and-drop-enabled value. \n    combo.dragDrop(true);\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nReturns the text that is displayed when the form combo box control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the combo box control is dragged; an empty string if there is no text to display when the combo box control is dragged.\n\n### Method enabled\n\nDetermines whether the object is enabled or disabled.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property lets you enable or disable controls at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message that provides read-only information.\n\n#### Examples\n\nThe following example shows how to return and set the enabled property for a control.\n\n    // Return the value of the enabled property. \n    info(strfmt(\"enabled: %1\",this.enabled())); \n    // Set the enabled property. \n    this.enabled(false);\n\n### Method enumType\n\n    public EnumId enumType([EnumId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method enumTypeValue\n\n    public EnumId enumTypeValue()\n\n#### Return Value\n\n### Method extendedDataType\n\n    public ExtendedTypeId extendedDataType([ExtendedTypeId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fastTabSummary\n\n    public int fastTabSummary([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method find\n\n    public int find(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method font\n\nGets or sets the name of the font that should be used for the control.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \nA String data type that indicates the font to use for text in a form combo box control; optional.\n\n#### Return Value\n\nThe name of the font that should be used, such as Tahoma or Verdana.\n\n#### Examples\n\nThe following example shows how to return and set the font for a form combo box control.\n\n    str strFont; \n    ; \n    // The ctrl variable was previously assigned  \n    // as a form combo box control value. \n    // Retrieve the font. \n    strFont = ctrl.font(); \n    // Set the font. \n    ctrl.font(\"Times New Roman\");\n\n### Method fontSize\n\nGets or sets the size of the font that should be used for the control.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates the font size in points for text in a form combo box control; optional.\n\n#### Return Value\n\nThe height of the font in points.\n\n#### Examples\n\nThe following example shows how to return and set the font size for a form combo box control.\n\n    int nSize; \n    // The ctrl variable was previously assigned  \n    // as a form combo box control. \n    // Retrieve the font size. \n    nSize = ctrl.fontSize(); \n    // Set the font size. \n    ctrl.fontSize(16);\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method getEditText\n\n    public str getEditText()\n\n#### Return Value\n\n### Method getText\n\n    public str getText(int index)\n\n#### Parameters\n\nindex  \n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the form combo box control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nA value to assign as the hasChanged value for the combo box control; optional.\n\n#### Return Value\n\ntrue if the contents of the combo box control have changed; otherwise, false.\n\n#### Examples\n\nThe following example shows how to return and set the value that indicates whether the contents of the combo box control have changed.\n\n    boolean bHasChanged; \n    // The ctrl variable was previously assigned \n    // as a FormComboBoxControl variable. \n    // Retrieve the hasChanged value. \n    bHasChanged = ctrl.hasChanged(); \n    // Modify the hasChanged value. \n    ctrl.hasChanged(true);\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control in pixels.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode              | Height calculation                                                                         |\n|-------------------|--------------------------------------------------------------------------------------------|\n| -1 – Exact        | The exact height of the control in pixels is used.                                         |\n| 0 – Auto          | The height of the control is calculated automatically, and the value parameter is ignored. |\n| 1 – Column height | The layout of the form determines the height of the control.                               |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the height of the control is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                         |\n|---------------|--------------------------------------------------------------------------------------------|\n| Exact         | The exact height of the control in pixels is used.                                         |\n| Auto          | The height of the control is calculated automatically, and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                               |\n\nThe height of the control might change when the calculation mode is set to Auto or Column height.\n\n#### Examples\n\nThe following example shows how to return and set the height calculation mode for a form combo box control:\n\n    int nHeightMode; \n    // The ctrl variable was previously assigned \n    // as a form combo box control type. \n    // Retrieve the height mode. \n    nHeightMode = ctrl.HeightMode(); \n    // Set the height mode. \n    ctrl.heightMode(-1); \n    // Set the height. \n    ctrl.heightValue(16);\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the Exact height calculation mode is used.\n\n#### Examples\n\nThe following example shows how to return and set the height value of a combo box control.\n\n    int nHeightValue; \n    // The ctrl variable was previously assigned \n    // as a form combo box control type. \n    // Retrieve the height value. \n    nHeightValue = ctrl.heightValue(); \n    // Set the height value. \n    ctrl.heightMode(-1); \n    ctrl.heightValue(22);\n\n### Method helpField\n\nReturns the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n#### Examples\n\nThe following example shows how to use the helpField method.\n\n    str strHelp; \n    strHelp = this.helpField();\n\n### Method helpText\n\nGets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the Help text for the control; optional.\n\n#### Return Value\n\nThe string that should be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n#### Examples\n\nThe following example shows how to set and return the Help text for a control.\n\n    // objCtrl previously assigned to a control \n    // Retrieve existing help text. \n    print objCtrl.helpText(); \n    // Specify new help text. \n    objCtrl.helpText(\"My new help text\");\n\n### Method hideFirstEntry\n\nSets or returns a value that indicates whether the first entry in the combo box control is hidden.\n\n    public boolean hideFirstEntry([boolean value])\n\n#### Parameters\n\nvalue  \nA value that indicates whether the first entry in the combo box control is hidden; optional.\n\n#### Return Value\n\ntrue if the first entry in the combo box control is hidden; otherwise, false.\n\n#### Remarks\n\nBy hiding the first entry in the combo box control, you enable the control to emulate the behavior of an enum database field where the Mandatory property is set to Yes.\n\n#### Examples\n\nThe following example shows how to return and set the value that indicates whether the first entry in the combo box control is hidden.\n\n    boolean bHideFirstEntry; \n    // The ctrl variable was previously assigned \n    // as a form combo box control type. \n    // Retrieve the hideFirstEntry value. \n    bHideFirstEntry = ctrl.hideFirstEntry(); \n    // Set the hideFirstEntry value. \n    bHideFirstEntry = ctrl.hideFirstEntry(true);\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nReturns the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n#### Examples\n\nThe following example shows how to retrieve the Windows handle for a control.\n\n    int h; \n    h = this.hWnd(); \n    info (strfmt(\"hWnd: %1\", h));\n\n### Method isContainer\n\nReturns a value that indicates whether the control is a container.\n\n    public boolean isContainer()\n\n#### Return Value\n\ntrue if the control is a container; otherwise, false.\n\n#### Examples\n\nThe following example shows how to determine whether a control is a container.\n\n    info(strfmt(\"IsContainer: %1\", this.isContainer()));\n\n### Method isDisplayed\n\nReturns a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n#### Examples\n\nThe following example shows how to determine whether a control is visible.\n\n    info(strfmt(\"isDisplayed: %1\", this.isDisplayed()));\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must be at least as high as the level that is specified by the neededSetupRights parameter.\n\n#### Examples\n\nThe following example shows how to determine the user setup rights for a control.\n\n    FormAllowUserSetup formAllowUserSetup = FormAllowUserSetup::No; \n    switch (true) \n    { \n        case this.isUserSetupEnabled(FormAllowUserSetup::Yes): \n            formAllowUserSetup = FormAllowUserSetup::Yes; \n            break; \n        case this.isUserSetupEnabled(FormAllowUserSetup::Restricted): \n            formAllowUserSetup = FormAllowUserSetup::Restricted; \n            break; \n        case this.isUserSetupEnabled(FormAllowUserSetup::No): \n           formAllowUserSetup = FormAllowUserSetup::No; \n            break; \n    } \n    info (strfmt(\"formAllowUserSetup: %1\", formAllowUserSetup));\n\n### Method isValid\n\n    public boolean isValid()\n\n#### Return Value\n\n### Method italic\n\nSets or returns a value that indicates whether the text in the control is italic.\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the italic setting of the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is italic; otherwise, false.\n\n### Method item\n\n    public int item([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method items\n\n    public int items([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method label\n\nGets or sets the label for a control.\n\n    public str label([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the label of the control; optional.\n\n#### Return Value\n\nThe current value of the label string.\n\n#### Remarks\n\nThe label determines the text that is displayed in the control or adjacent to it.The label property value cannot exceed 250 characters.\n\n#### Examples\n\nThe following example shows how to return and set the label of the control.\n\n    // Return the label value. \n    info(strfmt(\"label: %1\", this.label())); \n    // Set the label value. \n    this.label(\"New label text goes here\");\n\n### Method labelAlignment\n\n    public int labelAlignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelBold\n\nSets or returns a value that indicates the bold setting for the label in the control.\n\n    public int labelBold([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the label bold setting. This can be one of the values from the ReportControlBold enumeration.\n\n#### Return Value\n\nA value from the ReportControlBold enumeration that indicates the bold setting for the label in the control.\n\n### Method labelCharacterSet\n\n    public int labelCharacterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelFont\n\nSets or returns a font for the label text in a form combo box control.\n\n    public str labelFont([str value])\n\n#### Parameters\n\nvalue  \nA String data type that indicates the font for the label text in a form combo box control; optional.\n\n#### Return Value\n\nA String data type value that indicates the font for the label text in a form combo box control.\n\n#### Examples\n\nThe following example shows how to return and set the font for the label text in a form combo box control.\n\n    str strLabelFont; \n    // The ctrl variable was previously assigned  \n    // as a form combo box control variable. \n    // Retrieve the font. \n    strLabelFont = ctrl.labelFont(); \n    // Set the label font. \n    ctrl.labelFont(\"Times New Roman\");\n\n### Method labelFontSize\n\nSets or returns the font size in points for the label text in a form combo box control.\n\n    public int labelFontSize([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates the font size in points for the label text in a form combo box control; optional.\n\n#### Return Value\n\nAn Integer data type value that indicates the label font size in points for the text in a form combo box control.\n\n#### Examples\n\nThe following example shows how to return and set the label font size for a form combo box control.\n\n    int nSize; \n    // The ctrl variable was previously assigned  \n    // as a form combo box control. \n    // Retrieve the label font size. \n    nSize = ctrl.labelFontSize(); \n    // Set the label font size. \n    ctrl.labelFontSize(16);\n\n### Method labelForegroundColor\n\n    public int labelForegroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelGuide\n\n    public int labelGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeight\n\n    public int labelHeight(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelHeightMode\n\n    public int labelHeightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelHeightValue\n\n    public int labelHeightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelItalic\n\nSets or returns a value that indicates whether the text in the label of the control is italic.\n\n    public boolean labelItalic([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the italic setting of the label of the control; optional.\n\n#### Return Value\n\ntrue if the text in the label of the control is italic; otherwise, false.\n\n### Method labelMouseDblClick\n\nIs called when the label for the control is double-clicked by the user.\n\n    public int labelMouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n#### Examples\n\nThe following example shows how to display the parameters of a labelMouseDblClick event in the Infolog.\n\n    public int labelMouseDblClick(int x,  \n                                  int y,  \n                                  int button, \n                                  boolean Ctrl, \n                                  boolean Shift) \n    { \n        int ret; \n        ; \n        if (Shift) \n        { \n            info( \"Shift set\" ); \n        } \n        if (Ctrl) \n        { \n            info( \"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method labelMouseDown\n\nIs called when the user clicks the mouse button over the label for the control.\n\n    public int labelMouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n#### Examples\n\nThe following example shows how to display the parameters of a labelMouseDown event in the Infolog.\n\n    public int labelMouseDown(int x,  \n                                  int y,  \n                                  int button, \n                                  boolean Ctrl, \n                                  boolean Shift) \n    { \n        int ret; \n        if (Shift) \n        { \n            info( \"Shift set\" ); \n        } \n        if (Ctrl) \n        { \n            info( \"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method labelMouseUp\n\nIs called when the user releases the mouse button over the label for the control.\n\n    public int labelMouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n#### Examples\n\nThe following example shows how to display the parameters of a labelMouseUp event in the Infolog.\n\n    public int labelMouseUp(int x,  \n                                  int y,  \n                                  int button, \n                                  boolean Ctrl, \n                                  boolean Shift) \n    { \n        int ret; \n        ; \n        if (Shift) \n        { \n            info( \"Shift set\" ); \n        } \n        if (Ctrl) \n        { \n            info( \"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method labelPosition\n\nSets or returns the position of the label for the control.\n\n    public int labelPosition([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the label position; optional.\n\n#### Return Value\n\nAn integer that represents the position of the label.\n\n#### Remarks\n\nIf the value parameter is set to 0 (zero), the label is put to the left of the control. If the value parameter is set to 1, the label is put above the control. A return value of 0 (zero) indicates that the label is put to the left of the control. A return value of 1 indicates that the label is put above the control.\n\n#### Examples\n\nThe following example shows how to return and set the label position.\n\n    // Retrieve the label position. \n    info (strfmt(\"label: %1\", this.labelPosition())); \n    // Set the label position. \n    this.labelPosition(1);  // 1 == Above, 0 == Left\n\n### Method labelUnderline\n\nSets or returns a value that indicates whether the text in the label of the control is underlined.\n\n    public boolean labelUnderline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline setting of the label of the control; optional.\n\n#### Return Value\n\ntrue if the text in the label of the control is underlined; otherwise, false.\n\n### Method labelWidth\n\n    public int labelWidth(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method labelWidthMode\n\n    public int labelWidthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method labelWidthValue\n\n    public int labelWidthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leave\n\n    public boolean leave()\n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method modified\n\n    public boolean modified()\n\n#### Return Value\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Examples\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. The following example shows how to display the parameters of a mouseDblClick event in the Infolog.\n\n    public int mouseDblClick(int x,  \n                             int y,  \n                             int button, \n                             boolean Ctrl, \n                             boolean Shift) \n    { \n        int ret; \n        if (Shift) \n        { \n            info(\"Shift set\"); \n        } \n        if (Ctrl) \n        { \n            info(\"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n#### Examples\n\nThe following example shows how to display the parameters of a mouseDown event in the Infolog.\n\n    public int mouseDown(int x,  \n                                  int y,  \n                                  int button, \n                                  boolean Ctrl, \n                                  boolean Shift) \n    { \n        int ret; \n        ; \n        if (Shift) \n        { \n            info(\"Shift set\"); \n        } \n        if (Ctrl) \n        { \n            info(\"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Examples\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. The following example shows how to display the parameters of a mouseMove event in the Infolog.\n\n    public int mouseMove(int x,  \n                         int y,  \n                         int button, \n                         boolean Ctrl, \n                         boolean Shift) \n    { \n        int ret; \n        if (Shift) \n        { \n            info( \"Shift set\" ); \n        } \n        if (Ctrl) \n        { \n            info( \"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Examples\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. The following example shows how to display the parameters of a mouseUp event in the Infolog.\n\n    public int mouseUp(int x,  \n                       int y,  \n                       int button, \n                       boolean Ctrl, \n                       boolean Shift) \n    { \n        int ret; \n        if (Shift) \n        { \n            info( \"Shift set\" ); \n        } \n        if (Ctrl) \n        { \n            info( \"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method previewPartRef\n\n    public str previewPartRef([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method promptrect\n\n    public int promptrect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n#### Examples\n\nThe following example shows the retrieval and assignment of a security key ID for a control.\n\n    DictSecurityKey dsk; \n    securityKeyId ski; \n    ; \n    // objCtrl previously assigned. \n    // Assign a security key ID to the control. \n    objCtrl.securityKey(securitykeynum(AdminDaily)); \n    // Retrieve the security key ID from the control. \n    ski = objCtrl.securityKey(); \n    if (ski != 0) \n    { \n        dsk = new DictSecurityKey(ski); \n        if (dsk) \n        { \n            print strfmt(\"Security Key ID: %1 Security Key Name: %2\", \n                         ski, \n                         dsk.name()); \n        } \n    }\n\n### Method selection\n\n    public int selection([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method selectionChange\n\nIndicates that the user has changed the selected item in the combo box control.\n\n    public int selectionChange()\n\n#### Return Value\n\ntrue if the event was processed successfully; otherwise, false.\n\n#### Examples\n\nThe following example shows how the selectionChange method can be overridden to display an Infolog message when the user changes the selected item in the combo box control.\n\n    public int selectionChange() \n    { \n        int ret; \n        info(\"The selection has changed.\"); \n        ret = super(); \n        return ret; \n    }\n\n### Method selectText\n\n    public int selectText(str string)\n\n#### Parameters\n\nstring  \n\n#### Return Value\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showLabel\n\nSets or returns a value that indicates whether the label for the control is displayed in the form.\n\n    public boolean showLabel([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the showLabel property for the control.\n\n#### Return Value\n\ntrue if the label should be displayed; otherwise, false.\n\n#### Examples\n\nThe following example shows how to return and set the showLabel property for a control.\n\n    // Return the showLabel value. \n    info(strfmt(\"showLabel: %1\", this.showLabel())); \n    // Set the showLabel value. \n    this.showLabel(false);\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method sort\n\n    public int sort([SortOrder sortDirection])\n\n#### Parameters\n\nsortDirection  \n\n#### Return Value\n\n### Method text\n\nSets or returns the text for the control.\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the text for the control; optional.\n\n#### Return Value\n\nThe text for the control; an empty string if no text has been assigned for the control.\n\n### Method toolTip\n\nReturns the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method can be overridden to provide a value to the toolTip method.\n\n#### Examples\n\nThe following example shows how to override the toolTip method.\n\n    str toolTip() \n    { \n        return \"Account numbers of customers eligible for discount\"; \n    }\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nReturns or sets the value that indicates whether the form combo box control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nA value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a combo box control is hidden by right-clicking the control when it can be viewed or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. The userHide method lets you programmatically determine and set the value.\n\n#### Examples\n\nThe following example shows how to return and set the value that indicates whether the combo box control is hidden from the user.\n\n    int nUserHide; \n    // The ctrl variable was previously assigned  \n    // as a form combo box control variable. \n    // Retrieve the userHide value. \n    nUserHide = ctrl.userHide(); \n    // Set the userHide value. \n    ctrl.userHide(1);\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form combo box control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n#### Examples\n\nThe following example shows how to return and set the userSkip property.\n\n    int nUserSkip \n    // The ctrl variable was previously assigned as a \n    // FormComboBoxControl variable. \n    // Return the userSkip property. \n    nUserSkip = ctrl.userSkip(); \n    // Set the userSkip property. \n    ctrl.userSkip(1);\n\n### Method userWidth\n\nSets or returns the width of the form combo box control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width of the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n#### Examples\n\nThe following example shows how to return and set the user width of a form combo box control.\n\n    int nWidth; \n    // The ctrl variable was previously defined  \n    // as the FormComboBoxControl variable. \n    // Return the width. \n    nWidth = ctrl.userWidth(); \n    // Specify the width. \n    ctrl.userWidth(90);  // 15 characters * 6 pixels == 90\n\n### Method validate\n\n    public boolean validate()\n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \nA AutoMode enumeration value for the control; optional.\n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method viewEditMode\n\n    public int viewEditMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode             | Width calculation                                                                         |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 – Exact       | The exact width of the control in pixels is used.                                         |\n| 0 – Auto         | The width of the control is calculated automatically, and the value parameter is ignored. |\n| 1 – Column width | The layout of the form determines the width of the control.                               |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how a control width is calculated. The value can be -1 for Exact mode, 0 for Auto mode, or 1 for Column width mode.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width Calculation.                                                                        |\n|--------------|-------------------------------------------------------------------------------------------|\n| Exact        | The exact width of the control in pixels is used.                                         |\n| Auto         | The width of the control is calculated automatically, and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                               |\n\nThe width of the control might change when the calculation mode is set to Auto or Column width.\n\n#### Examples\n\nThe following example shows how to return and set the width calculation mode for a combo box control in a form.\n\n    int nWidthMode; \n    ; \n    // The ctrl variable was previously assigned \n    // as a form combo box control variable. \n    // Retrieve the width mode. \n    nWidthMode = ctrl.widthMode (); \n    // Set the width mode. \n    ctrl.widthMode(-1); \n    // Set the width. \n    ctrl.widthValue(180);\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nTo change the width of the control, use the Exact width calculation mode.\n\n#### Examples\n\nThe following example shows how to return and set the width value of a form combo box control.\n\n    int nWidthValue; \n    // The ctrl variable was previously assigned \n    // as a form combo box control variable. \n    // Retrieve the width value. \n    nWidthValue = ctrl.widthValue(); \n    // Set the width value. \n    ctrl.widthMode(-1); \n    ctrl.widthValue(160);\n\n### Method filter\n\n    public void filter([str filterStr])\n\n#### Parameters\n\nfilterStr  \n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method OnValidated\n\n    private void OnValidated([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method OnModified\n\n    private void OnModified([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method beginUpdate\n\n    public void beginUpdate()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setEditText\n\n    public void setEditText(str string)\n\n#### Parameters\n\nstring  \n\n### Method enter\n\n    public void enter()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method paste\n\nPastes the form combo box control into the form.\n\n    public void paste()\n\n### Method clear\n\nClears the entries in the combo box list.\n\n    public void clear()\n\n#### Examples\n\nThe following example shows how to clear the entries in the combo box list.\n\n    this.clear();\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method copy\n\nCopies the form combo box control.\n\n    public void copy()\n\n### Method OnSelectionChanging\n\n    private void OnSelectionChanging([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method endDrag\n\nIs called when the user has finished dragging a form combo box control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag the control, the user presses the mouse button in the control area and then moves the mouse pointer.\n\n#### Examples\n\nThe following example displays a message in the Infolog when the user has finished dragging the form combo box control.\n\n    public void endDrag() \n    { \n        info(\"EndDrag completed\"); \n        super(); \n    }\n\n### Method lookup\n\n    public void lookup()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method insert\n\nInserts a string value into the combo box list at the specified position.\n\n    public void insert(str string, int index)\n\n#### Parameters\n\nstring  \nThe position to insert the string after. If you want the string to be the first item in the list, set the value to 0 (zero).\n\n<!-- -->\n\nindex  \nThe position to insert the string after. If you want the string to be the first item in the list, set the value to 0 (zero).\n\n#### Examples\n\nThe following example shows how to insert a string into the combo box list.\n\n    this.insert(\"willow\", 3);\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Examples\n\nThe following example shows how to display the parameters of a mouseEnter event in the Infolog.\n\n    public void mouseEnter(int x,  \n                          int y,  \n                          int button, \n                          boolean Ctrl, \n                          boolean Shift) \n    { \n        int ret; \n        if (Shift) \n        { \n            info(\"Shift set\"); \n        } \n        if (Ctrl) \n        { \n            info(\"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n    }\n\n### Method OnEnter\n\n    private void OnEnter([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method delete\n\nRemoves a string value from the combo box list.\n\n    public void delete(str string)\n\n#### Parameters\n\nstring  \nThe string value to remove from the combo box list.\n\n#### Examples\n\nThe following example shows how to remove a string value from the combo box list.\n\n    this.delete(\"Model 12357\");\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method add\n\nAdds a string value to the combo box list.\n\n    public void add(str string)\n\n#### Parameters\n\nstring  \nThe string value to add to the combo box list.\n\n#### Remarks\n\nThe string is added to the end of the list. If you want to put the string in a specific position in the list, use the insert method.\n\n#### Examples\n\nThe following example shows how to add a string to the combo box list.\n\n    this.add(\"maple\"); \n    this.add(\"oak\"); \n    this.add(\"pine\");\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form combo box control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n#### Examples\n\nThe following example shows how to set the preferred width and height of a combo box control.\n\n    // The nWidth and nHeight variables were  \n    // previously assigned as int variables. \n    // The ctrl variable was previously assigned \n    // as a FormComboBoxControl variable. \n    ctrl.prefColumnSize( nWidth, nHeight);\n\n### Method OnValidating\n\n    private void OnValidating([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method undo\n\n    public void undo()\n\n### Method jumpRef\n\n    public void jumpRef()\n\n### Method OnSelectionChanged\n\n    private void OnSelectionChanged([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method endUpdate\n\n    public void endUpdate()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method OnLookup\n\n    private void OnLookup([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method OnLeaving\n\n    private void OnLeaving([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method setDropSize\n\n    public void setDropSize([int lines])\n\n#### Parameters\n\nlines  \n\n## Class FormCommandButtonControl\n    class FormCommandButtonControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                      | Description                                                                                                                                                             |\n|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                              | Determines whether to align the control.                                                                                                                                |\n| public int alignment(\\[int value\\])                                                                         |                                                                                                                                                                         |\n| public boolean allowEdit(\\[boolean value\\])                                                                 | Determines whether the user can change the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                              | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                           | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public boolean autoRefreshData(\\[boolean value\\])                                                           |                                                                                                                                                                         |\n| public int backgroundColor(\\[int value\\])                                                                   | Gets or sets the background color of the control.                                                                                                                       |\n| public int backStyle(\\[int value\\])                                                                         | Determiness whether the control background can be transparent.                                                                                                          |\n| public int beginDrag(int x, int y)                                                                          | Is called when the user starts to drag a form control.                                                                                                                  |\n| public boolean big(\\[boolean value\\])                                                                       |                                                                                                                                                                         |\n| public int bold(\\[int value\\])                                                                              | Gets or sets the weight of font used to output text in the control.                                                                                                     |\n| public int border(\\[int value\\])                                                                            | Gets or sets the style of the borderline of the control.                                                                                                                |\n| public int buttonDisplay(\\[int value\\])                                                                     | Gets or sets the appearance of the button control.                                                                                                                      |\n| public container calcControlSize(int chars, int lines)                                                      | Retrieves the size of the control.                                                                                                                                      |\n| public str caption(\\[str value\\])                                                                           | Gets or set the caption of the control.                                                                                                                                 |\n| public int characterSet(\\[int value\\])                                                                      | Gets or sets the character set of the font.                                                                                                                             |\n| public int colorScheme(\\[int value\\])                                                                       | Gets or sets the color scheme of the control.                                                                                                                           |\n| public int command(\\[int value\\])                                                                           |                                                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                    | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                            | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public str countryRegionCodes(\\[str value\\])                                                                | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public str dataRelationPath(\\[str value\\])                                                                  | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public boolean defaultButton(\\[boolean value\\])                                                             | Determines whether the button should be the default button in the form.                                                                                                 |\n| public str disabledImage(\\[str value\\])                                                                     | Gets or sets the disabled image of the button.                                                                                                                          |\n| public int disabledImageLocation(\\[int value\\])                                                             |                                                                                                                                                                         |\n| public int disabledResource(\\[int value\\])                                                                  | Gets or sets the resource ID of the image to use as the disabled button image.                                                                                          |\n| public int displayTarget(\\[int value\\])                                                                     | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                          | Determines whether to enable or disable drag-and-drop operations for the control.                                                                                       |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                           | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                               | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                       | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean enabled(\\[boolean value\\])                                                                   | Determines whether to enable or disable the object.                                                                                                                     |\n| public str font(\\[str value\\])                                                                              | Gets or sets the name of the font for the control to use.                                                                                                               |\n| public int fontSize(\\[int value\\])                                                                          | Gets or sets the size of the font for the control to use.                                                                                                               |\n| public boolean forcedToOverflow(\\[boolean value\\])                                                          |                                                                                                                                                                         |\n| public int foregroundColor(\\[int value\\])                                                                   | Gets or sets the text color for the control to use.                                                                                                                     |\n| public boolean hasChanged(\\[boolean val\\])                                                                  | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                             | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                        | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                       | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                      | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                          | Gets or sets the help text to display at the bottom of the screen when a field or control is pointed to.                                                                |\n| public str hierarchyParent(\\[str value\\])                                                                   | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                           | Retrieves the Windows handle for the control.                                                                                                                           |\n| public int imageLocation(\\[int value\\])                                                                     |                                                                                                                                                                         |\n| public boolean isContainer()                                                                                |                                                                                                                                                                         |\n| public boolean isDisplayed()                                                                                | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isRestricted()                                                                               | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                    | Returns a value that indicates whether the control allows for the specified level of customization.                                                                     |\n| public boolean italic(\\[boolean value\\])                                                                    |                                                                                                                                                                         |\n| public str keyTip(\\[str value\\])                                                                            |                                                                                                                                                                         |\n| public int left(int value, \\[int mode\\])                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                          | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                         | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                             | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                             | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                 | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                   | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public int multiSelect(\\[int value\\])                                                                       |                                                                                                                                                                         |\n| public str name(\\[str value\\])                                                                              | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                  |                                                                                                                                                                         |\n| public int needsRecord(\\[int value\\])                                                                       |                                                                                                                                                                         |\n| public str normalImage(\\[str value\\])                                                                       |                                                                                                                                                                         |\n| public int normalResource(\\[int value\\])                                                                    |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                     |                                                                                                                                                                         |\n| public str parameters(\\[str value\\])                                                                        |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                          | Retrieves the parent control for the control.                                                                                                                           |\n| public boolean primary(\\[boolean value\\])                                                                   |                                                                                                                                                                         |\n| public boolean saveRecord(\\[boolean value\\])                                                                |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                   | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int shortkey(\\[int value\\])                                                                          |                                                                                                                                                                         |\n| public int showContextMenu(int menuHandle)                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public boolean showShortCut(\\[boolean value\\])                                                              |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                      | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public int style(\\[int value\\])                                                                             |                                                                                                                                                                         |\n| public str text(\\[str value\\])                                                                              |                                                                                                                                                                         |\n| public int toggleButton(\\[int value\\])                                                                      |                                                                                                                                                                         |\n| public int toggleValue(\\[int value\\])                                                                       |                                                                                                                                                                         |\n| public str toolTip()                                                                                        | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                           | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                          | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                              |                                                                                                                                                                         |\n| public boolean underline(\\[boolean value\\])                                                                 | Sets or returns the underline property for the text in the control.                                                                                                     |\n| public boolean SysObsoleteAttribute(container data)                                                         |                                                                                                                                                                         |\n| public int userData(\\[int value\\])                                                                          | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                      | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                     | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                       | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                        | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                          | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                  | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                    | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                    | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                 | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                          | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                         | Sets or returns the width of the control in pixels.                                                                                                                     |\n| public boolean value(\\[boolean value\\])                                                                     |                                                                                                                                                                         |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                      | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                              | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                   | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                         | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                        | Gets or sets the width of the control.                                                                                                                                  |\n| private void OnClicked(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                  |                                                                                                                                                                         |\n| public void displayControl()                                                                                | Displays the control.                                                                                                                                                   |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                   | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void inputSearch(str searchStr)                                                                      | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                       | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void cut()                                                                                           | Cuts the contents of the control.                                                                                                                                       |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                               | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void setFocus()                                                                                      | Sets the focus on the control.                                                                                                                                          |\n| public void paste()                                                                                         | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void gotFocus()                                                                                      | Indicates that the control has received focus.                                                                                                                          |\n| public void resetUserSetting()                                                                              | Resets the user settings for the control.                                                                                                                               |\n| public void lostFocus()                                                                                     | Indicates that the control has lost focus.                                                                                                                              |\n| public void prefColumnSize(int width, int height)                                                           | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void clicked()                                                                                       |                                                                                                                                                                         |\n| public void copy()                                                                                          | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void dragLeave()                                                                                     | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void mouseLeave()                                                                                    | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\]) |                                                                                                                                                                         |\n| public void endDrag()                                                                                       | Is called when the user has finished dragging a form control.                                                                                                           |\n| public void context()                                                                                       | Shows the shortcut menu for the control.                                                                                                                                |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                 |                                                                                                                                                                         |\n\n### Method alignControl\n\nDetermines whether to align the control.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned according to the longest label.\n\n### Method alignment\n\n    public int alignment([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\nDetermines whether the user can change the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be edited; otherwise, false.\n\n#### Remarks\n\nWhen this property is set on a container control, modifications are disabled or enabled for all controls within the container.\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nIf specified, the property is set to this value.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method autoRefreshData\n\n    public boolean autoRefreshData([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method backgroundColor\n\nGets or sets the background color of the control.\n\n    public int backgroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method backStyle\n\nDeterminess whether the control background can be transparent.\n\n    public int backStyle([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n1 if the control background can be transparent; otherwise, 0.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method big\n\n    public boolean big([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method bold\n\nGets or sets the weight of font used to output text in the control.\n\n    public int bold([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value between zero and nine, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the weight of the font as follows:\n\n-   0 Use the default font weight.\n-   1 Thin.\n-   2 Extra-light.\n-   3 Light.\n-   4 Normal.\n-   5 Medium.\n-   6 Semibold.\n-   7 Bold.\n-   8 Extra-bold.\n-   9 Heavy.\n\n### Method border\n\nGets or sets the style of the borderline of the control.\n\n    public int border([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and four, inclusive.\n\n#### Remarks\n\nThe integer that is returned contains the style of the borderline of the control as follows:\n\n| Value. | Description. |\n|--------|--------------|\n| 0      | Auto.        |\n| 1      | 3D.          |\n| 2      | Single line. |\n| 3      | Flat.        |\n| 4      | None.        |\n\n### Method buttonDisplay\n\nGets or sets the appearance of the button control.\n\n    public int buttonDisplay([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and five, inclusive.\n\n#### Remarks\n\nThe value of the property defines whether the text, the image, or both should be displayed on the button. This property also controls relative positions of text and image if both are displayed.The integer value that is returned contains the appearace of the button control as follows:\n\n| Value. | Description.                                                     |\n|--------|------------------------------------------------------------------|\n| 0      | Text only.                                                       |\n| 1      | Image Only.                                                      |\n| 2      | Text and image; the image is displayed below the text.           |\n| 3      | Text and image; the image is displayed above the text.           |\n| 4      | Text and image; the image is displayed to the left of the text.  |\n| 5      | Text and image; the image is displayed to the right of the text. |\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method caption\n\nGets or set the caption of the control.\n\n    public str caption([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe string that is used as the caption of the control.\n\n### Method characterSet\n\nGets or sets the character set of the font.\n\n    public int characterSet([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer value that indicates the character set of the font.\n\n#### Remarks\n\nThe values for the integer that is returned indicate the character set according to the following table:\n\n| Value. | Description.         |\n|--------|----------------------|\n| 0      | ANSI\\_CHARSET        |\n| 1      | DEFAULT\\_CHARSET     |\n| 2      | SYMBOL\\_CHARSET      |\n| 77     | MAC\\_CHARSET         |\n| 128    | SHIFTJIS\\_CHARSET    |\n| 129    | HANGUL\\_CHARSET      |\n| 134    | GB2312\\_CHARSET      |\n| 136    | CHINESEBIG5\\_CHARSET |\n| 161    | GREEK\\_CHARSET       |\n| 162    | TURKISH\\_CHARSET     |\n| 163    | VIETNAMESE\\_CHARSET  |\n| 186    | BALTIC\\_CHARSET      |\n| 204    | RUSSIAN\\_CHARSET     |\n| 238    | EASTEUROPE\\_CHARSET  |\n| 255    | OEM\\_CHARSET         |\n\nThe value in the following table is for the Korean language edition of MicrosoftWindows.\n\n| Value. | Description.   |\n|--------|----------------|\n| 130    | JOHAB\\_CHARSET |\n\nThe values in the following table are for the Middle East language edition of Windows.\n\n| Value. | Description.    |\n|--------|-----------------|\n| 177    | HEBREW\\_CHARSET |\n| 178    | ARABIC\\_CHARSET |\n\nThe value in the following table is for the Thai language edition of Windows.\n\n| Value. | Description.  |\n|--------|---------------|\n| 222    | THAI\\_CHARSET |\n\nThe default character set is set to a value based on the current system locale. For example, when the system locale is English (United States), it is set as ANSI\\_CHARSET. For more information, see the LOGFONT structure on the MSDN website, http://go.microsoft.com/fwlink/?LinkID=85972.\n\n### Method colorScheme\n\nGets or sets the color scheme of the control.\n\n    public int colorScheme([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer between zero and two, inclusive.\n\n#### Remarks\n\nThe color scheme is defined according to the following table:\n\n| Value. | Style.                         |\n|--------|--------------------------------|\n| 0      | Default.                       |\n| 1      | The Microsoft Windows palette. |\n| 2      | The true-color scheme.         |\n\n### Method command\n\n    public int command([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control; optional.\n\n#### Return Value\n\nThe identifier of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method defaultButton\n\nDetermines whether the button should be the default button in the form.\n\n    public boolean defaultButton([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\ntrue if the button should be the default button; otherwise, false.\n\n### Method disabledImage\n\nGets or sets the disabled image of the button.\n\n    public str disabledImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe full name of an image file. The system supports all of the GDI-supported image formats.\n\n#### Remarks\n\nThis property has precedence over the disabledResource property. It is used if both of these properties are set.\n\n### Method disabledImageLocation\n\n    public int disabledImageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method disabledResource\n\nGets or sets the resource ID of the image to use as the disabled button image.\n\n    public int disabledResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe resource ID of the image to use as the disabled button image. Both icon and bitmap images are supported.\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether to enable or disable drag-and-drop operations for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Remarks\n\nUse the dragLeave, the dragOver, and the dragOverEx to specify the behavior.\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method enabled\n\nDetermines whether to enable or disable the object.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property allows controls to be enabled or disabled at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message, which provides read-only information.\n\n### Method font\n\nGets or sets the name of the font for the control to use.\n\n    public str font([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe name of the font to use, such as Tahoma or Verdana.\n\n### Method fontSize\n\nGets or sets the size of the font for the control to use.\n\n    public int fontSize([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nThe height of the font in points.\n\n### Method forcedToOverflow\n\n    public boolean forcedToOverflow([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method foregroundColor\n\nGets or sets the text color for the control to use.\n\n    public int foregroundColor([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\nAn integer that contains a packed RGB color.\n\n#### Remarks\n\nThe integer that is returned contains a packed RGB color as follows:\n\n-   The low-order byte contains a value for the relative intensity of red.\n-   The second byte contains a value for green.\n-   The third byte contains a value for blue.\n-   The high-order byte must be zero.\n-   The maximum value for a single byte is 255.\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the height according to the following table:\n\n| Mode.            | Height calculation.                                                                       |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 Exact.        | The exact height in pixels of the controls is used.                                       |\n| 0 Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column height. | The layout of the form determines the height of the control.                              |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table:\n\n| Mode.          | Height Calculation.                                                                       |\n|----------------|-------------------------------------------------------------------------------------------|\n| Exact.         | The exact height in pixels of the controls is used.                                       |\n| Auto.          | The height of the control is calculated automatically and the value parameter is ignored. |\n| Column height. | The layout of the form determines the height of the control.                              |\n\nThe height of the control might change when the mode is set to auto or column height.\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the exact height calculation mode is used.\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n### Method helpText\n\nGets or sets the help text to display at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the help text for the control.\n\n#### Return Value\n\nThe string to be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet.The help text must not exceed 250 characters.\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the WindowsAPI.\n\n### Method imageLocation\n\n    public int imageLocation([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nReturns a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n### Method italic\n\n    public boolean italic([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method keyTip\n\n    public str keyTip([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned.\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n### Method multiSelect\n\n    public int multiSelect([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method needsRecord\n\n    public int needsRecord([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalImage\n\n    public str normalImage([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method normalResource\n\n    public int normalResource([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parameters\n\n    public str parameters([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method primary\n\n    public boolean primary([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method saveRecord\n\n    public boolean saveRecord([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n### Method shortkey\n\n    public int shortkey([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method showShortCut\n\n    public boolean showShortCut([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n### Method style\n\n    public int style([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method text\n\n    public str text([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toggleButton\n\n    public int toggleButton([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toggleValue\n\n    public int toggleValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method underline\n\nSets or returns the underline property for the text in the control.\n\n    public boolean underline([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the underline property of the control; optional.\n\n#### Return Value\n\ntrue if the text in the control is underlined; otherwise, false.\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width for the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n### Method value\n\n    public boolean value([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn Integer data type that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn Integer data type that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted.Calculate the width according to the following table:\n\n| Mode.           | Width calculation.                                                                       |\n|-----------------|------------------------------------------------------------------------------------------|\n| -1 Exact.       | The exact width in pixels of the controls is used.                                       |\n| 0 Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| 1 Column width. | The layout of the form determines the width of the control.                              |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type value that indicates how control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table:\n\n| Mode.         | Width Calculation.                                                                       |\n|---------------|------------------------------------------------------------------------------------------|\n| Exact.        | The exact width in pixels of the controls is used.                                       |\n| Auto.         | The width of the control is calculated automatically and the value parameter is ignored. |\n| Column width. | The layout of the form determines the width of the control.                              |\n\nThe width of the control might change when the mode is set to auto or column width.\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn Integer data type that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width in pixels of the control.\n\n#### Remarks\n\nTo change the width of the control, use the exact width calculation mode.\n\n### Method OnClicked\n\n    private void OnClicked([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n### Method clicked\n\n    public void clicked()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n## Class FormContainer\n    class FormContainer extends Object\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method             | Description |\n|--------------------|-------------|\n| private void new() |             |\n\n### Method new\n\n    private void new()\n\n## Class FormContainerControl\n    class FormContainerControl extends FormControl\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                                                                                              | Description |\n|---------------------------------------------------------------------------------------------------------------------|-------------|\n| public FormControl addControl(FormControlType controlType, str controlName, \\[FormControl insertAfter\\])            |             |\n| public FormControl addControlEx(str controlClass, str controlName, \\[FormControl insertAfter\\])                     |             |\n| public FormControl addDataField(int dataSourceId, FieldId fieldId, \\[FormControl insertAfter\\], \\[int arrayIndex\\]) |             |\n| public boolean alignChild(\\[boolean value\\])                                                                        |             |\n| public boolean alignChildren(\\[boolean value\\])                                                                     |             |\n| public boolean alignControl(\\[boolean value\\])                                                                      |             |\n| public boolean allowEdit(\\[boolean value\\])                                                                         |             |\n| public boolean allowSysSetup()                                                                                      |             |\n| public int allowUserSetup(\\[int value\\])                                                                            |             |\n| public int arrangeGuide(\\[int value\\])                                                                              |             |\n| public int arrangeMethod(\\[int value\\])                                                                             |             |\n| public int arrangeWhen(\\[int value\\])                                                                               |             |\n| public boolean autoDataGroup(\\[boolean value\\])                                                                     |             |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                   |             |\n| public int beginDrag(int x, int y)                                                                                  |             |\n| public int bottomMargin(\\[int value\\], \\[AutoMode mode\\])                                                           |             |\n| public AutoMode bottomMarginMode(\\[AutoMode mode\\])                                                                 |             |\n| public int bottomMarginValue(\\[int value\\])                                                                         |             |\n| public container calcControlSize(int chars, int lines)                                                              |             |\n| public boolean canAddDataField(int dataSourceId, FieldId fieldId, \\[int arrayIndex\\])                               |             |\n| public boolean canContain(FormControl control)                                                                      |             |\n| public int columns(\\[int value\\], \\[ColumnsMode mode\\])                                                             |             |\n| public ColumnsMode columnsMode(\\[ColumnsMode mode\\])                                                                |             |\n| public int columnspace(\\[int value\\], \\[AutoMode mode\\])                                                            |             |\n| public AutoMode columnspaceMode(\\[AutoMode mode\\])                                                                  |             |\n| public int columnspaceValue(\\[int value\\])                                                                          |             |\n| public int columnsValue(\\[int value\\])                                                                              |             |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                            |             |\n| public List configurationKeyEx()                                                                                    |             |\n| public boolean contains(FormControl control)                                                                        |             |\n| public int controlCount()                                                                                           |             |\n| public FormControl controlNum(int controlNo)                                                                        |             |\n| public str countryRegionCodes(\\[str value\\])                                                                        |             |\n| public str dataRelationPath(\\[str value\\])                                                                          |             |\n| public int displayTarget(\\[int value\\])                                                                             |             |\n| public int dragDrop(\\[int value\\])                                                                                  |             |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                                   |             |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                                       |             |\n| public str dragText()                                                                                               |             |\n| public boolean enabled(\\[boolean value\\])                                                                           |             |\n| public boolean hasChanged(\\[boolean val\\])                                                                          |             |\n| public boolean hasUserSetting()                                                                                     |             |\n| public int height(int value, \\[int mode\\])                                                                          |             |\n| public int heightMode(\\[int value\\])                                                                                |             |\n| public int heightValue(\\[int value\\])                                                                               |             |\n| public str helpField()                                                                                              |             |\n| public str helpText(\\[str value\\])                                                                                  |             |\n| public boolean hideIfEmpty(\\[boolean value\\])                                                                       |             |\n| public str hierarchyParent(\\[str value\\])                                                                           |             |\n| public int hWnd()                                                                                                   |             |\n| public boolean isContainer()                                                                                        |             |\n| public boolean isDisplayed()                                                                                        |             |\n| public boolean isRestricted()                                                                                       |             |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                            |             |\n| public boolean isVisible()                                                                                          |             |\n| public boolean isVisibleOnClient()                                                                                  |             |\n| public int left(int value, \\[int mode\\])                                                                            |             |\n| public int leftMargin(\\[int value\\], \\[AutoMode mode\\])                                                             |             |\n| public AutoMode leftMarginMode(\\[AutoMode mode\\])                                                                   |             |\n| public int leftMarginValue(\\[int value\\])                                                                           |             |\n| public int leftMode(\\[int value\\])                                                                                  |             |\n| public int leftValue(\\[int value\\])                                                                                 |             |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                     |             |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                     |             |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                         |             |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                         |             |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                           |             |\n| public int moveControl(int controlId, \\[int insertAfterId\\])                                                        |             |\n| public str name(\\[str value\\])                                                                                      |             |\n| public int neededPermission(\\[int value\\])                                                                          |             |\n| public container SysObsoleteAttribute()                                                                             |             |\n| public FormControl parentControl()                                                                                  |             |\n| public int rightMargin(\\[int value\\], \\[AutoMode mode\\])                                                            |             |\n| public AutoMode rightMarginMode(\\[AutoMode mode\\])                                                                  |             |\n| public int rightMarginValue(\\[int value\\])                                                                          |             |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                           |             |\n| public int showContextMenu(int menuHandle)                                                                          |             |\n| public boolean skip(\\[boolean value\\])                                                                              |             |\n| public str toolTip()                                                                                                |             |\n| public int top(int value, \\[int mode\\])                                                                             |             |\n| public int topMargin(\\[int value\\], \\[AutoMode mode\\])                                                              |             |\n| public AutoMode topMarginMode(\\[AutoMode mode\\])                                                                    |             |\n| public int topMarginValue(\\[int value\\])                                                                            |             |\n| public int topMode(\\[int value\\])                                                                                   |             |\n| public int topValue(\\[int value\\])                                                                                  |             |\n| public int type(\\[int value\\])                                                                                      |             |\n| public boolean SysObsoleteAttribute(container data)                                                                 |             |\n| public int userData(\\[int value\\])                                                                                  |             |\n| public int userDataItem(\\[int value\\])                                                                              |             |\n| public int userDataItems(\\[int value\\])                                                                             |             |\n| public int userDisable(\\[int value\\])                                                                               |             |\n| public int userHeight(\\[int value\\])                                                                                |             |\n| public int userHide(\\[int value\\])                                                                                  |             |\n| public int userOrgContainer(\\[int value\\])                                                                          |             |\n| public int userOrgSibling(\\[int value\\])                                                                            |             |\n| public str userPromptText(\\[str value\\])                                                                            |             |\n| public int userSecurityLevel(\\[int value\\])                                                                         |             |\n| public int userSkip(\\[int value\\])                                                                                  |             |\n| public int userWidth(\\[int value\\])                                                                                 |             |\n| public boolean useUserLayout(\\[boolean value\\])                                                                     |             |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                        |             |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                              |             |\n| public int verticalSpacingValue(\\[int value\\])                                                                      |             |\n| public boolean visible(\\[boolean value\\])                                                                           |             |\n| public int width(int value, \\[int mode\\])                                                                           |             |\n| public int widthMode(\\[int value\\])                                                                                 |             |\n| public int widthValue(\\[int value\\])                                                                                |             |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                               |             |\n| public void inputSearch(str searchStr)                                                                              |             |\n| public void prefColumnSize(int width, int height)                                                                   |             |\n| public void gotFocus()                                                                                              |             |\n| public void lostFocus()                                                                                             |             |\n| public void mouseLeave()                                                                                            |             |\n| public void setFocus()                                                                                              |             |\n| public void copy()                                                                                                  |             |\n| private void OnGotFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                         |             |\n| public void displayControl()                                                                                        |             |\n| public void paste()                                                                                                 |             |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                           |             |\n| private void OnLostFocus(\\[FormControl sender\\], \\[FormControlEventArgs e\\])                                        |             |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                                       |             |\n| public void resetUserSetting()                                                                                      |             |\n| public void endDrag()                                                                                               |             |\n| public void arrange()                                                                                               |             |\n| public void dragLeave()                                                                                             |             |\n| public void cut()                                                                                                   |             |\n| public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, \\[Object overrideObject\\])         |             |\n| public void context()                                                                                               |             |\n\n### Method addControl\n\n    public FormControl addControl(FormControlType controlType, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolType  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addControlEx\n\n    public FormControl addControlEx(str controlClass, str controlName, [FormControl insertAfter])\n\n#### Parameters\n\ncontrolClass  \n\n<!-- -->\n\ncontrolName  \n\n<!-- -->\n\ninsertAfter  \n\n#### Return Value\n\n### Method addDataField\n\n    public FormControl addDataField(int dataSourceId, FieldId fieldId, [FormControl insertAfter], [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\ninsertAfter  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method alignChild\n\n    public boolean alignChild([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignChildren\n\n    public boolean alignChildren([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method alignControl\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowEdit\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method allowSysSetup\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\n### Method allowUserSetup\n\n    public int allowUserSetup([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeGuide\n\n    public int arrangeGuide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeMethod\n\n    public int arrangeMethod([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method arrangeWhen\n\n    public int arrangeWhen([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDataGroup\n\n    public boolean autoDataGroup([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method autoDeclaration\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method beginDrag\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n#### Return Value\n\n### Method bottomMargin\n\n    public int bottomMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginMode\n\n    public AutoMode bottomMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method bottomMarginValue\n\n    public int bottomMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method calcControlSize\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \n\n<!-- -->\n\nlines  \n\n#### Return Value\n\n### Method canAddDataField\n\n    public boolean canAddDataField(int dataSourceId, FieldId fieldId, [int arrayIndex])\n\n#### Parameters\n\ndataSourceId  \n\n<!-- -->\n\nfieldId  \n\n<!-- -->\n\narrayIndex  \n\n#### Return Value\n\n### Method canContain\n\n    public boolean canContain(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method columns\n\n    public int columns([int value], [ColumnsMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnsMode\n\n    public ColumnsMode columnsMode([ColumnsMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspace\n\n    public int columnspace([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method columnspaceMode\n\n    public AutoMode columnspaceMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method columnspaceValue\n\n    public int columnspaceValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method columnsValue\n\n    public int columnsValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKey\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method configurationKeyEx\n\n    public List configurationKeyEx()\n\n#### Return Value\n\n### Method contains\n\n    public boolean contains(FormControl control)\n\n#### Parameters\n\ncontrol  \n\n#### Return Value\n\n### Method controlCount\n\n    public int controlCount()\n\n#### Return Value\n\n### Method controlNum\n\n    public FormControl controlNum(int controlNo)\n\n#### Parameters\n\ncontrolNo  \n\n#### Return Value\n\n### Method countryRegionCodes\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dataRelationPath\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method displayTarget\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragDrop\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dragOver\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \n\n<!-- -->\n\ndragMode  \n\n<!-- -->\n\nx  \n\n<!-- -->\n\ny  \n\n#### Return Value\n\n### Method dragOverEx\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \n\n<!-- -->\n\ndragMode  \n\n<!-- -->\n\nx  \n\n<!-- -->\n\ny  \n\n#### Return Value\n\n### Method dragText\n\n    public str dragText()\n\n#### Return Value\n\n### Method enabled\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hasChanged\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \n\n#### Return Value\n\n### Method hasUserSetting\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\n### Method height\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method heightMode\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method heightValue\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method helpField\n\n    public str helpField()\n\n#### Return Value\n\n### Method helpText\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hideIfEmpty\n\n    public boolean hideIfEmpty([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hierarchyParent\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method hWnd\n\n    public int hWnd()\n\n#### Return Value\n\n### Method isContainer\n\n    public boolean isContainer()\n\n#### Return Value\n\n### Method isDisplayed\n\n    public boolean isDisplayed()\n\n#### Return Value\n\n### Method isRestricted\n\n    public boolean isRestricted()\n\n#### Return Value\n\n### Method isUserSetupEnabled\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \n\n#### Return Value\n\n### Method isVisible\n\n    public boolean isVisible()\n\n#### Return Value\n\n### Method isVisibleOnClient\n\n    public boolean isVisibleOnClient()\n\n#### Return Value\n\n### Method left\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMargin\n\n    public int leftMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method leftMarginMode\n\n    public AutoMode leftMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method leftMarginValue\n\n    public int leftMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftMode\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method leftValue\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method markAsUserAdd\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method mouseDblClick\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method mouseDown\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method mouseMove\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method mouseUp\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n#### Return Value\n\n### Method moveControl\n\n    public int moveControl(int controlId, [int insertAfterId])\n\n#### Parameters\n\ncontrolId  \n\n<!-- -->\n\ninsertAfterId  \n\n#### Return Value\n\n### Method name\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\n    public FormControl parentControl()\n\n#### Return Value\n\n### Method rightMargin\n\n    public int rightMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method rightMarginMode\n\n    public AutoMode rightMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method rightMarginValue\n\n    public int rightMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method securityKey\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method showContextMenu\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \n\n#### Return Value\n\n### Method skip\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method toolTip\n\n    public str toolTip()\n\n#### Return Value\n\n### Method top\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMargin\n\n    public int topMargin([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method topMarginMode\n\n    public AutoMode topMarginMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method topMarginValue\n\n    public int topMarginValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topMode\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method topValue\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method userData\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItem\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDataItems\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userDisable\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userHeight\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userHide\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userOrgContainer\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userOrgSibling\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userPromptText\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userSecurityLevel\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userSkip\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method userWidth\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method useUserLayout\n\n    public boolean useUserLayout([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method verticalSpacing\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingMode\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\n### Method verticalSpacingValue\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method visible\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method width\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \n\n<!-- -->\n\nmode  \n\n#### Return Value\n\n### Method widthMode\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method widthValue\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method dropEx\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \n\n<!-- -->\n\ndragMode  \n\n<!-- -->\n\nx  \n\n<!-- -->\n\ny  \n\n### Method inputSearch\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \n\n### Method prefColumnSize\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \n\n<!-- -->\n\nheight  \n\n### Method gotFocus\n\n    public void gotFocus()\n\n### Method lostFocus\n\n    public void lostFocus()\n\n### Method mouseLeave\n\n    public void mouseLeave()\n\n### Method setFocus\n\n    public void setFocus()\n\n### Method copy\n\n    public void copy()\n\n### Method OnGotFocus\n\n    private void OnGotFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method displayControl\n\n    public void displayControl()\n\n### Method paste\n\n    public void paste()\n\n### Method drop\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \n\n<!-- -->\n\ndragMode  \n\n<!-- -->\n\nx  \n\n<!-- -->\n\ny  \n\n### Method OnLostFocus\n\n    private void OnLostFocus([FormControl sender], [FormControlEventArgs e])\n\n#### Parameters\n\nsender  \n\n<!-- -->\n\ne  \n\n### Method mouseEnter\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \n\n<!-- -->\n\ny  \n\n<!-- -->\n\nbutton  \n\n<!-- -->\n\nCtrl  \n\n<!-- -->\n\nShift  \n\n### Method resetUserSetting\n\n    public void resetUserSetting()\n\n### Method endDrag\n\n    public void endDrag()\n\n### Method arrange\n\n    public void arrange()\n\n### Method dragLeave\n\n    public void dragLeave()\n\n### Method cut\n\n    public void cut()\n\n### Method registerOverrideMethod\n\n    public void registerOverrideMethod(str methodToOverride, str objectMethodToCall, [Object overrideObject])\n\n#### Parameters\n\nmethodToOverride  \n\n<!-- -->\n\nobjectMethodToCall  \n\n<!-- -->\n\noverrideObject  \n\n### Method context\n\n    public void context()\n\n## Class FormControl\n    class FormControl extends Object\n\nThe FormControl class serves as the base class for all form controls.\n\n### Remarks\n\nYou should not create an instance of this class. Use the specific control instead.\n\n### Examples\n\n### Methods\n\n| Method                                                                                                                                                 | Description                                                                                                                                                             |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| public boolean alignControl(\\[boolean value\\])                                                                                                         | Determines whether the control should be aligned.                                                                                                                       |\n| public boolean allowEdit(\\[boolean value\\])                                                                                                            | Determines whether the user can modify the contents of the control.                                                                                                     |\n| public boolean allowSysSetup()                                                                                                                         | Retrieves a value that indicates whether the control is shown in the SysSetup form.                                                                                     |\n| public boolean autoDeclaration(\\[boolean value\\])                                                                                                      | Determines whether the system can declare a member variable that has the same name as the control.                                                                      |\n| public int beginDrag(int x, int y)                                                                                                                     | Is called when the user starts to drag a form control.                                                                                                                  |\n| public FormBuildControl build()                                                                                                                        |                                                                                                                                                                         |\n| public container calcControlSize(int chars, int lines)                                                                                                 | Retrieves the size of the control.                                                                                                                                      |\n| public FormChangeTracker changeTracker()                                                                                                               |                                                                                                                                                                         |\n| public ConfigurationKeyId configurationKey(\\[ConfigurationKeyId value\\])                                                                               | Gets or sets the configuration key that is assigned to the control.                                                                                                     |\n| public List configurationKeyEx()                                                                                                                       | Retrieves a list that contains the IDs of configuration keys that are in effect for the control.                                                                        |\n| public int containerId()                                                                                                                               | Retrieves the ID of the parent container for the control.                                                                                                               |\n| public str countryRegionCodes(\\[str value\\])                                                                                                           | Gets or sets the comma-separated list of country/region codes for the control.                                                                                          |\n| public int currentRow()                                                                                                                                |                                                                                                                                                                         |\n| public str dataRelationPath(\\[str value\\])                                                                                                             | Gets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.                                           |\n| public FormDataSource dataSourceObject()                                                                                                               |                                                                                                                                                                         |\n| public int displayTarget(\\[int value\\])                                                                                                                | Gets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both. |\n| public int dragDrop(\\[int value\\])                                                                                                                     | Determines whether drag-and-drop operations are enabled or disabled for the control.                                                                                    |\n| public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)                                                                      | Raises the dragOver event to indicate that a mouse drag operation is over the current control.                                                                          |\n| public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)                                                                          | Raises the dragOverEx event to indicate that a mouse drag operation is over the current control.                                                                        |\n| public str dragText()                                                                                                                                  | Retrieves the text that is displayed when the form control is dragged.                                                                                                  |\n| public boolean editAutoPostback(\\[boolean value\\])                                                                                                     |                                                                                                                                                                         |\n| public boolean enabled(\\[boolean value\\])                                                                                                              | Determines whether the object is enabled or disabled.                                                                                                                   |\n| public str extendedStyle(\\[str value\\])                                                                                                                |                                                                                                                                                                         |\n| public FieldBinding fieldBinding()                                                                                                                     | Retrieves the table and field bindings of the control into a FieldBinding derived class.                                                                                |\n| public str formatStr(\\[int rowNumber\\], \\[boolean display\\], \\[int maxWidth\\], \\[boolean forceSignWhenDisplaceNegative\\], \\[boolean formatForExport\\]) |                                                                                                                                                                         |\n| public xFormRun formRun()                                                                                                                              |                                                                                                                                                                         |\n| public FormBinding getBinding(str propertyName)                                                                                                        |                                                                                                                                                                         |\n| public boolean hasChanged(\\[boolean val\\])                                                                                                             | Sets or returns a value that indicates whether the contents of the control have changed.                                                                                |\n| public boolean hasUserSetting()                                                                                                                        | Indicates whether the control has custom user settings.                                                                                                                 |\n| public int height(int value, \\[int mode\\])                                                                                                             | Gets or sets the height of the control.                                                                                                                                 |\n| public int heightMode(\\[int value\\])                                                                                                                   | Gets or sets a calculation mode for the height of the control.                                                                                                          |\n| public int heightValue(\\[int value\\])                                                                                                                  | Gets or sets the height of the control.                                                                                                                                 |\n| public str helpField()                                                                                                                                 | Retrieves the Help text for the control.                                                                                                                                |\n| public str helpText(\\[str value\\])                                                                                                                     | Gets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.                                                         |\n| public str hierarchyParent(\\[str value\\])                                                                                                              | Gets or sets the HierarchyParent property value of the control.                                                                                                         |\n| public int hWnd()                                                                                                                                      | Retrieves the Windows handle for the control.                                                                                                                           |\n| public int id()                                                                                                                                        | Retrieves the ID of the control.                                                                                                                                        |\n| public boolean isDisplayed()                                                                                                                           | Retrieves a value that indicates whether the control is displayed.                                                                                                      |\n| public boolean isEditable()                                                                                                                            |                                                                                                                                                                         |\n| public boolean isEnabled()                                                                                                                             |                                                                                                                                                                         |\n| public boolean isRestricted()                                                                                                                          | Retrieves a value that indicates whether the control is restricted.                                                                                                     |\n| public boolean isUserSetupEnabled(int neededSetupRights)                                                                                               | Retrieves a value that indicates whether the control allows for the specified level of customization.                                                                   |\n| public boolean isVisible()                                                                                                                             | Retrieves a value that indicates whether the control is visible.                                                                                                        |\n| public boolean isVisibleOnClient()                                                                                                                     |                                                                                                                                                                         |\n| public str labelText()                                                                                                                                 | Retrieves the label text for the control.                                                                                                                               |\n| public int left(int value, \\[int mode\\])                                                                                                               | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public int leftMode(\\[int value\\])                                                                                                                     | Sets the horizontal arrange mode for the control in the form.                                                                                                           |\n| public int leftValue(\\[int value\\])                                                                                                                    | Gets or sets the horizontal position of the control in the form.                                                                                                        |\n| public boolean lockWindowUpdate(boolean lock)                                                                                                          | Locks or unlocks the window of the control for update.                                                                                                                  |\n| public boolean markAsUserAdd(\\[boolean value\\])                                                                                                        | Marks or unmarks the control as a user-added control.                                                                                                                   |\n| public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)                                                                        | Is called when the control is double-clicked by the user.                                                                                                               |\n| public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)                                                                            | Is called when the user clicks the mouse button over the control.                                                                                                       |\n| public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)                                                                            | Is called when the user moves the mouse pointer over the control.                                                                                                       |\n| public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)                                                                              | Is called when the user releases the mouse button over the control area.                                                                                                |\n| public str name(\\[str value\\])                                                                                                                         | Gets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.                                 |\n| public int neededPermission(\\[int value\\])                                                                                                             |                                                                                                                                                                         |\n| public container SysObsoleteAttribute()                                                                                                                |                                                                                                                                                                         |\n| public FormControl parentControl()                                                                                                                     | Retrieves the parent control for the control.                                                                                                                           |\n| public str resourceBundleName()                                                                                                                        |                                                                                                                                                                         |\n| public SecurityKeyId securityKey(\\[SecurityKeyId value\\])                                                                                              | Sets or returns the ID of the security key for the control.                                                                                                             |\n| public int showContextMenu(int menuHandle)                                                                                                             | Shows the shortcut menu for the control.                                                                                                                                |\n| public str getContextMenuOptions()                                                                                                                     |                                                                                                                                                                         |\n| public boolean skip(\\[boolean value\\])                                                                                                                 | Sets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.                                         |\n| public str templateId()                                                                                                                                |                                                                                                                                                                         |\n| public str toolTip()                                                                                                                                   | Retrieves the tooltip text for the control.                                                                                                                             |\n| public int top(int value, \\[int mode\\])                                                                                                                | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int topMode(\\[int value\\])                                                                                                                      | Sets the vertical arrange mode for the control in the form.                                                                                                             |\n| public int topValue(\\[int value\\])                                                                                                                     | Gets or sets the vertical position of the control in the form.                                                                                                          |\n| public int type(\\[int value\\])                                                                                                                         |                                                                                                                                                                         |\n| public boolean SysObsoleteAttribute(container data)                                                                                                    |                                                                                                                                                                         |\n| public int updateWindow()                                                                                                                              | Updates the window for the control.                                                                                                                                     |\n| public int userData(\\[int value\\])                                                                                                                     | Gets or sets the user data for the control.                                                                                                                             |\n| public int userDataItem(\\[int value\\])                                                                                                                 | Gets or sets the user data item for the control.                                                                                                                        |\n| public int userDataItems(\\[int value\\])                                                                                                                | Gets or sets the number of user data items for the control.                                                                                                             |\n| public int userDisable(\\[int value\\])                                                                                                                  | Gets or sets the value that indicates whether the control is disabled for the user.                                                                                     |\n| public int userHeight(\\[int value\\])                                                                                                                   | Gets or sets the custom user height for the control.                                                                                                                    |\n| public int userHide(\\[int value\\])                                                                                                                     | Gets or sets the value that indicates whether the control is hidden from the user.                                                                                      |\n| public int userOrgContainer(\\[int value\\])                                                                                                             | Gets or sets the organization container for the control.                                                                                                                |\n| public int userOrgSibling(\\[int value\\])                                                                                                               | Gets or sets the organization sibling for the control.                                                                                                                  |\n| public str userPromptText(\\[str value\\])                                                                                                               | Gets or sets the user label text for the control.                                                                                                                       |\n| public int userSecurityLevel(\\[int value\\])                                                                                                            | Gets or sets the user security level for the control.                                                                                                                   |\n| public int userSkip(\\[int value\\])                                                                                                                     | Sets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.                    |\n| public int userWidth(\\[int value\\])                                                                                                                    | Sets or returns the width of the control in pixels.                                                                                                                     |\n| public str valueStr()                                                                                                                                  | Retrieves the value of the control in string format.                                                                                                                    |\n| public int verticalSpacing(\\[int value\\], \\[AutoMode mode\\])                                                                                           | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public AutoMode verticalSpacingMode(\\[AutoMode mode\\])                                                                                                 | Sets the vertical spacing mode for the control in the form.                                                                                                             |\n| public int verticalSpacingValue(\\[int value\\])                                                                                                         | Gets or sets the vertical spacing of the control in the form.                                                                                                           |\n| public boolean visible(\\[boolean value\\])                                                                                                              | Sets or returns a value that indicates whether the control is visible.                                                                                                  |\n| public int width(int value, \\[int mode\\])                                                                                                              | Gets or sets the width of the control.                                                                                                                                  |\n| public int widthMode(\\[int value\\])                                                                                                                    | Gets or sets the calculation mode of the width of the control.                                                                                                          |\n| public int widthValue(\\[int value\\])                                                                                                                   | Gets or sets the width of the control.                                                                                                                                  |\n| public void displayControl()                                                                                                                           | Displays the control.                                                                                                                                                   |\n| public void copy()                                                                                                                                     | Copies the contents of the control to the clipboard.                                                                                                                    |\n| public void paste()                                                                                                                                    | Pastes the contents of the clipboard into the control.                                                                                                                  |\n| public void setFocus()                                                                                                                                 | Sets the focus on the control.                                                                                                                                          |\n| public void cut()                                                                                                                                      | Cuts the contents of the control.                                                                                                                                       |\n| public void gotFocus()                                                                                                                                 | Indicates that the control has received focus.                                                                                                                          |\n| public void dragLeave()                                                                                                                                | Raises the dragLeave event to indicate that a mouse drag operation has left the current control.                                                                        |\n| public void lostFocus()                                                                                                                                | Indicates that the control has lost focus.                                                                                                                              |\n| public void inputSearch(str searchStr)                                                                                                                 | Performs data filtering for the control, based on the specified string.                                                                                                 |\n| public void setTemplateId(\\[str value\\])                                                                                                               |                                                                                                                                                                         |\n| public void prefColumnSize(int width, int height)                                                                                                      | Specifies the preferred column width and height for the form control.                                                                                                   |\n| public void update()                                                                                                                                   | Updates the control.                                                                                                                                                    |\n| public void run()                                                                                                                                      |                                                                                                                                                                         |\n| public void lock()                                                                                                                                     | Locks the form control.                                                                                                                                                 |\n| public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)                                                                          | Is called when the user moves the mouse pointer into the control area.                                                                                                  |\n| public void applyBuild()                                                                                                                               |                                                                                                                                                                         |\n| public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)                                                                              | Raises the drop event to indicate that a drop operation is being performed on the current control.                                                                      |\n| public void resetUserSetting()                                                                                                                         | Resets the user settings for the control.                                                                                                                               |\n| public void new(FormBuildControl build, xFormRun formRun)                                                                                              |                                                                                                                                                                         |\n| public void context()                                                                                                                                  | Shows the shortcut menu for the control.                                                                                                                                |\n| public void unLock(boolean update)                                                                                                                     | Unlocks a form control.                                                                                                                                                 |\n| public void setResourceBundleName(\\[str value\\])                                                                                                       |                                                                                                                                                                         |\n| public void selectedMenuOption(int selectedOption)                                                                                                     |                                                                                                                                                                         |\n| public void mouseLeave()                                                                                                                               | Indicates that the mouse pointer has left the control.                                                                                                                  |\n| public void onPropChanged(\\[str propName\\])                                                                                                            |                                                                                                                                                                         |\n| public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)                                                                                  | Raises the dropEx event to indicate that a drop operation is being performed on the current control.                                                                    |\n| public void initialize()                                                                                                                               |                                                                                                                                                                         |\n| public void endDrag()                                                                                                                                  | Is called when the user has finished dragging a form control.                                                                                                           |\n\n### Method alignControl\n\nDetermines whether the control should be aligned.\n\n    public boolean alignControl([boolean value])\n\n#### Parameters\n\nvalue  \nThe new value for the property; optional.\n\n#### Return Value\n\ntrue if the control should be aligned; otherwise, false.\n\n#### Remarks\n\nThe upper-left corner of the control is aligned based on the longest label.\n\n### Method allowEdit\n\nDetermines whether the user can modify the contents of the control.\n\n    public boolean allowEdit([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the allowEdit property.\n\n#### Return Value\n\ntrue if the control can be modified; otherwise, false.\n\n#### Remarks\n\nIf this property is set on a container control, modifications are disabled or enabled for all controls in the container.\n\n#### Examples\n\nThe following example shows how to return and set the value of the allowEdit property.\n\n    // Return the value. \n    info (strfmt(\"allowEdit: %1\", this.allowEdit())); \n    // Set the value. \n    this.allowEdit(false);\n\n### Method allowSysSetup\n\nRetrieves a value that indicates whether the control is shown in the SysSetup form.\n\n    public boolean allowSysSetup()\n\n#### Return Value\n\ntrue if the control is shown in the SysSetup form; otherwise, false.\n\n### Method autoDeclaration\n\nDetermines whether the system can declare a member variable that has the same name as the control.\n\n    public boolean autoDeclaration([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to set the property to, if a value is supplied.\n\n#### Return Value\n\ntrue if the member variable can be declared for this control; otherwise, false.\n\n#### Remarks\n\nControls cannot have identical names.\n\n### Method beginDrag\n\nIs called when the user starts to drag a form control.\n\n    public int beginDrag(int x, int y)\n\n#### Parameters\n\nx  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n<!-- -->\n\ny  \nAn integer value that indicates the y-coordinate of the mouse pointer. The coordinate is relative to the upper-left corner of the control.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n#### Examples\n\nThe following example displays the x-coordinates and y-coordinates in the Infolog when the user starts to drag the form control.\n\n    public int beginDrag(int _x, int _y) \n    { \n        int ret; \n        info(strfmt(\"beginDrag (x, y) : (%1, %2)\", _x, _y)); \n        ret = super(_x, _y); \n        return ret; \n    }\n\n### Method build\n\n    public FormBuildControl build()\n\n#### Return Value\n\n### Method calcControlSize\n\nRetrieves the size of the control.\n\n    public container calcControlSize(int chars, int lines)\n\n#### Parameters\n\nchars  \nThe number of lines to use to determine the height.\n\n<!-- -->\n\nlines  \nThe number of lines to use to determine the height.\n\n#### Return Value\n\nThe container that holds the width and height.\n\n### Method changeTracker\n\n    public FormChangeTracker changeTracker()\n\n#### Return Value\n\n### Method configurationKey\n\nGets or sets the configuration key that is assigned to the control.\n\n    public ConfigurationKeyId configurationKey([ConfigurationKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the configuration key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the configuration key that is assigned to the control.\n\n#### Remarks\n\nThe configuration key is used to determine whether this control can be displayed. If the configuration key is disabled in the system, the control is not displayed in the form.\n\n#### Examples\n\nThe following example shows how to set and retrieve the configuration key for a control.\n\n    DictConfigurationKey dck; \n    configurationKeyId cki; \n    // objCtrl previously assigned. \n    // Assign a configuration key to the control. \n    objCtrl.configurationKey(configurationkeynum(BankDeposit)); \n    // Retrieve the configuration key ID from the control. \n    cki = objCtrl.configurationKey(); \n    if (cki != 0) \n    { \n        dck = new DictConfigurationKey(cki); \n        if (dck) \n        { \n        print strfmt(\"Configuration Key ID: %1 Configuration Key Name: %2\", \n                      cki, \n                      dck.name()); \n        } \n    }\n\n### Method configurationKeyEx\n\nRetrieves a list that contains the IDs of configuration keys that are in effect for the control.\n\n    public List configurationKeyEx()\n\n#### Return Value\n\nA list that contains the IDs of configuration keys that are in effect for the control.\n\n#### Remarks\n\nThe returned list does not contain duplicate IDs. If the control is bound to a data source, the returned list of configuration key IDs also includes the configuration key ID for the table and field. The returned list also contains any configuration key IDs that are applied to the properties, extended data type, or enumType methods.\n\n#### Examples\n\nThe following example shows how to retrieve the configuration key IDs for a control.\n\n    DictConfigurationKey dck; \n    configurationKeyId cki; \n    List list; \n    ListEnumerator enum; \n    // objCtrl previously assigned. \n    list = objCtrl.configurationKeyEx(); \n    if (0 != list.elements()) \n    { \n        enum = list.getEnumerator(); \n        while (enum.moveNext()) \n        { \n           dck = new DictConfigurationKey(enum.current()); \n           if (dck) \n           { \n            print strfmt(\"Configuration Key ID: %1 Configuration Key Name: %2\", \n                         enum.current(), \n                         dck.name() ); \n           } \n        } \n    }\n\n### Method containerId\n\nRetrieves the ID of the parent container for the control.\n\n    public int containerId()\n\n#### Return Value\n\nThe ID of the parent container.\n\n### Method countryRegionCodes\n\nGets or sets the comma-separated list of country/region codes for the control.\n\n    public str countryRegionCodes([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the country/region codes to set; optional.\n\n#### Return Value\n\nThe comma-separated list of country/region codes for the control.\n\n### Method currentRow\n\n    public int currentRow()\n\n#### Return Value\n\n### Method dataRelationPath\n\nGets or sets the period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n    public str dataRelationPath([str value])\n\n#### Parameters\n\nvalue  \nThe string that contains the period-delimited list of relations; optional.\n\n#### Return Value\n\nThe period-delimited list of relations that links the field binding of the DataField object to a relative table.\n\n#### Remarks\n\nThis method is used by the reference group control to track exactly which relations produce the replacement field that is used. It enables the reference group control to bind consistently to the controls that it contains.\n\n### Method dataSourceObject\n\n    public FormDataSource dataSourceObject()\n\n#### Return Value\n\n### Method displayTarget\n\nGets or sets the value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal for Microsoft Dynamics AX, or in both.\n\n    public int displayTarget([int value])\n\n#### Parameters\n\nvalue  \nThe integer value that indicates where the control is displayed; optional.\n\n#### Return Value\n\nThe value that indicates whether the control is displayed in the Microsoft Dynamics AX client, in Enterprise Portal, or in both.\n\n### Method dragDrop\n\nDetermines whether drag-and-drop operations are enabled or disabled for the control.\n\n    public int dragDrop([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates whether drag-and-drop behavior is enabled; optional.\n\n#### Return Value\n\n1 if drag-and-drop operations are enabled; otherwise, false.\n\n#### Examples\n\nThe following example shows how to return or set the value that indicates whether drag-and-drop behavior is enabled.\n\n    boolean dDragDrop; \n    // The ctrl variable was previously assigned  \n    // as a FormControl value. \n    // Retrieve the drag-and-drop-enabled value. \n    dDragDrop = ctrl.dragDrop(); \n    // Set the drag–and–drop-enabled value. \n    ctrl.dragDrop(true);\n\n### Method dragOver\n\nRaises the dragOver event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOver(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragOverEx\n\nRaises the dragOverEx event to indicate that a mouse drag operation is over the current control.\n\n    public FormDrag dragOverEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n#### Return Value\n\nA FormDrag enumeration value that indicates the mode of dragging.\n\n### Method dragText\n\nRetrieves the text that is displayed when the form control is dragged.\n\n    public str dragText()\n\n#### Return Value\n\nThe text that is displayed when the control is dragged; an empty string if there is no text to display when the control is dragged.\n\n### Method editAutoPostback\n\n    public boolean editAutoPostback([boolean value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method enabled\n\nDetermines whether the object is enabled or disabled.\n\n    public boolean enabled([boolean value])\n\n#### Parameters\n\nvalue  \nA Boolean value that specifies whether the control is enabled; optional.\n\n#### Return Value\n\ntrue if the object is enabled; otherwise, false.\n\n#### Remarks\n\nThe enabled property lets you enable or disable controls at run time. For example, you can disable objects that do not apply to the current state of the application. You can also disable a control that is used only for display purposes, such as an error message that provides read-only information.\n\n#### Examples\n\nThe following example shows how to return and set the enabled property for a control.\n\n    // Return the value of the enabled property. \n    info(strfmt(\"enabled: %1\",this.enabled())); \n    // Set the enabled property. \n    this.enabled(false);\n\n### Method extendedStyle\n\n    public str extendedStyle([str value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method fieldBinding\n\nRetrieves the table and field bindings of the control into a FieldBinding derived class.\n\n    public FieldBinding fieldBinding()\n\n#### Return Value\n\nA FieldBinding derived class that contains the table and field bindings of the control.\n\n### Method formatStr\n\n    public str formatStr([int rowNumber], [boolean display], [int maxWidth], [boolean forceSignWhenDisplaceNegative], [boolean formatForExport])\n\n#### Parameters\n\nrowNumber  \n\n<!-- -->\n\ndisplay  \n\n<!-- -->\n\nmaxWidth  \n\n<!-- -->\n\nforceSignWhenDisplaceNegative  \n\n<!-- -->\n\nformatForExport  \n\n#### Return Value\n\n### Method formRun\n\n    public xFormRun formRun()\n\n#### Return Value\n\n### Method getBinding\n\n    public FormBinding getBinding(str propertyName)\n\n#### Parameters\n\npropertyName  \n\n#### Return Value\n\n### Method hasChanged\n\nSets or returns a value that indicates whether the contents of the control have changed.\n\n    public boolean hasChanged([boolean val])\n\n#### Parameters\n\nval  \nThe value to assign as the hasChanged value for the control; optional.\n\n#### Return Value\n\ntrue if the contents of the control have changed; otherwise, false.\n\n#### Examples\n\nThe following example shows how to return and set the value that indicates whether the contents of the control have changed.\n\n    boolean bHasChanged; \n    // The ctrl variable was previously assigned \n    // as a FormControl value. \n    // Retrieve the hasChanged value. \n    bHasChanged = ctrl.hasChanged(); \n    // Modify the hasChanged value. \n    ctrl.hasChanged(true);\n\n### Method hasUserSetting\n\nIndicates whether the control has custom user settings.\n\n    public boolean hasUserSetting()\n\n#### Return Value\n\ntrue if the control has custom user settings; otherwise, false.\n\n### Method height\n\nGets or sets the height of the control.\n\n    public int height(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the height is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates how the height is calculated; optional.\n\n#### Return Value\n\nThe height of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the height according to the following table.\n\n| Mode              | Height calculation                                                                         |\n|-------------------|--------------------------------------------------------------------------------------------|\n| -1 – Exact        | The exact height of the control in pixels is used.                                         |\n| 0 – Auto          | The height of the control is calculated automatically, and the value parameter is ignored. |\n| 1 – Column height | The layout of the form determines the height of the control.                               |\n\nThe height and height calculation mode can be set separately.\n\n### Method heightMode\n\nGets or sets a calculation mode for the height of the control.\n\n    public int heightMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the control height is calculated; optional.\n\n#### Return Value\n\nThe calculation mode.\n\n#### Remarks\n\nCalculate the height according to the following table.\n\n| Mode          | Height calculation                                                                         |\n|---------------|--------------------------------------------------------------------------------------------|\n| Exact         | The exact height of the control in pixels is used.                                         |\n| Auto          | The height of the control is calculated automatically, and the value parameter is ignored. |\n| Column height | The layout of the form determines the height of the control.                               |\n\nThe height of the control might change when the calculation mode is set to Auto or Column height.\n\n#### Examples\n\nThe following example shows how to return and set the height calculation mode for a form control.\n\n    int nHeightMode; \n    // The ctrl variable was previously assigned \n    // as a form control variable. \n    // Retrieve the height mode. \n    nHeightMode = ctrl.HeightMode(); \n    // Set the height mode. \n    ctrl.heightMode(-1); \n    // Set the height. \n    ctrl.heightValue(16);\n\n### Method heightValue\n\nGets or sets the height of the control.\n\n    public int heightValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the height in pixels; optional.\n\n#### Return Value\n\nThe height in pixels.\n\n#### Remarks\n\nThe height of the control is not changed unless the Exact height calculation mode is used.\n\n#### Examples\n\nThe following example shows how to return and set the height value of a form control.\n\n    int nHeightValue; \n    // The ctrl variable was previously assigned \n    // as a form control variable. \n    // Retrieve the height value. \n    nHeightValue = ctrl.heightValue(); \n    // Set the height value. \n    ctrl.heightMode(-1); \n    ctrl.heightValue(22);\n\n### Method helpField\n\nRetrieves the Help text for the control.\n\n    public str helpField()\n\n#### Return Value\n\nThe Help text for the control; an empty string if there is no Help text for the control.\n\n#### Remarks\n\nThe helpField method cannot be used to set the value of the Help text. Use the helpText method to set the value of the Help text.\n\n#### Examples\n\nThe following example shows how to use the helpField method.\n\n    str strHelp; \n    strHelp = this.helpField();\n\n### Method helpText\n\nGets or sets the Help text that is displayed at the bottom of the screen when a field or control is pointed to.\n\n    public str helpText([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign as the Help text for the control.\n\n#### Return Value\n\nThe string that should be displayed at the bottom of the screen.\n\n#### Remarks\n\nSet the HelpText property for an object by using the property sheet. The Help text must not exceed 250 characters.\n\n#### Examples\n\nThe following example shows how to set and return the Help text for a control.\n\n    // objCtrl previously assigned to a control \n    // Retrieve existing help text. \n    print objCtrl.helpText(); \n    // Specify new help text. \n    objCtrl.helpText(\"My new help text\");\n\n### Method hierarchyParent\n\nGets or sets the HierarchyParent property value of the control.\n\n    public str hierarchyParent([str value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the HierarchyParent property of the control.\n\n#### Return Value\n\nThe HierarchyParent property value of the control.\n\n### Method hWnd\n\nRetrieves the Windows handle for the control.\n\n    public int hWnd()\n\n#### Return Value\n\nThe handle for the control.\n\n#### Remarks\n\nThe handle can be used with the Windows API.\n\n#### Examples\n\nThe following example shows how to retrieve the Windows handle for a control.\n\n    int h; \n    h = this.hWnd(); \n    info (strfmt(\"hWnd: %1\", h));\n\n### Method id\n\nRetrieves the ID of the control.\n\n    public int id()\n\n#### Return Value\n\nThe ID of the control.\n\n### Method isDisplayed\n\nRetrieves a value that indicates whether the control is displayed.\n\n    public boolean isDisplayed()\n\n#### Return Value\n\ntrue if the control is displayed; otherwise, false.\n\n#### Remarks\n\nTo modify the visible state of the control, call the visible method.\n\n#### Examples\n\nThe following example shows how to determine whether a control is visible.\n\n    info(strfmt(\"isDisplayed: %1\", this.isDisplayed()));\n\n### Method isEditable\n\n    public boolean isEditable()\n\n#### Return Value\n\n### Method isEnabled\n\n    public boolean isEnabled()\n\n#### Return Value\n\n### Method isRestricted\n\nRetrieves a value that indicates whether the control is restricted.\n\n    public boolean isRestricted()\n\n#### Return Value\n\ntrue if the control is restricted; otherwise, false.\n\n### Method isUserSetupEnabled\n\nRetrieves a value that indicates whether the control allows for the specified level of customization.\n\n    public boolean isUserSetupEnabled(int neededSetupRights)\n\n#### Parameters\n\nneededSetupRights  \nA value from the FormAllowUserSetup enumeration that specifies the level of customization that is being queried for the control.\n\n#### Return Value\n\ntrue if the control, design, and parent containers allow for the level of customization that is specified by the neededSetupRights parameter; otherwise, false.\n\n#### Remarks\n\nThe following table describes the values for the neededSetupRights parameter.\n\n|                                  |                                                                                                                                  |\n|----------------------------------|----------------------------------------------------------------------------------------------------------------------------------|\n| FormAllowUserSetup::No 0         | No changes can be made to the control. If this value is set for the neededSetupRights parameter, the method always returns true. |\n| FormAllowUserSetup::Restricted 1 | The user can change the editable, visible, skip, label, and width properties of the control. The user cannot move the control.   |\n| FormAllowUserSetup::Yes 2        | The user can change the editable, visible, skip, label, and width properties of the control. The user can also move the control. |\n\nFor this method to return true, the AllowUserSetup property for the design and all parent containers must allow for the level of access that is specified by the neededSetupRights parameter.\n\n#### Examples\n\nThe following example shows how to determine the user setup rights for a control.\n\n    FormAllowUserSetup formAllowUserSetup = FormAllowUserSetup::No; \n    switch (true) \n    { \n        case this.isUserSetupEnabled(FormAllowUserSetup::Yes): \n            formAllowUserSetup = FormAllowUserSetup::Yes; \n            break; \n        case this.isUserSetupEnabled(FormAllowUserSetup::Restricted): \n            formAllowUserSetup = FormAllowUserSetup::Restricted; \n            break; \n        case this.isUserSetupEnabled(FormAllowUserSetup::No): \n           formAllowUserSetup = FormAllowUserSetup::No; \n            break; \n    } \n    info (strfmt(\"formAllowUserSetup: %1\", formAllowUserSetup));\n\n### Method isVisible\n\nRetrieves a value that indicates whether the control is visible.\n\n    public boolean isVisible()\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method isVisibleOnClient\n\n    public boolean isVisibleOnClient()\n\n#### Return Value\n\n### Method labelText\n\nRetrieves the label text for the control.\n\n    public str labelText()\n\n#### Return Value\n\nThe label text for the control; an empty string if there is no label text for the control.\n\n### Method left\n\nGets or sets the horizontal position of the control in the form.\n\n    public int left(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method leftMode\n\nSets the horizontal arrange mode for the control in the form.\n\n    public int leftMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal arrange mode for the control; optional.\n\n#### Return Value\n\nThe horizontal arrange mode for the control in the form.\n\n### Method leftValue\n\nGets or sets the horizontal position of the control in the form.\n\n    public int leftValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the horizontal position of the control; optional.\n\n#### Return Value\n\nThe horizontal position of the control in the form.\n\n### Method lockWindowUpdate\n\nLocks or unlocks the window of the control for update.\n\n    public boolean lockWindowUpdate(boolean lock)\n\n#### Parameters\n\nlock  \nA Boolean value: true to lock the window, and false to unlock the window.\n\n#### Return Value\n\ntrue if the operation was successful; otherwise, false.\n\n### Method markAsUserAdd\n\nMarks or unmarks the control as a user-added control.\n\n    public boolean markAsUserAdd([boolean value])\n\n#### Parameters\n\nvalue  \nThe Boolean value that indicates whether the control should be marked as a user-added control.\n\n#### Return Value\n\ntrue if the control was marked as a user-added control; otherwise, false.\n\n### Method mouseDblClick\n\nIs called when the control is double-clicked by the user.\n\n    public int mouseDblClick(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Examples\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. The following example shows how to display the parameters of a mouseDblClick event in the Infolog.\n\n    public int mouseDblClick(int x,  \n                             int y,  \n                             int button, \n                             boolean Ctrl, \n                             boolean Shift) \n    { \n        int ret; \n        if (Shift) \n        { \n            info(\"Shift set\"); \n        } \n        if (Ctrl) \n        { \n            info(\"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method mouseDown\n\nIs called when the user clicks the mouse button over the control.\n\n    public int mouseDown(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n#### Examples\n\nThe following example shows how to display the parameters of a mouseDown event in the Infolog.\n\n    public int mouseDown(int x,  \n                                  int y,  \n                                  int button, \n                                  boolean Ctrl, \n                                  boolean Shift) \n    { \n        int ret; \n        if (Shift) \n        { \n            info(\"Shift set\"); \n        } \n        if (Ctrl) \n        { \n            info(\"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method mouseMove\n\nIs called when the user moves the mouse pointer over the control.\n\n    public int mouseMove(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Examples\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. The following example shows how to display the parameters of a mouseMove event in the Infolog.\n\n    public int mouseMove(int x,  \n                         int y,  \n                         int button, \n                         boolean Ctrl, \n                         boolean Shift) \n    { \n        int ret; \n        if (Shift) \n        { \n            info(\"Shift set\"); \n        } \n        if (Ctrl) \n        { \n            info(\"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method mouseUp\n\nIs called when the user releases the mouse button over the control area.\n\n    public int mouseUp(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Return Value\n\n0 (zero) if the event has been handled.\n\n#### Remarks\n\nTypically, when this method is overridden, the return value from a call to the super method is returned. This event is called only if a value is specified for the label of the control and the ShowLabel property of the control is set to Yes.\n\n#### Examples\n\nThe following example shows how to display the parameters of a mouseUp event in the Infolog.\n\n    public int mouseUp(int x,  \n                       int y,  \n                       int button, \n                       boolean Ctrl, \n                       boolean Shift) \n    { \n        int ret; \n        if (Shift) \n        { \n            info(\"Shift set\"); \n        } \n        if (Ctrl) \n        { \n            info(\"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n        ret = super(x, y, button, Ctrl, Shift); \n        info (strfmt(\"ret: %1\", ret)); \n        return ret; \n    }\n\n### Method name\n\nGets or sets the name that is used in code to identify a form, report, table, query, or other Microsoft Dynamics AX application object.\n\n    public str name([str value])\n\n#### Parameters\n\nvalue  \nThe name to assign to the control; optional.\n\n#### Return Value\n\nThe name that is used in code to identify an application object.\n\n#### Remarks\n\nThe name property value of an object must meet the following criteria to avoid code conflicts:\n\n-   It must start with a letter.\n-   It cannot exceed 250 characters.\n-   It can include numbers and underscore (\\_) characters.\n-   It cannot include punctuation or spaces.\n-   Tables cannot have the same name as other public objects, such as extended data types, base enums, or classes.\n\n### Method neededPermission\n\n    public int neededPermission([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public container SysObsoleteAttribute()\n\n#### Return Value\n\n### Method parentControl\n\nRetrieves the parent control for the control.\n\n    public FormControl parentControl()\n\n#### Return Value\n\nThe parent control for the control.\n\n### Method resourceBundleName\n\n    public str resourceBundleName()\n\n#### Return Value\n\n### Method securityKey\n\nSets or returns the ID of the security key for the control.\n\n    public SecurityKeyId securityKey([SecurityKeyId value])\n\n#### Parameters\n\nvalue  \nThe ID of the security key to assign to the control; optional.\n\n#### Return Value\n\nThe ID of the security key for the control; 0 (zero) if no security key is assigned to the control.\n\n#### Examples\n\nThe following example shows how to retrieve and assign a security key ID for a control.\n\n    DictSecurityKey dsk; \n    securityKeyId ski; \n    // objCtrl previously assigned. \n    // Assign a security key ID to the control. \n    objCtrl.securityKey(securitykeynum(AdminDaily)); \n    // Retrieve the security key ID from the control. \n    ski = objCtrl.securityKey(); \n    if (ski != 0) \n    { \n        dsk = new DictSecurityKey(ski); \n        if (dsk) \n        { \n            print strfmt(\"Security Key ID: %1 Security Key Name: %2\", \n                         ski, \n                         dsk.name()); \n        } \n    }\n\n### Method showContextMenu\n\nShows the shortcut menu for the control.\n\n    public int showContextMenu(int menuHandle)\n\n#### Parameters\n\nmenuHandle  \nThe ID of the menu to show.\n\n#### Return Value\n\nAn integer value that indicates whether the call succeeded.\n\n### Method getContextMenuOptions\n\n    public str getContextMenuOptions()\n\n#### Return Value\n\n### Method skip\n\nSets or returns a value that indicates whether the control is skipped when the user presses the TAB key to move to the control.\n\n    public boolean skip([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the skip property of the control; optional.\n\n#### Return Value\n\ntrue if the control is skipped when the user presses the TAB key to move to the control; otherwise, false.\n\n#### Remarks\n\nIf the enabled property is true, the allowEdit property is false, and the skip property is true, the user cannot change the contents of the control but can still copy the contents of the control.\n\n#### Examples\n\nThe following code example shows how to return and set the skip property of a control.\n\n    // Return the value of the skip property. \n    info(strfmt(\"skip: %1\", this.skip())); \n    // Set the value of the skip property. \n    this.skip(true);\n\n### Method templateId\n\n    public str templateId()\n\n#### Return Value\n\n### Method toolTip\n\nRetrieves the tooltip text for the control.\n\n    public str toolTip()\n\n#### Return Value\n\nThe tooltip text for the control; an empty string if no tooltip text has been defined for the control.\n\n#### Remarks\n\nThe method might be overridden to provide a value to the toolTip method.\n\n#### Examples\n\nThe following example shows how to override the toolTip method.\n\n    str toolTip() \n    { \n        return \"Account numbers of customers eligible for discount\"; \n    }\n\n### Method top\n\nGets or sets the vertical position of the control in the form.\n\n    public int top(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method topMode\n\nSets the vertical arrange mode for the control in the form.\n\n    public int topMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical arrange mode for the control; optional.\n\n#### Return Value\n\nThe vertical arrange mode for the control in the form.\n\n### Method topValue\n\nGets or sets the vertical position of the control in the form.\n\n    public int topValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical position of the control; optional.\n\n#### Return Value\n\nThe vertical position of the control in the form.\n\n### Method type\n\n    public int type([int value])\n\n#### Parameters\n\nvalue  \n\n#### Return Value\n\n### Method SysObsoleteAttribute\n\n    public boolean SysObsoleteAttribute(container data)\n\n#### Parameters\n\ndata  \n\n#### Return Value\n\n### Method updateWindow\n\nUpdates the window for the control.\n\n    public int updateWindow()\n\n#### Return Value\n\n1 if the update was successful; otherwise, 0.\n\n### Method userData\n\nGets or sets the user data for the control.\n\n    public int userData([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data for the control; optional.\n\n#### Return Value\n\nThe user data for the control.\n\n### Method userDataItem\n\nGets or sets the user data item for the control.\n\n    public int userDataItem([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the user data item for the control; optional.\n\n#### Return Value\n\nThe user data item for the control.\n\n### Method userDataItems\n\nGets or sets the number of user data items for the control.\n\n    public int userDataItems([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the number of user data items for the control; optional.\n\n#### Return Value\n\nThe number of user data items for the control.\n\n### Method userDisable\n\nGets or sets the value that indicates whether the control is disabled for the user.\n\n    public int userDisable([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is disabled for the user; optional.\n\n#### Return Value\n\n1 if the control is disabled for the user; otherwise, 0.\n\n### Method userHeight\n\nGets or sets the custom user height for the control.\n\n    public int userHeight([int value])\n\n#### Parameters\n\nvalue  \nThe user height for the control; optional.\n\n#### Return Value\n\nThe custom user height for the control.\n\n### Method userHide\n\nGets or sets the value that indicates whether the control is hidden from the user.\n\n    public int userHide([int value])\n\n#### Parameters\n\nvalue  \nThe value that indicates whether the control is hidden from the user; optional.\n\n#### Return Value\n\n1 if the control is hidden from the user; otherwise, 0.\n\n#### Remarks\n\nThe user specifies whether a control is hidden by right-clicking the control when it is viewable or by right-clicking another control when the original control is hidden. A right-click opens a menu that can be used to hide or display the control. This method lets you programmatically determine and set the value.\n\n#### Examples\n\nThe following example shows how to return and set the value that indicates whether the control is hidden from the user.\n\n    int nUserHide; \n    // The ctrl variable was previously assigned  \n    // as a control variable. \n    // Retrieve the userHide value. \n    nUserHide = ctrl.userHide(); \n    // Set the userHide value. \n    ctrl.userHide(1);\n\n### Method userOrgContainer\n\nGets or sets the organization container for the control.\n\n    public int userOrgContainer([int value])\n\n#### Parameters\n\nvalue  \nThe organization container to set for the control; optional.\n\n#### Return Value\n\nThe organization container for the control.\n\n### Method userOrgSibling\n\nGets or sets the organization sibling for the control.\n\n    public int userOrgSibling([int value])\n\n#### Parameters\n\nvalue  \nThe organization sibling to set for the control; optional.\n\n#### Return Value\n\nThe organization sibling for the control.\n\n### Method userPromptText\n\nGets or sets the user label text for the control.\n\n    public str userPromptText([str value])\n\n#### Parameters\n\nvalue  \nThe user label text to set for the control; optional.\n\n#### Return Value\n\nThe user label text for the control.\n\n### Method userSecurityLevel\n\nGets or sets the user security level for the control.\n\n    public int userSecurityLevel([int value])\n\n#### Parameters\n\nvalue  \nThe user security level to set for the control; optional.\n\n#### Return Value\n\nThe user security level for the control.\n\n### Method userSkip\n\nSets or returns the value that indicates whether the form control is skipped when the user presses the TAB key to navigate the controls in the form.\n\n    public int userSkip([int value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the userSkip property; optional. The value is 1 if the user setting to skip the control is in effect; otherwise, the value is 0.\n\n#### Return Value\n\n1 if the user setting to skip the control is in effect; otherwise, 0.\n\n#### Examples\n\nThe following example shows how to return and set the userSkip property.\n\n    int nUserSkip \n    // The ctrl variable was previously assigned  \n    // as a FormControl value. \n    // Return the userSkip property. \n    nUserSkip = ctrl.userSkip(); \n    // Set the userSkip property. \n    ctrl.userSkip(1);\n\n### Method userWidth\n\nSets or returns the width of the control in pixels.\n\n    public int userWidth([int value])\n\n#### Parameters\n\nvalue  \nThe number of pixels to use as the width of the control; optional.\n\n#### Return Value\n\nThe number of pixels that the user specified as the width of the control; 0 (zero) if the user did not specify a character width.\n\n#### Remarks\n\nThe userWidth method returns the width in pixels, based on six times the number of characters. For example, if the user has specified 30 characters as the width for the control, the return value is 6 \\* 30 = 180. To specify the width of the control in characters, users can right-click the control to open the setup form where the character specification is made.\n\n#### Examples\n\nThe following example shows how to return and set the user width of a form control.\n\n    int nWidth; \n    // The ctrl variable was previously defined \n    // as a FormControl value. \n    // Return the width. \n    nWidth = ctrl.userWidth(); \n    // Specify the width. \n    ctrl.userWidth(90);  // 15 characters * 6 pixels == 90\n\n### Method valueStr\n\nRetrieves the value of the control in string format.\n\n    public str valueStr()\n\n#### Return Value\n\nThe value of the control in string format.\n\n#### Remarks\n\nThe valueStr method can be bound to the data source. The valueStr method should never be used in control validation methods. Instead, use the text method in control validation methods.\n\n### Method verticalSpacing\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacing([int value], [AutoMode mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the AutoMode for the control; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates the AutoMode for the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method verticalSpacingMode\n\nSets the vertical spacing mode for the control in the form.\n\n    public AutoMode verticalSpacingMode([AutoMode mode])\n\n#### Parameters\n\nmode  \n\n#### Return Value\n\nThe vertical spacing mode for the control in the form.\n\n### Method verticalSpacingValue\n\nGets or sets the vertical spacing of the control in the form.\n\n    public int verticalSpacingValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates the vertical spacing of the control; optional.\n\n#### Return Value\n\nThe vertical spacing of the control in the form.\n\n### Method visible\n\nSets or returns a value that indicates whether the control is visible.\n\n    public boolean visible([boolean value])\n\n#### Parameters\n\nvalue  \nThe value to assign to the visibility setting for the control; optional.\n\n#### Return Value\n\ntrue if the control is visible; otherwise, false.\n\n### Method width\n\nGets or sets the width of the control.\n\n    public int width(int value, [int mode])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the width is calculated; optional.\n\n<!-- -->\n\nmode  \nAn integer value that indicates how the width is calculated; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nExact mode is used if the value parameter is omitted. Calculate the width according to the following table.\n\n| Mode             | Width calculation                                                                         |\n|------------------|-------------------------------------------------------------------------------------------|\n| -1 – Exact       | The exact width of the control in pixels is used.                                         |\n| 0 – Auto         | The width of the control is calculated automatically, and the value parameter is ignored. |\n| 1 – Column width | The layout of the form determines the width of the control.                               |\n\nThe width and width calculation mode can be set separately.\n\n### Method widthMode\n\nGets or sets the calculation mode of the width of the control.\n\n    public int widthMode([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that indicates how the control width is calculated; optional.\n\n#### Return Value\n\nAn integer value that indicates the current calculation mode.\n\n#### Remarks\n\nCalculate the width according to the following table.\n\n| Mode         | Width calculation                                                                         |\n|--------------|-------------------------------------------------------------------------------------------|\n| Exact        | The exact width of the control in pixels is used.                                         |\n| Auto         | The width of the control is calculated automatically, and the value parameter is ignored. |\n| Column width | The layout of the form determines the width of the control.                               |\n\nThe width of the control might change when the calculation mode is set to Auto or Column width.\n\n#### Examples\n\nThe following example shows how to return and set the width calculation mode for a form control.\n\n    int nWidthMode; \n    // The ctrl variable was previously assigned \n    // as a form control variable. \n    // Retrieve the width mode. \n    nWidthMode = ctrl.widthMode (); \n    // Set the width mode. \n    ctrl.widthMode(-1); \n    // Set the width. \n    ctrl.widthValue(180);\n\n### Method widthValue\n\nGets or sets the width of the control.\n\n    public int widthValue([int value])\n\n#### Parameters\n\nvalue  \nAn integer value that specifies the width in pixels; optional.\n\n#### Return Value\n\nThe width of the control in pixels.\n\n#### Remarks\n\nTo change the width of the control, use the Exact width calculation mode.\n\n#### Examples\n\nThe following example shows how to return and set the width value of a form control.\n\n    int nWidthValue; \n    // The ctrl variable was previously assigned \n    // as a form control value. \n    // Retrieve the width value. \n    nWidthValue = ctrl.widthValue(); \n    // Set the width value. \n    ctrl.widthMode(-1); \n    ctrl.widthValue(160);\n\n### Method displayControl\n\nDisplays the control.\n\n    public void displayControl()\n\n### Method copy\n\nCopies the contents of the control to the clipboard.\n\n    public void copy()\n\n### Method paste\n\nPastes the contents of the clipboard into the control.\n\n    public void paste()\n\n### Method setFocus\n\nSets the focus on the control.\n\n    public void setFocus()\n\n### Method cut\n\nCuts the contents of the control.\n\n    public void cut()\n\n### Method gotFocus\n\nIndicates that the control has received focus.\n\n    public void gotFocus()\n\n### Method dragLeave\n\nRaises the dragLeave event to indicate that a mouse drag operation has left the current control.\n\n    public void dragLeave()\n\n### Method lostFocus\n\nIndicates that the control has lost focus.\n\n    public void lostFocus()\n\n### Method inputSearch\n\nPerforms data filtering for the control, based on the specified string.\n\n    public void inputSearch(str searchStr)\n\n#### Parameters\n\nsearchStr  \nThe string value to use to filter data; optional.\n\n### Method setTemplateId\n\n    public void setTemplateId([str value])\n\n#### Parameters\n\nvalue  \n\n### Method prefColumnSize\n\nSpecifies the preferred column width and height for the form control.\n\n    public void prefColumnSize(int width, int height)\n\n#### Parameters\n\nwidth  \nThe preferred height of the control.\n\n<!-- -->\n\nheight  \nThe preferred height of the control.\n\n#### Examples\n\nThe following example shows how to set the preferred width and height of a form control.\n\n    // nWidth and nHeight are previously assigned int variables. \n    // ctrl is a previously assigned FormControl variable. \n    ctrl.prefColumnSize( nWidth, nHeight);\n\n### Method update\n\nUpdates the control.\n\n    public void update()\n\n### Method run\n\n    public void run()\n\n### Method lock\n\nLocks the form control.\n\n    public void lock()\n\n#### Remarks\n\nUse the Lock command when you modify an object and are not sure whether another user is about to make updates. When you have saved your updates, use the Unlock command.\n\n### Method mouseEnter\n\nIs called when the user moves the mouse pointer into the control area.\n\n    public void mouseEnter(int x, int y, int button, boolean Ctrl, boolean Shift)\n\n#### Parameters\n\nx  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\ny  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nbutton  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nCtrl  \nA Boolean value that indicates whether the SHIFT key is down.\n\n<!-- -->\n\nShift  \nA Boolean value that indicates whether the SHIFT key is down.\n\n#### Examples\n\nThe following example shows how to display the parameters of a mouseEnter event in the Infolog.\n\n    public void mouseEnter(int x,  \n                          int y,  \n                          int button, \n                          boolean Ctrl, \n                          boolean Shift) \n    { \n        if (Shift) \n        { \n            info(\"Shift set\"); \n        } \n        if (Ctrl) \n        { \n            info(\"Ctrl set\"); \n        } \n        info (strfmt(\"x, y: %1 %2 button: %3\", x, y, button)); \n    }\n\n### Method applyBuild\n\n    public void applyBuild()\n\n### Method drop\n\nRaises the drop event to indicate that a drop operation is being performed on the current control.\n\n    public void drop(FormControl dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method resetUserSetting\n\nResets the user settings for the control.\n\n    public void resetUserSetting()\n\n### Method new\n\n    public void new(FormBuildControl build, xFormRun formRun)\n\n#### Parameters\n\nbuild  \n\n<!-- -->\n\nformRun  \n\n### Method context\n\nShows the shortcut menu for the control.\n\n    public void context()\n\n### Method unLock\n\nUnlocks a form control.\n\n    public void unLock(boolean update)\n\n#### Parameters\n\nupdate  \nA Boolean value that indicates whether to save the changes that are made to the control.\n\n### Method setResourceBundleName\n\n    public void setResourceBundleName([str value])\n\n#### Parameters\n\nvalue  \n\n### Method selectedMenuOption\n\n    public void selectedMenuOption(int selectedOption)\n\n#### Parameters\n\nselectedOption  \n\n### Method mouseLeave\n\nIndicates that the mouse pointer has left the control.\n\n    public void mouseLeave()\n\n### Method onPropChanged\n\n    public void onPropChanged([str propName])\n\n#### Parameters\n\npropName  \n\n### Method dropEx\n\nRaises the dropEx event to indicate that a drop operation is being performed on the current control.\n\n    public void dropEx(Array dragSource, FormDrag dragMode, int x, int y)\n\n#### Parameters\n\ndragSource  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ndragMode  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\nx  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n<!-- -->\n\ny  \nAn integer value that indicates the vertical client coordinate of the mouse position.\n\n### Method initialize\n\n    public void initialize()\n\n### Method endDrag\n\nIs called when the user has finished dragging a form control.\n\n    public void endDrag()\n\n#### Remarks\n\nThis event is not raised unless the DragDrop property is enabled for the control and a beginDrag event has already been started. To drag a control, a user presses the mouse button in the control area and then moves the mouse pointer.\n\n#### Examples\n\nThe following example displays a message in the Infolog when the user has finished dragging the form control.\n\n    public void endDrag() \n    {  \n        info(\"EndDrag completed\"); \n        super(); \n    }\n\n## Class FormControlCancelableSuperEventArgs\n    class FormControlCancelableSuperEventArgs extends FormControlEventArgs\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                        | Description |\n|-------------------------------|-------------|\n| public void CancelSuperCall() |             |\n| private void new()            |             |\n\n### Method CancelSuperCall\n\n    public void CancelSuperCall()\n\n### Method new\n\n    private void new()\n\n## Class FormControlCancelEventArgs\n    class FormControlCancelEventArgs extends FormControlEventArgs\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method                                      | Description |\n|---------------------------------------------|-------------|\n| ::public static boolean cancelled()         |             |\n| ::public static void cancel(boolean cancel) |             |\n| public void new(boolean cancel)             |             |\n\n### Method cancelled\n\n    public static boolean cancelled()\n\n#### Return Value\n\n### Method cancel\n\n    public static void cancel(boolean cancel)\n\n#### Parameters\n\ncancel  \n\n### Method new\n\n    public void new(boolean cancel)\n\n#### Parameters\n\ncancel  \n\n## Class FormControlEventArgs\n    class FormControlEventArgs\n\n### Remarks\n\n### Examples\n\n### Methods\n\n| Method | Description |\n|--------|-------------|\n\n\n\n"}