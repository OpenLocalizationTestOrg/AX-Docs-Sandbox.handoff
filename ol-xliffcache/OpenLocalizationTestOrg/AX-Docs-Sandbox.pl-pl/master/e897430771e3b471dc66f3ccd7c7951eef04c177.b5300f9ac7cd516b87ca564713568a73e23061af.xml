{"nodes":[{"pos":[32,67],"content":"Advanced filtering and query syntax","needQuote":true,"needEscape":true,"nodes":[{"content":"Advanced filtering and query syntax","pos":[0,35]}]},{"pos":[81,226],"content":"This article describes the filtering and query options that are available when you use the \"matches\" operator in the Advanced filter/sort dialog.","needQuote":true,"needEscape":true,"nodes":[{"content":"This article describes the filtering and query options that are available when you use the \"matches\" operator in the Advanced filter/sort dialog.","pos":[0,145]}]},{"pos":[755,790],"content":"Advanced filtering and query syntax","linkify":"Advanced filtering and query syntax","nodes":[{"content":"Advanced filtering and query syntax","pos":[0,35]}]},{"content":"This article describes the filtering and query options that are available when you use the \"matches\" operator in the Advanced filter/sort dialog.","pos":[792,937]},{"pos":[939,960],"content":"Advanced query syntax","linkify":"Advanced query syntax","nodes":[{"content":"Advanced query syntax","pos":[0,21]}]},{"content":"Syntax","pos":[1127,1133]},{"content":"Character description","pos":[1143,1164]},{"content":"Description","pos":[1174,1185]},{"content":"Example","pos":[1195,1202]},{"content":"<bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept>","pos":[1252,1266],"source":"<em>value</em>"},{"content":"Equal to the value that is entered","pos":[1276,1310]},{"content":"Type the value to find.","pos":[1320,1343]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Smith<ept id=\"p1\">&lt;/strong&gt;</ept> finds <ph id=\"ph1\">&amp;quot;</ph>Smith<ph id=\"ph2\">&amp;quot;</ph>.","pos":[1353,1400],"source":"<strong>Smith</strong> finds &quot;Smith&quot;."},{"content":"!<bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept> (exclamation point)","pos":[1434,1469],"source":"!<em>value</em> (exclamation point)"},{"content":"Not equal to the value that is entered","pos":[1479,1517]},{"content":"Type an exclamation point and then the value to exclude.","pos":[1527,1583]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>!Smith<ept id=\"p1\">&lt;/strong&gt;</ept> finds all values except <ph id=\"ph1\">&amp;quot;</ph>Smith<ph id=\"ph2\">&amp;quot;</ph>.","pos":[1593,1659],"source":"<strong>!Smith</strong> finds all values except &quot;Smith&quot;."},{"content":"<bpt id=\"p1\">&lt;em&gt;</bpt>from-value<ept id=\"p1\">&lt;/em&gt;</ept>..<bpt id=\"p2\">&lt;em&gt;</bpt>to-value<ept id=\"p2\">&lt;/em&gt;</ept> (double period)","pos":[1692,1746],"source":"<em>from-value</em>..<em>to-value</em> (double period)"},{"content":"Between the two values that are separated by double periods","pos":[1756,1815]},{"content":"Type the from-value, then two periods, and then the to-value.","pos":[1825,1886]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>1..10<ept id=\"p1\">&lt;/strong&gt;</ept> finds all values from 1 through 10.","pos":[1896,1954],"source":"<strong>1..10</strong> finds all values from 1 through 10."},{"content":"However, in a string field, <bpt id=\"p1\">&lt;strong&gt;</bpt>A..C<ept id=\"p1\">&lt;/strong&gt;</ept> finds all values that start with <ph id=\"ph1\">&amp;quot;</ph>A<ph id=\"ph2\">&amp;quot;</ph> and <ph id=\"ph3\">&amp;quot;</ph>B<ph id=\"ph4\">&amp;quot;</ph>, and values that are exactly equal to <ph id=\"ph5\">&amp;quot;</ph>C<ph id=\"ph6\">&amp;quot;</ph>. For example, this query won't find <ph id=\"ph7\">&amp;quot;</ph>Ca<ph id=\"ph8\">&amp;quot;</ph>.","pos":[1955,2173],"source":" However, in a string field, <strong>A..C</strong> finds all values that start with &quot;A&quot; and &quot;B&quot;, and values that are exactly equal to &quot;C&quot;. For example, this query won't find &quot;Ca&quot;."},{"content":"To find all values from <ph id=\"ph1\">&amp;quot;</ph>A<bpt id=\"p1\">*</bpt><ph id=\"ph2\">&amp;quot;</ph> through <ph id=\"ph3\">&amp;quot;</ph>C<ept id=\"p1\">*</ept><ph id=\"ph4\">&amp;quot;</ph>, type <bpt id=\"p2\">&lt;strong&gt;</bpt>A..D<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[2174,2264],"source":" To find all values from &quot;A*&quot; through &quot;C*&quot;, type <strong>A..D</strong>."},{"content":"..<bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept> (double period)","pos":[2298,2330],"source":"..<em>value</em> (double period)"},{"content":"Less than or equal to the value that is entered","pos":[2340,2387]},{"content":"Type two periods and then the value.","pos":[2397,2433]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>..1000<ept id=\"p1\">&lt;/strong&gt;</ept> finds any number that is less than or equal to 1000, such as <ph id=\"ph1\">&amp;quot;</ph>100<ph id=\"ph2\">&amp;quot;</ph>, <ph id=\"ph3\">&amp;quot;</ph>999.95<ph id=\"ph4\">&amp;quot;</ph>, and <ph id=\"ph5\">&amp;quot;</ph>1,000<ph id=\"ph6\">&amp;quot;</ph>.","pos":[2443,2587],"source":"<strong>..1000</strong> finds any number that is less than or equal to 1000, such as &quot;100&quot;, &quot;999.95&quot;, and &quot;1,000&quot;."},{"content":"<bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept>..","pos":[2620,2636],"source":"<em>value</em>.."},{"content":"(double period)","pos":[2637,2652]},{"content":"Greater than or equal to the value that is entered","pos":[2662,2712]},{"content":"Type the value and then two periods.","pos":[2722,2758]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>1000..<ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[2768,2791],"source":"<strong>1000..</strong>"},{"content":"finds any number that is greater than or equal to 1000, such as <ph id=\"ph1\">&amp;quot;</ph>1,000<ph id=\"ph2\">&amp;quot;</ph>, <ph id=\"ph3\">&amp;quot;</ph>1,000.01<ph id=\"ph4\">&amp;quot;</ph>, and <ph id=\"ph5\">&amp;quot;</ph>1,000,000<ph id=\"ph6\">&amp;quot;</ph>.","pos":[2792,2923],"source":" finds any number that is greater than or equal to 1000, such as &quot;1,000&quot;, &quot;1,000.01&quot;, and &quot;1,000,000&quot;."},{"content":"<ph id=\"ph1\">&amp;gt;</ph><bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept> (greater than sign)","pos":[2957,2995],"source":"&gt;<em>value</em> (greater than sign)"},{"content":"Greater than the value that is entered","pos":[3005,3043]},{"content":"Type a greater than sign (<bpt id=\"p1\">&lt;strong&gt;</bpt><ph id=\"ph1\">&amp;gt;</ph><ept id=\"p1\">&lt;/strong&gt;</ept>) and then the value.","pos":[3053,3121],"source":"Type a greater than sign (<strong>&gt;</strong>) and then the value."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt><ph id=\"ph1\">&amp;gt;</ph>1000<ept id=\"p1\">&lt;/strong&gt;</ept> finds any number that is greater than 1000, such as <ph id=\"ph2\">&amp;quot;</ph>1000.01<ph id=\"ph3\">&amp;quot;</ph>, <ph id=\"ph4\">&amp;quot;</ph>20,000<ph id=\"ph5\">&amp;quot;</ph>, and <ph id=\"ph6\">&amp;quot;</ph>1,000,000<ph id=\"ph7\">&amp;quot;</ph>.","pos":[3131,3276],"source":"<strong>&gt;1000</strong> finds any number that is greater than 1000, such as &quot;1000.01&quot;, &quot;20,000&quot;, and &quot;1,000,000&quot;."},{"content":"<ph id=\"ph1\">&amp;lt;</ph><bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept> (less than sign)","pos":[3309,3344],"source":"&lt;<em>value</em> (less than sign)"},{"content":"Less than the value that is entered","pos":[3354,3389]},{"content":"Type a less than sign (<bpt id=\"p1\">&lt;strong&gt;</bpt><ph id=\"ph1\">&amp;lt;</ph><ept id=\"p1\">&lt;/strong&gt;</ept>) and then the value.","pos":[3399,3464],"source":"Type a less than sign (<strong>&lt;</strong>) and then the value."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt><ph id=\"ph1\">&amp;lt;</ph>1000<ept id=\"p1\">&lt;/strong&gt;</ept> finds any number that is less than 1000, such as <ph id=\"ph2\">&amp;quot;</ph>999.99<ph id=\"ph3\">&amp;quot;</ph>, <ph id=\"ph4\">&amp;quot;</ph>1<ph id=\"ph5\">&amp;quot;</ph>, and <ph id=\"ph6\">&amp;quot;</ph>-200<ph id=\"ph7\">&amp;quot;</ph>.","pos":[3474,3605],"source":"<strong>&lt;1000</strong> finds any number that is less than 1000, such as &quot;999.99&quot;, &quot;1&quot;, and &quot;-200&quot;."},{"content":"<bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept><ph id=\"ph1\">*</ph> (asterisk)","pos":[3639,3665],"source":"<em>value</em>* (asterisk)"},{"content":"Starting from the value that is entered","pos":[3675,3714]},{"content":"Type the starting value and then an asterisk (<bpt id=\"p1\">&lt;strong&gt;</bpt><ept id=\"p1\">*&lt;/strong&gt;</ept>).","pos":[3724,3790],"source":"Type the starting value and then an asterisk (<strong>*</strong>)."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>S*<ept id=\"p1\">&lt;/strong&gt;</ept> finds any string that starts with <ph id=\"ph1\">&amp;quot;</ph>S<ph id=\"ph2\">&amp;quot;</ph>, such as <ph id=\"ph3\">&amp;quot;</ph>Stockholm<ph id=\"ph4\">&amp;quot;</ph>, <ph id=\"ph5\">&amp;quot;</ph>Sydney<ph id=\"ph6\">&amp;quot;</ph>, and <ph id=\"ph7\">&amp;quot;</ph>San Francisco<ph id=\"ph8\">&amp;quot;</ph>.","pos":[3800,3950],"source":"<strong>S*</strong> finds any string that starts with &quot;S&quot;, such as &quot;Stockholm&quot;, &quot;Sydney&quot;, and &quot;San Francisco&quot;."},{"content":"<bpt id=\"p1\">*&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept> (asterisk)","pos":[3983,4009],"source":"*<em>value</em> (asterisk)"},{"content":"Ending with the value that is entered","pos":[4019,4056]},{"content":"Type an asterisk and then the ending value.","pos":[4066,4109]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>*east<ept id=\"p1\">&lt;/strong&gt;</ept> finds any string that ends with <ph id=\"ph1\">&amp;quot;</ph>east<ph id=\"ph2\">&amp;quot;</ph>, such as <ph id=\"ph3\">&amp;quot;</ph>Northeast<ph id=\"ph4\">&amp;quot;</ph> and <ph id=\"ph5\">&amp;quot;</ph>Southeast<ph id=\"ph6\">&amp;quot;</ph>.","pos":[4119,4248],"source":"<strong>*east</strong> finds any string that ends with &quot;east&quot;, such as &quot;Northeast&quot; and &quot;Southeast&quot;."},{"content":"<bpt id=\"p1\">*&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept><ph id=\"ph1\">*</ph> (asterisk)","pos":[4282,4309],"source":"*<em>value</em>* (asterisk)"},{"content":"Containing the value that is entered","pos":[4319,4355]},{"content":"Type an asterisk, then a value, and then another asterisk.","pos":[4365,4423]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt><bpt id=\"p2\">*</bpt>th<ept id=\"p2\">*</ept><ept id=\"p1\">&lt;/strong&gt;</ept> finds any string that contains <ph id=\"ph1\">&amp;quot;</ph>th<ph id=\"ph2\">&amp;quot;</ph>, such as <ph id=\"ph3\">&amp;quot;</ph>Northeast<ph id=\"ph4\">&amp;quot;</ph> and <ph id=\"ph5\">&amp;quot;</ph>Southeast<ph id=\"ph6\">&amp;quot;</ph>.","pos":[4433,4558],"source":"<strong>*th*</strong> finds any string that contains &quot;th&quot;, such as &quot;Northeast&quot; and &quot;Southeast&quot;."},{"content":"?","pos":[4591,4592]},{"content":"(question mark)","pos":[4593,4608]},{"content":"Having one or more unknown characters","pos":[4618,4655]},{"content":"Type a question mark at the position of the unknown character in the value.","pos":[4665,4740]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Sm?th<ept id=\"p1\">&lt;/strong&gt;</ept> finds <ph id=\"ph1\">&amp;quot;</ph>Smith<ph id=\"ph2\">&amp;quot;</ph> and <ph id=\"ph3\">&amp;quot;</ph>Smyth<ph id=\"ph4\">&amp;quot;</ph>.","pos":[4750,4819],"source":"<strong>Sm?th</strong> finds &quot;Smith&quot; and &quot;Smyth&quot;."},{"content":"<bpt id=\"p1\">&lt;em&gt;</bpt>value<ept id=\"p1\">&lt;/em&gt;</ept>,<bpt id=\"p2\">&lt;em&gt;</bpt>value<ept id=\"p2\">&lt;/em&gt;</ept> (comma)","pos":[4853,4890],"source":"<em>value</em>,<em>value</em> (comma)"},{"content":"Matching the values that are separated by commas","pos":[4900,4948]},{"content":"Type all your criteria, and separate them by using commas.","pos":[4958,5016]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>A, D, F, G<ept id=\"p1\">&lt;/strong&gt;</ept> finds exactly <ph id=\"ph1\">&amp;quot;</ph>A<ph id=\"ph2\">&amp;quot;</ph>, <ph id=\"ph3\">&amp;quot;</ph>D<ph id=\"ph4\">&amp;quot;</ph>, <ph id=\"ph5\">&amp;quot;</ph>F<ph id=\"ph6\">&amp;quot;</ph>, and <ph id=\"ph7\">&amp;quot;</ph>G<ph id=\"ph8\">&amp;quot;</ph>. <bpt id=\"p2\">&lt;strong&gt;</bpt>10, 20, 30, 100<ept id=\"p2\">&lt;/strong&gt;</ept> finds exactly <ph id=\"ph9\">&amp;quot;</ph>10, 20, 30, 100<ph id=\"ph10\">&amp;quot;</ph>.","pos":[5026,5207],"source":"<strong>A, D, F, G</strong> finds exactly &quot;A&quot;, &quot;D&quot;, &quot;F&quot;, and &quot;G&quot;. <strong>10, 20, 30, 100</strong> finds exactly &quot;10, 20, 30, 100&quot;."},{"content":"(<bpt id=\"p1\">&lt;span class=\"code\"&gt;</bpt>SQL statement<ept id=\"p1\">&lt;/span&gt;</ept>) (SQL statement between parentheses)","pos":[5240,5317],"source":"(<span class=\"code\">SQL statement</span>) (SQL statement between parentheses)"},{"content":"Matching a defined query","pos":[5327,5351]},{"content":"Type a query as an SQL statement between parentheses.","pos":[5361,5414]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt><bpt id=\"p2\">&lt;span class=\"code\"&gt;</bpt>(data source.Fieldname != <ph id=\"ph1\">&amp;quot;</ph>A<ph id=\"ph2\">&amp;quot;</ph>)<ept id=\"p2\">&lt;/span&gt;</ept><ept id=\"p1\">&lt;/strong&gt;</ept>","pos":[5424,5507],"source":"<strong><span class=\"code\">(data source.Fieldname != &quot;A&quot;)</span></strong>"},{"content":"T","pos":[5541,5542]},{"content":"Today's date","pos":[5552,5564]},{"content":"Type <bpt id=\"p1\">&lt;strong&gt;</bpt>T<ept id=\"p1\">&lt;/strong&gt;</ept>.","pos":[5574,5598],"source":"Type <strong>T</strong>."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>T<ept id=\"p1\">&lt;/strong&gt;</ept> matches today's date.","pos":[5608,5648],"source":"<strong>T</strong> matches today's date."},{"content":"(methodName(parameters)) (<bpt id=\"p1\">&lt;strong&gt;</bpt>SysQueryRangeUtil<ept id=\"p1\">&lt;/strong&gt;</ept> method between parentheses)","pos":[5681,5769],"source":"(methodName(parameters)) (<strong>SysQueryRangeUtil</strong> method between parentheses)"},{"content":"Matching the value or range of values that are specified by the parameters of the <bpt id=\"p1\">&lt;strong&gt;</bpt>SysQueryRangeUtil<ept id=\"p1\">&lt;/strong&gt;</ept> method","pos":[5779,5902],"source":"Matching the value or range of values that are specified by the parameters of the <strong>SysQueryRangeUtil</strong> method"},{"content":"Type a <bpt id=\"p1\">&lt;strong&gt;</bpt>SysQueryRangeUtil<ept id=\"p1\">&lt;/strong&gt;</ept> method that has parameters that specify the value or range of values.","pos":[5912,6023],"source":"Type a <strong>SysQueryRangeUtil</strong> method that has parameters that specify the value or range of values."},{"content":"Click <bpt id=\"p1\">&lt;strong&gt;</bpt>Accounts receivable<ept id=\"p1\">&lt;/strong&gt;</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p2\">&lt;strong&gt;</bpt>Invoices<ept id=\"p2\">&lt;/strong&gt;</ept> <ph id=\"ph2\">&amp;gt;</ph> <bpt id=\"p3\">&lt;strong&gt;</bpt>Open customer invoices<ept id=\"p3\">&lt;/strong&gt;</ept>.","pos":[6042,6161],"source":"Click <strong>Accounts receivable</strong> &gt; <strong>Invoices</strong> &gt; <strong>Open customer invoices</strong>."},{"content":"Press Ctrl+Shift+F3 to open the <bpt id=\"p1\">&lt;strong&gt;</bpt>Inquiry<ept id=\"p1\">&lt;/strong&gt;</ept> page.","pos":[6171,6233],"source":"Press Ctrl+Shift+F3 to open the <strong>Inquiry</strong> page."},{"content":"On the <bpt id=\"p1\">&lt;strong&gt;</bpt>Range<ept id=\"p1\">&lt;/strong&gt;</ept> tab, click <bpt id=\"p2\">&lt;strong&gt;</bpt>Add<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[6243,6305],"source":"On the <strong>Range</strong> tab, click <strong>Add</strong>."},{"content":"In the <bpt id=\"p1\">&lt;strong&gt;</bpt>Table<ept id=\"p1\">&lt;/strong&gt;</ept> field, select <bpt id=\"p2\">&lt;strong&gt;</bpt>Open customer transactions<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[6315,6403],"source":"In the <strong>Table</strong> field, select <strong>Open customer transactions</strong>."},{"content":"In the <bpt id=\"p1\">&lt;strong&gt;</bpt>Field<ept id=\"p1\">&lt;/strong&gt;</ept> field, select <bpt id=\"p2\">&lt;strong&gt;</bpt>Due date<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[6413,6483],"source":"In the <strong>Field</strong> field, select <strong>Due date</strong>."},{"content":"In the <bpt id=\"p1\">&lt;strong&gt;</bpt>Criteria<ept id=\"p1\">&lt;/strong&gt;</ept> field, enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(yearRange(-2,0))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[6493,6574],"source":"In the <strong>Criteria</strong> field, enter <strong>(yearRange(-2,0))</strong>."},{"content":"Click <bpt id=\"p1\">&lt;strong&gt;</bpt>OK<ept id=\"p1\">&lt;/strong&gt;</ept>.","pos":[6584,6610],"source":"Click <strong>OK</strong>."},{"content":"The list page is updated and lists the invoices that match the criterion that you entered.","pos":[6611,6701]},{"content":"For this example, invoices that were due in the previous two years are listed.","pos":[6702,6780]},{"content":"See the table in the next section for additional details about <bpt id=\"p1\">&lt;strong&gt;</bpt>SysQueryRangeUtil<ept id=\"p1\">&lt;/strong&gt;</ept> date methods, and several examples.","pos":[6792,6925],"source":"\nSee the table in the next section for additional details about <strong>SysQueryRangeUtil</strong> date methods, and several examples."},{"pos":[6959,7015],"content":"Advanced date queries that use SysQueryRangeUtil methods","linkify":"Advanced date queries that use SysQueryRangeUtil methods","nodes":[{"content":"Advanced date queries that use SysQueryRangeUtil methods","pos":[0,56]}]},{"content":"Method","pos":[7139,7145]},{"content":"Description","pos":[7155,7166]},{"content":"Example","pos":[7176,7183]},{"content":"Day (_relativeDays=0)","pos":[7233,7254]},{"content":"Find a date relative to the session date.","pos":[7264,7305]},{"content":"Positive values indicate future dates, and negative values indicate past dates.","pos":[7306,7385]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Tomorrow<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(Day(1))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[7404,7464],"source":"<strong>Tomorrow</strong> – Enter <strong>(Day(1))</strong>."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Today<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(Day(0))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[7474,7531],"source":"<strong>Today</strong> – Enter <strong>(Day(0))</strong>."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Yesterday<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(Day(-1))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[7541,7603],"source":"<strong>Yesterday</strong> – Enter <strong>(Day(-1))</strong>."},{"content":"DayRange (_relativeDaysFrom=0, _relativeDaysTo=0)","pos":[7648,7697]},{"content":"Find a range of dates relative to the session date.","pos":[7707,7758]},{"content":"Positive values indicate future dates, and negative values indicate past dates.","pos":[7759,7838]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Last 30 days<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(DayRange(-30,0))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[7857,7930],"source":"<strong>Last 30 days</strong> – Enter <strong>(DayRange(-30,0))</strong>."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Previous 30 days and next 30 days<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(DayRange(-30,30))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[7940,8035],"source":"<strong>Previous 30 days and next 30 days</strong> – Enter <strong>(DayRange(-30,30))</strong>."},{"content":"GreaterThanDate (_relativeDays=0) GreaterThanUtcDate (_relativeDays=0)","pos":[8079,8149]},{"content":"Find all dates after the specified relative date.","pos":[8159,8208]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>More than 30 days from now<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(GreaterThanDate(30))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[8227,8318],"source":"<strong>More than 30 days from now</strong> – Enter <strong>(GreaterThanDate(30))</strong>."},{"content":"GreaterThanUtcNow ()","pos":[8363,8383]},{"content":"Find all date/time entries after the current time.","pos":[8393,8443]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>All future date/times<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(GreaterThanUtcNow())<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[8462,8548],"source":"<strong>All future date/times</strong> – Enter <strong>(GreaterThanUtcNow())</strong>."},{"content":"LessThanDate (_relativeDays=0) LessThanUtcDate (_relativeDays=0)","pos":[8592,8656]},{"content":"Find all dates before the specified relative date.","pos":[8666,8716]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Less than seven days from now<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(LessThanDate(7))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[8735,8825],"source":"<strong>Less than seven days from now</strong> – Enter <strong>(LessThanDate(7))</strong>."},{"content":"LessThanUtcNow ()","pos":[8870,8887]},{"content":"Find all date/time entries before the current time.","pos":[8897,8948]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>All past date/times<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(LessThanUtcNow())<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[8967,9048],"source":"<strong>All past date/times</strong> – Enter <strong>(LessThanUtcNow())</strong>."},{"content":"MonthRange (_relativeFrom=0, _relativeTo=0)","pos":[9092,9135]},{"content":"Find a range of dates, based on months relative to the current month.","pos":[9145,9214]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Previous two months<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(MonthRange(-2,0))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[9233,9314],"source":"<strong>Previous two months</strong> – Enter <strong>(MonthRange(-2,0))</strong>."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Next three months<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(MonthRange(0,3))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[9324,9402],"source":"<strong>Next three months</strong> – Enter <strong>(MonthRange(0,3))</strong>."},{"content":"YearRange (_relativeFrom=0, _relativeTo=0)","pos":[9447,9489]},{"content":"Find a range of dates, based on years relative to the current year.","pos":[9499,9566]},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Next year<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(YearRange(0, 1))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[9585,9655],"source":"<strong>Next year</strong> – Enter <strong>(YearRange(0, 1))</strong>."},{"content":"<bpt id=\"p1\">&lt;strong&gt;</bpt>Previous year<ept id=\"p1\">&lt;/strong&gt;</ept> – Enter <bpt id=\"p2\">&lt;strong&gt;</bpt>(YearRange(-1,0))<ept id=\"p2\">&lt;/strong&gt;</ept>.","pos":[9665,9739],"source":"<strong>Previous year</strong> – Enter <strong>(YearRange(-1,0))</strong>."}],"content":"---\n# required metadata\n\ntitle: Advanced filtering and query syntax\ndescription: This article describes the filtering and query options that are available when you use the \"matches\" operator in the Advanced filter/sort dialog.\nauthor: jasongre\nmanager: AnnBe\nms.date: 2015-09-11 13 - 41 - 48\nms.topic: article\nms.prod: \nms.service: Dynamics365Operations\nms.technology: \n\n# optional metadata\n\nms.search.form: SysQueryForm\n# ROBOTS: \naudience: Application User\n# ms.devlang: \n# ms.reviewer: 71\nms.search.scope: AX 7.0.0, Operations, Core\n# ms.tgt_pltfrm: \nms.custom: 3811\nms.assetid: 341a24eb-8859-4805-b2b6-0e7a355c464c\nms.search.region: Global\n# ms.search.industry: \nms.author: jasongre\nms.dyn365.ops.intro: Feb-16\nms.dyn365.ops.version: AX 7.0.0\n\n---\n\n# Advanced filtering and query syntax\n\nThis article describes the filtering and query options that are available when you use the \"matches\" operator in the Advanced filter/sort dialog.\n\nAdvanced query syntax\n---------------------\n\n<table>\n<colgroup>\n<col width=\"25%\" />\n<col width=\"25%\" />\n<col width=\"25%\" />\n<col width=\"25%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Syntax</th>\n<th>Character description</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><em>value</em></td>\n<td>Equal to the value that is entered</td>\n<td>Type the value to find.</td>\n<td><strong>Smith</strong> finds &quot;Smith&quot;.</td>\n</tr>\n<tr class=\"even\">\n<td>!<em>value</em> (exclamation point)</td>\n<td>Not equal to the value that is entered</td>\n<td>Type an exclamation point and then the value to exclude.</td>\n<td><strong>!Smith</strong> finds all values except &quot;Smith&quot;.</td>\n</tr>\n<tr class=\"odd\">\n<td><em>from-value</em>..<em>to-value</em> (double period)</td>\n<td>Between the two values that are separated by double periods</td>\n<td>Type the from-value, then two periods, and then the to-value.</td>\n<td><strong>1..10</strong> finds all values from 1 through 10. However, in a string field, <strong>A..C</strong> finds all values that start with &quot;A&quot; and &quot;B&quot;, and values that are exactly equal to &quot;C&quot;. For example, this query won't find &quot;Ca&quot;. To find all values from &quot;A*&quot; through &quot;C*&quot;, type <strong>A..D</strong>.</td>\n</tr>\n<tr class=\"even\">\n<td>..<em>value</em> (double period)</td>\n<td>Less than or equal to the value that is entered</td>\n<td>Type two periods and then the value.</td>\n<td><strong>..1000</strong> finds any number that is less than or equal to 1000, such as &quot;100&quot;, &quot;999.95&quot;, and &quot;1,000&quot;.</td>\n</tr>\n<tr class=\"odd\">\n<td><em>value</em>.. (double period)</td>\n<td>Greater than or equal to the value that is entered</td>\n<td>Type the value and then two periods.</td>\n<td><strong>1000..</strong> finds any number that is greater than or equal to 1000, such as &quot;1,000&quot;, &quot;1,000.01&quot;, and &quot;1,000,000&quot;.</td>\n</tr>\n<tr class=\"even\">\n<td>&gt;<em>value</em> (greater than sign)</td>\n<td>Greater than the value that is entered</td>\n<td>Type a greater than sign (<strong>&gt;</strong>) and then the value.</td>\n<td><strong>&gt;1000</strong> finds any number that is greater than 1000, such as &quot;1000.01&quot;, &quot;20,000&quot;, and &quot;1,000,000&quot;.</td>\n</tr>\n<tr class=\"odd\">\n<td>&lt;<em>value</em> (less than sign)</td>\n<td>Less than the value that is entered</td>\n<td>Type a less than sign (<strong>&lt;</strong>) and then the value.</td>\n<td><strong>&lt;1000</strong> finds any number that is less than 1000, such as &quot;999.99&quot;, &quot;1&quot;, and &quot;-200&quot;.</td>\n</tr>\n<tr class=\"even\">\n<td><em>value</em>* (asterisk)</td>\n<td>Starting from the value that is entered</td>\n<td>Type the starting value and then an asterisk (<strong>*</strong>).</td>\n<td><strong>S*</strong> finds any string that starts with &quot;S&quot;, such as &quot;Stockholm&quot;, &quot;Sydney&quot;, and &quot;San Francisco&quot;.</td>\n</tr>\n<tr class=\"odd\">\n<td>*<em>value</em> (asterisk)</td>\n<td>Ending with the value that is entered</td>\n<td>Type an asterisk and then the ending value.</td>\n<td><strong>*east</strong> finds any string that ends with &quot;east&quot;, such as &quot;Northeast&quot; and &quot;Southeast&quot;.</td>\n</tr>\n<tr class=\"even\">\n<td>*<em>value</em>* (asterisk)</td>\n<td>Containing the value that is entered</td>\n<td>Type an asterisk, then a value, and then another asterisk.</td>\n<td><strong>*th*</strong> finds any string that contains &quot;th&quot;, such as &quot;Northeast&quot; and &quot;Southeast&quot;.</td>\n</tr>\n<tr class=\"odd\">\n<td>? (question mark)</td>\n<td>Having one or more unknown characters</td>\n<td>Type a question mark at the position of the unknown character in the value.</td>\n<td><strong>Sm?th</strong> finds &quot;Smith&quot; and &quot;Smyth&quot;.</td>\n</tr>\n<tr class=\"even\">\n<td><em>value</em>,<em>value</em> (comma)</td>\n<td>Matching the values that are separated by commas</td>\n<td>Type all your criteria, and separate them by using commas.</td>\n<td><strong>A, D, F, G</strong> finds exactly &quot;A&quot;, &quot;D&quot;, &quot;F&quot;, and &quot;G&quot;. <strong>10, 20, 30, 100</strong> finds exactly &quot;10, 20, 30, 100&quot;.</td>\n</tr>\n<tr class=\"odd\">\n<td>(<span class=\"code\">SQL statement</span>) (SQL statement between parentheses)</td>\n<td>Matching a defined query</td>\n<td>Type a query as an SQL statement between parentheses.</td>\n<td><strong><span class=\"code\">(data source.Fieldname != &quot;A&quot;)</span></strong></td>\n</tr>\n<tr class=\"even\">\n<td>T</td>\n<td>Today's date</td>\n<td>Type <strong>T</strong>.</td>\n<td><strong>T</strong> matches today's date.</td>\n</tr>\n<tr class=\"odd\">\n<td>(methodName(parameters)) (<strong>SysQueryRangeUtil</strong> method between parentheses)</td>\n<td>Matching the value or range of values that are specified by the parameters of the <strong>SysQueryRangeUtil</strong> method</td>\n<td>Type a <strong>SysQueryRangeUtil</strong> method that has parameters that specify the value or range of values.</td>\n<td><ol>\n<li>Click <strong>Accounts receivable</strong> &gt; <strong>Invoices</strong> &gt; <strong>Open customer invoices</strong>.</li>\n<li>Press Ctrl+Shift+F3 to open the <strong>Inquiry</strong> page.</li>\n<li>On the <strong>Range</strong> tab, click <strong>Add</strong>.</li>\n<li>In the <strong>Table</strong> field, select <strong>Open customer transactions</strong>.</li>\n<li>In the <strong>Field</strong> field, select <strong>Due date</strong>.</li>\n<li>In the <strong>Criteria</strong> field, enter <strong>(yearRange(-2,0))</strong>.</li>\n<li>Click <strong>OK</strong>. The list page is updated and lists the invoices that match the criterion that you entered. For this example, invoices that were due in the previous two years are listed.</li>\n</ol>\nSee the table in the next section for additional details about <strong>SysQueryRangeUtil</strong> date methods, and several examples.</td>\n</tr>\n</tbody>\n</table>\n\n## Advanced date queries that use SysQueryRangeUtil methods\n<table>\n<colgroup>\n<col width=\"33%\" />\n<col width=\"33%\" />\n<col width=\"33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Method</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Day (_relativeDays=0)</td>\n<td>Find a date relative to the session date. Positive values indicate future dates, and negative values indicate past dates.</td>\n<td><ul>\n<li><strong>Tomorrow</strong> – Enter <strong>(Day(1))</strong>.</li>\n<li><strong>Today</strong> – Enter <strong>(Day(0))</strong>.</li>\n<li><strong>Yesterday</strong> – Enter <strong>(Day(-1))</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"even\">\n<td>DayRange (_relativeDaysFrom=0, _relativeDaysTo=0)</td>\n<td>Find a range of dates relative to the session date. Positive values indicate future dates, and negative values indicate past dates.</td>\n<td><ul>\n<li><strong>Last 30 days</strong> – Enter <strong>(DayRange(-30,0))</strong>.</li>\n<li><strong>Previous 30 days and next 30 days</strong> – Enter <strong>(DayRange(-30,30))</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"odd\">\n<td>GreaterThanDate (_relativeDays=0) GreaterThanUtcDate (_relativeDays=0)</td>\n<td>Find all dates after the specified relative date.</td>\n<td><ul>\n<li><strong>More than 30 days from now</strong> – Enter <strong>(GreaterThanDate(30))</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"even\">\n<td>GreaterThanUtcNow ()</td>\n<td>Find all date/time entries after the current time.</td>\n<td><ul>\n<li><strong>All future date/times</strong> – Enter <strong>(GreaterThanUtcNow())</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"odd\">\n<td>LessThanDate (_relativeDays=0) LessThanUtcDate (_relativeDays=0)</td>\n<td>Find all dates before the specified relative date.</td>\n<td><ul>\n<li><strong>Less than seven days from now</strong> – Enter <strong>(LessThanDate(7))</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"even\">\n<td>LessThanUtcNow ()</td>\n<td>Find all date/time entries before the current time.</td>\n<td><ul>\n<li><strong>All past date/times</strong> – Enter <strong>(LessThanUtcNow())</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"odd\">\n<td>MonthRange (_relativeFrom=0, _relativeTo=0)</td>\n<td>Find a range of dates, based on months relative to the current month.</td>\n<td><ul>\n<li><strong>Previous two months</strong> – Enter <strong>(MonthRange(-2,0))</strong>.</li>\n<li><strong>Next three months</strong> – Enter <strong>(MonthRange(0,3))</strong>.</li>\n</ul></td>\n</tr>\n<tr class=\"even\">\n<td>YearRange (_relativeFrom=0, _relativeTo=0)</td>\n<td>Find a range of dates, based on years relative to the current year.</td>\n<td><ul>\n<li><strong>Next year</strong> – Enter <strong>(YearRange(0, 1))</strong>.</li>\n<li><strong>Previous year</strong> – Enter <strong>(YearRange(-1,0))</strong>.</li>\n</ul></td>\n</tr>\n</tbody>\n</table>\n\n\n\n"}