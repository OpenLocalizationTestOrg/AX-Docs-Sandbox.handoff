<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87629d26b2c6e0fb99e78c359b7cb958232144ba</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dev-itpro\dev-reference\xpp-classes-methods.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">do-not-translate</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc34004d6c02407f57057bcc865c7a50705652f0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3be4d05e6e4e7c017f5de74abc87f426cf0ba4c3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>X++ classes and methods | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This topic describes how to create and use class and interfaces in X++.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>X++ classes and methods</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic describes how to create and use class and interfaces in X++.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Classes in X++</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>class<ept id="p1">**</ept> is a software construct that defines the data and methods of the objects that are subsequently constructed from that class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The objects constructed are called <bpt id="p1">**</bpt>instances<ept id="p1">**</ept> or <bpt id="p2">**</bpt>objects.<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>(Instance<ept id="p1">**</ept> and <bpt id="p2">**</bpt>object<ept id="p2">**</ept> are use interchangeably in this topic.) The data represents the state of the object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The methods represent the behavior of the object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Variables<ept id="p1">**</ept> contain the data for the class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Variables in a class are specific to objects that are constructed from that class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Every object constructed from the class declaration has its own copy of the variables.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Such variables are known as instance variables.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Methods<ept id="p1">**</ept> define the behavior of a class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>They are the sequences of statements that operate on the data.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Methods are typically declared to operate on the instance variables of the class, and are known as instance methods or object methods.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can also declare static methods and static fields.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Declaration of classes</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Creating a class in Visual Studio</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You create a class by following these steps:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Server Explorer<ept id="p1">**</ept>, right-click on the project, and select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Item<ept id="p1">**</ept> dialog, select <bpt id="p2">**</bpt>Class<ept id="p2">**</ept> and enter a name for the class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>All classes are <bpt id="p1">**</bpt>public<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you remove the <bpt id="p1">**</bpt>public<ept id="p1">**</ept> modifier, the system still treats the class as <bpt id="p2">**</bpt>public<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Other modifiers can be specified on the class declaration, including <bpt id="p1">**</bpt>final<ept id="p1">**</ept> and <bpt id="p2">**</bpt>extends<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Creating variables in a class</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>All classes are public, but all member variables are implicitly private.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Even though all member variables are private, you cannot decorate a member variable with the <bpt id="p1">**</bpt>private<ept id="p1">**</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>All member variables belong only to object instances of the class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following code shows you how you would use accessor methods to make the variable data public.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To create an instance of a class, you have to instantiate it by using a constructor.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The default constructor is the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> method:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It is a best practice to make the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> method protected, and instead, use a <bpt id="p2">**</bpt>static construct<ept id="p2">**</ept> method, or <bpt id="p3">**</bpt>static new<ept id="p3">**</ept> method as the public constructor for the class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If no initialization is required, use a <bpt id="p1">**</bpt>static construct<ept id="p1">**</ept> method, otherwise use a <bpt id="p2">**</bpt>static new<ept id="p2">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Creating other objects in a constructor</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A class constructor can instantiate other objects, in addition to creating an instance of the class.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following code illustrates one such situation by declaring a <bpt id="p1">**</bpt>Rectangle<ept id="p1">**</ept> class that uses two <bpt id="p2">**</bpt>Point<ept id="p2">**</ept> objects to define its bounds.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Destructors</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>destructor<ept id="p1">**</ept> is used to explicitly destroy a class object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Objects are destroyed automatically when there are no more references to them.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can destruct them explicitly in the following ways:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>finalize<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Set the object handle to <bpt id="p1">**</bpt>null<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>finalize method</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>finalize<ept id="p1">**</ept> method to explicitly destroy an object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>There are no implicit calls to the <bpt id="p1">**</bpt>finalize<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You must call it to execute the statements in it.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This code example shows the basic structure for calling the <bpt id="p1">**</bpt>finalize<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>finalize<ept id="p1">**</ept> method is also where to put any other clean-up code.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, if your class uses a DLL module, you can use the <bpt id="p1">**</bpt>finalize<ept id="p1">**</ept> method to release the DLL when you no longer need it.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>finalize<ept id="p1">**</ept> carefully.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It will destroy an object even if there are references to it.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Set an object handle to null</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Set the object handle to <bpt id="p1">**</bpt>null<ept id="p1">**</ept> to terminate an object.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This only destroys the object if there are no other object handles pointing to it.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You should check that other code isn't using the object handle.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This example creates an object handle and then sets it to <bpt id="p1">**</bpt>null.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Creating a subclass</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Subclasses are classes that extend or inherit from other classes.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A class can only extend one other class; multiple inheritance is not supported.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you extend a class, it inherits all the methods and variables in the parent class (the superclass).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Subclasses enable you to reuse existing code for a more specific purpose, saving time on design, development, and testing.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To customize the behavior of the superclass, override the methods in your subclass.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A superclass is often called a <bpt id="p1">**</bpt>base<ept id="p1">**</ept> class, and a subclass is often called a <bpt id="p2">**</bpt>derived<ept id="p2">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Subclass example</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following example creates a class called <bpt id="p1">**</bpt>Point<ept id="p1">**</ept> and extends it to create a new class called <bpt id="p2">**</bpt>ThreePoint<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Preventing class inheritance</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can prevent classes from being inherited by using the <bpt id="p1">**</bpt>final<ept id="p1">**</ept> modifier:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Methods</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following list describes the code block types that are standard for application classes:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>****classDescription<bpt id="p1">**</bpt> declaration block<ept id="p1">**</ept>: Contains class modifiers such as <bpt id="p2">**</bpt>public<ept id="p2">**</ept>, <bpt id="p3">**</bpt>private<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>extends<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Also contains the field members for objects that are constructed from this class.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>IntelliSense can display a list of the members when you type the keyword <bpt id="p1">**</bpt>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>****new<bpt id="p1">**</bpt> method<ept id="p1">**</ept>: Creates an instance of the class.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The constructor can be called only by using the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Derived classes can call the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> method of their constructor by calling <bpt id="p2">**</bpt>super<ept id="p2">**</ept> method reference.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>****finalize<bpt id="p1">**</bpt> method<ept id="p1">**</ept>: Finalizes an instance of the class.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The destructor method.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>However, this is a destructor only by convention.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>finalize<ept id="p1">**</ept> method is not called automatically by the system during garbage collection.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Additional methods for a class fall into the following types:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Instance methods</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Static methods</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Main methods</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Methods can be created on many kinds of items.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The list includes the following:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Maps</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Views</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Data Sets</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Forms</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Queries</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Instance methods</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Instance methods, or object methods, are embedded in each object that is created from the class.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You must instantiate the object before you can use the method.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If you later convert an instance method to a static method, you must restart the client for the compiler to note the change.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Once you have converted the instance method to a static method, you can no longer call this method from the instance of the class, only from the class itself.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Static methods are discussed in the next section.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Instance methods are called by using the following syntax:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Static methods</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Static methods, also called class methods, belong to a class and are created by using the keyword <bpt id="p1">**</bpt>static<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You do not need to instantiate an object before you use static methods.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Static methods are widely used to work with data that is stored in tables.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>It is not possible to use member variables in a static method.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Static methods are called by using the following syntax:</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Main methods</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>main<ept id="p1">**</ept> method is a class method that is executed directly from a menu option.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The method should only create an instance of the object and then call the necessary member methods.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">\_</ph>args<ept id="p1">**</ept> parameter allows you to transfer data to the method.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Declaration of methods</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Method declarations consist of a header and a body.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The method header declares the name and return type (possibly <bpt id="p1">**</bpt>void<ept id="p1">**</ept>) of the method, the method modifiers, and parameters.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The method body consists of variable declarations, method declarations, and statements.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Return type</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If a method does not return anything, you must specify this with the <bpt id="p1">**</bpt>void<ept id="p1">**</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The following example shows two methods, one with return type and one without.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Method declaration = <bpt id="p1">*</bpt>Heading<ept id="p1">*</ept>  <bpt id="p2">*</bpt>Body<ept id="p2">*</ept> Heading = <bpt id="p3">**</bpt><ph id="ph1">\[</ph><ept id="p3">**</ept> <bpt id="p4">*</bpt>Modifiers<ept id="p4">*</ept> <bpt id="p5">**</bpt><ph id="ph2">\]</ph><ept id="p5">**</ept>  <bpt id="p6">*</bpt>ReturnType<ept id="p6">*</ept>  <bpt id="p7">*</bpt>MethodName<ept id="p7">*</ept>  <bpt id="p8">**</bpt>(<ept id="p8">**</ept>  <bpt id="p9">*</bpt>ParameterList<ept id="p9">*</ept>  <bpt id="p10">**</bpt>)<ept id="p10">**</ept> Modifiers = <bpt id="p11">**</bpt><ph id="ph3">\[</ph>client<ph id="ph4">\]</ph> <ph id="ph5">\[</ph>server<ph id="ph6">\]</ph> <ph id="ph7">\[</ph>edit | display | public | protected | private<ph id="ph8">\]</ph> <ph id="ph9">\[</ph>static | abstract | final <ph id="ph10">\]</ph><ept id="p11">**</ept> ReturnType = <bpt id="p12">*</bpt>Datatype<ept id="p12">*</ept>  <bpt id="p13">**</bpt>| void | anytype<ept id="p13">**</ept> MethodName = <bpt id="p14">*</bpt>Identifier<ept id="p14">*</ept> ParameterList = <bpt id="p15">**</bpt><ph id="ph11">\[</ph><ept id="p15">**</ept> <bpt id="p16">*</bpt>Parameter<ept id="p16">*</ept>  <bpt id="p17">**</bpt>{ ,<ept id="p17">**</ept>  <bpt id="p18">*</bpt>Parameter<ept id="p18">*</ept>  <bpt id="p19">**</bpt>}<ph id="ph12">\]</ph><ept id="p19">**</ept> Parameter = <bpt id="p20">*</bpt>Datatype<ept id="p20">*</ept>  <bpt id="p21">*</bpt>Variableidentifier<ept id="p21">*</ept>  <bpt id="p22">**</bpt><ph id="ph13">\[</ph><ph id="ph14"> =</ph><ept id="p22">**</ept>  <bpt id="p23">*</bpt>Expression<ept id="p23">*</ept>  <bpt id="p24">**</bpt><ph id="ph15">\]</ph><ept id="p24">**</ept> Body = <bpt id="p25">**</bpt>{ <ph id="ph16">\[</ph><ept id="p25">**</ept>  <bpt id="p26">*</bpt>VariableDeclarations<ept id="p26">*</ept>  <bpt id="p27">**</bpt><ph id="ph17">\]</ph> <ph id="ph18">\[</ph><ept id="p27">**</ept>  <bpt id="p28">*</bpt>EmbeddedFunctionDeclarations<ept id="p28">*</ept>  <bpt id="p29">**</bpt><ph id="ph19">\]</ph> <ph id="ph20">\[</ph><ept id="p29">**</ept>  <bpt id="p30">*</bpt>Statements<ept id="p30">*</ept>  <bpt id="p31">**</bpt><ph id="ph21">\]</ph> }<ept id="p31">**</ept> EmbeddedFunctionDeclaration = <bpt id="p32">*</bpt>Heading<ept id="p32">*</ept>  <bpt id="p33">**</bpt>{<ph id="ph22">\[</ph><ept id="p33">**</ept>  <bpt id="p34">*</bpt>VariableDeclarations<ept id="p34">*</ept>  <bpt id="p35">**</bpt><ph id="ph23">\]</ph> <ph id="ph24">\[</ph><ept id="p35">**</ept>  <bpt id="p36">*</bpt>Statements<ept id="p36">*</ept>  <bpt id="p37">**</bpt><ph id="ph25">\]</ph>}<ept id="p37">**</ept> If you use the <bpt id="p38">**</bpt>anytype<ept id="p38">**</ept> return type, the method can return any data type.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Code example: method without a return type</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Code example: method with parameters</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>In the following code example, the <bpt id="p1">**</bpt>checkAccountBlocked<ept id="p1">**</ept> method returns a <bpt id="p2">**</bpt>Boolean<ept id="p2">**</ept> value and acts on the parameter <bpt id="p3">**</bpt>amountCur<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Method modifiers</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>There are several modifiers that can be applied to method declarations.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Some of the modifiers can be combined (for example, <bpt id="p1">**</bpt>final static<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following list describes method modifier keywords:</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>abstract<ept id="p1">**</ept>: The method is declared but not implemented in a parent class.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The method must be overridden in subclasses.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If you try to create an object from a subclass where one or more of the abstract methods belonging to the parent class have not been overridden, you will get a compiler error.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Classes can also be abstract.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Sometimes a class represents an abstract concept, but it should not be instantiated: Only subclasses should be instantiated.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Such base classes can be declared abstract.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Consider the case where you want to model the concept of an account.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Accounts are abstract, because only derived classes (ledger accounts and so on) exist in the real world.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This would be a clear case for declaring the <bpt id="p1">**</bpt>Account<ept id="p1">**</ept> class abstract.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>display<ept id="p1">**</ept>: Indicates that the method's return value is to be displayed on a form or a report.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The value cannot be altered in the form or report.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The return value is typically a calculated value, for example, a sum.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>edit<ept id="p1">**</ept>: Indicates that the method's return type is to be used to provide information for a field that is used in a form.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The value in the field can be edited.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>final<ept id="p1">**</ept>: Indicates that the method cannot be overridden in any class that derives from its class.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>public<ept id="p1">**</ept>: Methods that are declared as <bpt id="p2">**</bpt>public<ept id="p2">**</ept> are accessible anywhere the class is accessible and can be overridden by subclasses.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Methods that have no access modifier are implicitly <bpt id="p1">**</bpt>public<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>protected<ept id="p1">**</ept>: Methods that are declared as <bpt id="p2">**</bpt>protected<ept id="p2">**</ept> can only be called from methods in the class and in subclasses that extend the class where the method is declared.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>private<ept id="p1">**</ept>: Methods that are declared as <bpt id="p2">**</bpt>private<ept id="p2">**</ept> can be called only from methods in the class where the private method is declared.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>static<ept id="p1">**</ept>: Specifies that the method is a class method and does not operate on an instance.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>static<ept id="p1">**</ept> methods cannot refer to instance variables and are invoked by using the class name rather than on an instance of the class (<bpt id="p2">**</bpt>MyClass::aStaticProcedure()<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Methods with modifiers</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Only the method headers are shown in the following examples.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Static class members</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>You declare static class members by using the <bpt id="p1">**</bpt>static<ept id="p1">**</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>static<ept id="p1">**</ept> keyword instructs the system to create only one instance of the method regardless of how many times you call new.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>This single instance is used throughout your session.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Static methods are generally intended for cases where the following criteria are met:</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The method has no reason to access the member variables that are declared in the class.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The method has no reason to call any instance (non-static) methods of the class.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Static methods</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Consider the example of a software key type that is used for piracy prevention.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Each instance of a software key can have its own unique value.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>But all software keys must conform to the rules of software key design.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Therefore the logic to test for software key conformance is the same for all software keys.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The method that contains the conformance validation logic should be static.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Here is an example of a method that is declared with the <bpt id="p1">**</bpt>static<ept id="p1">**</ept> keyword:</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>In the following example, there is no need to first construct an instance of the <bpt id="p1">**</bpt>SoftwareKey<ept id="p1">**</ept> class before you call a static method on the class.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>To call the static method <bpt id="p1">**</bpt>validateSoftwareKey<ept id="p1">**</ept>, the syntax starts with the name of the class that contains the method.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>A pair of colon (<bpt id="p1">**</bpt>::<ept id="p1">**</ept>) characters is used to connect the class name to the static method name.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Static fields</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Static fields are fields that are declared using the static keyword.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Conceptually they apply to the class, not instances of the class.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Static constructors</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Static constructors are guaranteed to run before any static or instance calls are made to the class.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>In C<ph id="ph1">\#</ph>, the concept of static relates to the whole executing application domain.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>In X++, the execution of the static constructor is relative to the user’s session.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The static constructor has the following syntax:</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You never call the static constructor explicitly; the compiler will generate code to ensure that the constructor is called exactly once prior to any other method on the class.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>A static constructor is used to initialize any static data, or to perform a particular action that needs to be performed only once.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>No parameters can be provided for the static constructor, and it must be marked as static.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a singleton instance by using a static constructor.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The singleton will guarantee that only one instance of the class will ever be called.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The following code example shows how to instantiate the singleton.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Method access control</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>You use the accessor keywords <bpt id="p1">**</bpt>public<ept id="p1">**</ept>, <bpt id="p2">**</bpt>protected<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>private<ept id="p3">**</ept> to control whether the methods in other classes can call the methods on your class.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The accessor keywords on methods also interact with the rules for class inheritance.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The following list describes the accessor keywords you use with methods.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>public<ept id="p1">**</ept>: Methods that are declared as <bpt id="p2">**</bpt>public<ept id="p2">**</ept> can be called from anywhere the class is accessible.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>In addition, a public method can be overridden by a subclass, unless the method is declared as <bpt id="p1">**</bpt>final<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>protected<ept id="p1">**</ept>: Methods that are declared as <bpt id="p2">**</bpt>protected<ept id="p2">**</ept> can be called only from the following:</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>From methods in the class.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>From methods in a subclass of the class that contains the protected method.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Methods that are <bpt id="p1">**</bpt>protected<ept id="p1">**</ept> can be overridden in subclasses.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>private<ept id="p1">**</ept>: Methods that are declared as <bpt id="p2">**</bpt>private<ept id="p2">**</ept> can be called only from methods in the class where the private method is declared.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>No private method can be overridden in a subclass.When you create a new method, the default accessor keyword that appears in the code editor is <bpt id="p1">**</bpt>private<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>This is the most conservative default for maximum security.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Static and instance methods</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The accessor keywords on methods never restrict call between two methods that are in the same class.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This is true regardless of which of the two methods are <bpt id="p1">**</bpt>static<ept id="p1">**</ept> or non-static.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>In a static method, calls to the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> constructor method are valid even if the <bpt id="p2">**</bpt>new<ept id="p2">**</ept> constructor method is decorated with the <bpt id="p3">**</bpt>private<ept id="p3">**</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The syntax for these calls requires the use of the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The code in a static method must construct an instance object of its own class before the code can call any instance methods on the class.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Increase access when overriding</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>When a method is overridden in a subclass, the overriding method must be at least as accessible as the overridden method.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For example, the following compiler rules apply to overriding a <bpt id="p1">**</bpt>protected<ept id="p1">**</ept> method in a subclass:</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>public<ept id="p1">**</ept> method in a superclass can be overridden only by a <bpt id="p2">**</bpt>public<ept id="p2">**</ept> method in the subclass.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>In a subclass, a <bpt id="p1">**</bpt>public<ept id="p1">**</ept> method or a <bpt id="p2">**</bpt>protected<ept id="p2">**</ept> method can override a <bpt id="p3">**</bpt>protected<ept id="p3">**</ept> method of the superclass.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>In a subclass, a <bpt id="p1">**</bpt>private<ept id="p1">**</ept> method cannot override a <bpt id="p2">**</bpt>protected<ept id="p2">**</ept> method of the superclass.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Optional parameters</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>It is possible to initialize parameters in the method declaration.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>This makes the parameter an optional parameter.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>If no value is supplied in the method call, the default value is used.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>All required parameters must be listed before the first optional parameter.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The following code examples show how to create and call a method with optional parameters.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>AddThreeInts<ept id="p1">**</ept> method shows that you cannot skip over default parameters when calling the method.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Optional parameters code examples</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Accessor methods</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Class variables are private.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>By hiding details of the internal implementation of a class, you can change the implementation of the class in the future without breaking any code that uses that class.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>To access the data from reference variables, you need to create accessor methods.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The following example defines a <bpt id="p1">**</bpt>Point<ept id="p1">**</ept> class that uses accessor methods to access the variables <bpt id="p2">**</bpt>x<ept id="p2">**</ept> and <bpt id="p3">**</bpt>y<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>These method declarations illustrate how the <bpt id="p1">**</bpt>Point<ept id="p1">**</ept> class provides access to its variables from the outside world.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Other objects can manipulate the instance variables of <bpt id="p1">**</bpt>Point<ept id="p1">**</ept> objects by using the accessor methods:</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The callstack depth is limited to 100.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Overriding a method</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The methods in a class are inherited by any class that extends it.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>You can alter the functionality of an inherited method by creating a method in the subclass with the same name and parameters as in the superclass.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>This is called overriding the method.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>In the following code example, <bpt id="p1">**</bpt>ColorAttribute<ept id="p1">**</ept> is a subclass of <bpt id="p2">**</bpt>Attribute<ept id="p2">**</ept> and therefore inherits the method <bpt id="p3">**</bpt>methodAttr<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>However, because <bpt id="p1">**</bpt>ColorAttribute<ept id="p1">**</ept> defines a method with the same name and the same number of arguments, the method in the superclass is overridden.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Prevent method overriding</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Static methods cannot be overridden because they exist per class.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>To protect other sensitive methods, or core methods, from being overridden, use the <bpt id="p1">**</bpt>final<ept id="p1">**</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>In the example below, <bpt id="p1">**</bpt>methodAtt<ept id="p1">**</ept> is declared as <bpt id="p2">**</bpt>final<ept id="p2">**</ept>, and so it cannot be overridden in any class that extends <bpt id="p3">**</bpt>Attribute<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>You should not specify <bpt id="p1">**</bpt>new<ept id="p1">**</ept> or <bpt id="p2">**</bpt>finalize<ept id="p2">**</ept> methods as <bpt id="p3">**</bpt>final<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the <bpt id="p1">**</bpt>final<ept id="p1">**</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Overriding vs. overloading</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Overloading is where there is more than one method with the same name, but the methods have different signatures (return type or parameter lists or both).</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Overriding is where the superclass's implementation of a method is altered by the subclass's implementation of the method, but the signatures of both methods are the same.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>X++ supports overriding, but it does not support overloading.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>All methods have their own scope.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>A method can take one or more parameters.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Within the scope of the method, these parameters are treated like local variables and are initialized with the value from the parameter in the method-call.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The following table shows an example.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>All parameters are passed by value.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>You cannot change the value of the original variable, you can change only the local variable in the method, which is a copy of the original.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Scope of variables in methods</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A scope defines the area in which an item can be accessed.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Variables defined in a class are available to the methods within that class.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Variables in methods can be accessed only within the current block, as shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Local functions</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>You can declare local functions inside a method.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The best practice is to add private methods to the class rather than to add local functions inside the method.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The following code example shows valid declarations of two local functions named <bpt id="p1">**</bpt>localFunc55b<ept id="p1">**</ept> and <bpt id="p2">**</bpt>localFunc66c<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>This calls to the local functions occur after the function declarations in the code example, as is required.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Declaration of local functions</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The local functions must be declared physically above any non-declaration statements that exist in the method.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>You can declare more than one local function in your method.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>But all local functions must be declared in an uninterrupted series, with the set terminated by one semicolon.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Variable scope</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Code that is inside the local function can access variables that are declared in the method that contains the local function.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Code that is outside the local function cannot access variables that are declared in the local function.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Calls to local functions</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>A local function can be called only by code in the same method where the local function is declared.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>A local function should never call itself.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Such recursion can prevent the successful compilation.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>this keyword</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The keyword <bpt id="p1">**</bpt>this<ept id="p1">**</ept> is a reference to the instance of the class or table in which the <bpt id="p2">**</bpt>this<ept id="p2">**</ept> keyword is used.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>this<ept id="p1">**</ept> reference is never required, but it can clarify your code, and it enhances the behavior of IntelliSense in the code editor.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>All calls to instance methods must be qualified, either with the <bpt id="p1">**</bpt>this<ept id="p1">**</ept> reference or with a variable.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>this<ept id="p1">**</ept> reference can be used in the following ways:</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Can be used to qualify the names of other instance (non-<bpt id="p1">**</bpt>static<ept id="p1">**</ept>) methods in the same class where the <bpt id="p2">**</bpt>this<ept id="p2">**</ept> reference is used.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>For example: <bpt id="p1">**</bpt>boolColorChanged = this.colorItOrange();<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Can be used to quality the names of methods that are inherited by the <bpt id="p1">**</bpt>this<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Can be used to qualify the names of fields on the table that contains the method that the <bpt id="p1">**</bpt>this<ept id="p1">**</ept> keyword is used in.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>this<ept id="p1">**</ept> reference cannot be used in the following ways:</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Cannot be used to qualify the names of member variables that are declared in the <bpt id="p1">**</bpt>classDeclaration<ept id="p1">**</ept> code.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Cannot be used in a <bpt id="p1">**</bpt>static<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Cannot be used to qualify the names of <bpt id="p1">**</bpt>static<ept id="p1">**</ept> methods of the class or table.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>An interface is a specification for a set of public instance methods.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>An interfaces defines and enforces similarities between unrelated classes without having to derive one class from the other.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>All interfaces are public regardless of whether you explicitly write the keyword <bpt id="p1">**</bpt>public<ept id="p1">**</ept> in front of the keyword <bpt id="p2">**</bpt>interface<ept id="p2">**</ept> in the <bpt id="p3">**</bpt>classDeclaration<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The methods on an interface are also public, and again the explicit inclusion of the keyword <bpt id="p1">**</bpt>public<ept id="p1">**</ept> is optional.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>To create an interface:</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Server Explorer<ept id="p1">**</ept>, right-click on the project, and select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Item<ept id="p1">**</ept> dialog, select <bpt id="p2">**</bpt>Interface<ept id="p2">**</ept> and enter a name for the interface.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>When you add the <bpt id="p1">**</bpt>implements<ept id="p1">**</ept> keyword on a class declaration, the class must declare the methods that are specified by the interface.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>A class declaration can implement multiple interfaces by listing them after the single occurrence of the <bpt id="p1">**</bpt>implements<ept id="p1">**</ept> keyword, with commas separating the interface names.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>All interface methods that a class implements must be declared with the explicit keyword <bpt id="p1">**</bpt>public<ept id="p1">**</ept> in the class.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Also, a class that implements an interface must also be declared with <bpt id="p1">**</bpt>public<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>An interface can extend another interface by using the <bpt id="p1">**</bpt>extends<ept id="p1">**</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>An interface cannot extend more than one interface.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Interface code example</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>This section shows the code for an <bpt id="p1">**</bpt>Automobile<ept id="p1">**</ept> class that implements an <bpt id="p2">**</bpt>IDrivable<ept id="p2">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The keyword <bpt id="p1">**</bpt>is<ept id="p1">**</ept> is supported for testing whether a class that implements an interface.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Class library overview</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>There are two kinds of classes:</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Application classes are implemented in X++.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>They are available in the Classes node in the Application Explorer.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>System classes, sometimes called kernel classes, are implemented in C++.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>They are listed under the <bpt id="p1">**</bpt>System Documentation <ph id="ph1">&amp;gt;</ph> Classes<ept id="p1">**</ept> node in the Application Explorer.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>However, the source code for these classes is not available.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>For a list of these classes, see <bpt id="p1">[</bpt>API, class, and table reference<ept id="p1">](https://docs.microsoft.com/en-us/dynamics365/operations/dev-itpro/dev-reference/dynamics-ax-api-reference)</ept>.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Substitute application classes for system classes</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>You should call the substitute application classes instead of calling the system classes that they extend.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Application Explorer <ept id="p1">**</ept>under <bpt id="p2">**</bpt>System Documentation <ph id="ph1">&amp;gt;</ph> Classes<ept id="p2">**</ept> there are several kernel or system classes whose names begin with a lowercase <bpt id="p3">**</bpt>x,<ept id="p3">**</ept> and they are called x-system classes.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Examples of the these system classes are <bpt id="p1">**</bpt>xApplication<ept id="p1">**</ept> and <bpt id="p2">**</bpt>xVersionControl.<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Some of the these classes are extended by application classes.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">**</bpt>Application<ept id="p1">**</ept> class extends the <bpt id="p2">**</bpt>xApplication<ept id="p2">**</ept> system class.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The classes that derive from x-system classes are called <bpt id="p1">**</bpt>substitute application classes<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Application Explorer <ept id="p1">**</ept>under the <bpt id="p2">**</bpt>Classes<ept id="p2">**</ept> node, the icon next to the substitute application classes differs from the standard icon.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>x-system classes</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Some of the substitute application classes are associated with a special global variable that represents an instance of the class.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">**</bpt>appl<ept id="p1">**</ept> variable references a pre-instantiated object from the <bpt id="p2">**</bpt>Application<ept id="p2">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The advantage of the <bpt id="p1">**</bpt>appl<ept id="p1">**</ept> variable is that the system maintains the object throughout the scope of your session.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>It would be less efficient for your code to repeatedly use the <bpt id="p1">**</bpt>new Application()<ept id="p1">**</ept> syntax to obtain an instance of the <bpt id="p2">**</bpt>Application<ept id="p2">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>You should not use the <bpt id="p1">**</bpt>xApplication<ept id="p1">**</ept> system class.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Application<ept id="p1">**</ept> substitute application class instead.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>You can reference the static members of the <bpt id="p1">**</bpt>Application<ept id="p1">**</ept> class by using the standard syntax <bpt id="p2">**</bpt>Application::checkForNewBatchJobs()<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>But you should reference the instance members of the <bpt id="p1">**</bpt>Application<ept id="p1">**</ept> class by using its corresponding special system variable <bpt id="p2">**</bpt>appl<ept id="p2">**</ept>, if one exists.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>This pattern applies to most of the x-system system classes.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Session<ept id="p1">**</ept> substitute application class is one exception to this pattern, because there is no special system variable for <bpt id="p2">**</bpt>Session<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The following table lists the x-system classes for which there is a corresponding substitute application class.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The special global variables are also shown for those classes that have one.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Application class</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>x-system class</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Global variable</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Args</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xArgs<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>(none)</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Application</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xApplication<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>appl<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>ClassFactory</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xClassFactory<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>classFactory<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Company</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xCompany<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>appl.company<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Global</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xGlobal<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>(none)</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Info</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xInfo<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Infolog<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>MenuFunction</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xMenuFunction<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>(none)</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Session</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xSession<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>(none)</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>VersionControl</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xVersionControl<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>versionControl<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Example for x-system classes</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The following method demonstrates the syntax for using several special variables that reference instances of the substitute application classes.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Execute startup commands</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>SysStartupCmd<ept id="p1">**</ept> class framework to execute commands at startup.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>When Microsoft Dynamics 365 for Operations starts, calls are made to the <bpt id="p1">**</bpt>startup<ept id="p1">**</ept> methods on the application-substituted kernel classes <bpt id="p2">**</bpt>Application<ept id="p2">**</ept> (<bpt id="p3">**</bpt>Application.startup<ept id="p3">**</ept>) and <bpt id="p4">**</bpt>Info<ept id="p4">**</ept> (<bpt id="p5">**</bpt>Info.startup<ept id="p5">**</ept>).</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>startup<ept id="p1">**</ept> methods are used for vital system and version-specific calls, and you must never directly modify these methods.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Instead, use the <bpt id="p1">**</bpt>SysStartupCmd<ept id="p1">**</ept> framework.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Serious consequences may follow if the SYS layer versions of the startup methods are not called.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>When Microsoft Dynamics 365 for Operations is started, calls are executed in the sequence shown in the following code.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Commands available when Microsoft Dynamics 365 for Operations starts</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The commands that are available when Dynamics 365 for Operations starts are listed in the <bpt id="p1">**</bpt>SysStartupCmd.construct<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The commands include the following:</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>AutoRun</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>AOTImport</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Synchronize</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The following code example shows how to execute a new command when Dynamics 365 for Operations starts.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>A class that extends SysStartupCmd is created that performs your specific task.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Then modify the construct method on SysStartupCmd to call your class.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>You can add parameters commands that are executed on startup to the Command to run at application startup field on the General tab in the Dynamics 365 for Operations Configuration Utility.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Instead of giving the command from the configuration utility, you might choose to use the command-line parameter <bpt id="p1">**</bpt>-startupcmd=<ept id="p1">**</ept> <bpt id="p2">*</bpt>MyCommand<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Batch processing classes</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Implement classes by using the batch processing system, and by extending the <bpt id="p1">**</bpt>RunBase<ept id="p1">**</ept> and the <bpt id="p2">**</bpt>RunBaseBatch<ept id="p2">**</ept> classes.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Remove the <bpt id="p1">**</bpt>Recurrence<ept id="p1">**</ept> button from the <bpt id="p2">**</bpt>Batch processing<ept id="p2">**</ept> dialog by using the <bpt id="p3">**</bpt>Args::parmEnum<ept id="p3">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>It is recommended that you designate a class to run as a server-bound batch method.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Server-bound batch methods are more secure than methods that are not server-bound batch for the following reasons:</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The method executes by using the permissions of the user who submitted the method.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The method can interact with the client, which is processing the method, by using only certain Info and Global class methods.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>This limits interaction with the client.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Enable a class to run as a server-bound batch method</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Create a class that extends the <bpt id="p1">**</bpt>RunBaseBatch<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Override the <bpt id="p1">**</bpt>RunBaseBatch.runsImpersonated<ept id="p1">**</ept> method to return a value of <bpt id="p2">**</bpt>true<ept id="p2">**</ept>, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Confirm that the class calls only the following <bpt id="p1">**</bpt>Info<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Global<ept id="p2">**</ept> class methods:</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>add<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Info.copy<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Info.cut<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Info.import<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Info.export<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Info.line<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Info.num<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Global::error<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Global::info<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Global::warning<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Info.line<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Info.num<ept id="p2">**</ept> methods are inherited from the <bpt id="p3">**</bpt>xInfo<ept id="p3">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Remove the recurrence button from the batch processing dialog</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>When you implement a class by using the batch processing system, call the <bpt id="p1">**</bpt>Args.parmEnum<ept id="p1">**</ept> method, and pass the <bpt id="p2">**</bpt>NoYes::Yes<ept id="p2">**</ept> system enumeration value to remove the <bpt id="p3">**</bpt>Recurrence<ept id="p3">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>NoYes<ept id="p1">**</ept> system enumeration determines whether the recurrence button is removed from the batch processing dialog.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>The default value is <bpt id="p1">**</bpt>NoYes::No<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>In the following code example, the <bpt id="p1">**</bpt>InventTransferMultiShip<ept id="p1">**</ept> class is implemented.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>BatchDialog::main<ept id="p1">**</ept> method creates the <bpt id="p2">**</bpt>Batch processing<ept id="p2">**</ept> dialog.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Image manipulation classes</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>There are two system classes that enable you to manipulate graphics and icons.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Image<ept id="p1">**</ept> class enables you to load, save, and manipulate individual images.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>For example, you can capture a screen and save it as an image, crop or rotate an image, or manipulate the color depth.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Imagelist<ept id="p1">**</ept> class enables you to work with a set of images that have some common properties, such as size and transparency color.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The image lists that are used in the application can be viewed in the application classes called <bpt id="p1">**</bpt>ImageListAppl<ph id="ph1">\_</ph><ph id="ph2">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Query object model</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The query object model contains classes to define and run a query.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>These objects are used to define the query data source, the fields returned, record ranges and relations to child data sources.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The following illustration shows the object model.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>The query components shown in the previous figure are system classes.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>The query classes are more visible when you create a dynamic query in code, but they are also used behind the scenes when you create a static query in the <bpt id="p1">**</bpt>Application Explorer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>System class</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>QueryRun<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Executes the query and fetches the data.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Query<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Holds some properties itself and has one or more related data sources.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>The top level of the query definition.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>QueryBuildDataSource<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Defines access to a single data source in the query.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>If more than one data source exists at the same level in a query, they result in separate SQL statements that are executed sequentially.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>If one data source exists as a child of another data source, a join is created between the two data sources.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>QueryBuildFieldList<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Defines which fields are returned from the database.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The default is that the field list is dynamic, which returns all fields from the data source table, map, or view.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Each data source has only one <bpt id="p1">**</bpt>QueryBuildFieldList<ept id="p1">**</ept> object, which contains information on all selected fields.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>It's possible to specify aggregate functions like <bpt id="p1">**</bpt>SUM<ept id="p1">**</ept>, <bpt id="p2">**</bpt>COUNT<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>AVG<ept id="p3">**</ept> on the field list object.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>QueryBuildRange<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Defines a subset of records returned based on a single field.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>A range is translated into a <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> clause in the query SQL statement.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>If more than one field is used to limit the query (<bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> clause), the data source will contain more than one range.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>QueryBuildDynalink<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Contains information regarding a relation (limitation) to an external record.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>When the query is run, this information is converted to additional entries in the <bpt id="p1">**</bpt>WHERE<ept id="p1">**</ept> clause of the query SQL statement.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Can only exist on the parent data source of a query.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>The function is used by forms, when two data sources are synchronized.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Then the child data source will contain a dynalink or dynalinks to the parent data source.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>The function is used even if the two data sources are placed in two different forms but are still synchronized.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>QueryBuildLink<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Specifies the relation between the two data sources in the join.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Can only exist on a child data source.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>System classes overview</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>System classes (or kernel classes) are implemented in C++.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The source for these classes is not available.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>A system class can have:</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Static methods (or class methods)</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Dynamic methods</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Properties: these are member functions to set properties.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>LeftMargin<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>You cannot override system class methods.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>It is not intended that you design your application objects from scratch by using the system classes.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Instead, use them to extend or alter the default functionality in the <bpt id="p1">**</bpt>Application Explorer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>For example, you could dynamically add extra information to an existing report or change the available options on a form, depending on the user's choice in a previous form.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Collection classes</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The collection classes enable you to create lists, sets, structs, maps, and arrays.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Application object classes</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>These system classes hold functions that are activated whenever you use the <bpt id="p1">**</bpt>Application Explorer <ept id="p1">**</ept>to create your application.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>For example, the system uses the <bpt id="p1">**</bpt>FormDesign<ept id="p1">**</ept> class when you define the layout of your form in the <bpt id="p2">**</bpt>Designs<ept id="p2">**</ept> node in the <bpt id="p3">**</bpt>Application Explorer.<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>These classes also enable you to create and modify application objects.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>For example, if you want to change a property on a form string field, see Forms System classes and Query System Classes.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Integration classes</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>The integration to the environment is typically implemented by classes.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Some examples of classes of this category are:</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COM<ept id="p1">**</ept>: call of methods on COM objects</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DLL<ept id="p1">**</ept>: call of Microsoft Windows DLL functions</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IO<ept id="p1">**</ept>: Read and write external files</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ODBCConnection<ept id="p1">**</ept>: an ODBC interface to a foreign database</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Event terminology and keywords</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>You can use the event design pattern to make your code more modular and reusable.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>The term <bpt id="p1">**</bpt>event<ept id="p1">**</ept> is a metaphor that explains how <bpt id="p2">**</bpt>delegates<ept id="p2">**</ept> are used.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>When something important occurs during a program run, there might be other modules that need to process the occurrence.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>These important occurrences are called <bpt id="p1">**</bpt>events<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>When an event occurs, the program tells its <bpt id="p1">**</bpt>notifier<ept id="p1">**</ept> for the event that the notifier must send notifications of the event.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>A notification must be sent to all the <bpt id="p1">**</bpt>event handlers<ept id="p1">**</ept> that are <bpt id="p2">**</bpt>subscribers<ept id="p2">**</ept> of the notifier.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>When the program tells its notifier to send the notifications, we call that <bpt id="p1">**</bpt>raising<ept id="p1">**</ept> an event.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>The following table displays the terms that are used to describe the event metaphor.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>event</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>An important occurrence in a program module where additional modules must process the occurrence.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>notifier</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>The program element that sends information about the event to all the event handlers that are subscribed to the notifier.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>subscriber</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>The program functions or methods that are subscribed to an event notifier.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>event handler</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>The methods that subscribe to an event notifier.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Only the appropriate kind of methods can be event handlers.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Keywords used for programming with delegates</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>The following table shows the keywords that describe the use of delegates.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Keyword or term</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>delegate<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>The code shows how the delegate looks in the method editor in the MorphX client.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>The return type is always void, so it is not mentioned in the syntax.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>No code is allowed inside the <bpt id="p1">**</bpt>{}<ept id="p1">**</ept> braces.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>eventHandler<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>The syntax of the <bpt id="p1">**</bpt>eventHandler<ept id="p1">**</ept> keyword might give the impression that <bpt id="p2">**</bpt>eventHandler<ept id="p2">**</ept> is an X++ function, but it is not a function.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>eventHandler<ept id="p1">**</ept> keyword tells the compiler that a method is being subscribed to a delegate.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Subscribe or add a method to a <bpt id="p1">**</bpt>delegate<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The static method <bpt id="p1">**</bpt>OtherClass::aStaticMethod<ept id="p1">**</ept> becomes subscribed to the delegate.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Call a <bpt id="p1">**</bpt>delegate<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>This call to the delegate prompts the delegate to call each method that is subscribed to the delegate.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>The subscribed methods are called in the same sequence in which they were added to the delegate.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>One subscribed method must complete before the delegate calls the next method.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>